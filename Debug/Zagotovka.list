
Zagotovka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002ea28  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bc58  0802ec28  0802ec28  0002fc28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803a880  0803a880  0003c648  2**0
                  CONTENTS
  4 .ARM          00000008  0803a880  0803a880  0003b880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803a888  0803a888  0003c648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803a888  0803a888  0003b888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803a88c  0803a88c  0003b88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000508  20000000  0803a890  0003c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000508  0803ad98  0003c508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200005a8  0803ae38  0003c5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0002e1d4  20000648  0803aed8  0003c648  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  2002e81c  0803aed8  0003c81c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0003c648  2**0
                  CONTENTS, READONLY
 14 .debug_info   00046dda  00000000  00000000  0003c676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000088c2  00000000  00000000  00083450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000035f8  00000000  00000000  0008bd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002b0b  00000000  00000000  0008f310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00035bcd  00000000  00000000  00091e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00044fc4  00000000  00000000  000c79e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011d847  00000000  00000000  0010c9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0022a1f3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000102f0  00000000  00000000  0022a238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  0023a528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000648 	.word	0x20000648
 800021c:	00000000 	.word	0x00000000
 8000220:	0802ec10 	.word	0x0802ec10

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000064c 	.word	0x2000064c
 800023c:	0802ec10 	.word	0x0802ec10

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	@ 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_ldivmod>:
 8000688:	b97b      	cbnz	r3, 80006aa <__aeabi_ldivmod+0x22>
 800068a:	b972      	cbnz	r2, 80006aa <__aeabi_ldivmod+0x22>
 800068c:	2900      	cmp	r1, #0
 800068e:	bfbe      	ittt	lt
 8000690:	2000      	movlt	r0, #0
 8000692:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000696:	e006      	blt.n	80006a6 <__aeabi_ldivmod+0x1e>
 8000698:	bf08      	it	eq
 800069a:	2800      	cmpeq	r0, #0
 800069c:	bf1c      	itt	ne
 800069e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80006a2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80006a6:	f000 b9ed 	b.w	8000a84 <__aeabi_idiv0>
 80006aa:	f1ad 0c08 	sub.w	ip, sp, #8
 80006ae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b2:	2900      	cmp	r1, #0
 80006b4:	db09      	blt.n	80006ca <__aeabi_ldivmod+0x42>
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db1a      	blt.n	80006f0 <__aeabi_ldivmod+0x68>
 80006ba:	f000 f885 	bl	80007c8 <__udivmoddi4>
 80006be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c6:	b004      	add	sp, #16
 80006c8:	4770      	bx	lr
 80006ca:	4240      	negs	r0, r0
 80006cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	db1b      	blt.n	800070c <__aeabi_ldivmod+0x84>
 80006d4:	f000 f878 	bl	80007c8 <__udivmoddi4>
 80006d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e0:	b004      	add	sp, #16
 80006e2:	4240      	negs	r0, r0
 80006e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e8:	4252      	negs	r2, r2
 80006ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ee:	4770      	bx	lr
 80006f0:	4252      	negs	r2, r2
 80006f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f6:	f000 f867 	bl	80007c8 <__udivmoddi4>
 80006fa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000702:	b004      	add	sp, #16
 8000704:	4240      	negs	r0, r0
 8000706:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800070a:	4770      	bx	lr
 800070c:	4252      	negs	r2, r2
 800070e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000712:	f000 f859 	bl	80007c8 <__udivmoddi4>
 8000716:	f8dd e004 	ldr.w	lr, [sp, #4]
 800071a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800071e:	b004      	add	sp, #16
 8000720:	4252      	negs	r2, r2
 8000722:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000726:	4770      	bx	lr

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000738:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800073c:	f000 b9a2 	b.w	8000a84 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	460c      	mov	r4, r1
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d14e      	bne.n	8000872 <__udivmoddi4+0xaa>
 80007d4:	4694      	mov	ip, r2
 80007d6:	458c      	cmp	ip, r1
 80007d8:	4686      	mov	lr, r0
 80007da:	fab2 f282 	clz	r2, r2
 80007de:	d962      	bls.n	80008a6 <__udivmoddi4+0xde>
 80007e0:	b14a      	cbz	r2, 80007f6 <__udivmoddi4+0x2e>
 80007e2:	f1c2 0320 	rsb	r3, r2, #32
 80007e6:	4091      	lsls	r1, r2
 80007e8:	fa20 f303 	lsr.w	r3, r0, r3
 80007ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f0:	4319      	orrs	r1, r3
 80007f2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fa:	fa1f f68c 	uxth.w	r6, ip
 80007fe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000802:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000806:	fb07 1114 	mls	r1, r7, r4, r1
 800080a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080e:	fb04 f106 	mul.w	r1, r4, r6
 8000812:	4299      	cmp	r1, r3
 8000814:	d90a      	bls.n	800082c <__udivmoddi4+0x64>
 8000816:	eb1c 0303 	adds.w	r3, ip, r3
 800081a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800081e:	f080 8112 	bcs.w	8000a46 <__udivmoddi4+0x27e>
 8000822:	4299      	cmp	r1, r3
 8000824:	f240 810f 	bls.w	8000a46 <__udivmoddi4+0x27e>
 8000828:	3c02      	subs	r4, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a59      	subs	r1, r3, r1
 800082e:	fa1f f38e 	uxth.w	r3, lr
 8000832:	fbb1 f0f7 	udiv	r0, r1, r7
 8000836:	fb07 1110 	mls	r1, r7, r0, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb00 f606 	mul.w	r6, r0, r6
 8000842:	429e      	cmp	r6, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x94>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800084e:	f080 80fc 	bcs.w	8000a4a <__udivmoddi4+0x282>
 8000852:	429e      	cmp	r6, r3
 8000854:	f240 80f9 	bls.w	8000a4a <__udivmoddi4+0x282>
 8000858:	4463      	add	r3, ip
 800085a:	3802      	subs	r0, #2
 800085c:	1b9b      	subs	r3, r3, r6
 800085e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000862:	2100      	movs	r1, #0
 8000864:	b11d      	cbz	r5, 800086e <__udivmoddi4+0xa6>
 8000866:	40d3      	lsrs	r3, r2
 8000868:	2200      	movs	r2, #0
 800086a:	e9c5 3200 	strd	r3, r2, [r5]
 800086e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000872:	428b      	cmp	r3, r1
 8000874:	d905      	bls.n	8000882 <__udivmoddi4+0xba>
 8000876:	b10d      	cbz	r5, 800087c <__udivmoddi4+0xb4>
 8000878:	e9c5 0100 	strd	r0, r1, [r5]
 800087c:	2100      	movs	r1, #0
 800087e:	4608      	mov	r0, r1
 8000880:	e7f5      	b.n	800086e <__udivmoddi4+0xa6>
 8000882:	fab3 f183 	clz	r1, r3
 8000886:	2900      	cmp	r1, #0
 8000888:	d146      	bne.n	8000918 <__udivmoddi4+0x150>
 800088a:	42a3      	cmp	r3, r4
 800088c:	d302      	bcc.n	8000894 <__udivmoddi4+0xcc>
 800088e:	4290      	cmp	r0, r2
 8000890:	f0c0 80f0 	bcc.w	8000a74 <__udivmoddi4+0x2ac>
 8000894:	1a86      	subs	r6, r0, r2
 8000896:	eb64 0303 	sbc.w	r3, r4, r3
 800089a:	2001      	movs	r0, #1
 800089c:	2d00      	cmp	r5, #0
 800089e:	d0e6      	beq.n	800086e <__udivmoddi4+0xa6>
 80008a0:	e9c5 6300 	strd	r6, r3, [r5]
 80008a4:	e7e3      	b.n	800086e <__udivmoddi4+0xa6>
 80008a6:	2a00      	cmp	r2, #0
 80008a8:	f040 8090 	bne.w	80009cc <__udivmoddi4+0x204>
 80008ac:	eba1 040c 	sub.w	r4, r1, ip
 80008b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b4:	fa1f f78c 	uxth.w	r7, ip
 80008b8:	2101      	movs	r1, #1
 80008ba:	fbb4 f6f8 	udiv	r6, r4, r8
 80008be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008c2:	fb08 4416 	mls	r4, r8, r6, r4
 80008c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008ca:	fb07 f006 	mul.w	r0, r7, r6
 80008ce:	4298      	cmp	r0, r3
 80008d0:	d908      	bls.n	80008e4 <__udivmoddi4+0x11c>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80008da:	d202      	bcs.n	80008e2 <__udivmoddi4+0x11a>
 80008dc:	4298      	cmp	r0, r3
 80008de:	f200 80cd 	bhi.w	8000a7c <__udivmoddi4+0x2b4>
 80008e2:	4626      	mov	r6, r4
 80008e4:	1a1c      	subs	r4, r3, r0
 80008e6:	fa1f f38e 	uxth.w	r3, lr
 80008ea:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ee:	fb08 4410 	mls	r4, r8, r0, r4
 80008f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008f6:	fb00 f707 	mul.w	r7, r0, r7
 80008fa:	429f      	cmp	r7, r3
 80008fc:	d908      	bls.n	8000910 <__udivmoddi4+0x148>
 80008fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000902:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000906:	d202      	bcs.n	800090e <__udivmoddi4+0x146>
 8000908:	429f      	cmp	r7, r3
 800090a:	f200 80b0 	bhi.w	8000a6e <__udivmoddi4+0x2a6>
 800090e:	4620      	mov	r0, r4
 8000910:	1bdb      	subs	r3, r3, r7
 8000912:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000916:	e7a5      	b.n	8000864 <__udivmoddi4+0x9c>
 8000918:	f1c1 0620 	rsb	r6, r1, #32
 800091c:	408b      	lsls	r3, r1
 800091e:	fa22 f706 	lsr.w	r7, r2, r6
 8000922:	431f      	orrs	r7, r3
 8000924:	fa20 fc06 	lsr.w	ip, r0, r6
 8000928:	fa04 f301 	lsl.w	r3, r4, r1
 800092c:	ea43 030c 	orr.w	r3, r3, ip
 8000930:	40f4      	lsrs	r4, r6
 8000932:	fa00 f801 	lsl.w	r8, r0, r1
 8000936:	0c38      	lsrs	r0, r7, #16
 8000938:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800093c:	fbb4 fef0 	udiv	lr, r4, r0
 8000940:	fa1f fc87 	uxth.w	ip, r7
 8000944:	fb00 441e 	mls	r4, r0, lr, r4
 8000948:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800094c:	fb0e f90c 	mul.w	r9, lr, ip
 8000950:	45a1      	cmp	r9, r4
 8000952:	fa02 f201 	lsl.w	r2, r2, r1
 8000956:	d90a      	bls.n	800096e <__udivmoddi4+0x1a6>
 8000958:	193c      	adds	r4, r7, r4
 800095a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800095e:	f080 8084 	bcs.w	8000a6a <__udivmoddi4+0x2a2>
 8000962:	45a1      	cmp	r9, r4
 8000964:	f240 8081 	bls.w	8000a6a <__udivmoddi4+0x2a2>
 8000968:	f1ae 0e02 	sub.w	lr, lr, #2
 800096c:	443c      	add	r4, r7
 800096e:	eba4 0409 	sub.w	r4, r4, r9
 8000972:	fa1f f983 	uxth.w	r9, r3
 8000976:	fbb4 f3f0 	udiv	r3, r4, r0
 800097a:	fb00 4413 	mls	r4, r0, r3, r4
 800097e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000982:	fb03 fc0c 	mul.w	ip, r3, ip
 8000986:	45a4      	cmp	ip, r4
 8000988:	d907      	bls.n	800099a <__udivmoddi4+0x1d2>
 800098a:	193c      	adds	r4, r7, r4
 800098c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000990:	d267      	bcs.n	8000a62 <__udivmoddi4+0x29a>
 8000992:	45a4      	cmp	ip, r4
 8000994:	d965      	bls.n	8000a62 <__udivmoddi4+0x29a>
 8000996:	3b02      	subs	r3, #2
 8000998:	443c      	add	r4, r7
 800099a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800099e:	fba0 9302 	umull	r9, r3, r0, r2
 80009a2:	eba4 040c 	sub.w	r4, r4, ip
 80009a6:	429c      	cmp	r4, r3
 80009a8:	46ce      	mov	lr, r9
 80009aa:	469c      	mov	ip, r3
 80009ac:	d351      	bcc.n	8000a52 <__udivmoddi4+0x28a>
 80009ae:	d04e      	beq.n	8000a4e <__udivmoddi4+0x286>
 80009b0:	b155      	cbz	r5, 80009c8 <__udivmoddi4+0x200>
 80009b2:	ebb8 030e 	subs.w	r3, r8, lr
 80009b6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ba:	fa04 f606 	lsl.w	r6, r4, r6
 80009be:	40cb      	lsrs	r3, r1
 80009c0:	431e      	orrs	r6, r3
 80009c2:	40cc      	lsrs	r4, r1
 80009c4:	e9c5 6400 	strd	r6, r4, [r5]
 80009c8:	2100      	movs	r1, #0
 80009ca:	e750      	b.n	800086e <__udivmoddi4+0xa6>
 80009cc:	f1c2 0320 	rsb	r3, r2, #32
 80009d0:	fa20 f103 	lsr.w	r1, r0, r3
 80009d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009d8:	fa24 f303 	lsr.w	r3, r4, r3
 80009dc:	4094      	lsls	r4, r2
 80009de:	430c      	orrs	r4, r1
 80009e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009e8:	fa1f f78c 	uxth.w	r7, ip
 80009ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80009f0:	fb08 3110 	mls	r1, r8, r0, r3
 80009f4:	0c23      	lsrs	r3, r4, #16
 80009f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009fa:	fb00 f107 	mul.w	r1, r0, r7
 80009fe:	4299      	cmp	r1, r3
 8000a00:	d908      	bls.n	8000a14 <__udivmoddi4+0x24c>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000a0a:	d22c      	bcs.n	8000a66 <__udivmoddi4+0x29e>
 8000a0c:	4299      	cmp	r1, r3
 8000a0e:	d92a      	bls.n	8000a66 <__udivmoddi4+0x29e>
 8000a10:	3802      	subs	r0, #2
 8000a12:	4463      	add	r3, ip
 8000a14:	1a5b      	subs	r3, r3, r1
 8000a16:	b2a4      	uxth	r4, r4
 8000a18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a24:	fb01 f307 	mul.w	r3, r1, r7
 8000a28:	42a3      	cmp	r3, r4
 8000a2a:	d908      	bls.n	8000a3e <__udivmoddi4+0x276>
 8000a2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000a34:	d213      	bcs.n	8000a5e <__udivmoddi4+0x296>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d911      	bls.n	8000a5e <__udivmoddi4+0x296>
 8000a3a:	3902      	subs	r1, #2
 8000a3c:	4464      	add	r4, ip
 8000a3e:	1ae4      	subs	r4, r4, r3
 8000a40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a44:	e739      	b.n	80008ba <__udivmoddi4+0xf2>
 8000a46:	4604      	mov	r4, r0
 8000a48:	e6f0      	b.n	800082c <__udivmoddi4+0x64>
 8000a4a:	4608      	mov	r0, r1
 8000a4c:	e706      	b.n	800085c <__udivmoddi4+0x94>
 8000a4e:	45c8      	cmp	r8, r9
 8000a50:	d2ae      	bcs.n	80009b0 <__udivmoddi4+0x1e8>
 8000a52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a5a:	3801      	subs	r0, #1
 8000a5c:	e7a8      	b.n	80009b0 <__udivmoddi4+0x1e8>
 8000a5e:	4631      	mov	r1, r6
 8000a60:	e7ed      	b.n	8000a3e <__udivmoddi4+0x276>
 8000a62:	4603      	mov	r3, r0
 8000a64:	e799      	b.n	800099a <__udivmoddi4+0x1d2>
 8000a66:	4630      	mov	r0, r6
 8000a68:	e7d4      	b.n	8000a14 <__udivmoddi4+0x24c>
 8000a6a:	46d6      	mov	lr, sl
 8000a6c:	e77f      	b.n	800096e <__udivmoddi4+0x1a6>
 8000a6e:	4463      	add	r3, ip
 8000a70:	3802      	subs	r0, #2
 8000a72:	e74d      	b.n	8000910 <__udivmoddi4+0x148>
 8000a74:	4606      	mov	r6, r0
 8000a76:	4623      	mov	r3, r4
 8000a78:	4608      	mov	r0, r1
 8000a7a:	e70f      	b.n	800089c <__udivmoddi4+0xd4>
 8000a7c:	3e02      	subs	r6, #2
 8000a7e:	4463      	add	r3, ip
 8000a80:	e730      	b.n	80008e4 <__udivmoddi4+0x11c>
 8000a82:	bf00      	nop

08000a84 <__aeabi_idiv0>:
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <case_insensitive_strcmp+0x16>
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d101      	bne.n	8000aa2 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e056      	b.n	8000b50 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d10d      	bne.n	8000ac6 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e050      	b.n	8000b50 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d101      	bne.n	8000aba <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e04a      	b.n	8000b50 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3301      	adds	r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	73fb      	strb	r3, [r7, #15]
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	4a22      	ldr	r2, [pc, #136]	@ (8000b5c <case_insensitive_strcmp+0xd4>)
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	f003 0303 	and.w	r3, r3, #3
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d103      	bne.n	8000ae6 <case_insensitive_strcmp+0x5e>
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	f103 0220 	add.w	r2, r3, #32
 8000ae4:	e000      	b.n	8000ae8 <case_insensitive_strcmp+0x60>
 8000ae6:	7bfa      	ldrb	r2, [r7, #15]
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	73bb      	strb	r3, [r7, #14]
 8000aee:	7bbb      	ldrb	r3, [r7, #14]
 8000af0:	3301      	adds	r3, #1
 8000af2:	491a      	ldr	r1, [pc, #104]	@ (8000b5c <case_insensitive_strcmp+0xd4>)
 8000af4:	440b      	add	r3, r1
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	f003 0303 	and.w	r3, r3, #3
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d102      	bne.n	8000b06 <case_insensitive_strcmp+0x7e>
 8000b00:	7bbb      	ldrb	r3, [r7, #14]
 8000b02:	3320      	adds	r3, #32
 8000b04:	e000      	b.n	8000b08 <case_insensitive_strcmp+0x80>
 8000b06:	7bbb      	ldrb	r3, [r7, #14]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d0d0      	beq.n	8000aae <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	737b      	strb	r3, [r7, #13]
 8000b12:	7b7b      	ldrb	r3, [r7, #13]
 8000b14:	3301      	adds	r3, #1
 8000b16:	4a11      	ldr	r2, [pc, #68]	@ (8000b5c <case_insensitive_strcmp+0xd4>)
 8000b18:	4413      	add	r3, r2
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	f003 0303 	and.w	r3, r3, #3
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d103      	bne.n	8000b2c <case_insensitive_strcmp+0xa4>
 8000b24:	7b7b      	ldrb	r3, [r7, #13]
 8000b26:	f103 0220 	add.w	r2, r3, #32
 8000b2a:	e000      	b.n	8000b2e <case_insensitive_strcmp+0xa6>
 8000b2c:	7b7a      	ldrb	r2, [r7, #13]
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	733b      	strb	r3, [r7, #12]
 8000b34:	7b3b      	ldrb	r3, [r7, #12]
 8000b36:	3301      	adds	r3, #1
 8000b38:	4908      	ldr	r1, [pc, #32]	@ (8000b5c <case_insensitive_strcmp+0xd4>)
 8000b3a:	440b      	add	r3, r1
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	f003 0303 	and.w	r3, r3, #3
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d102      	bne.n	8000b4c <case_insensitive_strcmp+0xc4>
 8000b46:	7b3b      	ldrb	r3, [r7, #12]
 8000b48:	3320      	adds	r3, #32
 8000b4a:	e000      	b.n	8000b4e <case_insensitive_strcmp+0xc6>
 8000b4c:	7b3b      	ldrb	r3, [r7, #12]
 8000b4e:	1ad3      	subs	r3, r2, r3
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	0803a458 	.word	0x0803a458

08000b60 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d101      	bne.n	8000b7c <cJSON_strdup+0x1c>
    {
        return NULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e015      	b.n	8000ba8 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff fbbf 	bl	8000300 <strlen>
 8000b82:	4603      	mov	r3, r0
 8000b84:	3301      	adds	r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	4798      	blx	r3
 8000b90:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d101      	bne.n	8000b9c <cJSON_strdup+0x3c>
    {
        return NULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e005      	b.n	8000ba8 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	68b8      	ldr	r0, [r7, #8]
 8000ba2:	f02b fce8 	bl	802c576 <memcpy>

    return copy;
 8000ba6:	68bb      	ldr	r3, [r7, #8]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2028      	movs	r0, #40	@ 0x28
 8000bbe:	4798      	blx	r3
 8000bc0:	60f8      	str	r0, [r7, #12]
    if (node)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d004      	beq.n	8000bd2 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000bc8:	2228      	movs	r2, #40	@ 0x28
 8000bca:	2100      	movs	r1, #0
 8000bcc:	68f8      	ldr	r0, [r7, #12]
 8000bce:	f02a ff9d 	bl	802bb0c <memset>
    }

    return node;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000be8:	e037      	b.n	8000c5a <cJSON_Delete+0x7e>
    {
        next = item->next;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d108      	bne.n	8000c0e <cJSON_Delete+0x32>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d004      	beq.n	8000c0e <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ffe7 	bl	8000bdc <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d109      	bne.n	8000c2e <cJSON_Delete+0x52>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	691b      	ldr	r3, [r3, #16]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d005      	beq.n	8000c2e <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8000c22:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <cJSON_Delete+0x90>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	6912      	ldr	r2, [r2, #16]
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d109      	bne.n	8000c4e <cJSON_Delete+0x72>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a1b      	ldr	r3, [r3, #32]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d005      	beq.n	8000c4e <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8000c42:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <cJSON_Delete+0x90>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	6a12      	ldr	r2, [r2, #32]
 8000c4a:	4610      	mov	r0, r2
 8000c4c:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8000c4e:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <cJSON_Delete+0x90>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	4798      	blx	r3
        item = next;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d1c4      	bne.n	8000bea <cJSON_Delete+0xe>
    }
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000000 	.word	0x20000000

08000c70 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8000c74:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b098      	sub	sp, #96	@ 0x60
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
    double number = 0;
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	f04f 0300 	mov.w	r3, #0
 8000c92:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8000c9a:	f7ff ffe9 	bl	8000c70 <get_decimal_point>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <parse_number+0x36>
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d101      	bne.n	8000cba <parse_number+0x3a>
    {
        return false;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e09f      	b.n	8000dfa <parse_number+0x17a>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000cbe:	e03d      	b.n	8000d3c <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	6899      	ldr	r1, [r3, #8]
 8000cc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000cca:	440b      	add	r3, r1
 8000ccc:	4413      	add	r3, r2
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b45      	cmp	r3, #69	@ 0x45
 8000cd2:	dc17      	bgt.n	8000d04 <parse_number+0x84>
 8000cd4:	2b2b      	cmp	r3, #43	@ 0x2b
 8000cd6:	db40      	blt.n	8000d5a <parse_number+0xda>
 8000cd8:	3b2b      	subs	r3, #43	@ 0x2b
 8000cda:	2201      	movs	r2, #1
 8000cdc:	409a      	lsls	r2, r3
 8000cde:	4b4e      	ldr	r3, [pc, #312]	@ (8000e18 <parse_number+0x198>)
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bf14      	ite	ne
 8000ce6:	2301      	movne	r3, #1
 8000ce8:	2300      	moveq	r3, #0
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d10b      	bne.n	8000d08 <parse_number+0x88>
 8000cf0:	f002 0308 	and.w	r3, r2, #8
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	bf14      	ite	ne
 8000cf8:	2301      	movne	r3, #1
 8000cfa:	2300      	moveq	r3, #0
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d111      	bne.n	8000d26 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8000d02:	e02a      	b.n	8000d5a <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8000d04:	2b65      	cmp	r3, #101	@ 0x65
 8000d06:	d128      	bne.n	8000d5a <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	6899      	ldr	r1, [r3, #8]
 8000d10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d12:	440b      	add	r3, r1
 8000d14:	4413      	add	r3, r2
 8000d16:	7819      	ldrb	r1, [r3, #0]
 8000d18:	f107 0208 	add.w	r2, r7, #8
 8000d1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d1e:	4413      	add	r3, r2
 8000d20:	460a      	mov	r2, r1
 8000d22:	701a      	strb	r2, [r3, #0]
                break;
 8000d24:	e007      	b.n	8000d36 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 8000d26:	f107 0208 	add.w	r2, r7, #8
 8000d2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d2c:	4413      	add	r3, r2
 8000d2e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8000d32:	701a      	strb	r2, [r3, #0]
                break;
 8000d34:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8000d36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d38:	3301      	adds	r3, #1
 8000d3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000d3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8000d40:	d80d      	bhi.n	8000d5e <parse_number+0xde>
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d00a      	beq.n	8000d5e <parse_number+0xde>
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d4e:	441a      	add	r2, r3
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d3b3      	bcc.n	8000cc0 <parse_number+0x40>
        }
    }
loop_end:
 8000d58:	e001      	b.n	8000d5e <parse_number+0xde>
                goto loop_end;
 8000d5a:	bf00      	nop
 8000d5c:	e000      	b.n	8000d60 <parse_number+0xe0>
loop_end:
 8000d5e:	bf00      	nop
    number_c_string[i] = '\0';
 8000d60:	f107 0208 	add.w	r2, r7, #8
 8000d64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d66:	4413      	add	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8000d6c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f02a fb9c 	bl	802b4b4 <strtod>
 8000d7c:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 8000d80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d101      	bne.n	8000d8e <parse_number+0x10e>
    {
        return false; /* parse_error */
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e035      	b.n	8000dfa <parse_number+0x17a>
    }

    item->valuedouble = number;
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000d94:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8000d98:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8000d9c:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8000e08 <parse_number+0x188>
 8000da0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da8:	db04      	blt.n	8000db4 <parse_number+0x134>
    {
        item->valueint = INT_MAX;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000db0:	615a      	str	r2, [r3, #20]
 8000db2:	e015      	b.n	8000de0 <parse_number+0x160>
    }
    else if (number <= (double)INT_MIN)
 8000db4:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8000db8:	ed9f 6b15 	vldr	d6, [pc, #84]	@ 8000e10 <parse_number+0x190>
 8000dbc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc4:	d804      	bhi.n	8000dd0 <parse_number+0x150>
    {
        item->valueint = INT_MIN;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000dcc:	615a      	str	r2, [r3, #20]
 8000dce:	e007      	b.n	8000de0 <parse_number+0x160>
    }
    else
    {
        item->valueint = (int)number;
 8000dd0:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8000dd4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000dd8:	ee17 2a90 	vmov	r2, s15
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2208      	movs	r2, #8
 8000de4:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000dec:	f107 0208 	add.w	r2, r7, #8
 8000df0:	1a8a      	subs	r2, r1, r2
 8000df2:	441a      	add	r2, r3
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	609a      	str	r2, [r3, #8]
    return true;
 8000df8:	2301      	movs	r3, #1
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3760      	adds	r7, #96	@ 0x60
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	f3af 8000 	nop.w
 8000e08:	ffc00000 	.word	0xffc00000
 8000e0c:	41dfffff 	.word	0x41dfffff
 8000e10:	00000000 	.word	0x00000000
 8000e14:	c1e00000 	.word	0xc1e00000
 8000e18:	04007fe5 	.word	0x04007fe5

08000e1c <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d003      	beq.n	8000e3c <ensure+0x20>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d101      	bne.n	8000e40 <ensure+0x24>
    {
        return NULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e083      	b.n	8000f48 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d007      	beq.n	8000e58 <ensure+0x3c>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d301      	bcc.n	8000e58 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	e077      	b.n	8000f48 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	da01      	bge.n	8000e62 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e072      	b.n	8000f48 <ensure+0x12c>
    }

    needed += p->offset + 1;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	4413      	add	r3, r2
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d805      	bhi.n	8000e84 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	4413      	add	r3, r2
 8000e82:	e061      	b.n	8000f48 <ensure+0x12c>
    }

    if (p->noalloc) {
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <ensure+0x74>
        return NULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e05b      	b.n	8000f48 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e96:	d308      	bcc.n	8000eaa <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db03      	blt.n	8000ea6 <ensure+0x8a>
        {
            newsize = INT_MAX;
 8000e9e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	e004      	b.n	8000eb0 <ensure+0x94>
        }
        else
        {
            return NULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e04e      	b.n	8000f48 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a1b      	ldr	r3, [r3, #32]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d018      	beq.n	8000eea <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	6812      	ldr	r2, [r2, #0]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	4798      	blx	r3
 8000ec6:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d132      	bne.n	8000f34 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	6812      	ldr	r2, [r2, #0]
 8000ed6:	4610      	mov	r0, r2
 8000ed8:	4798      	blx	r3
            p->length = 0;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]

            return NULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e02e      	b.n	8000f48 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	68b8      	ldr	r0, [r7, #8]
 8000ef0:	4798      	blx	r3
 8000ef2:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10d      	bne.n	8000f16 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	6812      	ldr	r2, [r2, #0]
 8000f02:	4610      	mov	r0, r2
 8000f04:	4798      	blx	r3
            p->length = 0;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]

            return NULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e018      	b.n	8000f48 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6819      	ldr	r1, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	461a      	mov	r2, r3
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f02b fb27 	bl	802c576 <memcpy>
        p->hooks.deallocate(p->buffer);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69db      	ldr	r3, [r3, #28]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	6812      	ldr	r2, [r2, #0]
 8000f30:	4610      	mov	r0, r2
 8000f32:	4798      	blx	r3
    }
    p->length = newsize;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	4413      	add	r3, r2
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d013      	beq.n	8000f8a <update_offset+0x3a>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00f      	beq.n	8000f8a <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689c      	ldr	r4, [r3, #8]
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	f7ff f9c0 	bl	8000300 <strlen>
 8000f80:	4603      	mov	r3, r0
 8000f82:	18e2      	adds	r2, r4, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	e000      	b.n	8000f8c <update_offset+0x3c>
        return;
 8000f8a:	bf00      	nop
}
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd90      	pop	{r4, r7, pc}
 8000f92:	0000      	movs	r0, r0
 8000f94:	0000      	movs	r0, r0
	...

08000f98 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	ed87 0b02 	vstr	d0, [r7, #8]
 8000fa2:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8000fa6:	ed97 7b02 	vldr	d7, [r7, #8]
 8000faa:	eeb0 6bc7 	vabs.f64	d6, d7
 8000fae:	ed97 7b00 	vldr	d7, [r7]
 8000fb2:	eeb0 7bc7 	vabs.f64	d7, d7
 8000fb6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	dd04      	ble.n	8000fca <compare_double+0x32>
 8000fc0:	ed97 7b02 	vldr	d7, [r7, #8]
 8000fc4:	eeb0 7bc7 	vabs.f64	d7, d7
 8000fc8:	e003      	b.n	8000fd2 <compare_double+0x3a>
 8000fca:	ed97 7b00 	vldr	d7, [r7]
 8000fce:	eeb0 7bc7 	vabs.f64	d7, d7
 8000fd2:	ed87 7b04 	vstr	d7, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8000fd6:	ed97 6b02 	vldr	d6, [r7, #8]
 8000fda:	ed97 7b00 	vldr	d7, [r7]
 8000fde:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000fe2:	eeb0 6bc7 	vabs.f64	d6, d7
 8000fe6:	ed97 7b04 	vldr	d7, [r7, #16]
 8000fea:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 8001010 <compare_double+0x78>
 8000fee:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000ff2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffa:	bf94      	ite	ls
 8000ffc:	2301      	movls	r3, #1
 8000ffe:	2300      	movhi	r3, #0
 8001000:	b2db      	uxtb	r3, r3
}
 8001002:	4618      	mov	r0, r3
 8001004:	371c      	adds	r7, #28
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	00000000 	.word	0x00000000
 8001014:	3cb00000 	.word	0x3cb00000

08001018 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b092      	sub	sp, #72	@ 0x48
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001022:	2300      	movs	r3, #0
 8001024:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800102c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	f107 0318 	add.w	r3, r7, #24
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 800104e:	f7ff fe0f 	bl	8000c70 <get_decimal_point>
 8001052:	4603      	mov	r3, r0
 8001054:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	f04f 0300 	mov.w	r3, #0
 8001060:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <print_number+0x56>
    {
        return false;
 800106a:	2300      	movs	r3, #0
 800106c:	e0a2      	b.n	80011b4 <print_number+0x19c>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800106e:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 8001072:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001076:	eeb4 6b47 	vcmp.f64	d6, d7
 800107a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107e:	d612      	bvs.n	80010a6 <print_number+0x8e>
 8001080:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001084:	eeb0 7bc7 	vabs.f64	d7, d7
 8001088:	ed9f 6b4d 	vldr	d6, [pc, #308]	@ 80011c0 <print_number+0x1a8>
 800108c:	eeb4 7b46 	vcmp.f64	d7, d6
 8001090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001094:	bfd4      	ite	le
 8001096:	2301      	movle	r3, #1
 8001098:	2300      	movgt	r3, #0
 800109a:	b2db      	uxtb	r3, r3
 800109c:	f083 0301 	eor.w	r3, r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d007      	beq.n	80010b6 <print_number+0x9e>
    {
        length = sprintf((char*)number_buffer, "null");
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4947      	ldr	r1, [pc, #284]	@ (80011c8 <print_number+0x1b0>)
 80010ac:	4618      	mov	r0, r3
 80010ae:	f02a fbdf 	bl	802b870 <siprintf>
 80010b2:	6478      	str	r0, [r7, #68]	@ 0x44
 80010b4:	e03c      	b.n	8001130 <print_number+0x118>
    }
	else if(d == (double)item->valueint)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	ee07 3a90 	vmov	s15, r3
 80010be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010c2:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 80010c6:	eeb4 6b47 	vcmp.f64	d6, d7
 80010ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ce:	d109      	bne.n	80010e4 <print_number+0xcc>
	{
		length = sprintf((char*)number_buffer, "%d", item->valueint);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	695a      	ldr	r2, [r3, #20]
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	493c      	ldr	r1, [pc, #240]	@ (80011cc <print_number+0x1b4>)
 80010da:	4618      	mov	r0, r3
 80010dc:	f02a fbc8 	bl	802b870 <siprintf>
 80010e0:	6478      	str	r0, [r7, #68]	@ 0x44
 80010e2:	e025      	b.n	8001130 <print_number+0x118>
	}
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 80010e4:	f107 0014 	add.w	r0, r7, #20
 80010e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80010ec:	4938      	ldr	r1, [pc, #224]	@ (80011d0 <print_number+0x1b8>)
 80010ee:	f02a fbbf 	bl	802b870 <siprintf>
 80010f2:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 80010f4:	f107 0208 	add.w	r2, r7, #8
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4935      	ldr	r1, [pc, #212]	@ (80011d4 <print_number+0x1bc>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f02a fbd6 	bl	802b8b0 <siscanf>
 8001104:	4603      	mov	r3, r0
 8001106:	2b01      	cmp	r3, #1
 8001108:	d10a      	bne.n	8001120 <print_number+0x108>
 800110a:	ed97 7b02 	vldr	d7, [r7, #8]
 800110e:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8001112:	eeb0 0b47 	vmov.f64	d0, d7
 8001116:	f7ff ff3f 	bl	8000f98 <compare_double>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d107      	bne.n	8001130 <print_number+0x118>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8001120:	f107 0014 	add.w	r0, r7, #20
 8001124:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001128:	492b      	ldr	r1, [pc, #172]	@ (80011d8 <print_number+0x1c0>)
 800112a:	f02a fba1 	bl	802b870 <siprintf>
 800112e:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8001130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001132:	2b00      	cmp	r3, #0
 8001134:	db02      	blt.n	800113c <print_number+0x124>
 8001136:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001138:	2b19      	cmp	r3, #25
 800113a:	dd01      	ble.n	8001140 <print_number+0x128>
    {
        return false;
 800113c:	2300      	movs	r3, #0
 800113e:	e039      	b.n	80011b4 <print_number+0x19c>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8001140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001142:	3301      	adds	r3, #1
 8001144:	4619      	mov	r1, r3
 8001146:	6838      	ldr	r0, [r7, #0]
 8001148:	f7ff fe68 	bl	8000e1c <ensure>
 800114c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 800114e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <print_number+0x140>
    {
        return false;
 8001154:	2300      	movs	r3, #0
 8001156:	e02d      	b.n	80011b4 <print_number+0x19c>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8001158:	2300      	movs	r3, #0
 800115a:	643b      	str	r3, [r7, #64]	@ 0x40
 800115c:	e01a      	b.n	8001194 <print_number+0x17c>
    {
        if (number_buffer[i] == decimal_point)
 800115e:	f107 0214 	add.w	r2, r7, #20
 8001162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001164:	4413      	add	r3, r2
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800116c:	429a      	cmp	r2, r3
 800116e:	d105      	bne.n	800117c <print_number+0x164>
        {
            output_pointer[i] = '.';
 8001170:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001174:	4413      	add	r3, r2
 8001176:	222e      	movs	r2, #46	@ 0x2e
 8001178:	701a      	strb	r2, [r3, #0]
            continue;
 800117a:	e008      	b.n	800118e <print_number+0x176>
        }

        output_pointer[i] = number_buffer[i];
 800117c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800117e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001180:	4413      	add	r3, r2
 8001182:	f107 0114 	add.w	r1, r7, #20
 8001186:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001188:	440a      	add	r2, r1
 800118a:	7812      	ldrb	r2, [r2, #0]
 800118c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 800118e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001190:	3301      	adds	r3, #1
 8001192:	643b      	str	r3, [r7, #64]	@ 0x40
 8001194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001196:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001198:	429a      	cmp	r2, r3
 800119a:	d3e0      	bcc.n	800115e <print_number+0x146>
    }
    output_pointer[i] = '\0';
 800119c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800119e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011a0:	4413      	add	r3, r2
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011ac:	441a      	add	r2, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	609a      	str	r2, [r3, #8]

    return true;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3748      	adds	r7, #72	@ 0x48
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	f3af 8000 	nop.w
 80011c0:	ffffffff 	.word	0xffffffff
 80011c4:	7fefffff 	.word	0x7fefffff
 80011c8:	0802ec34 	.word	0x0802ec34
 80011cc:	0802ec3c 	.word	0x0802ec3c
 80011d0:	0802ec40 	.word	0x0802ec40
 80011d4:	0802ec48 	.word	0x0802ec48
 80011d8:	0802ec4c 	.word	0x0802ec4c

080011dc <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	e04c      	b.n	800128c <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4413      	add	r3, r2
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80011fc:	d90f      	bls.n	800121e <parse_hex4+0x42>
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4413      	add	r3, r2
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b39      	cmp	r3, #57	@ 0x39
 8001208:	d809      	bhi.n	800121e <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4413      	add	r3, r2
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	3b30      	subs	r3, #48	@ 0x30
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	e02d      	b.n	800127a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4413      	add	r3, r2
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b40      	cmp	r3, #64	@ 0x40
 8001228:	d90f      	bls.n	800124a <parse_hex4+0x6e>
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	4413      	add	r3, r2
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b46      	cmp	r3, #70	@ 0x46
 8001234:	d809      	bhi.n	800124a <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	4413      	add	r3, r2
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	3b37      	subs	r3, #55	@ 0x37
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	e017      	b.n	800127a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	4413      	add	r3, r2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b60      	cmp	r3, #96	@ 0x60
 8001254:	d90f      	bls.n	8001276 <parse_hex4+0x9a>
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4413      	add	r3, r2
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b66      	cmp	r3, #102	@ 0x66
 8001260:	d809      	bhi.n	8001276 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	4413      	add	r3, r2
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4413      	add	r3, r2
 8001270:	3b57      	subs	r3, #87	@ 0x57
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	e001      	b.n	800127a <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001276:	2300      	movs	r3, #0
 8001278:	e00c      	b.n	8001294 <parse_hex4+0xb8>
        }

        if (i < 3)
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d802      	bhi.n	8001286 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	3301      	adds	r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	2b03      	cmp	r3, #3
 8001290:	d9af      	bls.n	80011f2 <parse_hex4+0x16>
        }
    }

    return h;
 8001292:	68fb      	ldr	r3, [r7, #12]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	@ 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80012d0:	68ba      	ldr	r2, [r7, #8]
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b05      	cmp	r3, #5
 80012d8:	f340 80b7 	ble.w	800144a <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	3302      	adds	r3, #2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff7b 	bl	80011dc <parse_hex4>
 80012e6:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80012ee:	d304      	bcc.n	80012fa <utf16_literal_to_utf8+0x5a>
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80012f6:	f0c0 80aa 	bcc.w	800144e <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8001300:	d337      	bcc.n	8001372 <utf16_literal_to_utf8+0xd2>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001308:	d233      	bcs.n	8001372 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	3306      	adds	r3, #6
 800130e:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8001314:	230c      	movs	r3, #12
 8001316:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b05      	cmp	r3, #5
 8001322:	f340 8096 	ble.w	8001452 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b5c      	cmp	r3, #92	@ 0x5c
 800132c:	f040 8093 	bne.w	8001456 <utf16_literal_to_utf8+0x1b6>
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3301      	adds	r3, #1
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b75      	cmp	r3, #117	@ 0x75
 8001338:	f040 808d 	bne.w	8001456 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	3302      	adds	r3, #2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff4b 	bl	80011dc <parse_hex4>
 8001346:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800134e:	f0c0 8084 	bcc.w	800145a <utf16_literal_to_utf8+0x1ba>
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8001358:	d27f      	bcs.n	800145a <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	029a      	lsls	r2, r3, #10
 800135e:	4b43      	ldr	r3, [pc, #268]	@ (800146c <utf16_literal_to_utf8+0x1cc>)
 8001360:	4013      	ands	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001368:	4313      	orrs	r3, r2
 800136a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 8001370:	e004      	b.n	800137c <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8001372:	2306      	movs	r3, #6
 8001374:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800137c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001380:	d803      	bhi.n	800138a <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8001382:	2301      	movs	r3, #1
 8001384:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001388:	e01f      	b.n	80013ca <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800138a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001390:	d206      	bcs.n	80013a0 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8001392:	2302      	movs	r3, #2
 8001394:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001398:	23c0      	movs	r3, #192	@ 0xc0
 800139a:	f887 3020 	strb.w	r3, [r7, #32]
 800139e:	e014      	b.n	80013ca <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 80013a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013a6:	d206      	bcs.n	80013b6 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80013a8:	2303      	movs	r3, #3
 80013aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80013ae:	23e0      	movs	r3, #224	@ 0xe0
 80013b0:	f887 3020 	strb.w	r3, [r7, #32]
 80013b4:	e009      	b.n	80013ca <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80013b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b8:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80013bc:	d24f      	bcs.n	800145e <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80013be:	2304      	movs	r3, #4
 80013c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80013c4:	23f0      	movs	r3, #240	@ 0xf0
 80013c6:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80013ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80013ce:	3b01      	subs	r3, #1
 80013d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80013d4:	e015      	b.n	8001402 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80013d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6819      	ldr	r1, [r3, #0]
 80013e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80013e8:	440b      	add	r3, r1
 80013ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80013f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f4:	099b      	lsrs	r3, r3, #6
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80013f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80013fc:	3b01      	subs	r3, #1
 80013fe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001402:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1e5      	bne.n	80013d6 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800140a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800140e:	2b01      	cmp	r3, #1
 8001410:	d909      	bls.n	8001426 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8001412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001414:	b2d9      	uxtb	r1, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800141e:	430a      	orrs	r2, r1
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	701a      	strb	r2, [r3, #0]
 8001424:	e007      	b.n	8001436 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001428:	b2da      	uxtb	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800143e:	441a      	add	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001444:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001448:	e00b      	b.n	8001462 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800144a:	bf00      	nop
 800144c:	e008      	b.n	8001460 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800144e:	bf00      	nop
 8001450:	e006      	b.n	8001460 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001452:	bf00      	nop
 8001454:	e004      	b.n	8001460 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001456:	bf00      	nop
 8001458:	e002      	b.n	8001460 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800145a:	bf00      	nop
 800145c:	e000      	b.n	8001460 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800145e:	bf00      	nop

fail:
    return 0;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3728      	adds	r7, #40	@ 0x28
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	000ffc00 	.word	0x000ffc00

08001470 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	@ 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	3301      	adds	r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	3301      	adds	r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b22      	cmp	r3, #34	@ 0x22
 80014ac:	f040 8103 	bne.w	80016b6 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80014b8:	e017      	b.n	80014ea <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b5c      	cmp	r3, #92	@ 0x5c
 80014c0:	d110      	bne.n	80014e4 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	f080 80f1 	bcs.w	80016ba <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	3301      	adds	r3, #1
 80014dc:	61bb      	str	r3, [r7, #24]
                input_end++;
 80014de:	6a3b      	ldr	r3, [r7, #32]
 80014e0:	3301      	adds	r3, #1
 80014e2:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	3301      	adds	r3, #1
 80014e8:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6a3a      	ldr	r2, [r7, #32]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	461a      	mov	r2, r3
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d203      	bcs.n	8001504 <parse_string+0x94>
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b22      	cmp	r3, #34	@ 0x22
 8001502:	d1da      	bne.n	80014ba <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6a3a      	ldr	r2, [r7, #32]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	461a      	mov	r2, r3
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	429a      	cmp	r2, r3
 8001514:	f080 80d3 	bcs.w	80016be <parse_string+0x24e>
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b22      	cmp	r3, #34	@ 0x22
 800151e:	f040 80ce 	bne.w	80016be <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	4413      	add	r3, r2
 800152c:	6a3a      	ldr	r2, [r7, #32]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	461a      	mov	r2, r3
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	3201      	adds	r2, #1
 8001540:	4610      	mov	r0, r2
 8001542:	4798      	blx	r3
 8001544:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 80ba 	beq.w	80016c2 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001552:	e094      	b.n	800167e <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8001554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b5c      	cmp	r3, #92	@ 0x5c
 800155a:	d008      	beq.n	800156e <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800155c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800155e:	1c53      	adds	r3, r2, #1
 8001560:	627b      	str	r3, [r7, #36]	@ 0x24
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1c59      	adds	r1, r3, #1
 8001566:	60f9      	str	r1, [r7, #12]
 8001568:	7812      	ldrb	r2, [r2, #0]
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	e087      	b.n	800167e <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800156e:	2302      	movs	r3, #2
 8001570:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001572:	6a3a      	ldr	r2, [r7, #32]
 8001574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	f340 80a4 	ble.w	80016c6 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	3301      	adds	r3, #1
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b75      	cmp	r3, #117	@ 0x75
 8001586:	f300 80a0 	bgt.w	80016ca <parse_string+0x25a>
 800158a:	2b5c      	cmp	r3, #92	@ 0x5c
 800158c:	da04      	bge.n	8001598 <parse_string+0x128>
 800158e:	2b22      	cmp	r3, #34	@ 0x22
 8001590:	d05c      	beq.n	800164c <parse_string+0x1dc>
 8001592:	2b2f      	cmp	r3, #47	@ 0x2f
 8001594:	d05a      	beq.n	800164c <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001596:	e098      	b.n	80016ca <parse_string+0x25a>
            switch (input_pointer[1])
 8001598:	3b5c      	subs	r3, #92	@ 0x5c
 800159a:	2b19      	cmp	r3, #25
 800159c:	f200 8095 	bhi.w	80016ca <parse_string+0x25a>
 80015a0:	a201      	add	r2, pc, #4	@ (adr r2, 80015a8 <parse_string+0x138>)
 80015a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a6:	bf00      	nop
 80015a8:	0800164d 	.word	0x0800164d
 80015ac:	080016cb 	.word	0x080016cb
 80015b0:	080016cb 	.word	0x080016cb
 80015b4:	080016cb 	.word	0x080016cb
 80015b8:	080016cb 	.word	0x080016cb
 80015bc:	080016cb 	.word	0x080016cb
 80015c0:	08001611 	.word	0x08001611
 80015c4:	080016cb 	.word	0x080016cb
 80015c8:	080016cb 	.word	0x080016cb
 80015cc:	080016cb 	.word	0x080016cb
 80015d0:	0800161d 	.word	0x0800161d
 80015d4:	080016cb 	.word	0x080016cb
 80015d8:	080016cb 	.word	0x080016cb
 80015dc:	080016cb 	.word	0x080016cb
 80015e0:	080016cb 	.word	0x080016cb
 80015e4:	080016cb 	.word	0x080016cb
 80015e8:	080016cb 	.word	0x080016cb
 80015ec:	080016cb 	.word	0x080016cb
 80015f0:	08001629 	.word	0x08001629
 80015f4:	080016cb 	.word	0x080016cb
 80015f8:	080016cb 	.word	0x080016cb
 80015fc:	080016cb 	.word	0x080016cb
 8001600:	08001635 	.word	0x08001635
 8001604:	080016cb 	.word	0x080016cb
 8001608:	08001641 	.word	0x08001641
 800160c:	0800165d 	.word	0x0800165d
                    *output_pointer++ = '\b';
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	60fa      	str	r2, [r7, #12]
 8001616:	2208      	movs	r2, #8
 8001618:	701a      	strb	r2, [r3, #0]
                    break;
 800161a:	e02c      	b.n	8001676 <parse_string+0x206>
                    *output_pointer++ = '\f';
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	60fa      	str	r2, [r7, #12]
 8001622:	220c      	movs	r2, #12
 8001624:	701a      	strb	r2, [r3, #0]
                    break;
 8001626:	e026      	b.n	8001676 <parse_string+0x206>
                    *output_pointer++ = '\n';
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	60fa      	str	r2, [r7, #12]
 800162e:	220a      	movs	r2, #10
 8001630:	701a      	strb	r2, [r3, #0]
                    break;
 8001632:	e020      	b.n	8001676 <parse_string+0x206>
                    *output_pointer++ = '\r';
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	60fa      	str	r2, [r7, #12]
 800163a:	220d      	movs	r2, #13
 800163c:	701a      	strb	r2, [r3, #0]
                    break;
 800163e:	e01a      	b.n	8001676 <parse_string+0x206>
                    *output_pointer++ = '\t';
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	60fa      	str	r2, [r7, #12]
 8001646:	2209      	movs	r2, #9
 8001648:	701a      	strb	r2, [r3, #0]
                    break;
 800164a:	e014      	b.n	8001676 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 800164c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	1c59      	adds	r1, r3, #1
 8001654:	60f9      	str	r1, [r7, #12]
 8001656:	7812      	ldrb	r2, [r2, #0]
 8001658:	701a      	strb	r2, [r3, #0]
                    break;
 800165a:	e00c      	b.n	8001676 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	461a      	mov	r2, r3
 8001662:	6a39      	ldr	r1, [r7, #32]
 8001664:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001666:	f7ff fe1b 	bl	80012a0 <utf16_literal_to_utf8>
 800166a:	4603      	mov	r3, r0
 800166c:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d02c      	beq.n	80016ce <parse_string+0x25e>
                    break;
 8001674:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001676:	7dfb      	ldrb	r3, [r7, #23]
 8001678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800167a:	4413      	add	r3, r2
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 800167e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	429a      	cmp	r2, r3
 8001684:	f4ff af66 	bcc.w	8001554 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2210      	movs	r2, #16
 8001692:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6a3a      	ldr	r2, [r7, #32]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	461a      	mov	r2, r3
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	609a      	str	r2, [r3, #8]

    return true;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e01e      	b.n	80016f4 <parse_string+0x284>
        goto fail;
 80016b6:	bf00      	nop
 80016b8:	e00a      	b.n	80016d0 <parse_string+0x260>
                    goto fail;
 80016ba:	bf00      	nop
 80016bc:	e008      	b.n	80016d0 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 80016be:	bf00      	nop
 80016c0:	e006      	b.n	80016d0 <parse_string+0x260>
            goto fail; /* allocation failure */
 80016c2:	bf00      	nop
 80016c4:	e004      	b.n	80016d0 <parse_string+0x260>
                goto fail;
 80016c6:	bf00      	nop
 80016c8:	e002      	b.n	80016d0 <parse_string+0x260>
                    goto fail;
 80016ca:	bf00      	nop
 80016cc:	e000      	b.n	80016d0 <parse_string+0x260>
                        goto fail;
 80016ce:	bf00      	nop

fail:
    if (output != NULL)
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	69f8      	ldr	r0, [r7, #28]
 80016dc:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 80016de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d006      	beq.n	80016f2 <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	461a      	mov	r2, r3
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	609a      	str	r2, [r3, #8]
    }

    return false;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3728      	adds	r7, #40	@ 0x28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <print_string_ptr+0x28>
    {
        return false;
 8001720:	2300      	movs	r3, #0
 8001722:	e110      	b.n	8001946 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d111      	bne.n	800174e <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 800172a:	2103      	movs	r1, #3
 800172c:	6838      	ldr	r0, [r7, #0]
 800172e:	f7ff fb75 	bl	8000e1c <ensure>
 8001732:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <print_string_ptr+0x42>
        {
            return false;
 800173a:	2300      	movs	r3, #0
 800173c:	e103      	b.n	8001946 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4a83      	ldr	r2, [pc, #524]	@ (8001950 <print_string_ptr+0x254>)
 8001742:	8811      	ldrh	r1, [r2, #0]
 8001744:	7892      	ldrb	r2, [r2, #2]
 8001746:	8019      	strh	r1, [r3, #0]
 8001748:	709a      	strb	r2, [r3, #2]

        return true;
 800174a:	2301      	movs	r3, #1
 800174c:	e0fb      	b.n	8001946 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	61fb      	str	r3, [r7, #28]
 8001752:	e024      	b.n	800179e <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b22      	cmp	r3, #34	@ 0x22
 800175a:	dc0f      	bgt.n	800177c <print_string_ptr+0x80>
 800175c:	2b08      	cmp	r3, #8
 800175e:	db13      	blt.n	8001788 <print_string_ptr+0x8c>
 8001760:	3b08      	subs	r3, #8
 8001762:	4a7c      	ldr	r2, [pc, #496]	@ (8001954 <print_string_ptr+0x258>)
 8001764:	fa22 f303 	lsr.w	r3, r2, r3
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf14      	ite	ne
 8001770:	2301      	movne	r3, #1
 8001772:	2300      	moveq	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d102      	bne.n	8001780 <print_string_ptr+0x84>
 800177a:	e005      	b.n	8001788 <print_string_ptr+0x8c>
 800177c:	2b5c      	cmp	r3, #92	@ 0x5c
 800177e:	d103      	bne.n	8001788 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	3301      	adds	r3, #1
 8001784:	617b      	str	r3, [r7, #20]
                break;
 8001786:	e007      	b.n	8001798 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b1f      	cmp	r3, #31
 800178e:	d802      	bhi.n	8001796 <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3305      	adds	r3, #5
 8001794:	617b      	str	r3, [r7, #20]
                }
                break;
 8001796:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	3301      	adds	r3, #1
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1d6      	bne.n	8001754 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	4413      	add	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	3303      	adds	r3, #3
 80017b8:	4619      	mov	r1, r3
 80017ba:	6838      	ldr	r0, [r7, #0]
 80017bc:	f7ff fb2e 	bl	8000e1c <ensure>
 80017c0:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <print_string_ptr+0xd0>
    {
        return false;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e0bc      	b.n	8001946 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d117      	bne.n	8001802 <print_string_ptr+0x106>
    {
        output[0] = '\"';
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	2222      	movs	r2, #34	@ 0x22
 80017d6:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	3301      	adds	r3, #1
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f02a fec8 	bl	802c576 <memcpy>
        output[output_length + 1] = '\"';
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3301      	adds	r3, #1
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4413      	add	r3, r2
 80017ee:	2222      	movs	r2, #34	@ 0x22
 80017f0:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3302      	adds	r3, #2
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4413      	add	r3, r2
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]

        return true;
 80017fe:	2301      	movs	r3, #1
 8001800:	e0a1      	b.n	8001946 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	2222      	movs	r2, #34	@ 0x22
 8001806:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	3301      	adds	r3, #1
 800180c:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	61fb      	str	r3, [r7, #28]
 8001812:	e086      	b.n	8001922 <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b1f      	cmp	r3, #31
 800181a:	d90c      	bls.n	8001836 <print_string_ptr+0x13a>
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b22      	cmp	r3, #34	@ 0x22
 8001822:	d008      	beq.n	8001836 <print_string_ptr+0x13a>
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b5c      	cmp	r3, #92	@ 0x5c
 800182a:	d004      	beq.n	8001836 <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	781a      	ldrb	r2, [r3, #0]
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	701a      	strb	r2, [r3, #0]
 8001834:	e06f      	b.n	8001916 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	61ba      	str	r2, [r7, #24]
 800183c:	225c      	movs	r2, #92	@ 0x5c
 800183e:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b22      	cmp	r3, #34	@ 0x22
 8001846:	dc3d      	bgt.n	80018c4 <print_string_ptr+0x1c8>
 8001848:	2b08      	cmp	r3, #8
 800184a:	db59      	blt.n	8001900 <print_string_ptr+0x204>
 800184c:	3b08      	subs	r3, #8
 800184e:	2b1a      	cmp	r3, #26
 8001850:	d856      	bhi.n	8001900 <print_string_ptr+0x204>
 8001852:	a201      	add	r2, pc, #4	@ (adr r2, 8001858 <print_string_ptr+0x15c>)
 8001854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001858:	080018d9 	.word	0x080018d9
 800185c:	080018f9 	.word	0x080018f9
 8001860:	080018e9 	.word	0x080018e9
 8001864:	08001901 	.word	0x08001901
 8001868:	080018e1 	.word	0x080018e1
 800186c:	080018f1 	.word	0x080018f1
 8001870:	08001901 	.word	0x08001901
 8001874:	08001901 	.word	0x08001901
 8001878:	08001901 	.word	0x08001901
 800187c:	08001901 	.word	0x08001901
 8001880:	08001901 	.word	0x08001901
 8001884:	08001901 	.word	0x08001901
 8001888:	08001901 	.word	0x08001901
 800188c:	08001901 	.word	0x08001901
 8001890:	08001901 	.word	0x08001901
 8001894:	08001901 	.word	0x08001901
 8001898:	08001901 	.word	0x08001901
 800189c:	08001901 	.word	0x08001901
 80018a0:	08001901 	.word	0x08001901
 80018a4:	08001901 	.word	0x08001901
 80018a8:	08001901 	.word	0x08001901
 80018ac:	08001901 	.word	0x08001901
 80018b0:	08001901 	.word	0x08001901
 80018b4:	08001901 	.word	0x08001901
 80018b8:	08001901 	.word	0x08001901
 80018bc:	08001901 	.word	0x08001901
 80018c0:	080018d1 	.word	0x080018d1
 80018c4:	2b5c      	cmp	r3, #92	@ 0x5c
 80018c6:	d11b      	bne.n	8001900 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	225c      	movs	r2, #92	@ 0x5c
 80018cc:	701a      	strb	r2, [r3, #0]
                    break;
 80018ce:	e022      	b.n	8001916 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2222      	movs	r2, #34	@ 0x22
 80018d4:	701a      	strb	r2, [r3, #0]
                    break;
 80018d6:	e01e      	b.n	8001916 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2262      	movs	r2, #98	@ 0x62
 80018dc:	701a      	strb	r2, [r3, #0]
                    break;
 80018de:	e01a      	b.n	8001916 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2266      	movs	r2, #102	@ 0x66
 80018e4:	701a      	strb	r2, [r3, #0]
                    break;
 80018e6:	e016      	b.n	8001916 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	226e      	movs	r2, #110	@ 0x6e
 80018ec:	701a      	strb	r2, [r3, #0]
                    break;
 80018ee:	e012      	b.n	8001916 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2272      	movs	r2, #114	@ 0x72
 80018f4:	701a      	strb	r2, [r3, #0]
                    break;
 80018f6:	e00e      	b.n	8001916 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	2274      	movs	r2, #116	@ 0x74
 80018fc:	701a      	strb	r2, [r3, #0]
                    break;
 80018fe:	e00a      	b.n	8001916 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	4914      	ldr	r1, [pc, #80]	@ (8001958 <print_string_ptr+0x25c>)
 8001908:	69b8      	ldr	r0, [r7, #24]
 800190a:	f029 ffb1 	bl	802b870 <siprintf>
                    output_pointer += 4;
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	3304      	adds	r3, #4
 8001912:	61bb      	str	r3, [r7, #24]
                    break;
 8001914:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3301      	adds	r3, #1
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	3301      	adds	r3, #1
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f47f af74 	bne.w	8001814 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3301      	adds	r3, #1
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4413      	add	r3, r2
 8001934:	2222      	movs	r2, #34	@ 0x22
 8001936:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	3302      	adds	r3, #2
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4413      	add	r3, r2
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]

    return true;
 8001944:	2301      	movs	r3, #1
}
 8001946:	4618      	mov	r0, r3
 8001948:	3720      	adds	r7, #32
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	0802ec54 	.word	0x0802ec54
 8001954:	04000037 	.word	0x04000037
 8001958:	0802ec58 	.word	0x0802ec58

0800195c <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	6839      	ldr	r1, [r7, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fec5 	bl	80016fc <print_string_ptr>
 8001972:	4603      	mov	r3, r0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <buffer_skip_whitespace+0x16>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001992:	2300      	movs	r3, #0
 8001994:	e02c      	b.n	80019f0 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <buffer_skip_whitespace+0x2c>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d306      	bcc.n	80019b6 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	e021      	b.n	80019f0 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00d      	beq.n	80019d8 <buffer_skip_whitespace+0x5c>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d207      	bcs.n	80019d8 <buffer_skip_whitespace+0x5c>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	4413      	add	r3, r2
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b20      	cmp	r3, #32
 80019d6:	d9e9      	bls.n	80019ac <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d104      	bne.n	80019ee <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	1e5a      	subs	r2, r3, #1
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80019ee:	687b      	ldr	r3, [r7, #4]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d007      	beq.n	8001a1a <skip_utf8_bom+0x1e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <skip_utf8_bom+0x1e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <skip_utf8_bom+0x22>
    {
        return NULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e01c      	b.n	8001a58 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d018      	beq.n	8001a56 <skip_utf8_bom+0x5a>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	1d1a      	adds	r2, r3, #4
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d211      	bcs.n	8001a56 <skip_utf8_bom+0x5a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	4908      	ldr	r1, [pc, #32]	@ (8001a60 <skip_utf8_bom+0x64>)
 8001a40:	4618      	mov	r0, r3
 8001a42:	f02a f878 	bl	802bb36 <strncmp>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d104      	bne.n	8001a56 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	1cda      	adds	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001a56:	687b      	ldr	r3, [r7, #4]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	0802ec60 	.word	0x0802ec60

08001a64 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e00c      	b.n	8001a94 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f7fe fc40 	bl	8000300 <strlen>
 8001a80:	4603      	mov	r3, r0
 8001a82:	3301      	adds	r3, #1
 8001a84:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	6979      	ldr	r1, [r7, #20]
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 f805 	bl	8001a9c <cJSON_ParseWithLengthOpts>
 8001a92:	4603      	mov	r3, r0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08e      	sub	sp, #56	@ 0x38
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001aaa:	f107 0318 	add.w	r3, r7, #24
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]
 8001aba:	615a      	str	r2, [r3, #20]
 8001abc:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 8001ac2:	4b41      	ldr	r3, [pc, #260]	@ (8001bc8 <cJSON_ParseWithLengthOpts+0x12c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001ac8:	4b3f      	ldr	r3, [pc, #252]	@ (8001bc8 <cJSON_ParseWithLengthOpts+0x12c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d042      	beq.n	8001b5a <cJSON_ParseWithLengthOpts+0xbe>
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d03f      	beq.n	8001b5a <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001ae6:	4a39      	ldr	r2, [pc, #228]	@ (8001bcc <cJSON_ParseWithLengthOpts+0x130>)
 8001ae8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aec:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001af2:	4836      	ldr	r0, [pc, #216]	@ (8001bcc <cJSON_ParseWithLengthOpts+0x130>)
 8001af4:	f7ff f85c 	bl	8000bb0 <cJSON_New_Item>
 8001af8:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 8001afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d02e      	beq.n	8001b5e <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001b00:	f107 0318 	add.w	r3, r7, #24
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff79 	bl	80019fc <skip_utf8_bom>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff35 	bl	800197c <buffer_skip_whitespace>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4619      	mov	r1, r3
 8001b16:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001b18:	f000 f8fc 	bl	8001d14 <parse_value>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d01f      	beq.n	8001b62 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00e      	beq.n	8001b46 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001b28:	f107 0318 	add.w	r3, r7, #24
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff25 	bl	800197c <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001b32:	6a3a      	ldr	r2, [r7, #32]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d215      	bcs.n	8001b66 <cJSON_ParseWithLengthOpts+0xca>
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	4413      	add	r3, r2
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10f      	bne.n	8001b66 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d004      	beq.n	8001b56 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	441a      	add	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b58:	e031      	b.n	8001bbe <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8001b5a:	bf00      	nop
 8001b5c:	e004      	b.n	8001b68 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001b5e:	bf00      	nop
 8001b60:	e002      	b.n	8001b68 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001b62:	bf00      	nop
 8001b64:	e000      	b.n	8001b68 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001b66:	bf00      	nop

fail:
    if (item != NULL)
 8001b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8001b6e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001b70:	f7ff f834 	bl	8000bdc <cJSON_Delete>
    }

    if (value != NULL)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d020      	beq.n	8001bbc <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001b82:	6a3a      	ldr	r2, [r7, #32]
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d202      	bcs.n	8001b90 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	e005      	b.n	8001b9c <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d004      	beq.n	8001bac <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	441a      	add	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <cJSON_ParseWithLengthOpts+0x12c>)
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001bb8:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3738      	adds	r7, #56	@ 0x38
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000664 	.word	0x20000664
 8001bcc:	20000000 	.word	0x20000000

08001bd0 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff41 	bl	8001a64 <cJSON_ParseWithOpts>
 8001be2:	4603      	mov	r3, r0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08e      	sub	sp, #56	@ 0x38
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	2224      	movs	r2, #36	@ 0x24
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f029 ff81 	bl	802bb0c <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a38      	ldr	r2, [pc, #224]	@ (8001cf0 <print+0x104>)
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	4610      	mov	r0, r2
 8001c14:	4798      	blx	r3
 8001c16:	4603      	mov	r3, r0
 8001c18:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 8001c1a:	4b35      	ldr	r3, [pc, #212]	@ (8001cf0 <print+0x104>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d040      	beq.n	8001cb8 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8001c36:	f107 0310 	add.w	r3, r7, #16
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 f955 	bl	8001eec <print_value>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d039      	beq.n	8001cbc <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 8001c48:	f107 0310 	add.w	r3, r7, #16
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff f97f 	bl	8000f50 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00d      	beq.n	8001c76 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	6938      	ldr	r0, [r7, #16]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	3201      	adds	r2, #1
 8001c64:	4611      	mov	r1, r2
 8001c66:	4798      	blx	r3
 8001c68:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 8001c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d027      	beq.n	8001cc0 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	e01e      	b.n	8001cb4 <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	3201      	adds	r2, #1
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4798      	blx	r3
 8001c82:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 8001c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d01c      	beq.n	8001cc4 <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8001c8a:	6939      	ldr	r1, [r7, #16]
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	4293      	cmp	r3, r2
 8001c94:	bf28      	it	cs
 8001c96:	4613      	movcs	r3, r2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001c9c:	f02a fc6b 	bl	802c576 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ca4:	4413      	add	r3, r2
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4798      	blx	r3
    }

    return printed;
 8001cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cb6:	e016      	b.n	8001ce6 <print+0xfa>
        goto fail;
 8001cb8:	bf00      	nop
 8001cba:	e004      	b.n	8001cc6 <print+0xda>
        goto fail;
 8001cbc:	bf00      	nop
 8001cbe:	e002      	b.n	8001cc6 <print+0xda>
            goto fail;
 8001cc0:	bf00      	nop
 8001cc2:	e000      	b.n	8001cc6 <print+0xda>
            goto fail;
 8001cc4:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d004      	beq.n	8001cd6 <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	4798      	blx	r3
    }

    if (printed != NULL)
 8001cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <print+0xf8>
    {
        hooks->deallocate(printed);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001ce2:	4798      	blx	r3
    }

    return NULL;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3738      	adds	r7, #56	@ 0x38
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	0803166c 	.word	0x0803166c

08001cf4 <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 8001cfc:	4a04      	ldr	r2, [pc, #16]	@ (8001d10 <cJSON_PrintUnformatted+0x1c>)
 8001cfe:	2100      	movs	r1, #0
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ff73 	bl	8001bec <print>
 8001d06:	4603      	mov	r3, r0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000000 	.word	0x20000000

08001d14 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <parse_value+0x18>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <parse_value+0x1c>
    {
        return false; /* no input */
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e0d2      	b.n	8001ed6 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d01d      	beq.n	8001d72 <parse_value+0x5e>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	1d1a      	adds	r2, r3, #4
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d816      	bhi.n	8001d72 <parse_value+0x5e>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	2204      	movs	r2, #4
 8001d50:	4963      	ldr	r1, [pc, #396]	@ (8001ee0 <parse_value+0x1cc>)
 8001d52:	4618      	mov	r0, r3
 8001d54:	f029 feef 	bl	802bb36 <strncmp>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d109      	bne.n	8001d72 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2204      	movs	r2, #4
 8001d62:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	1d1a      	adds	r2, r3, #4
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	609a      	str	r2, [r3, #8]
        return true;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e0b1      	b.n	8001ed6 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d01d      	beq.n	8001db4 <parse_value+0xa0>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	1d5a      	adds	r2, r3, #5
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d816      	bhi.n	8001db4 <parse_value+0xa0>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	4413      	add	r3, r2
 8001d90:	2205      	movs	r2, #5
 8001d92:	4954      	ldr	r1, [pc, #336]	@ (8001ee4 <parse_value+0x1d0>)
 8001d94:	4618      	mov	r0, r3
 8001d96:	f029 fece 	bl	802bb36 <strncmp>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d109      	bne.n	8001db4 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	1d5a      	adds	r2, r3, #5
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	609a      	str	r2, [r3, #8]
        return true;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e090      	b.n	8001ed6 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d020      	beq.n	8001dfc <parse_value+0xe8>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	1d1a      	adds	r2, r3, #4
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d819      	bhi.n	8001dfc <parse_value+0xe8>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	4944      	ldr	r1, [pc, #272]	@ (8001ee8 <parse_value+0x1d4>)
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f029 fead 	bl	802bb36 <strncmp>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10c      	bne.n	8001dfc <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2202      	movs	r2, #2
 8001de6:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	1d1a      	adds	r2, r3, #4
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	609a      	str	r2, [r3, #8]
        return true;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e06c      	b.n	8001ed6 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d013      	beq.n	8001e2a <parse_value+0x116>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d20d      	bcs.n	8001e2a <parse_value+0x116>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	4413      	add	r3, r2
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b22      	cmp	r3, #34	@ 0x22
 8001e1c:	d105      	bne.n	8001e2a <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001e1e:	6839      	ldr	r1, [r7, #0]
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff fb25 	bl	8001470 <parse_string>
 8001e26:	4603      	mov	r3, r0
 8001e28:	e055      	b.n	8001ed6 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d023      	beq.n	8001e78 <parse_value+0x164>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d21d      	bcs.n	8001e78 <parse_value+0x164>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	4413      	add	r3, r2
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b2d      	cmp	r3, #45	@ 0x2d
 8001e4a:	d00f      	beq.n	8001e6c <parse_value+0x158>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	4413      	add	r3, r2
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b2f      	cmp	r3, #47	@ 0x2f
 8001e5a:	d90d      	bls.n	8001e78 <parse_value+0x164>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4413      	add	r3, r2
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b39      	cmp	r3, #57	@ 0x39
 8001e6a:	d805      	bhi.n	8001e78 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001e6c:	6839      	ldr	r1, [r7, #0]
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7fe ff06 	bl	8000c80 <parse_number>
 8001e74:	4603      	mov	r3, r0
 8001e76:	e02e      	b.n	8001ed6 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d013      	beq.n	8001ea6 <parse_value+0x192>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d20d      	bcs.n	8001ea6 <parse_value+0x192>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	4413      	add	r3, r2
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b5b      	cmp	r3, #91	@ 0x5b
 8001e98:	d105      	bne.n	8001ea6 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001e9a:	6839      	ldr	r1, [r7, #0]
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f909 	bl	80020b4 <parse_array>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	e017      	b.n	8001ed6 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d013      	beq.n	8001ed4 <parse_value+0x1c0>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d20d      	bcs.n	8001ed4 <parse_value+0x1c0>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b7b      	cmp	r3, #123	@ 0x7b
 8001ec6:	d105      	bne.n	8001ed4 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001ec8:	6839      	ldr	r1, [r7, #0]
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fa3c 	bl	8002348 <parse_object>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	e000      	b.n	8001ed6 <parse_value+0x1c2>
    }

    return false;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	0802ec34 	.word	0x0802ec34
 8001ee4:	0802ec64 	.word	0x0802ec64
 8001ee8:	0802ec6c 	.word	0x0802ec6c

08001eec <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <print_value+0x1a>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <print_value+0x1e>
    {
        return false;
 8001f06:	2300      	movs	r3, #0
 8001f08:	e0c9      	b.n	800209e <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b80      	cmp	r3, #128	@ 0x80
 8001f12:	f000 808e 	beq.w	8002032 <print_value+0x146>
 8001f16:	2b80      	cmp	r3, #128	@ 0x80
 8001f18:	f300 80c0 	bgt.w	800209c <print_value+0x1b0>
 8001f1c:	2b20      	cmp	r3, #32
 8001f1e:	dc49      	bgt.n	8001fb4 <print_value+0xc8>
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f340 80bb 	ble.w	800209c <print_value+0x1b0>
 8001f26:	3b01      	subs	r3, #1
 8001f28:	2b1f      	cmp	r3, #31
 8001f2a:	f200 80b7 	bhi.w	800209c <print_value+0x1b0>
 8001f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f34 <print_value+0x48>)
 8001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f34:	08001fdf 	.word	0x08001fdf
 8001f38:	08002003 	.word	0x08002003
 8001f3c:	0800209d 	.word	0x0800209d
 8001f40:	08001fbb 	.word	0x08001fbb
 8001f44:	0800209d 	.word	0x0800209d
 8001f48:	0800209d 	.word	0x0800209d
 8001f4c:	0800209d 	.word	0x0800209d
 8001f50:	08002027 	.word	0x08002027
 8001f54:	0800209d 	.word	0x0800209d
 8001f58:	0800209d 	.word	0x0800209d
 8001f5c:	0800209d 	.word	0x0800209d
 8001f60:	0800209d 	.word	0x0800209d
 8001f64:	0800209d 	.word	0x0800209d
 8001f68:	0800209d 	.word	0x0800209d
 8001f6c:	0800209d 	.word	0x0800209d
 8001f70:	08002079 	.word	0x08002079
 8001f74:	0800209d 	.word	0x0800209d
 8001f78:	0800209d 	.word	0x0800209d
 8001f7c:	0800209d 	.word	0x0800209d
 8001f80:	0800209d 	.word	0x0800209d
 8001f84:	0800209d 	.word	0x0800209d
 8001f88:	0800209d 	.word	0x0800209d
 8001f8c:	0800209d 	.word	0x0800209d
 8001f90:	0800209d 	.word	0x0800209d
 8001f94:	0800209d 	.word	0x0800209d
 8001f98:	0800209d 	.word	0x0800209d
 8001f9c:	0800209d 	.word	0x0800209d
 8001fa0:	0800209d 	.word	0x0800209d
 8001fa4:	0800209d 	.word	0x0800209d
 8001fa8:	0800209d 	.word	0x0800209d
 8001fac:	0800209d 	.word	0x0800209d
 8001fb0:	08002085 	.word	0x08002085
 8001fb4:	2b40      	cmp	r3, #64	@ 0x40
 8001fb6:	d06b      	beq.n	8002090 <print_value+0x1a4>
 8001fb8:	e070      	b.n	800209c <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8001fba:	2105      	movs	r1, #5
 8001fbc:	6838      	ldr	r0, [r7, #0]
 8001fbe:	f7fe ff2d 	bl	8000e1c <ensure>
 8001fc2:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <print_value+0xe2>
            {
                return false;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e067      	b.n	800209e <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4a35      	ldr	r2, [pc, #212]	@ (80020a8 <print_value+0x1bc>)
 8001fd2:	6810      	ldr	r0, [r2, #0]
 8001fd4:	6018      	str	r0, [r3, #0]
 8001fd6:	7912      	ldrb	r2, [r2, #4]
 8001fd8:	711a      	strb	r2, [r3, #4]
            return true;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e05f      	b.n	800209e <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8001fde:	2106      	movs	r1, #6
 8001fe0:	6838      	ldr	r0, [r7, #0]
 8001fe2:	f7fe ff1b 	bl	8000e1c <ensure>
 8001fe6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <print_value+0x106>
            {
                return false;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e055      	b.n	800209e <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4a2d      	ldr	r2, [pc, #180]	@ (80020ac <print_value+0x1c0>)
 8001ff6:	6810      	ldr	r0, [r2, #0]
 8001ff8:	6018      	str	r0, [r3, #0]
 8001ffa:	8892      	ldrh	r2, [r2, #4]
 8001ffc:	809a      	strh	r2, [r3, #4]
            return true;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e04d      	b.n	800209e <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8002002:	2105      	movs	r1, #5
 8002004:	6838      	ldr	r0, [r7, #0]
 8002006:	f7fe ff09 	bl	8000e1c <ensure>
 800200a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <print_value+0x12a>
            {
                return false;
 8002012:	2300      	movs	r3, #0
 8002014:	e043      	b.n	800209e <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4a25      	ldr	r2, [pc, #148]	@ (80020b0 <print_value+0x1c4>)
 800201a:	6810      	ldr	r0, [r2, #0]
 800201c:	6018      	str	r0, [r3, #0]
 800201e:	7912      	ldrb	r2, [r2, #4]
 8002020:	711a      	strb	r2, [r3, #4]
            return true;
 8002022:	2301      	movs	r3, #1
 8002024:	e03b      	b.n	800209e <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 8002026:	6839      	ldr	r1, [r7, #0]
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7fe fff5 	bl	8001018 <print_number>
 800202e:	4603      	mov	r3, r0
 8002030:	e035      	b.n	800209e <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <print_value+0x156>
            {
                return false;
 800203e:	2300      	movs	r3, #0
 8002040:	e02d      	b.n	800209e <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe f95a 	bl	8000300 <strlen>
 800204c:	4603      	mov	r3, r0
 800204e:	3301      	adds	r3, #1
 8002050:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8002052:	68b9      	ldr	r1, [r7, #8]
 8002054:	6838      	ldr	r0, [r7, #0]
 8002056:	f7fe fee1 	bl	8000e1c <ensure>
 800205a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <print_value+0x17a>
            {
                return false;
 8002062:	2300      	movs	r3, #0
 8002064:	e01b      	b.n	800209e <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	4619      	mov	r1, r3
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f02a fa81 	bl	802c576 <memcpy>
            return true;
 8002074:	2301      	movs	r3, #1
 8002076:	e012      	b.n	800209e <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8002078:	6839      	ldr	r1, [r7, #0]
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff fc6e 	bl	800195c <print_string>
 8002080:	4603      	mov	r3, r0
 8002082:	e00c      	b.n	800209e <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8002084:	6839      	ldr	r1, [r7, #0]
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f8d8 	bl	800223c <print_array>
 800208c:	4603      	mov	r3, r0
 800208e:	e006      	b.n	800209e <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8002090:	6839      	ldr	r1, [r7, #0]
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 fa57 	bl	8002546 <print_object>
 8002098:	4603      	mov	r3, r0
 800209a:	e000      	b.n	800209e <print_value+0x1b2>

        default:
            return false;
 800209c:	2300      	movs	r3, #0
    }
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	0802ec34 	.word	0x0802ec34
 80020ac:	0802ec64 	.word	0x0802ec64
 80020b0:	0802ec6c 	.word	0x0802ec6c

080020b4 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020ce:	d301      	bcc.n	80020d4 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 80020d0:	2300      	movs	r3, #0
 80020d2:	e0af      	b.n	8002234 <parse_array+0x180>
    }
    input_buffer->depth++;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	4413      	add	r3, r2
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b5b      	cmp	r3, #91	@ 0x5b
 80020ec:	f040 8094 	bne.w	8002218 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80020fa:	6838      	ldr	r0, [r7, #0]
 80020fc:	f7ff fc3e 	bl	800197c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00d      	beq.n	8002122 <parse_array+0x6e>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	429a      	cmp	r2, r3
 8002110:	d207      	bcs.n	8002122 <parse_array+0x6e>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	4413      	add	r3, r2
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b5d      	cmp	r3, #93	@ 0x5d
 8002120:	d061      	beq.n	80021e6 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <parse_array+0x80>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	429a      	cmp	r2, r3
 8002132:	d305      	bcc.n	8002140 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	1e5a      	subs	r2, r3, #1
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	609a      	str	r2, [r3, #8]
        goto fail;
 800213e:	e072      	b.n	8002226 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	1e5a      	subs	r2, r3, #1
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	3310      	adds	r3, #16
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fd2e 	bl	8000bb0 <cJSON_New_Item>
 8002154:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d05f      	beq.n	800221c <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d104      	bne.n	800216c <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	e007      	b.n	800217c <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002186:	6838      	ldr	r0, [r7, #0]
 8002188:	f7ff fbf8 	bl	800197c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800218c:	6839      	ldr	r1, [r7, #0]
 800218e:	6938      	ldr	r0, [r7, #16]
 8002190:	f7ff fdc0 	bl	8001d14 <parse_value>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d042      	beq.n	8002220 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800219a:	6838      	ldr	r0, [r7, #0]
 800219c:	f7ff fbee 	bl	800197c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00d      	beq.n	80021c2 <parse_array+0x10e>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d207      	bcs.n	80021c2 <parse_array+0x10e>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	4413      	add	r3, r2
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b2c      	cmp	r3, #44	@ 0x2c
 80021c0:	d0c3      	beq.n	800214a <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d02d      	beq.n	8002224 <parse_array+0x170>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d227      	bcs.n	8002224 <parse_array+0x170>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4413      	add	r3, r2
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b5d      	cmp	r3, #93	@ 0x5d
 80021e2:	d11f      	bne.n	8002224 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 80021e4:	e000      	b.n	80021e8 <parse_array+0x134>
        goto success;
 80021e6:	bf00      	nop
    input_buffer->depth--;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	1e5a      	subs	r2, r3, #1
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <parse_array+0x14a>
        head->prev = current_item;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2220      	movs	r2, #32
 8002202:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	609a      	str	r2, [r3, #8]

    return true;
 8002214:	2301      	movs	r3, #1
 8002216:	e00d      	b.n	8002234 <parse_array+0x180>
        goto fail;
 8002218:	bf00      	nop
 800221a:	e004      	b.n	8002226 <parse_array+0x172>
            goto fail; /* allocation failure */
 800221c:	bf00      	nop
 800221e:	e002      	b.n	8002226 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8002220:	bf00      	nop
 8002222:	e000      	b.n	8002226 <parse_array+0x172>
        goto fail; /* expected end of array */
 8002224:	bf00      	nop

fail:
    if (head != NULL)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d002      	beq.n	8002232 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 800222c:	6978      	ldr	r0, [r7, #20]
 800222e:	f7fe fcd5 	bl	8000bdc <cJSON_Delete>
    }

    return false;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <print_array+0x22>
    {
        return false;
 800225a:	2300      	movs	r3, #0
 800225c:	e070      	b.n	8002340 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800225e:	2101      	movs	r1, #1
 8002260:	6838      	ldr	r0, [r7, #0]
 8002262:	f7fe fddb 	bl	8000e1c <ensure>
 8002266:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <print_array+0x36>
    {
        return false;
 800226e:	2300      	movs	r3, #0
 8002270:	e066      	b.n	8002340 <print_array+0x104>
    }

    *output_pointer = '[';
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	225b      	movs	r2, #91	@ 0x5b
 8002276:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 800228c:	e03d      	b.n	800230a <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800228e:	6839      	ldr	r1, [r7, #0]
 8002290:	6938      	ldr	r0, [r7, #16]
 8002292:	f7ff fe2b 	bl	8001eec <print_value>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <print_array+0x64>
        {
            return false;
 800229c:	2300      	movs	r3, #0
 800229e:	e04f      	b.n	8002340 <print_array+0x104>
        }
        update_offset(output_buffer);
 80022a0:	6838      	ldr	r0, [r7, #0]
 80022a2:	f7fe fe55 	bl	8000f50 <update_offset>
        if (current_element->next)
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d02a      	beq.n	8002304 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <print_array+0x7e>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e000      	b.n	80022bc <print_array+0x80>
 80022ba:	2301      	movs	r3, #1
 80022bc:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	3301      	adds	r3, #1
 80022c2:	4619      	mov	r1, r3
 80022c4:	6838      	ldr	r0, [r7, #0]
 80022c6:	f7fe fda9 	bl	8000e1c <ensure>
 80022ca:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <print_array+0x9a>
            {
                return false;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e034      	b.n	8002340 <print_array+0x104>
            }
            *output_pointer++ = ',';
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	617a      	str	r2, [r7, #20]
 80022dc:	222c      	movs	r2, #44	@ 0x2c
 80022de:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d004      	beq.n	80022f2 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	617a      	str	r2, [r7, #20]
 80022ee:	2220      	movs	r2, #32
 80022f0:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	441a      	add	r2, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1be      	bne.n	800228e <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8002310:	2102      	movs	r1, #2
 8002312:	6838      	ldr	r0, [r7, #0]
 8002314:	f7fe fd82 	bl	8000e1c <ensure>
 8002318:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <print_array+0xe8>
    {
        return false;
 8002320:	2300      	movs	r3, #0
 8002322:	e00d      	b.n	8002340 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	617a      	str	r2, [r7, #20]
 800232a:	225d      	movs	r2, #93	@ 0x5d
 800232c:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	1e5a      	subs	r2, r3, #1
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	60da      	str	r2, [r3, #12]

    return true;
 800233e:	2301      	movs	r3, #1
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002362:	d301      	bcc.n	8002368 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8002364:	2300      	movs	r3, #0
 8002366:	e0ea      	b.n	800253e <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80d0 	beq.w	800251a <parse_object+0x1d2>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	429a      	cmp	r2, r3
 8002384:	f080 80c9 	bcs.w	800251a <parse_object+0x1d2>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4413      	add	r3, r2
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b7b      	cmp	r3, #123	@ 0x7b
 8002396:	f040 80c0 	bne.w	800251a <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80023a4:	6838      	ldr	r0, [r7, #0]
 80023a6:	f7ff fae9 	bl	800197c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00e      	beq.n	80023ce <parse_object+0x86>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d208      	bcs.n	80023ce <parse_object+0x86>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	4413      	add	r3, r2
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b7d      	cmp	r3, #125	@ 0x7d
 80023ca:	f000 808d 	beq.w	80024e8 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <parse_object+0x98>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d305      	bcc.n	80023ec <parse_object+0xa4>
    {
        input_buffer->offset--;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	1e5a      	subs	r2, r3, #1
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	609a      	str	r2, [r3, #8]
        goto fail;
 80023ea:	e0a1      	b.n	8002530 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	1e5a      	subs	r2, r3, #1
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	3310      	adds	r3, #16
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe fbd8 	bl	8000bb0 <cJSON_New_Item>
 8002400:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 808a 	beq.w	800251e <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d104      	bne.n	800241a <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	e007      	b.n	800242a <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002434:	6838      	ldr	r0, [r7, #0]
 8002436:	f7ff faa1 	bl	800197c <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800243a:	6839      	ldr	r1, [r7, #0]
 800243c:	6938      	ldr	r0, [r7, #16]
 800243e:	f7ff f817 	bl	8001470 <parse_string>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d06c      	beq.n	8002522 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8002448:	6838      	ldr	r0, [r7, #0]
 800244a:	f7ff fa97 	bl	800197c <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	691a      	ldr	r2, [r3, #16]
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d061      	beq.n	8002526 <parse_object+0x1de>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	429a      	cmp	r2, r3
 800246c:	d25b      	bcs.n	8002526 <parse_object+0x1de>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	4413      	add	r3, r2
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b3a      	cmp	r3, #58	@ 0x3a
 800247c:	d153      	bne.n	8002526 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002488:	6838      	ldr	r0, [r7, #0]
 800248a:	f7ff fa77 	bl	800197c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800248e:	6839      	ldr	r1, [r7, #0]
 8002490:	6938      	ldr	r0, [r7, #16]
 8002492:	f7ff fc3f 	bl	8001d14 <parse_value>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d046      	beq.n	800252a <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800249c:	6838      	ldr	r0, [r7, #0]
 800249e:	f7ff fa6d 	bl	800197c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00d      	beq.n	80024c4 <parse_object+0x17c>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d207      	bcs.n	80024c4 <parse_object+0x17c>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	4413      	add	r3, r2
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b2c      	cmp	r3, #44	@ 0x2c
 80024c2:	d098      	beq.n	80023f6 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d031      	beq.n	800252e <parse_object+0x1e6>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d22b      	bcs.n	800252e <parse_object+0x1e6>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	4413      	add	r3, r2
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b7d      	cmp	r3, #125	@ 0x7d
 80024e4:	d123      	bne.n	800252e <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 80024e6:	e000      	b.n	80024ea <parse_object+0x1a2>
        goto success; /* empty object */
 80024e8:	bf00      	nop
    input_buffer->depth--;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	1e5a      	subs	r2, r3, #1
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <parse_object+0x1b8>
        head->prev = current_item;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2240      	movs	r2, #64	@ 0x40
 8002504:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	609a      	str	r2, [r3, #8]
    return true;
 8002516:	2301      	movs	r3, #1
 8002518:	e011      	b.n	800253e <parse_object+0x1f6>
        goto fail; /* not an object */
 800251a:	bf00      	nop
 800251c:	e008      	b.n	8002530 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 800251e:	bf00      	nop
 8002520:	e006      	b.n	8002530 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8002522:	bf00      	nop
 8002524:	e004      	b.n	8002530 <parse_object+0x1e8>
            goto fail; /* invalid object */
 8002526:	bf00      	nop
 8002528:	e002      	b.n	8002530 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 800252a:	bf00      	nop
 800252c:	e000      	b.n	8002530 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 800252e:	bf00      	nop

fail:
    if (head != NULL)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8002536:	6978      	ldr	r0, [r7, #20]
 8002538:	f7fe fb50 	bl	8000bdc <cJSON_Delete>
    }

    return false;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b088      	sub	sp, #32
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002550:	2300      	movs	r3, #0
 8002552:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <print_object+0x22>
    {
        return false;
 8002564:	2300      	movs	r3, #0
 8002566:	e108      	b.n	800277a <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <print_object+0x2e>
 8002570:	2302      	movs	r3, #2
 8002572:	e000      	b.n	8002576 <print_object+0x30>
 8002574:	2301      	movs	r3, #1
 8002576:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3301      	adds	r3, #1
 800257c:	4619      	mov	r1, r3
 800257e:	6838      	ldr	r0, [r7, #0]
 8002580:	f7fe fc4c 	bl	8000e1c <ensure>
 8002584:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <print_object+0x4a>
    {
        return false;
 800258c:	2300      	movs	r3, #0
 800258e:	e0f4      	b.n	800277a <print_object+0x234>
    }

    *output_pointer++ = '{';
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	61fa      	str	r2, [r7, #28]
 8002596:	227b      	movs	r2, #123	@ 0x7b
 8002598:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d004      	beq.n	80025b6 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	61fa      	str	r2, [r7, #28]
 80025b2:	220a      	movs	r2, #10
 80025b4:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	441a      	add	r2, r3
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	609a      	str	r2, [r3, #8]

    while (current_item)
 80025c2:	e0a0      	b.n	8002706 <print_object+0x1c0>
    {
        if (output_buffer->format)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d022      	beq.n	8002612 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4619      	mov	r1, r3
 80025d2:	6838      	ldr	r0, [r7, #0]
 80025d4:	f7fe fc22 	bl	8000e1c <ensure>
 80025d8:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <print_object+0x9e>
            {
                return false;
 80025e0:	2300      	movs	r3, #0
 80025e2:	e0ca      	b.n	800277a <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	e007      	b.n	80025fa <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	61fa      	str	r2, [r7, #28]
 80025f0:	2209      	movs	r2, #9
 80025f2:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	3301      	adds	r3, #1
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	429a      	cmp	r2, r3
 8002602:	d3f2      	bcc.n	80025ea <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	441a      	add	r2, r3
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	6839      	ldr	r1, [r7, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff f86f 	bl	80016fc <print_string_ptr>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <print_object+0xe2>
        {
            return false;
 8002624:	2300      	movs	r3, #0
 8002626:	e0a8      	b.n	800277a <print_object+0x234>
        }
        update_offset(output_buffer);
 8002628:	6838      	ldr	r0, [r7, #0]
 800262a:	f7fe fc91 	bl	8000f50 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <print_object+0xf4>
 8002636:	2302      	movs	r3, #2
 8002638:	e000      	b.n	800263c <print_object+0xf6>
 800263a:	2301      	movs	r3, #1
 800263c:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800263e:	68f9      	ldr	r1, [r7, #12]
 8002640:	6838      	ldr	r0, [r7, #0]
 8002642:	f7fe fbeb 	bl	8000e1c <ensure>
 8002646:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <print_object+0x10c>
        {
            return false;
 800264e:	2300      	movs	r3, #0
 8002650:	e093      	b.n	800277a <print_object+0x234>
        }
        *output_pointer++ = ':';
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	61fa      	str	r2, [r7, #28]
 8002658:	223a      	movs	r2, #58	@ 0x3a
 800265a:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d004      	beq.n	800266e <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	61fa      	str	r2, [r7, #28]
 800266a:	2209      	movs	r2, #9
 800266c:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	441a      	add	r2, r3
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 800267a:	6839      	ldr	r1, [r7, #0]
 800267c:	69b8      	ldr	r0, [r7, #24]
 800267e:	f7ff fc35 	bl	8001eec <print_value>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <print_object+0x146>
        {
            return false;
 8002688:	2300      	movs	r3, #0
 800268a:	e076      	b.n	800277a <print_object+0x234>
        }
        update_offset(output_buffer);
 800268c:	6838      	ldr	r0, [r7, #0]
 800268e:	f7fe fc5f 	bl	8000f50 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <print_object+0x158>
 800269a:	2201      	movs	r2, #1
 800269c:	e000      	b.n	80026a0 <print_object+0x15a>
 800269e:	2200      	movs	r2, #0
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <print_object+0x166>
 80026a8:	2301      	movs	r3, #1
 80026aa:	e000      	b.n	80026ae <print_object+0x168>
 80026ac:	2300      	movs	r3, #0
 80026ae:	4413      	add	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3301      	adds	r3, #1
 80026b6:	4619      	mov	r1, r3
 80026b8:	6838      	ldr	r0, [r7, #0]
 80026ba:	f7fe fbaf 	bl	8000e1c <ensure>
 80026be:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <print_object+0x184>
        {
            return false;
 80026c6:	2300      	movs	r3, #0
 80026c8:	e057      	b.n	800277a <print_object+0x234>
        }
        if (current_item->next)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d004      	beq.n	80026dc <print_object+0x196>
        {
            *output_pointer++ = ',';
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	61fa      	str	r2, [r7, #28]
 80026d8:	222c      	movs	r2, #44	@ 0x2c
 80026da:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d004      	beq.n	80026ee <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	61fa      	str	r2, [r7, #28]
 80026ea:	220a      	movs	r2, #10
 80026ec:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	441a      	add	r2, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	2b00      	cmp	r3, #0
 800270a:	f47f af5b 	bne.w	80025c4 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <print_object+0x1d8>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	3301      	adds	r3, #1
 800271c:	e000      	b.n	8002720 <print_object+0x1da>
 800271e:	2302      	movs	r3, #2
 8002720:	4619      	mov	r1, r3
 8002722:	6838      	ldr	r0, [r7, #0]
 8002724:	f7fe fb7a 	bl	8000e1c <ensure>
 8002728:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <print_object+0x1ee>
    {
        return false;
 8002730:	2300      	movs	r3, #0
 8002732:	e022      	b.n	800277a <print_object+0x234>
    }
    if (output_buffer->format)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d010      	beq.n	800275e <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800273c:	2300      	movs	r3, #0
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	e007      	b.n	8002752 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	61fa      	str	r2, [r7, #28]
 8002748:	2209      	movs	r2, #9
 800274a:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	3301      	adds	r3, #1
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	3b01      	subs	r3, #1
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	429a      	cmp	r2, r3
 800275c:	d3f1      	bcc.n	8002742 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	61fa      	str	r2, [r7, #28]
 8002764:	227d      	movs	r2, #125	@ 0x7d
 8002766:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	1e5a      	subs	r2, r3, #1
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	60da      	str	r2, [r3, #12]

    return true;
 8002778:	2301      	movs	r3, #1
}
 800277a:	4618      	mov	r0, r3
 800277c:	3720      	adds	r7, #32
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <cJSON_GetArraySize>:

/* Get Array size/item / object item. */
CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)
{
 8002782:	b480      	push	{r7}
 8002784:	b085      	sub	sp, #20
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
    cJSON *child = NULL;
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
    size_t size = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]

    if (array == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <cJSON_GetArraySize+0x1a>
    {
        return 0;
 8002798:	2300      	movs	r3, #0
 800279a:	e00d      	b.n	80027b8 <cJSON_GetArraySize+0x36>
    }

    child = array->child;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	60fb      	str	r3, [r7, #12]

    while(child != NULL)
 80027a2:	e005      	b.n	80027b0 <cJSON_GetArraySize+0x2e>
    {
        size++;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	3301      	adds	r3, #1
 80027a8:	60bb      	str	r3, [r7, #8]
        child = child->next;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60fb      	str	r3, [r7, #12]
    while(child != NULL)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f6      	bne.n	80027a4 <cJSON_GetArraySize+0x22>
    }

    /* FIXME: Can overflow here. Cannot be fixed without breaking the API */

    return (int)size;
 80027b6:	68bb      	ldr	r3, [r7, #8]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <get_array_item>:

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <get_array_item+0x18>
    {
        return NULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	e010      	b.n	80027fe <get_array_item+0x3a>
    }

    current_child = array->child;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 80027e2:	e005      	b.n	80027f0 <get_array_item+0x2c>
    {
        index--;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <get_array_item+0x38>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f3      	bne.n	80027e4 <get_array_item+0x20>
    }

    return current_child;
 80027fc:	68fb      	ldr	r3, [r7, #12]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	6039      	str	r1, [r7, #0]
    if (index < 0)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	da01      	bge.n	800281e <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 800281a:	2300      	movs	r3, #0
 800281c:	e005      	b.n	800282a <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	4619      	mov	r1, r3
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff ffce 	bl	80027c4 <get_array_item>
 8002828:	4603      	mov	r3, r0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b086      	sub	sp, #24
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <get_object_item+0x1c>
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <get_object_item+0x20>
    {
        return NULL;
 800284e:	2300      	movs	r3, #0
 8002850:	e033      	b.n	80028ba <get_object_item+0x88>
    }

    current_element = object->child;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d017      	beq.n	800288e <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800285e:	e002      	b.n	8002866 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d01c      	beq.n	80028a6 <get_object_item+0x74>
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d018      	beq.n	80028a6 <get_object_item+0x74>
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	4619      	mov	r1, r3
 800287a:	68b8      	ldr	r0, [r7, #8]
 800287c:	f7fd fce0 	bl	8000240 <strcmp>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1ec      	bne.n	8002860 <get_object_item+0x2e>
 8002886:	e00e      	b.n	80028a6 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <get_object_item+0x74>
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	4619      	mov	r1, r3
 800289a:	68b8      	ldr	r0, [r7, #8]
 800289c:	f7fe f8f4 	bl	8000a88 <case_insensitive_strcmp>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <get_object_item+0x82>
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <get_object_item+0x86>
        return NULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	e000      	b.n	80028ba <get_object_item+0x88>
    }

    return current_element;
 80028b8:	697b      	ldr	r3, [r7, #20]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 80028cc:	2200      	movs	r2, #0
 80028ce:	6839      	ldr	r1, [r7, #0]
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff ffae 	bl	8002832 <get_object_item>
 80028d6:	4603      	mov	r3, r0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
    prev->next = item;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	605a      	str	r2, [r3, #4]
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b084      	sub	sp, #16
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d006      	beq.n	8002924 <add_item_to_array+0x22>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <add_item_to_array+0x22>
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d101      	bne.n	8002928 <add_item_to_array+0x26>
    {
        return false;
 8002924:	2300      	movs	r3, #0
 8002926:	e01e      	b.n	8002966 <add_item_to_array+0x64>
    }

    child = array->child;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d109      	bne.n	8002948 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	609a      	str	r2, [r3, #8]
        item->prev = item;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	e00d      	b.n	8002964 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d009      	beq.n	8002964 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	6839      	ldr	r1, [r7, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff ffc2 	bl	80028e0 <suffix_object>
            array->child->prev = item;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8002964:	2301      	movs	r3, #1
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <cJSON_AddItemToArray>:

/* Add item to array/object. */
CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
    return add_item_to_array(array, item);
 8002978:	6839      	ldr	r1, [r7, #0]
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff ffc1 	bl	8002902 <add_item_to_array>
 8002980:	4603      	mov	r3, r0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8002992:	687b      	ldr	r3, [r7, #4]
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d009      	beq.n	80029d0 <add_item_to_object+0x30>
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d006      	beq.n	80029d0 <add_item_to_object+0x30>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <add_item_to_object+0x30>
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d101      	bne.n	80029d4 <add_item_to_object+0x34>
    {
        return false;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e036      	b.n	8002a42 <add_item_to_object+0xa2>
    }

    if (constant_key)
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 80029da:	68b8      	ldr	r0, [r7, #8]
 80029dc:	f7ff ffd5 	bl	800298a <cast_away_const>
 80029e0:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	e00e      	b.n	8002a0c <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 80029ee:	6839      	ldr	r1, [r7, #0]
 80029f0:	68b8      	ldr	r0, [r7, #8]
 80029f2:	f7fe f8b5 	bl	8000b60 <cJSON_strdup>
 80029f6:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <add_item_to_object+0x62>
        {
            return false;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e01f      	b.n	8002a42 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a0a:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d109      	bne.n	8002a2c <add_item_to_object+0x8c>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6a12      	ldr	r2, [r2, #32]
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4798      	blx	r3
    }

    item->string = new_key;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f7ff ff61 	bl	8002902 <add_item_to_array>
 8002a40:	4603      	mov	r3, r0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 8002a5a:	ed97 0b00 	vldr	d0, [r7]
 8002a5e:	f000 f83b 	bl	8002ad8 <cJSON_CreateNumber>
 8002a62:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8002a64:	2300      	movs	r3, #0
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	4b09      	ldr	r3, [pc, #36]	@ (8002a90 <cJSON_AddNumberToObject+0x44>)
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7ff ff96 	bl	80029a0 <add_item_to_object>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	e003      	b.n	8002a86 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 8002a7e:	6978      	ldr	r0, [r7, #20]
 8002a80:	f7fe f8ac 	bl	8000bdc <cJSON_Delete>
    return NULL;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000000 	.word	0x20000000

08002a94 <cJSON_AddStringToObject>:

CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
    cJSON *string_item = cJSON_CreateString(string);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f863 	bl	8002b6c <cJSON_CreateString>
 8002aa6:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	4b09      	ldr	r3, [pc, #36]	@ (8002ad4 <cJSON_AddStringToObject+0x40>)
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f7ff ff74 	bl	80029a0 <add_item_to_object>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <cJSON_AddStringToObject+0x2e>
    {
        return string_item;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	e003      	b.n	8002aca <cJSON_AddStringToObject+0x36>
    }

    cJSON_Delete(string_item);
 8002ac2:	6978      	ldr	r0, [r7, #20]
 8002ac4:	f7fe f88a 	bl	8000bdc <cJSON_Delete>
    return NULL;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000000 	.word	0x20000000

08002ad8 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8002ae2:	4821      	ldr	r0, [pc, #132]	@ (8002b68 <cJSON_CreateNumber+0x90>)
 8002ae4:	f7fe f864 	bl	8000bb0 <cJSON_New_Item>
 8002ae8:	60f8      	str	r0, [r7, #12]
    if(item)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d02b      	beq.n	8002b48 <cJSON_CreateNumber+0x70>
    {
        item->type = cJSON_Number;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2208      	movs	r2, #8
 8002af4:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8002af6:	68f9      	ldr	r1, [r7, #12]
 8002af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002afc:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8002b00:	ed97 7b00 	vldr	d7, [r7]
 8002b04:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 8002b58 <cJSON_CreateNumber+0x80>
 8002b08:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b10:	db04      	blt.n	8002b1c <cJSON_CreateNumber+0x44>
        {
            item->valueint = INT_MAX;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002b18:	615a      	str	r2, [r3, #20]
 8002b1a:	e015      	b.n	8002b48 <cJSON_CreateNumber+0x70>
        }
        else if (num <= (double)INT_MIN)
 8002b1c:	ed97 7b00 	vldr	d7, [r7]
 8002b20:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8002b60 <cJSON_CreateNumber+0x88>
 8002b24:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2c:	d804      	bhi.n	8002b38 <cJSON_CreateNumber+0x60>
        {
            item->valueint = INT_MIN;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002b34:	615a      	str	r2, [r3, #20]
 8002b36:	e007      	b.n	8002b48 <cJSON_CreateNumber+0x70>
        }
        else
        {
            item->valueint = (int)num;
 8002b38:	ed97 7b00 	vldr	d7, [r7]
 8002b3c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002b40:	ee17 2a90 	vmov	r2, s15
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8002b48:	68fb      	ldr	r3, [r7, #12]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	f3af 8000 	nop.w
 8002b58:	ffc00000 	.word	0xffc00000
 8002b5c:	41dfffff 	.word	0x41dfffff
 8002b60:	00000000 	.word	0x00000000
 8002b64:	c1e00000 	.word	0xc1e00000
 8002b68:	20000000 	.word	0x20000000

08002b6c <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8002b74:	480f      	ldr	r0, [pc, #60]	@ (8002bb4 <cJSON_CreateString+0x48>)
 8002b76:	f7fe f81b 	bl	8000bb0 <cJSON_New_Item>
 8002b7a:	60f8      	str	r0, [r7, #12]
    if(item)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d012      	beq.n	8002ba8 <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2210      	movs	r2, #16
 8002b86:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 8002b88:	490a      	ldr	r1, [pc, #40]	@ (8002bb4 <cJSON_CreateString+0x48>)
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fd ffe8 	bl	8000b60 <cJSON_strdup>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d104      	bne.n	8002ba8 <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f7fe f81c 	bl	8000bdc <cJSON_Delete>
            return NULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e000      	b.n	8002baa <cJSON_CreateString+0x3e>
        }
    }

    return item;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000000 	.word	0x20000000

08002bb8 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8002bbe:	4807      	ldr	r0, [pc, #28]	@ (8002bdc <cJSON_CreateArray+0x24>)
 8002bc0:	f7fd fff6 	bl	8000bb0 <cJSON_New_Item>
 8002bc4:	6078      	str	r0, [r7, #4]
    if(item)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <cJSON_CreateArray+0x1a>
    {
        item->type=cJSON_Array;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	60da      	str	r2, [r3, #12]
    }

    return item;
 8002bd2:	687b      	ldr	r3, [r7, #4]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20000000 	.word	0x20000000

08002be0 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8002be6:	4807      	ldr	r0, [pc, #28]	@ (8002c04 <cJSON_CreateObject+0x24>)
 8002be8:	f7fd ffe2 	bl	8000bb0 <cJSON_New_Item>
 8002bec:	6078      	str	r0, [r7, #4]
    if (item)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2240      	movs	r2, #64	@ 0x40
 8002bf8:	60da      	str	r2, [r3, #12]
    }

    return item;
 8002bfa:	687b      	ldr	r3, [r7, #4]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000000 	.word	0x20000000

08002c08 <DS18B20_StartAll>:
	
	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f012 fa4d 	bl	80150b0 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8002c16:	21cc      	movs	r1, #204	@ 0xcc
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f012 fad7 	bl	80151cc <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8002c1e:	2144      	movs	r1, #68	@ 0x44
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f012 fad3 	bl	80151cc <OneWire_WriteByte>
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination) 
{
 8002c30:	b590      	push	{r4, r7, lr}
 8002c32:	b08b      	sub	sp, #44	@ 0x2c
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	float decimal;
	uint8_t i = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;
	
	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 8002c46:	68b8      	ldr	r0, [r7, #8]
 8002c48:	f000 f97e 	bl	8002f48 <DS18B20_Is>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <DS18B20_Read+0x26>
		return false;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e0e1      	b.n	8002e1a <DS18B20_Read+0x1ea>
	}
	
	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire)) 
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f012 fa8a 	bl	8015170 <OneWire_ReadBit>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false; 
 8002c62:	2300      	movs	r3, #0
 8002c64:	e0d9      	b.n	8002e1a <DS18B20_Read+0x1ea>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f012 fa22 	bl	80150b0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f012 fbe1 	bl	8015436 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002c74:	21be      	movs	r1, #190	@ 0xbe
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f012 faa8 	bl	80151cc <OneWire_WriteByte>
	
	/* Get data */
	for (i = 0; i < 9; i++) 
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	77fb      	strb	r3, [r7, #31]
 8002c80:	e00d      	b.n	8002c9e <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 8002c82:	7ffc      	ldrb	r4, [r7, #31]
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f012 fabf 	bl	8015208 <OneWire_ReadByte>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8002c92:	443b      	add	r3, r7
 8002c94:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++) 
 8002c98:	7ffb      	ldrb	r3, [r7, #31]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	77fb      	strb	r3, [r7, #31]
 8002c9e:	7ffb      	ldrb	r3, [r7, #31]
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d9ee      	bls.n	8002c82 <DS18B20_Read+0x52>
	}
	
	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	2108      	movs	r1, #8
 8002caa:	4618      	mov	r0, r3
 8002cac:	f012 fc10 	bl	80154d0 <OneWire_CRC8>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	77bb      	strb	r3, [r7, #30]
	
	/* Check if CRC is ok */
	if (crc != data[8])
 8002cb4:	7f3b      	ldrb	r3, [r7, #28]
 8002cb6:	7fba      	ldrb	r2, [r7, #30]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e0ac      	b.n	8002e1a <DS18B20_Read+0x1ea>

	
	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8002cc0:	7d3b      	ldrb	r3, [r7, #20]
 8002cc2:	b21a      	sxth	r2, r3
 8002cc4:	7d7b      	ldrb	r3, [r7, #21]
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	b21b      	sxth	r3, r3
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	b21b      	sxth	r3, r3
 8002cce:	84fb      	strh	r3, [r7, #38]	@ 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f012 f9ed 	bl	80150b0 <OneWire_Reset>
	
	/* Check if temperature is negative */
	if (temperature & 0x8000)
 8002cd6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	da05      	bge.n	8002cea <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8002cde:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002ce0:	425b      	negs	r3, r3
 8002ce2:	84fb      	strh	r3, [r7, #38]	@ 0x26
		minus = 1;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	}

	
	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8002cea:	7e3b      	ldrb	r3, [r7, #24]
 8002cec:	115b      	asrs	r3, r3, #5
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	3309      	adds	r3, #9
 8002cf8:	777b      	strb	r3, [r7, #29]

	
	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8002cfa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8002d04:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002d06:	0a1b      	lsrs	r3, r3, #8
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	b25b      	sxtb	r3, r3
 8002d0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d12:	b25a      	sxtb	r2, r3
 8002d14:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	
	/* Store decimal digits */
	switch (resolution) 
 8002d1e:	7f7b      	ldrb	r3, [r7, #29]
 8002d20:	3b09      	subs	r3, #9
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d858      	bhi.n	8002dd8 <DS18B20_Read+0x1a8>
 8002d26:	a201      	add	r2, pc, #4	@ (adr r2, 8002d2c <DS18B20_Read+0xfc>)
 8002d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2c:	08002d3d 	.word	0x08002d3d
 8002d30:	08002d65 	.word	0x08002d65
 8002d34:	08002d8d 	.word	0x08002d8d
 8002d38:	08002db5 	.word	0x08002db5
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 8002d3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002d3e:	08db      	lsrs	r3, r3, #3
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	ee07 3a90 	vmov	s15, r3
 8002d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d4e:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8002d52:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d56:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d5e:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8002d62:	e03e      	b.n	8002de2 <DS18B20_Read+0x1b2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 8002d64:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	ee07 3a90 	vmov	s15, r3
 8002d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d76:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8002d7a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d7e:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8002d82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d86:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8002d8a:	e02a      	b.n	8002de2 <DS18B20_Read+0x1b2>
		case 11: 
			decimal = (temperature >> 1) & 0x07;
 8002d8c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d9e:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8002da2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002da6:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8002daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dae:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8002db2:	e016      	b.n	8002de2 <DS18B20_Read+0x1b2>
		case 12: 
			decimal = temperature & 0x0F;
 8002db4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	ee07 3a90 	vmov	s15, r3
 8002dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dc2:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8002dc6:	edd7 7a08 	vldr	s15, [r7, #32]
 8002dca:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002e24 <DS18B20_Read+0x1f4>
 8002dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dd2:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8002dd6:	e004      	b.n	8002de2 <DS18B20_Read+0x1b2>
		default: 
			decimal = 0xFF;
 8002dd8:	4b13      	ldr	r3, [pc, #76]	@ (8002e28 <DS18B20_Read+0x1f8>)
 8002dda:	623b      	str	r3, [r7, #32]
			digit = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	}
	
	/* Check for negative part */
	decimal = digit + decimal;
 8002de2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8002de6:	ee07 3a90 	vmov	s15, r3
 8002dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dee:	ed97 7a08 	vldr	s14, [r7, #32]
 8002df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df6:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus) 
 8002dfa:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d007      	beq.n	8002e12 <DS18B20_Read+0x1e2>
		decimal = 0 - decimal;
 8002e02:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002e2c <DS18B20_Read+0x1fc>
 8002e06:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e0e:	edc7 7a08 	vstr	s15, [r7, #32]
	
	
	/* Set to pointer */
	*destination = decimal;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a3a      	ldr	r2, [r7, #32]
 8002e16:	601a      	str	r2, [r3, #0]
	
	/* Return 1, temperature valid */
	return true;
 8002e18:	2301      	movs	r3, #1
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	372c      	adds	r7, #44	@ 0x2c
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd90      	pop	{r4, r7, pc}
 8002e22:	bf00      	nop
 8002e24:	3d800000 	.word	0x3d800000
 8002e28:	437f0000 	.word	0x437f0000
 8002e2c:	00000000 	.word	0x00000000

08002e30 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution) 
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM)) 
 8002e3e:	68b8      	ldr	r0, [r7, #8]
 8002e40:	f000 f882 	bl	8002f48 <DS18B20_Is>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <DS18B20_SetResolution+0x1e>
		return 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e078      	b.n	8002f40 <DS18B20_SetResolution+0x110>
	
	portENTER_CRITICAL(); // Входим в критическую секцию
 8002e4e:	f026 fd45 	bl	80298dc <vPortEnterCritical>
	/* Reset line */
	OneWire_Reset(OneWire);
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f012 f92c 	bl	80150b0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f012 faeb 	bl	8015436 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002e60:	21be      	movs	r1, #190	@ 0xbe
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f012 f9b2 	bl	80151cc <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f012 f9cd 	bl	8015208 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f012 f9ca 	bl	8015208 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f012 f9c7 	bl	8015208 <OneWire_ReadByte>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f012 f9c2 	bl	8015208 <OneWire_ReadByte>
 8002e84:	4603      	mov	r3, r0
 8002e86:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f012 f9bd 	bl	8015208 <OneWire_ReadByte>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	75fb      	strb	r3, [r7, #23]
	
	if (resolution == DS18B20_Resolution_9bits) 
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	2b09      	cmp	r3, #9
 8002e96:	d108      	bne.n	8002eaa <DS18B20_SetResolution+0x7a>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002e98:	7dfb      	ldrb	r3, [r7, #23]
 8002e9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e9e:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002ea0:	7dfb      	ldrb	r3, [r7, #23]
 8002ea2:	f023 0320 	bic.w	r3, r3, #32
 8002ea6:	75fb      	strb	r3, [r7, #23]
 8002ea8:	e022      	b.n	8002ef0 <DS18B20_SetResolution+0xc0>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	2b0a      	cmp	r3, #10
 8002eae:	d108      	bne.n	8002ec2 <DS18B20_SetResolution+0x92>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002eb0:	7dfb      	ldrb	r3, [r7, #23]
 8002eb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002eb6:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002eb8:	7dfb      	ldrb	r3, [r7, #23]
 8002eba:	f043 0320 	orr.w	r3, r3, #32
 8002ebe:	75fb      	strb	r3, [r7, #23]
 8002ec0:	e016      	b.n	8002ef0 <DS18B20_SetResolution+0xc0>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	2b0b      	cmp	r3, #11
 8002ec6:	d108      	bne.n	8002eda <DS18B20_SetResolution+0xaa>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
 8002eca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ece:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002ed0:	7dfb      	ldrb	r3, [r7, #23]
 8002ed2:	f023 0320 	bic.w	r3, r3, #32
 8002ed6:	75fb      	strb	r3, [r7, #23]
 8002ed8:	e00a      	b.n	8002ef0 <DS18B20_SetResolution+0xc0>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	2b0c      	cmp	r3, #12
 8002ede:	d107      	bne.n	8002ef0 <DS18B20_SetResolution+0xc0>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002ee0:	7dfb      	ldrb	r3, [r7, #23]
 8002ee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ee6:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002ee8:	7dfb      	ldrb	r3, [r7, #23]
 8002eea:	f043 0320 	orr.w	r3, r3, #32
 8002eee:	75fb      	strb	r3, [r7, #23]
	}
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f012 f8dd 	bl	80150b0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002ef6:	68b9      	ldr	r1, [r7, #8]
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f012 fa9c 	bl	8015436 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002efe:	214e      	movs	r1, #78	@ 0x4e
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f012 f963 	bl	80151cc <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8002f06:	7dbb      	ldrb	r3, [r7, #22]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f012 f95e 	bl	80151cc <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002f10:	7d7b      	ldrb	r3, [r7, #21]
 8002f12:	4619      	mov	r1, r3
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f012 f959 	bl	80151cc <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002f1a:	7dfb      	ldrb	r3, [r7, #23]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f012 f954 	bl	80151cc <OneWire_WriteByte>
	portEXIT_CRITICAL(); // Выходим из критической секции
 8002f24:	f026 fd10 	bl	8029948 <vPortExitCritical>
	/* Reset line */
	OneWire_Reset(OneWire);
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f012 f8c1 	bl	80150b0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f012 fa80 	bl	8015436 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002f36:	2148      	movs	r1, #72	@ 0x48
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f012 f947 	bl	80151cc <OneWire_WriteByte>
	
	return 1;
 8002f3e:	2301      	movs	r3, #1
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM) 
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) 
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b28      	cmp	r3, #40	@ 0x28
 8002f56:	d101      	bne.n	8002f5c <DS18B20_Is+0x14>
		return 1;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <DS18B20_Is+0x16>
	
	return 0;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <DS18B20_DisableAlarmTemperature>:
	
	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM) 
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM)) 
 8002f74:	6838      	ldr	r0, [r7, #0]
 8002f76:	f7ff ffe7 	bl	8002f48 <DS18B20_Is>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	e049      	b.n	8003018 <DS18B20_DisableAlarmTemperature+0xae>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f012 f893 	bl	80150b0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002f8a:	6839      	ldr	r1, [r7, #0]
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f012 fa52 	bl	8015436 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002f92:	21be      	movs	r1, #190	@ 0xbe
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f012 f919 	bl	80151cc <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f012 f934 	bl	8015208 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f012 f931 	bl	8015208 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f012 f92e 	bl	8015208 <OneWire_ReadByte>
 8002fac:	4603      	mov	r3, r0
 8002fae:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f012 f929 	bl	8015208 <OneWire_ReadByte>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f012 f924 	bl	8015208 <OneWire_ReadByte>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	737b      	strb	r3, [r7, #13]
	
	th = 125;
 8002fc4:	237d      	movs	r3, #125	@ 0x7d
 8002fc6:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8002fc8:	23c9      	movs	r3, #201	@ 0xc9
 8002fca:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f012 f86f 	bl	80150b0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002fd2:	6839      	ldr	r1, [r7, #0]
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f012 fa2e 	bl	8015436 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002fda:	214e      	movs	r1, #78	@ 0x4e
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f012 f8f5 	bl	80151cc <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f012 f8f0 	bl	80151cc <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002fec:	7bbb      	ldrb	r3, [r7, #14]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f012 f8eb 	bl	80151cc <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002ff6:	7b7b      	ldrb	r3, [r7, #13]
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f012 f8e6 	bl	80151cc <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f012 f855 	bl	80150b0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8003006:	6839      	ldr	r1, [r7, #0]
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f012 fa14 	bl	8015436 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 800300e:	2148      	movs	r1, #72	@ 0x48
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f012 f8db 	bl	80151cc <OneWire_WriteByte>
	
	return 1;
 8003016:	2301      	movs	r3, #1
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f012 f8a1 	bl	8015170 <OneWire_ReadBit>
 800302e:	4603      	mov	r3, r0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <prv_parse_num>:
 *                      as function will only add new value to existing one
 * \param[out]      out_num: Pointer to output number
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
static lwdtcr_t
prv_parse_num(const char* token, size_t max_len, size_t* index, size_t* out_num) {
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
    size_t cnt = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]

    ASSERT_TOKEN_VALID(CHAR_IS_NUM(*token));
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b2f      	cmp	r3, #47	@ 0x2f
 8003050:	d903      	bls.n	800305a <prv_parse_num+0x22>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b39      	cmp	r3, #57	@ 0x39
 8003058:	d901      	bls.n	800305e <prv_parse_num+0x26>
 800305a:	2303      	movs	r3, #3
 800305c:	e02c      	b.n	80030b8 <prv_parse_num+0x80>

    /* Parse number in decimal format */
    *out_num = 0;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
    while (max_len > 0 && CHAR_IS_NUM(token[cnt])) {
 8003064:	e012      	b.n	800308c <prv_parse_num+0x54>
        *out_num = (*out_num) * 10 + CHAR_TO_NUM(token[cnt]);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	4619      	mov	r1, r3
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	4413      	add	r3, r2
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	440b      	add	r3, r1
 800307e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	601a      	str	r2, [r3, #0]
        ++cnt;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	3301      	adds	r3, #1
 800308a:	617b      	str	r3, [r7, #20]
    while (max_len > 0 && CHAR_IS_NUM(token[cnt])) {
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00b      	beq.n	80030aa <prv_parse_num+0x72>
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	4413      	add	r3, r2
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b2f      	cmp	r3, #47	@ 0x2f
 800309c:	d905      	bls.n	80030aa <prv_parse_num+0x72>
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	4413      	add	r3, r2
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b39      	cmp	r3, #57	@ 0x39
 80030a8:	d9dd      	bls.n	8003066 <prv_parse_num+0x2e>
    }
    *index += cnt;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	441a      	add	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	601a      	str	r2, [r3, #0]
    return lwdtcOK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	371c      	adds	r7, #28
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <prv_get_next_token>:
 * \brief           Get start of next token from a list
 * \param[in,out]   parser: Parser structure with all input data
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
static lwdtcr_t
prv_get_next_token(prv_cron_parser_ctx_t* parser) {
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
    const char* s = parser->cron_str;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	60fb      	str	r3, [r7, #12]
    size_t len = parser->cron_str_len;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	60bb      	str	r3, [r7, #8]

    /* Remove all leading spaces from the string */
    for (; len > 0 && s != NULL && *s == ' ' && *s != '\0'; ++s, --len) {}
 80030d8:	e005      	b.n	80030e6 <prv_get_next_token+0x22>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	3301      	adds	r3, #1
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <prv_get_next_token+0x3e>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <prv_get_next_token+0x3e>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b20      	cmp	r3, #32
 80030f8:	d103      	bne.n	8003102 <prv_get_next_token+0x3e>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1eb      	bne.n	80030da <prv_get_next_token+0x16>
    if (len == 0 || s == NULL || *s == '\0') {
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d006      	beq.n	8003116 <prv_get_next_token+0x52>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <prv_get_next_token+0x52>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <prv_get_next_token+0x56>
        return lwdtcERRTOKEN;
 8003116:	2303      	movs	r3, #3
 8003118:	e025      	b.n	8003166 <prv_get_next_token+0xa2>
    }
    parser->new_token = s; /* Set start of the token */
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	60da      	str	r2, [r3, #12]

    /* Search for the end of token */
    for (; len > 0 && s != NULL && *s != ' ' && *s != '\0'; ++s, --len) {
 8003120:	e005      	b.n	800312e <prv_get_next_token+0x6a>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3301      	adds	r3, #1
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	3b01      	subs	r3, #1
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <prv_get_next_token+0x86>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <prv_get_next_token+0x86>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b20      	cmp	r3, #32
 8003140:	d003      	beq.n	800314a <prv_get_next_token+0x86>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1eb      	bne.n	8003122 <prv_get_next_token+0x5e>
        ;
    }
    parser->new_token_len = s - parser->new_token; /* Get token length */
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	461a      	mov	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	611a      	str	r2, [r3, #16]

    parser->cron_str = s;       /* Set position where next token is about to start (with leading spaces) */
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	605a      	str	r2, [r3, #4]
    parser->cron_str_len = len; /* Set remaining length of the input string */
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	609a      	str	r2, [r3, #8]
    return lwdtcOK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <prv_get_and_parse_next_token>:
 * \param[in]       val_min: Minimum allowed value user can input
 * \param[in]       val_max: Maximum allowed value user can input
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
static lwdtcr_t
prv_get_and_parse_next_token(prv_cron_parser_ctx_t* parser, uint8_t* bit_map, size_t val_min, size_t val_max) {
 8003172:	b580      	push	{r7, lr}
 8003174:	b08c      	sub	sp, #48	@ 0x30
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	603b      	str	r3, [r7, #0]
    size_t i = 0, bit_start_pos, bit_end_pos, bit_step;
 8003180:	2300      	movs	r3, #0
 8003182:	61fb      	str	r3, [r7, #28]
    uint8_t is_range, is_opposite;

    /* Get next token from string */
    ASSERT_ACTION(prv_get_next_token(parser) == lwdtcOK);
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f7ff ff9d 	bl	80030c4 <prv_get_next_token>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <prv_get_and_parse_next_token+0x22>
 8003190:	2301      	movs	r3, #1
 8003192:	e139      	b.n	8003408 <prv_get_and_parse_next_token+0x296>
     * Process token string in a while loop
     *
     * Use do-while loop to seamlessly process comma separations
     */
    do {
        bit_start_pos = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	61bb      	str	r3, [r7, #24]
        bit_end_pos = SIZE_MAX;
 8003198:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800319c:	617b      	str	r3, [r7, #20]
        bit_step = 1;
 800319e:	2301      	movs	r3, #1
 80031a0:	613b      	str	r3, [r7, #16]
        is_range = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        is_opposite = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        ASSERT_ACTION(i < parser->new_token_len); /* Check token length */
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d801      	bhi.n	80031bc <prv_get_and_parse_next_token+0x4a>
 80031b8:	2301      	movs	r3, #1
 80031ba:	e125      	b.n	8003408 <prv_get_and_parse_next_token+0x296>
         *          step defined by number
         *          (space between * and / is used to be able to keep it as C comment for this example)
         */

        /* Find start character first */
        if (parser->new_token[i] == '*') {
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	4413      	add	r3, r2
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80031c8:	d107      	bne.n	80031da <prv_get_and_parse_next_token+0x68>
            i++;
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	3301      	adds	r3, #1
 80031ce:	61fb      	str	r3, [r7, #28]
             * Star represents any value between minimum and maximum
             * for specific date & time field.
             *
             * Set start and end positions accordingly
             */
            bit_start_pos = val_min;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	61bb      	str	r3, [r7, #24]
            bit_end_pos = val_max;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	e014      	b.n	8003204 <prv_get_and_parse_next_token+0x92>
             * eventually can even set maximum boundary later (when range is used)
             *
             * Since we don't know yet what is following after the number,
             * parse the number and set start and end bits to the same value
             */
            ASSERT_TOKEN_VALID(prv_parse_num(&parser->new_token[i], parser->new_token_len - i, &i, &bit_start_pos)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	18d0      	adds	r0, r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	691a      	ldr	r2, [r3, #16]
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	1ad1      	subs	r1, r2, r3
 80031ea:	f107 0318 	add.w	r3, r7, #24
 80031ee:	f107 021c 	add.w	r2, r7, #28
 80031f2:	f7ff ff21 	bl	8003038 <prv_parse_num>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <prv_get_and_parse_next_token+0x8e>
 80031fc:	2303      	movs	r3, #3
 80031fe:	e103      	b.n	8003408 <prv_get_and_parse_next_token+0x296>
                               == lwdtcOK);
            bit_end_pos = bit_start_pos;
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	617b      	str	r3, [r7, #20]
         * Character "-" defines range between min and max
         *
         * At this moment, step is still "1", indicating
         * every value between min and max is to be set
         */
        if (i < parser->new_token_len && parser->new_token[i] == '-') {
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	429a      	cmp	r2, r3
 800320c:	d939      	bls.n	8003282 <prv_get_and_parse_next_token+0x110>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	4413      	add	r3, r2
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b2d      	cmp	r3, #45	@ 0x2d
 800321a:	d132      	bne.n	8003282 <prv_get_and_parse_next_token+0x110>
            ++i;
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	3301      	adds	r3, #1
 8003220:	61fb      	str	r3, [r7, #28]

            /* Parse second part of range */
            ASSERT_ACTION(i < parser->new_token_len);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	691a      	ldr	r2, [r3, #16]
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	429a      	cmp	r2, r3
 800322a:	d801      	bhi.n	8003230 <prv_get_and_parse_next_token+0xbe>
 800322c:	2301      	movs	r3, #1
 800322e:	e0eb      	b.n	8003408 <prv_get_and_parse_next_token+0x296>
            ASSERT_TOKEN_VALID(prv_parse_num(&parser->new_token[i], parser->new_token_len - i, &i, &bit_end_pos)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	18d0      	adds	r0, r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	1ad1      	subs	r1, r2, r3
 8003240:	f107 0314 	add.w	r3, r7, #20
 8003244:	f107 021c 	add.w	r2, r7, #28
 8003248:	f7ff fef6 	bl	8003038 <prv_parse_num>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <prv_get_and_parse_next_token+0xe4>
 8003252:	2303      	movs	r3, #3
 8003254:	e0d8      	b.n	8003408 <prv_get_and_parse_next_token+0x296>
                               == lwdtcOK);

            /* Stop bit must be always higher or equal than start bit */
            if (bit_start_pos > bit_end_pos) {
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	429a      	cmp	r2, r3
 800325c:	d908      	bls.n	8003270 <prv_get_and_parse_next_token+0xfe>
                size_t tmp = bit_end_pos;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	623b      	str	r3, [r7, #32]

                /* Change start and stop values */
                bit_end_pos = bit_start_pos;
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	617b      	str	r3, [r7, #20]
                bit_start_pos = tmp;
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	61bb      	str	r3, [r7, #24]
                /* Mark it as opposite direction */
                is_opposite = 1;
 800326a:	2301      	movs	r3, #1
 800326c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
            ASSERT_TOKEN_VALID(bit_end_pos >= bit_start_pos);
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	429a      	cmp	r2, r3
 8003276:	d201      	bcs.n	800327c <prv_get_and_parse_next_token+0x10a>
 8003278:	2303      	movs	r3, #3
 800327a:	e0c5      	b.n	8003408 <prv_get_and_parse_next_token+0x296>
            is_range = 1;
 800327c:	2301      	movs	r3, #1
 800327e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
         *
         * A step_bit must be calculated according to input value and
         * end_position must be set to maximum, but only when range is not used,
         * indicating we want to use full range of available value
         */
        if (i < parser->new_token_len && parser->new_token[i] == '/') {
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	429a      	cmp	r2, r3
 800328a:	d923      	bls.n	80032d4 <prv_get_and_parse_next_token+0x162>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	4413      	add	r3, r2
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b2f      	cmp	r3, #47	@ 0x2f
 8003298:	d11c      	bne.n	80032d4 <prv_get_and_parse_next_token+0x162>
            ++i;
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	3301      	adds	r3, #1
 800329e:	61fb      	str	r3, [r7, #28]
            ASSERT_TOKEN_VALID(prv_parse_num(&parser->new_token[i], parser->new_token_len - i, &i, &bit_step)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	18d0      	adds	r0, r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	1ad1      	subs	r1, r2, r3
 80032b0:	f107 0310 	add.w	r3, r7, #16
 80032b4:	f107 021c 	add.w	r2, r7, #28
 80032b8:	f7ff febe 	bl	8003038 <prv_parse_num>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <prv_get_and_parse_next_token+0x154>
 80032c2:	2303      	movs	r3, #3
 80032c4:	e0a0      	b.n	8003408 <prv_get_and_parse_next_token+0x296>
             * If user did not specify range (min-max) values,
             * then all bits to the end of value are valid.
             *
             * Indicate this by setting end position as being maximum
             */
            if (!is_range) {
 80032c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d102      	bne.n	80032d4 <prv_get_and_parse_next_token+0x162>
                bit_end_pos = SIZE_MAX;
 80032ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032d2:	617b      	str	r3, [r7, #20]
            }
        }

        /* Verify valid user inputs, to make sure min value is lower than max one */
        if (bit_start_pos < val_min) {
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d901      	bls.n	80032e0 <prv_get_and_parse_next_token+0x16e>
            LWDTC_DEBUG("bit_start_pos & is less than minimum: %d/%d\r\n", (int)bit_start_pos, (int)val_min);
            return lwdtcERRTOKEN;
 80032dc:	2303      	movs	r3, #3
 80032de:	e093      	b.n	8003408 <prv_get_and_parse_next_token+0x296>
        }
        if (bit_end_pos > val_max) {
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d207      	bcs.n	80032f8 <prv_get_and_parse_next_token+0x186>
            /* Full value indicates complete range, perform manual strip */
            if (bit_end_pos != (size_t)-1) {
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032ee:	d001      	beq.n	80032f4 <prv_get_and_parse_next_token+0x182>
                LWDTC_DEBUG("bit_end_pos is greater than maximum: %d/%d\r\n", (int)bit_end_pos, (int)val_max);
                return lwdtcERRTOKEN;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e089      	b.n	8003408 <prv_get_and_parse_next_token+0x296>
            }
            bit_end_pos = val_max;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	617b      	str	r3, [r7, #20]
        }

        LWDTC_DEBUG("bit_start_pos: %u, bit_end_pos: %u, bit_step: %u, is_opposite: %u\r\n", (unsigned)bit_start_pos,
                    (unsigned)bit_end_pos, (unsigned)bit_step, (unsigned)is_opposite);

        if (is_opposite) {
 80032f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d048      	beq.n	8003392 <prv_get_and_parse_next_token+0x220>
            size_t bit;

            /* Set bits in map from stop to the end value and from beginning to start value */
            for (bit = bit_end_pos; bit <= val_max; bit += bit_step) {
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003304:	e018      	b.n	8003338 <prv_get_and_parse_next_token+0x1c6>
                BIT_SET(bit_map, bit);
 8003306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003308:	08db      	lsrs	r3, r3, #3
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	4413      	add	r3, r2
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	b25a      	sxtb	r2, r3
 8003312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	2101      	movs	r1, #1
 800331a:	fa01 f303 	lsl.w	r3, r1, r3
 800331e:	b25b      	sxtb	r3, r3
 8003320:	4313      	orrs	r3, r2
 8003322:	b259      	sxtb	r1, r3
 8003324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003326:	08db      	lsrs	r3, r3, #3
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	4413      	add	r3, r2
 800332c:	b2ca      	uxtb	r2, r1
 800332e:	701a      	strb	r2, [r3, #0]
            for (bit = bit_end_pos; bit <= val_max; bit += bit_step) {
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003334:	4413      	add	r3, r2
 8003336:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003338:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d9e2      	bls.n	8003306 <prv_get_and_parse_next_token+0x194>
            }
            /* We start at the multiplier of bit_step value */
            for (bit = bit % bit_step + val_min; bit <= bit_start_pos; bit += bit_step) {
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003344:	fbb3 f1f2 	udiv	r1, r3, r2
 8003348:	fb01 f202 	mul.w	r2, r1, r2
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003354:	e018      	b.n	8003388 <prv_get_and_parse_next_token+0x216>
                BIT_SET(bit_map, bit);
 8003356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003358:	08db      	lsrs	r3, r3, #3
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	4413      	add	r3, r2
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b25a      	sxtb	r2, r3
 8003362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	2101      	movs	r1, #1
 800336a:	fa01 f303 	lsl.w	r3, r1, r3
 800336e:	b25b      	sxtb	r3, r3
 8003370:	4313      	orrs	r3, r2
 8003372:	b259      	sxtb	r1, r3
 8003374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003376:	08db      	lsrs	r3, r3, #3
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	4413      	add	r3, r2
 800337c:	b2ca      	uxtb	r2, r1
 800337e:	701a      	strb	r2, [r3, #0]
            for (bit = bit % bit_step + val_min; bit <= bit_start_pos; bit += bit_step) {
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003384:	4413      	add	r3, r2
 8003386:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800338c:	429a      	cmp	r2, r3
 800338e:	d9e2      	bls.n	8003356 <prv_get_and_parse_next_token+0x1e4>
 8003390:	e01f      	b.n	80033d2 <prv_get_and_parse_next_token+0x260>
            }
        } else {
            /* Set bits in map from start to end */
            for (size_t bit = bit_start_pos; bit <= bit_end_pos; bit += bit_step) {
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	627b      	str	r3, [r7, #36]	@ 0x24
 8003396:	e018      	b.n	80033ca <prv_get_and_parse_next_token+0x258>
                BIT_SET(bit_map, bit);
 8003398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339a:	08db      	lsrs	r3, r3, #3
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	4413      	add	r3, r2
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	b25a      	sxtb	r2, r3
 80033a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	2101      	movs	r1, #1
 80033ac:	fa01 f303 	lsl.w	r3, r1, r3
 80033b0:	b25b      	sxtb	r3, r3
 80033b2:	4313      	orrs	r3, r2
 80033b4:	b259      	sxtb	r1, r3
 80033b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b8:	08db      	lsrs	r3, r3, #3
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	4413      	add	r3, r2
 80033be:	b2ca      	uxtb	r2, r1
 80033c0:	701a      	strb	r2, [r3, #0]
            for (size_t bit = bit_start_pos; bit <= bit_end_pos; bit += bit_step) {
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033c6:	4413      	add	r3, r2
 80033c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d9e2      	bls.n	8003398 <prv_get_and_parse_next_token+0x226>
            }
        }

        /* If we are not at the end, character must be comma */
        if (i == parser->new_token_len) {
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d013      	beq.n	8003404 <prv_get_and_parse_next_token+0x292>
            break;
        } else if (parser->new_token[i] != ',') {
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	4413      	add	r3, r2
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b2c      	cmp	r3, #44	@ 0x2c
 80033e8:	d001      	beq.n	80033ee <prv_get_and_parse_next_token+0x27c>
            return lwdtcERRTOKEN;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e00c      	b.n	8003408 <prv_get_and_parse_next_token+0x296>
        }
    } while (parser->new_token[i++] == ','); /* Could be replaced by (1) */
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	1c59      	adds	r1, r3, #1
 80033f6:	61f9      	str	r1, [r7, #28]
 80033f8:	4413      	add	r3, r2
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b2c      	cmp	r3, #44	@ 0x2c
 80033fe:	f43f aec9 	beq.w	8003194 <prv_get_and_parse_next_token+0x22>
 8003402:	e000      	b.n	8003406 <prv_get_and_parse_next_token+0x294>
            break;
 8003404:	bf00      	nop
    return lwdtcOK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3730      	adds	r7, #48	@ 0x30
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <lwdtc_cron_parse_with_len>:
 * \param[in]       cron_str_len: Length of input cron string,
 *                      not counting potential `NULL` termination character
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
lwdtcr_t
lwdtc_cron_parse_with_len(lwdtc_cron_ctx_t* ctx, const char* cron_str, size_t cron_str_len) {
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	@ 0x28
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
    prv_cron_parser_ctx_t parser = {0};
 800341c:	f107 0310 	add.w	r3, r7, #16
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	611a      	str	r2, [r3, #16]
    lwdtcr_t res;

    ASSERT_PARAM(ctx != NULL && cron_str != NULL && cron_str_len > 0);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <lwdtc_cron_parse_with_len+0x2e>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <lwdtc_cron_parse_with_len+0x2e>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <lwdtc_cron_parse_with_len+0x32>
 800343e:	2302      	movs	r3, #2
 8003440:	e090      	b.n	8003564 <lwdtc_cron_parse_with_len+0x154>
    memset(ctx, 0x00, sizeof(*ctx)); /* Reset structure */
 8003442:	222c      	movs	r2, #44	@ 0x2c
 8003444:	2100      	movs	r1, #0
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f028 fb60 	bl	802bb0c <memset>

    /* Setup parser */
    parser.ctx = ctx;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	613b      	str	r3, [r7, #16]
    parser.cron_str = cron_str;
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	617b      	str	r3, [r7, #20]
    parser.cron_str_len = cron_str_len;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	61bb      	str	r3, [r7, #24]
    if ((res = (func_call)) != lwdtcOK) {                                                                              \
        return res;                                                                                                    \
    }

    /* Parse seconds field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->sec, LWDTC_SEC_MIN, LWDTC_SEC_MAX));
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	1d19      	adds	r1, r3, #4
 800345c:	f107 0010 	add.w	r0, r7, #16
 8003460:	233b      	movs	r3, #59	@ 0x3b
 8003462:	2200      	movs	r2, #0
 8003464:	f7ff fe85 	bl	8003172 <prv_get_and_parse_next_token>
 8003468:	4603      	mov	r3, r0
 800346a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800346e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <lwdtc_cron_parse_with_len+0x6c>
 8003476:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800347a:	e073      	b.n	8003564 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Seconds token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse minutes field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->min, LWDTC_MIN_MIN, LWDTC_MIN_MAX));
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f103 010c 	add.w	r1, r3, #12
 8003482:	f107 0010 	add.w	r0, r7, #16
 8003486:	233b      	movs	r3, #59	@ 0x3b
 8003488:	2200      	movs	r2, #0
 800348a:	f7ff fe72 	bl	8003172 <prv_get_and_parse_next_token>
 800348e:	4603      	mov	r3, r0
 8003490:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003494:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <lwdtc_cron_parse_with_len+0x92>
 800349c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034a0:	e060      	b.n	8003564 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Minutes token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse hours field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->hour, LWDTC_HOUR_MIN, LWDTC_HOUR_MAX));
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f103 0114 	add.w	r1, r3, #20
 80034a8:	f107 0010 	add.w	r0, r7, #16
 80034ac:	2317      	movs	r3, #23
 80034ae:	2200      	movs	r2, #0
 80034b0:	f7ff fe5f 	bl	8003172 <prv_get_and_parse_next_token>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80034ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <lwdtc_cron_parse_with_len+0xb8>
 80034c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034c6:	e04d      	b.n	8003564 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Hours token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse day in month field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->mday, LWDTC_MDAY_MIN, LWDTC_MDAY_MAX));
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f103 0117 	add.w	r1, r3, #23
 80034ce:	f107 0010 	add.w	r0, r7, #16
 80034d2:	231f      	movs	r3, #31
 80034d4:	2201      	movs	r2, #1
 80034d6:	f7ff fe4c 	bl	8003172 <prv_get_and_parse_next_token>
 80034da:	4603      	mov	r3, r0
 80034dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80034e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <lwdtc_cron_parse_with_len+0xde>
 80034e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034ec:	e03a      	b.n	8003564 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Mday token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse month field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->mon, LWDTC_MON_MIN, LWDTC_MON_MAX));
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f103 011b 	add.w	r1, r3, #27
 80034f4:	f107 0010 	add.w	r0, r7, #16
 80034f8:	230c      	movs	r3, #12
 80034fa:	2201      	movs	r2, #1
 80034fc:	f7ff fe39 	bl	8003172 <prv_get_and_parse_next_token>
 8003500:	4603      	mov	r3, r0
 8003502:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003506:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <lwdtc_cron_parse_with_len+0x104>
 800350e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003512:	e027      	b.n	8003564 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Month token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse day in a week field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->wday, LWDTC_WDAY_MIN, LWDTC_WDAY_MAX));
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f103 011d 	add.w	r1, r3, #29
 800351a:	f107 0010 	add.w	r0, r7, #16
 800351e:	2306      	movs	r3, #6
 8003520:	2200      	movs	r2, #0
 8003522:	f7ff fe26 	bl	8003172 <prv_get_and_parse_next_token>
 8003526:	4603      	mov	r3, r0
 8003528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800352c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <lwdtc_cron_parse_with_len+0x12a>
 8003534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003538:	e014      	b.n	8003564 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Weekday token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse year field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->year, LWDTC_YEAR_MIN, LWDTC_YEAR_MAX));
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f103 011e 	add.w	r1, r3, #30
 8003540:	f107 0010 	add.w	r0, r7, #16
 8003544:	2364      	movs	r3, #100	@ 0x64
 8003546:	2200      	movs	r2, #0
 8003548:	f7ff fe13 	bl	8003172 <prv_get_and_parse_next_token>
 800354c:	4603      	mov	r3, r0
 800354e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003552:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <lwdtc_cron_parse_with_len+0x150>
 800355a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800355e:	e001      	b.n	8003564 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Year token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);
    return res;
 8003560:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003564:	4618      	mov	r0, r3
 8003566:	3728      	adds	r7, #40	@ 0x28
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <lwdtc_cron_parse_multi>:
 *                      Used only if function doesn't return \ref lwdtcOK,
 *                      otherwise pointer doesn't get modified
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
lwdtcr_t
lwdtc_cron_parse_multi(lwdtc_cron_ctx_t* cron_ctx, struct dbCron dbCrontxt[], size_t ctx_len, size_t* fail_index) {
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	603b      	str	r3, [r7, #0]
    lwdtcr_t res = lwdtcERR;
 800357a:	2301      	movs	r3, #1
 800357c:	77fb      	strb	r3, [r7, #31]
    int x = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]

    ASSERT_PARAM(cron_ctx != NULL && ctx_len > 0);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <lwdtc_cron_parse_multi+0x22>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <lwdtc_cron_parse_multi+0x26>
 800358e:	2302      	movs	r3, #2
 8003590:	e036      	b.n	8003600 <lwdtc_cron_parse_multi+0x94>
//

    /* Parse all input strings, each to its own cron context structure */
    for (size_t i = 0; i < ctx_len; ++i) {
 8003592:	2300      	movs	r3, #0
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	e02c      	b.n	80035f2 <lwdtc_cron_parse_multi+0x86>
    	x = strlen(dbCrontxt[i].cron);
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 800359e:	fb02 f303 	mul.w	r3, r2, r3
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	4413      	add	r3, r2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fc feaa 	bl	8000300 <strlen>
 80035ac:	4603      	mov	r3, r0
 80035ae:	617b      	str	r3, [r7, #20]
        if ((res = lwdtc_cron_parse_with_len(&cron_ctx[i], dbCrontxt[i].cron, x)) != lwdtcOK) {
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	222c      	movs	r2, #44	@ 0x2c
 80035b4:	fb02 f303 	mul.w	r3, r2, r3
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	18d0      	adds	r0, r2, r3
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 80035c2:	fb02 f303 	mul.w	r3, r2, r3
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	4413      	add	r3, r2
 80035ca:	4619      	mov	r1, r3
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	461a      	mov	r2, r3
 80035d0:	f7ff ff1e 	bl	8003410 <lwdtc_cron_parse_with_len>
 80035d4:	4603      	mov	r3, r0
 80035d6:	77fb      	strb	r3, [r7, #31]
 80035d8:	7ffb      	ldrb	r3, [r7, #31]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d006      	beq.n	80035ec <lwdtc_cron_parse_multi+0x80>
            if (fail_index != NULL) {
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00b      	beq.n	80035fc <lwdtc_cron_parse_multi+0x90>
                *fail_index = i;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	601a      	str	r2, [r3, #0]
            }
            break;
 80035ea:	e007      	b.n	80035fc <lwdtc_cron_parse_multi+0x90>
    for (size_t i = 0; i < ctx_len; ++i) {
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	3301      	adds	r3, #1
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d3ce      	bcc.n	8003598 <lwdtc_cron_parse_multi+0x2c>
 80035fa:	e000      	b.n	80035fe <lwdtc_cron_parse_multi+0x92>
            break;
 80035fc:	bf00      	nop
        }
    }
    return res;
 80035fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <lwdtc_cron_is_valid_for_time>:
 *                      and does not perform additional check
 * \param[in]       cron_ctx: Cron context object with valid structure
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
lwdtcr_t
lwdtc_cron_is_valid_for_time(const struct tm* tm_time, const lwdtc_cron_ctx_t* cron_ctx, int *idtask) {
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
    lwdtcr_t res = lwdtcOK;
 8003614:	2300      	movs	r3, #0
 8003616:	75fb      	strb	r3, [r7, #23]
    int i = *idtask;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	613b      	str	r3, [r7, #16]

    ASSERT_PARAM(tm_time != NULL && cron_ctx != NULL);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <lwdtc_cron_is_valid_for_time+0x22>
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <lwdtc_cron_is_valid_for_time+0x26>
 800362a:	2302      	movs	r3, #2
 800362c:	e09f      	b.n	800376e <lwdtc_cron_is_valid_for_time+0x166>
     * - When particular day in month occurs
     * - or when particular day in week occurs, effectively becoming OR operation.
     *
     * Our cron is a valid when bitwise AND-ed between all fields is a pass
     */
    if (!BIT_IS_SET(cron_ctx[i].sec, tm_time->tm_sec) || !BIT_IS_SET(cron_ctx[i].min, tm_time->tm_min)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	222c      	movs	r2, #44	@ 0x2c
 8003632:	fb02 f303 	mul.w	r3, r2, r3
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	441a      	add	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	10db      	asrs	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	791b      	ldrb	r3, [r3, #4]
 8003644:	461a      	mov	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	fa42 f303 	asr.w	r3, r2, r3
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 8086 	beq.w	8003768 <lwdtc_cron_is_valid_for_time+0x160>
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	222c      	movs	r2, #44	@ 0x2c
 8003660:	fb02 f303 	mul.w	r3, r2, r3
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	441a      	add	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	10db      	asrs	r3, r3, #3
 800366e:	4413      	add	r3, r2
 8003670:	7b1b      	ldrb	r3, [r3, #12]
 8003672:	461a      	mov	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	fa42 f303 	asr.w	r3, r2, r3
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d06f      	beq.n	8003768 <lwdtc_cron_is_valid_for_time+0x160>
        || !BIT_IS_SET(cron_ctx[i].hour, tm_time->tm_hour) || !BIT_IS_SET(cron_ctx[i].mday, tm_time->tm_mday)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	222c      	movs	r2, #44	@ 0x2c
 800368c:	fb02 f303 	mul.w	r3, r2, r3
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	441a      	add	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	10db      	asrs	r3, r3, #3
 800369a:	4413      	add	r3, r2
 800369c:	7d1b      	ldrb	r3, [r3, #20]
 800369e:	461a      	mov	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	fa42 f303 	asr.w	r3, r2, r3
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d059      	beq.n	8003768 <lwdtc_cron_is_valid_for_time+0x160>
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	222c      	movs	r2, #44	@ 0x2c
 80036b8:	fb02 f303 	mul.w	r3, r2, r3
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	441a      	add	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	10db      	asrs	r3, r3, #3
 80036c6:	4413      	add	r3, r2
 80036c8:	7ddb      	ldrb	r3, [r3, #23]
 80036ca:	461a      	mov	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	fa42 f303 	asr.w	r3, r2, r3
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d043      	beq.n	8003768 <lwdtc_cron_is_valid_for_time+0x160>
        || !BIT_IS_SET(cron_ctx[i].mon, tm_time->tm_mon) || !BIT_IS_SET(cron_ctx[i].wday, tm_time->tm_wday)
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	222c      	movs	r2, #44	@ 0x2c
 80036e4:	fb02 f303 	mul.w	r3, r2, r3
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	441a      	add	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	10db      	asrs	r3, r3, #3
 80036f2:	4413      	add	r3, r2
 80036f4:	7edb      	ldrb	r3, [r3, #27]
 80036f6:	461a      	mov	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	fa42 f303 	asr.w	r3, r2, r3
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d02d      	beq.n	8003768 <lwdtc_cron_is_valid_for_time+0x160>
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	222c      	movs	r2, #44	@ 0x2c
 8003710:	fb02 f303 	mul.w	r3, r2, r3
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	441a      	add	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	10db      	asrs	r3, r3, #3
 800371e:	4413      	add	r3, r2
 8003720:	7f5b      	ldrb	r3, [r3, #29]
 8003722:	461a      	mov	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	fa42 f303 	asr.w	r3, r2, r3
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d017      	beq.n	8003768 <lwdtc_cron_is_valid_for_time+0x160>
        || !BIT_IS_SET(cron_ctx[i].year, (tm_time->tm_year - 100))) {
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	222c      	movs	r2, #44	@ 0x2c
 800373c:	fb02 f303 	mul.w	r3, r2, r3
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	441a      	add	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	3b64      	subs	r3, #100	@ 0x64
 800374a:	10db      	asrs	r3, r3, #3
 800374c:	4413      	add	r3, r2
 800374e:	7f9b      	ldrb	r3, [r3, #30]
 8003750:	461a      	mov	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	3b64      	subs	r3, #100	@ 0x64
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	fa42 f303 	asr.w	r3, r2, r3
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <lwdtc_cron_is_valid_for_time+0x164>
        res = lwdtcERR;
 8003768:	2301      	movs	r3, #1
 800376a:	75fb      	strb	r3, [r7, #23]
    }
    return res;
 800376c:	7dfb      	ldrb	r3, [r7, #23]
}
 800376e:	4618      	mov	r0, r3
 8003770:	371c      	adds	r7, #28
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
	...

0800377c <mg_random>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*********************** Mongoose ******************************/
void mg_random(void *buf, size_t len) {  // Use on-board RNG
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
	extern RNG_HandleTypeDef hrng;
	for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	e01a      	b.n	80037c2 <mg_random+0x46>
		uint32_t r;
		HAL_RNG_GenerateRandomNumber(&hrng, &r);
 800378c:	f107 0308 	add.w	r3, r7, #8
 8003790:	4619      	mov	r1, r3
 8003792:	4810      	ldr	r0, [pc, #64]	@ (80037d4 <mg_random+0x58>)
 8003794:	f019 f94e 	bl	801ca34 <HAL_RNG_GenerateRandomNumber>
		memcpy((char*) buf + n, &r, n + sizeof(r) > len ? len - n : sizeof(r));
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	18d0      	adds	r0, r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3304      	adds	r3, #4
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d203      	bcs.n	80037b0 <mg_random+0x34>
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	e000      	b.n	80037b2 <mg_random+0x36>
 80037b0:	2304      	movs	r3, #4
 80037b2:	f107 0108 	add.w	r1, r7, #8
 80037b6:	461a      	mov	r2, r3
 80037b8:	f028 fedd 	bl	802c576 <memcpy>
	for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	3304      	adds	r3, #4
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d3e0      	bcc.n	800378c <mg_random+0x10>
	}
}
 80037ca:	bf00      	nop
 80037cc:	bf00      	nop
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20011838 	.word	0x20011838

080037d8 <mg_millis>:
static void timer_fn(void *arg) {
	struct mg_tcpip_if *ifp = arg;                  // And show
	const char *names[] = { "down", "up", "req", "ready" };  // network stats
	MG_INFO(("Ethernet: %s, IP: %M, rx:%u, tx:%u, dr:%u, er:%u", names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent, ifp->ndrop, ifp->nerr));
}
uint64_t mg_millis(void) {
 80037d8:	b5b0      	push	{r4, r5, r7, lr}
 80037da:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80037dc:	f014 fef4 	bl	80185c8 <HAL_GetTick>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2200      	movs	r2, #0
 80037e4:	461c      	mov	r4, r3
 80037e6:	4615      	mov	r5, r2
 80037e8:	4622      	mov	r2, r4
 80037ea:	462b      	mov	r3, r5
}
 80037ec:	4610      	mov	r0, r2
 80037ee:	4619      	mov	r1, r3
 80037f0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080037f4 <button_event_handler>:
//}
/*********************** End Mongoose ******************************/

// Функция обратного вызова для обработки событий кнопки
 void button_event_handler(Button* handle)
 {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
     // Обработчик событий кнопки
     PressEvent event = get_button_event(handle);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f00f ff62 	bl	80136c6 <get_button_event>
 8003802:	4603      	mov	r3, r0
 8003804:	73bb      	strb	r3, [r7, #14]

     switch (event) {
 8003806:	7bbb      	ldrb	r3, [r7, #14]
 8003808:	2b08      	cmp	r3, #8
 800380a:	f200 80bc 	bhi.w	8003986 <button_event_handler+0x192>
 800380e:	a201      	add	r2, pc, #4	@ (adr r2, 8003814 <button_event_handler+0x20>)
 8003810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003814:	08003839 	.word	0x08003839
 8003818:	0800385d 	.word	0x0800385d
 800381c:	08003963 	.word	0x08003963
 8003820:	080038c7 	.word	0x080038c7
 8003824:	0800393f 	.word	0x0800393f
 8003828:	08003881 	.word	0x08003881
 800382c:	080038a5 	.word	0x080038a5
 8003830:	08003987 	.word	0x08003987
 8003834:	08003987 	.word	0x08003987
         case NONE_PRESS:
             // Нет нажатия
             break;
         case PRESS_DOWN:
             // Кнопка нажата
             MG_INFO(("Button %d: PRESS_DOWN!\r\n", handle->button_id));
 8003838:	4b5c      	ldr	r3, [pc, #368]	@ (80039ac <button_event_handler+0x1b8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b01      	cmp	r3, #1
 800383e:	f340 80a4 	ble.w	800398a <button_event_handler+0x196>
 8003842:	4b5b      	ldr	r3, [pc, #364]	@ (80039b0 <button_event_handler+0x1bc>)
 8003844:	22f1      	movs	r2, #241	@ 0xf1
 8003846:	495b      	ldr	r1, [pc, #364]	@ (80039b4 <button_event_handler+0x1c0>)
 8003848:	2002      	movs	r0, #2
 800384a:	f008 fbd3 	bl	800bff4 <mg_log_prefix>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	791b      	ldrb	r3, [r3, #4]
 8003852:	4619      	mov	r1, r3
 8003854:	4858      	ldr	r0, [pc, #352]	@ (80039b8 <button_event_handler+0x1c4>)
 8003856:	f008 fc1d 	bl	800c094 <mg_log>
             break;
 800385a:	e096      	b.n	800398a <button_event_handler+0x196>
         case PRESS_UP:
             // Кнопка отпущена
             MG_INFO(("Button %d: PRESS_UP!\r\n", handle->button_id));
 800385c:	4b53      	ldr	r3, [pc, #332]	@ (80039ac <button_event_handler+0x1b8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b01      	cmp	r3, #1
 8003862:	f340 8094 	ble.w	800398e <button_event_handler+0x19a>
 8003866:	4b52      	ldr	r3, [pc, #328]	@ (80039b0 <button_event_handler+0x1bc>)
 8003868:	22f5      	movs	r2, #245	@ 0xf5
 800386a:	4952      	ldr	r1, [pc, #328]	@ (80039b4 <button_event_handler+0x1c0>)
 800386c:	2002      	movs	r0, #2
 800386e:	f008 fbc1 	bl	800bff4 <mg_log_prefix>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	791b      	ldrb	r3, [r3, #4]
 8003876:	4619      	mov	r1, r3
 8003878:	4850      	ldr	r0, [pc, #320]	@ (80039bc <button_event_handler+0x1c8>)
 800387a:	f008 fc0b 	bl	800c094 <mg_log>
             break;
 800387e:	e086      	b.n	800398e <button_event_handler+0x19a>
         case LONG_PRESS_START:
             // Начало долгого нажатия
             MG_INFO(("Button %d: LONG_PRESS_START!\r\n", handle->button_id));
 8003880:	4b4a      	ldr	r3, [pc, #296]	@ (80039ac <button_event_handler+0x1b8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b01      	cmp	r3, #1
 8003886:	f340 8084 	ble.w	8003992 <button_event_handler+0x19e>
 800388a:	4b49      	ldr	r3, [pc, #292]	@ (80039b0 <button_event_handler+0x1bc>)
 800388c:	22f9      	movs	r2, #249	@ 0xf9
 800388e:	4949      	ldr	r1, [pc, #292]	@ (80039b4 <button_event_handler+0x1c0>)
 8003890:	2002      	movs	r0, #2
 8003892:	f008 fbaf 	bl	800bff4 <mg_log_prefix>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	791b      	ldrb	r3, [r3, #4]
 800389a:	4619      	mov	r1, r3
 800389c:	4848      	ldr	r0, [pc, #288]	@ (80039c0 <button_event_handler+0x1cc>)
 800389e:	f008 fbf9 	bl	800c094 <mg_log>
             break;
 80038a2:	e076      	b.n	8003992 <button_event_handler+0x19e>
         case LONG_PRESS_HOLD:
             // Продолжение долгого нажатия
             MG_INFO(("Button %d: LONG_PRESS_HOLD!\r\n", handle->button_id));
 80038a4:	4b41      	ldr	r3, [pc, #260]	@ (80039ac <button_event_handler+0x1b8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	dd74      	ble.n	8003996 <button_event_handler+0x1a2>
 80038ac:	4b40      	ldr	r3, [pc, #256]	@ (80039b0 <button_event_handler+0x1bc>)
 80038ae:	22fd      	movs	r2, #253	@ 0xfd
 80038b0:	4940      	ldr	r1, [pc, #256]	@ (80039b4 <button_event_handler+0x1c0>)
 80038b2:	2002      	movs	r0, #2
 80038b4:	f008 fb9e 	bl	800bff4 <mg_log_prefix>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	791b      	ldrb	r3, [r3, #4]
 80038bc:	4619      	mov	r1, r3
 80038be:	4841      	ldr	r0, [pc, #260]	@ (80039c4 <button_event_handler+0x1d0>)
 80038c0:	f008 fbe8 	bl	800c094 <mg_log>
             break;
 80038c4:	e067      	b.n	8003996 <button_event_handler+0x1a2>
         case SINGLE_CLICK:
             // Одиночное нажатие кнопки
				for (uint8_t a = 0; a < NUMPINLINKS; a++) {
 80038c6:	2300      	movs	r3, #0
 80038c8:	73fb      	strb	r3, [r7, #15]
 80038ca:	e023      	b.n	8003914 <button_event_handler+0x120>
					if (PinsLinks[a].idin == handle->button_id) {
 80038cc:	7bfa      	ldrb	r2, [r7, #15]
 80038ce:	493e      	ldr	r1, [pc, #248]	@ (80039c8 <button_event_handler+0x1d4>)
 80038d0:	4613      	mov	r3, r2
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	7912      	ldrb	r2, [r2, #4]
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d114      	bne.n	800390e <button_event_handler+0x11a>
						data_pin.pin = PinsLinks[a].idout;
 80038e4:	7bfa      	ldrb	r2, [r7, #15]
 80038e6:	4938      	ldr	r1, [pc, #224]	@ (80039c8 <button_event_handler+0x1d4>)
 80038e8:	4613      	mov	r3, r2
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	4413      	add	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	3304      	adds	r3, #4
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a35      	ldr	r2, [pc, #212]	@ (80039cc <button_event_handler+0x1d8>)
 80038f8:	6013      	str	r3, [r2, #0]
						data_pin.action = 2;
 80038fa:	4b34      	ldr	r3, [pc, #208]	@ (80039cc <button_event_handler+0x1d8>)
 80038fc:	2202      	movs	r2, #2
 80038fe:	605a      	str	r2, [r3, #4]
						xQueueSend(myQueueHandle, (void* ) &data_pin, 0);
 8003900:	4b33      	ldr	r3, [pc, #204]	@ (80039d0 <button_event_handler+0x1dc>)
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	2300      	movs	r3, #0
 8003906:	2200      	movs	r2, #0
 8003908:	4930      	ldr	r1, [pc, #192]	@ (80039cc <button_event_handler+0x1d8>)
 800390a:	f023 fb55 	bl	8026fb8 <xQueueGenericSend>
				for (uint8_t a = 0; a < NUMPINLINKS; a++) {
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	3301      	adds	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	2b63      	cmp	r3, #99	@ 0x63
 8003918:	d9d8      	bls.n	80038cc <button_event_handler+0xd8>
					}
				}
             MG_INFO(("Button %d: SINGLE_CLICK!\r\n", handle->button_id));
 800391a:	4b24      	ldr	r3, [pc, #144]	@ (80039ac <button_event_handler+0x1b8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b01      	cmp	r3, #1
 8003920:	dd3b      	ble.n	800399a <button_event_handler+0x1a6>
 8003922:	4b23      	ldr	r3, [pc, #140]	@ (80039b0 <button_event_handler+0x1bc>)
 8003924:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003928:	4922      	ldr	r1, [pc, #136]	@ (80039b4 <button_event_handler+0x1c0>)
 800392a:	2002      	movs	r0, #2
 800392c:	f008 fb62 	bl	800bff4 <mg_log_prefix>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	791b      	ldrb	r3, [r3, #4]
 8003934:	4619      	mov	r1, r3
 8003936:	4827      	ldr	r0, [pc, #156]	@ (80039d4 <button_event_handler+0x1e0>)
 8003938:	f008 fbac 	bl	800c094 <mg_log>
             break;
 800393c:	e02d      	b.n	800399a <button_event_handler+0x1a6>
         case DOUBLE_CLICK:
             // Двойное нажатие кнопки
             MG_INFO(("Button %d: DOUBLE_CLICK!\r\n", handle->button_id));
 800393e:	4b1b      	ldr	r3, [pc, #108]	@ (80039ac <button_event_handler+0x1b8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b01      	cmp	r3, #1
 8003944:	dd2b      	ble.n	800399e <button_event_handler+0x1aa>
 8003946:	4b1a      	ldr	r3, [pc, #104]	@ (80039b0 <button_event_handler+0x1bc>)
 8003948:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800394c:	4919      	ldr	r1, [pc, #100]	@ (80039b4 <button_event_handler+0x1c0>)
 800394e:	2002      	movs	r0, #2
 8003950:	f008 fb50 	bl	800bff4 <mg_log_prefix>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	791b      	ldrb	r3, [r3, #4]
 8003958:	4619      	mov	r1, r3
 800395a:	481f      	ldr	r0, [pc, #124]	@ (80039d8 <button_event_handler+0x1e4>)
 800395c:	f008 fb9a 	bl	800c094 <mg_log>
             break;
 8003960:	e01d      	b.n	800399e <button_event_handler+0x1aa>
         case PRESS_REPEAT:
             // Повторное нажатие кнопки
             MG_INFO(("Button %d: PRESS_REPEAT!\r\n", handle->button_id));
 8003962:	4b12      	ldr	r3, [pc, #72]	@ (80039ac <button_event_handler+0x1b8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b01      	cmp	r3, #1
 8003968:	dd1b      	ble.n	80039a2 <button_event_handler+0x1ae>
 800396a:	4b11      	ldr	r3, [pc, #68]	@ (80039b0 <button_event_handler+0x1bc>)
 800396c:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8003970:	4910      	ldr	r1, [pc, #64]	@ (80039b4 <button_event_handler+0x1c0>)
 8003972:	2002      	movs	r0, #2
 8003974:	f008 fb3e 	bl	800bff4 <mg_log_prefix>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	791b      	ldrb	r3, [r3, #4]
 800397c:	4619      	mov	r1, r3
 800397e:	4817      	ldr	r0, [pc, #92]	@ (80039dc <button_event_handler+0x1e8>)
 8003980:	f008 fb88 	bl	800c094 <mg_log>
             break;
 8003984:	e00d      	b.n	80039a2 <button_event_handler+0x1ae>
         default:
             // Обработка неизвестного значения event
             break;
 8003986:	bf00      	nop
 8003988:	e00c      	b.n	80039a4 <button_event_handler+0x1b0>
             break;
 800398a:	bf00      	nop
 800398c:	e00a      	b.n	80039a4 <button_event_handler+0x1b0>
             break;
 800398e:	bf00      	nop
 8003990:	e008      	b.n	80039a4 <button_event_handler+0x1b0>
             break;
 8003992:	bf00      	nop
 8003994:	e006      	b.n	80039a4 <button_event_handler+0x1b0>
             break;
 8003996:	bf00      	nop
 8003998:	e004      	b.n	80039a4 <button_event_handler+0x1b0>
             break;
 800399a:	bf00      	nop
 800399c:	e002      	b.n	80039a4 <button_event_handler+0x1b0>
             break;
 800399e:	bf00      	nop
 80039a0:	e000      	b.n	80039a4 <button_event_handler+0x1b0>
             break;
 80039a2:	bf00      	nop
     }
 }
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	20000244 	.word	0x20000244
 80039b0:	08032584 	.word	0x08032584
 80039b4:	0802ece0 	.word	0x0802ece0
 80039b8:	0802ed50 	.word	0x0802ed50
 80039bc:	0802ed6c 	.word	0x0802ed6c
 80039c0:	0802ed84 	.word	0x0802ed84
 80039c4:	0802eda4 	.word	0x0802eda4
 80039c8:	2000d9cc 	.word	0x2000d9cc
 80039cc:	200107fc 	.word	0x200107fc
 80039d0:	20011938 	.word	0x20011938
 80039d4:	0802edc4 	.word	0x0802edc4
 80039d8:	0802ede0 	.word	0x0802ede0
 80039dc:	0802edfc 	.word	0x0802edfc

080039e0 <pwm_event_handler>:

 void pwm_event_handler(Button* handle)
  {
 80039e0:	b590      	push	{r4, r7, lr}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
      // Обработчик событий кнопки
      PressEvent event = get_button_event(handle);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f00f fe6c 	bl	80136c6 <get_button_event>
 80039ee:	4603      	mov	r3, r0
 80039f0:	737b      	strb	r3, [r7, #13]

      int i = 0;
 80039f2:	2300      	movs	r3, #0
 80039f4:	60bb      	str	r3, [r7, #8]

      switch (event) {
 80039f6:	7b7b      	ldrb	r3, [r7, #13]
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	f200 8453 	bhi.w	80042a4 <pwm_event_handler+0x8c4>
 80039fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003a04 <pwm_event_handler+0x24>)
 8003a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a04:	08003a29 	.word	0x08003a29
 8003a08:	08003a51 	.word	0x08003a51
 8003a0c:	08004281 	.word	0x08004281
 8003a10:	08003e4b 	.word	0x08003e4b
 8003a14:	0800420f 	.word	0x0800420f
 8003a18:	08003a79 	.word	0x08003a79
 8003a1c:	08003aa1 	.word	0x08003aa1
 8003a20:	080042a5 	.word	0x080042a5
 8003a24:	080042a5 	.word	0x080042a5
          case NONE_PRESS:
              // Нет нажатия
              break;
          case PRESS_DOWN:
              // Кнопка нажата
              MG_INFO(("Button %d: PRESS_DOWN!\r\n", handle->button_id));
 8003a28:	4ba7      	ldr	r3, [pc, #668]	@ (8003cc8 <pwm_event_handler+0x2e8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	f340 843b 	ble.w	80042a8 <pwm_event_handler+0x8c8>
 8003a32:	4ba6      	ldr	r3, [pc, #664]	@ (8003ccc <pwm_event_handler+0x2ec>)
 8003a34:	f240 1225 	movw	r2, #293	@ 0x125
 8003a38:	49a5      	ldr	r1, [pc, #660]	@ (8003cd0 <pwm_event_handler+0x2f0>)
 8003a3a:	2002      	movs	r0, #2
 8003a3c:	f008 fada 	bl	800bff4 <mg_log_prefix>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	791b      	ldrb	r3, [r3, #4]
 8003a44:	4619      	mov	r1, r3
 8003a46:	48a3      	ldr	r0, [pc, #652]	@ (8003cd4 <pwm_event_handler+0x2f4>)
 8003a48:	f008 fb24 	bl	800c094 <mg_log>
              break;
 8003a4c:	f000 bc2c 	b.w	80042a8 <pwm_event_handler+0x8c8>
          case PRESS_UP:
              // Кнопка отпущена
              MG_INFO(("Button %d: PRESS_UP!\r\n", handle->button_id));
 8003a50:	4b9d      	ldr	r3, [pc, #628]	@ (8003cc8 <pwm_event_handler+0x2e8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	f340 8429 	ble.w	80042ac <pwm_event_handler+0x8cc>
 8003a5a:	4b9c      	ldr	r3, [pc, #624]	@ (8003ccc <pwm_event_handler+0x2ec>)
 8003a5c:	f240 1229 	movw	r2, #297	@ 0x129
 8003a60:	499b      	ldr	r1, [pc, #620]	@ (8003cd0 <pwm_event_handler+0x2f0>)
 8003a62:	2002      	movs	r0, #2
 8003a64:	f008 fac6 	bl	800bff4 <mg_log_prefix>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	791b      	ldrb	r3, [r3, #4]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	489a      	ldr	r0, [pc, #616]	@ (8003cd8 <pwm_event_handler+0x2f8>)
 8003a70:	f008 fb10 	bl	800c094 <mg_log>
              break;
 8003a74:	f000 bc1a 	b.w	80042ac <pwm_event_handler+0x8cc>
          case LONG_PRESS_START:
              // Начало долгого нажатия
              MG_INFO(("Button %d: LONG_PRESS_START!\r\n", handle->button_id));
 8003a78:	4b93      	ldr	r3, [pc, #588]	@ (8003cc8 <pwm_event_handler+0x2e8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	f340 8417 	ble.w	80042b0 <pwm_event_handler+0x8d0>
 8003a82:	4b92      	ldr	r3, [pc, #584]	@ (8003ccc <pwm_event_handler+0x2ec>)
 8003a84:	f240 122d 	movw	r2, #301	@ 0x12d
 8003a88:	4991      	ldr	r1, [pc, #580]	@ (8003cd0 <pwm_event_handler+0x2f0>)
 8003a8a:	2002      	movs	r0, #2
 8003a8c:	f008 fab2 	bl	800bff4 <mg_log_prefix>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	791b      	ldrb	r3, [r3, #4]
 8003a94:	4619      	mov	r1, r3
 8003a96:	4891      	ldr	r0, [pc, #580]	@ (8003cdc <pwm_event_handler+0x2fc>)
 8003a98:	f008 fafc 	bl	800c094 <mg_log>
              break;
 8003a9c:	f000 bc08 	b.w	80042b0 <pwm_event_handler+0x8d0>
          case LONG_PRESS_HOLD:
        	  if(PinsConf[handle->button_id].sclick == 2){
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	791b      	ldrb	r3, [r3, #4]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4a8e      	ldr	r2, [pc, #568]	@ (8003ce0 <pwm_event_handler+0x300>)
 8003aa8:	f44f 7318 	mov.w	r3, #608	@ 0x260
 8003aac:	fb01 f303 	mul.w	r3, r1, r3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3312      	adds	r3, #18
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	f040 81b4 	bne.w	8003e24 <pwm_event_handler+0x444>
				for (uint8_t a = 0; a < NUMPINLINKS; a++) {
 8003abc:	2300      	movs	r3, #0
 8003abe:	73fb      	strb	r3, [r7, #15]
 8003ac0:	e1ac      	b.n	8003e1c <pwm_event_handler+0x43c>
					if (PinsLinks[a].idin == handle->button_id) {
 8003ac2:	7bfa      	ldrb	r2, [r7, #15]
 8003ac4:	4987      	ldr	r1, [pc, #540]	@ (8003ce4 <pwm_event_handler+0x304>)
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	7912      	ldrb	r2, [r2, #4]
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	f040 819d 	bne.w	8003e16 <pwm_event_handler+0x436>
						//PinsInfo[i].tim->CCR1 = 50;

								// PWM
								i = PinsLinks[a].idout;
 8003adc:	7bfa      	ldrb	r2, [r7, #15]
 8003ade:	4981      	ldr	r1, [pc, #516]	@ (8003ce4 <pwm_event_handler+0x304>)
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	3304      	adds	r3, #4
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60bb      	str	r3, [r7, #8]
								if (PinsConf[i].topin == 5 ){
 8003af0:	4a7b      	ldr	r2, [pc, #492]	@ (8003ce0 <pwm_event_handler+0x300>)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003af8:	fb01 f303 	mul.w	r3, r1, r3
 8003afc:	4413      	add	r3, r2
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b05      	cmp	r3, #5
 8003b02:	f040 8162 	bne.w	8003dca <pwm_event_handler+0x3ea>
									  //for (int d = 0; d <= 11; ++d) {
									PinsConf[i].dvalue  = (int) HAL_TIM_ReadCapturedValue(&htim[i], PinsInfo[i].tim_channel);
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	224c      	movs	r2, #76	@ 0x4c
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	4a76      	ldr	r2, [pc, #472]	@ (8003ce8 <pwm_event_handler+0x308>)
 8003b10:	1898      	adds	r0, r3, r2
 8003b12:	4976      	ldr	r1, [pc, #472]	@ (8003cec <pwm_event_handler+0x30c>)
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	4613      	mov	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	440b      	add	r3, r1
 8003b20:	3320      	adds	r3, #32
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4619      	mov	r1, r3
 8003b26:	f019 fd5d 	bl	801d5e4 <HAL_TIM_ReadCapturedValue>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	4a6c      	ldr	r2, [pc, #432]	@ (8003ce0 <pwm_event_handler+0x300>)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003b36:	fb01 f303 	mul.w	r3, r1, r3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	330c      	adds	r3, #12
 8003b3e:	6018      	str	r0, [r3, #0]

									if(PinsConf[handle->button_id].on == 1) {
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	791b      	ldrb	r3, [r3, #4]
 8003b44:	4619      	mov	r1, r3
 8003b46:	4a66      	ldr	r2, [pc, #408]	@ (8003ce0 <pwm_event_handler+0x300>)
 8003b48:	f44f 7318 	mov.w	r3, #608	@ 0x260
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	3308      	adds	r3, #8
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d127      	bne.n	8003baa <pwm_event_handler+0x1ca>
										PinsConf[i].dvalue += 1;
 8003b5a:	4a61      	ldr	r2, [pc, #388]	@ (8003ce0 <pwm_event_handler+0x300>)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003b62:	fb01 f303 	mul.w	r3, r1, r3
 8003b66:	4413      	add	r3, r2
 8003b68:	330c      	adds	r3, #12
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	495c      	ldr	r1, [pc, #368]	@ (8003ce0 <pwm_event_handler+0x300>)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f44f 7018 	mov.w	r0, #608	@ 0x260
 8003b76:	fb00 f303 	mul.w	r3, r0, r3
 8003b7a:	440b      	add	r3, r1
 8003b7c:	330c      	adds	r3, #12
 8003b7e:	601a      	str	r2, [r3, #0]
										if(PinsConf[i].dvalue > 100){
 8003b80:	4a57      	ldr	r2, [pc, #348]	@ (8003ce0 <pwm_event_handler+0x300>)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003b88:	fb01 f303 	mul.w	r3, r1, r3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	330c      	adds	r3, #12
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b64      	cmp	r3, #100	@ 0x64
 8003b94:	dd09      	ble.n	8003baa <pwm_event_handler+0x1ca>
											PinsConf[i].dvalue = 100;
 8003b96:	4a52      	ldr	r2, [pc, #328]	@ (8003ce0 <pwm_event_handler+0x300>)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003b9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	330c      	adds	r3, #12
 8003ba6:	2264      	movs	r2, #100	@ 0x64
 8003ba8:	601a      	str	r2, [r3, #0]
											//pwmflag[handle->button_id] = 0;
										}
									}
									if(PinsConf[handle->button_id].on == 0) {
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	791b      	ldrb	r3, [r3, #4]
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4a4b      	ldr	r2, [pc, #300]	@ (8003ce0 <pwm_event_handler+0x300>)
 8003bb2:	f44f 7318 	mov.w	r3, #608	@ 0x260
 8003bb6:	fb01 f303 	mul.w	r3, r1, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d127      	bne.n	8003c14 <pwm_event_handler+0x234>
										PinsConf[i].dvalue -= 1;
 8003bc4:	4a46      	ldr	r2, [pc, #280]	@ (8003ce0 <pwm_event_handler+0x300>)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	330c      	adds	r3, #12
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	1e5a      	subs	r2, r3, #1
 8003bd8:	4941      	ldr	r1, [pc, #260]	@ (8003ce0 <pwm_event_handler+0x300>)
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f44f 7018 	mov.w	r0, #608	@ 0x260
 8003be0:	fb00 f303 	mul.w	r3, r0, r3
 8003be4:	440b      	add	r3, r1
 8003be6:	330c      	adds	r3, #12
 8003be8:	601a      	str	r2, [r3, #0]
										if(PinsConf[i].dvalue < 0){
 8003bea:	4a3d      	ldr	r2, [pc, #244]	@ (8003ce0 <pwm_event_handler+0x300>)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	330c      	adds	r3, #12
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	da09      	bge.n	8003c14 <pwm_event_handler+0x234>
											PinsConf[i].dvalue = 0;
 8003c00:	4a37      	ldr	r2, [pc, #220]	@ (8003ce0 <pwm_event_handler+0x300>)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003c08:	fb01 f303 	mul.w	r3, r1, r3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	330c      	adds	r3, #12
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
											//pwmflag[handle->button_id] = 1;
										}
									}

									__HAL_TIM_SET_COMPARE(&htim[i], PinsInfo[i].tim_channel, PinsConf[i].dvalue);
 8003c14:	4935      	ldr	r1, [pc, #212]	@ (8003cec <pwm_event_handler+0x30c>)
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	440b      	add	r3, r1
 8003c22:	3320      	adds	r3, #32
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d112      	bne.n	8003c50 <pwm_event_handler+0x270>
 8003c2a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ce0 <pwm_event_handler+0x300>)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003c32:	fb01 f303 	mul.w	r3, r1, r3
 8003c36:	4413      	add	r3, r2
 8003c38:	330c      	adds	r3, #12
 8003c3a:	6818      	ldr	r0, [r3, #0]
 8003c3c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ce8 <pwm_event_handler+0x308>)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	214c      	movs	r1, #76	@ 0x4c
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c4e:	e09d      	b.n	8003d8c <pwm_event_handler+0x3ac>
 8003c50:	4926      	ldr	r1, [pc, #152]	@ (8003cec <pwm_event_handler+0x30c>)
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	440b      	add	r3, r1
 8003c5e:	3320      	adds	r3, #32
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d112      	bne.n	8003c8c <pwm_event_handler+0x2ac>
 8003c66:	4a1e      	ldr	r2, [pc, #120]	@ (8003ce0 <pwm_event_handler+0x300>)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003c6e:	fb01 f303 	mul.w	r3, r1, r3
 8003c72:	4413      	add	r3, r2
 8003c74:	330c      	adds	r3, #12
 8003c76:	6818      	ldr	r0, [r3, #0]
 8003c78:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce8 <pwm_event_handler+0x308>)
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	214c      	movs	r1, #76	@ 0x4c
 8003c7e:	fb01 f303 	mul.w	r3, r1, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	4603      	mov	r3, r0
 8003c88:	6393      	str	r3, [r2, #56]	@ 0x38
 8003c8a:	e07f      	b.n	8003d8c <pwm_event_handler+0x3ac>
 8003c8c:	4917      	ldr	r1, [pc, #92]	@ (8003cec <pwm_event_handler+0x30c>)
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	440b      	add	r3, r1
 8003c9a:	3320      	adds	r3, #32
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d126      	bne.n	8003cf0 <pwm_event_handler+0x310>
 8003ca2:	4a0f      	ldr	r2, [pc, #60]	@ (8003ce0 <pwm_event_handler+0x300>)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003caa:	fb01 f303 	mul.w	r3, r1, r3
 8003cae:	4413      	add	r3, r2
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8003ce8 <pwm_event_handler+0x308>)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	214c      	movs	r1, #76	@ 0x4c
 8003cba:	fb01 f303 	mul.w	r3, r1, r3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003cc6:	e061      	b.n	8003d8c <pwm_event_handler+0x3ac>
 8003cc8:	20000244 	.word	0x20000244
 8003ccc:	0803259c 	.word	0x0803259c
 8003cd0:	0802ece0 	.word	0x0802ece0
 8003cd4:	0802ed50 	.word	0x0802ed50
 8003cd8:	0802ed6c 	.word	0x0802ed6c
 8003cdc:	0802ed84 	.word	0x0802ed84
 8003ce0:	2000066c 	.word	0x2000066c
 8003ce4:	2000d9cc 	.word	0x2000d9cc
 8003ce8:	2000ed90 	.word	0x2000ed90
 8003cec:	08031670 	.word	0x08031670
 8003cf0:	495e      	ldr	r1, [pc, #376]	@ (8003e6c <pwm_event_handler+0x48c>)
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	440b      	add	r3, r1
 8003cfe:	3320      	adds	r3, #32
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b0c      	cmp	r3, #12
 8003d04:	d112      	bne.n	8003d2c <pwm_event_handler+0x34c>
 8003d06:	4a5a      	ldr	r2, [pc, #360]	@ (8003e70 <pwm_event_handler+0x490>)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003d0e:	fb01 f303 	mul.w	r3, r1, r3
 8003d12:	4413      	add	r3, r2
 8003d14:	330c      	adds	r3, #12
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	4a56      	ldr	r2, [pc, #344]	@ (8003e74 <pwm_event_handler+0x494>)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	214c      	movs	r1, #76	@ 0x4c
 8003d1e:	fb01 f303 	mul.w	r3, r1, r3
 8003d22:	4413      	add	r3, r2
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	4603      	mov	r3, r0
 8003d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d2a:	e02f      	b.n	8003d8c <pwm_event_handler+0x3ac>
 8003d2c:	494f      	ldr	r1, [pc, #316]	@ (8003e6c <pwm_event_handler+0x48c>)
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	440b      	add	r3, r1
 8003d3a:	3320      	adds	r3, #32
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b10      	cmp	r3, #16
 8003d40:	d112      	bne.n	8003d68 <pwm_event_handler+0x388>
 8003d42:	4a4b      	ldr	r2, [pc, #300]	@ (8003e70 <pwm_event_handler+0x490>)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003d4a:	fb01 f303 	mul.w	r3, r1, r3
 8003d4e:	4413      	add	r3, r2
 8003d50:	330c      	adds	r3, #12
 8003d52:	6818      	ldr	r0, [r3, #0]
 8003d54:	4a47      	ldr	r2, [pc, #284]	@ (8003e74 <pwm_event_handler+0x494>)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	214c      	movs	r1, #76	@ 0x4c
 8003d5a:	fb01 f303 	mul.w	r3, r1, r3
 8003d5e:	4413      	add	r3, r2
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	4603      	mov	r3, r0
 8003d64:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d66:	e011      	b.n	8003d8c <pwm_event_handler+0x3ac>
 8003d68:	4a41      	ldr	r2, [pc, #260]	@ (8003e70 <pwm_event_handler+0x490>)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003d70:	fb01 f303 	mul.w	r3, r1, r3
 8003d74:	4413      	add	r3, r2
 8003d76:	330c      	adds	r3, #12
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	4a3e      	ldr	r2, [pc, #248]	@ (8003e74 <pwm_event_handler+0x494>)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	214c      	movs	r1, #76	@ 0x4c
 8003d80:	fb01 f303 	mul.w	r3, r1, r3
 8003d84:	4413      	add	r3, r2
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4603      	mov	r3, r0
 8003d8a:	65d3      	str	r3, [r2, #92]	@ 0x5c
									MG_INFO(("PWM pwmValue %d %s \r\n", PinsConf[i].dvalue, PinsInfo[i].pins));
 8003d8c:	4b3a      	ldr	r3, [pc, #232]	@ (8003e78 <pwm_event_handler+0x498>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	dd1a      	ble.n	8003dca <pwm_event_handler+0x3ea>
 8003d94:	4b39      	ldr	r3, [pc, #228]	@ (8003e7c <pwm_event_handler+0x49c>)
 8003d96:	f240 124b 	movw	r2, #331	@ 0x14b
 8003d9a:	4939      	ldr	r1, [pc, #228]	@ (8003e80 <pwm_event_handler+0x4a0>)
 8003d9c:	2002      	movs	r0, #2
 8003d9e:	f008 f929 	bl	800bff4 <mg_log_prefix>
 8003da2:	4a33      	ldr	r2, [pc, #204]	@ (8003e70 <pwm_event_handler+0x490>)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003daa:	fb01 f303 	mul.w	r3, r1, r3
 8003dae:	4413      	add	r3, r2
 8003db0:	330c      	adds	r3, #12
 8003db2:	6819      	ldr	r1, [r3, #0]
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	4613      	mov	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4a2b      	ldr	r2, [pc, #172]	@ (8003e6c <pwm_event_handler+0x48c>)
 8003dc0:	4413      	add	r3, r2
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	482f      	ldr	r0, [pc, #188]	@ (8003e84 <pwm_event_handler+0x4a4>)
 8003dc6:	f008 f965 	bl	800c094 <mg_log>


// 						data_pin.pin = PinsLinks[a].idout;
// 						data_pin.action = 2;
// 						xQueueSend(myQueueHandle, (void* ) &data_pin, 0);
								MG_INFO(("Button %d: SINGLE_CLICK PWM pwmValue %d flag %d!\r\n", handle->button_id, PinsConf[i].dvalue, PinsConf[handle->button_id].on));
 8003dca:	4b2b      	ldr	r3, [pc, #172]	@ (8003e78 <pwm_event_handler+0x498>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	dd21      	ble.n	8003e16 <pwm_event_handler+0x436>
 8003dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8003e7c <pwm_event_handler+0x49c>)
 8003dd4:	f44f 72a9 	mov.w	r2, #338	@ 0x152
 8003dd8:	4929      	ldr	r1, [pc, #164]	@ (8003e80 <pwm_event_handler+0x4a0>)
 8003dda:	2002      	movs	r0, #2
 8003ddc:	f008 f90a 	bl	800bff4 <mg_log_prefix>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	791b      	ldrb	r3, [r3, #4]
 8003de4:	461c      	mov	r4, r3
 8003de6:	4a22      	ldr	r2, [pc, #136]	@ (8003e70 <pwm_event_handler+0x490>)
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	4413      	add	r3, r2
 8003df4:	330c      	adds	r3, #12
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	791b      	ldrb	r3, [r3, #4]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	491c      	ldr	r1, [pc, #112]	@ (8003e70 <pwm_event_handler+0x490>)
 8003e00:	f44f 7318 	mov.w	r3, #608	@ 0x260
 8003e04:	fb00 f303 	mul.w	r3, r0, r3
 8003e08:	440b      	add	r3, r1
 8003e0a:	3308      	adds	r3, #8
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	4621      	mov	r1, r4
 8003e10:	481d      	ldr	r0, [pc, #116]	@ (8003e88 <pwm_event_handler+0x4a8>)
 8003e12:	f008 f93f 	bl	800c094 <mg_log>
				for (uint8_t a = 0; a < NUMPINLINKS; a++) {
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	73fb      	strb	r3, [r7, #15]
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	2b63      	cmp	r3, #99	@ 0x63
 8003e20:	f67f ae4f 	bls.w	8003ac2 <pwm_event_handler+0xe2>
					}
				}
        	  }
              MG_INFO(("Button %d: LONG_PRESS_HOLD!\r\n", handle->button_id));
 8003e24:	4b14      	ldr	r3, [pc, #80]	@ (8003e78 <pwm_event_handler+0x498>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	f340 8243 	ble.w	80042b4 <pwm_event_handler+0x8d4>
 8003e2e:	4b13      	ldr	r3, [pc, #76]	@ (8003e7c <pwm_event_handler+0x49c>)
 8003e30:	f44f 72ab 	mov.w	r2, #342	@ 0x156
 8003e34:	4912      	ldr	r1, [pc, #72]	@ (8003e80 <pwm_event_handler+0x4a0>)
 8003e36:	2002      	movs	r0, #2
 8003e38:	f008 f8dc 	bl	800bff4 <mg_log_prefix>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	791b      	ldrb	r3, [r3, #4]
 8003e40:	4619      	mov	r1, r3
 8003e42:	4812      	ldr	r0, [pc, #72]	@ (8003e8c <pwm_event_handler+0x4ac>)
 8003e44:	f008 f926 	bl	800c094 <mg_log>
              break;
 8003e48:	e234      	b.n	80042b4 <pwm_event_handler+0x8d4>
          case SINGLE_CLICK:
              // Одиночное нажатие кнопки
        	  if(PinsConf[handle->button_id].sclick == 2){
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	791b      	ldrb	r3, [r3, #4]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4a07      	ldr	r2, [pc, #28]	@ (8003e70 <pwm_event_handler+0x490>)
 8003e52:	f44f 7318 	mov.w	r3, #608	@ 0x260
 8003e56:	fb01 f303 	mul.w	r3, r1, r3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	3312      	adds	r3, #18
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	f040 8229 	bne.w	80042b8 <pwm_event_handler+0x8d8>
 				for (uint8_t a = 0; a < NUMPINLINKS; a++) {
 8003e66:	2300      	movs	r3, #0
 8003e68:	73bb      	strb	r3, [r7, #14]
 8003e6a:	e1cb      	b.n	8004204 <pwm_event_handler+0x824>
 8003e6c:	08031670 	.word	0x08031670
 8003e70:	2000066c 	.word	0x2000066c
 8003e74:	2000ed90 	.word	0x2000ed90
 8003e78:	20000244 	.word	0x20000244
 8003e7c:	0803259c 	.word	0x0803259c
 8003e80:	0802ece0 	.word	0x0802ece0
 8003e84:	0802ee18 	.word	0x0802ee18
 8003e88:	0802ee30 	.word	0x0802ee30
 8003e8c:	0802eda4 	.word	0x0802eda4
 					if (PinsLinks[a].idin == handle->button_id) {
 8003e90:	7bba      	ldrb	r2, [r7, #14]
 8003e92:	49ab      	ldr	r1, [pc, #684]	@ (8004140 <pwm_event_handler+0x760>)
 8003e94:	4613      	mov	r3, r2
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	7912      	ldrb	r2, [r2, #4]
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	f040 81aa 	bne.w	80041fe <pwm_event_handler+0x81e>
 						//PinsInfo[i].tim->CCR1 = 50;

 							//for (uint8_t i = 0; i < NUMPIN; i++) {

 								// PWM
 								i = PinsLinks[a].idout;
 8003eaa:	7bba      	ldrb	r2, [r7, #14]
 8003eac:	49a4      	ldr	r1, [pc, #656]	@ (8004140 <pwm_event_handler+0x760>)
 8003eae:	4613      	mov	r3, r2
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	4413      	add	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	3304      	adds	r3, #4
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60bb      	str	r3, [r7, #8]
 								if (PinsConf[i].topin == 5){
 8003ebe:	4aa1      	ldr	r2, [pc, #644]	@ (8004144 <pwm_event_handler+0x764>)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003ec6:	fb01 f303 	mul.w	r3, r1, r3
 8003eca:	4413      	add	r3, r2
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b05      	cmp	r3, #5
 8003ed0:	f040 816f 	bne.w	80041b2 <pwm_event_handler+0x7d2>
 									  //for (int d = 0; d <= 11; ++d) {
 									PinsConf[i].dvalue  = (int) HAL_TIM_ReadCapturedValue(&htim[i], PinsInfo[i].tim_channel);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	224c      	movs	r2, #76	@ 0x4c
 8003ed8:	fb02 f303 	mul.w	r3, r2, r3
 8003edc:	4a9a      	ldr	r2, [pc, #616]	@ (8004148 <pwm_event_handler+0x768>)
 8003ede:	1898      	adds	r0, r3, r2
 8003ee0:	499a      	ldr	r1, [pc, #616]	@ (800414c <pwm_event_handler+0x76c>)
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	440b      	add	r3, r1
 8003eee:	3320      	adds	r3, #32
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	f019 fb76 	bl	801d5e4 <HAL_TIM_ReadCapturedValue>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	4618      	mov	r0, r3
 8003efc:	4a91      	ldr	r2, [pc, #580]	@ (8004144 <pwm_event_handler+0x764>)
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003f04:	fb01 f303 	mul.w	r3, r1, r3
 8003f08:	4413      	add	r3, r2
 8003f0a:	330c      	adds	r3, #12
 8003f0c:	6018      	str	r0, [r3, #0]
 									//MG_INFO(("PWM pwmValue %d \r\n", PinsConf[i].dvalue));
 									if(PinsConf[handle->button_id].on == 1) {
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	791b      	ldrb	r3, [r3, #4]
 8003f12:	4619      	mov	r1, r3
 8003f14:	4a8b      	ldr	r2, [pc, #556]	@ (8004144 <pwm_event_handler+0x764>)
 8003f16:	f44f 7318 	mov.w	r3, #608	@ 0x260
 8003f1a:	fb01 f303 	mul.w	r3, r1, r3
 8003f1e:	4413      	add	r3, r2
 8003f20:	3308      	adds	r3, #8
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d133      	bne.n	8003f90 <pwm_event_handler+0x5b0>
 										PinsConf[i].dvalue += 1;
 8003f28:	4a86      	ldr	r2, [pc, #536]	@ (8004144 <pwm_event_handler+0x764>)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	4413      	add	r3, r2
 8003f36:	330c      	adds	r3, #12
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	4981      	ldr	r1, [pc, #516]	@ (8004144 <pwm_event_handler+0x764>)
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f44f 7018 	mov.w	r0, #608	@ 0x260
 8003f44:	fb00 f303 	mul.w	r3, r0, r3
 8003f48:	440b      	add	r3, r1
 8003f4a:	330c      	adds	r3, #12
 8003f4c:	601a      	str	r2, [r3, #0]
										if(PinsConf[i].dvalue > 100){
 8003f4e:	4a7d      	ldr	r2, [pc, #500]	@ (8004144 <pwm_event_handler+0x764>)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003f56:	fb01 f303 	mul.w	r3, r1, r3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	330c      	adds	r3, #12
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b64      	cmp	r3, #100	@ 0x64
 8003f62:	dd15      	ble.n	8003f90 <pwm_event_handler+0x5b0>
											PinsConf[i].dvalue = 100;
 8003f64:	4a77      	ldr	r2, [pc, #476]	@ (8004144 <pwm_event_handler+0x764>)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003f6c:	fb01 f303 	mul.w	r3, r1, r3
 8003f70:	4413      	add	r3, r2
 8003f72:	330c      	adds	r3, #12
 8003f74:	2264      	movs	r2, #100	@ 0x64
 8003f76:	601a      	str	r2, [r3, #0]
											PinsConf[handle->button_id].on = 0;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	791b      	ldrb	r3, [r3, #4]
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4a71      	ldr	r2, [pc, #452]	@ (8004144 <pwm_event_handler+0x764>)
 8003f80:	f44f 7318 	mov.w	r3, #608	@ 0x260
 8003f84:	fb01 f303 	mul.w	r3, r1, r3
 8003f88:	4413      	add	r3, r2
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	701a      	strb	r2, [r3, #0]
										}
 									}
 									if(PinsConf[handle->button_id].on == 0) {
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	791b      	ldrb	r3, [r3, #4]
 8003f94:	4619      	mov	r1, r3
 8003f96:	4a6b      	ldr	r2, [pc, #428]	@ (8004144 <pwm_event_handler+0x764>)
 8003f98:	f44f 7318 	mov.w	r3, #608	@ 0x260
 8003f9c:	fb01 f303 	mul.w	r3, r1, r3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d133      	bne.n	8004012 <pwm_event_handler+0x632>
 										PinsConf[i].dvalue -= 1;
 8003faa:	4a66      	ldr	r2, [pc, #408]	@ (8004144 <pwm_event_handler+0x764>)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003fb2:	fb01 f303 	mul.w	r3, r1, r3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	330c      	adds	r3, #12
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	1e5a      	subs	r2, r3, #1
 8003fbe:	4961      	ldr	r1, [pc, #388]	@ (8004144 <pwm_event_handler+0x764>)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f44f 7018 	mov.w	r0, #608	@ 0x260
 8003fc6:	fb00 f303 	mul.w	r3, r0, r3
 8003fca:	440b      	add	r3, r1
 8003fcc:	330c      	adds	r3, #12
 8003fce:	601a      	str	r2, [r3, #0]
										if(PinsConf[i].dvalue < 0){
 8003fd0:	4a5c      	ldr	r2, [pc, #368]	@ (8004144 <pwm_event_handler+0x764>)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	4413      	add	r3, r2
 8003fde:	330c      	adds	r3, #12
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	da15      	bge.n	8004012 <pwm_event_handler+0x632>
											PinsConf[i].dvalue = 0;
 8003fe6:	4a57      	ldr	r2, [pc, #348]	@ (8004144 <pwm_event_handler+0x764>)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003fee:	fb01 f303 	mul.w	r3, r1, r3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	330c      	adds	r3, #12
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
											PinsConf[handle->button_id].on = 1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	791b      	ldrb	r3, [r3, #4]
 8003ffe:	4619      	mov	r1, r3
 8004000:	4a50      	ldr	r2, [pc, #320]	@ (8004144 <pwm_event_handler+0x764>)
 8004002:	f44f 7318 	mov.w	r3, #608	@ 0x260
 8004006:	fb01 f303 	mul.w	r3, r1, r3
 800400a:	4413      	add	r3, r2
 800400c:	3308      	adds	r3, #8
 800400e:	2201      	movs	r2, #1
 8004010:	701a      	strb	r2, [r3, #0]
										}
 									}

									__HAL_TIM_SET_COMPARE(&htim[i], PinsInfo[i].tim_channel, PinsConf[i].dvalue);
 8004012:	494e      	ldr	r1, [pc, #312]	@ (800414c <pwm_event_handler+0x76c>)
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	4613      	mov	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	440b      	add	r3, r1
 8004020:	3320      	adds	r3, #32
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d112      	bne.n	800404e <pwm_event_handler+0x66e>
 8004028:	4a46      	ldr	r2, [pc, #280]	@ (8004144 <pwm_event_handler+0x764>)
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8004030:	fb01 f303 	mul.w	r3, r1, r3
 8004034:	4413      	add	r3, r2
 8004036:	330c      	adds	r3, #12
 8004038:	6818      	ldr	r0, [r3, #0]
 800403a:	4a43      	ldr	r2, [pc, #268]	@ (8004148 <pwm_event_handler+0x768>)
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	214c      	movs	r1, #76	@ 0x4c
 8004040:	fb01 f303 	mul.w	r3, r1, r3
 8004044:	4413      	add	r3, r2
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4602      	mov	r2, r0
 800404a:	635a      	str	r2, [r3, #52]	@ 0x34
 800404c:	e092      	b.n	8004174 <pwm_event_handler+0x794>
 800404e:	493f      	ldr	r1, [pc, #252]	@ (800414c <pwm_event_handler+0x76c>)
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	4613      	mov	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	440b      	add	r3, r1
 800405c:	3320      	adds	r3, #32
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b04      	cmp	r3, #4
 8004062:	d112      	bne.n	800408a <pwm_event_handler+0x6aa>
 8004064:	4a37      	ldr	r2, [pc, #220]	@ (8004144 <pwm_event_handler+0x764>)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f44f 7118 	mov.w	r1, #608	@ 0x260
 800406c:	fb01 f303 	mul.w	r3, r1, r3
 8004070:	4413      	add	r3, r2
 8004072:	330c      	adds	r3, #12
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	4a34      	ldr	r2, [pc, #208]	@ (8004148 <pwm_event_handler+0x768>)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	214c      	movs	r1, #76	@ 0x4c
 800407c:	fb01 f303 	mul.w	r3, r1, r3
 8004080:	4413      	add	r3, r2
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4603      	mov	r3, r0
 8004086:	6393      	str	r3, [r2, #56]	@ 0x38
 8004088:	e074      	b.n	8004174 <pwm_event_handler+0x794>
 800408a:	4930      	ldr	r1, [pc, #192]	@ (800414c <pwm_event_handler+0x76c>)
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	440b      	add	r3, r1
 8004098:	3320      	adds	r3, #32
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b08      	cmp	r3, #8
 800409e:	d112      	bne.n	80040c6 <pwm_event_handler+0x6e6>
 80040a0:	4a28      	ldr	r2, [pc, #160]	@ (8004144 <pwm_event_handler+0x764>)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80040a8:	fb01 f303 	mul.w	r3, r1, r3
 80040ac:	4413      	add	r3, r2
 80040ae:	330c      	adds	r3, #12
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	4a25      	ldr	r2, [pc, #148]	@ (8004148 <pwm_event_handler+0x768>)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	214c      	movs	r1, #76	@ 0x4c
 80040b8:	fb01 f303 	mul.w	r3, r1, r3
 80040bc:	4413      	add	r3, r2
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	4603      	mov	r3, r0
 80040c2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80040c4:	e056      	b.n	8004174 <pwm_event_handler+0x794>
 80040c6:	4921      	ldr	r1, [pc, #132]	@ (800414c <pwm_event_handler+0x76c>)
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	440b      	add	r3, r1
 80040d4:	3320      	adds	r3, #32
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b0c      	cmp	r3, #12
 80040da:	d112      	bne.n	8004102 <pwm_event_handler+0x722>
 80040dc:	4a19      	ldr	r2, [pc, #100]	@ (8004144 <pwm_event_handler+0x764>)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80040e4:	fb01 f303 	mul.w	r3, r1, r3
 80040e8:	4413      	add	r3, r2
 80040ea:	330c      	adds	r3, #12
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	4a16      	ldr	r2, [pc, #88]	@ (8004148 <pwm_event_handler+0x768>)
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	214c      	movs	r1, #76	@ 0x4c
 80040f4:	fb01 f303 	mul.w	r3, r1, r3
 80040f8:	4413      	add	r3, r2
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	4603      	mov	r3, r0
 80040fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8004100:	e038      	b.n	8004174 <pwm_event_handler+0x794>
 8004102:	4912      	ldr	r1, [pc, #72]	@ (800414c <pwm_event_handler+0x76c>)
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	440b      	add	r3, r1
 8004110:	3320      	adds	r3, #32
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b10      	cmp	r3, #16
 8004116:	d11b      	bne.n	8004150 <pwm_event_handler+0x770>
 8004118:	4a0a      	ldr	r2, [pc, #40]	@ (8004144 <pwm_event_handler+0x764>)
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	4413      	add	r3, r2
 8004126:	330c      	adds	r3, #12
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	4a07      	ldr	r2, [pc, #28]	@ (8004148 <pwm_event_handler+0x768>)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	214c      	movs	r1, #76	@ 0x4c
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	4413      	add	r3, r2
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	4603      	mov	r3, r0
 800413a:	6593      	str	r3, [r2, #88]	@ 0x58
 800413c:	e01a      	b.n	8004174 <pwm_event_handler+0x794>
 800413e:	bf00      	nop
 8004140:	2000d9cc 	.word	0x2000d9cc
 8004144:	2000066c 	.word	0x2000066c
 8004148:	2000ed90 	.word	0x2000ed90
 800414c:	08031670 	.word	0x08031670
 8004150:	4a5e      	ldr	r2, [pc, #376]	@ (80042cc <pwm_event_handler+0x8ec>)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	4413      	add	r3, r2
 800415e:	330c      	adds	r3, #12
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	4a5b      	ldr	r2, [pc, #364]	@ (80042d0 <pwm_event_handler+0x8f0>)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	214c      	movs	r1, #76	@ 0x4c
 8004168:	fb01 f303 	mul.w	r3, r1, r3
 800416c:	4413      	add	r3, r2
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4603      	mov	r3, r0
 8004172:	65d3      	str	r3, [r2, #92]	@ 0x5c
									MG_INFO(("PWM pwmValue %d %s \r\n", PinsConf[i].dvalue, PinsInfo[i].pins));
 8004174:	4b57      	ldr	r3, [pc, #348]	@ (80042d4 <pwm_event_handler+0x8f4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b01      	cmp	r3, #1
 800417a:	dd1a      	ble.n	80041b2 <pwm_event_handler+0x7d2>
 800417c:	4b56      	ldr	r3, [pc, #344]	@ (80042d8 <pwm_event_handler+0x8f8>)
 800417e:	f44f 72bc 	mov.w	r2, #376	@ 0x178
 8004182:	4956      	ldr	r1, [pc, #344]	@ (80042dc <pwm_event_handler+0x8fc>)
 8004184:	2002      	movs	r0, #2
 8004186:	f007 ff35 	bl	800bff4 <mg_log_prefix>
 800418a:	4a50      	ldr	r2, [pc, #320]	@ (80042cc <pwm_event_handler+0x8ec>)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8004192:	fb01 f303 	mul.w	r3, r1, r3
 8004196:	4413      	add	r3, r2
 8004198:	330c      	adds	r3, #12
 800419a:	6819      	ldr	r1, [r3, #0]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4a4e      	ldr	r2, [pc, #312]	@ (80042e0 <pwm_event_handler+0x900>)
 80041a8:	4413      	add	r3, r2
 80041aa:	461a      	mov	r2, r3
 80041ac:	484d      	ldr	r0, [pc, #308]	@ (80042e4 <pwm_event_handler+0x904>)
 80041ae:	f007 ff71 	bl	800c094 <mg_log>
 							}

// 						data_pin.pin = PinsLinks[a].idout;
// 						data_pin.action = 2;
// 						xQueueSend(myQueueHandle, (void* ) &data_pin, 0);
 						MG_INFO(("Button %d: SINGLE_CLICK PWM pwmValue %d flag %d!\r\n", handle->button_id, PinsConf[i].dvalue, PinsConf[handle->button_id].on));
 80041b2:	4b48      	ldr	r3, [pc, #288]	@ (80042d4 <pwm_event_handler+0x8f4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	dd21      	ble.n	80041fe <pwm_event_handler+0x81e>
 80041ba:	4b47      	ldr	r3, [pc, #284]	@ (80042d8 <pwm_event_handler+0x8f8>)
 80041bc:	f240 127f 	movw	r2, #383	@ 0x17f
 80041c0:	4946      	ldr	r1, [pc, #280]	@ (80042dc <pwm_event_handler+0x8fc>)
 80041c2:	2002      	movs	r0, #2
 80041c4:	f007 ff16 	bl	800bff4 <mg_log_prefix>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	791b      	ldrb	r3, [r3, #4]
 80041cc:	461c      	mov	r4, r3
 80041ce:	4a3f      	ldr	r2, [pc, #252]	@ (80042cc <pwm_event_handler+0x8ec>)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80041d6:	fb01 f303 	mul.w	r3, r1, r3
 80041da:	4413      	add	r3, r2
 80041dc:	330c      	adds	r3, #12
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	791b      	ldrb	r3, [r3, #4]
 80041e4:	4618      	mov	r0, r3
 80041e6:	4939      	ldr	r1, [pc, #228]	@ (80042cc <pwm_event_handler+0x8ec>)
 80041e8:	f44f 7318 	mov.w	r3, #608	@ 0x260
 80041ec:	fb00 f303 	mul.w	r3, r0, r3
 80041f0:	440b      	add	r3, r1
 80041f2:	3308      	adds	r3, #8
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	4621      	mov	r1, r4
 80041f8:	483b      	ldr	r0, [pc, #236]	@ (80042e8 <pwm_event_handler+0x908>)
 80041fa:	f007 ff4b 	bl	800c094 <mg_log>
 				for (uint8_t a = 0; a < NUMPINLINKS; a++) {
 80041fe:	7bbb      	ldrb	r3, [r7, #14]
 8004200:	3301      	adds	r3, #1
 8004202:	73bb      	strb	r3, [r7, #14]
 8004204:	7bbb      	ldrb	r3, [r7, #14]
 8004206:	2b63      	cmp	r3, #99	@ 0x63
 8004208:	f67f ae42 	bls.w	8003e90 <pwm_event_handler+0x4b0>
 					}
 				}
        	  }
              //MG_INFO(("Button %d: SINGLE_CLICK PWM!\r\n", handle->button_id));
              break;
 800420c:	e054      	b.n	80042b8 <pwm_event_handler+0x8d8>
          case DOUBLE_CLICK:
              // Двойное нажатие кнопки

        	  PinsConf[handle->button_id].on ^= 1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	791b      	ldrb	r3, [r3, #4]
 8004212:	4619      	mov	r1, r3
 8004214:	4a2d      	ldr	r2, [pc, #180]	@ (80042cc <pwm_event_handler+0x8ec>)
 8004216:	f44f 7318 	mov.w	r3, #608	@ 0x260
 800421a:	fb01 f303 	mul.w	r3, r1, r3
 800421e:	4413      	add	r3, r2
 8004220:	3308      	adds	r3, #8
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	7912      	ldrb	r2, [r2, #4]
 8004228:	4610      	mov	r0, r2
 800422a:	f083 0301 	eor.w	r3, r3, #1
 800422e:	b2d9      	uxtb	r1, r3
 8004230:	4a26      	ldr	r2, [pc, #152]	@ (80042cc <pwm_event_handler+0x8ec>)
 8004232:	f44f 7318 	mov.w	r3, #608	@ 0x260
 8004236:	fb00 f303 	mul.w	r3, r0, r3
 800423a:	4413      	add	r3, r2
 800423c:	3308      	adds	r3, #8
 800423e:	460a      	mov	r2, r1
 8004240:	701a      	strb	r2, [r3, #0]

              MG_INFO(("Button %d: DOUBLE_CLICK PWM %d!\r\n", handle->button_id, PinsConf[handle->button_id].on));
 8004242:	4b24      	ldr	r3, [pc, #144]	@ (80042d4 <pwm_event_handler+0x8f4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b01      	cmp	r3, #1
 8004248:	dd38      	ble.n	80042bc <pwm_event_handler+0x8dc>
 800424a:	4b23      	ldr	r3, [pc, #140]	@ (80042d8 <pwm_event_handler+0x8f8>)
 800424c:	f44f 72c5 	mov.w	r2, #394	@ 0x18a
 8004250:	4922      	ldr	r1, [pc, #136]	@ (80042dc <pwm_event_handler+0x8fc>)
 8004252:	2002      	movs	r0, #2
 8004254:	f007 fece 	bl	800bff4 <mg_log_prefix>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	791b      	ldrb	r3, [r3, #4]
 800425c:	4618      	mov	r0, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	791b      	ldrb	r3, [r3, #4]
 8004262:	4619      	mov	r1, r3
 8004264:	4a19      	ldr	r2, [pc, #100]	@ (80042cc <pwm_event_handler+0x8ec>)
 8004266:	f44f 7318 	mov.w	r3, #608	@ 0x260
 800426a:	fb01 f303 	mul.w	r3, r1, r3
 800426e:	4413      	add	r3, r2
 8004270:	3308      	adds	r3, #8
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	4601      	mov	r1, r0
 8004278:	481c      	ldr	r0, [pc, #112]	@ (80042ec <pwm_event_handler+0x90c>)
 800427a:	f007 ff0b 	bl	800c094 <mg_log>
              break;
 800427e:	e01d      	b.n	80042bc <pwm_event_handler+0x8dc>
          case PRESS_REPEAT:
              // Повторное нажатие кнопки
              MG_INFO(("Button %d: PRESS_REPEAT PWM!\r\n", handle->button_id));
 8004280:	4b14      	ldr	r3, [pc, #80]	@ (80042d4 <pwm_event_handler+0x8f4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b01      	cmp	r3, #1
 8004286:	dd1b      	ble.n	80042c0 <pwm_event_handler+0x8e0>
 8004288:	4b13      	ldr	r3, [pc, #76]	@ (80042d8 <pwm_event_handler+0x8f8>)
 800428a:	f44f 72c7 	mov.w	r2, #398	@ 0x18e
 800428e:	4913      	ldr	r1, [pc, #76]	@ (80042dc <pwm_event_handler+0x8fc>)
 8004290:	2002      	movs	r0, #2
 8004292:	f007 feaf 	bl	800bff4 <mg_log_prefix>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	791b      	ldrb	r3, [r3, #4]
 800429a:	4619      	mov	r1, r3
 800429c:	4814      	ldr	r0, [pc, #80]	@ (80042f0 <pwm_event_handler+0x910>)
 800429e:	f007 fef9 	bl	800c094 <mg_log>
              break;
 80042a2:	e00d      	b.n	80042c0 <pwm_event_handler+0x8e0>
          default:
              // Обработка неизвестного значения event
              break;
 80042a4:	bf00      	nop
 80042a6:	e00c      	b.n	80042c2 <pwm_event_handler+0x8e2>
              break;
 80042a8:	bf00      	nop
 80042aa:	e00a      	b.n	80042c2 <pwm_event_handler+0x8e2>
              break;
 80042ac:	bf00      	nop
 80042ae:	e008      	b.n	80042c2 <pwm_event_handler+0x8e2>
              break;
 80042b0:	bf00      	nop
 80042b2:	e006      	b.n	80042c2 <pwm_event_handler+0x8e2>
              break;
 80042b4:	bf00      	nop
 80042b6:	e004      	b.n	80042c2 <pwm_event_handler+0x8e2>
              break;
 80042b8:	bf00      	nop
 80042ba:	e002      	b.n	80042c2 <pwm_event_handler+0x8e2>
              break;
 80042bc:	bf00      	nop
 80042be:	e000      	b.n	80042c2 <pwm_event_handler+0x8e2>
              break;
 80042c0:	bf00      	nop
      }
  }
 80042c2:	bf00      	nop
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd90      	pop	{r4, r7, pc}
 80042ca:	bf00      	nop
 80042cc:	2000066c 	.word	0x2000066c
 80042d0:	2000ed90 	.word	0x2000ed90
 80042d4:	20000244 	.word	0x20000244
 80042d8:	0803259c 	.word	0x0803259c
 80042dc:	0802ece0 	.word	0x0802ece0
 80042e0:	08031670 	.word	0x08031670
 80042e4:	0802ee18 	.word	0x0802ee18
 80042e8:	0802ee30 	.word	0x0802ee30
 80042ec:	0802ee64 	.word	0x0802ee64
 80042f0:	0802ee88 	.word	0x0802ee88

080042f4 <read_button_level>:

 // Функция для получения состояния GPIO кнопки
  uint8_t read_button_level(uint8_t button_id)
  {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	71fb      	strb	r3, [r7, #7]
      // Вернуть состояние GPIO пина, к которому подключена кнопка
 	 return  HAL_GPIO_ReadPin(PinsInfo[button_id].gpio_name, PinsInfo[button_id].hal_pin);
 80042fe:	79fa      	ldrb	r2, [r7, #7]
 8004300:	490c      	ldr	r1, [pc, #48]	@ (8004334 <read_button_level+0x40>)
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	440b      	add	r3, r1
 800430c:	3310      	adds	r3, #16
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	79fa      	ldrb	r2, [r7, #7]
 8004312:	4908      	ldr	r1, [pc, #32]	@ (8004334 <read_button_level+0x40>)
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	440b      	add	r3, r1
 800431e:	330c      	adds	r3, #12
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	4619      	mov	r1, r3
 8004324:	f015 f868 	bl	80193f8 <HAL_GPIO_ReadPin>
 8004328:	4603      	mov	r3, r0

      //return GPIO_PIN_RESET; // Значение по умолчанию, если кнопка не найдена
  }
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	08031670 	.word	0x08031670

08004338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800433c:	f014 f923 	bl	8018586 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004340:	f000 f88c 	bl	800445c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004344:	f000 f9e0 	bl	8004708 <MX_GPIO_Init>
  MX_ETH_Init();
 8004348:	f000 f8f8 	bl	800453c <MX_ETH_Init>
  MX_USART3_UART_Init();
 800434c:	f000 f9ac 	bl	80046a8 <MX_USART3_UART_Init>
  MX_RNG_Init();
 8004350:	f000 f942 	bl	80045d8 <MX_RNG_Init>
  MX_TIM1_Init();
 8004354:	f000 f954 	bl	8004600 <MX_TIM1_Init>
  MX_FATFS_Init();
 8004358:	f01b fcca 	bl	801fcf0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  test_init();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800435c:	f021 ff3a 	bl	80261d4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue */
  myQueueHandle = osMessageQueueNew (16, sizeof(struct data_pin_t), &myQueue_attributes);
 8004360:	4a25      	ldr	r2, [pc, #148]	@ (80043f8 <main+0xc0>)
 8004362:	2108      	movs	r1, #8
 8004364:	2010      	movs	r0, #16
 8004366:	f022 fa03 	bl	8026770 <osMessageQueueNew>
 800436a:	4603      	mov	r3, r0
 800436c:	4a23      	ldr	r2, [pc, #140]	@ (80043fc <main+0xc4>)
 800436e:	6013      	str	r3, [r2, #0]

  /* creation of usbQueue */
  usbQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &usbQueue_attributes);
 8004370:	4a23      	ldr	r2, [pc, #140]	@ (8004400 <main+0xc8>)
 8004372:	2102      	movs	r1, #2
 8004374:	2010      	movs	r0, #16
 8004376:	f022 f9fb 	bl	8026770 <osMessageQueueNew>
 800437a:	4603      	mov	r3, r0
 800437c:	4a21      	ldr	r2, [pc, #132]	@ (8004404 <main+0xcc>)
 800437e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ConfigTask */
  ConfigTaskHandle = osThreadNew(StartConfigTask, NULL, &ConfigTask_attributes);
 8004380:	4a21      	ldr	r2, [pc, #132]	@ (8004408 <main+0xd0>)
 8004382:	2100      	movs	r1, #0
 8004384:	4821      	ldr	r0, [pc, #132]	@ (800440c <main+0xd4>)
 8004386:	f021 ff8f 	bl	80262a8 <osThreadNew>
 800438a:	4603      	mov	r3, r0
 800438c:	4a20      	ldr	r2, [pc, #128]	@ (8004410 <main+0xd8>)
 800438e:	6013      	str	r3, [r2, #0]

  /* creation of WebServerTask */
  WebServerTaskHandle = osThreadNew(StartWebServerTask, NULL, &WebServerTask_attributes);
 8004390:	4a20      	ldr	r2, [pc, #128]	@ (8004414 <main+0xdc>)
 8004392:	2100      	movs	r1, #0
 8004394:	4820      	ldr	r0, [pc, #128]	@ (8004418 <main+0xe0>)
 8004396:	f021 ff87 	bl	80262a8 <osThreadNew>
 800439a:	4603      	mov	r3, r0
 800439c:	4a1f      	ldr	r2, [pc, #124]	@ (800441c <main+0xe4>)
 800439e:	6013      	str	r3, [r2, #0]

  /* creation of OutputTask */
  OutputTaskHandle = osThreadNew(StartOutputTask, NULL, &OutputTask_attributes);
 80043a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004420 <main+0xe8>)
 80043a2:	2100      	movs	r1, #0
 80043a4:	481f      	ldr	r0, [pc, #124]	@ (8004424 <main+0xec>)
 80043a6:	f021 ff7f 	bl	80262a8 <osThreadNew>
 80043aa:	4603      	mov	r3, r0
 80043ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004428 <main+0xf0>)
 80043ae:	6013      	str	r3, [r2, #0]

  /* creation of CronTask */
  CronTaskHandle = osThreadNew(StartCronTask, NULL, &CronTask_attributes);
 80043b0:	4a1e      	ldr	r2, [pc, #120]	@ (800442c <main+0xf4>)
 80043b2:	2100      	movs	r1, #0
 80043b4:	481e      	ldr	r0, [pc, #120]	@ (8004430 <main+0xf8>)
 80043b6:	f021 ff77 	bl	80262a8 <osThreadNew>
 80043ba:	4603      	mov	r3, r0
 80043bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004434 <main+0xfc>)
 80043be:	6013      	str	r3, [r2, #0]

  /* creation of InputTask */
  InputTaskHandle = osThreadNew(StartInputTask, NULL, &InputTask_attributes);
 80043c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004438 <main+0x100>)
 80043c2:	2100      	movs	r1, #0
 80043c4:	481d      	ldr	r0, [pc, #116]	@ (800443c <main+0x104>)
 80043c6:	f021 ff6f 	bl	80262a8 <osThreadNew>
 80043ca:	4603      	mov	r3, r0
 80043cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004440 <main+0x108>)
 80043ce:	6013      	str	r3, [r2, #0]

  /* creation of OnewireTask */
  OnewireTaskHandle = osThreadNew(StartOnewireTask, NULL, &OnewireTask_attributes);
 80043d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004444 <main+0x10c>)
 80043d2:	2100      	movs	r1, #0
 80043d4:	481c      	ldr	r0, [pc, #112]	@ (8004448 <main+0x110>)
 80043d6:	f021 ff67 	bl	80262a8 <osThreadNew>
 80043da:	4603      	mov	r3, r0
 80043dc:	4a1b      	ldr	r2, [pc, #108]	@ (800444c <main+0x114>)
 80043de:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &EncoderTask_attributes);
 80043e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004450 <main+0x118>)
 80043e2:	2100      	movs	r1, #0
 80043e4:	481b      	ldr	r0, [pc, #108]	@ (8004454 <main+0x11c>)
 80043e6:	f021 ff5f 	bl	80262a8 <osThreadNew>
 80043ea:	4603      	mov	r3, r0
 80043ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004458 <main+0x120>)
 80043ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80043f0:	f021 ff24 	bl	802623c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80043f4:	bf00      	nop
 80043f6:	e7fd      	b.n	80043f4 <main+0xbc>
 80043f8:	08032554 	.word	0x08032554
 80043fc:	20011938 	.word	0x20011938
 8004400:	0803256c 	.word	0x0803256c
 8004404:	2001193c 	.word	0x2001193c
 8004408:	08032458 	.word	0x08032458
 800440c:	08004989 	.word	0x08004989
 8004410:	2001191c 	.word	0x2001191c
 8004414:	0803247c 	.word	0x0803247c
 8004418:	08004b79 	.word	0x08004b79
 800441c:	20011920 	.word	0x20011920
 8004420:	080324a0 	.word	0x080324a0
 8004424:	08004d11 	.word	0x08004d11
 8004428:	20011924 	.word	0x20011924
 800442c:	080324c4 	.word	0x080324c4
 8004430:	08004df5 	.word	0x08004df5
 8004434:	20011928 	.word	0x20011928
 8004438:	080324e8 	.word	0x080324e8
 800443c:	08005035 	.word	0x08005035
 8004440:	2001192c 	.word	0x2001192c
 8004444:	0803250c 	.word	0x0803250c
 8004448:	08005361 	.word	0x08005361
 800444c:	20011930 	.word	0x20011930
 8004450:	08032530 	.word	0x08032530
 8004454:	0800555d 	.word	0x0800555d
 8004458:	20011934 	.word	0x20011934

0800445c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b094      	sub	sp, #80	@ 0x50
 8004460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004462:	f107 031c 	add.w	r3, r7, #28
 8004466:	2234      	movs	r2, #52	@ 0x34
 8004468:	2100      	movs	r1, #0
 800446a:	4618      	mov	r0, r3
 800446c:	f027 fb4e 	bl	802bb0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004470:	f107 0308 	add.w	r3, r7, #8
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	605a      	str	r2, [r3, #4]
 800447a:	609a      	str	r2, [r3, #8]
 800447c:	60da      	str	r2, [r3, #12]
 800447e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004480:	f017 f920 	bl	801b6c4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004484:	4b2b      	ldr	r3, [pc, #172]	@ (8004534 <SystemClock_Config+0xd8>)
 8004486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004488:	4a2a      	ldr	r2, [pc, #168]	@ (8004534 <SystemClock_Config+0xd8>)
 800448a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800448e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004490:	4b28      	ldr	r3, [pc, #160]	@ (8004534 <SystemClock_Config+0xd8>)
 8004492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004498:	607b      	str	r3, [r7, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800449c:	4b26      	ldr	r3, [pc, #152]	@ (8004538 <SystemClock_Config+0xdc>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a25      	ldr	r2, [pc, #148]	@ (8004538 <SystemClock_Config+0xdc>)
 80044a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	4b23      	ldr	r3, [pc, #140]	@ (8004538 <SystemClock_Config+0xdc>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80044b0:	603b      	str	r3, [r7, #0]
 80044b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80044b4:	2301      	movs	r3, #1
 80044b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80044b8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80044bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044be:	2302      	movs	r3, #2
 80044c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80044c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80044c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80044c8:	2304      	movs	r3, #4
 80044ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80044cc:	23d8      	movs	r3, #216	@ 0xd8
 80044ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044d0:	2302      	movs	r3, #2
 80044d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80044d4:	2309      	movs	r3, #9
 80044d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80044d8:	2302      	movs	r3, #2
 80044da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044dc:	f107 031c 	add.w	r3, r7, #28
 80044e0:	4618      	mov	r0, r3
 80044e2:	f017 f94f 	bl	801b784 <HAL_RCC_OscConfig>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80044ec:	f001 fcc0 	bl	8005e70 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80044f0:	f017 f8f8 	bl	801b6e4 <HAL_PWREx_EnableOverDrive>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80044fa:	f001 fcb9 	bl	8005e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044fe:	230f      	movs	r3, #15
 8004500:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004502:	2302      	movs	r3, #2
 8004504:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004506:	2300      	movs	r3, #0
 8004508:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800450a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800450e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004510:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004514:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8004516:	f107 0308 	add.w	r3, r7, #8
 800451a:	2107      	movs	r1, #7
 800451c:	4618      	mov	r0, r3
 800451e:	f017 fbdf 	bl	801bce0 <HAL_RCC_ClockConfig>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8004528:	f001 fca2 	bl	8005e70 <Error_Handler>
  }
}
 800452c:	bf00      	nop
 800452e:	3750      	adds	r7, #80	@ 0x50
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40023800 	.word	0x40023800
 8004538:	40007000 	.word	0x40007000

0800453c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8004540:	4b1f      	ldr	r3, [pc, #124]	@ (80045c0 <MX_ETH_Init+0x84>)
 8004542:	4a20      	ldr	r2, [pc, #128]	@ (80045c4 <MX_ETH_Init+0x88>)
 8004544:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004546:	4b20      	ldr	r3, [pc, #128]	@ (80045c8 <MX_ETH_Init+0x8c>)
 8004548:	2200      	movs	r2, #0
 800454a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800454c:	4b1e      	ldr	r3, [pc, #120]	@ (80045c8 <MX_ETH_Init+0x8c>)
 800454e:	2280      	movs	r2, #128	@ 0x80
 8004550:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8004552:	4b1d      	ldr	r3, [pc, #116]	@ (80045c8 <MX_ETH_Init+0x8c>)
 8004554:	22e1      	movs	r2, #225	@ 0xe1
 8004556:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8004558:	4b1b      	ldr	r3, [pc, #108]	@ (80045c8 <MX_ETH_Init+0x8c>)
 800455a:	2200      	movs	r2, #0
 800455c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800455e:	4b1a      	ldr	r3, [pc, #104]	@ (80045c8 <MX_ETH_Init+0x8c>)
 8004560:	2200      	movs	r2, #0
 8004562:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8004564:	4b18      	ldr	r3, [pc, #96]	@ (80045c8 <MX_ETH_Init+0x8c>)
 8004566:	2200      	movs	r2, #0
 8004568:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800456a:	4b15      	ldr	r3, [pc, #84]	@ (80045c0 <MX_ETH_Init+0x84>)
 800456c:	4a16      	ldr	r2, [pc, #88]	@ (80045c8 <MX_ETH_Init+0x8c>)
 800456e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004570:	4b13      	ldr	r3, [pc, #76]	@ (80045c0 <MX_ETH_Init+0x84>)
 8004572:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004576:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004578:	4b11      	ldr	r3, [pc, #68]	@ (80045c0 <MX_ETH_Init+0x84>)
 800457a:	4a14      	ldr	r2, [pc, #80]	@ (80045cc <MX_ETH_Init+0x90>)
 800457c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800457e:	4b10      	ldr	r3, [pc, #64]	@ (80045c0 <MX_ETH_Init+0x84>)
 8004580:	4a13      	ldr	r2, [pc, #76]	@ (80045d0 <MX_ETH_Init+0x94>)
 8004582:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8004584:	4b0e      	ldr	r3, [pc, #56]	@ (80045c0 <MX_ETH_Init+0x84>)
 8004586:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800458a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800458c:	480c      	ldr	r0, [pc, #48]	@ (80045c0 <MX_ETH_Init+0x84>)
 800458e:	f014 f92d 	bl	80187ec <HAL_ETH_Init>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8004598:	f001 fc6a 	bl	8005e70 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800459c:	2238      	movs	r2, #56	@ 0x38
 800459e:	2100      	movs	r1, #0
 80045a0:	480c      	ldr	r0, [pc, #48]	@ (80045d4 <MX_ETH_Init+0x98>)
 80045a2:	f027 fab3 	bl	802bb0c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80045a6:	4b0b      	ldr	r3, [pc, #44]	@ (80045d4 <MX_ETH_Init+0x98>)
 80045a8:	2221      	movs	r2, #33	@ 0x21
 80045aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80045ac:	4b09      	ldr	r3, [pc, #36]	@ (80045d4 <MX_ETH_Init+0x98>)
 80045ae:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80045b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80045b4:	4b07      	ldr	r3, [pc, #28]	@ (80045d4 <MX_ETH_Init+0x98>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80045ba:	bf00      	nop
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	20011788 	.word	0x20011788
 80045c4:	40028000 	.word	0x40028000
 80045c8:	20011940 	.word	0x20011940
 80045cc:	200005a8 	.word	0x200005a8
 80045d0:	20000508 	.word	0x20000508
 80045d4:	20011750 	.word	0x20011750

080045d8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80045dc:	4b06      	ldr	r3, [pc, #24]	@ (80045f8 <MX_RNG_Init+0x20>)
 80045de:	4a07      	ldr	r2, [pc, #28]	@ (80045fc <MX_RNG_Init+0x24>)
 80045e0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80045e2:	4805      	ldr	r0, [pc, #20]	@ (80045f8 <MX_RNG_Init+0x20>)
 80045e4:	f018 f9fc 	bl	801c9e0 <HAL_RNG_Init>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80045ee:	f001 fc3f 	bl	8005e70 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80045f2:	bf00      	nop
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20011838 	.word	0x20011838
 80045fc:	50060800 	.word	0x50060800

08004600 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004606:	f107 0310 	add.w	r3, r7, #16
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	605a      	str	r2, [r3, #4]
 8004610:	609a      	str	r2, [r3, #8]
 8004612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004614:	1d3b      	adds	r3, r7, #4
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	605a      	str	r2, [r3, #4]
 800461c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800461e:	4b20      	ldr	r3, [pc, #128]	@ (80046a0 <MX_TIM1_Init+0xa0>)
 8004620:	4a20      	ldr	r2, [pc, #128]	@ (80046a4 <MX_TIM1_Init+0xa4>)
 8004622:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 8004624:	4b1e      	ldr	r3, [pc, #120]	@ (80046a0 <MX_TIM1_Init+0xa0>)
 8004626:	22d7      	movs	r2, #215	@ 0xd7
 8004628:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800462a:	4b1d      	ldr	r3, [pc, #116]	@ (80046a0 <MX_TIM1_Init+0xa0>)
 800462c:	2200      	movs	r2, #0
 800462e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004630:	4b1b      	ldr	r3, [pc, #108]	@ (80046a0 <MX_TIM1_Init+0xa0>)
 8004632:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004636:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004638:	4b19      	ldr	r3, [pc, #100]	@ (80046a0 <MX_TIM1_Init+0xa0>)
 800463a:	2200      	movs	r2, #0
 800463c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800463e:	4b18      	ldr	r3, [pc, #96]	@ (80046a0 <MX_TIM1_Init+0xa0>)
 8004640:	2200      	movs	r2, #0
 8004642:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004644:	4b16      	ldr	r3, [pc, #88]	@ (80046a0 <MX_TIM1_Init+0xa0>)
 8004646:	2200      	movs	r2, #0
 8004648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800464a:	4815      	ldr	r0, [pc, #84]	@ (80046a0 <MX_TIM1_Init+0xa0>)
 800464c:	f018 fa48 	bl	801cae0 <HAL_TIM_Base_Init>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004656:	f001 fc0b 	bl	8005e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800465a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800465e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004660:	f107 0310 	add.w	r3, r7, #16
 8004664:	4619      	mov	r1, r3
 8004666:	480e      	ldr	r0, [pc, #56]	@ (80046a0 <MX_TIM1_Init+0xa0>)
 8004668:	f018 fef2 	bl	801d450 <HAL_TIM_ConfigClockSource>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8004672:	f001 fbfd 	bl	8005e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004676:	2300      	movs	r3, #0
 8004678:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800467a:	2300      	movs	r3, #0
 800467c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004682:	1d3b      	adds	r3, r7, #4
 8004684:	4619      	mov	r1, r3
 8004686:	4806      	ldr	r0, [pc, #24]	@ (80046a0 <MX_TIM1_Init+0xa0>)
 8004688:	f019 fbe2 	bl	801de50 <HAL_TIMEx_MasterConfigSynchronization>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004692:	f001 fbed 	bl	8005e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004696:	bf00      	nop
 8004698:	3720      	adds	r7, #32
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20011848 	.word	0x20011848
 80046a4:	40010000 	.word	0x40010000

080046a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80046ac:	4b14      	ldr	r3, [pc, #80]	@ (8004700 <MX_USART3_UART_Init+0x58>)
 80046ae:	4a15      	ldr	r2, [pc, #84]	@ (8004704 <MX_USART3_UART_Init+0x5c>)
 80046b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80046b2:	4b13      	ldr	r3, [pc, #76]	@ (8004700 <MX_USART3_UART_Init+0x58>)
 80046b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80046b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80046ba:	4b11      	ldr	r3, [pc, #68]	@ (8004700 <MX_USART3_UART_Init+0x58>)
 80046bc:	2200      	movs	r2, #0
 80046be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80046c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004700 <MX_USART3_UART_Init+0x58>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80046c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004700 <MX_USART3_UART_Init+0x58>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80046cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004700 <MX_USART3_UART_Init+0x58>)
 80046ce:	220c      	movs	r2, #12
 80046d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004700 <MX_USART3_UART_Init+0x58>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80046d8:	4b09      	ldr	r3, [pc, #36]	@ (8004700 <MX_USART3_UART_Init+0x58>)
 80046da:	2200      	movs	r2, #0
 80046dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046de:	4b08      	ldr	r3, [pc, #32]	@ (8004700 <MX_USART3_UART_Init+0x58>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80046e4:	4b06      	ldr	r3, [pc, #24]	@ (8004700 <MX_USART3_UART_Init+0x58>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80046ea:	4805      	ldr	r0, [pc, #20]	@ (8004700 <MX_USART3_UART_Init+0x58>)
 80046ec:	f019 fcda 	bl	801e0a4 <HAL_UART_Init>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80046f6:	f001 fbbb 	bl	8005e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80046fa:	bf00      	nop
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20011894 	.word	0x20011894
 8004704:	40004800 	.word	0x40004800

08004708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08c      	sub	sp, #48	@ 0x30
 800470c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800470e:	f107 031c 	add.w	r3, r7, #28
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	605a      	str	r2, [r3, #4]
 8004718:	609a      	str	r2, [r3, #8]
 800471a:	60da      	str	r2, [r3, #12]
 800471c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800471e:	4b50      	ldr	r3, [pc, #320]	@ (8004860 <MX_GPIO_Init+0x158>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004722:	4a4f      	ldr	r2, [pc, #316]	@ (8004860 <MX_GPIO_Init+0x158>)
 8004724:	f043 0304 	orr.w	r3, r3, #4
 8004728:	6313      	str	r3, [r2, #48]	@ 0x30
 800472a:	4b4d      	ldr	r3, [pc, #308]	@ (8004860 <MX_GPIO_Init+0x158>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	61bb      	str	r3, [r7, #24]
 8004734:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004736:	4b4a      	ldr	r3, [pc, #296]	@ (8004860 <MX_GPIO_Init+0x158>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473a:	4a49      	ldr	r2, [pc, #292]	@ (8004860 <MX_GPIO_Init+0x158>)
 800473c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004740:	6313      	str	r3, [r2, #48]	@ 0x30
 8004742:	4b47      	ldr	r3, [pc, #284]	@ (8004860 <MX_GPIO_Init+0x158>)
 8004744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800474e:	4b44      	ldr	r3, [pc, #272]	@ (8004860 <MX_GPIO_Init+0x158>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004752:	4a43      	ldr	r2, [pc, #268]	@ (8004860 <MX_GPIO_Init+0x158>)
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	6313      	str	r3, [r2, #48]	@ 0x30
 800475a:	4b41      	ldr	r3, [pc, #260]	@ (8004860 <MX_GPIO_Init+0x158>)
 800475c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	613b      	str	r3, [r7, #16]
 8004764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004766:	4b3e      	ldr	r3, [pc, #248]	@ (8004860 <MX_GPIO_Init+0x158>)
 8004768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476a:	4a3d      	ldr	r2, [pc, #244]	@ (8004860 <MX_GPIO_Init+0x158>)
 800476c:	f043 0302 	orr.w	r3, r3, #2
 8004770:	6313      	str	r3, [r2, #48]	@ 0x30
 8004772:	4b3b      	ldr	r3, [pc, #236]	@ (8004860 <MX_GPIO_Init+0x158>)
 8004774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800477e:	4b38      	ldr	r3, [pc, #224]	@ (8004860 <MX_GPIO_Init+0x158>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004782:	4a37      	ldr	r2, [pc, #220]	@ (8004860 <MX_GPIO_Init+0x158>)
 8004784:	f043 0308 	orr.w	r3, r3, #8
 8004788:	6313      	str	r3, [r2, #48]	@ 0x30
 800478a:	4b35      	ldr	r3, [pc, #212]	@ (8004860 <MX_GPIO_Init+0x158>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	60bb      	str	r3, [r7, #8]
 8004794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004796:	4b32      	ldr	r3, [pc, #200]	@ (8004860 <MX_GPIO_Init+0x158>)
 8004798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479a:	4a31      	ldr	r2, [pc, #196]	@ (8004860 <MX_GPIO_Init+0x158>)
 800479c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80047a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004860 <MX_GPIO_Init+0x158>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047aa:	607b      	str	r3, [r7, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SENSOR_GPIO_Port, SENSOR_Pin, GPIO_PIN_RESET);
 80047ae:	2200      	movs	r2, #0
 80047b0:	2120      	movs	r1, #32
 80047b2:	482c      	ldr	r0, [pc, #176]	@ (8004864 <MX_GPIO_Init+0x15c>)
 80047b4:	f014 fe38 	bl	8019428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80047b8:	2200      	movs	r2, #0
 80047ba:	f244 0181 	movw	r1, #16513	@ 0x4081
 80047be:	482a      	ldr	r0, [pc, #168]	@ (8004868 <MX_GPIO_Init+0x160>)
 80047c0:	f014 fe32 	bl	8019428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80047c4:	2200      	movs	r2, #0
 80047c6:	2140      	movs	r1, #64	@ 0x40
 80047c8:	4828      	ldr	r0, [pc, #160]	@ (800486c <MX_GPIO_Init+0x164>)
 80047ca:	f014 fe2d 	bl	8019428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80047ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80047d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80047d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80047d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80047de:	f107 031c 	add.w	r3, r7, #28
 80047e2:	4619      	mov	r1, r3
 80047e4:	4822      	ldr	r0, [pc, #136]	@ (8004870 <MX_GPIO_Init+0x168>)
 80047e6:	f014 fb4f 	bl	8018e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_Pin */
  GPIO_InitStruct.Pin = SENSOR_Pin;
 80047ea:	2320      	movs	r3, #32
 80047ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047ee:	2301      	movs	r3, #1
 80047f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047f6:	2300      	movs	r3, #0
 80047f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SENSOR_GPIO_Port, &GPIO_InitStruct);
 80047fa:	f107 031c 	add.w	r3, r7, #28
 80047fe:	4619      	mov	r1, r3
 8004800:	4818      	ldr	r0, [pc, #96]	@ (8004864 <MX_GPIO_Init+0x15c>)
 8004802:	f014 fb41 	bl	8018e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8004806:	f244 0381 	movw	r3, #16513	@ 0x4081
 800480a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800480c:	2301      	movs	r3, #1
 800480e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004810:	2300      	movs	r3, #0
 8004812:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004814:	2300      	movs	r3, #0
 8004816:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004818:	f107 031c 	add.w	r3, r7, #28
 800481c:	4619      	mov	r1, r3
 800481e:	4812      	ldr	r0, [pc, #72]	@ (8004868 <MX_GPIO_Init+0x160>)
 8004820:	f014 fb32 	bl	8018e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8004824:	2340      	movs	r3, #64	@ 0x40
 8004826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004828:	2301      	movs	r3, #1
 800482a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482c:	2300      	movs	r3, #0
 800482e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004830:	2300      	movs	r3, #0
 8004832:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004834:	f107 031c 	add.w	r3, r7, #28
 8004838:	4619      	mov	r1, r3
 800483a:	480c      	ldr	r0, [pc, #48]	@ (800486c <MX_GPIO_Init+0x164>)
 800483c:	f014 fb24 	bl	8018e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004840:	2380      	movs	r3, #128	@ 0x80
 8004842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004844:	2300      	movs	r3, #0
 8004846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004848:	2300      	movs	r3, #0
 800484a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800484c:	f107 031c 	add.w	r3, r7, #28
 8004850:	4619      	mov	r1, r3
 8004852:	4806      	ldr	r0, [pc, #24]	@ (800486c <MX_GPIO_Init+0x164>)
 8004854:	f014 fb18 	bl	8018e88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004858:	bf00      	nop
 800485a:	3730      	adds	r7, #48	@ 0x30
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40023800 	.word	0x40023800
 8004864:	40020000 	.word	0x40020000
 8004868:	40020400 	.word	0x40020400
 800486c:	40021800 	.word	0x40021800
 8004870:	40020800 	.word	0x40020800

08004874 <parse_string>:

/* USER CODE BEGIN 4 */
// int pause  0 - до паузы 1 - после паузы
void parse_string(char *str, time_t cronetime_olds, int i, int pause) {
 8004874:	b580      	push	{r7, lr}
 8004876:	b08e      	sub	sp, #56	@ 0x38
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	e9c7 2300 	strd	r2, r3, [r7]
	char *token;
	char *saveptr;
	int flag = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	633b      	str	r3, [r7, #48]	@ 0x30
	int k = 0;
 8004884:	2300      	movs	r3, #0
 8004886:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int pin = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	627b      	str	r3, [r7, #36]	@ 0x24
	char delim[] = ";";
 800488c:	233b      	movs	r3, #59	@ 0x3b
 800488e:	833b      	strh	r3, [r7, #24]

	// Разбиваем строку на элементы, разделенные точкой с запятой
	token = strtok_r(str, delim, &saveptr);
 8004890:	f107 021c 	add.w	r2, r7, #28
 8004894:	f107 0318 	add.w	r3, r7, #24
 8004898:	4619      	mov	r1, r3
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f027 f99b 	bl	802bbd6 <strtok_r>
 80048a0:	6378      	str	r0, [r7, #52]	@ 0x34
	while (token != NULL) {
 80048a2:	e060      	b.n	8004966 <parse_string+0xf2>
		char *end_token;
		// Если нашли элемент "p", устанавливаем флаг

		if (token[0] == 'p') {
 80048a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b70      	cmp	r3, #112	@ 0x70
 80048aa:	d115      	bne.n	80048d8 <parse_string+0x64>
			char *newstring = token + 1;
 80048ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ae:	3301      	adds	r3, #1
 80048b0:	623b      	str	r3, [r7, #32]
			//MG_INFO(("Pause %d seconds\n", atoi(newstring)));
			dbCrontxt[i].ptime = cronetime_olds + atoi(newstring);
 80048b2:	6a38      	ldr	r0, [r7, #32]
 80048b4:	f025 fece 	bl	802a654 <atoi>
 80048b8:	4603      	mov	r3, r0
 80048ba:	461a      	mov	r2, r3
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	441a      	add	r2, r3
 80048c0:	492d      	ldr	r1, [pc, #180]	@ (8004978 <parse_string+0x104>)
 80048c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048c4:	f44f 70a4 	mov.w	r0, #328	@ 0x148
 80048c8:	fb00 f303 	mul.w	r3, r0, r3
 80048cc:	440b      	add	r3, r1
 80048ce:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80048d2:	601a      	str	r2, [r3, #0]
			flag = 1;
 80048d4:	2301      	movs	r3, #1
 80048d6:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		// в зависимости от флага отправляем в очередь до или после паузы
		if (flag == pause) {
 80048d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048dc:	429a      	cmp	r2, r3
 80048de:	d139      	bne.n	8004954 <parse_string+0xe0>
			//MG_INFO(("%s\n", token));

			//strcpy(data_pin.message, pch);

			char *token2 = strtok_r(token, ":", &end_token);
 80048e0:	f107 0314 	add.w	r3, r7, #20
 80048e4:	461a      	mov	r2, r3
 80048e6:	4925      	ldr	r1, [pc, #148]	@ (800497c <parse_string+0x108>)
 80048e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80048ea:	f027 f974 	bl	802bbd6 <strtok_r>
 80048ee:	62b8      	str	r0, [r7, #40]	@ 0x28
			//MG_INFO(("pin = %d\n", atoi(token2)));

			while (token2 != NULL) {
 80048f0:	e021      	b.n	8004936 <parse_string+0xc2>
				// тут отправляем в очередь
				if (k == 0) {
 80048f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <parse_string+0x9a>
					pin = atoi(token2);
 80048f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048fa:	f025 feab 	bl	802a654 <atoi>
 80048fe:	6278      	str	r0, [r7, #36]	@ 0x24
					if(pin != 0){
 8004900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <parse_string+0x9a>
						data_pin.pin = pin-1;
 8004906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004908:	3b01      	subs	r3, #1
 800490a:	4a1d      	ldr	r2, [pc, #116]	@ (8004980 <parse_string+0x10c>)
 800490c:	6013      	str	r3, [r2, #0]
					}
					//MG_INFO(("pin = %s\n", token2));
				}
				if (k == 1) {
 800490e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004910:	2b01      	cmp	r3, #1
 8004912:	d105      	bne.n	8004920 <parse_string+0xac>
					data_pin.action = atoi(token2);
 8004914:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004916:	f025 fe9d 	bl	802a654 <atoi>
 800491a:	4603      	mov	r3, r0
 800491c:	4a18      	ldr	r2, [pc, #96]	@ (8004980 <parse_string+0x10c>)
 800491e:	6053      	str	r3, [r2, #4]
					//MG_INFO(("action = %s\n", token2));
				}

				token2 = strtok_r(NULL, ":", &end_token);
 8004920:	f107 0314 	add.w	r3, r7, #20
 8004924:	461a      	mov	r2, r3
 8004926:	4915      	ldr	r1, [pc, #84]	@ (800497c <parse_string+0x108>)
 8004928:	2000      	movs	r0, #0
 800492a:	f027 f954 	bl	802bbd6 <strtok_r>
 800492e:	62b8      	str	r0, [r7, #40]	@ 0x28
				k++;
 8004930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004932:	3301      	adds	r3, #1
 8004934:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while (token2 != NULL) {
 8004936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1da      	bne.n	80048f2 <parse_string+0x7e>
				// MG_INFO(("action = %d\n", atoi(token2));
			}

			if(k == 2) {
 800493c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493e:	2b02      	cmp	r3, #2
 8004940:	d106      	bne.n	8004950 <parse_string+0xdc>
				xQueueSend(myQueueHandle, (void* ) &data_pin, 0);
 8004942:	4b10      	ldr	r3, [pc, #64]	@ (8004984 <parse_string+0x110>)
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	2300      	movs	r3, #0
 8004948:	2200      	movs	r2, #0
 800494a:	490d      	ldr	r1, [pc, #52]	@ (8004980 <parse_string+0x10c>)
 800494c:	f022 fb34 	bl	8026fb8 <xQueueGenericSend>
			}
			k = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
		token = strtok_r(NULL, delim, &saveptr);
 8004954:	f107 021c 	add.w	r2, r7, #28
 8004958:	f107 0318 	add.w	r3, r7, #24
 800495c:	4619      	mov	r1, r3
 800495e:	2000      	movs	r0, #0
 8004960:	f027 f939 	bl	802bbd6 <strtok_r>
 8004964:	6378      	str	r0, [r7, #52]	@ 0x34
	while (token != NULL) {
 8004966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004968:	2b00      	cmp	r3, #0
 800496a:	d19b      	bne.n	80048a4 <parse_string+0x30>
	}
}
 800496c:	bf00      	nop
 800496e:	bf00      	nop
 8004970:	3738      	adds	r7, #56	@ 0x38
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	2000df50 	.word	0x2000df50
 800497c:	0802eea8 	.word	0x0802eea8
 8004980:	200107fc 	.word	0x200107fc
 8004984:	20011938 	.word	0x20011938

08004988 <StartConfigTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartConfigTask */
void StartConfigTask(void *argument)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08a      	sub	sp, #40	@ 0x28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8004990:	f025 fabc 	bl	8029f0c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
	int usbflag = 1;
 8004994:	2301      	movs	r3, #1
 8004996:	627b      	str	r3, [r7, #36]	@ 0x24
	FILINFO finfo;
	/* Infinite loop */
	for (;;) {
		switch (Appli_state) {
 8004998:	4b68      	ldr	r3, [pc, #416]	@ (8004b3c <StartConfigTask+0x1b4>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b02      	cmp	r3, #2
 800499e:	f040 80c6 	bne.w	8004b2e <StartConfigTask+0x1a6>
		case APPLICATION_READY:
			if (usbflag == 1) {
 80049a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	f040 8088 	bne.w	8004aba <StartConfigTask+0x132>
				osDelay(1000);
 80049aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80049ae:	f021 fd21 	bl	80263f4 <osDelay>
				MG_INFO(("APPLICATION_READY! \r\n"));
 80049b2:	4b63      	ldr	r3, [pc, #396]	@ (8004b40 <StartConfigTask+0x1b8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	dd09      	ble.n	80049ce <StartConfigTask+0x46>
 80049ba:	4b62      	ldr	r3, [pc, #392]	@ (8004b44 <StartConfigTask+0x1bc>)
 80049bc:	f240 3275 	movw	r2, #885	@ 0x375
 80049c0:	4961      	ldr	r1, [pc, #388]	@ (8004b48 <StartConfigTask+0x1c0>)
 80049c2:	2002      	movs	r0, #2
 80049c4:	f007 fb16 	bl	800bff4 <mg_log_prefix>
 80049c8:	4860      	ldr	r0, [pc, #384]	@ (8004b4c <StartConfigTask+0x1c4>)
 80049ca:	f007 fb63 	bl	800c094 <mg_log>

				FRESULT fresult = f_stat("setings.ini", &finfo);
 80049ce:	f107 0308 	add.w	r3, r7, #8
 80049d2:	4619      	mov	r1, r3
 80049d4:	485e      	ldr	r0, [pc, #376]	@ (8004b50 <StartConfigTask+0x1c8>)
 80049d6:	f021 fb13 	bl	8026000 <f_stat>
 80049da:	4603      	mov	r3, r0
 80049dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
				if (fresult == FR_OK) {
 80049e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d137      	bne.n	8004a58 <StartConfigTask+0xd0>
					GetSetingsConfig();
 80049e8:	f011 fb3a 	bl	8016060 <GetSetingsConfig>
					GetCronConfig();
 80049ec:	f011 fe14 	bl	8016618 <GetCronConfig>
					GetPinConfig();
 80049f0:	f011 ff5a 	bl	80168a8 <GetPinConfig>
					GetPinToPin();
 80049f4:	f012 fbb6 	bl	8017164 <GetPinToPin>
					InitPin();
 80049f8:	f012 fcca 	bl	8017390 <InitPin>

					xTaskNotifyGive(WebServerTaskHandle); // ТО ВКЛЮЧАЕМ ЗАДАЧУ WebServerTask
 80049fc:	4b55      	ldr	r3, [pc, #340]	@ (8004b54 <StartConfigTask+0x1cc>)
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	2300      	movs	r3, #0
 8004a02:	2202      	movs	r2, #2
 8004a04:	2100      	movs	r1, #0
 8004a06:	f024 f9d5 	bl	8028db4 <xTaskGenericNotify>
					xTaskNotifyGive(CronTaskHandle); // И ВКЛЮЧАЕМ ЗАДАЧУ CronTask
 8004a0a:	4b53      	ldr	r3, [pc, #332]	@ (8004b58 <StartConfigTask+0x1d0>)
 8004a0c:	6818      	ldr	r0, [r3, #0]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	2202      	movs	r2, #2
 8004a12:	2100      	movs	r1, #0
 8004a14:	f024 f9ce 	bl	8028db4 <xTaskGenericNotify>
					xTaskNotifyGive(OutputTaskHandle); // И ВКЛЮЧАЕМ ЗАДАЧУ OutputTask
 8004a18:	4b50      	ldr	r3, [pc, #320]	@ (8004b5c <StartConfigTask+0x1d4>)
 8004a1a:	6818      	ldr	r0, [r3, #0]
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	2202      	movs	r2, #2
 8004a20:	2100      	movs	r1, #0
 8004a22:	f024 f9c7 	bl	8028db4 <xTaskGenericNotify>
					xTaskNotifyGive(InputTaskHandle); // И ВКЛЮЧАЕМ ЗАДАЧУ InputTask
 8004a26:	4b4e      	ldr	r3, [pc, #312]	@ (8004b60 <StartConfigTask+0x1d8>)
 8004a28:	6818      	ldr	r0, [r3, #0]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	2100      	movs	r1, #0
 8004a30:	f024 f9c0 	bl	8028db4 <xTaskGenericNotify>
					xTaskNotifyGive(EncoderTaskHandle); // И ВКЛЮЧАЕМ ЗАДАЧУ PWMTask
 8004a34:	4b4b      	ldr	r3, [pc, #300]	@ (8004b64 <StartConfigTask+0x1dc>)
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	f024 f9b9 	bl	8028db4 <xTaskGenericNotify>
					osDelay(100);
 8004a42:	2064      	movs	r0, #100	@ 0x64
 8004a44:	f021 fcd6 	bl	80263f4 <osDelay>
					xTaskNotifyGive(OnewireTaskHandle); // И ВКЛЮЧАЕМ ЗАДАЧУ OneWire
 8004a48:	4b47      	ldr	r3, [pc, #284]	@ (8004b68 <StartConfigTask+0x1e0>)
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	2202      	movs	r2, #2
 8004a50:	2100      	movs	r1, #0
 8004a52:	f024 f9af 	bl	8028db4 <xTaskGenericNotify>
 8004a56:	e02e      	b.n	8004ab6 <StartConfigTask+0x12e>

				} else {
					StartSetingsConfig();
 8004a58:	f011 f8be 	bl	8015bd8 <StartSetingsConfig>

					xTaskNotifyGive(WebServerTaskHandle); // ТО ВКЛЮЧАЕМ ЗАДАЧУ WebServerTask
 8004a5c:	4b3d      	ldr	r3, [pc, #244]	@ (8004b54 <StartConfigTask+0x1cc>)
 8004a5e:	6818      	ldr	r0, [r3, #0]
 8004a60:	2300      	movs	r3, #0
 8004a62:	2202      	movs	r2, #2
 8004a64:	2100      	movs	r1, #0
 8004a66:	f024 f9a5 	bl	8028db4 <xTaskGenericNotify>
					xTaskNotifyGive(CronTaskHandle); // И ВКЛЮЧАЕМ ЗАДАЧУ CronTask
 8004a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b58 <StartConfigTask+0x1d0>)
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2202      	movs	r2, #2
 8004a72:	2100      	movs	r1, #0
 8004a74:	f024 f99e 	bl	8028db4 <xTaskGenericNotify>
					xTaskNotifyGive(OutputTaskHandle); // И ВКЛЮЧАЕМ ЗАДАЧУ OutputTask
 8004a78:	4b38      	ldr	r3, [pc, #224]	@ (8004b5c <StartConfigTask+0x1d4>)
 8004a7a:	6818      	ldr	r0, [r3, #0]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	2202      	movs	r2, #2
 8004a80:	2100      	movs	r1, #0
 8004a82:	f024 f997 	bl	8028db4 <xTaskGenericNotify>
					xTaskNotifyGive(InputTaskHandle); // И ВКЛЮЧАЕМ ЗАДАЧУ InputTask
 8004a86:	4b36      	ldr	r3, [pc, #216]	@ (8004b60 <StartConfigTask+0x1d8>)
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	2100      	movs	r1, #0
 8004a90:	f024 f990 	bl	8028db4 <xTaskGenericNotify>
					xTaskNotifyGive(EncoderTaskHandle); // И ВКЛЮЧАЕМ ЗАДАЧУ PWMTask
 8004a94:	4b33      	ldr	r3, [pc, #204]	@ (8004b64 <StartConfigTask+0x1dc>)
 8004a96:	6818      	ldr	r0, [r3, #0]
 8004a98:	2300      	movs	r3, #0
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	f024 f989 	bl	8028db4 <xTaskGenericNotify>
					osDelay(100);
 8004aa2:	2064      	movs	r0, #100	@ 0x64
 8004aa4:	f021 fca6 	bl	80263f4 <osDelay>
					xTaskNotifyGive(OnewireTaskHandle); // И ВКЛЮЧАЕМ ЗАДАЧУ OneWire
 8004aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8004b68 <StartConfigTask+0x1e0>)
 8004aaa:	6818      	ldr	r0, [r3, #0]
 8004aac:	2300      	movs	r3, #0
 8004aae:	2202      	movs	r2, #2
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	f024 f97f 	bl	8028db4 <xTaskGenericNotify>

				}
				usbflag = 0;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	627b      	str	r3, [r7, #36]	@ 0x24
			}
			// Функция для чтения целых чисел из очереди
			if (xQueueReceive(usbQueueHandle, &usbnum, portMAX_DELAY) == pdTRUE) {
 8004aba:	4b2c      	ldr	r3, [pc, #176]	@ (8004b6c <StartConfigTask+0x1e4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ac2:	492b      	ldr	r1, [pc, #172]	@ (8004b70 <StartConfigTask+0x1e8>)
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f022 fcbd 	bl	8027444 <xQueueReceive>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d130      	bne.n	8004b32 <StartConfigTask+0x1aa>
				switch (usbnum) {
 8004ad0:	4b27      	ldr	r3, [pc, #156]	@ (8004b70 <StartConfigTask+0x1e8>)
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	2b03      	cmp	r3, #3
 8004ad8:	d816      	bhi.n	8004b08 <StartConfigTask+0x180>
 8004ada:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae0 <StartConfigTask+0x158>)
 8004adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae0:	08004af1 	.word	0x08004af1
 8004ae4:	08004af7 	.word	0x08004af7
 8004ae8:	08004afd 	.word	0x08004afd
 8004aec:	08004b03 	.word	0x08004b03
				case 1:
					SetPinConfig();
 8004af0:	f012 f900 	bl	8016cf4 <SetPinConfig>
					break;
 8004af4:	e009      	b.n	8004b0a <StartConfigTask+0x182>
				case 2:
					SetSetingsConfig();
 8004af6:	f010 fd8f 	bl	8015618 <SetSetingsConfig>
					break;
 8004afa:	e006      	b.n	8004b0a <StartConfigTask+0x182>
				case 3:
					SetCronConfig();
 8004afc:	f011 fe34 	bl	8016768 <SetCronConfig>
					break;
 8004b00:	e003      	b.n	8004b0a <StartConfigTask+0x182>
				case 4:
					SetPinToPin();
 8004b02:	f012 fbb3 	bl	801726c <SetPinToPin>
					break;
 8004b06:	e000      	b.n	8004b0a <StartConfigTask+0x182>
				default:
					//MG_INFO(("Wrong data! \r\n"));
					break;
 8004b08:	bf00      	nop
				}
				MG_INFO(("xQueueReceive number: %u\n", usbnum));
 8004b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b40 <StartConfigTask+0x1b8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	dd0f      	ble.n	8004b32 <StartConfigTask+0x1aa>
 8004b12:	4b0c      	ldr	r3, [pc, #48]	@ (8004b44 <StartConfigTask+0x1bc>)
 8004b14:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8004b18:	490b      	ldr	r1, [pc, #44]	@ (8004b48 <StartConfigTask+0x1c0>)
 8004b1a:	2002      	movs	r0, #2
 8004b1c:	f007 fa6a 	bl	800bff4 <mg_log_prefix>
 8004b20:	4b13      	ldr	r3, [pc, #76]	@ (8004b70 <StartConfigTask+0x1e8>)
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	4619      	mov	r1, r3
 8004b26:	4813      	ldr	r0, [pc, #76]	@ (8004b74 <StartConfigTask+0x1ec>)
 8004b28:	f007 fab4 	bl	800c094 <mg_log>
			}
			break;
 8004b2c:	e001      	b.n	8004b32 <StartConfigTask+0x1aa>
		default:
			//MG_INFO(("Wrong data! \r\n");
			break;
 8004b2e:	bf00      	nop
 8004b30:	e000      	b.n	8004b34 <StartConfigTask+0x1ac>
			break;
 8004b32:	bf00      	nop
		}
		osDelay(1);
 8004b34:	2001      	movs	r0, #1
 8004b36:	f021 fc5d 	bl	80263f4 <osDelay>
		switch (Appli_state) {
 8004b3a:	e72d      	b.n	8004998 <StartConfigTask+0x10>
 8004b3c:	2002e2c8 	.word	0x2002e2c8
 8004b40:	20000244 	.word	0x20000244
 8004b44:	080325b0 	.word	0x080325b0
 8004b48:	0802ece0 	.word	0x0802ece0
 8004b4c:	0802eeac 	.word	0x0802eeac
 8004b50:	0802eec4 	.word	0x0802eec4
 8004b54:	20011920 	.word	0x20011920
 8004b58:	20011928 	.word	0x20011928
 8004b5c:	20011924 	.word	0x20011924
 8004b60:	2001192c 	.word	0x2001192c
 8004b64:	20011934 	.word	0x20011934
 8004b68:	20011930 	.word	0x20011930
 8004b6c:	2001193c 	.word	0x2001193c
 8004b70:	2000ed7a 	.word	0x2000ed7a
 8004b74:	0802eed0 	.word	0x0802eed0

08004b78 <StartWebServerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWebServerTask */
void StartWebServerTask(void *argument)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b0b6      	sub	sp, #216	@ 0xd8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWebServerTask */
	ulTaskNotifyTake(0, portMAX_DELAY);
 8004b80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004b84:	2000      	movs	r0, #0
 8004b86:	f024 f8c9 	bl	8028d1c <ulTaskNotifyTake>
	/* Infinite loop */
	volatile unsigned long prevtime;
	prevtime = HAL_GetTick();
 8004b8a:	f013 fd1d 	bl	80185c8 <HAL_GetTick>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

	struct mg_mgr mgr;        // Initialise Mongoose event manager
	mg_mgr_init(&mgr);        // and attach it to the interface
 8004b94:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f009 f833 	bl	800dc04 <mg_mgr_init>
	mg_log_set(MG_LL_DEBUG);  // Set log level
 8004b9e:	4b48      	ldr	r3, [pc, #288]	@ (8004cc0 <StartWebServerTask+0x148>)
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	601a      	str	r2, [r3, #0]

	// Initialise Mongoose network stack
	struct mg_tcpip_driver_stm32f_data driver_data = { .mdc_cr = 4 };
 8004ba4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	605a      	str	r2, [r3, #4]
 8004bae:	2304      	movs	r3, #4
 8004bb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	struct mg_tcpip_if mif = { .mac = GENERATE_LOCALLY_ADMINISTERED_MAC(),
 8004bb4:	f107 0308 	add.w	r3, r7, #8
 8004bb8:	2278      	movs	r2, #120	@ 0x78
 8004bba:	2100      	movs	r1, #0
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f026 ffa5 	bl	802bb0c <memset>
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	723b      	strb	r3, [r7, #8]
 8004bc6:	4b3f      	ldr	r3, [pc, #252]	@ (8004cc4 <StartWebServerTask+0x14c>)
 8004bc8:	781a      	ldrb	r2, [r3, #0]
 8004bca:	4b3f      	ldr	r3, [pc, #252]	@ (8004cc8 <StartWebServerTask+0x150>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	4053      	eors	r3, r2
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	727b      	strb	r3, [r7, #9]
 8004bd4:	4b3d      	ldr	r3, [pc, #244]	@ (8004ccc <StartWebServerTask+0x154>)
 8004bd6:	781a      	ldrb	r2, [r3, #0]
 8004bd8:	4b3d      	ldr	r3, [pc, #244]	@ (8004cd0 <StartWebServerTask+0x158>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	4053      	eors	r3, r2
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	72bb      	strb	r3, [r7, #10]
 8004be2:	4b3c      	ldr	r3, [pc, #240]	@ (8004cd4 <StartWebServerTask+0x15c>)
 8004be4:	781a      	ldrb	r2, [r3, #0]
 8004be6:	4b3c      	ldr	r3, [pc, #240]	@ (8004cd8 <StartWebServerTask+0x160>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	4053      	eors	r3, r2
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	72fb      	strb	r3, [r7, #11]
 8004bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8004cdc <StartWebServerTask+0x164>)
 8004bf2:	781a      	ldrb	r2, [r3, #0]
 8004bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8004ce0 <StartWebServerTask+0x168>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	4053      	eors	r3, r2
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	4b39      	ldr	r3, [pc, #228]	@ (8004ce4 <StartWebServerTask+0x16c>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	4053      	eors	r3, r2
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	733b      	strb	r3, [r7, #12]
 8004c06:	4b38      	ldr	r3, [pc, #224]	@ (8004ce8 <StartWebServerTask+0x170>)
 8004c08:	781a      	ldrb	r2, [r3, #0]
 8004c0a:	4b38      	ldr	r3, [pc, #224]	@ (8004cec <StartWebServerTask+0x174>)
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	4053      	eors	r3, r2
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	4b37      	ldr	r3, [pc, #220]	@ (8004cf0 <StartWebServerTask+0x178>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	4053      	eors	r3, r2
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	737b      	strb	r3, [r7, #13]
 8004c1c:	4b35      	ldr	r3, [pc, #212]	@ (8004cf4 <StartWebServerTask+0x17c>)
 8004c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c20:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8004c24:	633b      	str	r3, [r7, #48]	@ 0x30
			// Uncomment below for static configuration:
			//.ip = mg_htonl(MG_U32(192, 168, 11, 80)),
			//.mask = mg_htonl(MG_U32(255, 255, 255, 0)),
			//.gw = mg_htonl(MG_U32(192, 168, 11, 1)),
			.driver = &mg_tcpip_driver_stm32f, .driver_data = &driver_data };
	mg_tcpip_init(&mgr, &mif);
 8004c26:	f107 0208 	add.w	r2, r7, #8
 8004c2a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8004c2e:	4611      	mov	r1, r2
 8004c30:	4618      	mov	r0, r3
 8004c32:	f00b fd31 	bl	8010698 <mg_tcpip_init>
	//mg_timer_add(&mgr, 1000, MG_TIMER_REPEAT, timer_fn, &mif);
	MG_INFO(("MAC: %M. Waiting for IP...", mg_print_mac, mif.mac));
 8004c36:	4b22      	ldr	r3, [pc, #136]	@ (8004cc0 <StartWebServerTask+0x148>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	dd14      	ble.n	8004c68 <StartWebServerTask+0xf0>
 8004c3e:	4b2e      	ldr	r3, [pc, #184]	@ (8004cf8 <StartWebServerTask+0x180>)
 8004c40:	f240 32d1 	movw	r2, #977	@ 0x3d1
 8004c44:	492d      	ldr	r1, [pc, #180]	@ (8004cfc <StartWebServerTask+0x184>)
 8004c46:	2002      	movs	r0, #2
 8004c48:	f007 f9d4 	bl	800bff4 <mg_log_prefix>
 8004c4c:	f107 0308 	add.w	r3, r7, #8
 8004c50:	461a      	mov	r2, r3
 8004c52:	492b      	ldr	r1, [pc, #172]	@ (8004d00 <StartWebServerTask+0x188>)
 8004c54:	482b      	ldr	r0, [pc, #172]	@ (8004d04 <StartWebServerTask+0x18c>)
 8004c56:	f007 fa1d 	bl	800c094 <mg_log>
	while (mif.state != MG_TCPIP_STATE_READY) {
 8004c5a:	e005      	b.n	8004c68 <StartWebServerTask+0xf0>
		mg_mgr_poll(&mgr, 0);
 8004c5c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8004c60:	2100      	movs	r1, #0
 8004c62:	4618      	mov	r0, r3
 8004c64:	f00c f82a 	bl	8010cbc <mg_mgr_poll>
	while (mif.state != MG_TCPIP_STATE_READY) {
 8004c68:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d1f5      	bne.n	8004c5c <StartWebServerTask+0xe4>
	}

	MG_INFO(("Initialising application.."));
 8004c70:	4b13      	ldr	r3, [pc, #76]	@ (8004cc0 <StartWebServerTask+0x148>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	dd09      	ble.n	8004c8c <StartWebServerTask+0x114>
 8004c78:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf8 <StartWebServerTask+0x180>)
 8004c7a:	f240 32d6 	movw	r2, #982	@ 0x3d6
 8004c7e:	491f      	ldr	r1, [pc, #124]	@ (8004cfc <StartWebServerTask+0x184>)
 8004c80:	2002      	movs	r0, #2
 8004c82:	f007 f9b7 	bl	800bff4 <mg_log_prefix>
 8004c86:	4820      	ldr	r0, [pc, #128]	@ (8004d08 <StartWebServerTask+0x190>)
 8004c88:	f007 fa04 	bl	800c094 <mg_log>
	web_init(&mgr);
 8004c8c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8004c90:	4618      	mov	r0, r3
 8004c92:	f010 f925 	bl	8014ee0 <web_init>

	MG_INFO(("Starting event loop"));
 8004c96:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc0 <StartWebServerTask+0x148>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	dd09      	ble.n	8004cb2 <StartWebServerTask+0x13a>
 8004c9e:	4b16      	ldr	r3, [pc, #88]	@ (8004cf8 <StartWebServerTask+0x180>)
 8004ca0:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8004ca4:	4915      	ldr	r1, [pc, #84]	@ (8004cfc <StartWebServerTask+0x184>)
 8004ca6:	2002      	movs	r0, #2
 8004ca8:	f007 f9a4 	bl	800bff4 <mg_log_prefix>
 8004cac:	4817      	ldr	r0, [pc, #92]	@ (8004d0c <StartWebServerTask+0x194>)
 8004cae:	f007 f9f1 	bl	800c094 <mg_log>
	for (;;) {
		mg_mgr_poll(&mgr, 1);  // Infinite event loop
 8004cb2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f00b ffff 	bl	8010cbc <mg_mgr_poll>
 8004cbe:	e7f8      	b.n	8004cb2 <StartWebServerTask+0x13a>
 8004cc0:	20000244 	.word	0x20000244
 8004cc4:	1ff0f420 	.word	0x1ff0f420
 8004cc8:	1ff0f421 	.word	0x1ff0f421
 8004ccc:	1ff0f422 	.word	0x1ff0f422
 8004cd0:	1ff0f423 	.word	0x1ff0f423
 8004cd4:	1ff0f424 	.word	0x1ff0f424
 8004cd8:	1ff0f425 	.word	0x1ff0f425
 8004cdc:	1ff0f426 	.word	0x1ff0f426
 8004ce0:	1ff0f427 	.word	0x1ff0f427
 8004ce4:	1ff0f428 	.word	0x1ff0f428
 8004ce8:	1ff0f429 	.word	0x1ff0f429
 8004cec:	1ff0f42a 	.word	0x1ff0f42a
 8004cf0:	1ff0f42b 	.word	0x1ff0f42b
 8004cf4:	2000024c 	.word	0x2000024c
 8004cf8:	080325c0 	.word	0x080325c0
 8004cfc:	0802ece0 	.word	0x0802ece0
 8004d00:	08011309 	.word	0x08011309
 8004d04:	0802eeec 	.word	0x0802eeec
 8004d08:	0802ef08 	.word	0x0802ef08
 8004d0c:	0802ef24 	.word	0x0802ef24

08004d10 <StartOutputTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOutputTask */
void StartOutputTask(void *argument)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOutputTask */
	ulTaskNotifyTake(0, portMAX_DELAY);
 8004d18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	f023 fffd 	bl	8028d1c <ulTaskNotifyTake>
	/* Infinite loop */
	for (;;) {
		if (xQueueReceive(myQueueHandle, &data_pin, portMAX_DELAY) == pdTRUE) {
 8004d22:	4b31      	ldr	r3, [pc, #196]	@ (8004de8 <StartOutputTask+0xd8>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d2a:	4930      	ldr	r1, [pc, #192]	@ (8004dec <StartOutputTask+0xdc>)
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f022 fb89 	bl	8027444 <xQueueReceive>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d152      	bne.n	8004dde <StartOutputTask+0xce>
			if (data_pin.action == 0) {
 8004d38:	4b2c      	ldr	r3, [pc, #176]	@ (8004dec <StartOutputTask+0xdc>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d117      	bne.n	8004d70 <StartOutputTask+0x60>
				//@todo  проверить что data_pin.pin число
				HAL_GPIO_WritePin(PinsInfo[data_pin.pin].gpio_name, PinsInfo[data_pin.pin].hal_pin, GPIO_PIN_RESET);
 8004d40:	4b2a      	ldr	r3, [pc, #168]	@ (8004dec <StartOutputTask+0xdc>)
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	492a      	ldr	r1, [pc, #168]	@ (8004df0 <StartOutputTask+0xe0>)
 8004d46:	4613      	mov	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	440b      	add	r3, r1
 8004d50:	3310      	adds	r3, #16
 8004d52:	6818      	ldr	r0, [r3, #0]
 8004d54:	4b25      	ldr	r3, [pc, #148]	@ (8004dec <StartOutputTask+0xdc>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	4925      	ldr	r1, [pc, #148]	@ (8004df0 <StartOutputTask+0xe0>)
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	440b      	add	r3, r1
 8004d64:	330c      	adds	r3, #12
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	f014 fb5c 	bl	8019428 <HAL_GPIO_WritePin>
				//MG_INFO(("%d-%d  \r\n", (int) data_pin.pin, (int) data_pin.action));
			}
			if (data_pin.action == 1) {
 8004d70:	4b1e      	ldr	r3, [pc, #120]	@ (8004dec <StartOutputTask+0xdc>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d117      	bne.n	8004da8 <StartOutputTask+0x98>
				//@todo  проверить что data_pin.pin число
				HAL_GPIO_WritePin(PinsInfo[data_pin.pin].gpio_name, PinsInfo[data_pin.pin].hal_pin, GPIO_PIN_SET);
 8004d78:	4b1c      	ldr	r3, [pc, #112]	@ (8004dec <StartOutputTask+0xdc>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	491c      	ldr	r1, [pc, #112]	@ (8004df0 <StartOutputTask+0xe0>)
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	440b      	add	r3, r1
 8004d88:	3310      	adds	r3, #16
 8004d8a:	6818      	ldr	r0, [r3, #0]
 8004d8c:	4b17      	ldr	r3, [pc, #92]	@ (8004dec <StartOutputTask+0xdc>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	4917      	ldr	r1, [pc, #92]	@ (8004df0 <StartOutputTask+0xe0>)
 8004d92:	4613      	mov	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	00db      	lsls	r3, r3, #3
 8004d9a:	440b      	add	r3, r1
 8004d9c:	330c      	adds	r3, #12
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	2201      	movs	r2, #1
 8004da2:	4619      	mov	r1, r3
 8004da4:	f014 fb40 	bl	8019428 <HAL_GPIO_WritePin>
				//MG_INFO(("%d-%d  \r\n", (int) data_pin.pin, (int) data_pin.action));
			}
			if (data_pin.action == 2) {
 8004da8:	4b10      	ldr	r3, [pc, #64]	@ (8004dec <StartOutputTask+0xdc>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d116      	bne.n	8004dde <StartOutputTask+0xce>
				//@todo  проверить что data_pin.pin число
				HAL_GPIO_TogglePin(PinsInfo[data_pin.pin].gpio_name, PinsInfo[data_pin.pin].hal_pin);
 8004db0:	4b0e      	ldr	r3, [pc, #56]	@ (8004dec <StartOutputTask+0xdc>)
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	490e      	ldr	r1, [pc, #56]	@ (8004df0 <StartOutputTask+0xe0>)
 8004db6:	4613      	mov	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	440b      	add	r3, r1
 8004dc0:	3310      	adds	r3, #16
 8004dc2:	6818      	ldr	r0, [r3, #0]
 8004dc4:	4b09      	ldr	r3, [pc, #36]	@ (8004dec <StartOutputTask+0xdc>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	4909      	ldr	r1, [pc, #36]	@ (8004df0 <StartOutputTask+0xe0>)
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	440b      	add	r3, r1
 8004dd4:	330c      	adds	r3, #12
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	f014 fb3e 	bl	801945a <HAL_GPIO_TogglePin>
				//MG_INFO(("%d-%d  \r\n", (int) data_pin.pin, (int) data_pin.action);
			}
		}
		osDelay(1);
 8004dde:	2001      	movs	r0, #1
 8004de0:	f021 fb08 	bl	80263f4 <osDelay>
		if (xQueueReceive(myQueueHandle, &data_pin, portMAX_DELAY) == pdTRUE) {
 8004de4:	e79d      	b.n	8004d22 <StartOutputTask+0x12>
 8004de6:	bf00      	nop
 8004de8:	20011938 	.word	0x20011938
 8004dec:	200107fc 	.word	0x200107fc
 8004df0:	08031670 	.word	0x08031670

08004df4 <StartCronTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCronTask */
void StartCronTask(void *argument)
{
 8004df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df8:	b091      	sub	sp, #68	@ 0x44
 8004dfa:	af02      	add	r7, sp, #8
 8004dfc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCronTask */
	ulTaskNotifyTake(0, portMAX_DELAY);
 8004dfe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004e02:	2000      	movs	r0, #0
 8004e04:	f023 ff8a 	bl	8028d1c <ulTaskNotifyTake>

		static lwdtc_cron_ctx_t cron_ctxs[MAXSIZE];
		int i = 0;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	637b      	str	r3, [r7, #52]	@ 0x34
		char str[40] = { 0 };
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	f107 0310 	add.w	r3, r7, #16
 8004e14:	2224      	movs	r2, #36	@ 0x24
 8004e16:	2100      	movs	r1, #0
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f026 fe77 	bl	802bb0c <memset>

		/* Define context for CRON, used to parse data to */
		size_t fail_index;
		MG_INFO(("Count task %d\r\n", LWDTC_ARRAYSIZE(dbCrontxt)));
 8004e1e:	4b79      	ldr	r3, [pc, #484]	@ (8005004 <StartCronTask+0x210>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	dd0a      	ble.n	8004e3c <StartCronTask+0x48>
 8004e26:	4b78      	ldr	r3, [pc, #480]	@ (8005008 <StartCronTask+0x214>)
 8004e28:	f240 4216 	movw	r2, #1046	@ 0x416
 8004e2c:	4977      	ldr	r1, [pc, #476]	@ (800500c <StartCronTask+0x218>)
 8004e2e:	2002      	movs	r0, #2
 8004e30:	f007 f8e0 	bl	800bff4 <mg_log_prefix>
 8004e34:	210a      	movs	r1, #10
 8004e36:	4876      	ldr	r0, [pc, #472]	@ (8005010 <StartCronTask+0x21c>)
 8004e38:	f007 f92c 	bl	800c094 <mg_log>
		/* Parse all cron strings */
		if (lwdtc_cron_parse_multi(cron_ctxs, dbCrontxt, MAXSIZE, &fail_index) != lwdtcOK) {
 8004e3c:	f107 0308 	add.w	r3, r7, #8
 8004e40:	220a      	movs	r2, #10
 8004e42:	4974      	ldr	r1, [pc, #464]	@ (8005014 <StartCronTask+0x220>)
 8004e44:	4874      	ldr	r0, [pc, #464]	@ (8005018 <StartCronTask+0x224>)
 8004e46:	f7fe fb91 	bl	800356c <lwdtc_cron_parse_multi>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00f      	beq.n	8004e70 <StartCronTask+0x7c>
			MG_INFO(("Failed to parse cron at index %d\r\n", (int) fail_index));
 8004e50:	4b6c      	ldr	r3, [pc, #432]	@ (8005004 <StartCronTask+0x210>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	dd0b      	ble.n	8004e70 <StartCronTask+0x7c>
 8004e58:	4b6b      	ldr	r3, [pc, #428]	@ (8005008 <StartCronTask+0x214>)
 8004e5a:	f240 4219 	movw	r2, #1049	@ 0x419
 8004e5e:	496b      	ldr	r1, [pc, #428]	@ (800500c <StartCronTask+0x218>)
 8004e60:	2002      	movs	r0, #2
 8004e62:	f007 f8c7 	bl	800bff4 <mg_log_prefix>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	4619      	mov	r1, r3
 8004e6a:	486c      	ldr	r0, [pc, #432]	@ (800501c <StartCronTask+0x228>)
 8004e6c:	f007 f912 	bl	800c094 <mg_log>
		}
		MG_INFO(("CRONs parsed and ready to go\r\n"));
 8004e70:	4b64      	ldr	r3, [pc, #400]	@ (8005004 <StartCronTask+0x210>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	dd09      	ble.n	8004e8c <StartCronTask+0x98>
 8004e78:	4b63      	ldr	r3, [pc, #396]	@ (8005008 <StartCronTask+0x214>)
 8004e7a:	f240 421b 	movw	r2, #1051	@ 0x41b
 8004e7e:	4963      	ldr	r1, [pc, #396]	@ (800500c <StartCronTask+0x218>)
 8004e80:	2002      	movs	r0, #2
 8004e82:	f007 f8b7 	bl	800bff4 <mg_log_prefix>
 8004e86:	4866      	ldr	r0, [pc, #408]	@ (8005020 <StartCronTask+0x22c>)
 8004e88:	f007 f904 	bl	800c094 <mg_log>

		/* Infinite loop */
		for (;;) {
			if (s_boot_timestamp != 0) {
 8004e8c:	4b65      	ldr	r3, [pc, #404]	@ (8005024 <StartCronTask+0x230>)
 8004e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	f000 80b2 	beq.w	8004ffc <StartCronTask+0x208>
				//MG_INFO(("TIME: %lld ms ", s_boot_timestamp));
				cronetime = (time_t) (s_boot_timestamp / 1000) + (mg_millis() / 1000);
 8004e98:	4b62      	ldr	r3, [pc, #392]	@ (8005024 <StartCronTask+0x230>)
 8004e9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ea2:	f04f 0300 	mov.w	r3, #0
 8004ea6:	f7fb fc3f 	bl	8000728 <__aeabi_uldivmod>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4690      	mov	r8, r2
 8004eb0:	4699      	mov	r9, r3
 8004eb2:	f7fe fc91 	bl	80037d8 <mg_millis>
 8004eb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004eba:	f04f 0300 	mov.w	r3, #0
 8004ebe:	f7fb fc33 	bl	8000728 <__aeabi_uldivmod>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	eb18 0a02 	adds.w	sl, r8, r2
 8004eca:	eb49 0b03 	adc.w	fp, r9, r3
 8004ece:	4652      	mov	r2, sl
 8004ed0:	465b      	mov	r3, fp
 8004ed2:	4955      	ldr	r1, [pc, #340]	@ (8005028 <StartCronTask+0x234>)
 8004ed4:	e9c1 2300 	strd	r2, r3, [r1]
				if (cronetime != cronetime_old) {
 8004ed8:	4b53      	ldr	r3, [pc, #332]	@ (8005028 <StartCronTask+0x234>)
 8004eda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ede:	4b53      	ldr	r3, [pc, #332]	@ (800502c <StartCronTask+0x238>)
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	4299      	cmp	r1, r3
 8004ee6:	bf08      	it	eq
 8004ee8:	4290      	cmpeq	r0, r2
 8004eea:	f000 8087 	beq.w	8004ffc <StartCronTask+0x208>
					cronetime_old = cronetime;
 8004eee:	4b4e      	ldr	r3, [pc, #312]	@ (8005028 <StartCronTask+0x234>)
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	494d      	ldr	r1, [pc, #308]	@ (800502c <StartCronTask+0x238>)
 8004ef6:	e9c1 2300 	strd	r2, r3, [r1]
					timez = localtime(&cronetime);
 8004efa:	484b      	ldr	r0, [pc, #300]	@ (8005028 <StartCronTask+0x234>)
 8004efc:	f026 fe6e 	bl	802bbdc <localtime>
 8004f00:	4603      	mov	r3, r0
 8004f02:	4a4b      	ldr	r2, [pc, #300]	@ (8005030 <StartCronTask+0x23c>)
 8004f04:	6013      	str	r3, [r2, #0]
					i = 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	637b      	str	r3, [r7, #52]	@ 0x34

					while (i < LWDTC_ARRAYSIZE(dbCrontxt)) {
 8004f0a:	e046      	b.n	8004f9a <StartCronTask+0x1a6>
						if (cronetime >= dbCrontxt[i].ptime && dbCrontxt[i].ptime != 0) {
 8004f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f0e:	4a41      	ldr	r2, [pc, #260]	@ (8005014 <StartCronTask+0x220>)
 8004f10:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8004f14:	fb01 f303 	mul.w	r3, r1, r3
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2200      	movs	r2, #0
 8004f22:	461c      	mov	r4, r3
 8004f24:	4615      	mov	r5, r2
 8004f26:	4b40      	ldr	r3, [pc, #256]	@ (8005028 <StartCronTask+0x234>)
 8004f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2c:	42a2      	cmp	r2, r4
 8004f2e:	41ab      	sbcs	r3, r5
 8004f30:	db30      	blt.n	8004f94 <StartCronTask+0x1a0>
 8004f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f34:	4a37      	ldr	r2, [pc, #220]	@ (8005014 <StartCronTask+0x220>)
 8004f36:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8004f3a:	fb01 f303 	mul.w	r3, r1, r3
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d024      	beq.n	8004f94 <StartCronTask+0x1a0>

							strcpy(str, dbCrontxt[i].activ);
 8004f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f4c:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 8004f50:	fb02 f303 	mul.w	r3, r2, r3
 8004f54:	3320      	adds	r3, #32
 8004f56:	4a2f      	ldr	r2, [pc, #188]	@ (8005014 <StartCronTask+0x220>)
 8004f58:	4413      	add	r3, r2
 8004f5a:	1cda      	adds	r2, r3, #3
 8004f5c:	f107 030c 	add.w	r3, r7, #12
 8004f60:	4611      	mov	r1, r2
 8004f62:	4618      	mov	r0, r3
 8004f64:	f027 faff 	bl	802c566 <strcpy>
							parse_string(str, cronetime_old, i, 1);
 8004f68:	4b30      	ldr	r3, [pc, #192]	@ (800502c <StartCronTask+0x238>)
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004f70:	f107 000c 	add.w	r0, r7, #12
 8004f74:	2601      	movs	r6, #1
 8004f76:	9601      	str	r6, [sp, #4]
 8004f78:	9100      	str	r1, [sp, #0]
 8004f7a:	f7ff fc7b 	bl	8004874 <parse_string>
							dbCrontxt[i].ptime = 0;
 8004f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f80:	4a24      	ldr	r2, [pc, #144]	@ (8005014 <StartCronTask+0x220>)
 8004f82:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8004f86:	fb01 f303 	mul.w	r3, r1, r3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8004f90:	2200      	movs	r2, #0
 8004f92:	601a      	str	r2, [r3, #0]
						}
						i++;
 8004f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f96:	3301      	adds	r3, #1
 8004f98:	637b      	str	r3, [r7, #52]	@ 0x34
					while (i < LWDTC_ARRAYSIZE(dbCrontxt)) {
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f9c:	2b09      	cmp	r3, #9
 8004f9e:	d9b5      	bls.n	8004f0c <StartCronTask+0x118>
					}
					i = 0;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Check if CRON should execute */
					while (i < LWDTC_ARRAYSIZE(cron_ctxs)) {
 8004fa4:	e027      	b.n	8004ff6 <StartCronTask+0x202>
						if (lwdtc_cron_is_valid_for_time(timez, cron_ctxs, &i) == lwdtcOK) {
 8004fa6:	4b22      	ldr	r3, [pc, #136]	@ (8005030 <StartCronTask+0x23c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8004fae:	491a      	ldr	r1, [pc, #104]	@ (8005018 <StartCronTask+0x224>)
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7fe fb29 	bl	8003608 <lwdtc_cron_is_valid_for_time>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d119      	bne.n	8004ff0 <StartCronTask+0x1fc>

							strcpy(str, dbCrontxt[i].activ);
 8004fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fbe:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 8004fc2:	fb02 f303 	mul.w	r3, r2, r3
 8004fc6:	3320      	adds	r3, #32
 8004fc8:	4a12      	ldr	r2, [pc, #72]	@ (8005014 <StartCronTask+0x220>)
 8004fca:	4413      	add	r3, r2
 8004fcc:	1cda      	adds	r2, r3, #3
 8004fce:	f107 030c 	add.w	r3, r7, #12
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f027 fac6 	bl	802c566 <strcpy>
							parse_string(str, cronetime_old, i, 0);
 8004fda:	4b14      	ldr	r3, [pc, #80]	@ (800502c <StartCronTask+0x238>)
 8004fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004fe2:	f107 000c 	add.w	r0, r7, #12
 8004fe6:	2600      	movs	r6, #0
 8004fe8:	9601      	str	r6, [sp, #4]
 8004fea:	9100      	str	r1, [sp, #0]
 8004fec:	f7ff fc42 	bl	8004874 <parse_string>
							//xQueueSend(myQueueHandle, &i, 0);
						}
						i++;
 8004ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	637b      	str	r3, [r7, #52]	@ 0x34
					while (i < LWDTC_ARRAYSIZE(cron_ctxs)) {
 8004ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ff8:	2b09      	cmp	r3, #9
 8004ffa:	d9d4      	bls.n	8004fa6 <StartCronTask+0x1b2>
					}
				}
				//MG_INFO(("TIME s: %lld s ", cronetime));
			}
			osDelay(1);
 8004ffc:	2001      	movs	r0, #1
 8004ffe:	f021 f9f9 	bl	80263f4 <osDelay>
			if (s_boot_timestamp != 0) {
 8005002:	e743      	b.n	8004e8c <StartCronTask+0x98>
 8005004:	20000244 	.word	0x20000244
 8005008:	080325d4 	.word	0x080325d4
 800500c:	0802ece0 	.word	0x0802ece0
 8005010:	0802ef38 	.word	0x0802ef38
 8005014:	2000df50 	.word	0x2000df50
 8005018:	20011948 	.word	0x20011948
 800501c:	0802ef48 	.word	0x0802ef48
 8005020:	0802ef6c 	.word	0x0802ef6c
 8005024:	20014c40 	.word	0x20014c40
 8005028:	2000ed80 	.word	0x2000ed80
 800502c:	2000ed88 	.word	0x2000ed88
 8005030:	2000ed7c 	.word	0x2000ed7c

08005034 <StartInputTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartInputTask */
void StartInputTask(void *argument)
{
 8005034:	b590      	push	{r4, r7, lr}
 8005036:	f5ad 7d0d 	sub.w	sp, sp, #564	@ 0x234
 800503a:	af00      	add	r7, sp, #0
 800503c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005040:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8005044:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartInputTask */
	ulTaskNotifyTake(0, portMAX_DELAY);
 8005046:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800504a:	2000      	movs	r0, #0
 800504c:	f023 fe66 	bl	8028d1c <ulTaskNotifyTake>
//	MG_INFO(("Start 'Input' task \r\n");
	uint8_t pinStates[NUMPIN] = { 0 };
 8005050:	2300      	movs	r3, #0
 8005052:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8005056:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800505a:	2255      	movs	r2, #85	@ 0x55
 800505c:	2100      	movs	r1, #0
 800505e:	4618      	mov	r0, r3
 8005060:	f026 fd54 	bl	802bb0c <memset>
	uint32_t pinTimes[NUMPIN] = { 0 };
 8005064:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005068:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800506c:	4618      	mov	r0, r3
 800506e:	f44f 73b2 	mov.w	r3, #356	@ 0x164
 8005072:	461a      	mov	r2, r3
 8005074:	2100      	movs	r1, #0
 8005076:	f026 fd49 	bl	802bb0c <memset>
	uint32_t millis;
	uint8_t pinLevel[NUMPIN] = { 0 };
 800507a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800507e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	3304      	adds	r3, #4
 8005088:	2255      	movs	r2, #85	@ 0x55
 800508a:	2100      	movs	r1, #0
 800508c:	4618      	mov	r0, r3
 800508e:	f026 fd3d 	bl	802bb0c <memset>

	osDelay(1000);
 8005092:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005096:	f021 f9ad 	bl	80263f4 <osDelay>
	InitMultibutton();
 800509a:	f012 fd67 	bl	8017b6c <InitMultibutton>
	/* Infinite loop */
	for (;;) {
		millis = HAL_GetTick();
 800509e:	f013 fa93 	bl	80185c8 <HAL_GetTick>
 80050a2:	f8c7 0228 	str.w	r0, [r7, #552]	@ 0x228
		for (uint8_t i = 0; i < NUMPIN; i++) {
 80050a6:	2300      	movs	r3, #0
 80050a8:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
 80050ac:	e145      	b.n	800533a <StartInputTask+0x306>
			// INPUT Button
			if (PinsConf[i].topin == 1 && PinsConf[i].act == 1) {
 80050ae:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 80050b2:	4aa5      	ldr	r2, [pc, #660]	@ (8005348 <StartInputTask+0x314>)
 80050b4:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80050b8:	fb01 f303 	mul.w	r3, r1, r3
 80050bc:	4413      	add	r3, r2
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d12d      	bne.n	8005120 <StartInputTask+0xec>
 80050c4:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 80050c8:	4a9f      	ldr	r2, [pc, #636]	@ (8005348 <StartInputTask+0x314>)
 80050ca:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80050ce:	fb01 f303 	mul.w	r3, r1, r3
 80050d2:	4413      	add	r3, r2
 80050d4:	f203 2337 	addw	r3, r3, #567	@ 0x237
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d120      	bne.n	8005120 <StartInputTask+0xec>
				if ((millis - pinTimes[i]) >= 5) {
 80050de:	f897 222f 	ldrb.w	r2, [r7, #559]	@ 0x22f
 80050e2:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80050e6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80050ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ee:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d913      	bls.n	8005120 <StartInputTask+0xec>
					pinTimes[i] = millis;
 80050f8:	f897 222f 	ldrb.w	r2, [r7, #559]	@ 0x22f
 80050fc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005100:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8005104:	f8d7 1228 	ldr.w	r1, [r7, #552]	@ 0x228
 8005108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					button_ticks(&button[i]);
 800510c:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8005110:	222c      	movs	r2, #44	@ 0x2c
 8005112:	fb02 f303 	mul.w	r3, r2, r3
 8005116:	4a8d      	ldr	r2, [pc, #564]	@ (800534c <StartInputTask+0x318>)
 8005118:	4413      	add	r3, r2
 800511a:	4618      	mov	r0, r3
 800511c:	f00e fcc8 	bl	8013ab0 <button_ticks>
				}
			}
			// INPUT Switch
			if (PinsConf[i].topin == 3) { // Для 'switch'
 8005120:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8005124:	4a88      	ldr	r2, [pc, #544]	@ (8005348 <StartInputTask+0x314>)
 8005126:	f44f 7118 	mov.w	r1, #608	@ 0x260
 800512a:	fb01 f303 	mul.w	r3, r1, r3
 800512e:	4413      	add	r3, r2
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b03      	cmp	r3, #3
 8005134:	f040 80fc 	bne.w	8005330 <StartInputTask+0x2fc>
				pinStates[i] = HAL_GPIO_ReadPin(PinsInfo[i].gpio_name, PinsInfo[i].hal_pin);
 8005138:	f897 222f 	ldrb.w	r2, [r7, #559]	@ 0x22f
 800513c:	4984      	ldr	r1, [pc, #528]	@ (8005350 <StartInputTask+0x31c>)
 800513e:	4613      	mov	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	440b      	add	r3, r1
 8005148:	3310      	adds	r3, #16
 800514a:	6818      	ldr	r0, [r3, #0]
 800514c:	f897 222f 	ldrb.w	r2, [r7, #559]	@ 0x22f
 8005150:	497f      	ldr	r1, [pc, #508]	@ (8005350 <StartInputTask+0x31c>)
 8005152:	4613      	mov	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	4413      	add	r3, r2
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	440b      	add	r3, r1
 800515c:	330c      	adds	r3, #12
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	f897 422f 	ldrb.w	r4, [r7, #559]	@ 0x22f
 8005164:	4619      	mov	r1, r3
 8005166:	f014 f947 	bl	80193f8 <HAL_GPIO_ReadPin>
 800516a:	4603      	mov	r3, r0
 800516c:	461a      	mov	r2, r3
 800516e:	f504 730c 	add.w	r3, r4, #560	@ 0x230
 8005172:	443b      	add	r3, r7
 8005174:	f803 2c64 	strb.w	r2, [r3, #-100]
				if (pinStates[i] == 1 && (millis - pinTimes[i]) >= 200 && pinLevel[i] != pinStates[i]) {
 8005178:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 800517c:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005180:	443b      	add	r3, r7
 8005182:	f813 3c64 	ldrb.w	r3, [r3, #-100]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d164      	bne.n	8005254 <StartInputTask+0x220>
 800518a:	f897 222f 	ldrb.w	r2, [r7, #559]	@ 0x22f
 800518e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005192:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8005196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800519a:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80051a2:	d957      	bls.n	8005254 <StartInputTask+0x220>
 80051a4:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 80051a8:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 80051ac:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 80051b0:	5cd2      	ldrb	r2, [r2, r3]
 80051b2:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 80051b6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80051ba:	443b      	add	r3, r7
 80051bc:	f813 3c64 	ldrb.w	r3, [r3, #-100]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d047      	beq.n	8005254 <StartInputTask+0x220>
					pinLevel[i] = pinStates[i];
 80051c4:	f897 222f 	ldrb.w	r2, [r7, #559]	@ 0x22f
 80051c8:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 80051cc:	f502 720c 	add.w	r2, r2, #560	@ 0x230
 80051d0:	443a      	add	r2, r7
 80051d2:	f812 1c64 	ldrb.w	r1, [r2, #-100]
 80051d6:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 80051da:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 80051de:	54d1      	strb	r1, [r2, r3]
					pinTimes[i] = millis;
 80051e0:	f897 222f 	ldrb.w	r2, [r7, #559]	@ 0x22f
 80051e4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80051e8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80051ec:	f8d7 1228 	ldr.w	r1, [r7, #552]	@ 0x228
 80051f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

					// OUTPUT (вынести в отдельную функцию)
					for (uint8_t a = 0; a < NUMPINLINKS; a++) {
 80051f4:	2300      	movs	r3, #0
 80051f6:	f887 322e 	strb.w	r3, [r7, #558]	@ 0x22e
 80051fa:	e027      	b.n	800524c <StartInputTask+0x218>
						if (PinsLinks[a].idin == i) {
 80051fc:	f897 222e 	ldrb.w	r2, [r7, #558]	@ 0x22e
 8005200:	4954      	ldr	r1, [pc, #336]	@ (8005354 <StartInputTask+0x320>)
 8005202:	4613      	mov	r3, r2
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	440b      	add	r3, r1
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8005212:	429a      	cmp	r2, r3
 8005214:	d115      	bne.n	8005242 <StartInputTask+0x20e>
							data_pin.pin = PinsLinks[a].idout;
 8005216:	f897 222e 	ldrb.w	r2, [r7, #558]	@ 0x22e
 800521a:	494e      	ldr	r1, [pc, #312]	@ (8005354 <StartInputTask+0x320>)
 800521c:	4613      	mov	r3, r2
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	4413      	add	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	440b      	add	r3, r1
 8005226:	3304      	adds	r3, #4
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a4b      	ldr	r2, [pc, #300]	@ (8005358 <StartInputTask+0x324>)
 800522c:	6013      	str	r3, [r2, #0]
							data_pin.action = 1;
 800522e:	4b4a      	ldr	r3, [pc, #296]	@ (8005358 <StartInputTask+0x324>)
 8005230:	2201      	movs	r2, #1
 8005232:	605a      	str	r2, [r3, #4]
							xQueueSend(myQueueHandle, (void* ) &data_pin, 0);
 8005234:	4b49      	ldr	r3, [pc, #292]	@ (800535c <StartInputTask+0x328>)
 8005236:	6818      	ldr	r0, [r3, #0]
 8005238:	2300      	movs	r3, #0
 800523a:	2200      	movs	r2, #0
 800523c:	4946      	ldr	r1, [pc, #280]	@ (8005358 <StartInputTask+0x324>)
 800523e:	f021 febb 	bl	8026fb8 <xQueueGenericSend>
					for (uint8_t a = 0; a < NUMPINLINKS; a++) {
 8005242:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8005246:	3301      	adds	r3, #1
 8005248:	f887 322e 	strb.w	r3, [r7, #558]	@ 0x22e
 800524c:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8005250:	2b63      	cmp	r3, #99	@ 0x63
 8005252:	d9d3      	bls.n	80051fc <StartInputTask+0x1c8>
						}
					}
				}
				if (pinStates[i] == 0 && (millis - pinTimes[i]) >= 200 && pinLevel[i] != pinStates[i]) {
 8005254:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8005258:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800525c:	443b      	add	r3, r7
 800525e:	f813 3c64 	ldrb.w	r3, [r3, #-100]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d164      	bne.n	8005330 <StartInputTask+0x2fc>
 8005266:	f897 222f 	ldrb.w	r2, [r7, #559]	@ 0x22f
 800526a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800526e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8005272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005276:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2bc7      	cmp	r3, #199	@ 0xc7
 800527e:	d957      	bls.n	8005330 <StartInputTask+0x2fc>
 8005280:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8005284:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8005288:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 800528c:	5cd2      	ldrb	r2, [r2, r3]
 800528e:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8005292:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005296:	443b      	add	r3, r7
 8005298:	f813 3c64 	ldrb.w	r3, [r3, #-100]
 800529c:	429a      	cmp	r2, r3
 800529e:	d047      	beq.n	8005330 <StartInputTask+0x2fc>
					pinLevel[i] = pinStates[i];
 80052a0:	f897 222f 	ldrb.w	r2, [r7, #559]	@ 0x22f
 80052a4:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 80052a8:	f502 720c 	add.w	r2, r2, #560	@ 0x230
 80052ac:	443a      	add	r2, r7
 80052ae:	f812 1c64 	ldrb.w	r1, [r2, #-100]
 80052b2:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 80052b6:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 80052ba:	54d1      	strb	r1, [r2, r3]
					pinTimes[i] = millis;
 80052bc:	f897 222f 	ldrb.w	r2, [r7, #559]	@ 0x22f
 80052c0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80052c4:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80052c8:	f8d7 1228 	ldr.w	r1, [r7, #552]	@ 0x228
 80052cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

					// OUTPUT (вынести в отдельную функцию)
					for (uint8_t a = 0; a < NUMPINLINKS; a++) {
 80052d0:	2300      	movs	r3, #0
 80052d2:	f887 322d 	strb.w	r3, [r7, #557]	@ 0x22d
 80052d6:	e027      	b.n	8005328 <StartInputTask+0x2f4>
						if (PinsLinks[a].idin == i) {
 80052d8:	f897 222d 	ldrb.w	r2, [r7, #557]	@ 0x22d
 80052dc:	491d      	ldr	r1, [pc, #116]	@ (8005354 <StartInputTask+0x320>)
 80052de:	4613      	mov	r3, r2
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	440b      	add	r3, r1
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d115      	bne.n	800531e <StartInputTask+0x2ea>
							data_pin.pin = PinsLinks[a].idout;
 80052f2:	f897 222d 	ldrb.w	r2, [r7, #557]	@ 0x22d
 80052f6:	4917      	ldr	r1, [pc, #92]	@ (8005354 <StartInputTask+0x320>)
 80052f8:	4613      	mov	r3, r2
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	3304      	adds	r3, #4
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a14      	ldr	r2, [pc, #80]	@ (8005358 <StartInputTask+0x324>)
 8005308:	6013      	str	r3, [r2, #0]
							data_pin.action = 0;
 800530a:	4b13      	ldr	r3, [pc, #76]	@ (8005358 <StartInputTask+0x324>)
 800530c:	2200      	movs	r2, #0
 800530e:	605a      	str	r2, [r3, #4]
							xQueueSend(myQueueHandle, (void* ) &data_pin, 0);
 8005310:	4b12      	ldr	r3, [pc, #72]	@ (800535c <StartInputTask+0x328>)
 8005312:	6818      	ldr	r0, [r3, #0]
 8005314:	2300      	movs	r3, #0
 8005316:	2200      	movs	r2, #0
 8005318:	490f      	ldr	r1, [pc, #60]	@ (8005358 <StartInputTask+0x324>)
 800531a:	f021 fe4d 	bl	8026fb8 <xQueueGenericSend>
					for (uint8_t a = 0; a < NUMPINLINKS; a++) {
 800531e:	f897 322d 	ldrb.w	r3, [r7, #557]	@ 0x22d
 8005322:	3301      	adds	r3, #1
 8005324:	f887 322d 	strb.w	r3, [r7, #557]	@ 0x22d
 8005328:	f897 322d 	ldrb.w	r3, [r7, #557]	@ 0x22d
 800532c:	2b63      	cmp	r3, #99	@ 0x63
 800532e:	d9d3      	bls.n	80052d8 <StartInputTask+0x2a4>
		for (uint8_t i = 0; i < NUMPIN; i++) {
 8005330:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8005334:	3301      	adds	r3, #1
 8005336:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
 800533a:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 800533e:	2b58      	cmp	r3, #88	@ 0x58
 8005340:	f67f aeb5 	bls.w	80050ae <StartInputTask+0x7a>
		millis = HAL_GetTick();
 8005344:	e6ab      	b.n	800509e <StartInputTask+0x6a>
 8005346:	bf00      	nop
 8005348:	2000066c 	.word	0x2000066c
 800534c:	20010804 	.word	0x20010804
 8005350:	08031670 	.word	0x08031670
 8005354:	2000d9cc 	.word	0x2000d9cc
 8005358:	200107fc 	.word	0x200107fc
 800535c:	20011938 	.word	0x20011938

08005360 <StartOnewireTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOnewireTask */
void StartOnewireTask(void *argument)
{
 8005360:	b590      	push	{r4, r7, lr}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOnewireTask */
	ulTaskNotifyTake(0, portMAX_DELAY);
 8005368:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800536c:	2000      	movs	r0, #0
 800536e:	f023 fcd5 	bl	8028d1c <ulTaskNotifyTake>
		//	MG_INFO(("Start 'OneWire' task \r\n"));
		uint8_t Ds18b20TryToFind = 5;
 8005372:	2305      	movs	r3, #5
 8005374:	73fb      	strb	r3, [r7, #15]
		do {
			OneWire_Init(&OneWire, _DS18B20_GPIO, _DS18B20_PIN);
 8005376:	2220      	movs	r2, #32
 8005378:	496d      	ldr	r1, [pc, #436]	@ (8005530 <StartOnewireTask+0x1d0>)
 800537a:	486e      	ldr	r0, [pc, #440]	@ (8005534 <StartOnewireTask+0x1d4>)
 800537c:	f00f fe6a 	bl	8015054 <OneWire_Init>
			TempSensorCount = 0;
 8005380:	4b6d      	ldr	r3, [pc, #436]	@ (8005538 <StartOnewireTask+0x1d8>)
 8005382:	2200      	movs	r2, #0
 8005384:	701a      	strb	r2, [r3, #0]
			while (HAL_GetTick() < 3000)
 8005386:	e002      	b.n	800538e <StartOnewireTask+0x2e>
				Ds18b20Delay(100);
 8005388:	2064      	movs	r0, #100	@ 0x64
 800538a:	f021 f833 	bl	80263f4 <osDelay>
			while (HAL_GetTick() < 3000)
 800538e:	f013 f91b 	bl	80185c8 <HAL_GetTick>
 8005392:	4603      	mov	r3, r0
 8005394:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8005398:	4293      	cmp	r3, r2
 800539a:	d9f5      	bls.n	8005388 <StartOnewireTask+0x28>
			OneWireDevices = OneWire_First(&OneWire);
 800539c:	4865      	ldr	r0, [pc, #404]	@ (8005534 <StartOnewireTask+0x1d4>)
 800539e:	f00f ff54 	bl	801524a <OneWire_First>
 80053a2:	4603      	mov	r3, r0
 80053a4:	461a      	mov	r2, r3
 80053a6:	4b65      	ldr	r3, [pc, #404]	@ (800553c <StartOnewireTask+0x1dc>)
 80053a8:	701a      	strb	r2, [r3, #0]
			while (OneWireDevices) {
 80053aa:	e019      	b.n	80053e0 <StartOnewireTask+0x80>
				Ds18b20Delay(100);
 80053ac:	2064      	movs	r0, #100	@ 0x64
 80053ae:	f021 f821 	bl	80263f4 <osDelay>
				TempSensorCount++;
 80053b2:	4b61      	ldr	r3, [pc, #388]	@ (8005538 <StartOnewireTask+0x1d8>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	3301      	adds	r3, #1
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	4b5f      	ldr	r3, [pc, #380]	@ (8005538 <StartOnewireTask+0x1d8>)
 80053bc:	701a      	strb	r2, [r3, #0]
				OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount - 1].Address);
 80053be:	4b5e      	ldr	r3, [pc, #376]	@ (8005538 <StartOnewireTask+0x1d8>)
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	019b      	lsls	r3, r3, #6
 80053c6:	4a5e      	ldr	r2, [pc, #376]	@ (8005540 <StartOnewireTask+0x1e0>)
 80053c8:	4413      	add	r3, r2
 80053ca:	4619      	mov	r1, r3
 80053cc:	4859      	ldr	r0, [pc, #356]	@ (8005534 <StartOnewireTask+0x1d4>)
 80053ce:	f010 f851 	bl	8015474 <OneWire_GetFullROM>
				OneWireDevices = OneWire_Next(&OneWire);
 80053d2:	4858      	ldr	r0, [pc, #352]	@ (8005534 <StartOnewireTask+0x1d4>)
 80053d4:	f00f ff49 	bl	801526a <OneWire_Next>
 80053d8:	4603      	mov	r3, r0
 80053da:	461a      	mov	r2, r3
 80053dc:	4b57      	ldr	r3, [pc, #348]	@ (800553c <StartOnewireTask+0x1dc>)
 80053de:	701a      	strb	r2, [r3, #0]
			while (OneWireDevices) {
 80053e0:	4b56      	ldr	r3, [pc, #344]	@ (800553c <StartOnewireTask+0x1dc>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1e1      	bne.n	80053ac <StartOnewireTask+0x4c>
			}
			MG_INFO(("TempSensorCount = %d\r\n", TempSensorCount));
 80053e8:	4b56      	ldr	r3, [pc, #344]	@ (8005544 <StartOnewireTask+0x1e4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	dd0c      	ble.n	800540a <StartOnewireTask+0xaa>
 80053f0:	4b55      	ldr	r3, [pc, #340]	@ (8005548 <StartOnewireTask+0x1e8>)
 80053f2:	f240 429e 	movw	r2, #1182	@ 0x49e
 80053f6:	4955      	ldr	r1, [pc, #340]	@ (800554c <StartOnewireTask+0x1ec>)
 80053f8:	2002      	movs	r0, #2
 80053fa:	f006 fdfb 	bl	800bff4 <mg_log_prefix>
 80053fe:	4b4e      	ldr	r3, [pc, #312]	@ (8005538 <StartOnewireTask+0x1d8>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	4619      	mov	r1, r3
 8005404:	4852      	ldr	r0, [pc, #328]	@ (8005550 <StartOnewireTask+0x1f0>)
 8005406:	f006 fe45 	bl	800c094 <mg_log>

			if (TempSensorCount > 0)
 800540a:	4b4b      	ldr	r3, [pc, #300]	@ (8005538 <StartOnewireTask+0x1d8>)
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d106      	bne.n	8005420 <StartOnewireTask+0xc0>
				break;
			Ds18b20TryToFind--;
 8005412:	7bfb      	ldrb	r3, [r7, #15]
 8005414:	3b01      	subs	r3, #1
 8005416:	73fb      	strb	r3, [r7, #15]
		} while (Ds18b20TryToFind > 0);
 8005418:	7bfb      	ldrb	r3, [r7, #15]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1ab      	bne.n	8005376 <StartOnewireTask+0x16>
 800541e:	e000      	b.n	8005422 <StartOnewireTask+0xc2>
				break;
 8005420:	bf00      	nop
		//	if(Ds18b20TryToFind==0)
		//		vTaskDelete(Ds18b20Handle);
		for (uint8_t i = 0; i < TempSensorCount; i++) {
 8005422:	2300      	movs	r3, #0
 8005424:	73bb      	strb	r3, [r7, #14]
 8005426:	e019      	b.n	800545c <StartOnewireTask+0xfc>
			Ds18b20Delay(50);
 8005428:	2032      	movs	r0, #50	@ 0x32
 800542a:	f020 ffe3 	bl	80263f4 <osDelay>
			DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 800542e:	7bbb      	ldrb	r3, [r7, #14]
 8005430:	019b      	lsls	r3, r3, #6
 8005432:	4a43      	ldr	r2, [pc, #268]	@ (8005540 <StartOnewireTask+0x1e0>)
 8005434:	4413      	add	r3, r2
 8005436:	220c      	movs	r2, #12
 8005438:	4619      	mov	r1, r3
 800543a:	483e      	ldr	r0, [pc, #248]	@ (8005534 <StartOnewireTask+0x1d4>)
 800543c:	f7fd fcf8 	bl	8002e30 <DS18B20_SetResolution>
			Ds18b20Delay(50);
 8005440:	2032      	movs	r0, #50	@ 0x32
 8005442:	f020 ffd7 	bl	80263f4 <osDelay>
			DS18B20_DisableAlarmTemperature(&OneWire, ds18b20[i].Address);
 8005446:	7bbb      	ldrb	r3, [r7, #14]
 8005448:	019b      	lsls	r3, r3, #6
 800544a:	4a3d      	ldr	r2, [pc, #244]	@ (8005540 <StartOnewireTask+0x1e0>)
 800544c:	4413      	add	r3, r2
 800544e:	4619      	mov	r1, r3
 8005450:	4838      	ldr	r0, [pc, #224]	@ (8005534 <StartOnewireTask+0x1d4>)
 8005452:	f7fd fd8a 	bl	8002f6a <DS18B20_DisableAlarmTemperature>
		for (uint8_t i = 0; i < TempSensorCount; i++) {
 8005456:	7bbb      	ldrb	r3, [r7, #14]
 8005458:	3301      	adds	r3, #1
 800545a:	73bb      	strb	r3, [r7, #14]
 800545c:	4b36      	ldr	r3, [pc, #216]	@ (8005538 <StartOnewireTask+0x1d8>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	7bba      	ldrb	r2, [r7, #14]
 8005462:	429a      	cmp	r2, r3
 8005464:	d3e0      	bcc.n	8005428 <StartOnewireTask+0xc8>
		}
		/* Infinite loop */
		for (;;) {
			while (_DS18B20_UPDATE_INTERVAL_MS == 0) {
 8005466:	bf00      	nop
				if (Ds18b20StartConvert == 1)
					break;
				Ds18b20Delay(10);
			}
			Ds18b20Timeout = _DS18B20_CONVERT_TIMEOUT_MS / 10;
 8005468:	4b3a      	ldr	r3, [pc, #232]	@ (8005554 <StartOnewireTask+0x1f4>)
 800546a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800546e:	801a      	strh	r2, [r3, #0]
			DS18B20_StartAll(&OneWire);
 8005470:	4830      	ldr	r0, [pc, #192]	@ (8005534 <StartOnewireTask+0x1d4>)
 8005472:	f7fd fbc9 	bl	8002c08 <DS18B20_StartAll>
			osDelay(100);
 8005476:	2064      	movs	r0, #100	@ 0x64
 8005478:	f020 ffbc 	bl	80263f4 <osDelay>
			while (!DS18B20_AllDone(&OneWire)) {
 800547c:	e00c      	b.n	8005498 <StartOnewireTask+0x138>
				osDelay(10);
 800547e:	200a      	movs	r0, #10
 8005480:	f020 ffb8 	bl	80263f4 <osDelay>
				Ds18b20Timeout -= 1;
 8005484:	4b33      	ldr	r3, [pc, #204]	@ (8005554 <StartOnewireTask+0x1f4>)
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	4b31      	ldr	r3, [pc, #196]	@ (8005554 <StartOnewireTask+0x1f4>)
 800548e:	801a      	strh	r2, [r3, #0]
				if (Ds18b20Timeout == 0)
 8005490:	4b30      	ldr	r3, [pc, #192]	@ (8005554 <StartOnewireTask+0x1f4>)
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d006      	beq.n	80054a6 <StartOnewireTask+0x146>
			while (!DS18B20_AllDone(&OneWire)) {
 8005498:	4826      	ldr	r0, [pc, #152]	@ (8005534 <StartOnewireTask+0x1d4>)
 800549a:	f7fd fdc1 	bl	8003020 <DS18B20_AllDone>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0ec      	beq.n	800547e <StartOnewireTask+0x11e>
 80054a4:	e000      	b.n	80054a8 <StartOnewireTask+0x148>
					break;
 80054a6:	bf00      	nop
			}
			if (Ds18b20Timeout > 0) {
 80054a8:	4b2a      	ldr	r3, [pc, #168]	@ (8005554 <StartOnewireTask+0x1f4>)
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d025      	beq.n	80054fc <StartOnewireTask+0x19c>
				for (uint8_t i = 0; i < TempSensorCount; i++) {
 80054b0:	2300      	movs	r3, #0
 80054b2:	737b      	strb	r3, [r7, #13]
 80054b4:	e01c      	b.n	80054f0 <StartOnewireTask+0x190>
					osDelay(1000);	//300
 80054b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80054ba:	f020 ff9b 	bl	80263f4 <osDelay>
					ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 80054be:	7b7b      	ldrb	r3, [r7, #13]
 80054c0:	019b      	lsls	r3, r3, #6
 80054c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005540 <StartOnewireTask+0x1e0>)
 80054c4:	1899      	adds	r1, r3, r2
 80054c6:	7b7b      	ldrb	r3, [r7, #13]
 80054c8:	019b      	lsls	r3, r3, #6
 80054ca:	3308      	adds	r3, #8
 80054cc:	4a1c      	ldr	r2, [pc, #112]	@ (8005540 <StartOnewireTask+0x1e0>)
 80054ce:	4413      	add	r3, r2
 80054d0:	7b7c      	ldrb	r4, [r7, #13]
 80054d2:	461a      	mov	r2, r3
 80054d4:	4817      	ldr	r0, [pc, #92]	@ (8005534 <StartOnewireTask+0x1d4>)
 80054d6:	f7fd fbab 	bl	8002c30 <DS18B20_Read>
 80054da:	4603      	mov	r3, r0
 80054dc:	4619      	mov	r1, r3
 80054de:	4a18      	ldr	r2, [pc, #96]	@ (8005540 <StartOnewireTask+0x1e0>)
 80054e0:	01a3      	lsls	r3, r4, #6
 80054e2:	4413      	add	r3, r2
 80054e4:	330c      	adds	r3, #12
 80054e6:	460a      	mov	r2, r1
 80054e8:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < TempSensorCount; i++) {
 80054ea:	7b7b      	ldrb	r3, [r7, #13]
 80054ec:	3301      	adds	r3, #1
 80054ee:	737b      	strb	r3, [r7, #13]
 80054f0:	4b11      	ldr	r3, [pc, #68]	@ (8005538 <StartOnewireTask+0x1d8>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	7b7a      	ldrb	r2, [r7, #13]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d3dd      	bcc.n	80054b6 <StartOnewireTask+0x156>
 80054fa:	e011      	b.n	8005520 <StartOnewireTask+0x1c0>
				}
			} else {
				for (uint8_t i = 0; i < TempSensorCount; i++)
 80054fc:	2300      	movs	r3, #0
 80054fe:	733b      	strb	r3, [r7, #12]
 8005500:	e009      	b.n	8005516 <StartOnewireTask+0x1b6>
					ds18b20[i].DataIsValid = false;
 8005502:	7b3b      	ldrb	r3, [r7, #12]
 8005504:	4a0e      	ldr	r2, [pc, #56]	@ (8005540 <StartOnewireTask+0x1e0>)
 8005506:	019b      	lsls	r3, r3, #6
 8005508:	4413      	add	r3, r2
 800550a:	330c      	adds	r3, #12
 800550c:	2200      	movs	r2, #0
 800550e:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < TempSensorCount; i++)
 8005510:	7b3b      	ldrb	r3, [r7, #12]
 8005512:	3301      	adds	r3, #1
 8005514:	733b      	strb	r3, [r7, #12]
 8005516:	4b08      	ldr	r3, [pc, #32]	@ (8005538 <StartOnewireTask+0x1d8>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	7b3a      	ldrb	r2, [r7, #12]
 800551c:	429a      	cmp	r2, r3
 800551e:	d3f0      	bcc.n	8005502 <StartOnewireTask+0x1a2>
			}
			Ds18b20StartConvert = 0;
 8005520:	4b0d      	ldr	r3, [pc, #52]	@ (8005558 <StartOnewireTask+0x1f8>)
 8005522:	2200      	movs	r2, #0
 8005524:	701a      	strb	r2, [r3, #0]
			osDelay(500);	//_DS18B20_UPDATE_INTERVAL_MS
 8005526:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800552a:	f020 ff63 	bl	80263f4 <osDelay>
			while (_DS18B20_UPDATE_INTERVAL_MS == 0) {
 800552e:	e79a      	b.n	8005466 <StartOnewireTask+0x106>
 8005530:	40020000 	.word	0x40020000
 8005534:	2000ed60 	.word	0x2000ed60
 8005538:	2000ed75 	.word	0x2000ed75
 800553c:	2000ed74 	.word	0x2000ed74
 8005540:	2000ec20 	.word	0x2000ec20
 8005544:	20000244 	.word	0x20000244
 8005548:	080325e4 	.word	0x080325e4
 800554c:	0802ece0 	.word	0x0802ece0
 8005550:	0802ef8c 	.word	0x0802ef8c
 8005554:	2000ed78 	.word	0x2000ed78
 8005558:	2000ed76 	.word	0x2000ed76

0800555c <StartEncoderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 800555c:	b590      	push	{r4, r7, lr}
 800555e:	f5ad 7d0d 	sub.w	sp, sp, #564	@ 0x234
 8005562:	af00      	add	r7, sp, #0
 8005564:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005568:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800556c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartEncoderTask */
	ulTaskNotifyTake(0, portMAX_DELAY);
 800556e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005572:	2000      	movs	r0, #0
 8005574:	f023 fbd2 	bl	8028d1c <ulTaskNotifyTake>
//	MG_INFO(("Start 'Encoder' task \r\n"));
	uint8_t pinb = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	f887 322d 	strb.w	r3, [r7, #557]	@ 0x22d
	uint32_t millis;
	uint32_t pinTimes[NUMPIN] = { 0 };
 800557e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005582:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005586:	4618      	mov	r0, r3
 8005588:	f44f 73b2 	mov.w	r3, #356	@ 0x164
 800558c:	461a      	mov	r2, r3
 800558e:	2100      	movs	r1, #0
 8005590:	f026 fabc 	bl	802bb0c <memset>
	uint8_t prev_A[NUMPIN] = { 0, };
 8005594:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005598:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	3304      	adds	r3, #4
 80055a2:	2255      	movs	r2, #85	@ 0x55
 80055a4:	2100      	movs	r1, #0
 80055a6:	4618      	mov	r0, r3
 80055a8:	f026 fab0 	bl	802bb0c <memset>
	uint8_t prev_B[NUMPIN] = { 0, };
 80055ac:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80055b0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	3304      	adds	r3, #4
 80055ba:	2255      	movs	r2, #85	@ 0x55
 80055bc:	2100      	movs	r1, #0
 80055be:	4618      	mov	r0, r3
 80055c0:	f026 faa4 	bl	802bb0c <memset>
	uint8_t i = 0;
 80055c4:	2300      	movs	r3, #0
 80055c6:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
	uint8_t a = 0;
 80055ca:	2300      	movs	r3, #0
 80055cc:	f887 322e 	strb.w	r3, [r7, #558]	@ 0x22e
	uint8_t pwm = 0;
 80055d0:	2300      	movs	r3, #0
 80055d2:	f887 322c 	strb.w	r3, [r7, #556]	@ 0x22c
	/* Infinite loop */
	for (;;) {
		millis = HAL_GetTick();
 80055d6:	f012 fff7 	bl	80185c8 <HAL_GetTick>
 80055da:	f8c7 0228 	str.w	r0, [r7, #552]	@ 0x228
		for (i = 0; i < NUMPIN; i++) {
 80055de:	2300      	movs	r3, #0
 80055e0:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
 80055e4:	f000 bc1d 	b.w	8005e22 <StartEncoderTask+0x8c6>
			if (PinsConf[i].topin == 8) {   // EncodrerA
 80055e8:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 80055ec:	4ad1      	ldr	r2, [pc, #836]	@ (8005934 <StartEncoderTask+0x3d8>)
 80055ee:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80055f2:	fb01 f303 	mul.w	r3, r1, r3
 80055f6:	4413      	add	r3, r2
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b08      	cmp	r3, #8
 80055fc:	f040 840c 	bne.w	8005e18 <StartEncoderTask+0x8bc>
				pinb = PinsConf[i].encoderb;   // EncodrerB
 8005600:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8005604:	4acb      	ldr	r2, [pc, #812]	@ (8005934 <StartEncoderTask+0x3d8>)
 8005606:	f44f 7118 	mov.w	r1, #608	@ 0x260
 800560a:	fb01 f303 	mul.w	r3, r1, r3
 800560e:	4413      	add	r3, r2
 8005610:	f203 2311 	addw	r3, r3, #529	@ 0x211
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	f887 322d 	strb.w	r3, [r7, #557]	@ 0x22d
				if (pinb != 0) {
 800561a:	f897 322d 	ldrb.w	r3, [r7, #557]	@ 0x22d
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 83fa 	beq.w	8005e18 <StartEncoderTask+0x8bc>
					pinb = pinb - 1;
 8005624:	f897 322d 	ldrb.w	r3, [r7, #557]	@ 0x22d
 8005628:	3b01      	subs	r3, #1
 800562a:	f887 322d 	strb.w	r3, [r7, #557]	@ 0x22d
					if (millis - pinTimes[i] >= DEBOUNCE_DELAY) { // игнорируем дребезг
 800562e:	f897 222f 	ldrb.w	r2, [r7, #559]	@ 0x22f
 8005632:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005636:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800563a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800563e:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b2c      	cmp	r3, #44	@ 0x2c
 8005646:	f240 83e7 	bls.w	8005e18 <StartEncoderTask+0x8bc>
						PinsConf[i].on = HAL_GPIO_ReadPin(PinsInfo[i].gpio_name, PinsInfo[i].hal_pin);
 800564a:	f897 222f 	ldrb.w	r2, [r7, #559]	@ 0x22f
 800564e:	49ba      	ldr	r1, [pc, #744]	@ (8005938 <StartEncoderTask+0x3dc>)
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	440b      	add	r3, r1
 800565a:	3310      	adds	r3, #16
 800565c:	6818      	ldr	r0, [r3, #0]
 800565e:	f897 222f 	ldrb.w	r2, [r7, #559]	@ 0x22f
 8005662:	49b5      	ldr	r1, [pc, #724]	@ (8005938 <StartEncoderTask+0x3dc>)
 8005664:	4613      	mov	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	440b      	add	r3, r1
 800566e:	330c      	adds	r3, #12
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	f897 422f 	ldrb.w	r4, [r7, #559]	@ 0x22f
 8005676:	4619      	mov	r1, r3
 8005678:	f013 febe 	bl	80193f8 <HAL_GPIO_ReadPin>
 800567c:	4603      	mov	r3, r0
 800567e:	4619      	mov	r1, r3
 8005680:	4aac      	ldr	r2, [pc, #688]	@ (8005934 <StartEncoderTask+0x3d8>)
 8005682:	f44f 7318 	mov.w	r3, #608	@ 0x260
 8005686:	fb04 f303 	mul.w	r3, r4, r3
 800568a:	4413      	add	r3, r2
 800568c:	3308      	adds	r3, #8
 800568e:	460a      	mov	r2, r1
 8005690:	701a      	strb	r2, [r3, #0]
						osDelay(3);
 8005692:	2003      	movs	r0, #3
 8005694:	f020 feae 	bl	80263f4 <osDelay>
						PinsConf[pinb].on = HAL_GPIO_ReadPin(PinsInfo[pinb].gpio_name, PinsInfo[pinb].hal_pin);
 8005698:	f897 222d 	ldrb.w	r2, [r7, #557]	@ 0x22d
 800569c:	49a6      	ldr	r1, [pc, #664]	@ (8005938 <StartEncoderTask+0x3dc>)
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	440b      	add	r3, r1
 80056a8:	3310      	adds	r3, #16
 80056aa:	6818      	ldr	r0, [r3, #0]
 80056ac:	f897 222d 	ldrb.w	r2, [r7, #557]	@ 0x22d
 80056b0:	49a1      	ldr	r1, [pc, #644]	@ (8005938 <StartEncoderTask+0x3dc>)
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	440b      	add	r3, r1
 80056bc:	330c      	adds	r3, #12
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	f897 422d 	ldrb.w	r4, [r7, #557]	@ 0x22d
 80056c4:	4619      	mov	r1, r3
 80056c6:	f013 fe97 	bl	80193f8 <HAL_GPIO_ReadPin>
 80056ca:	4603      	mov	r3, r0
 80056cc:	4619      	mov	r1, r3
 80056ce:	4a99      	ldr	r2, [pc, #612]	@ (8005934 <StartEncoderTask+0x3d8>)
 80056d0:	f44f 7318 	mov.w	r3, #608	@ 0x260
 80056d4:	fb04 f303 	mul.w	r3, r4, r3
 80056d8:	4413      	add	r3, r2
 80056da:	3308      	adds	r3, #8
 80056dc:	460a      	mov	r2, r1
 80056de:	701a      	strb	r2, [r3, #0]
						if (PinsConf[i].on != prev_A[i] || PinsConf[pinb].on != prev_B[pinb]) { //Если состояние изменилось
 80056e0:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 80056e4:	4a93      	ldr	r2, [pc, #588]	@ (8005934 <StartEncoderTask+0x3d8>)
 80056e6:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80056ea:	fb01 f303 	mul.w	r3, r1, r3
 80056ee:	4413      	add	r3, r2
 80056f0:	3308      	adds	r3, #8
 80056f2:	781a      	ldrb	r2, [r3, #0]
 80056f4:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 80056f8:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80056fc:	f5a1 71e4 	sub.w	r1, r1, #456	@ 0x1c8
 8005700:	5ccb      	ldrb	r3, [r1, r3]
 8005702:	429a      	cmp	r2, r3
 8005704:	d113      	bne.n	800572e <StartEncoderTask+0x1d2>
 8005706:	f897 322d 	ldrb.w	r3, [r7, #557]	@ 0x22d
 800570a:	4a8a      	ldr	r2, [pc, #552]	@ (8005934 <StartEncoderTask+0x3d8>)
 800570c:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005710:	fb01 f303 	mul.w	r3, r1, r3
 8005714:	4413      	add	r3, r2
 8005716:	3308      	adds	r3, #8
 8005718:	781a      	ldrb	r2, [r3, #0]
 800571a:	f897 322d 	ldrb.w	r3, [r7, #557]	@ 0x22d
 800571e:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8005722:	f5a1 7109 	sub.w	r1, r1, #548	@ 0x224
 8005726:	5ccb      	ldrb	r3, [r1, r3]
 8005728:	429a      	cmp	r2, r3
 800572a:	f000 8375 	beq.w	8005e18 <StartEncoderTask+0x8bc>
							pinTimes[i] = millis; // Сбрасываем дребезг
 800572e:	f897 222f 	ldrb.w	r2, [r7, #559]	@ 0x22f
 8005732:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005736:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800573a:	f8d7 1228 	ldr.w	r1, [r7, #552]	@ 0x228
 800573e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							if (PinsConf[i].on == 1 && PinsConf[pinb].on == 0) { // A && B
 8005742:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8005746:	4a7b      	ldr	r2, [pc, #492]	@ (8005934 <StartEncoderTask+0x3d8>)
 8005748:	f44f 7118 	mov.w	r1, #608	@ 0x260
 800574c:	fb01 f303 	mul.w	r3, r1, r3
 8005750:	4413      	add	r3, r2
 8005752:	3308      	adds	r3, #8
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b01      	cmp	r3, #1
 8005758:	f040 8197 	bne.w	8005a8a <StartEncoderTask+0x52e>
 800575c:	f897 322d 	ldrb.w	r3, [r7, #557]	@ 0x22d
 8005760:	4a74      	ldr	r2, [pc, #464]	@ (8005934 <StartEncoderTask+0x3d8>)
 8005762:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005766:	fb01 f303 	mul.w	r3, r1, r3
 800576a:	4413      	add	r3, r2
 800576c:	3308      	adds	r3, #8
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	f040 818a 	bne.w	8005a8a <StartEncoderTask+0x52e>
								MG_INFO(("ID:%d  A = %d & B = %d\r\n",i, PinsConf[i].on, PinsConf[pinb].on));
 8005776:	4b71      	ldr	r3, [pc, #452]	@ (800593c <StartEncoderTask+0x3e0>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b01      	cmp	r3, #1
 800577c:	dd21      	ble.n	80057c2 <StartEncoderTask+0x266>
 800577e:	4b70      	ldr	r3, [pc, #448]	@ (8005940 <StartEncoderTask+0x3e4>)
 8005780:	f240 42ee 	movw	r2, #1262	@ 0x4ee
 8005784:	496f      	ldr	r1, [pc, #444]	@ (8005944 <StartEncoderTask+0x3e8>)
 8005786:	2002      	movs	r0, #2
 8005788:	f006 fc34 	bl	800bff4 <mg_log_prefix>
 800578c:	f897 122f 	ldrb.w	r1, [r7, #559]	@ 0x22f
 8005790:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8005794:	4a67      	ldr	r2, [pc, #412]	@ (8005934 <StartEncoderTask+0x3d8>)
 8005796:	f44f 7018 	mov.w	r0, #608	@ 0x260
 800579a:	fb00 f303 	mul.w	r3, r0, r3
 800579e:	4413      	add	r3, r2
 80057a0:	3308      	adds	r3, #8
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	461c      	mov	r4, r3
 80057a6:	f897 322d 	ldrb.w	r3, [r7, #557]	@ 0x22d
 80057aa:	4a62      	ldr	r2, [pc, #392]	@ (8005934 <StartEncoderTask+0x3d8>)
 80057ac:	f44f 7018 	mov.w	r0, #608	@ 0x260
 80057b0:	fb00 f303 	mul.w	r3, r0, r3
 80057b4:	4413      	add	r3, r2
 80057b6:	3308      	adds	r3, #8
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	4622      	mov	r2, r4
 80057bc:	4862      	ldr	r0, [pc, #392]	@ (8005948 <StartEncoderTask+0x3ec>)
 80057be:	f006 fc69 	bl	800c094 <mg_log>
								for (a = 0; a < NUMPINLINKS; a++) {
 80057c2:	2300      	movs	r3, #0
 80057c4:	f887 322e 	strb.w	r3, [r7, #558]	@ 0x22e
 80057c8:	e159      	b.n	8005a7e <StartEncoderTask+0x522>
									if (PinsLinks[a].idin == i) { // A
 80057ca:	f897 222e 	ldrb.w	r2, [r7, #558]	@ 0x22e
 80057ce:	495f      	ldr	r1, [pc, #380]	@ (800594c <StartEncoderTask+0x3f0>)
 80057d0:	4613      	mov	r3, r2
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	4413      	add	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	440b      	add	r3, r1
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 80057e0:	429a      	cmp	r2, r3
 80057e2:	f040 8147 	bne.w	8005a74 <StartEncoderTask+0x518>
										pwm = PinsLinks[a].idout; // B
 80057e6:	f897 222e 	ldrb.w	r2, [r7, #558]	@ 0x22e
 80057ea:	4958      	ldr	r1, [pc, #352]	@ (800594c <StartEncoderTask+0x3f0>)
 80057ec:	4613      	mov	r3, r2
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	4413      	add	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	440b      	add	r3, r1
 80057f6:	3304      	adds	r3, #4
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f887 322c 	strb.w	r3, [r7, #556]	@ 0x22c
										if (PinsConf[pwm].topin == 5) { // PWM
 80057fe:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005802:	4a4c      	ldr	r2, [pc, #304]	@ (8005934 <StartEncoderTask+0x3d8>)
 8005804:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005808:	fb01 f303 	mul.w	r3, r1, r3
 800580c:	4413      	add	r3, r2
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b05      	cmp	r3, #5
 8005812:	f040 812f 	bne.w	8005a74 <StartEncoderTask+0x518>
											PinsConf[pwm].dvalue = (int) HAL_TIM_ReadCapturedValue(&htim[pwm], PinsInfo[pwm].tim_channel);
 8005816:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 800581a:	224c      	movs	r2, #76	@ 0x4c
 800581c:	fb02 f303 	mul.w	r3, r2, r3
 8005820:	4a4b      	ldr	r2, [pc, #300]	@ (8005950 <StartEncoderTask+0x3f4>)
 8005822:	1898      	adds	r0, r3, r2
 8005824:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 8005828:	4943      	ldr	r1, [pc, #268]	@ (8005938 <StartEncoderTask+0x3dc>)
 800582a:	4613      	mov	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	440b      	add	r3, r1
 8005834:	3320      	adds	r3, #32
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4619      	mov	r1, r3
 800583a:	f017 fed3 	bl	801d5e4 <HAL_TIM_ReadCapturedValue>
 800583e:	4602      	mov	r2, r0
 8005840:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005844:	4610      	mov	r0, r2
 8005846:	4a3b      	ldr	r2, [pc, #236]	@ (8005934 <StartEncoderTask+0x3d8>)
 8005848:	f44f 7118 	mov.w	r1, #608	@ 0x260
 800584c:	fb01 f303 	mul.w	r3, r1, r3
 8005850:	4413      	add	r3, r2
 8005852:	330c      	adds	r3, #12
 8005854:	6018      	str	r0, [r3, #0]
											PinsConf[pwm].dvalue -= 1;
 8005856:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 800585a:	4a36      	ldr	r2, [pc, #216]	@ (8005934 <StartEncoderTask+0x3d8>)
 800585c:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005860:	fb01 f303 	mul.w	r3, r1, r3
 8005864:	4413      	add	r3, r2
 8005866:	330c      	adds	r3, #12
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 800586e:	3a01      	subs	r2, #1
 8005870:	4930      	ldr	r1, [pc, #192]	@ (8005934 <StartEncoderTask+0x3d8>)
 8005872:	f44f 7018 	mov.w	r0, #608	@ 0x260
 8005876:	fb00 f303 	mul.w	r3, r0, r3
 800587a:	440b      	add	r3, r1
 800587c:	330c      	adds	r3, #12
 800587e:	601a      	str	r2, [r3, #0]
											if (PinsConf[pwm].dvalue <= 0) {
 8005880:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005884:	4a2b      	ldr	r2, [pc, #172]	@ (8005934 <StartEncoderTask+0x3d8>)
 8005886:	f44f 7118 	mov.w	r1, #608	@ 0x260
 800588a:	fb01 f303 	mul.w	r3, r1, r3
 800588e:	4413      	add	r3, r2
 8005890:	330c      	adds	r3, #12
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	dc0a      	bgt.n	80058ae <StartEncoderTask+0x352>
												PinsConf[pwm].dvalue = 0;
 8005898:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 800589c:	4a25      	ldr	r2, [pc, #148]	@ (8005934 <StartEncoderTask+0x3d8>)
 800589e:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80058a2:	fb01 f303 	mul.w	r3, r1, r3
 80058a6:	4413      	add	r3, r2
 80058a8:	330c      	adds	r3, #12
 80058aa:	2200      	movs	r2, #0
 80058ac:	601a      	str	r2, [r3, #0]
											}
											__HAL_TIM_SET_COMPARE(&htim[pwm], PinsInfo[pwm].tim_channel, PinsConf[pwm].dvalue);
 80058ae:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 80058b2:	4921      	ldr	r1, [pc, #132]	@ (8005938 <StartEncoderTask+0x3dc>)
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	440b      	add	r3, r1
 80058be:	3320      	adds	r3, #32
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d114      	bne.n	80058f0 <StartEncoderTask+0x394>
 80058c6:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 80058ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005934 <StartEncoderTask+0x3d8>)
 80058cc:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80058d0:	fb01 f303 	mul.w	r3, r1, r3
 80058d4:	4413      	add	r3, r2
 80058d6:	330c      	adds	r3, #12
 80058d8:	6818      	ldr	r0, [r3, #0]
 80058da:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 80058de:	4a1c      	ldr	r2, [pc, #112]	@ (8005950 <StartEncoderTask+0x3f4>)
 80058e0:	214c      	movs	r1, #76	@ 0x4c
 80058e2:	fb01 f303 	mul.w	r3, r1, r3
 80058e6:	4413      	add	r3, r2
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4602      	mov	r2, r0
 80058ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80058ee:	e0a8      	b.n	8005a42 <StartEncoderTask+0x4e6>
 80058f0:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 80058f4:	4910      	ldr	r1, [pc, #64]	@ (8005938 <StartEncoderTask+0x3dc>)
 80058f6:	4613      	mov	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	440b      	add	r3, r1
 8005900:	3320      	adds	r3, #32
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b04      	cmp	r3, #4
 8005906:	d125      	bne.n	8005954 <StartEncoderTask+0x3f8>
 8005908:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 800590c:	4a09      	ldr	r2, [pc, #36]	@ (8005934 <StartEncoderTask+0x3d8>)
 800590e:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005912:	fb01 f303 	mul.w	r3, r1, r3
 8005916:	4413      	add	r3, r2
 8005918:	330c      	adds	r3, #12
 800591a:	6818      	ldr	r0, [r3, #0]
 800591c:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005920:	4a0b      	ldr	r2, [pc, #44]	@ (8005950 <StartEncoderTask+0x3f4>)
 8005922:	214c      	movs	r1, #76	@ 0x4c
 8005924:	fb01 f303 	mul.w	r3, r1, r3
 8005928:	4413      	add	r3, r2
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	4603      	mov	r3, r0
 800592e:	6393      	str	r3, [r2, #56]	@ 0x38
 8005930:	e087      	b.n	8005a42 <StartEncoderTask+0x4e6>
 8005932:	bf00      	nop
 8005934:	2000066c 	.word	0x2000066c
 8005938:	08031670 	.word	0x08031670
 800593c:	20000244 	.word	0x20000244
 8005940:	080325f8 	.word	0x080325f8
 8005944:	0802ece0 	.word	0x0802ece0
 8005948:	0802efa4 	.word	0x0802efa4
 800594c:	2000d9cc 	.word	0x2000d9cc
 8005950:	2000ed90 	.word	0x2000ed90
 8005954:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 8005958:	49c8      	ldr	r1, [pc, #800]	@ (8005c7c <StartEncoderTask+0x720>)
 800595a:	4613      	mov	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	440b      	add	r3, r1
 8005964:	3320      	adds	r3, #32
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b08      	cmp	r3, #8
 800596a:	d114      	bne.n	8005996 <StartEncoderTask+0x43a>
 800596c:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005970:	4ac3      	ldr	r2, [pc, #780]	@ (8005c80 <StartEncoderTask+0x724>)
 8005972:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005976:	fb01 f303 	mul.w	r3, r1, r3
 800597a:	4413      	add	r3, r2
 800597c:	330c      	adds	r3, #12
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005984:	4abf      	ldr	r2, [pc, #764]	@ (8005c84 <StartEncoderTask+0x728>)
 8005986:	214c      	movs	r1, #76	@ 0x4c
 8005988:	fb01 f303 	mul.w	r3, r1, r3
 800598c:	4413      	add	r3, r2
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	4603      	mov	r3, r0
 8005992:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8005994:	e055      	b.n	8005a42 <StartEncoderTask+0x4e6>
 8005996:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 800599a:	49b8      	ldr	r1, [pc, #736]	@ (8005c7c <StartEncoderTask+0x720>)
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	440b      	add	r3, r1
 80059a6:	3320      	adds	r3, #32
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b0c      	cmp	r3, #12
 80059ac:	d114      	bne.n	80059d8 <StartEncoderTask+0x47c>
 80059ae:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 80059b2:	4ab3      	ldr	r2, [pc, #716]	@ (8005c80 <StartEncoderTask+0x724>)
 80059b4:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80059b8:	fb01 f303 	mul.w	r3, r1, r3
 80059bc:	4413      	add	r3, r2
 80059be:	330c      	adds	r3, #12
 80059c0:	6818      	ldr	r0, [r3, #0]
 80059c2:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 80059c6:	4aaf      	ldr	r2, [pc, #700]	@ (8005c84 <StartEncoderTask+0x728>)
 80059c8:	214c      	movs	r1, #76	@ 0x4c
 80059ca:	fb01 f303 	mul.w	r3, r1, r3
 80059ce:	4413      	add	r3, r2
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	4603      	mov	r3, r0
 80059d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80059d6:	e034      	b.n	8005a42 <StartEncoderTask+0x4e6>
 80059d8:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 80059dc:	49a7      	ldr	r1, [pc, #668]	@ (8005c7c <StartEncoderTask+0x720>)
 80059de:	4613      	mov	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	440b      	add	r3, r1
 80059e8:	3320      	adds	r3, #32
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b10      	cmp	r3, #16
 80059ee:	d114      	bne.n	8005a1a <StartEncoderTask+0x4be>
 80059f0:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 80059f4:	4aa2      	ldr	r2, [pc, #648]	@ (8005c80 <StartEncoderTask+0x724>)
 80059f6:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80059fa:	fb01 f303 	mul.w	r3, r1, r3
 80059fe:	4413      	add	r3, r2
 8005a00:	330c      	adds	r3, #12
 8005a02:	6818      	ldr	r0, [r3, #0]
 8005a04:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005a08:	4a9e      	ldr	r2, [pc, #632]	@ (8005c84 <StartEncoderTask+0x728>)
 8005a0a:	214c      	movs	r1, #76	@ 0x4c
 8005a0c:	fb01 f303 	mul.w	r3, r1, r3
 8005a10:	4413      	add	r3, r2
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	4603      	mov	r3, r0
 8005a16:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a18:	e013      	b.n	8005a42 <StartEncoderTask+0x4e6>
 8005a1a:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005a1e:	4a98      	ldr	r2, [pc, #608]	@ (8005c80 <StartEncoderTask+0x724>)
 8005a20:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005a24:	fb01 f303 	mul.w	r3, r1, r3
 8005a28:	4413      	add	r3, r2
 8005a2a:	330c      	adds	r3, #12
 8005a2c:	6818      	ldr	r0, [r3, #0]
 8005a2e:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005a32:	4a94      	ldr	r2, [pc, #592]	@ (8005c84 <StartEncoderTask+0x728>)
 8005a34:	214c      	movs	r1, #76	@ 0x4c
 8005a36:	fb01 f303 	mul.w	r3, r1, r3
 8005a3a:	4413      	add	r3, r2
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	4603      	mov	r3, r0
 8005a40:	65d3      	str	r3, [r2, #92]	@ 0x5c
											MG_INFO(("PWM = %d\r\n", PinsConf[pwm].dvalue));
 8005a42:	4b91      	ldr	r3, [pc, #580]	@ (8005c88 <StartEncoderTask+0x72c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	dd14      	ble.n	8005a74 <StartEncoderTask+0x518>
 8005a4a:	4b90      	ldr	r3, [pc, #576]	@ (8005c8c <StartEncoderTask+0x730>)
 8005a4c:	f240 42f9 	movw	r2, #1273	@ 0x4f9
 8005a50:	498f      	ldr	r1, [pc, #572]	@ (8005c90 <StartEncoderTask+0x734>)
 8005a52:	2002      	movs	r0, #2
 8005a54:	f006 face 	bl	800bff4 <mg_log_prefix>
 8005a58:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005a5c:	4a88      	ldr	r2, [pc, #544]	@ (8005c80 <StartEncoderTask+0x724>)
 8005a5e:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005a62:	fb01 f303 	mul.w	r3, r1, r3
 8005a66:	4413      	add	r3, r2
 8005a68:	330c      	adds	r3, #12
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4889      	ldr	r0, [pc, #548]	@ (8005c94 <StartEncoderTask+0x738>)
 8005a70:	f006 fb10 	bl	800c094 <mg_log>
								for (a = 0; a < NUMPINLINKS; a++) {
 8005a74:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8005a78:	3301      	adds	r3, #1
 8005a7a:	f887 322e 	strb.w	r3, [r7, #558]	@ 0x22e
 8005a7e:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8005a82:	2b63      	cmp	r3, #99	@ 0x63
 8005a84:	f67f aea1 	bls.w	80057ca <StartEncoderTask+0x26e>
							if (PinsConf[i].on == 1 && PinsConf[pinb].on == 0) { // A && B
 8005a88:	e1a4      	b.n	8005dd4 <StartEncoderTask+0x878>
										}
									}
								}
							} else if (PinsConf[i].on == 0 && PinsConf[pinb].on == 1) { // A && B
 8005a8a:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8005a8e:	4a7c      	ldr	r2, [pc, #496]	@ (8005c80 <StartEncoderTask+0x724>)
 8005a90:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005a94:	fb01 f303 	mul.w	r3, r1, r3
 8005a98:	4413      	add	r3, r2
 8005a9a:	3308      	adds	r3, #8
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f040 8198 	bne.w	8005dd4 <StartEncoderTask+0x878>
 8005aa4:	f897 322d 	ldrb.w	r3, [r7, #557]	@ 0x22d
 8005aa8:	4a75      	ldr	r2, [pc, #468]	@ (8005c80 <StartEncoderTask+0x724>)
 8005aaa:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005aae:	fb01 f303 	mul.w	r3, r1, r3
 8005ab2:	4413      	add	r3, r2
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	f040 818b 	bne.w	8005dd4 <StartEncoderTask+0x878>
								MG_INFO(("ID:%d  A = %d & B = %d\r\n",i, PinsConf[i].on, PinsConf[pinb].on));
 8005abe:	4b72      	ldr	r3, [pc, #456]	@ (8005c88 <StartEncoderTask+0x72c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	dd21      	ble.n	8005b0a <StartEncoderTask+0x5ae>
 8005ac6:	4b71      	ldr	r3, [pc, #452]	@ (8005c8c <StartEncoderTask+0x730>)
 8005ac8:	f240 42fe 	movw	r2, #1278	@ 0x4fe
 8005acc:	4970      	ldr	r1, [pc, #448]	@ (8005c90 <StartEncoderTask+0x734>)
 8005ace:	2002      	movs	r0, #2
 8005ad0:	f006 fa90 	bl	800bff4 <mg_log_prefix>
 8005ad4:	f897 122f 	ldrb.w	r1, [r7, #559]	@ 0x22f
 8005ad8:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8005adc:	4a68      	ldr	r2, [pc, #416]	@ (8005c80 <StartEncoderTask+0x724>)
 8005ade:	f44f 7018 	mov.w	r0, #608	@ 0x260
 8005ae2:	fb00 f303 	mul.w	r3, r0, r3
 8005ae6:	4413      	add	r3, r2
 8005ae8:	3308      	adds	r3, #8
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	461c      	mov	r4, r3
 8005aee:	f897 322d 	ldrb.w	r3, [r7, #557]	@ 0x22d
 8005af2:	4a63      	ldr	r2, [pc, #396]	@ (8005c80 <StartEncoderTask+0x724>)
 8005af4:	f44f 7018 	mov.w	r0, #608	@ 0x260
 8005af8:	fb00 f303 	mul.w	r3, r0, r3
 8005afc:	4413      	add	r3, r2
 8005afe:	3308      	adds	r3, #8
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	4622      	mov	r2, r4
 8005b04:	4864      	ldr	r0, [pc, #400]	@ (8005c98 <StartEncoderTask+0x73c>)
 8005b06:	f006 fac5 	bl	800c094 <mg_log>
								for (a = 0; a < NUMPINLINKS; a++) {
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f887 322e 	strb.w	r3, [r7, #558]	@ 0x22e
 8005b10:	e15b      	b.n	8005dca <StartEncoderTask+0x86e>
									if (PinsLinks[a].idin == i) { // A
 8005b12:	f897 222e 	ldrb.w	r2, [r7, #558]	@ 0x22e
 8005b16:	4961      	ldr	r1, [pc, #388]	@ (8005c9c <StartEncoderTask+0x740>)
 8005b18:	4613      	mov	r3, r2
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	f040 8149 	bne.w	8005dc0 <StartEncoderTask+0x864>
										pwm = PinsLinks[a].idout; // B
 8005b2e:	f897 222e 	ldrb.w	r2, [r7, #558]	@ 0x22e
 8005b32:	495a      	ldr	r1, [pc, #360]	@ (8005c9c <StartEncoderTask+0x740>)
 8005b34:	4613      	mov	r3, r2
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	4413      	add	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	3304      	adds	r3, #4
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f887 322c 	strb.w	r3, [r7, #556]	@ 0x22c
										if (PinsConf[pwm].topin == 5) { // PWM
 8005b46:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005b4a:	4a4d      	ldr	r2, [pc, #308]	@ (8005c80 <StartEncoderTask+0x724>)
 8005b4c:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005b50:	fb01 f303 	mul.w	r3, r1, r3
 8005b54:	4413      	add	r3, r2
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b05      	cmp	r3, #5
 8005b5a:	f040 8131 	bne.w	8005dc0 <StartEncoderTask+0x864>
											PinsConf[pwm].dvalue = (int) HAL_TIM_ReadCapturedValue(&htim[pwm], PinsInfo[pwm].tim_channel);
 8005b5e:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005b62:	224c      	movs	r2, #76	@ 0x4c
 8005b64:	fb02 f303 	mul.w	r3, r2, r3
 8005b68:	4a46      	ldr	r2, [pc, #280]	@ (8005c84 <StartEncoderTask+0x728>)
 8005b6a:	1898      	adds	r0, r3, r2
 8005b6c:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 8005b70:	4942      	ldr	r1, [pc, #264]	@ (8005c7c <StartEncoderTask+0x720>)
 8005b72:	4613      	mov	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	440b      	add	r3, r1
 8005b7c:	3320      	adds	r3, #32
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4619      	mov	r1, r3
 8005b82:	f017 fd2f 	bl	801d5e4 <HAL_TIM_ReadCapturedValue>
 8005b86:	4602      	mov	r2, r0
 8005b88:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	4a3c      	ldr	r2, [pc, #240]	@ (8005c80 <StartEncoderTask+0x724>)
 8005b90:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005b94:	fb01 f303 	mul.w	r3, r1, r3
 8005b98:	4413      	add	r3, r2
 8005b9a:	330c      	adds	r3, #12
 8005b9c:	6018      	str	r0, [r3, #0]
											PinsConf[pwm].dvalue += 1;
 8005b9e:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005ba2:	4a37      	ldr	r2, [pc, #220]	@ (8005c80 <StartEncoderTask+0x724>)
 8005ba4:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005ba8:	fb01 f303 	mul.w	r3, r1, r3
 8005bac:	4413      	add	r3, r2
 8005bae:	330c      	adds	r3, #12
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005bb6:	3201      	adds	r2, #1
 8005bb8:	4931      	ldr	r1, [pc, #196]	@ (8005c80 <StartEncoderTask+0x724>)
 8005bba:	f44f 7018 	mov.w	r0, #608	@ 0x260
 8005bbe:	fb00 f303 	mul.w	r3, r0, r3
 8005bc2:	440b      	add	r3, r1
 8005bc4:	330c      	adds	r3, #12
 8005bc6:	601a      	str	r2, [r3, #0]
											if (PinsConf[pwm].dvalue >= 100) {
 8005bc8:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005bcc:	4a2c      	ldr	r2, [pc, #176]	@ (8005c80 <StartEncoderTask+0x724>)
 8005bce:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005bd2:	fb01 f303 	mul.w	r3, r1, r3
 8005bd6:	4413      	add	r3, r2
 8005bd8:	330c      	adds	r3, #12
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b63      	cmp	r3, #99	@ 0x63
 8005bde:	dd0a      	ble.n	8005bf6 <StartEncoderTask+0x69a>
												PinsConf[pwm].dvalue = 100;
 8005be0:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005be4:	4a26      	ldr	r2, [pc, #152]	@ (8005c80 <StartEncoderTask+0x724>)
 8005be6:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005bea:	fb01 f303 	mul.w	r3, r1, r3
 8005bee:	4413      	add	r3, r2
 8005bf0:	330c      	adds	r3, #12
 8005bf2:	2264      	movs	r2, #100	@ 0x64
 8005bf4:	601a      	str	r2, [r3, #0]
											}
											__HAL_TIM_SET_COMPARE(&htim[pwm], PinsInfo[pwm].tim_channel, PinsConf[pwm].dvalue);
 8005bf6:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 8005bfa:	4920      	ldr	r1, [pc, #128]	@ (8005c7c <StartEncoderTask+0x720>)
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	440b      	add	r3, r1
 8005c06:	3320      	adds	r3, #32
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d114      	bne.n	8005c38 <StartEncoderTask+0x6dc>
 8005c0e:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005c12:	4a1b      	ldr	r2, [pc, #108]	@ (8005c80 <StartEncoderTask+0x724>)
 8005c14:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005c18:	fb01 f303 	mul.w	r3, r1, r3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	330c      	adds	r3, #12
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005c26:	4a17      	ldr	r2, [pc, #92]	@ (8005c84 <StartEncoderTask+0x728>)
 8005c28:	214c      	movs	r1, #76	@ 0x4c
 8005c2a:	fb01 f303 	mul.w	r3, r1, r3
 8005c2e:	4413      	add	r3, r2
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4602      	mov	r2, r0
 8005c34:	635a      	str	r2, [r3, #52]	@ 0x34
 8005c36:	e0aa      	b.n	8005d8e <StartEncoderTask+0x832>
 8005c38:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 8005c3c:	490f      	ldr	r1, [pc, #60]	@ (8005c7c <StartEncoderTask+0x720>)
 8005c3e:	4613      	mov	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	440b      	add	r3, r1
 8005c48:	3320      	adds	r3, #32
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b04      	cmp	r3, #4
 8005c4e:	d127      	bne.n	8005ca0 <StartEncoderTask+0x744>
 8005c50:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005c54:	4a0a      	ldr	r2, [pc, #40]	@ (8005c80 <StartEncoderTask+0x724>)
 8005c56:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005c5a:	fb01 f303 	mul.w	r3, r1, r3
 8005c5e:	4413      	add	r3, r2
 8005c60:	330c      	adds	r3, #12
 8005c62:	6818      	ldr	r0, [r3, #0]
 8005c64:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005c68:	4a06      	ldr	r2, [pc, #24]	@ (8005c84 <StartEncoderTask+0x728>)
 8005c6a:	214c      	movs	r1, #76	@ 0x4c
 8005c6c:	fb01 f303 	mul.w	r3, r1, r3
 8005c70:	4413      	add	r3, r2
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	4603      	mov	r3, r0
 8005c76:	6393      	str	r3, [r2, #56]	@ 0x38
 8005c78:	e089      	b.n	8005d8e <StartEncoderTask+0x832>
 8005c7a:	bf00      	nop
 8005c7c:	08031670 	.word	0x08031670
 8005c80:	2000066c 	.word	0x2000066c
 8005c84:	2000ed90 	.word	0x2000ed90
 8005c88:	20000244 	.word	0x20000244
 8005c8c:	080325f8 	.word	0x080325f8
 8005c90:	0802ece0 	.word	0x0802ece0
 8005c94:	0802efc0 	.word	0x0802efc0
 8005c98:	0802efa4 	.word	0x0802efa4
 8005c9c:	2000d9cc 	.word	0x2000d9cc
 8005ca0:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 8005ca4:	4962      	ldr	r1, [pc, #392]	@ (8005e30 <StartEncoderTask+0x8d4>)
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	440b      	add	r3, r1
 8005cb0:	3320      	adds	r3, #32
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d114      	bne.n	8005ce2 <StartEncoderTask+0x786>
 8005cb8:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005cbc:	4a5d      	ldr	r2, [pc, #372]	@ (8005e34 <StartEncoderTask+0x8d8>)
 8005cbe:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005cc2:	fb01 f303 	mul.w	r3, r1, r3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	330c      	adds	r3, #12
 8005cca:	6818      	ldr	r0, [r3, #0]
 8005ccc:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005cd0:	4a59      	ldr	r2, [pc, #356]	@ (8005e38 <StartEncoderTask+0x8dc>)
 8005cd2:	214c      	movs	r1, #76	@ 0x4c
 8005cd4:	fb01 f303 	mul.w	r3, r1, r3
 8005cd8:	4413      	add	r3, r2
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	4603      	mov	r3, r0
 8005cde:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8005ce0:	e055      	b.n	8005d8e <StartEncoderTask+0x832>
 8005ce2:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 8005ce6:	4952      	ldr	r1, [pc, #328]	@ (8005e30 <StartEncoderTask+0x8d4>)
 8005ce8:	4613      	mov	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	440b      	add	r3, r1
 8005cf2:	3320      	adds	r3, #32
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b0c      	cmp	r3, #12
 8005cf8:	d114      	bne.n	8005d24 <StartEncoderTask+0x7c8>
 8005cfa:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005cfe:	4a4d      	ldr	r2, [pc, #308]	@ (8005e34 <StartEncoderTask+0x8d8>)
 8005d00:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005d04:	fb01 f303 	mul.w	r3, r1, r3
 8005d08:	4413      	add	r3, r2
 8005d0a:	330c      	adds	r3, #12
 8005d0c:	6818      	ldr	r0, [r3, #0]
 8005d0e:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005d12:	4a49      	ldr	r2, [pc, #292]	@ (8005e38 <StartEncoderTask+0x8dc>)
 8005d14:	214c      	movs	r1, #76	@ 0x4c
 8005d16:	fb01 f303 	mul.w	r3, r1, r3
 8005d1a:	4413      	add	r3, r2
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	4603      	mov	r3, r0
 8005d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d22:	e034      	b.n	8005d8e <StartEncoderTask+0x832>
 8005d24:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 8005d28:	4941      	ldr	r1, [pc, #260]	@ (8005e30 <StartEncoderTask+0x8d4>)
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	440b      	add	r3, r1
 8005d34:	3320      	adds	r3, #32
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b10      	cmp	r3, #16
 8005d3a:	d114      	bne.n	8005d66 <StartEncoderTask+0x80a>
 8005d3c:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005d40:	4a3c      	ldr	r2, [pc, #240]	@ (8005e34 <StartEncoderTask+0x8d8>)
 8005d42:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005d46:	fb01 f303 	mul.w	r3, r1, r3
 8005d4a:	4413      	add	r3, r2
 8005d4c:	330c      	adds	r3, #12
 8005d4e:	6818      	ldr	r0, [r3, #0]
 8005d50:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005d54:	4a38      	ldr	r2, [pc, #224]	@ (8005e38 <StartEncoderTask+0x8dc>)
 8005d56:	214c      	movs	r1, #76	@ 0x4c
 8005d58:	fb01 f303 	mul.w	r3, r1, r3
 8005d5c:	4413      	add	r3, r2
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	4603      	mov	r3, r0
 8005d62:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d64:	e013      	b.n	8005d8e <StartEncoderTask+0x832>
 8005d66:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005d6a:	4a32      	ldr	r2, [pc, #200]	@ (8005e34 <StartEncoderTask+0x8d8>)
 8005d6c:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005d70:	fb01 f303 	mul.w	r3, r1, r3
 8005d74:	4413      	add	r3, r2
 8005d76:	330c      	adds	r3, #12
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005d7e:	4a2e      	ldr	r2, [pc, #184]	@ (8005e38 <StartEncoderTask+0x8dc>)
 8005d80:	214c      	movs	r1, #76	@ 0x4c
 8005d82:	fb01 f303 	mul.w	r3, r1, r3
 8005d86:	4413      	add	r3, r2
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	65d3      	str	r3, [r2, #92]	@ 0x5c
											MG_INFO(("PWM = %d\r\n", PinsConf[pwm].dvalue));
 8005d8e:	4b2b      	ldr	r3, [pc, #172]	@ (8005e3c <StartEncoderTask+0x8e0>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	dd14      	ble.n	8005dc0 <StartEncoderTask+0x864>
 8005d96:	4b2a      	ldr	r3, [pc, #168]	@ (8005e40 <StartEncoderTask+0x8e4>)
 8005d98:	f240 5209 	movw	r2, #1289	@ 0x509
 8005d9c:	4929      	ldr	r1, [pc, #164]	@ (8005e44 <StartEncoderTask+0x8e8>)
 8005d9e:	2002      	movs	r0, #2
 8005da0:	f006 f928 	bl	800bff4 <mg_log_prefix>
 8005da4:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8005da8:	4a22      	ldr	r2, [pc, #136]	@ (8005e34 <StartEncoderTask+0x8d8>)
 8005daa:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005dae:	fb01 f303 	mul.w	r3, r1, r3
 8005db2:	4413      	add	r3, r2
 8005db4:	330c      	adds	r3, #12
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4619      	mov	r1, r3
 8005dba:	4823      	ldr	r0, [pc, #140]	@ (8005e48 <StartEncoderTask+0x8ec>)
 8005dbc:	f006 f96a 	bl	800c094 <mg_log>
								for (a = 0; a < NUMPINLINKS; a++) {
 8005dc0:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	f887 322e 	strb.w	r3, [r7, #558]	@ 0x22e
 8005dca:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8005dce:	2b63      	cmp	r3, #99	@ 0x63
 8005dd0:	f67f ae9f 	bls.w	8005b12 <StartEncoderTask+0x5b6>
										}
									}
								}
							}
							prev_A[i] = PinsConf[i].on; //A
 8005dd4:	f897 222f 	ldrb.w	r2, [r7, #559]	@ 0x22f
 8005dd8:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8005ddc:	4915      	ldr	r1, [pc, #84]	@ (8005e34 <StartEncoderTask+0x8d8>)
 8005dde:	f44f 7018 	mov.w	r0, #608	@ 0x260
 8005de2:	fb00 f202 	mul.w	r2, r0, r2
 8005de6:	440a      	add	r2, r1
 8005de8:	3208      	adds	r2, #8
 8005dea:	7811      	ldrb	r1, [r2, #0]
 8005dec:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8005df0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005df4:	54d1      	strb	r1, [r2, r3]
							prev_B[pinb] = PinsConf[pinb].on; //B;
 8005df6:	f897 222d 	ldrb.w	r2, [r7, #557]	@ 0x22d
 8005dfa:	f897 322d 	ldrb.w	r3, [r7, #557]	@ 0x22d
 8005dfe:	490d      	ldr	r1, [pc, #52]	@ (8005e34 <StartEncoderTask+0x8d8>)
 8005e00:	f44f 7018 	mov.w	r0, #608	@ 0x260
 8005e04:	fb00 f202 	mul.w	r2, r0, r2
 8005e08:	440a      	add	r2, r1
 8005e0a:	3208      	adds	r2, #8
 8005e0c:	7811      	ldrb	r1, [r2, #0]
 8005e0e:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8005e12:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 8005e16:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < NUMPIN; i++) {
 8005e18:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
 8005e22:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8005e26:	2b58      	cmp	r3, #88	@ 0x58
 8005e28:	f67f abde 	bls.w	80055e8 <StartEncoderTask+0x8c>
		millis = HAL_GetTick();
 8005e2c:	f7ff bbd3 	b.w	80055d6 <StartEncoderTask+0x7a>
 8005e30:	08031670 	.word	0x08031670
 8005e34:	2000066c 	.word	0x2000066c
 8005e38:	2000ed90 	.word	0x2000ed90
 8005e3c:	20000244 	.word	0x20000244
 8005e40:	080325f8 	.word	0x080325f8
 8005e44:	0802ece0 	.word	0x0802ece0
 8005e48:	0802efc0 	.word	0x0802efc0

08005e4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a04      	ldr	r2, [pc, #16]	@ (8005e6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d101      	bne.n	8005e62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005e5e:	f012 fb9f 	bl	80185a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005e62:	bf00      	nop
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	40001000 	.word	0x40001000

08005e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005e70:	b480      	push	{r7}
 8005e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005e74:	b672      	cpsid	i
}
 8005e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005e78:	bf00      	nop
 8005e7a:	e7fd      	b.n	8005e78 <Error_Handler+0x8>

08005e7c <mg_base64_decode_single>:
  } else {
    return c == 62 ? '+' : '/';
  }
}

static int mg_base64_decode_single(int c) {
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  if (c >= 'A' && c <= 'Z') {
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b40      	cmp	r3, #64	@ 0x40
 8005e88:	dd05      	ble.n	8005e96 <mg_base64_decode_single+0x1a>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2b5a      	cmp	r3, #90	@ 0x5a
 8005e8e:	dc02      	bgt.n	8005e96 <mg_base64_decode_single+0x1a>
    return c - 'A';
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	3b41      	subs	r3, #65	@ 0x41
 8005e94:	e022      	b.n	8005edc <mg_base64_decode_single+0x60>
  } else if (c >= 'a' && c <= 'z') {
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b60      	cmp	r3, #96	@ 0x60
 8005e9a:	dd05      	ble.n	8005ea8 <mg_base64_decode_single+0x2c>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b7a      	cmp	r3, #122	@ 0x7a
 8005ea0:	dc02      	bgt.n	8005ea8 <mg_base64_decode_single+0x2c>
    return c + 26 - 'a';
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3b47      	subs	r3, #71	@ 0x47
 8005ea6:	e019      	b.n	8005edc <mg_base64_decode_single+0x60>
  } else if (c >= '0' && c <= '9') {
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b2f      	cmp	r3, #47	@ 0x2f
 8005eac:	dd05      	ble.n	8005eba <mg_base64_decode_single+0x3e>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b39      	cmp	r3, #57	@ 0x39
 8005eb2:	dc02      	bgt.n	8005eba <mg_base64_decode_single+0x3e>
    return c + 52 - '0';
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	e010      	b.n	8005edc <mg_base64_decode_single+0x60>
  } else if (c == '+') {
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b2b      	cmp	r3, #43	@ 0x2b
 8005ebe:	d101      	bne.n	8005ec4 <mg_base64_decode_single+0x48>
    return 62;
 8005ec0:	233e      	movs	r3, #62	@ 0x3e
 8005ec2:	e00b      	b.n	8005edc <mg_base64_decode_single+0x60>
  } else if (c == '/') {
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b2f      	cmp	r3, #47	@ 0x2f
 8005ec8:	d101      	bne.n	8005ece <mg_base64_decode_single+0x52>
    return 63;
 8005eca:	233f      	movs	r3, #63	@ 0x3f
 8005ecc:	e006      	b.n	8005edc <mg_base64_decode_single+0x60>
  } else if (c == '=') {
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b3d      	cmp	r3, #61	@ 0x3d
 8005ed2:	d101      	bne.n	8005ed8 <mg_base64_decode_single+0x5c>
    return 64;
 8005ed4:	2340      	movs	r3, #64	@ 0x40
 8005ed6:	e001      	b.n	8005edc <mg_base64_decode_single+0x60>
  } else {
    return -1;
 8005ed8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <mg_base64_decode>:
  for (i = 0; i < n; i++) len = mg_base64_update(p[i], to, len);
  len = mg_base64_final(to, len);
  return len;
}

size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08a      	sub	sp, #40	@ 0x28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <mg_base64_decode+0x1c>
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	4413      	add	r3, r2
 8005f02:	e000      	b.n	8005f06 <mg_base64_decode+0x1e>
 8005f04:	2300      	movs	r3, #0
 8005f06:	623b      	str	r3, [r7, #32]
  size_t len = 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (dl < n / 4 * 3 + 1) goto fail;
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	089a      	lsrs	r2, r3, #2
 8005f10:	4613      	mov	r3, r2
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	4413      	add	r3, r2
 8005f16:	3301      	adds	r3, #1
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d375      	bcc.n	800600a <mg_base64_decode+0x122>
  while (src != NULL && src + 3 < end) {
 8005f1e:	e065      	b.n	8005fec <mg_base64_decode+0x104>
    int a = mg_base64_decode_single(src[0]),
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7ff ffa9 	bl	8005e7c <mg_base64_decode_single>
 8005f2a:	61f8      	str	r0, [r7, #28]
        b = mg_base64_decode_single(src[1]),
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff ffa2 	bl	8005e7c <mg_base64_decode_single>
 8005f38:	61b8      	str	r0, [r7, #24]
        c = mg_base64_decode_single(src[2]),
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	3302      	adds	r3, #2
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff ff9b 	bl	8005e7c <mg_base64_decode_single>
 8005f46:	6178      	str	r0, [r7, #20]
        d = mg_base64_decode_single(src[3]);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	3303      	adds	r3, #3
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff ff94 	bl	8005e7c <mg_base64_decode_single>
 8005f54:	6138      	str	r0, [r7, #16]
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	2b40      	cmp	r3, #64	@ 0x40
 8005f5a:	d058      	beq.n	800600e <mg_base64_decode+0x126>
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	db55      	blt.n	800600e <mg_base64_decode+0x126>
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	2b40      	cmp	r3, #64	@ 0x40
 8005f66:	d052      	beq.n	800600e <mg_base64_decode+0x126>
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	db4f      	blt.n	800600e <mg_base64_decode+0x126>
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	db4c      	blt.n	800600e <mg_base64_decode+0x126>
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	db49      	blt.n	800600e <mg_base64_decode+0x126>
      goto fail;
    }
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	b25a      	sxtb	r2, r3
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	111b      	asrs	r3, r3, #4
 8005f84:	b25b      	sxtb	r3, r3
 8005f86:	4313      	orrs	r3, r2
 8005f88:	b259      	sxtb	r1, r3
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	4413      	add	r3, r2
 8005f94:	b2ca      	uxtb	r2, r1
 8005f96:	701a      	strb	r2, [r3, #0]
    if (src[2] != '=') {
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3302      	adds	r3, #2
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b3d      	cmp	r3, #61	@ 0x3d
 8005fa0:	d021      	beq.n	8005fe6 <mg_base64_decode+0xfe>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	b25a      	sxtb	r2, r3
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	109b      	asrs	r3, r3, #2
 8005fac:	b25b      	sxtb	r3, r3
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	b259      	sxtb	r1, r3
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	627a      	str	r2, [r7, #36]	@ 0x24
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	4413      	add	r3, r2
 8005fbc:	b2ca      	uxtb	r2, r1
 8005fbe:	701a      	strb	r2, [r3, #0]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3303      	adds	r3, #3
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b3d      	cmp	r3, #61	@ 0x3d
 8005fc8:	d00d      	beq.n	8005fe6 <mg_base64_decode+0xfe>
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	019b      	lsls	r3, r3, #6
 8005fce:	b25a      	sxtb	r2, r3
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	b25b      	sxtb	r3, r3
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	b259      	sxtb	r1, r3
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	627a      	str	r2, [r7, #36]	@ 0x24
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	b2ca      	uxtb	r2, r1
 8005fe4:	701a      	strb	r2, [r3, #0]
    }
    src += 4;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	60fb      	str	r3, [r7, #12]
  while (src != NULL && src + 3 < end) {
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d004      	beq.n	8005ffc <mg_base64_decode+0x114>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3303      	adds	r3, #3
 8005ff6:	6a3a      	ldr	r2, [r7, #32]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d891      	bhi.n	8005f20 <mg_base64_decode+0x38>
  }
  dst[len] = '\0';
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006000:	4413      	add	r3, r2
 8006002:	2200      	movs	r2, #0
 8006004:	701a      	strb	r2, [r3, #0]
  return len;
 8006006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006008:	e009      	b.n	800601e <mg_base64_decode+0x136>
  if (dl < n / 4 * 3 + 1) goto fail;
 800600a:	bf00      	nop
 800600c:	e000      	b.n	8006010 <mg_base64_decode+0x128>
      goto fail;
 800600e:	bf00      	nop
fail:
  if (dl > 0) dst[0] = '\0';
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <mg_base64_decode+0x134>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	701a      	strb	r2, [r3, #0]
  return 0;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3728      	adds	r7, #40	@ 0x28
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <mg_flash_start>:
#line 1 "src/device_dummy.c"
#endif


#if MG_DEVICE == MG_DEVICE_NONE
void *mg_flash_start(void) {
 8006026:	b480      	push	{r7}
 8006028:	af00      	add	r7, sp, #0
  return NULL;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <mg_flash_size>:
size_t mg_flash_size(void) {
 8006036:	b480      	push	{r7}
 8006038:	af00      	add	r7, sp, #0
  return 0;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <mg_flash_sector_size>:
size_t mg_flash_sector_size(void) {
 8006046:	b480      	push	{r7}
 8006048:	af00      	add	r7, sp, #0
  return 0;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <mg_flash_bank>:
size_t mg_flash_write_align(void) {
  return 0;
}
int mg_flash_bank(void) {
 8006056:	b480      	push	{r7}
 8006058:	af00      	add	r7, sp, #0
  return 0;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <mg_flash_erase>:
bool mg_flash_erase(void *location) {
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  (void) location;
  return false;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <mg_device_reset>:
}
bool mg_flash_write(void *addr, const void *buf, size_t len) {
  (void) addr, (void) buf, (void) len;
  return false;
}
void mg_device_reset(void) {
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0
}
 8006080:	bf00      	nop
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data, head, d);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	e002      	b.n	80060a0 <mg_dns_free+0x16>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d1f7      	bne.n	800609a <mg_dns_free+0x10>
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	601a      	str	r2, [r3, #0]
  free(d);
 80060b2:	6838      	ldr	r0, [r7, #0]
 80060b4:	f024 faf6 	bl	802a6a4 <free>
}
 80060b8:	bf00      	nop
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	3330      	adds	r3, #48	@ 0x30
 80060ce:	613b      	str	r3, [r7, #16]
  for (d = *head; d != NULL; d = tmp) {
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	e00d      	b.n	80060f4 <mg_resolve_cancel+0x34>
    tmp = d->next;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	60fb      	str	r3, [r7, #12]
    if (d->c == c) mg_dns_free(head, d);
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d103      	bne.n	80060f0 <mg_resolve_cancel+0x30>
 80060e8:	6979      	ldr	r1, [r7, #20]
 80060ea:	6938      	ldr	r0, [r7, #16]
 80060ec:	f7ff ffcd 	bl	800608a <mg_dns_free>
  for (d = *head; d != NULL; d = tmp) {
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1ee      	bne.n	80060d8 <mg_resolve_cancel+0x18>
  }
}
 80060fa:	bf00      	nop
 80060fc:	bf00      	nop
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <mg_dns_parse_name_depth>:

static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,
                                      char *to, size_t tolen, size_t j,
                                      int depth) {
 8006104:	b580      	push	{r7, lr}
 8006106:	b08c      	sub	sp, #48	@ 0x30
 8006108:	af04      	add	r7, sp, #16
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8006112:	2300      	movs	r3, #0
 8006114:	61fb      	str	r3, [r7, #28]
  if (tolen > 0 && depth == 0) to[0] = '\0';
 8006116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <mg_dns_parse_name_depth+0x24>
 800611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611e:	2b00      	cmp	r3, #0
 8006120:	d102      	bne.n	8006128 <mg_dns_parse_name_depth+0x24>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2200      	movs	r2, #0
 8006126:	701a      	strb	r2, [r3, #0]
  if (depth > 5) return 0;
 8006128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612a:	2b05      	cmp	r3, #5
 800612c:	f340 8084 	ble.w	8006238 <mg_dns_parse_name_depth+0x134>
 8006130:	2300      	movs	r3, #0
 8006132:	e093      	b.n	800625c <mg_dns_parse_name_depth+0x158>
  // MG_INFO(("ofs %lx %x %x", (unsigned long) ofs, s[ofs], s[ofs + 1]));
  while (ofs + i + 1 < len) {
    size_t n = s[ofs + i];
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	4413      	add	r3, r2
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4413      	add	r3, r2
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	61bb      	str	r3, [r7, #24]
    if (n == 0) {
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d103      	bne.n	8006150 <mg_dns_parse_name_depth+0x4c>
      i++;
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	3301      	adds	r3, #1
 800614c:	61fb      	str	r3, [r7, #28]
      break;
 800614e:	e07b      	b.n	8006248 <mg_dns_parse_name_depth+0x144>
    }
    if (n & 0xc0) {
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d02f      	beq.n	80061ba <mg_dns_parse_name_depth+0xb6>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	021b      	lsls	r3, r3, #8
 800615e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8006162:	6879      	ldr	r1, [r7, #4]
 8006164:	69fa      	ldr	r2, [r7, #28]
 8006166:	440a      	add	r2, r1
 8006168:	3201      	adds	r2, #1
 800616a:	68f9      	ldr	r1, [r7, #12]
 800616c:	440a      	add	r2, r1
 800616e:	7812      	ldrb	r2, [r2, #0]
 8006170:	4313      	orrs	r3, r2
 8006172:	617b      	str	r3, [r7, #20]
      // MG_INFO(("PTR %lx", (unsigned long) ptr));
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	3301      	adds	r3, #1
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	429a      	cmp	r2, r3
 800617c:	d919      	bls.n	80061b2 <mg_dns_parse_name_depth+0xae>
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	4413      	add	r3, r2
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d111      	bne.n	80061b2 <mg_dns_parse_name_depth+0xae>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 800618e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006190:	3301      	adds	r3, #1
 8006192:	9302      	str	r3, [sp, #8]
 8006194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006196:	9301      	str	r3, [sp, #4]
 8006198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	68b9      	ldr	r1, [r7, #8]
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f7ff ffae 	bl	8006104 <mg_dns_parse_name_depth>
 80061a8:	4603      	mov	r3, r0
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <mg_dns_parse_name_depth+0xae>
        return 0;
 80061ae:	2300      	movs	r3, #0
 80061b0:	e054      	b.n	800625c <mg_dns_parse_name_depth+0x158>
      i += 2;
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	3302      	adds	r3, #2
 80061b6:	61fb      	str	r3, [r7, #28]
      break;
 80061b8:	e046      	b.n	8006248 <mg_dns_parse_name_depth+0x144>
    }
    if (ofs + i + n + 1 >= len) return 0;
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	441a      	add	r2, r3
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	4413      	add	r3, r2
 80061c4:	3301      	adds	r3, #1
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d801      	bhi.n	80061d0 <mg_dns_parse_name_depth+0xcc>
 80061cc:	2300      	movs	r3, #0
 80061ce:	e045      	b.n	800625c <mg_dns_parse_name_depth+0x158>
    if (j > 0) {
 80061d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00b      	beq.n	80061ee <mg_dns_parse_name_depth+0xea>
      if (j < tolen) to[j] = '.';
 80061d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061da:	429a      	cmp	r2, r3
 80061dc:	d204      	bcs.n	80061e8 <mg_dns_parse_name_depth+0xe4>
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e2:	4413      	add	r3, r2
 80061e4:	222e      	movs	r2, #46	@ 0x2e
 80061e6:	701a      	strb	r2, [r3, #0]
      j++;
 80061e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ea:	3301      	adds	r3, #1
 80061ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 80061ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	4413      	add	r3, r2
 80061f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d90c      	bls.n	8006214 <mg_dns_parse_name_depth+0x110>
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061fe:	18d0      	adds	r0, r2, r3
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	4413      	add	r3, r2
 8006206:	3301      	adds	r3, #1
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	4413      	add	r3, r2
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	4619      	mov	r1, r3
 8006210:	f026 f9b1 	bl	802c576 <memcpy>
    j += n;
 8006214:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	4413      	add	r3, r2
 800621a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    i += n + 1;
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	4413      	add	r3, r2
 8006222:	3301      	adds	r3, #1
 8006224:	61fb      	str	r3, [r7, #28]
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8006226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622a:	429a      	cmp	r2, r3
 800622c:	d204      	bcs.n	8006238 <mg_dns_parse_name_depth+0x134>
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006232:	4413      	add	r3, r2
 8006234:	2200      	movs	r2, #0
 8006236:	701a      	strb	r2, [r3, #0]
  while (ofs + i + 1 < len) {
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	4413      	add	r3, r2
 800623e:	3301      	adds	r3, #1
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	429a      	cmp	r2, r3
 8006244:	f63f af76 	bhi.w	8006134 <mg_dns_parse_name_depth+0x30>
    // MG_INFO(("--> [%s]", to));
  }
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 8006248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624a:	2b00      	cmp	r3, #0
 800624c:	d005      	beq.n	800625a <mg_dns_parse_name_depth+0x156>
 800624e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006250:	3b01      	subs	r3, #1
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	4413      	add	r3, r2
 8006256:	2200      	movs	r2, #0
 8006258:	701a      	strb	r2, [r3, #0]
  return i;
 800625a:	69fb      	ldr	r3, [r7, #28]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3720      	adds	r7, #32
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <mg_dns_parse_name>:

static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,
                                char *dst, size_t dstlen) {
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af04      	add	r7, sp, #16
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	603b      	str	r3, [r7, #0]
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8006272:	2300      	movs	r3, #0
 8006274:	9302      	str	r3, [sp, #8]
 8006276:	2300      	movs	r3, #0
 8006278:	9301      	str	r3, [sp, #4]
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	68b9      	ldr	r1, [r7, #8]
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7ff ff3d 	bl	8006104 <mg_dns_parse_name_depth>
 800628a:	4603      	mov	r3, r0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <mg_dns_parse_rr>:

size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,
                       bool is_question, struct mg_dns_rr *rr) {
 8006294:	b580      	push	{r7, lr}
 8006296:	b088      	sub	sp, #32
 8006298:	af02      	add	r7, sp, #8
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	70fb      	strb	r3, [r7, #3]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4413      	add	r3, r2
 80062a8:	617b      	str	r3, [r7, #20]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4413      	add	r3, r2
 80062b0:	613b      	str	r3, [r7, #16]

  memset(rr, 0, sizeof(*rr));
 80062b2:	2208      	movs	r2, #8
 80062b4:	2100      	movs	r1, #0
 80062b6:	6a38      	ldr	r0, [r7, #32]
 80062b8:	f025 fc28 	bl	802bb0c <memset>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b0b      	cmp	r3, #11
 80062c0:	d801      	bhi.n	80062c6 <mg_dns_parse_rr+0x32>
 80062c2:	2300      	movs	r3, #0
 80062c4:	e074      	b.n	80063b0 <mg_dns_parse_rr+0x11c>
  if (len > 512) return 0;  //  Too large, we don't expect that
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062cc:	d901      	bls.n	80062d2 <mg_dns_parse_rr+0x3e>
 80062ce:	2300      	movs	r3, #0
 80062d0:	e06e      	b.n	80063b0 <mg_dns_parse_rr+0x11c>
  if (s >= e) return 0;     //  Overflow
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d301      	bcc.n	80062de <mg_dns_parse_rr+0x4a>
 80062da:	2300      	movs	r3, #0
 80062dc:	e068      	b.n	80063b0 <mg_dns_parse_rr+0x11c>

  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 80062de:	2300      	movs	r3, #0
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	2300      	movs	r3, #0
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	68b9      	ldr	r1, [r7, #8]
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f7ff ffbb 	bl	8006264 <mg_dns_parse_name>
 80062ee:	4603      	mov	r3, r0
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	801a      	strh	r2, [r3, #0]
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	881b      	ldrh	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <mg_dns_parse_rr+0x6e>
    return 0;
 80062fe:	2300      	movs	r3, #0
 8006300:	e056      	b.n	80063b0 <mg_dns_parse_rr+0x11c>
  s += rr->nlen + 4;
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	3304      	adds	r3, #4
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	4413      	add	r3, r2
 800630c:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	429a      	cmp	r2, r3
 8006314:	d901      	bls.n	800631a <mg_dns_parse_rr+0x86>
 8006316:	2300      	movs	r3, #0
 8006318:	e04a      	b.n	80063b0 <mg_dns_parse_rr+0x11c>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	3b04      	subs	r3, #4
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	021b      	lsls	r3, r3, #8
 8006322:	b21a      	sxth	r2, r3
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	3b03      	subs	r3, #3
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	b21b      	sxth	r3, r3
 800632c:	4313      	orrs	r3, r2
 800632e:	b21b      	sxth	r3, r3
 8006330:	b29a      	uxth	r2, r3
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	805a      	strh	r2, [r3, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	3b02      	subs	r3, #2
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	021b      	lsls	r3, r3, #8
 800633e:	b21a      	sxth	r2, r3
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	3b01      	subs	r3, #1
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	b21b      	sxth	r3, r3
 8006348:	4313      	orrs	r3, r2
 800634a:	b21b      	sxth	r3, r3
 800634c:	b29a      	uxth	r2, r3
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	809a      	strh	r2, [r3, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <mg_dns_parse_rr+0xcc>
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	3304      	adds	r3, #4
 800635e:	e027      	b.n	80063b0 <mg_dns_parse_rr+0x11c>

  s += 6;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	3306      	adds	r3, #6
 8006364:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	429a      	cmp	r2, r3
 800636c:	d901      	bls.n	8006372 <mg_dns_parse_rr+0xde>
 800636e:	2300      	movs	r3, #0
 8006370:	e01e      	b.n	80063b0 <mg_dns_parse_rr+0x11c>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	3b02      	subs	r3, #2
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	021b      	lsls	r3, r3, #8
 800637a:	b21a      	sxth	r2, r3
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	3b01      	subs	r3, #1
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	b21b      	sxth	r3, r3
 8006384:	4313      	orrs	r3, r2
 8006386:	b21b      	sxth	r3, r3
 8006388:	b29a      	uxth	r2, r3
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	80da      	strh	r2, [r3, #6]
  if (s + rr->alen > e) return 0;
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	88db      	ldrh	r3, [r3, #6]
 8006392:	461a      	mov	r2, r3
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	4413      	add	r3, r2
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	429a      	cmp	r2, r3
 800639c:	d201      	bcs.n	80063a2 <mg_dns_parse_rr+0x10e>
 800639e:	2300      	movs	r3, #0
 80063a0:	e006      	b.n	80063b0 <mg_dns_parse_rr+0x11c>
  return (size_t) (rr->nlen + rr->alen + 10);
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	461a      	mov	r2, r3
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	88db      	ldrh	r3, [r3, #6]
 80063ac:	4413      	add	r3, r2
 80063ae:	330a      	adds	r3, #10
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <mg_dns_parse>:

bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08e      	sub	sp, #56	@ 0x38
 80063bc:	af02      	add	r7, sp, #8
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
  const struct mg_dns_header *h = (struct mg_dns_header *) buf;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	623b      	str	r3, [r7, #32]
  struct mg_dns_rr rr;
  size_t i, n, num_answers, ofs = sizeof(*h);
 80063c8:	230c      	movs	r3, #12
 80063ca:	627b      	str	r3, [r7, #36]	@ 0x24
  memset(dm, 0, sizeof(*dm));
 80063cc:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80063d0:	2100      	movs	r1, #0
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f025 fb9a 	bl	802bb0c <memset>

  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b0b      	cmp	r3, #11
 80063dc:	d801      	bhi.n	80063e2 <mg_dns_parse+0x2a>
 80063de:	2300      	movs	r3, #0
 80063e0:	e0aa      	b.n	8006538 <mg_dns_parse+0x180>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 80063e2:	6a3b      	ldr	r3, [r7, #32]
 80063e4:	889b      	ldrh	r3, [r3, #4]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f00c fb16 	bl	8012a18 <mg_ntohs>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d901      	bls.n	80063f6 <mg_dns_parse+0x3e>
 80063f2:	2300      	movs	r3, #0
 80063f4:	e0a0      	b.n	8006538 <mg_dns_parse+0x180>
  num_answers = mg_ntohs(h->num_answers);
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	88db      	ldrh	r3, [r3, #6]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f00c fb0c 	bl	8012a18 <mg_ntohs>
 8006400:	4603      	mov	r3, r0
 8006402:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (num_answers > 10) {
 8006404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006406:	2b0a      	cmp	r3, #10
 8006408:	d910      	bls.n	800642c <mg_dns_parse+0x74>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 800640a:	4b4d      	ldr	r3, [pc, #308]	@ (8006540 <mg_dns_parse+0x188>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b02      	cmp	r3, #2
 8006410:	dd0a      	ble.n	8006428 <mg_dns_parse+0x70>
 8006412:	4b4c      	ldr	r3, [pc, #304]	@ (8006544 <mg_dns_parse+0x18c>)
 8006414:	f240 4293 	movw	r2, #1171	@ 0x493
 8006418:	494b      	ldr	r1, [pc, #300]	@ (8006548 <mg_dns_parse+0x190>)
 800641a:	2003      	movs	r0, #3
 800641c:	f005 fdea 	bl	800bff4 <mg_log_prefix>
 8006420:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006422:	484a      	ldr	r0, [pc, #296]	@ (800654c <mg_dns_parse+0x194>)
 8006424:	f005 fe36 	bl	800c094 <mg_log>
    num_answers = 10;  // Sanity cap
 8006428:	230a      	movs	r3, #10
 800642a:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  dm->txnid = mg_ntohs(h->txnid);
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	4618      	mov	r0, r3
 8006432:	f00c faf1 	bl	8012a18 <mg_ntohs>
 8006436:	4603      	mov	r3, r0
 8006438:	461a      	mov	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	801a      	strh	r2, [r3, #0]

  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 800643e:	2300      	movs	r3, #0
 8006440:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006442:	e015      	b.n	8006470 <mg_dns_parse+0xb8>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8006444:	f107 0314 	add.w	r3, r7, #20
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	2301      	movs	r3, #1
 800644c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800644e:	68b9      	ldr	r1, [r7, #8]
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f7ff ff1f 	bl	8006294 <mg_dns_parse_rr>
 8006456:	61f8      	str	r0, [r7, #28]
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <mg_dns_parse+0xaa>
 800645e:	2300      	movs	r3, #0
 8006460:	e06a      	b.n	8006538 <mg_dns_parse+0x180>
    // MG_INFO(("Q %lu %lu %hu/%hu", ofs, n, rr.atype, rr.aclass));
    ofs += n;
 8006462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	4413      	add	r3, r2
 8006468:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 800646a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800646c:	3301      	adds	r3, #1
 800646e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	889b      	ldrh	r3, [r3, #4]
 8006474:	4618      	mov	r0, r3
 8006476:	f00c facf 	bl	8012a18 <mg_ntohs>
 800647a:	4603      	mov	r3, r0
 800647c:	461a      	mov	r2, r3
 800647e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006480:	4293      	cmp	r3, r2
 8006482:	d3df      	bcc.n	8006444 <mg_dns_parse+0x8c>
  }
  for (i = 0; i < num_answers; i++) {
 8006484:	2300      	movs	r3, #0
 8006486:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006488:	e051      	b.n	800652e <mg_dns_parse+0x176>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 800648a:	f107 0314 	add.w	r3, r7, #20
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	2300      	movs	r3, #0
 8006492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7ff fefc 	bl	8006294 <mg_dns_parse_rr>
 800649c:	61f8      	str	r0, [r7, #28]
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <mg_dns_parse+0xf0>
 80064a4:	2300      	movs	r3, #0
 80064a6:	e047      	b.n	8006538 <mg_dns_parse+0x180>
    // MG_INFO(("A -- %lu %lu %hu/%hu %s", ofs, n, rr.atype, rr.aclass,
    // dm->name));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	3318      	adds	r3, #24
 80064ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064b0:	9200      	str	r2, [sp, #0]
 80064b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064b4:	68b9      	ldr	r1, [r7, #8]
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f7ff fed4 	bl	8006264 <mg_dns_parse_name>
    ofs += n;
 80064bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	4413      	add	r3, r2
 80064c2:	627b      	str	r3, [r7, #36]	@ 0x24

    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 80064c4:	8b7b      	ldrh	r3, [r7, #26]
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d114      	bne.n	80064f4 <mg_dns_parse+0x13c>
 80064ca:	8afb      	ldrh	r3, [r7, #22]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d111      	bne.n	80064f4 <mg_dns_parse+0x13c>
 80064d0:	8b3b      	ldrh	r3, [r7, #24]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d10e      	bne.n	80064f4 <mg_dns_parse+0x13c>
      dm->addr.is_ip6 = false;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3304      	adds	r3, #4
 80064e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064e2:	3a04      	subs	r2, #4
 80064e4:	68f9      	ldr	r1, [r7, #12]
 80064e6:	440a      	add	r2, r1
 80064e8:	6812      	ldr	r2, [r2, #0]
 80064ea:	601a      	str	r2, [r3, #0]
      dm->resolved = true;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 80064f2:	e020      	b.n	8006536 <mg_dns_parse+0x17e>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 80064f4:	8b7b      	ldrh	r3, [r7, #26]
 80064f6:	2b10      	cmp	r3, #16
 80064f8:	d116      	bne.n	8006528 <mg_dns_parse+0x170>
 80064fa:	8afb      	ldrh	r3, [r7, #22]
 80064fc:	2b1c      	cmp	r3, #28
 80064fe:	d113      	bne.n	8006528 <mg_dns_parse+0x170>
 8006500:	8b3b      	ldrh	r3, [r7, #24]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d110      	bne.n	8006528 <mg_dns_parse+0x170>
      dm->addr.is_ip6 = true;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	1d18      	adds	r0, r3, #4
 8006510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006512:	3b10      	subs	r3, #16
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	4413      	add	r3, r2
 8006518:	2210      	movs	r2, #16
 800651a:	4619      	mov	r1, r3
 800651c:	f026 f82b 	bl	802c576 <memcpy>
      dm->resolved = true;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8006526:	e006      	b.n	8006536 <mg_dns_parse+0x17e>
  for (i = 0; i < num_answers; i++) {
 8006528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652a:	3301      	adds	r3, #1
 800652c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800652e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006532:	429a      	cmp	r2, r3
 8006534:	d3a9      	bcc.n	800648a <mg_dns_parse+0xd2>
    }
  }
  return true;
 8006536:	2301      	movs	r3, #1
}
 8006538:	4618      	mov	r0, r3
 800653a:	3730      	adds	r7, #48	@ 0x30
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	20000244 	.word	0x20000244
 8006544:	0803264c 	.word	0x0803264c
 8006548:	0802efcc 	.word	0x0802efcc
 800654c:	0802efe4 	.word	0x0802efe4

08006550 <dns_cb>:

static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8006550:	b5b0      	push	{r4, r5, r7, lr}
 8006552:	b0d2      	sub	sp, #328	@ 0x148
 8006554:	af02      	add	r7, sp, #8
 8006556:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800655a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800655e:	6018      	str	r0, [r3, #0]
 8006560:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006564:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006568:	6019      	str	r1, [r3, #0]
 800656a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800656e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006572:	601a      	str	r2, [r3, #0]
  struct dns_data *d, *tmp;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8006574:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006578:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	3330      	adds	r3, #48	@ 0x30
 8006582:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  if (ev == MG_EV_POLL) {
 8006586:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800658a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b02      	cmp	r3, #2
 8006592:	d12d      	bne.n	80065f0 <dns_cb+0xa0>
    uint64_t now = *(uint64_t *) ev_data;
 8006594:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006598:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a2:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    for (d = *head; d != NULL; d = tmp) {
 80065a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80065b0:	e019      	b.n	80065e6 <dns_cb+0x96>
      tmp = d->next;
 80065b2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      // MG_DEBUG ("%lu %lu dns poll", d->expire, now));
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 80065bc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80065c0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80065c4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80065c8:	4290      	cmp	r0, r2
 80065ca:	eb71 0303 	sbcs.w	r3, r1, r3
 80065ce:	d206      	bcs.n	80065de <dns_cb+0x8e>
 80065d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	4992      	ldr	r1, [pc, #584]	@ (8006820 <dns_cb+0x2d0>)
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 fb37 	bl	8006c4c <mg_error>
    for (d = *head; d != NULL; d = tmp) {
 80065de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80065e2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80065e6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1e1      	bne.n	80065b2 <dns_cb+0x62>
      tmp = d->next;
      mg_error(d->c, "DNS error");
      mg_dns_free(head, d);
    }
  }
}
 80065ee:	e112      	b.n	8006816 <dns_cb+0x2c6>
  } else if (ev == MG_EV_READ) {
 80065f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80065f4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b07      	cmp	r3, #7
 80065fc:	f040 80e4 	bne.w	80067c8 <dns_cb+0x278>
    int resolved = 0;
 8006600:	2300      	movs	r3, #0
 8006602:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8006606:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800660a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006612:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006616:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800661e:	f107 0210 	add.w	r2, r7, #16
 8006622:	4619      	mov	r1, r3
 8006624:	f7ff fec8 	bl	80063b8 <mg_dns_parse>
 8006628:	4603      	mov	r3, r0
 800662a:	f083 0301 	eor.w	r3, r3, #1
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d01e      	beq.n	8006672 <dns_cb+0x122>
      MG_ERROR(("Unexpected DNS response:"));
 8006634:	4b7b      	ldr	r3, [pc, #492]	@ (8006824 <dns_cb+0x2d4>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	dd09      	ble.n	8006650 <dns_cb+0x100>
 800663c:	4b7a      	ldr	r3, [pc, #488]	@ (8006828 <dns_cb+0x2d8>)
 800663e:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 8006642:	497a      	ldr	r1, [pc, #488]	@ (800682c <dns_cb+0x2dc>)
 8006644:	2001      	movs	r0, #1
 8006646:	f005 fcd5 	bl	800bff4 <mg_log_prefix>
 800664a:	4879      	ldr	r0, [pc, #484]	@ (8006830 <dns_cb+0x2e0>)
 800664c:	f005 fd22 	bl	800c094 <mg_log>
      mg_hexdump(c->recv.buf, c->recv.len);
 8006650:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006654:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800665c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006660:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006668:	4619      	mov	r1, r3
 800666a:	4610      	mov	r0, r2
 800666c:	f005 fd48 	bl	800c100 <mg_hexdump>
 8006670:	e090      	b.n	8006794 <dns_cb+0x244>
      for (d = *head; d != NULL; d = tmp) {
 8006672:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800667c:	e085      	b.n	800678a <dns_cb+0x23a>
        tmp = d->next;
 800667e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        if (dm.txnid != d->txnid) continue;
 8006688:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800668c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006690:	881a      	ldrh	r2, [r3, #0]
 8006692:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8006696:	8a1b      	ldrh	r3, [r3, #16]
 8006698:	429a      	cmp	r2, r3
 800669a:	d171      	bne.n	8006780 <dns_cb+0x230>
        if (d->c->is_resolving) {
 800669c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80066a6:	f003 0308 	and.w	r3, r3, #8
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d04a      	beq.n	8006746 <dns_cb+0x1f6>
          if (dm.resolved) {
 80066b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80066b4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80066b8:	789b      	ldrb	r3, [r3, #2]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d038      	beq.n	8006730 <dns_cb+0x1e0>
            dm.addr.port = d->c->rem.port;  // Save port
 80066be:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80066c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80066ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80066ce:	829a      	strh	r2, [r3, #20]
            d->c->rem = dm.addr;            // Copy resolved address
 80066d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80066da:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80066de:	f102 041c 	add.w	r4, r2, #28
 80066e2:	1d1d      	adds	r5, r3, #4
 80066e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	6023      	str	r3, [r4, #0]
            MG_DEBUG(
 80066ec:	4b4d      	ldr	r3, [pc, #308]	@ (8006824 <dns_cb+0x2d4>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	dd16      	ble.n	8006722 <dns_cb+0x1d2>
 80066f4:	4b4c      	ldr	r3, [pc, #304]	@ (8006828 <dns_cb+0x2d8>)
 80066f6:	f240 42cd 	movw	r2, #1229	@ 0x4cd
 80066fa:	494c      	ldr	r1, [pc, #304]	@ (800682c <dns_cb+0x2dc>)
 80066fc:	2003      	movs	r0, #3
 80066fe:	f005 fc79 	bl	800bff4 <mg_log_prefix>
 8006702:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800670a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	331c      	adds	r3, #28
 8006712:	f107 0210 	add.w	r2, r7, #16
 8006716:	3218      	adds	r2, #24
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	4b46      	ldr	r3, [pc, #280]	@ (8006834 <dns_cb+0x2e4>)
 800671c:	4846      	ldr	r0, [pc, #280]	@ (8006838 <dns_cb+0x2e8>)
 800671e:	f005 fcb9 	bl	800c094 <mg_log>
            mg_connect_resolved(d->c);
 8006722:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	4618      	mov	r0, r3
 800672a:	f00a f8c5 	bl	80108b8 <mg_connect_resolved>
 800672e:	e01d      	b.n	800676c <dns_cb+0x21c>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 8006730:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8006734:	6858      	ldr	r0, [r3, #4]
 8006736:	f107 0310 	add.w	r3, r7, #16
 800673a:	3318      	adds	r3, #24
 800673c:	461a      	mov	r2, r3
 800673e:	493f      	ldr	r1, [pc, #252]	@ (800683c <dns_cb+0x2ec>)
 8006740:	f000 fa84 	bl	8006c4c <mg_error>
 8006744:	e012      	b.n	800676c <dns_cb+0x21c>
          MG_ERROR(("%lu already resolved", d->c->id));
 8006746:	4b37      	ldr	r3, [pc, #220]	@ (8006824 <dns_cb+0x2d4>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	dd0e      	ble.n	800676c <dns_cb+0x21c>
 800674e:	4b36      	ldr	r3, [pc, #216]	@ (8006828 <dns_cb+0x2d8>)
 8006750:	f240 42da 	movw	r2, #1242	@ 0x4da
 8006754:	4935      	ldr	r1, [pc, #212]	@ (800682c <dns_cb+0x2dc>)
 8006756:	2001      	movs	r0, #1
 8006758:	f005 fc4c 	bl	800bff4 <mg_log_prefix>
 800675c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006764:	4619      	mov	r1, r3
 8006766:	4836      	ldr	r0, [pc, #216]	@ (8006840 <dns_cb+0x2f0>)
 8006768:	f005 fc94 	bl	800c094 <mg_log>
        mg_dns_free(head, d);
 800676c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8006770:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8006774:	f7ff fc89 	bl	800608a <mg_dns_free>
        resolved = 1;
 8006778:	2301      	movs	r3, #1
 800677a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800677e:	e000      	b.n	8006782 <dns_cb+0x232>
        if (dm.txnid != d->txnid) continue;
 8006780:	bf00      	nop
      for (d = *head; d != NULL; d = tmp) {
 8006782:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006786:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800678a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800678e:	2b00      	cmp	r3, #0
 8006790:	f47f af75 	bne.w	800667e <dns_cb+0x12e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8006794:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10d      	bne.n	80067b8 <dns_cb+0x268>
 800679c:	4b21      	ldr	r3, [pc, #132]	@ (8006824 <dns_cb+0x2d4>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	dd09      	ble.n	80067b8 <dns_cb+0x268>
 80067a4:	4b20      	ldr	r3, [pc, #128]	@ (8006828 <dns_cb+0x2d8>)
 80067a6:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 80067aa:	4920      	ldr	r1, [pc, #128]	@ (800682c <dns_cb+0x2dc>)
 80067ac:	2001      	movs	r0, #1
 80067ae:	f005 fc21 	bl	800bff4 <mg_log_prefix>
 80067b2:	4824      	ldr	r0, [pc, #144]	@ (8006844 <dns_cb+0x2f4>)
 80067b4:	f005 fc6e 	bl	800c094 <mg_log>
    c->recv.len = 0;
 80067b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80067bc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2200      	movs	r2, #0
 80067c4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80067c6:	e026      	b.n	8006816 <dns_cb+0x2c6>
  } else if (ev == MG_EV_CLOSE) {
 80067c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80067cc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b09      	cmp	r3, #9
 80067d4:	d11f      	bne.n	8006816 <dns_cb+0x2c6>
    for (d = *head; d != NULL; d = tmp) {
 80067d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80067e0:	e015      	b.n	800680e <dns_cb+0x2be>
      tmp = d->next;
 80067e2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      mg_error(d->c, "DNS error");
 80067ec:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	4915      	ldr	r1, [pc, #84]	@ (8006848 <dns_cb+0x2f8>)
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 fa29 	bl	8006c4c <mg_error>
      mg_dns_free(head, d);
 80067fa:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80067fe:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8006802:	f7ff fc42 	bl	800608a <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 8006806:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800680a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800680e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1e5      	bne.n	80067e2 <dns_cb+0x292>
}
 8006816:	bf00      	nop
 8006818:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800681c:	46bd      	mov	sp, r7
 800681e:	bdb0      	pop	{r4, r5, r7, pc}
 8006820:	0802f010 	.word	0x0802f010
 8006824:	20000244 	.word	0x20000244
 8006828:	0803265c 	.word	0x0803265c
 800682c:	0802efcc 	.word	0x0802efcc
 8006830:	0802f01c 	.word	0x0802f01c
 8006834:	08011273 	.word	0x08011273
 8006838:	0802f038 	.word	0x0802f038
 800683c:	0802f048 	.word	0x0802f048
 8006840:	0802f060 	.word	0x0802f060
 8006844:	0802f078 	.word	0x0802f078
 8006848:	0802f088 	.word	0x0802f088

0800684c <mg_dns_send>:

static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,
                        uint16_t txnid, bool ipv6) {
 800684c:	b590      	push	{r4, r7, lr}
 800684e:	b0cb      	sub	sp, #300	@ 0x12c
 8006850:	af00      	add	r7, sp, #0
 8006852:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8006856:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 800685a:	6020      	str	r0, [r4, #0]
 800685c:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8006860:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 8006864:	6001      	str	r1, [r0, #0]
 8006866:	4619      	mov	r1, r3
 8006868:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800686c:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8006870:	801a      	strh	r2, [r3, #0]
 8006872:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006876:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 800687a:	460a      	mov	r2, r1
 800687c:	701a      	strb	r2, [r3, #0]
  struct {
    struct mg_dns_header header;
    uint8_t data[256];
  } pkt;
  size_t i, n;
  memset(&pkt, 0, sizeof(pkt));
 800687e:	f107 0314 	add.w	r3, r7, #20
 8006882:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8006886:	2100      	movs	r1, #0
 8006888:	4618      	mov	r0, r3
 800688a:	f025 f93f 	bl	802bb0c <memset>
  pkt.header.txnid = mg_htons(txnid);
 800688e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006892:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	4618      	mov	r0, r3
 800689a:	f00c f8bd 	bl	8012a18 <mg_ntohs>
 800689e:	4603      	mov	r3, r0
 80068a0:	461a      	mov	r2, r3
 80068a2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80068a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80068aa:	801a      	strh	r2, [r3, #0]
  pkt.header.flags = mg_htons(0x100);
 80068ac:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80068b0:	f00c f8b2 	bl	8012a18 <mg_ntohs>
 80068b4:	4603      	mov	r3, r0
 80068b6:	461a      	mov	r2, r3
 80068b8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80068bc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80068c0:	805a      	strh	r2, [r3, #2]
  pkt.header.num_questions = mg_htons(1);
 80068c2:	2001      	movs	r0, #1
 80068c4:	f00c f8a8 	bl	8012a18 <mg_ntohs>
 80068c8:	4603      	mov	r3, r0
 80068ca:	461a      	mov	r2, r3
 80068cc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80068d0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80068d4:	809a      	strh	r2, [r3, #4]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 80068d6:	2300      	movs	r3, #0
 80068d8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80068dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80068e0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80068e4:	e054      	b.n	8006990 <mg_dns_send+0x144>
    if (name->buf[i] == '.' || i >= name->len) {
 80068e6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80068ea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80068f6:	4413      	add	r3, r2
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80068fc:	d009      	beq.n	8006912 <mg_dns_send+0xc6>
 80068fe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006902:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800690e:	429a      	cmp	r2, r3
 8006910:	d32f      	bcc.n	8006972 <mg_dns_send+0x126>
      pkt.data[n] = (uint8_t) (i - n);
 8006912:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006916:	b2da      	uxtb	r2, r3
 8006918:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800691c:	b2db      	uxtb	r3, r3
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	b2d9      	uxtb	r1, r3
 8006922:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006926:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800692a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800692e:	4413      	add	r3, r2
 8006930:	330c      	adds	r3, #12
 8006932:	460a      	mov	r2, r1
 8006934:	701a      	strb	r2, [r3, #0]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 8006936:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800693a:	3301      	adds	r3, #1
 800693c:	f107 0214 	add.w	r2, r7, #20
 8006940:	3308      	adds	r3, #8
 8006942:	4413      	add	r3, r2
 8006944:	1d18      	adds	r0, r3, #4
 8006946:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800694a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006956:	18d1      	adds	r1, r2, r3
 8006958:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800695c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	461a      	mov	r2, r3
 8006964:	f025 fe07 	bl	802c576 <memcpy>
      n = i + 1;
 8006968:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800696c:	3301      	adds	r3, #1
 800696e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    }
    if (i >= name->len) break;
 8006972:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006976:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8006982:	429a      	cmp	r2, r3
 8006984:	d209      	bcs.n	800699a <mg_dns_send+0x14e>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8006986:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800698a:	3301      	adds	r3, #1
 800698c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006990:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006994:	2bfa      	cmp	r3, #250	@ 0xfa
 8006996:	d9a6      	bls.n	80068e6 <mg_dns_send+0x9a>
 8006998:	e000      	b.n	800699c <mg_dns_send+0x150>
    if (i >= name->len) break;
 800699a:	bf00      	nop
  }
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 800699c:	f107 0214 	add.w	r2, r7, #20
 80069a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80069a4:	3308      	adds	r3, #8
 80069a6:	4413      	add	r3, r2
 80069a8:	3304      	adds	r3, #4
 80069aa:	2205      	movs	r2, #5
 80069ac:	4916      	ldr	r1, [pc, #88]	@ (8006a08 <mg_dns_send+0x1bc>)
 80069ae:	4618      	mov	r0, r3
 80069b0:	f025 fde1 	bl	802c576 <memcpy>
  n += 5;
 80069b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80069b8:	3305      	adds	r3, #5
 80069ba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 80069be:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80069c2:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d009      	beq.n	80069e0 <mg_dns_send+0x194>
 80069cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80069d0:	3b03      	subs	r3, #3
 80069d2:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80069d6:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80069da:	4413      	add	r3, r2
 80069dc:	221c      	movs	r2, #28
 80069de:	731a      	strb	r2, [r3, #12]
  // memcpy(&pkt.data[n], "\xc0\x0c\x00\x1c\x00\x01", 6);  // AAAA query
  // n += 6;
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 80069e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80069e4:	f103 020c 	add.w	r2, r3, #12
 80069e8:	f107 0114 	add.w	r1, r7, #20
 80069ec:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80069f0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80069f4:	6818      	ldr	r0, [r3, #0]
 80069f6:	f00a fa31 	bl	8010e5c <mg_send>
 80069fa:	4603      	mov	r3, r0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd90      	pop	{r4, r7, pc}
 8006a06:	bf00      	nop
 8006a08:	0802f094 	.word	0x0802f094

08006a0c <mg_sendnsreq>:

static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,
                         struct mg_dns *dnsc, bool ipv6) {
 8006a0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006a10:	b088      	sub	sp, #32
 8006a12:	af02      	add	r7, sp, #8
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	607a      	str	r2, [r7, #4]
 8006a1a:	603b      	str	r3, [r7, #0]
  struct dns_data *d = NULL;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	617b      	str	r3, [r7, #20]
  if (dnsc->url == NULL) {
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d104      	bne.n	8006a32 <mg_sendnsreq+0x26>
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 8006a28:	494d      	ldr	r1, [pc, #308]	@ (8006b60 <mg_sendnsreq+0x154>)
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 f90e 	bl	8006c4c <mg_error>
 8006a30:	e017      	b.n	8006a62 <mg_sendnsreq+0x56>
  } else if (dnsc->c == NULL) {
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d113      	bne.n	8006a62 <mg_sendnsreq+0x56>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6858      	ldr	r0, [r3, #4]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	6819      	ldr	r1, [r3, #0]
 8006a42:	2300      	movs	r3, #0
 8006a44:	2200      	movs	r2, #0
 8006a46:	f006 ff83 	bl	800d950 <mg_connect>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	605a      	str	r2, [r3, #4]
    if (dnsc->c != NULL) {
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d004      	beq.n	8006a62 <mg_sendnsreq+0x56>
      dnsc->c->pfn = dns_cb;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	4a41      	ldr	r2, [pc, #260]	@ (8006b64 <mg_sendnsreq+0x158>)
 8006a5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      // dnsc->c->is_hexdumping = 1;
    }
  }
  if (dnsc->c == NULL) {
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d104      	bne.n	8006a74 <mg_sendnsreq+0x68>
    mg_error(c, "resolver");
 8006a6a:	493f      	ldr	r1, [pc, #252]	@ (8006b68 <mg_sendnsreq+0x15c>)
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 f8ed 	bl	8006c4c <mg_error>
                name->buf, dnsc->url, d->txnid));
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
      mg_error(dnsc->c, "DNS send");
    }
  }
}
 8006a72:	e070      	b.n	8006b56 <mg_sendnsreq+0x14a>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 8006a74:	2118      	movs	r1, #24
 8006a76:	2001      	movs	r0, #1
 8006a78:	f023 fdf0 	bl	802a65c <calloc>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	617b      	str	r3, [r7, #20]
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d104      	bne.n	8006a90 <mg_sendnsreq+0x84>
    mg_error(c, "resolve OOM");
 8006a86:	4939      	ldr	r1, [pc, #228]	@ (8006b6c <mg_sendnsreq+0x160>)
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 f8df 	bl	8006c4c <mg_error>
}
 8006a8e:	e062      	b.n	8006b56 <mg_sendnsreq+0x14a>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a96:	613b      	str	r3, [r7, #16]
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d004      	beq.n	8006aa8 <mg_sendnsreq+0x9c>
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	8a1b      	ldrh	r3, [r3, #16]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	e000      	b.n	8006aaa <mg_sendnsreq+0x9e>
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	821a      	strh	r2, [r3, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	601a      	str	r2, [r3, #0]
    c->mgr->active_dns_requests = d;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	631a      	str	r2, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 8006ac0:	f7fc fe8a 	bl	80037d8 <mg_millis>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	6879      	ldr	r1, [r7, #4]
 8006aca:	17c8      	asrs	r0, r1, #31
 8006acc:	460c      	mov	r4, r1
 8006ace:	4605      	mov	r5, r0
 8006ad0:	eb12 0804 	adds.w	r8, r2, r4
 8006ad4:	eb43 0905 	adc.w	r9, r3, r5
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	e9c3 8902 	strd	r8, r9, [r3, #8]
    d->c = c;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	605a      	str	r2, [r3, #4]
    c->is_resolving = 1;
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8006aea:	f043 0308 	orr.w	r3, r3, #8
 8006aee:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8006af2:	4b1f      	ldr	r3, [pc, #124]	@ (8006b70 <mg_sendnsreq+0x164>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	dd18      	ble.n	8006b2c <mg_sendnsreq+0x120>
 8006afa:	4b1e      	ldr	r3, [pc, #120]	@ (8006b74 <mg_sendnsreq+0x168>)
 8006afc:	f240 521e 	movw	r2, #1310	@ 0x51e
 8006b00:	491d      	ldr	r1, [pc, #116]	@ (8006b78 <mg_sendnsreq+0x16c>)
 8006b02:	2004      	movs	r0, #4
 8006b04:	f005 fa76 	bl	800bff4 <mg_log_prefix>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	461c      	mov	r4, r3
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	8a12      	ldrh	r2, [r2, #16]
 8006b1e:	9201      	str	r2, [sp, #4]
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	4603      	mov	r3, r0
 8006b24:	4622      	mov	r2, r4
 8006b26:	4815      	ldr	r0, [pc, #84]	@ (8006b7c <mg_sendnsreq+0x170>)
 8006b28:	f005 fab4 	bl	800c094 <mg_log>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	6858      	ldr	r0, [r3, #4]
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	8a1a      	ldrh	r2, [r3, #16]
 8006b34:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006b38:	68b9      	ldr	r1, [r7, #8]
 8006b3a:	f7ff fe87 	bl	800684c <mg_dns_send>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	f083 0301 	eor.w	r3, r3, #1
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <mg_sendnsreq+0x14a>
      mg_error(dnsc->c, "DNS send");
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	490c      	ldr	r1, [pc, #48]	@ (8006b80 <mg_sendnsreq+0x174>)
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 f87b 	bl	8006c4c <mg_error>
}
 8006b56:	bf00      	nop
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006b60:	0802f09c 	.word	0x0802f09c
 8006b64:	08006551 	.word	0x08006551
 8006b68:	0802f0c8 	.word	0x0802f0c8
 8006b6c:	0802f0d4 	.word	0x0802f0d4
 8006b70:	20000244 	.word	0x20000244
 8006b74:	08032664 	.word	0x08032664
 8006b78:	0802efcc 	.word	0x0802efcc
 8006b7c:	0802f0e0 	.word	0x0802f0e0
 8006b80:	0802f104 	.word	0x0802f104

08006b84 <mg_resolve>:

void mg_resolve(struct mg_connection *c, const char *url) {
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af02      	add	r7, sp, #8
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  struct mg_str host = mg_url_host(url);
 8006b8e:	f107 030c 	add.w	r3, r7, #12
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f00b fe76 	bl	8012886 <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 8006b9a:	6838      	ldr	r0, [r7, #0]
 8006b9c:	f00b fea6 	bl	80128ec <mg_url_port>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f00b ff38 	bl	8012a18 <mg_ntohs>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	461a      	mov	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	859a      	strh	r2, [r3, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	331c      	adds	r3, #28
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	f107 030c 	add.w	r3, r7, #12
 8006bba:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006bbe:	f006 fdf7 	bl	800d7b0 <mg_aton>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <mg_resolve+0x4c>
    // host is an IP address, do not fire name resolution
    mg_connect_resolved(c);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f009 fe75 	bl	80108b8 <mg_connect_resolved>
  } else {
    // host is not an IP, send DNS resolution request
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
  }
}
 8006bce:	e019      	b.n	8006c04 <mg_resolve+0x80>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	7e1b      	ldrb	r3, [r3, #24]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <mg_resolve+0x5e>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	330c      	adds	r3, #12
 8006be0:	e002      	b.n	8006be8 <mg_resolve+0x64>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	3304      	adds	r3, #4
 8006be8:	617b      	str	r3, [r7, #20]
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	695a      	ldr	r2, [r3, #20]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	7e1b      	ldrb	r3, [r3, #24]
 8006bf6:	f107 010c 	add.w	r1, r7, #12
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7ff ff04 	bl	8006a0c <mg_sendnsreq>
}
 8006c04:	bf00      	nop
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
  if (ev != MG_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d006      	beq.n	8006c30 <mg_call+0x24>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	68b9      	ldr	r1, [r7, #8]
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d005      	beq.n	8006c44 <mg_call+0x38>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	68b9      	ldr	r1, [r7, #8]
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	4798      	blx	r3
}
 8006c44:	bf00      	nop
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8006c4c:	b40e      	push	{r1, r2, r3}
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b095      	sub	sp, #84	@ 0x54
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 8006c56:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006c5a:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8006c5c:	f107 030c 	add.w	r3, r7, #12
 8006c60:	f107 0010 	add.w	r0, r7, #16
 8006c64:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006c66:	2140      	movs	r1, #64	@ 0x40
 8006c68:	f00a fa1a 	bl	80110a0 <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8006c6c:	4b14      	ldr	r3, [pc, #80]	@ (8006cc0 <mg_error+0x74>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	dd0f      	ble.n	8006c94 <mg_error+0x48>
 8006c74:	4b13      	ldr	r3, [pc, #76]	@ (8006cc4 <mg_error+0x78>)
 8006c76:	f240 5253 	movw	r2, #1363	@ 0x553
 8006c7a:	4913      	ldr	r1, [pc, #76]	@ (8006cc8 <mg_error+0x7c>)
 8006c7c:	2001      	movs	r0, #1
 8006c7e:	f005 f9b9 	bl	800bff4 <mg_log_prefix>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c8a:	f107 0310 	add.w	r3, r7, #16
 8006c8e:	480f      	ldr	r0, [pc, #60]	@ (8006ccc <mg_error+0x80>)
 8006c90:	f005 fa00 	bl	800c094 <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8006c9a:	f043 0320 	orr.w	r3, r3, #32
 8006c9e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8006ca2:	f107 0310 	add.w	r3, r7, #16
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	2100      	movs	r1, #0
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7ff ffae 	bl	8006c0c <mg_call>
}
 8006cb0:	bf00      	nop
 8006cb2:	3754      	adds	r7, #84	@ 0x54
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cba:	b003      	add	sp, #12
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	20000244 	.word	0x20000244
 8006cc4:	08032674 	.word	0x08032674
 8006cc8:	0802efcc 	.word	0x0802efcc
 8006ccc:	0802f110 	.word	0x0802f110

08006cd0 <is_digit>:
#endif




static bool is_digit(int c) {
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b2f      	cmp	r3, #47	@ 0x2f
 8006cdc:	dd04      	ble.n	8006ce8 <is_digit+0x18>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b39      	cmp	r3, #57	@ 0x39
 8006ce2:	dc01      	bgt.n	8006ce8 <is_digit+0x18>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e000      	b.n	8006cea <is_digit+0x1a>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	b2db      	uxtb	r3, r3
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <addexp>:

static int addexp(char *buf, int e, int sign) {
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
  int n = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	1c5a      	adds	r2, r3, #1
 8006d10:	617a      	str	r2, [r7, #20]
 8006d12:	461a      	mov	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4413      	add	r3, r2
 8006d18:	2265      	movs	r2, #101	@ 0x65
 8006d1a:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	617a      	str	r2, [r7, #20]
 8006d22:	461a      	mov	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4413      	add	r3, r2
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	b2d2      	uxtb	r2, r2
 8006d2c:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8006d34:	dd01      	ble.n	8006d3a <addexp+0x3e>
 8006d36:	2300      	movs	r3, #0
 8006d38:	e057      	b.n	8006dea <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2b09      	cmp	r3, #9
 8006d3e:	dc07      	bgt.n	8006d50 <addexp+0x54>
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	617a      	str	r2, [r7, #20]
 8006d46:	461a      	mov	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	2230      	movs	r2, #48	@ 0x30
 8006d4e:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2b63      	cmp	r3, #99	@ 0x63
 8006d54:	dd1c      	ble.n	8006d90 <addexp+0x94>
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	4a27      	ldr	r2, [pc, #156]	@ (8006df8 <addexp+0xfc>)
 8006d5a:	fb82 1203 	smull	r1, r2, r2, r3
 8006d5e:	1152      	asrs	r2, r2, #5
 8006d60:	17db      	asrs	r3, r3, #31
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	1c59      	adds	r1, r3, #1
 8006d6a:	6179      	str	r1, [r7, #20]
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	440b      	add	r3, r1
 8006d72:	3230      	adds	r2, #48	@ 0x30
 8006d74:	b2d2      	uxtb	r2, r2
 8006d76:	701a      	strb	r2, [r3, #0]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	4a1f      	ldr	r2, [pc, #124]	@ (8006df8 <addexp+0xfc>)
 8006d7c:	fb82 1203 	smull	r1, r2, r2, r3
 8006d80:	1151      	asrs	r1, r2, #5
 8006d82:	17da      	asrs	r2, r3, #31
 8006d84:	1a8a      	subs	r2, r1, r2
 8006d86:	2164      	movs	r1, #100	@ 0x64
 8006d88:	fb01 f202 	mul.w	r2, r1, r2
 8006d8c:	1a9b      	subs	r3, r3, r2
 8006d8e:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b09      	cmp	r3, #9
 8006d94:	dd1d      	ble.n	8006dd2 <addexp+0xd6>
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	4a18      	ldr	r2, [pc, #96]	@ (8006dfc <addexp+0x100>)
 8006d9a:	fb82 1203 	smull	r1, r2, r2, r3
 8006d9e:	1092      	asrs	r2, r2, #2
 8006da0:	17db      	asrs	r3, r3, #31
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	1c59      	adds	r1, r3, #1
 8006daa:	6179      	str	r1, [r7, #20]
 8006dac:	4619      	mov	r1, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	440b      	add	r3, r1
 8006db2:	3230      	adds	r2, #48	@ 0x30
 8006db4:	b2d2      	uxtb	r2, r2
 8006db6:	701a      	strb	r2, [r3, #0]
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	4b10      	ldr	r3, [pc, #64]	@ (8006dfc <addexp+0x100>)
 8006dbc:	fb83 1302 	smull	r1, r3, r3, r2
 8006dc0:	1099      	asrs	r1, r3, #2
 8006dc2:	17d3      	asrs	r3, r2, #31
 8006dc4:	1ac9      	subs	r1, r1, r3
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	440b      	add	r3, r1
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	1c59      	adds	r1, r3, #1
 8006dda:	6179      	str	r1, [r7, #20]
 8006ddc:	4619      	mov	r1, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	440b      	add	r3, r1
 8006de2:	3230      	adds	r2, #48	@ 0x30
 8006de4:	b2d2      	uxtb	r2, r2
 8006de6:	701a      	strb	r2, [r3, #0]
  return n;
 8006de8:	697b      	ldr	r3, [r7, #20]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	371c      	adds	r7, #28
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	51eb851f 	.word	0x51eb851f
 8006dfc:	66666667 	.word	0x66666667

08006e00 <xisinf>:

static int xisinf(double x) {
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8006e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e0e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8006e12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e16:	f04f 0200 	mov.w	r2, #0
 8006e1a:	f04f 0300 	mov.w	r3, #0
 8006e1e:	000a      	movs	r2, r1
 8006e20:	2300      	movs	r3, #0
 8006e22:	4613      	mov	r3, r2
 8006e24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e28:	4a08      	ldr	r2, [pc, #32]	@ (8006e4c <xisinf+0x4c>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d106      	bne.n	8006e3c <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 8006e2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e32:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <xisinf+0x3c>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e000      	b.n	8006e3e <xisinf+0x3e>
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	7ff00000 	.word	0x7ff00000

08006e50 <xisnan>:

static int xisnan(double x) {
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8006e5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8006e62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e66:	f04f 0200 	mov.w	r2, #0
 8006e6a:	f04f 0300 	mov.w	r3, #0
 8006e6e:	000a      	movs	r2, r1
 8006e70:	2300      	movs	r3, #0
 8006e72:	4613      	mov	r3, r2
 8006e74:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
             ((unsigned) ieee754.u != 0) >
 8006e78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	bf14      	ite	ne
 8006e82:	2301      	movne	r3, #1
 8006e84:	2300      	moveq	r3, #0
 8006e86:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8006e88:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 8006e8a:	4a06      	ldr	r2, [pc, #24]	@ (8006ea4 <xisnan+0x54>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	bf8c      	ite	hi
 8006e90:	2301      	movhi	r3, #1
 8006e92:	2300      	movls	r3, #0
 8006e94:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	7ff00000 	.word	0x7ff00000

08006ea8 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b09e      	sub	sp, #120	@ 0x78
 8006eac:	af02      	add	r7, sp, #8
 8006eae:	6178      	str	r0, [r7, #20]
 8006eb0:	6139      	str	r1, [r7, #16]
 8006eb2:	ed87 0b02 	vstr	d0, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	663b      	str	r3, [r7, #96]	@ 0x60
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8006ec6:	ed97 7b02 	vldr	d7, [r7, #8]
 8006eca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed2:	d107      	bne.n	8006ee4 <mg_dtoa+0x3c>
 8006ed4:	4bb1      	ldr	r3, [pc, #708]	@ (800719c <mg_dtoa+0x2f4>)
 8006ed6:	4ab2      	ldr	r2, [pc, #712]	@ (80071a0 <mg_dtoa+0x2f8>)
 8006ed8:	6939      	ldr	r1, [r7, #16]
 8006eda:	6978      	ldr	r0, [r7, #20]
 8006edc:	f00a f908 	bl	80110f0 <mg_snprintf>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	e266      	b.n	80073b2 <mg_dtoa+0x50a>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8006ee4:	ed97 0b02 	vldr	d0, [r7, #8]
 8006ee8:	f7ff ff8a 	bl	8006e00 <xisinf>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d010      	beq.n	8006f14 <mg_dtoa+0x6c>
 8006ef2:	ed97 7b02 	vldr	d7, [r7, #8]
 8006ef6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006efe:	dd01      	ble.n	8006f04 <mg_dtoa+0x5c>
 8006f00:	4ba8      	ldr	r3, [pc, #672]	@ (80071a4 <mg_dtoa+0x2fc>)
 8006f02:	e000      	b.n	8006f06 <mg_dtoa+0x5e>
 8006f04:	4ba8      	ldr	r3, [pc, #672]	@ (80071a8 <mg_dtoa+0x300>)
 8006f06:	4aa6      	ldr	r2, [pc, #664]	@ (80071a0 <mg_dtoa+0x2f8>)
 8006f08:	6939      	ldr	r1, [r7, #16]
 8006f0a:	6978      	ldr	r0, [r7, #20]
 8006f0c:	f00a f8f0 	bl	80110f0 <mg_snprintf>
 8006f10:	4603      	mov	r3, r0
 8006f12:	e24e      	b.n	80073b2 <mg_dtoa+0x50a>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8006f14:	ed97 0b02 	vldr	d0, [r7, #8]
 8006f18:	f7ff ff9a 	bl	8006e50 <xisnan>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d007      	beq.n	8006f32 <mg_dtoa+0x8a>
 8006f22:	4ba2      	ldr	r3, [pc, #648]	@ (80071ac <mg_dtoa+0x304>)
 8006f24:	4a9e      	ldr	r2, [pc, #632]	@ (80071a0 <mg_dtoa+0x2f8>)
 8006f26:	6939      	ldr	r1, [r7, #16]
 8006f28:	6978      	ldr	r0, [r7, #20]
 8006f2a:	f00a f8e1 	bl	80110f0 <mg_snprintf>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	e23f      	b.n	80073b2 <mg_dtoa+0x50a>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8006f32:	ed97 7b02 	vldr	d7, [r7, #8]
 8006f36:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f3e:	d50d      	bpl.n	8006f5c <mg_dtoa+0xb4>
 8006f40:	ed97 7b02 	vldr	d7, [r7, #8]
 8006f44:	eeb1 7b47 	vneg.f64	d7, d7
 8006f48:	ed87 7b02 	vstr	d7, [r7, #8]
 8006f4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f4e:	1c5a      	adds	r2, r3, #1
 8006f50:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006f52:	3370      	adds	r3, #112	@ 0x70
 8006f54:	443b      	add	r3, r7
 8006f56:	222d      	movs	r2, #45	@ 0x2d
 8006f58:	f803 2c58 	strb.w	r2, [r3, #-88]

  // Round
  saved = d;
 8006f5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f60:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  mul = 1.0;
 8006f64:	f04f 0200 	mov.w	r2, #0
 8006f68:	4b91      	ldr	r3, [pc, #580]	@ (80071b0 <mg_dtoa+0x308>)
 8006f6a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8006f6e:	e007      	b.n	8006f80 <mg_dtoa+0xd8>
 8006f70:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8006f74:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8006f78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006f7c:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8006f80:	ed97 7b02 	vldr	d7, [r7, #8]
 8006f84:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8006f88:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f90:	db0c      	blt.n	8006fac <mg_dtoa+0x104>
 8006f92:	ed97 5b02 	vldr	d5, [r7, #8]
 8006f96:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8006f9a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006f9e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8006fa2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006faa:	dae1      	bge.n	8006f70 <mg_dtoa+0xc8>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8006fac:	e007      	b.n	8006fbe <mg_dtoa+0x116>
 8006fae:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8006fb2:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8006fb6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006fba:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8006fbe:	ed97 7b02 	vldr	d7, [r7, #8]
 8006fc2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8006fc6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fce:	d80c      	bhi.n	8006fea <mg_dtoa+0x142>
 8006fd0:	ed97 5b02 	vldr	d5, [r7, #8]
 8006fd4:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8006fd8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006fdc:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8006fe0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe8:	d9e1      	bls.n	8006fae <mg_dtoa+0x106>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8006fea:	2300      	movs	r3, #0
 8006fec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006fee:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8006ff2:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 8006ff6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006ffa:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8006ffe:	e00a      	b.n	8007016 <mg_dtoa+0x16e>
 8007000:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8007004:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8007008:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800700c:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8007010:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007012:	3301      	adds	r3, #1
 8007014:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007016:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	429a      	cmp	r2, r3
 800701c:	dbf0      	blt.n	8007000 <mg_dtoa+0x158>
  d += t;
 800701e:	ed97 6b02 	vldr	d6, [r7, #8]
 8007022:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8007026:	ee36 7b07 	vadd.f64	d7, d6, d7
 800702a:	ed87 7b02 	vstr	d7, [r7, #8]
  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 800702e:	f04f 0200 	mov.w	r2, #0
 8007032:	4b5f      	ldr	r3, [pc, #380]	@ (80071b0 <mg_dtoa+0x308>)
 8007034:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8007038:	e00a      	b.n	8007050 <mg_dtoa+0x1a8>
 800703a:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 800703e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007042:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007046:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 800704a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800704c:	3301      	adds	r3, #1
 800704e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007050:	ed97 7b02 	vldr	d7, [r7, #8]
 8007054:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007058:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800705c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007060:	db0c      	blt.n	800707c <mg_dtoa+0x1d4>
 8007062:	ed97 5b02 	vldr	d5, [r7, #8]
 8007066:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 800706a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800706e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007072:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800707a:	dade      	bge.n	800703a <mg_dtoa+0x192>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 800707c:	e00a      	b.n	8007094 <mg_dtoa+0x1ec>
 800707e:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8007082:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8007086:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800708a:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 800708e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007090:	3b01      	subs	r3, #1
 8007092:	663b      	str	r3, [r7, #96]	@ 0x60
 8007094:	ed97 7b02 	vldr	d7, [r7, #8]
 8007098:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800709c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80070a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070a4:	d50c      	bpl.n	80070c0 <mg_dtoa+0x218>
 80070a6:	ed97 5b02 	vldr	d5, [r7, #8]
 80070aa:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 80070ae:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80070b2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80070b6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80070ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070be:	d4de      	bmi.n	800707e <mg_dtoa+0x1d6>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (e >= width && width > 1) {
 80070c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	db2d      	blt.n	8007124 <mg_dtoa+0x27c>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	dd2a      	ble.n	8007124 <mg_dtoa+0x27c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 80070ce:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 80070d2:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 80070d6:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80070da:	78fb      	ldrb	r3, [r7, #3]
 80070dc:	f107 0018 	add.w	r0, r7, #24
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	eeb0 0b45 	vmov.f64	d0, d5
 80070e6:	2128      	movs	r1, #40	@ 0x28
 80070e8:	f7ff fede 	bl	8006ea8 <mg_dtoa>
 80070ec:	4603      	mov	r3, r0
 80070ee:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 80070f0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80070f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070f4:	4413      	add	r3, r2
 80070f6:	f107 0218 	add.w	r2, r7, #24
 80070fa:	4413      	add	r3, r2
 80070fc:	222b      	movs	r2, #43	@ 0x2b
 80070fe:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007100:	4618      	mov	r0, r3
 8007102:	f7ff fdfb 	bl	8006cfc <addexp>
 8007106:	4602      	mov	r2, r0
 8007108:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800710a:	4413      	add	r3, r2
 800710c:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 800710e:	f107 0318 	add.w	r3, r7, #24
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007116:	4a27      	ldr	r2, [pc, #156]	@ (80071b4 <mg_dtoa+0x30c>)
 8007118:	6939      	ldr	r1, [r7, #16]
 800711a:	6978      	ldr	r0, [r7, #20]
 800711c:	f009 ffe8 	bl	80110f0 <mg_snprintf>
 8007120:	4603      	mov	r3, r0
 8007122:	e146      	b.n	80073b2 <mg_dtoa+0x50a>
  } else if (e <= -width && width > 1) {
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	425b      	negs	r3, r3
 8007128:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800712a:	429a      	cmp	r2, r3
 800712c:	dc2e      	bgt.n	800718c <mg_dtoa+0x2e4>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b01      	cmp	r3, #1
 8007132:	dd2b      	ble.n	800718c <mg_dtoa+0x2e4>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8007134:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8007138:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 800713c:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8007140:	78fb      	ldrb	r3, [r7, #3]
 8007142:	f107 0018 	add.w	r0, r7, #24
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	eeb0 0b45 	vmov.f64	d0, d5
 800714c:	2128      	movs	r1, #40	@ 0x28
 800714e:	f7ff feab 	bl	8006ea8 <mg_dtoa>
 8007152:	4603      	mov	r3, r0
 8007154:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 8007156:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007158:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800715a:	4413      	add	r3, r2
 800715c:	f107 0218 	add.w	r2, r7, #24
 8007160:	18d0      	adds	r0, r2, r3
 8007162:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007164:	425b      	negs	r3, r3
 8007166:	222d      	movs	r2, #45	@ 0x2d
 8007168:	4619      	mov	r1, r3
 800716a:	f7ff fdc7 	bl	8006cfc <addexp>
 800716e:	4602      	mov	r2, r0
 8007170:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007172:	4413      	add	r3, r2
 8007174:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8007176:	f107 0318 	add.w	r3, r7, #24
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800717e:	4a0d      	ldr	r2, [pc, #52]	@ (80071b4 <mg_dtoa+0x30c>)
 8007180:	6939      	ldr	r1, [r7, #16]
 8007182:	6978      	ldr	r0, [r7, #20]
 8007184:	f009 ffb4 	bl	80110f0 <mg_snprintf>
 8007188:	4603      	mov	r3, r0
 800718a:	e112      	b.n	80073b2 <mg_dtoa+0x50a>
  } else {
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 800718c:	2300      	movs	r3, #0
 800718e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007190:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007194:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8007198:	e046      	b.n	8007228 <mg_dtoa+0x380>
 800719a:	bf00      	nop
 800719c:	0802f11c 	.word	0x0802f11c
 80071a0:	0802f120 	.word	0x0802f120
 80071a4:	0802f124 	.word	0x0802f124
 80071a8:	0802f128 	.word	0x0802f128
 80071ac:	0802f130 	.word	0x0802f130
 80071b0:	3ff00000 	.word	0x3ff00000
 80071b4:	0802f134 	.word	0x0802f134
      int ch = (int) (d / t);
 80071b8:	ed97 5b02 	vldr	d5, [r7, #8]
 80071bc:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80071c0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80071c4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80071c8:	ee17 3a90 	vmov	r3, s15
 80071cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 80071ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	dc02      	bgt.n	80071da <mg_dtoa+0x332>
 80071d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	dd0c      	ble.n	80071f4 <mg_dtoa+0x34c>
 80071da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071dc:	b2da      	uxtb	r2, r3
 80071de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071e0:	1c59      	adds	r1, r3, #1
 80071e2:	6679      	str	r1, [r7, #100]	@ 0x64
 80071e4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80071e6:	440b      	add	r3, r1
 80071e8:	3230      	adds	r2, #48	@ 0x30
 80071ea:	b2d2      	uxtb	r2, r2
 80071ec:	3370      	adds	r3, #112	@ 0x70
 80071ee:	443b      	add	r3, r7
 80071f0:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 80071f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80071fe:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8007202:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007206:	ed97 6b02 	vldr	d6, [r7, #8]
 800720a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800720e:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 8007212:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8007216:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800721a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800721e:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8007222:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007224:	3301      	adds	r3, #1
 8007226:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007228:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800722c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007230:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007238:	db04      	blt.n	8007244 <mg_dtoa+0x39c>
 800723a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800723c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800723e:	4413      	add	r3, r2
 8007240:	2b27      	cmp	r3, #39	@ 0x27
 8007242:	ddb9      	ble.n	80071b8 <mg_dtoa+0x310>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 8007244:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007246:	2b00      	cmp	r3, #0
 8007248:	d118      	bne.n	800727c <mg_dtoa+0x3d4>
 800724a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800724c:	1c5a      	adds	r2, r3, #1
 800724e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007250:	3370      	adds	r3, #112	@ 0x70
 8007252:	443b      	add	r3, r7
 8007254:	2230      	movs	r2, #48	@ 0x30
 8007256:	f803 2c58 	strb.w	r2, [r3, #-88]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 800725a:	e00f      	b.n	800727c <mg_dtoa+0x3d4>
 800725c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800725e:	1c5a      	adds	r2, r3, #1
 8007260:	667a      	str	r2, [r7, #100]	@ 0x64
 8007262:	3370      	adds	r3, #112	@ 0x70
 8007264:	443b      	add	r3, r7
 8007266:	2230      	movs	r2, #48	@ 0x30
 8007268:	f803 2c58 	strb.w	r2, [r3, #-88]
 800726c:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8007270:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8007274:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007278:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 800727c:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8007280:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007284:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800728c:	db04      	blt.n	8007298 <mg_dtoa+0x3f0>
 800728e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007290:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007292:	4413      	add	r3, r2
 8007294:	2b27      	cmp	r3, #39	@ 0x27
 8007296:	dde1      	ble.n	800725c <mg_dtoa+0x3b4>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8007298:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800729a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800729c:	4413      	add	r3, r2
 800729e:	2b27      	cmp	r3, #39	@ 0x27
 80072a0:	dc09      	bgt.n	80072b6 <mg_dtoa+0x40e>
 80072a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072a4:	1c5a      	adds	r2, r3, #1
 80072a6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80072a8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80072aa:	4413      	add	r3, r2
 80072ac:	3370      	adds	r3, #112	@ 0x70
 80072ae:	443b      	add	r3, r7
 80072b0:	222e      	movs	r2, #46	@ 0x2e
 80072b2:	f803 2c58 	strb.w	r2, [r3, #-88]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 80072b6:	2300      	movs	r3, #0
 80072b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80072ba:	a342      	add	r3, pc, #264	@ (adr r3, 80073c4 <mg_dtoa+0x51c>)
 80072bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c0:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 80072c4:	e031      	b.n	800732a <mg_dtoa+0x482>
      int ch = (int) (d / t);
 80072c6:	ed97 5b02 	vldr	d5, [r7, #8]
 80072ca:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80072ce:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80072d2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80072d6:	ee17 3a90 	vmov	r3, s15
 80072da:	643b      	str	r3, [r7, #64]	@ 0x40
      buf[s + n++] = (char) (ch + '0');
 80072dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072e2:	1c59      	adds	r1, r3, #1
 80072e4:	6679      	str	r1, [r7, #100]	@ 0x64
 80072e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80072e8:	440b      	add	r3, r1
 80072ea:	3230      	adds	r2, #48	@ 0x30
 80072ec:	b2d2      	uxtb	r2, r2
 80072ee:	3370      	adds	r3, #112	@ 0x70
 80072f0:	443b      	add	r3, r7
 80072f2:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 80072f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072f8:	ee07 3a90 	vmov	s15, r3
 80072fc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8007300:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8007304:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007308:	ed97 6b02 	vldr	d6, [r7, #8]
 800730c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007310:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 8007314:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8007318:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800731c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007320:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8007324:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007326:	3301      	adds	r3, #1
 8007328:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800732a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800732c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800732e:	4413      	add	r3, r2
 8007330:	2b27      	cmp	r3, #39	@ 0x27
 8007332:	dc07      	bgt.n	8007344 <mg_dtoa+0x49c>
 8007334:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	429a      	cmp	r2, r3
 800733a:	dbc4      	blt.n	80072c6 <mg_dtoa+0x41e>
    }
  }
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 800733c:	e002      	b.n	8007344 <mg_dtoa+0x49c>
 800733e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007340:	3b01      	subs	r3, #1
 8007342:	667b      	str	r3, [r7, #100]	@ 0x64
 8007344:	78fb      	ldrb	r3, [r7, #3]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00c      	beq.n	8007364 <mg_dtoa+0x4bc>
 800734a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800734c:	2b00      	cmp	r3, #0
 800734e:	dd09      	ble.n	8007364 <mg_dtoa+0x4bc>
 8007350:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007352:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007354:	4413      	add	r3, r2
 8007356:	3b01      	subs	r3, #1
 8007358:	3370      	adds	r3, #112	@ 0x70
 800735a:	443b      	add	r3, r7
 800735c:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8007360:	2b30      	cmp	r3, #48	@ 0x30
 8007362:	d0ec      	beq.n	800733e <mg_dtoa+0x496>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8007364:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007366:	2b00      	cmp	r3, #0
 8007368:	dd0c      	ble.n	8007384 <mg_dtoa+0x4dc>
 800736a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800736c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800736e:	4413      	add	r3, r2
 8007370:	3b01      	subs	r3, #1
 8007372:	3370      	adds	r3, #112	@ 0x70
 8007374:	443b      	add	r3, r7
 8007376:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 800737a:	2b2e      	cmp	r3, #46	@ 0x2e
 800737c:	d102      	bne.n	8007384 <mg_dtoa+0x4dc>
 800737e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007380:	3b01      	subs	r3, #1
 8007382:	667b      	str	r3, [r7, #100]	@ 0x64
  n += s;
 8007384:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007386:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007388:	4413      	add	r3, r2
 800738a:	667b      	str	r3, [r7, #100]	@ 0x64
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 800738c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800738e:	2b27      	cmp	r3, #39	@ 0x27
 8007390:	dd01      	ble.n	8007396 <mg_dtoa+0x4ee>
 8007392:	2327      	movs	r3, #39	@ 0x27
 8007394:	667b      	str	r3, [r7, #100]	@ 0x64
  buf[n] = '\0';
 8007396:	f107 0218 	add.w	r2, r7, #24
 800739a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800739c:	4413      	add	r3, r2
 800739e:	2200      	movs	r2, #0
 80073a0:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 80073a2:	f107 0318 	add.w	r3, r7, #24
 80073a6:	4a06      	ldr	r2, [pc, #24]	@ (80073c0 <mg_dtoa+0x518>)
 80073a8:	6939      	ldr	r1, [r7, #16]
 80073aa:	6978      	ldr	r0, [r7, #20]
 80073ac:	f009 fea0 	bl	80110f0 <mg_snprintf>
 80073b0:	4603      	mov	r3, r0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3770      	adds	r7, #112	@ 0x70
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	f3af 8000 	nop.w
 80073c0:	0802f120 	.word	0x0802f120
 80073c4:	9999999a 	.word	0x9999999a
 80073c8:	3fb99999 	.word	0x3fb99999

080073cc <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 80073cc:	b5b0      	push	{r4, r5, r7, lr}
 80073ce:	b08c      	sub	sp, #48	@ 0x30
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 80073d8:	4b53      	ldr	r3, [pc, #332]	@ (8007528 <mg_lld+0x15c>)
 80073da:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 80073dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073e0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  size_t s = 0, n, i;
 80073e4:	2300      	movs	r3, #0
 80073e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 80073e8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d012      	beq.n	8007416 <mg_lld+0x4a>
 80073f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	da0e      	bge.n	8007416 <mg_lld+0x4a>
 80073f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fa:	1c5a      	adds	r2, r3, #1
 80073fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	4413      	add	r3, r2
 8007402:	222d      	movs	r2, #45	@ 0x2d
 8007404:	701a      	strb	r2, [r3, #0]
 8007406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800740a:	2100      	movs	r1, #0
 800740c:	4254      	negs	r4, r2
 800740e:	eb61 0503 	sbc.w	r5, r1, r3
 8007412:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8007416:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800741a:	2b00      	cmp	r3, #0
 800741c:	d021      	beq.n	8007462 <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 800741e:	2300      	movs	r3, #0
 8007420:	623b      	str	r3, [r7, #32]
 8007422:	e019      	b.n	8007458 <mg_lld+0x8c>
 8007424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007426:	f003 030f 	and.w	r3, r3, #15
 800742a:	69ba      	ldr	r2, [r7, #24]
 800742c:	441a      	add	r2, r3
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	1c59      	adds	r1, r3, #1
 8007432:	6239      	str	r1, [r7, #32]
 8007434:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007436:	440b      	add	r3, r1
 8007438:	68f9      	ldr	r1, [r7, #12]
 800743a:	440b      	add	r3, r1
 800743c:	7812      	ldrb	r2, [r2, #0]
 800743e:	701a      	strb	r2, [r3, #0]
 8007440:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007444:	f04f 0200 	mov.w	r2, #0
 8007448:	f04f 0300 	mov.w	r3, #0
 800744c:	0902      	lsrs	r2, r0, #4
 800744e:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8007452:	090b      	lsrs	r3, r1, #4
 8007454:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8007458:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800745c:	4313      	orrs	r3, r2
 800745e:	d1e1      	bne.n	8007424 <mg_lld+0x58>
 8007460:	e025      	b.n	80074ae <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 8007462:	2300      	movs	r3, #0
 8007464:	623b      	str	r3, [r7, #32]
 8007466:	e01e      	b.n	80074a6 <mg_lld+0xda>
 8007468:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800746c:	f04f 020a 	mov.w	r2, #10
 8007470:	f04f 0300 	mov.w	r3, #0
 8007474:	f7f9 f958 	bl	8000728 <__aeabi_uldivmod>
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	441a      	add	r2, r3
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	1c59      	adds	r1, r3, #1
 8007480:	6239      	str	r1, [r7, #32]
 8007482:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007484:	440b      	add	r3, r1
 8007486:	68f9      	ldr	r1, [r7, #12]
 8007488:	440b      	add	r3, r1
 800748a:	7812      	ldrb	r2, [r2, #0]
 800748c:	701a      	strb	r2, [r3, #0]
 800748e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007492:	f04f 020a 	mov.w	r2, #10
 8007496:	f04f 0300 	mov.w	r3, #0
 800749a:	f7f9 f945 	bl	8000728 <__aeabi_uldivmod>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80074a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80074aa:	4313      	orrs	r3, r2
 80074ac:	d1dc      	bne.n	8007468 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 80074ae:	2300      	movs	r3, #0
 80074b0:	61fb      	str	r3, [r7, #28]
 80074b2:	e022      	b.n	80074fa <mg_lld+0x12e>
    char t = buf[s + i];
 80074b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	4413      	add	r3, r2
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	4413      	add	r3, r2
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 80074c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	441a      	add	r2, r3
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	3b01      	subs	r3, #1
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	441a      	add	r2, r3
 80074d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	440b      	add	r3, r1
 80074d8:	68f9      	ldr	r1, [r7, #12]
 80074da:	440b      	add	r3, r1
 80074dc:	7812      	ldrb	r2, [r2, #0]
 80074de:	701a      	strb	r2, [r3, #0]
 80074e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	441a      	add	r2, r3
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	3b01      	subs	r3, #1
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	4413      	add	r3, r2
 80074f0:	7dfa      	ldrb	r2, [r7, #23]
 80074f2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	3301      	adds	r3, #1
 80074f8:	61fb      	str	r3, [r7, #28]
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	085b      	lsrs	r3, r3, #1
 80074fe:	69fa      	ldr	r2, [r7, #28]
 8007500:	429a      	cmp	r2, r3
 8007502:	d3d7      	bcc.n	80074b4 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 8007504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007508:	4313      	orrs	r3, r2
 800750a:	d106      	bne.n	800751a <mg_lld+0x14e>
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	623a      	str	r2, [r7, #32]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	4413      	add	r3, r2
 8007516:	2230      	movs	r2, #48	@ 0x30
 8007518:	701a      	strb	r2, [r3, #0]
  return n + s;
 800751a:	6a3a      	ldr	r2, [r7, #32]
 800751c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751e:	4413      	add	r3, r2
}
 8007520:	4618      	mov	r0, r3
 8007522:	3730      	adds	r7, #48	@ 0x30
 8007524:	46bd      	mov	sp, r7
 8007526:	bdb0      	pop	{r4, r5, r7, pc}
 8007528:	0802f13c 	.word	0x0802f13c

0800752c <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
 8007538:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 800753a:	2300      	movs	r3, #0
 800753c:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 800753e:	e009      	b.n	8007554 <scpy+0x28>
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	617a      	str	r2, [r7, #20]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	4413      	add	r3, r2
 800754a:	781a      	ldrb	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	68b9      	ldr	r1, [r7, #8]
 8007550:	4610      	mov	r0, r2
 8007552:	4798      	blx	r3
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	429a      	cmp	r2, r3
 800755a:	d205      	bcs.n	8007568 <scpy+0x3c>
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	4413      	add	r3, r2
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1eb      	bne.n	8007540 <scpy+0x14>
  return i;
 8007568:	697b      	ldr	r3, [r7, #20]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 8007572:	b40c      	push	{r2, r3}
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 800757e:	2300      	movs	r3, #0
 8007580:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 8007582:	f107 031c 	add.w	r3, r7, #28
 8007586:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8007588:	f107 0308 	add.w	r3, r7, #8
 800758c:	69ba      	ldr	r2, [r7, #24]
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f809 	bl	80075a8 <mg_vxprintf>
 8007596:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8007598:	68fb      	ldr	r3, [r7, #12]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075a4:	b002      	add	sp, #8
 80075a6:	4770      	bx	lr

080075a8 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 80075a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80075ac:	b0a6      	sub	sp, #152	@ 0x98
 80075ae:	af02      	add	r7, sp, #8
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	60b9      	str	r1, [r7, #8]
 80075b4:	607a      	str	r2, [r7, #4]
 80075b6:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 80075b8:	2300      	movs	r3, #0
 80075ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80075be:	2300      	movs	r3, #0
 80075c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  while (fmt[i] != '\0') {
 80075c4:	e383      	b.n	8007cce <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075cc:	4413      	add	r3, r2
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	2b25      	cmp	r3, #37	@ 0x25
 80075d2:	f040 8369 	bne.w	8007ca8 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 80075d6:	2300      	movs	r3, #0
 80075d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80075da:	2300      	movs	r3, #0
 80075dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075de:	2300      	movs	r3, #0
 80075e0:	677b      	str	r3, [r7, #116]	@ 0x74
 80075e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80075e6:	673b      	str	r3, [r7, #112]	@ 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 80075e8:	2320      	movs	r3, #32
 80075ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80075ee:	2300      	movs	r3, #0
 80075f0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80075f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075f8:	3301      	adds	r3, #1
 80075fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007604:	4413      	add	r3, r2
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '#') x++, c = fmt[++i];
 800760c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007610:	2b23      	cmp	r3, #35	@ 0x23
 8007612:	d10e      	bne.n	8007632 <mg_vxprintf+0x8a>
 8007614:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007616:	3301      	adds	r3, #1
 8007618:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800761a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800761e:	3301      	adds	r3, #1
 8007620:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800762a:	4413      	add	r3, r2
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '-') minus++, c = fmt[++i];
 8007632:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007636:	2b2d      	cmp	r3, #45	@ 0x2d
 8007638:	d110      	bne.n	800765c <mg_vxprintf+0xb4>
 800763a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800763e:	3301      	adds	r3, #1
 8007640:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8007644:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007648:	3301      	adds	r3, #1
 800764a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007654:	4413      	add	r3, r2
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 800765c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007660:	2b30      	cmp	r3, #48	@ 0x30
 8007662:	d127      	bne.n	80076b4 <mg_vxprintf+0x10c>
 8007664:	2330      	movs	r3, #48	@ 0x30
 8007666:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800766a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800766e:	3301      	adds	r3, #1
 8007670:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800767a:	4413      	add	r3, r2
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 8007682:	e017      	b.n	80076b4 <mg_vxprintf+0x10c>
 8007684:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007686:	4613      	mov	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007690:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8007694:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007696:	4413      	add	r3, r2
 8007698:	3b30      	subs	r3, #48	@ 0x30
 800769a:	677b      	str	r3, [r7, #116]	@ 0x74
 800769c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076a0:	3301      	adds	r3, #1
 80076a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076ac:	4413      	add	r3, r2
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80076b4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7ff fb09 	bl	8006cd0 <is_digit>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1df      	bne.n	8007684 <mg_vxprintf+0xdc>
      if (c == '.') {
 80076c4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80076c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80076ca:	d153      	bne.n	8007774 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 80076cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076d0:	3301      	adds	r3, #1
 80076d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076dc:	4413      	add	r3, r2
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == '*') {
 80076e4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80076e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80076ea:	d113      	bne.n	8007714 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	1d19      	adds	r1, r3, #4
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	6011      	str	r1, [r2, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	673b      	str	r3, [r7, #112]	@ 0x70
          c = fmt[++i];
 80076fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076fe:	3301      	adds	r3, #1
 8007700:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800770a:	4413      	add	r3, r2
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8007712:	e02f      	b.n	8007774 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 8007714:	2300      	movs	r3, #0
 8007716:	673b      	str	r3, [r7, #112]	@ 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8007718:	e017      	b.n	800774a <mg_vxprintf+0x1a2>
 800771a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800771c:	4613      	mov	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4413      	add	r3, r2
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	673b      	str	r3, [r7, #112]	@ 0x70
 8007726:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 800772a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800772c:	4413      	add	r3, r2
 800772e:	3b30      	subs	r3, #48	@ 0x30
 8007730:	673b      	str	r3, [r7, #112]	@ 0x70
 8007732:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007736:	3301      	adds	r3, #1
 8007738:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007742:	4413      	add	r3, r2
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800774a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800774e:	4618      	mov	r0, r3
 8007750:	f7ff fabe 	bl	8006cd0 <is_digit>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1df      	bne.n	800771a <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 800775a:	e00b      	b.n	8007774 <mg_vxprintf+0x1cc>
 800775c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007760:	3301      	adds	r3, #1
 8007762:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800776c:	4413      	add	r3, r2
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8007774:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007778:	2b68      	cmp	r3, #104	@ 0x68
 800777a:	d0ef      	beq.n	800775c <mg_vxprintf+0x1b4>
      if (c == 'l') {
 800777c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007780:	2b6c      	cmp	r3, #108	@ 0x6c
 8007782:	d121      	bne.n	80077c8 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 8007784:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007786:	3301      	adds	r3, #1
 8007788:	67bb      	str	r3, [r7, #120]	@ 0x78
 800778a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800778e:	3301      	adds	r3, #1
 8007790:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800779a:	4413      	add	r3, r2
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 80077a2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80077a6:	2b6c      	cmp	r3, #108	@ 0x6c
 80077a8:	d10e      	bne.n	80077c8 <mg_vxprintf+0x220>
 80077aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077ac:	3301      	adds	r3, #1
 80077ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80077b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077b4:	3301      	adds	r3, #1
 80077b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077c0:	4413      	add	r3, r2
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 80077c8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80077cc:	2b70      	cmp	r3, #112	@ 0x70
 80077ce:	d103      	bne.n	80077d8 <mg_vxprintf+0x230>
 80077d0:	2301      	movs	r3, #1
 80077d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80077d4:	2301      	movs	r3, #1
 80077d6:	67bb      	str	r3, [r7, #120]	@ 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 80077d8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80077dc:	2b64      	cmp	r3, #100	@ 0x64
 80077de:	d018      	beq.n	8007812 <mg_vxprintf+0x26a>
 80077e0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80077e4:	2b75      	cmp	r3, #117	@ 0x75
 80077e6:	d014      	beq.n	8007812 <mg_vxprintf+0x26a>
 80077e8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80077ec:	2b78      	cmp	r3, #120	@ 0x78
 80077ee:	d010      	beq.n	8007812 <mg_vxprintf+0x26a>
 80077f0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80077f4:	2b58      	cmp	r3, #88	@ 0x58
 80077f6:	d00c      	beq.n	8007812 <mg_vxprintf+0x26a>
 80077f8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80077fc:	2b70      	cmp	r3, #112	@ 0x70
 80077fe:	d008      	beq.n	8007812 <mg_vxprintf+0x26a>
 8007800:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007804:	2b67      	cmp	r3, #103	@ 0x67
 8007806:	d004      	beq.n	8007812 <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8007808:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800780c:	2b66      	cmp	r3, #102	@ 0x66
 800780e:	f040 816c 	bne.w	8007aea <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8007812:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007816:	2b64      	cmp	r3, #100	@ 0x64
 8007818:	bf0c      	ite	eq
 800781a:	2301      	moveq	r3, #1
 800781c:	2300      	movne	r3, #0
 800781e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007822:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007826:	2b78      	cmp	r3, #120	@ 0x78
 8007828:	d007      	beq.n	800783a <mg_vxprintf+0x292>
 800782a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800782e:	2b58      	cmp	r3, #88	@ 0x58
 8007830:	d003      	beq.n	800783a <mg_vxprintf+0x292>
 8007832:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007836:	2b70      	cmp	r3, #112	@ 0x70
 8007838:	d101      	bne.n	800783e <mg_vxprintf+0x296>
 800783a:	2301      	movs	r3, #1
 800783c:	e000      	b.n	8007840 <mg_vxprintf+0x298>
 800783e:	2300      	movs	r3, #0
 8007840:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8007844:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 8007850:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <mg_vxprintf+0x2b2>
 8007856:	2302      	movs	r3, #2
 8007858:	e000      	b.n	800785c <mg_vxprintf+0x2b4>
 800785a:	2300      	movs	r3, #0
 800785c:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (c == 'g' || c == 'f') {
 800785e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007862:	2b67      	cmp	r3, #103	@ 0x67
 8007864:	d003      	beq.n	800786e <mg_vxprintf+0x2c6>
 8007866:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800786a:	2b66      	cmp	r3, #102	@ 0x66
 800786c:	d124      	bne.n	80078b8 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3307      	adds	r3, #7
 8007874:	f023 0307 	bic.w	r3, r3, #7
 8007878:	f103 0108 	add.w	r1, r3, #8
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	6011      	str	r1, [r2, #0]
 8007880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007884:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
          if (pr == ~0U) pr = 6;
 8007888:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800788a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800788e:	d101      	bne.n	8007894 <mg_vxprintf+0x2ec>
 8007890:	2306      	movs	r3, #6
 8007892:	673b      	str	r3, [r7, #112]	@ 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8007894:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007896:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800789a:	2b67      	cmp	r3, #103	@ 0x67
 800789c:	bf0c      	ite	eq
 800789e:	2301      	moveq	r3, #1
 80078a0:	2300      	movne	r3, #0
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	f107 0014 	add.w	r0, r7, #20
 80078a8:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 80078ac:	2128      	movs	r1, #40	@ 0x28
 80078ae:	f7ff fafb 	bl	8006ea8 <mg_dtoa>
 80078b2:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (c == 'g' || c == 'f') {
 80078b6:	e069      	b.n	800798c <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 80078b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d11c      	bne.n	80078f8 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3307      	adds	r3, #7
 80078c4:	f023 0307 	bic.w	r3, r3, #7
 80078c8:	f103 0108 	add.w	r1, r3, #8
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	6011      	str	r1, [r2, #0]
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
          k = mg_lld(tmp, v, s, h);
 80078d8:	f107 0114 	add.w	r1, r7, #20
 80078dc:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80078e0:	9301      	str	r3, [sp, #4]
 80078e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80078ec:	4608      	mov	r0, r1
 80078ee:	f7ff fd6d 	bl	80073cc <mg_lld>
 80078f2:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 80078f6:	e049      	b.n	800798c <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 80078f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d123      	bne.n	8007946 <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	1d19      	adds	r1, r3, #4
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	6011      	str	r1, [r2, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	653b      	str	r3, [r7, #80]	@ 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 800790c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007910:	2b00      	cmp	r3, #0
 8007912:	d004      	beq.n	800791e <mg_vxprintf+0x376>
 8007914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007916:	17da      	asrs	r2, r3, #31
 8007918:	461c      	mov	r4, r3
 800791a:	4615      	mov	r5, r2
 800791c:	e003      	b.n	8007926 <mg_vxprintf+0x37e>
 800791e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007920:	2200      	movs	r2, #0
 8007922:	461c      	mov	r4, r3
 8007924:	4615      	mov	r5, r2
 8007926:	f107 0114 	add.w	r1, r7, #20
 800792a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800792e:	9301      	str	r3, [sp, #4]
 8007930:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	4622      	mov	r2, r4
 8007938:	462b      	mov	r3, r5
 800793a:	4608      	mov	r0, r1
 800793c:	f7ff fd46 	bl	80073cc <mg_lld>
 8007940:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8007944:	e022      	b.n	800798c <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	1d19      	adds	r1, r3, #4
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	6011      	str	r1, [r2, #0]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	657b      	str	r3, [r7, #84]	@ 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8007954:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007958:	2b00      	cmp	r3, #0
 800795a:	d004      	beq.n	8007966 <mg_vxprintf+0x3be>
 800795c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800795e:	17da      	asrs	r2, r3, #31
 8007960:	4698      	mov	r8, r3
 8007962:	4691      	mov	r9, r2
 8007964:	e003      	b.n	800796e <mg_vxprintf+0x3c6>
 8007966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007968:	2200      	movs	r2, #0
 800796a:	4698      	mov	r8, r3
 800796c:	4691      	mov	r9, r2
 800796e:	f107 0114 	add.w	r1, r7, #20
 8007972:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8007976:	9301      	str	r3, [sp, #4]
 8007978:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	4642      	mov	r2, r8
 8007980:	464b      	mov	r3, r9
 8007982:	4608      	mov	r0, r1
 8007984:	f7ff fd22 	bl	80073cc <mg_lld>
 8007988:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 800798c:	2300      	movs	r3, #0
 800798e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007992:	e007      	b.n	80079a4 <mg_vxprintf+0x3fc>
 8007994:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007996:	3b01      	subs	r3, #1
 8007998:	677b      	str	r3, [r7, #116]	@ 0x74
 800799a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800799e:	3301      	adds	r3, #1
 80079a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80079a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d202      	bcs.n	80079b4 <mg_vxprintf+0x40c>
 80079ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1ef      	bne.n	8007994 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 80079b4:	2300      	movs	r3, #0
 80079b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079ba:	e011      	b.n	80079e0 <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 80079bc:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80079c0:	2301      	movs	r3, #1
 80079c2:	68b9      	ldr	r1, [r7, #8]
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f7ff fdb1 	bl	800752c <scpy>
 80079ca:	4602      	mov	r2, r0
 80079cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80079d0:	4413      	add	r3, r2
 80079d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 80079d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80079da:	3301      	adds	r3, #1
 80079dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80079e4:	2b20      	cmp	r3, #32
 80079e6:	d110      	bne.n	8007a0a <mg_vxprintf+0x462>
 80079e8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10c      	bne.n	8007a0a <mg_vxprintf+0x462>
 80079f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80079f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d207      	bcs.n	8007a0a <mg_vxprintf+0x462>
 80079fa:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80079fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a02:	4413      	add	r3, r2
 8007a04:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d8d8      	bhi.n	80079bc <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 8007a0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a0c:	4ab7      	ldr	r2, [pc, #732]	@ (8007cec <mg_vxprintf+0x744>)
 8007a0e:	68b9      	ldr	r1, [r7, #8]
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f7ff fd8b 	bl	800752c <scpy>
 8007a16:	4602      	mov	r2, r0
 8007a18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8007a22:	2300      	movs	r3, #0
 8007a24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a28:	e011      	b.n	8007a4e <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 8007a2a:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8007a2e:	2301      	movs	r3, #1
 8007a30:	68b9      	ldr	r1, [r7, #8]
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f7ff fd7a 	bl	800752c <scpy>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a3e:	4413      	add	r3, r2
 8007a40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8007a44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a48:	3301      	adds	r3, #1
 8007a4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a4e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007a52:	2b30      	cmp	r3, #48	@ 0x30
 8007a54:	d10c      	bne.n	8007a70 <mg_vxprintf+0x4c8>
 8007a56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d207      	bcs.n	8007a70 <mg_vxprintf+0x4c8>
 8007a60:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007a64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a68:	4413      	add	r3, r2
 8007a6a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d8dc      	bhi.n	8007a2a <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 8007a70:	f107 0214 	add.w	r2, r7, #20
 8007a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a78:	68b9      	ldr	r1, [r7, #8]
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f7ff fd56 	bl	800752c <scpy>
 8007a80:	4602      	mov	r2, r0
 8007a82:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a86:	4413      	add	r3, r2
 8007a88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a92:	e011      	b.n	8007ab8 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 8007a94:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8007a98:	2301      	movs	r3, #1
 8007a9a:	68b9      	ldr	r1, [r7, #8]
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f7ff fd45 	bl	800752c <scpy>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8007aae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ab8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007abc:	2b20      	cmp	r3, #32
 8007abe:	f040 80ea 	bne.w	8007c96 <mg_vxprintf+0x6ee>
 8007ac2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f000 80e5 	beq.w	8007c96 <mg_vxprintf+0x6ee>
 8007acc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007ad0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	f080 80df 	bcs.w	8007c96 <mg_vxprintf+0x6ee>
 8007ad8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007adc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007ae0:	4413      	add	r3, r2
 8007ae2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d8d5      	bhi.n	8007a94 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 8007ae8:	e0d5      	b.n	8007c96 <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 8007aea:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007aee:	2b6d      	cmp	r3, #109	@ 0x6d
 8007af0:	d003      	beq.n	8007afa <mg_vxprintf+0x552>
 8007af2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007af6:	2b4d      	cmp	r3, #77	@ 0x4d
 8007af8:	d128      	bne.n	8007b4c <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	1d19      	adds	r1, r3, #4
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	6011      	str	r1, [r2, #0]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	663b      	str	r3, [r7, #96]	@ 0x60
        if (c == 'm') out('"', param);
 8007b08:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007b0c:	2b6d      	cmp	r3, #109	@ 0x6d
 8007b0e:	d103      	bne.n	8007b18 <mg_vxprintf+0x570>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	68b9      	ldr	r1, [r7, #8]
 8007b14:	2022      	movs	r0, #34	@ 0x22
 8007b16:	4798      	blx	r3
        n += f(out, param, ap);
 8007b18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	68b9      	ldr	r1, [r7, #8]
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	4798      	blx	r3
 8007b22:	4602      	mov	r2, r0
 8007b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b28:	4413      	add	r3, r2
 8007b2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        if (c == 'm') n += 2, out('"', param);
 8007b2e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007b32:	2b6d      	cmp	r3, #109	@ 0x6d
 8007b34:	f040 80b1 	bne.w	8007c9a <mg_vxprintf+0x6f2>
 8007b38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b3c:	3302      	adds	r3, #2
 8007b3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	68b9      	ldr	r1, [r7, #8]
 8007b46:	2022      	movs	r0, #34	@ 0x22
 8007b48:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 8007b4a:	e0a6      	b.n	8007c9a <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 8007b4c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007b50:	2b63      	cmp	r3, #99	@ 0x63
 8007b52:	d112      	bne.n	8007b7a <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	1d19      	adds	r1, r3, #4
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	6011      	str	r1, [r2, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	667b      	str	r3, [r7, #100]	@ 0x64
        out((char) ch, param);
 8007b62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b64:	b2da      	uxtb	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	68b9      	ldr	r1, [r7, #8]
 8007b6a:	4610      	mov	r0, r2
 8007b6c:	4798      	blx	r3
        n++;
 8007b6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b72:	3301      	adds	r3, #1
 8007b74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b78:	e090      	b.n	8007c9c <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 8007b7a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007b7e:	2b73      	cmp	r3, #115	@ 0x73
 8007b80:	d16b      	bne.n	8007c5a <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	1d19      	adds	r1, r3, #4
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	6011      	str	r1, [r2, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8007b90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b96:	d109      	bne.n	8007bac <mg_vxprintf+0x604>
 8007b98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d004      	beq.n	8007ba8 <mg_vxprintf+0x600>
 8007b9e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8007ba0:	f7f8 fbae 	bl	8000300 <strlen>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	e000      	b.n	8007baa <mg_vxprintf+0x602>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	673b      	str	r3, [r7, #112]	@ 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8007bac:	2300      	movs	r3, #0
 8007bae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bb2:	e011      	b.n	8007bd8 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 8007bb4:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8007bb8:	2301      	movs	r3, #1
 8007bba:	68b9      	ldr	r1, [r7, #8]
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f7ff fcb5 	bl	800752c <scpy>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bc8:	4413      	add	r3, r2
 8007bca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8007bce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bd8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10a      	bne.n	8007bf6 <mg_vxprintf+0x64e>
 8007be0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007be2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d206      	bcs.n	8007bf6 <mg_vxprintf+0x64e>
 8007be8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007bec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bee:	4413      	add	r3, r2
 8007bf0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d8de      	bhi.n	8007bb4 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 8007bf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bf8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007bfa:	68b9      	ldr	r1, [r7, #8]
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f7ff fc95 	bl	800752c <scpy>
 8007c02:	4602      	mov	r2, r0
 8007c04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c08:	4413      	add	r3, r2
 8007c0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8007c0e:	2300      	movs	r3, #0
 8007c10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c14:	e011      	b.n	8007c3a <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 8007c16:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	68b9      	ldr	r1, [r7, #8]
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f7ff fc84 	bl	800752c <scpy>
 8007c24:	4602      	mov	r2, r0
 8007c26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8007c30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c34:	3301      	adds	r3, #1
 8007c36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c3a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d02c      	beq.n	8007c9c <mg_vxprintf+0x6f4>
 8007c42:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007c44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d228      	bcs.n	8007c9c <mg_vxprintf+0x6f4>
 8007c4a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007c4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c50:	4413      	add	r3, r2
 8007c52:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d8de      	bhi.n	8007c16 <mg_vxprintf+0x66e>
 8007c58:	e020      	b.n	8007c9c <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 8007c5a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007c5e:	2b25      	cmp	r3, #37	@ 0x25
 8007c60:	d109      	bne.n	8007c76 <mg_vxprintf+0x6ce>
        out('%', param);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	68b9      	ldr	r1, [r7, #8]
 8007c66:	2025      	movs	r0, #37	@ 0x25
 8007c68:	4798      	blx	r3
        n++;
 8007c6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c6e:	3301      	adds	r3, #1
 8007c70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c74:	e012      	b.n	8007c9c <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	68b9      	ldr	r1, [r7, #8]
 8007c7a:	2025      	movs	r0, #37	@ 0x25
 8007c7c:	4798      	blx	r3
        out(c, param);
 8007c7e:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	68b9      	ldr	r1, [r7, #8]
 8007c86:	4610      	mov	r0, r2
 8007c88:	4798      	blx	r3
        n += 2;
 8007c8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c8e:	3302      	adds	r3, #2
 8007c90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c94:	e002      	b.n	8007c9c <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 8007c96:	bf00      	nop
 8007c98:	e000      	b.n	8007c9c <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 8007c9a:	bf00      	nop
      }
      i++;
 8007c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ca6:	e012      	b.n	8007cce <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cae:	4413      	add	r3, r2
 8007cb0:	781a      	ldrb	r2, [r3, #0]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	68b9      	ldr	r1, [r7, #8]
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	4798      	blx	r3
 8007cba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007cc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cc8:	3301      	adds	r3, #1
 8007cca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (fmt[i] != '\0') {
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cd4:	4413      	add	r3, r2
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f47f ac74 	bne.w	80075c6 <mg_vxprintf+0x1e>
    }
  }
  return n;
 8007cde:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3790      	adds	r7, #144	@ 0x90
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007cec:	0802f150 	.word	0x0802f150

08007cf0 <mg_fs_open>:
#endif




struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8007cfc:	2108      	movs	r1, #8
 8007cfe:	2001      	movs	r0, #1
 8007d00:	f022 fcac 	bl	802a65c <calloc>
 8007d04:	4603      	mov	r3, r0
 8007d06:	617b      	str	r3, [r7, #20]
  if (fd != NULL) {
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d013      	beq.n	8007d36 <mg_fs_open+0x46>
    fd->fd = fs->op(path, flags);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	6879      	ldr	r1, [r7, #4]
 8007d14:	68b8      	ldr	r0, [r7, #8]
 8007d16:	4798      	blx	r3
 8007d18:	4602      	mov	r2, r0
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d104      	bne.n	8007d36 <mg_fs_open+0x46>
      free(fd);
 8007d2c:	6978      	ldr	r0, [r7, #20]
 8007d2e:	f022 fcb9 	bl	802a6a4 <free>
      fd = NULL;
 8007d32:	2300      	movs	r3, #0
 8007d34:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 8007d36:	697b      	ldr	r3, [r7, #20]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3718      	adds	r7, #24
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d009      	beq.n	8007d62 <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	6812      	ldr	r2, [r2, #0]
 8007d58:	4610      	mov	r0, r2
 8007d5a:	4798      	blx	r3
    free(fd);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f022 fca1 	bl	802a6a4 <free>
  }
}
 8007d62:	bf00      	nop
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <mg_unpacked>:
  (void) no;
  return NULL;
}
#endif

struct mg_str mg_unpacked(const char *path) {
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b084      	sub	sp, #16
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8007d74:	2300      	movs	r3, #0
 8007d76:	60bb      	str	r3, [r7, #8]
  const char *buf = mg_unpack(path, &len, NULL);
 8007d78:	f107 0308 	add.w	r3, r7, #8
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6838      	ldr	r0, [r7, #0]
 8007d82:	f00d fc13 	bl	80155ac <mg_unpack>
 8007d86:	60f8      	str	r0, [r7, #12]
  return mg_str_n(buf, len);
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68f9      	ldr	r1, [r7, #12]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f009 ffb3 	bl	8011cfa <mg_str_n>
}
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <is_dir_prefix>:

static int is_dir_prefix(const char *prefix, size_t n, const char *path) {
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s] [%s] %c", (int) n, prefix, path, path[n]));
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7f8 faa9 	bl	8000300 <strlen>
 8007dae:	4602      	mov	r2, r0
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d219      	bcs.n	8007dea <is_dir_prefix+0x4e>
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	6879      	ldr	r1, [r7, #4]
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f023 febb 	bl	802bb36 <strncmp>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d111      	bne.n	8007dea <is_dir_prefix+0x4e>
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00c      	beq.n	8007de6 <is_dir_prefix+0x4a>
         (n == 0 || path[n] == '/' || path[n - 1] == '/');
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	2b2f      	cmp	r3, #47	@ 0x2f
 8007dd6:	d006      	beq.n	8007de6 <is_dir_prefix+0x4a>
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	4413      	add	r3, r2
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	2b2f      	cmp	r3, #47	@ 0x2f
 8007de4:	d101      	bne.n	8007dea <is_dir_prefix+0x4e>
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8007de6:	2301      	movs	r3, #1
 8007de8:	e000      	b.n	8007dec <is_dir_prefix+0x50>
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <packed_stat>:

static int packed_stat(const char *path, size_t *size, time_t *mtime) {
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b088      	sub	sp, #32
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t i, n = strlen(path);
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f7f8 fa7d 	bl	8000300 <strlen>
 8007e06:	61b8      	str	r0, [r7, #24]
  if (mg_unpack(path, size, mtime)) return MG_FS_READ;  // Regular file
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	68b9      	ldr	r1, [r7, #8]
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f00d fbcd 	bl	80155ac <mg_unpack>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <packed_stat+0x28>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e017      	b.n	8007e4c <packed_stat+0x58>
  // Scan all files. If `path` is a dir prefix for any of them, it's a dir
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	61fb      	str	r3, [r7, #28]
 8007e20:	e00c      	b.n	8007e3c <packed_stat+0x48>
    if (is_dir_prefix(path, n, p)) return MG_FS_DIR;
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	69b9      	ldr	r1, [r7, #24]
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f7ff ffb8 	bl	8007d9c <is_dir_prefix>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <packed_stat+0x42>
 8007e32:	2304      	movs	r3, #4
 8007e34:	e00a      	b.n	8007e4c <packed_stat+0x58>
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	61fb      	str	r3, [r7, #28]
 8007e3c:	69f8      	ldr	r0, [r7, #28]
 8007e3e:	f00d fba1 	bl	8015584 <mg_unlist>
 8007e42:	6178      	str	r0, [r7, #20]
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1eb      	bne.n	8007e22 <packed_stat+0x2e>
  }
  return 0;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3720      	adds	r7, #32
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <packed_list>:

static void packed_list(const char *dir, void (*fn)(const char *, void *),
                        void *userdata) {
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b0cc      	sub	sp, #304	@ 0x130
 8007e58:	af02      	add	r7, sp, #8
 8007e5a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007e5e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8007e62:	6018      	str	r0, [r3, #0]
 8007e64:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007e68:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8007e6c:	6019      	str	r1, [r3, #0]
 8007e6e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007e72:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007e76:	601a      	str	r2, [r3, #0]
  char buf[MG_PATH_MAX], tmp[sizeof(buf)];
  const char *path, *begin, *end;
  size_t i, n = strlen(dir);
 8007e78:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007e7c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8007e80:	6818      	ldr	r0, [r3, #0]
 8007e82:	f7f8 fa3d 	bl	8000300 <strlen>
 8007e86:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  tmp[0] = '\0';  // Previously listed entry
 8007e8a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007e8e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007e92:	2200      	movs	r2, #0
 8007e94:	701a      	strb	r2, [r3, #0]
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8007e96:	2300      	movs	r3, #0
 8007e98:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8007e9c:	e065      	b.n	8007f6a <packed_list+0x116>
    if (!is_dir_prefix(dir, n, path)) continue;
 8007e9e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007ea2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8007ea6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8007eaa:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 8007eae:	6818      	ldr	r0, [r3, #0]
 8007eb0:	f7ff ff74 	bl	8007d9c <is_dir_prefix>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d04f      	beq.n	8007f5a <packed_list+0x106>
    begin = &path[n + 1];
 8007eba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    end = strchr(begin, '/');
 8007eca:	212f      	movs	r1, #47	@ 0x2f
 8007ecc:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8007ed0:	f023 fe24 	bl	802bb1c <strchr>
 8007ed4:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    if (end == NULL) end = begin + strlen(begin);
 8007ed8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d109      	bne.n	8007ef4 <packed_list+0xa0>
 8007ee0:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8007ee4:	f7f8 fa0c 	bl	8000300 <strlen>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eee:	4413      	add	r3, r2
 8007ef0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    mg_snprintf(buf, sizeof(buf), "%.*s", (int) (end - begin), begin);
 8007ef4:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8007ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007efc:	1ad2      	subs	r2, r2, r3
 8007efe:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8007f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	4a20      	ldr	r2, [pc, #128]	@ (8007f8c <packed_list+0x138>)
 8007f0c:	2180      	movs	r1, #128	@ 0x80
 8007f0e:	f009 f8ef 	bl	80110f0 <mg_snprintf>
    buf[sizeof(buf) - 1] = '\0';
 8007f12:	2300      	movs	r3, #0
 8007f14:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
    // If this entry has been already listed, skip
    // NOTE: we're assuming that file list is sorted alphabetically
    if (strcmp(buf, tmp) == 0) continue;
 8007f18:	f107 0214 	add.w	r2, r7, #20
 8007f1c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8007f20:	4611      	mov	r1, r2
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7f8 f98c 	bl	8000240 <strcmp>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d017      	beq.n	8007f5e <packed_list+0x10a>
    fn(buf, userdata);  // Not yet listed, call user function
 8007f2e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007f32:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8007f36:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8007f3a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007f3e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6811      	ldr	r1, [r2, #0]
 8007f46:	4798      	blx	r3
    strcpy(tmp, buf);   // And save this entry as listed
 8007f48:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8007f4c:	f107 0314 	add.w	r3, r7, #20
 8007f50:	4611      	mov	r1, r2
 8007f52:	4618      	mov	r0, r3
 8007f54:	f024 fb07 	bl	802c566 <strcpy>
 8007f58:	e002      	b.n	8007f60 <packed_list+0x10c>
    if (!is_dir_prefix(dir, n, path)) continue;
 8007f5a:	bf00      	nop
 8007f5c:	e000      	b.n	8007f60 <packed_list+0x10c>
    if (strcmp(buf, tmp) == 0) continue;
 8007f5e:	bf00      	nop
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8007f60:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007f64:	3301      	adds	r3, #1
 8007f66:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8007f6a:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8007f6e:	f00d fb09 	bl	8015584 <mg_unlist>
 8007f72:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
 8007f76:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d18f      	bne.n	8007e9e <packed_list+0x4a>
  }
}
 8007f7e:	bf00      	nop
 8007f80:	bf00      	nop
 8007f82:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	0802f134 	.word	0x0802f134

08007f90 <packed_open>:

static void *packed_open(const char *path, int flags) {
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  size_t size = 0;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	60fb      	str	r3, [r7, #12]
  const char *data = mg_unpack(path, &size, NULL);
 8007f9e:	f107 030c 	add.w	r3, r7, #12
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f00d fb00 	bl	80155ac <mg_unpack>
 8007fac:	6178      	str	r0, [r7, #20]
  struct packed_file *fp = NULL;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	613b      	str	r3, [r7, #16]
  if (data == NULL) return NULL;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d101      	bne.n	8007fbc <packed_open+0x2c>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	e016      	b.n	8007fea <packed_open+0x5a>
  if (flags & MG_FS_WRITE) return NULL;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	f003 0302 	and.w	r3, r3, #2
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <packed_open+0x3a>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	e00f      	b.n	8007fea <packed_open+0x5a>
  if ((fp = (struct packed_file *) calloc(1, sizeof(*fp))) != NULL) {
 8007fca:	210c      	movs	r1, #12
 8007fcc:	2001      	movs	r0, #1
 8007fce:	f022 fb45 	bl	802a65c <calloc>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	613b      	str	r3, [r7, #16]
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d005      	beq.n	8007fe8 <packed_open+0x58>
    fp->size = size;
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	605a      	str	r2, [r3, #4]
    fp->data = data;
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	601a      	str	r2, [r3, #0]
  }
  return (void *) fp;
 8007fe8:	693b      	ldr	r3, [r7, #16]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <packed_close>:

static void packed_close(void *fp) {
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b082      	sub	sp, #8
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  if (fp != NULL) free(fp);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <packed_close+0x14>
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f022 fb4f 	bl	802a6a4 <free>
}
 8008006:	bf00      	nop
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <packed_read>:

static size_t packed_read(void *fd, void *buf, size_t len) {
 800800e:	b580      	push	{r7, lr}
 8008010:	b086      	sub	sp, #24
 8008012:	af00      	add	r7, sp, #0
 8008014:	60f8      	str	r0, [r7, #12]
 8008016:	60b9      	str	r1, [r7, #8]
 8008018:	607a      	str	r2, [r7, #4]
  struct packed_file *fp = (struct packed_file *) fd;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	617b      	str	r3, [r7, #20]
  if (fp->pos + len > fp->size) len = fp->size - fp->pos;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	689a      	ldr	r2, [r3, #8]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	441a      	add	r2, r3
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	429a      	cmp	r2, r3
 800802c:	d905      	bls.n	800803a <packed_read+0x2c>
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	607b      	str	r3, [r7, #4]
  memcpy(buf, &fp->data[fp->pos], len);
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	4413      	add	r3, r2
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	4619      	mov	r1, r3
 8008048:	68b8      	ldr	r0, [r7, #8]
 800804a:	f024 fa94 	bl	802c576 <memcpy>
  fp->pos += len;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	689a      	ldr	r2, [r3, #8]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	441a      	add	r2, r3
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	609a      	str	r2, [r3, #8]
  return len;
 800805a:	687b      	ldr	r3, [r7, #4]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3718      	adds	r7, #24
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <packed_write>:

static size_t packed_write(void *fd, const void *buf, size_t len) {
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <packed_seek>:

static size_t packed_seek(void *fd, size_t offset) {
 800807e:	b480      	push	{r7}
 8008080:	b085      	sub	sp, #20
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	6039      	str	r1, [r7, #0]
  struct packed_file *fp = (struct packed_file *) fd;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	60fb      	str	r3, [r7, #12]
  fp->pos = offset;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	609a      	str	r2, [r3, #8]
  if (fp->pos > fp->size) fp->pos = fp->size;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	689a      	ldr	r2, [r3, #8]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	429a      	cmp	r2, r3
 800809c:	d903      	bls.n	80080a6 <packed_seek+0x28>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	685a      	ldr	r2, [r3, #4]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	609a      	str	r2, [r3, #8]
  return fp->pos;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	689b      	ldr	r3, [r3, #8]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3714      	adds	r7, #20
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr

080080b6 <packed_rename>:

static bool packed_rename(const char *from, const char *to) {
 80080b6:	b480      	push	{r7}
 80080b8:	b083      	sub	sp, #12
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	370c      	adds	r7, #12
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <packed_remove>:

static bool packed_remove(const char *path) {
 80080ce:	b480      	push	{r7}
 80080d0:	b083      	sub	sp, #12
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <packed_mkdir>:

static bool packed_mkdir(const char *path) {
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 80080fa:	b480      	push	{r7}
 80080fc:	b085      	sub	sp, #20
 80080fe:	af00      	add	r7, sp, #0
 8008100:	60f8      	str	r0, [r7, #12]
 8008102:	60b9      	str	r1, [r7, #8]
 8008104:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 8008120:	bf00      	nop
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <p_open>:
static void *p_open(const char *path, int flags) {
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <p_close>:
static void p_close(void *fp) {
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 800814c:	bf00      	nop
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 8008172:	b480      	push	{r7}
 8008174:	b085      	sub	sp, #20
 8008176:	af00      	add	r7, sp, #0
 8008178:	60f8      	str	r0, [r7, #12]
 800817a:	60b9      	str	r1, [r7, #8]
 800817c:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 8008196:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800819a:	4618      	mov	r0, r3
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <p_rename>:
static bool p_rename(const char *from, const char *to) {
 80081a6:	b480      	push	{r7}
 80081a8:	b083      	sub	sp, #12
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <p_remove>:
static bool p_remove(const char *path) {
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <p_mkdir>:
static bool p_mkdir(const char *path) {
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
	...

080081ec <mg_to_size_t>:




bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 80081ec:	b480      	push	{r7}
 80081ee:	b08b      	sub	sp, #44	@ 0x2c
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	f107 0308 	add.w	r3, r7, #8
 80081f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80081fa:	607a      	str	r2, [r7, #4]
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 80081fc:	2300      	movs	r3, #0
 80081fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008200:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008204:	61bb      	str	r3, [r7, #24]
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	4a42      	ldr	r2, [pc, #264]	@ (8008314 <mg_to_size_t+0x128>)
 800820a:	fba2 2303 	umull	r2, r3, r2, r3
 800820e:	08db      	lsrs	r3, r3, #3
 8008210:	617b      	str	r3, [r7, #20]
 8008212:	2300      	movs	r3, #0
 8008214:	623b      	str	r3, [r7, #32]
 8008216:	2300      	movs	r3, #0
 8008218:	61fb      	str	r3, [r7, #28]
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 800821a:	e002      	b.n	8008222 <mg_to_size_t+0x36>
 800821c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821e:	3301      	adds	r3, #1
 8008220:	627b      	str	r3, [r7, #36]	@ 0x24
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008226:	429a      	cmp	r2, r3
 8008228:	d20b      	bcs.n	8008242 <mg_to_size_t+0x56>
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822e:	4413      	add	r3, r2
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	2b20      	cmp	r3, #32
 8008234:	d0f2      	beq.n	800821c <mg_to_size_t+0x30>
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823a:	4413      	add	r3, r2
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	2b09      	cmp	r3, #9
 8008240:	d0ec      	beq.n	800821c <mg_to_size_t+0x30>
  if (i < str.len && str.buf[i] == '-') return false;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008246:	429a      	cmp	r2, r3
 8008248:	d22b      	bcs.n	80082a2 <mg_to_size_t+0xb6>
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824e:	4413      	add	r3, r2
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	2b2d      	cmp	r3, #45	@ 0x2d
 8008254:	d125      	bne.n	80082a2 <mg_to_size_t+0xb6>
 8008256:	2300      	movs	r3, #0
 8008258:	e056      	b.n	8008308 <mg_to_size_t+0x11c>
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
    size_t digit = (size_t) (str.buf[i] - '0');
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825e:	4413      	add	r3, r2
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	3b30      	subs	r3, #48	@ 0x30
 8008264:	613b      	str	r3, [r7, #16]
    if (result > max2) return false;  // Overflow
 8008266:	6a3a      	ldr	r2, [r7, #32]
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	429a      	cmp	r2, r3
 800826c:	d901      	bls.n	8008272 <mg_to_size_t+0x86>
 800826e:	2300      	movs	r3, #0
 8008270:	e04a      	b.n	8008308 <mg_to_size_t+0x11c>
    result *= 10;
 8008272:	6a3a      	ldr	r2, [r7, #32]
 8008274:	4613      	mov	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	005b      	lsls	r3, r3, #1
 800827c:	623b      	str	r3, [r7, #32]
    if (result > max - digit) return false;  // Overflow
 800827e:	69ba      	ldr	r2, [r7, #24]
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	1ad3      	subs	r3, r2, r3
 8008284:	6a3a      	ldr	r2, [r7, #32]
 8008286:	429a      	cmp	r2, r3
 8008288:	d901      	bls.n	800828e <mg_to_size_t+0xa2>
 800828a:	2300      	movs	r3, #0
 800828c:	e03c      	b.n	8008308 <mg_to_size_t+0x11c>
    result += digit;
 800828e:	6a3a      	ldr	r2, [r7, #32]
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	4413      	add	r3, r2
 8008294:	623b      	str	r3, [r7, #32]
    i++, ndigits++;
 8008296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008298:	3301      	adds	r3, #1
 800829a:	627b      	str	r3, [r7, #36]	@ 0x24
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	3301      	adds	r3, #1
 80082a0:	61fb      	str	r3, [r7, #28]
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d20f      	bcs.n	80082ca <mg_to_size_t+0xde>
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ae:	4413      	add	r3, r2
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	2b2f      	cmp	r3, #47	@ 0x2f
 80082b4:	d909      	bls.n	80082ca <mg_to_size_t+0xde>
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ba:	4413      	add	r3, r2
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	2b39      	cmp	r3, #57	@ 0x39
 80082c0:	d9cb      	bls.n	800825a <mg_to_size_t+0x6e>
  }
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 80082c2:	e002      	b.n	80082ca <mg_to_size_t+0xde>
 80082c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c6:	3301      	adds	r3, #1
 80082c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d20b      	bcs.n	80082ea <mg_to_size_t+0xfe>
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d6:	4413      	add	r3, r2
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2b20      	cmp	r3, #32
 80082dc:	d0f2      	beq.n	80082c4 <mg_to_size_t+0xd8>
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e2:	4413      	add	r3, r2
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	2b09      	cmp	r3, #9
 80082e8:	d0ec      	beq.n	80082c4 <mg_to_size_t+0xd8>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <mg_to_size_t+0x108>
 80082f0:	2300      	movs	r3, #0
 80082f2:	e009      	b.n	8008308 <mg_to_size_t+0x11c>
  if (i != str.len) return false;  // Ditto
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d001      	beq.n	8008300 <mg_to_size_t+0x114>
 80082fc:	2300      	movs	r3, #0
 80082fe:	e003      	b.n	8008308 <mg_to_size_t+0x11c>
  *val = (size_t) result;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a3a      	ldr	r2, [r7, #32]
 8008304:	601a      	str	r2, [r3, #0]
  return true;
 8008306:	2301      	movs	r3, #1
}
 8008308:	4618      	mov	r0, r3
 800830a:	372c      	adds	r7, #44	@ 0x2c
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr
 8008314:	cccccccd 	.word	0xcccccccd

08008318 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 8008318:	b082      	sub	sp, #8
 800831a:	b580      	push	{r7, lr}
 800831c:	b08e      	sub	sp, #56	@ 0x38
 800831e:	af02      	add	r7, sp, #8
 8008320:	60f8      	str	r0, [r7, #12]
 8008322:	1d38      	adds	r0, r7, #4
 8008324:	e880 0006 	stmia.w	r0, {r1, r2}
 8008328:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 800832a:	f107 0310 	add.w	r3, r7, #16
 800832e:	2200      	movs	r2, #0
 8008330:	2100      	movs	r1, #0
 8008332:	4618      	mov	r0, r3
 8008334:	f009 fce1 	bl	8011cfa <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 8008338:	e023      	b.n	8008382 <mg_http_var+0x6a>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 800833a:	f107 0318 	add.w	r3, r7, #24
 800833e:	f107 0220 	add.w	r2, r7, #32
 8008342:	213d      	movs	r1, #61	@ 0x3d
 8008344:	9100      	str	r1, [sp, #0]
 8008346:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800834a:	c903      	ldmia	r1, {r0, r1}
 800834c:	f009 ff34 	bl	80121b8 <mg_span>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d015      	beq.n	8008382 <mg_http_var+0x6a>
 8008356:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835a:	429a      	cmp	r2, r3
 800835c:	d111      	bne.n	8008382 <mg_http_var+0x6a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 800835e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008360:	6a39      	ldr	r1, [r7, #32]
 8008362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008364:	4618      	mov	r0, r3
 8008366:	f009 fcf7 	bl	8011d58 <mg_ncasecmp>
 800836a:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 800836c:	2b00      	cmp	r3, #0
 800836e:	d108      	bne.n	8008382 <mg_http_var+0x6a>
      result = v;
 8008370:	f107 0310 	add.w	r3, r7, #16
 8008374:	f107 0218 	add.w	r2, r7, #24
 8008378:	e892 0003 	ldmia.w	r2, {r0, r1}
 800837c:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 8008380:	e00b      	b.n	800839a <mg_http_var+0x82>
  while (mg_span(buf, &entry, &buf, '&')) {
 8008382:	1d3b      	adds	r3, r7, #4
 8008384:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8008388:	2126      	movs	r1, #38	@ 0x26
 800838a:	9100      	str	r1, [sp, #0]
 800838c:	1d39      	adds	r1, r7, #4
 800838e:	c903      	ldmia	r1, {r0, r1}
 8008390:	f009 ff12 	bl	80121b8 <mg_span>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1cf      	bne.n	800833a <mg_http_var+0x22>
    }
  }
  return result;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	461a      	mov	r2, r3
 800839e:	f107 0310 	add.w	r3, r7, #16
 80083a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80083a6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	3730      	adds	r7, #48	@ 0x30
 80083ae:	46bd      	mov	sp, r7
 80083b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083b4:	b002      	add	sp, #8
 80083b6:	4770      	bx	lr

080083b8 <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08c      	sub	sp, #48	@ 0x30
 80083bc:	af02      	add	r7, sp, #8
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
 80083c4:	603b      	str	r3, [r7, #0]
  int len;
  if (dst != NULL && dst_len > 0) {
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d005      	beq.n	80083d8 <mg_http_get_var+0x20>
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d002      	beq.n	80083d8 <mg_http_get_var+0x20>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	701a      	strb	r2, [r3, #0]
  }
  if (dst == NULL || dst_len == 0) {
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d002      	beq.n	80083e4 <mg_http_get_var+0x2c>
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d103      	bne.n	80083ec <mg_http_get_var+0x34>
    len = -2;  // Bad destination
 80083e4:	f06f 0301 	mvn.w	r3, #1
 80083e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80083ea:	e033      	b.n	8008454 <mg_http_get_var+0x9c>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d006      	beq.n	8008402 <mg_http_get_var+0x4a>
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d003      	beq.n	8008402 <mg_http_get_var+0x4a>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d103      	bne.n	800840a <mg_http_get_var+0x52>
    len = -1;  // Bad source
 8008402:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008406:	627b      	str	r3, [r7, #36]	@ 0x24
 8008408:	e024      	b.n	8008454 <mg_http_get_var+0x9c>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 800840a:	f107 031c 	add.w	r3, r7, #28
 800840e:	68b9      	ldr	r1, [r7, #8]
 8008410:	4618      	mov	r0, r3
 8008412:	f009 fc55 	bl	8011cc0 <mg_str_s>
 8008416:	f107 0014 	add.w	r0, r7, #20
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	6a3b      	ldr	r3, [r7, #32]
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	ca06      	ldmia	r2, {r1, r2}
 8008424:	f7ff ff78 	bl	8008318 <mg_http_var>
    if (v.buf == NULL) {
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d103      	bne.n	8008436 <mg_http_get_var+0x7e>
      len = -4;  // Name does not exist
 800842e:	f06f 0303 	mvn.w	r3, #3
 8008432:	627b      	str	r3, [r7, #36]	@ 0x24
 8008434:	e00e      	b.n	8008454 <mg_http_get_var+0x9c>
    } else {
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 8008436:	6978      	ldr	r0, [r7, #20]
 8008438:	69b9      	ldr	r1, [r7, #24]
 800843a:	2301      	movs	r3, #1
 800843c:	9300      	str	r3, [sp, #0]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	f000 f82e 	bl	80084a2 <mg_url_decode>
 8008446:	6278      	str	r0, [r7, #36]	@ 0x24
      if (len < 0) len = -3;  // Failed to decode
 8008448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844a:	2b00      	cmp	r3, #0
 800844c:	da02      	bge.n	8008454 <mg_http_get_var+0x9c>
 800844e:	f06f 0302 	mvn.w	r3, #2
 8008452:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return len;
 8008454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008456:	4618      	mov	r0, r3
 8008458:	3728      	adds	r7, #40	@ 0x28
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <isx>:

static bool isx(int c) {
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b2f      	cmp	r3, #47	@ 0x2f
 800846a:	dd02      	ble.n	8008472 <isx+0x14>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b39      	cmp	r3, #57	@ 0x39
 8008470:	dd0b      	ble.n	800848a <isx+0x2c>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b60      	cmp	r3, #96	@ 0x60
 8008476:	dd02      	ble.n	800847e <isx+0x20>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b66      	cmp	r3, #102	@ 0x66
 800847c:	dd05      	ble.n	800848a <isx+0x2c>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2b40      	cmp	r3, #64	@ 0x40
 8008482:	dd04      	ble.n	800848e <isx+0x30>
         (c >= 'A' && c <= 'F');
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b46      	cmp	r3, #70	@ 0x46
 8008488:	dc01      	bgt.n	800848e <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800848a:	2301      	movs	r3, #1
 800848c:	e000      	b.n	8008490 <isx+0x32>
 800848e:	2300      	movs	r3, #0
 8008490:	f003 0301 	and.w	r3, r3, #1
 8008494:	b2db      	uxtb	r3, r3
}
 8008496:	4618      	mov	r0, r3
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b086      	sub	sp, #24
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	60f8      	str	r0, [r7, #12]
 80084aa:	60b9      	str	r1, [r7, #8]
 80084ac:	607a      	str	r2, [r7, #4]
 80084ae:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 80084b0:	2300      	movs	r3, #0
 80084b2:	613b      	str	r3, [r7, #16]
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	617b      	str	r3, [r7, #20]
 80084b8:	e04f      	b.n	800855a <mg_url_decode+0xb8>
    if (src[i] == '%') {
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	4413      	add	r3, r2
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	2b25      	cmp	r3, #37	@ 0x25
 80084c4:	d12c      	bne.n	8008520 <mg_url_decode+0x7e>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	3302      	adds	r3, #2
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d924      	bls.n	800851a <mg_url_decode+0x78>
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	3301      	adds	r3, #1
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	4413      	add	r3, r2
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	4618      	mov	r0, r3
 80084dc:	f7ff ffbf 	bl	800845e <isx>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d019      	beq.n	800851a <mg_url_decode+0x78>
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	3302      	adds	r3, #2
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	4413      	add	r3, r2
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7ff ffb4 	bl	800845e <isx>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00e      	beq.n	800851a <mg_url_decode+0x78>
        mg_unhex(src + i + 1, 2, (uint8_t *) &dst[j]);
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	3301      	adds	r3, #1
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	18d0      	adds	r0, r2, r3
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	4413      	add	r3, r2
 800850a:	461a      	mov	r2, r3
 800850c:	2102      	movs	r1, #2
 800850e:	f009 ff38 	bl	8012382 <mg_unhex>
        i += 2;
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	3302      	adds	r3, #2
 8008516:	617b      	str	r3, [r7, #20]
 8008518:	e019      	b.n	800854e <mg_url_decode+0xac>
      } else {
        return -1;
 800851a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800851e:	e03a      	b.n	8008596 <mg_url_decode+0xf4>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 8008520:	6a3b      	ldr	r3, [r7, #32]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00b      	beq.n	800853e <mg_url_decode+0x9c>
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	4413      	add	r3, r2
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008530:	d105      	bne.n	800853e <mg_url_decode+0x9c>
      dst[j] = ' ';
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	4413      	add	r3, r2
 8008538:	2220      	movs	r2, #32
 800853a:	701a      	strb	r2, [r3, #0]
 800853c:	e007      	b.n	800854e <mg_url_decode+0xac>
    } else {
      dst[j] = src[i];
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	441a      	add	r2, r3
 8008544:	6879      	ldr	r1, [r7, #4]
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	440b      	add	r3, r1
 800854a:	7812      	ldrb	r2, [r2, #0]
 800854c:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	3301      	adds	r3, #1
 8008552:	617b      	str	r3, [r7, #20]
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	3301      	adds	r3, #1
 8008558:	613b      	str	r3, [r7, #16]
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	429a      	cmp	r2, r3
 8008560:	d204      	bcs.n	800856c <mg_url_decode+0xca>
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	3301      	adds	r3, #1
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	429a      	cmp	r2, r3
 800856a:	d8a6      	bhi.n	80084ba <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	429a      	cmp	r2, r3
 8008572:	d204      	bcs.n	800857e <mg_url_decode+0xdc>
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	4413      	add	r3, r2
 800857a:	2200      	movs	r2, #0
 800857c:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	429a      	cmp	r2, r3
 8008584:	d305      	bcc.n	8008592 <mg_url_decode+0xf0>
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	429a      	cmp	r2, r3
 800858c:	d201      	bcs.n	8008592 <mg_url_decode+0xf0>
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	e001      	b.n	8008596 <mg_url_decode+0xf4>
 8008592:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8008596:	4618      	mov	r0, r3
 8008598:	3718      	adds	r7, #24
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <isok>:

static bool isok(uint8_t c) {
 800859e:	b480      	push	{r7}
 80085a0:	b083      	sub	sp, #12
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	4603      	mov	r3, r0
 80085a6:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c >= ' ';
 80085a8:	79fb      	ldrb	r3, [r7, #7]
 80085aa:	2b0a      	cmp	r3, #10
 80085ac:	d005      	beq.n	80085ba <isok+0x1c>
 80085ae:	79fb      	ldrb	r3, [r7, #7]
 80085b0:	2b0d      	cmp	r3, #13
 80085b2:	d002      	beq.n	80085ba <isok+0x1c>
 80085b4:	79fb      	ldrb	r3, [r7, #7]
 80085b6:	2b1f      	cmp	r3, #31
 80085b8:	d901      	bls.n	80085be <isok+0x20>
 80085ba:	2301      	movs	r3, #1
 80085bc:	e000      	b.n	80085c0 <isok+0x22>
 80085be:	2300      	movs	r3, #0
 80085c0:	f003 0301 	and.w	r3, r3, #1
 80085c4:	b2db      	uxtb	r3, r3
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b084      	sub	sp, #16
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 80085dc:	2300      	movs	r3, #0
 80085de:	60fb      	str	r3, [r7, #12]
 80085e0:	e03c      	b.n	800865c <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	4413      	add	r3, r2
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7ff ffd7 	bl	800859e <isok>
 80085f0:	4603      	mov	r3, r0
 80085f2:	f083 0301 	eor.w	r3, r3, #1
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d002      	beq.n	8008602 <mg_http_get_request_len+0x30>
 80085fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008600:	e031      	b.n	8008666 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00c      	beq.n	8008622 <mg_http_get_request_len+0x50>
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	4413      	add	r3, r2
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	2b0a      	cmp	r3, #10
 8008612:	d106      	bne.n	8008622 <mg_http_get_request_len+0x50>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	3b01      	subs	r3, #1
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	4413      	add	r3, r2
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	2b0a      	cmp	r3, #10
 8008620:	d016      	beq.n	8008650 <mg_http_get_request_len+0x7e>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2b03      	cmp	r3, #3
 8008626:	d916      	bls.n	8008656 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	4413      	add	r3, r2
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	2b0a      	cmp	r3, #10
 8008632:	d110      	bne.n	8008656 <mg_http_get_request_len+0x84>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	3b01      	subs	r3, #1
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	4413      	add	r3, r2
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	2b0d      	cmp	r3, #13
 8008640:	d109      	bne.n	8008656 <mg_http_get_request_len+0x84>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	3b02      	subs	r3, #2
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	4413      	add	r3, r2
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	2b0a      	cmp	r3, #10
 800864e:	d102      	bne.n	8008656 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	3301      	adds	r3, #1
 8008654:	e007      	b.n	8008666 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	3301      	adds	r3, #1
 800865a:	60fb      	str	r3, [r7, #12]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	429a      	cmp	r2, r3
 8008662:	d3be      	bcc.n	80085e2 <mg_http_get_request_len+0x10>
  }
  return 0;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 800866e:	b580      	push	{r7, lr}
 8008670:	b088      	sub	sp, #32
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 8008678:	6838      	ldr	r0, [r7, #0]
 800867a:	f7f7 fe41 	bl	8000300 <strlen>
 800867e:	61b8      	str	r0, [r7, #24]
 8008680:	231e      	movs	r3, #30
 8008682:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8008684:	2300      	movs	r3, #0
 8008686:	61fb      	str	r3, [r7, #28]
 8008688:	e01f      	b.n	80086ca <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	3302      	adds	r3, #2
 800868e:	011b      	lsls	r3, r3, #4
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	4413      	add	r3, r2
 8008694:	613b      	str	r3, [r7, #16]
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	011b      	lsls	r3, r3, #4
 800869a:	3328      	adds	r3, #40	@ 0x28
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	4413      	add	r3, r2
 80086a0:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d10b      	bne.n	80086c4 <mg_http_get_header+0x56>
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f009 fb4f 	bl	8011d58 <mg_ncasecmp>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <mg_http_get_header+0x56>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	e010      	b.n	80086e6 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	3301      	adds	r3, #1
 80086c8:	61fb      	str	r3, [r7, #28]
 80086ca:	69fa      	ldr	r2, [r7, #28]
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d208      	bcs.n	80086e4 <mg_http_get_header+0x76>
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	3302      	adds	r3, #2
 80086d8:	011b      	lsls	r3, r3, #4
 80086da:	4413      	add	r3, r2
 80086dc:	3304      	adds	r3, #4
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1d2      	bne.n	800868a <mg_http_get_header+0x1c>
  }
  return NULL;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3720      	adds	r7, #32
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <vcb>:

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
 80086ee:	b480      	push	{r7}
 80086f0:	b083      	sub	sp, #12
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	4603      	mov	r3, r0
 80086f6:	71fb      	strb	r3, [r7, #7]
  return (c & 0xc0) == 0x80;
 80086f8:	79fb      	ldrb	r3, [r7, #7]
 80086fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80086fe:	2b80      	cmp	r3, #128	@ 0x80
 8008700:	bf0c      	ite	eq
 8008702:	2301      	moveq	r3, #1
 8008704:	2300      	movne	r3, #0
 8008706:	b2db      	uxtb	r3, r3
}
 8008708:	4618      	mov	r0, r3
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  const unsigned char *u = (unsigned char *) s, c = *u;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	617b      	str	r3, [r7, #20]
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	74fb      	strb	r3, [r7, #19]
  long n = (long) (end - s);
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	60fb      	str	r3, [r7, #12]
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 8008730:	7cfb      	ldrb	r3, [r7, #19]
 8008732:	2b20      	cmp	r3, #32
 8008734:	d904      	bls.n	8008740 <clen+0x2c>
 8008736:	7cfb      	ldrb	r3, [r7, #19]
 8008738:	2b7d      	cmp	r3, #125	@ 0x7d
 800873a:	d801      	bhi.n	8008740 <clen+0x2c>
 800873c:	2301      	movs	r3, #1
 800873e:	e054      	b.n	80087ea <clen+0xd6>
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 8008740:	7cfb      	ldrb	r3, [r7, #19]
 8008742:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8008746:	2bc0      	cmp	r3, #192	@ 0xc0
 8008748:	d10d      	bne.n	8008766 <clen+0x52>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2b01      	cmp	r3, #1
 800874e:	dd0a      	ble.n	8008766 <clen+0x52>
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	3301      	adds	r3, #1
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	4618      	mov	r0, r3
 8008758:	f7ff ffc9 	bl	80086ee <vcb>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d001      	beq.n	8008766 <clen+0x52>
 8008762:	2302      	movs	r3, #2
 8008764:	e041      	b.n	80087ea <clen+0xd6>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 8008766:	7cfb      	ldrb	r3, [r7, #19]
 8008768:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800876c:	2be0      	cmp	r3, #224	@ 0xe0
 800876e:	d116      	bne.n	800879e <clen+0x8a>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2b02      	cmp	r3, #2
 8008774:	dd13      	ble.n	800879e <clen+0x8a>
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	3301      	adds	r3, #1
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	4618      	mov	r0, r3
 800877e:	f7ff ffb6 	bl	80086ee <vcb>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00a      	beq.n	800879e <clen+0x8a>
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	3302      	adds	r3, #2
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	4618      	mov	r0, r3
 8008790:	f7ff ffad 	bl	80086ee <vcb>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <clen+0x8a>
 800879a:	2303      	movs	r3, #3
 800879c:	e025      	b.n	80087ea <clen+0xd6>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 800879e:	7cfb      	ldrb	r3, [r7, #19]
 80087a0:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80087a4:	2bf0      	cmp	r3, #240	@ 0xf0
 80087a6:	d11f      	bne.n	80087e8 <clen+0xd4>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2b03      	cmp	r3, #3
 80087ac:	dd1c      	ble.n	80087e8 <clen+0xd4>
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	3301      	adds	r3, #1
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7ff ff9a 	bl	80086ee <vcb>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d013      	beq.n	80087e8 <clen+0xd4>
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	3302      	adds	r3, #2
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7ff ff91 	bl	80086ee <vcb>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00a      	beq.n	80087e8 <clen+0xd4>
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	3303      	adds	r3, #3
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	4618      	mov	r0, r3
 80087da:	f7ff ff88 	bl	80086ee <vcb>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <clen+0xd4>
    return 4;
 80087e4:	2304      	movs	r3, #4
 80087e6:	e000      	b.n	80087ea <clen+0xd6>
  return 0;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3718      	adds	r7, #24
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 80087f2:	b480      	push	{r7}
 80087f4:	b085      	sub	sp, #20
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	60f8      	str	r0, [r7, #12]
 80087fa:	60b9      	str	r1, [r7, #8]
 80087fc:	607a      	str	r2, [r7, #4]
  v->buf = (char *) s;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 8008804:	e007      	b.n	8008816 <skiptorn+0x24>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	3301      	adds	r3, #1
 800880a:	60fb      	str	r3, [r7, #12]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	1c5a      	adds	r2, r3, #1
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	605a      	str	r2, [r3, #4]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	429a      	cmp	r2, r3
 800881c:	d207      	bcs.n	800882e <skiptorn+0x3c>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	2b0a      	cmp	r3, #10
 8008824:	d003      	beq.n	800882e <skiptorn+0x3c>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	2b0d      	cmp	r3, #13
 800882c:	d1eb      	bne.n	8008806 <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	429a      	cmp	r2, r3
 8008834:	d208      	bcs.n	8008848 <skiptorn+0x56>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	2b0d      	cmp	r3, #13
 800883c:	d106      	bne.n	800884c <skiptorn+0x5a>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	3301      	adds	r3, #1
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	2b0a      	cmp	r3, #10
 8008846:	d001      	beq.n	800884c <skiptorn+0x5a>
 8008848:	2300      	movs	r3, #0
 800884a:	e017      	b.n	800887c <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	429a      	cmp	r2, r3
 8008852:	d206      	bcs.n	8008862 <skiptorn+0x70>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	2b0d      	cmp	r3, #13
 800885a:	d102      	bne.n	8008862 <skiptorn+0x70>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	3301      	adds	r3, #1
 8008860:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	429a      	cmp	r2, r3
 8008868:	d205      	bcs.n	8008876 <skiptorn+0x84>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	1c5a      	adds	r2, r3, #1
 800886e:	60fa      	str	r2, [r7, #12]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	2b0a      	cmp	r3, #10
 8008874:	d001      	beq.n	800887a <skiptorn+0x88>
 8008876:	2300      	movs	r3, #0
 8008878:	e000      	b.n	800887c <skiptorn+0x8a>
  return s;
 800887a:	68fb      	ldr	r3, [r7, #12]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3714      	adds	r7, #20
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 8008888:	b580      	push	{r7, lr}
 800888a:	b08a      	sub	sp, #40	@ 0x28
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
 8008894:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 8008896:	2300      	movs	r3, #0
 8008898:	627b      	str	r3, [r7, #36]	@ 0x24
 800889a:	e08e      	b.n	80089ba <mg_http_parse_headers+0x132>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 800889c:	2300      	movs	r3, #0
 800889e:	61bb      	str	r3, [r7, #24]
 80088a0:	2300      	movs	r3, #0
 80088a2:	61fb      	str	r3, [r7, #28]
 80088a4:	2300      	movs	r3, #0
 80088a6:	613b      	str	r3, [r7, #16]
 80088a8:	2300      	movs	r3, #0
 80088aa:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d301      	bcc.n	80088b8 <mg_http_parse_headers+0x30>
 80088b4:	2300      	movs	r3, #0
 80088b6:	e086      	b.n	80089c6 <mg_http_parse_headers+0x13e>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	2b0a      	cmp	r3, #10
 80088be:	f000 8081 	beq.w	80089c4 <mg_http_parse_headers+0x13c>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	2b0d      	cmp	r3, #13
 80088c8:	d104      	bne.n	80088d4 <mg_http_parse_headers+0x4c>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	3301      	adds	r3, #1
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	2b0a      	cmp	r3, #10
 80088d2:	d077      	beq.n	80089c4 <mg_http_parse_headers+0x13c>
    k.buf = (char *) s;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 80088d8:	e007      	b.n	80088ea <mg_http_parse_headers+0x62>
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	4413      	add	r3, r2
 80088e0:	60fb      	str	r3, [r7, #12]
 80088e2:	69fa      	ldr	r2, [r7, #28]
 80088e4:	6a3b      	ldr	r3, [r7, #32]
 80088e6:	4413      	add	r3, r2
 80088e8:	61fb      	str	r3, [r7, #28]
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d20b      	bcs.n	800890a <mg_http_parse_headers+0x82>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	2b3a      	cmp	r3, #58	@ 0x3a
 80088f8:	d007      	beq.n	800890a <mg_http_parse_headers+0x82>
 80088fa:	68b9      	ldr	r1, [r7, #8]
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f7ff ff09 	bl	8008714 <clen>
 8008902:	6238      	str	r0, [r7, #32]
 8008904:	6a3b      	ldr	r3, [r7, #32]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1e7      	bne.n	80088da <mg_http_parse_headers+0x52>
    if (k.len == 0) return false;                     // Empty name
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <mg_http_parse_headers+0x8c>
 8008910:	2300      	movs	r3, #0
 8008912:	e058      	b.n	80089c6 <mg_http_parse_headers+0x13e>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	429a      	cmp	r2, r3
 800891a:	d206      	bcs.n	800892a <mg_http_parse_headers+0xa2>
 800891c:	68b9      	ldr	r1, [r7, #8]
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f7ff fef8 	bl	8008714 <clen>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d101      	bne.n	800892e <mg_http_parse_headers+0xa6>
 800892a:	2300      	movs	r3, #0
 800892c:	e04b      	b.n	80089c6 <mg_http_parse_headers+0x13e>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	1c5a      	adds	r2, r3, #1
 8008932:	60fa      	str	r2, [r7, #12]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	2b3a      	cmp	r3, #58	@ 0x3a
 8008938:	d004      	beq.n	8008944 <mg_http_parse_headers+0xbc>
 800893a:	2300      	movs	r3, #0
 800893c:	e043      	b.n	80089c6 <mg_http_parse_headers+0x13e>
    // if (clen(s, end) == 0) return false;        // Invalid UTF-8
    while (s < end && s[0] == ' ') s++;  // Skip spaces
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3301      	adds	r3, #1
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	429a      	cmp	r2, r3
 800894a:	d203      	bcs.n	8008954 <mg_http_parse_headers+0xcc>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	2b20      	cmp	r3, #32
 8008952:	d0f4      	beq.n	800893e <mg_http_parse_headers+0xb6>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 8008954:	f107 0310 	add.w	r3, r7, #16
 8008958:	461a      	mov	r2, r3
 800895a:	68b9      	ldr	r1, [r7, #8]
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f7ff ff48 	bl	80087f2 <skiptorn>
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d104      	bne.n	8008974 <mg_http_parse_headers+0xec>
 800896a:	2300      	movs	r3, #0
 800896c:	e02b      	b.n	80089c6 <mg_http_parse_headers+0x13e>
    while (v.len > 0 && v.buf[v.len - 1] == ' ') v.len--;  // Trim spaces
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	3b01      	subs	r3, #1
 8008972:	617b      	str	r3, [r7, #20]
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d006      	beq.n	8008988 <mg_http_parse_headers+0x100>
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	3b01      	subs	r3, #1
 8008980:	4413      	add	r3, r2
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	2b20      	cmp	r3, #32
 8008986:	d0f2      	beq.n	800896e <mg_http_parse_headers+0xe6>
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 8008988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800898a:	011b      	lsls	r3, r3, #4
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	4413      	add	r3, r2
 8008990:	461a      	mov	r2, r3
 8008992:	f107 0318 	add.w	r3, r7, #24
 8008996:	e893 0003 	ldmia.w	r3, {r0, r1}
 800899a:	e882 0003 	stmia.w	r2, {r0, r1}
 800899e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a0:	011b      	lsls	r3, r3, #4
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	4413      	add	r3, r2
 80089a6:	3308      	adds	r3, #8
 80089a8:	f107 0210 	add.w	r2, r7, #16
 80089ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80089b0:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 80089b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b6:	3301      	adds	r3, #1
 80089b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80089ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	429a      	cmp	r2, r3
 80089c0:	f4ff af6c 	bcc.w	800889c <mg_http_parse_headers+0x14>
  }
  return true;
 80089c4:	2301      	movs	r3, #1
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3728      	adds	r7, #40	@ 0x28
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
	...

080089d0 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b08a      	sub	sp, #40	@ 0x28
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 80089dc:	68b9      	ldr	r1, [r7, #8]
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f7ff fdf7 	bl	80085d2 <mg_http_get_request_len>
 80089e4:	6278      	str	r0, [r7, #36]	@ 0x24
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d003      	beq.n	80089f4 <mg_http_parse+0x24>
 80089ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	4413      	add	r3, r2
 80089f2:	e000      	b.n	80089f6 <mg_http_parse+0x26>
 80089f4:	2300      	movs	r3, #0
 80089f6:	623b      	str	r3, [r7, #32]
  const struct mg_str *cl;
  size_t n;

  memset(hm, 0, sizeof(*hm));
 80089f8:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80089fc:	2100      	movs	r1, #0
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f023 f884 	bl	802bb0c <memset>
  if (req_len <= 0) return req_len;
 8008a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	dc01      	bgt.n	8008a0e <mg_http_parse+0x3e>
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a0c:	e127      	b.n	8008c5e <mg_http_parse+0x28e>

  hm->message.buf = hm->head.buf = (char *) s;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  hm->body.buf = (char *) end;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a3a      	ldr	r2, [r7, #32]
 8008a26:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 8008a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008a38:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

  // Parse request line
  hm->method.buf = (char *) s;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8008a4e:	e009      	b.n	8008a64 <mg_http_parse+0x94>
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	4413      	add	r3, r2
 8008a56:	60fb      	str	r3, [r7, #12]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	441a      	add	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	605a      	str	r2, [r3, #4]
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d20b      	bcs.n	8008a84 <mg_http_parse+0xb4>
 8008a6c:	6a39      	ldr	r1, [r7, #32]
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f7ff fe50 	bl	8008714 <clen>
 8008a74:	61f8      	str	r0, [r7, #28]
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1e9      	bne.n	8008a50 <mg_http_parse+0x80>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8008a7c:	e002      	b.n	8008a84 <mg_http_parse+0xb4>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	3301      	adds	r3, #1
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d203      	bcs.n	8008a94 <mg_http_parse+0xc4>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	2b20      	cmp	r3, #32
 8008a92:	d0f4      	beq.n	8008a7e <mg_http_parse+0xae>
  hm->uri.buf = (char *) s;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 8008a9a:	e009      	b.n	8008ab0 <mg_http_parse+0xe0>
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	60fb      	str	r3, [r7, #12]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	68da      	ldr	r2, [r3, #12]
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	441a      	add	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	60da      	str	r2, [r3, #12]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d20b      	bcs.n	8008ad0 <mg_http_parse+0x100>
 8008ab8:	6a39      	ldr	r1, [r7, #32]
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f7ff fe2a 	bl	8008714 <clen>
 8008ac0:	61f8      	str	r0, [r7, #28]
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1e9      	bne.n	8008a9c <mg_http_parse+0xcc>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8008ac8:	e002      	b.n	8008ad0 <mg_http_parse+0x100>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	3301      	adds	r3, #1
 8008ace:	60fb      	str	r3, [r7, #12]
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	6a3b      	ldr	r3, [r7, #32]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d203      	bcs.n	8008ae0 <mg_http_parse+0x110>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	2b20      	cmp	r3, #32
 8008ade:	d0f4      	beq.n	8008aca <mg_http_parse+0xfa>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	3318      	adds	r3, #24
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	6a39      	ldr	r1, [r7, #32]
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f7ff fe82 	bl	80087f2 <skiptorn>
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <mg_http_parse+0x12a>
 8008af6:	2300      	movs	r3, #0
 8008af8:	e0b1      	b.n	8008c5e <mg_http_parse+0x28e>

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6898      	ldr	r0, [r3, #8]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	461a      	mov	r2, r3
 8008b04:	213f      	movs	r1, #63	@ 0x3f
 8008b06:	f7f7 fbab 	bl	8000260 <memchr>
 8008b0a:	61b8      	str	r0, [r7, #24]
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d015      	beq.n	8008b3e <mg_http_parse+0x16e>
    hm->query.buf = (char *) qs + 1;
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	1c5a      	adds	r2, r3, #1
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	689a      	ldr	r2, [r3, #8]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	441a      	add	r2, r3
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	3301      	adds	r3, #1
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	461a      	mov	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	60da      	str	r2, [r3, #12]
  }

  // Sanity check. Allow protocol/reason to be empty
  // Do this check after hm->method.len and hm->uri.len are finalised
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d003      	beq.n	8008b4e <mg_http_parse+0x17e>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d102      	bne.n	8008b54 <mg_http_parse+0x184>
 8008b4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b52:	e084      	b.n	8008c5e <mg_http_parse+0x28e>

  if (!mg_http_parse_headers(s, end, hm->headers,
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f103 0220 	add.w	r2, r3, #32
 8008b5a:	231e      	movs	r3, #30
 8008b5c:	6a39      	ldr	r1, [r7, #32]
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f7ff fe92 	bl	8008888 <mg_http_parse_headers>
 8008b64:	4603      	mov	r3, r0
 8008b66:	f083 0301 	eor.w	r3, r3, #1
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d002      	beq.n	8008b76 <mg_http_parse+0x1a6>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 8008b70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b74:	e073      	b.n	8008c5e <mg_http_parse+0x28e>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8008b76:	493c      	ldr	r1, [pc, #240]	@ (8008c68 <mg_http_parse+0x298>)
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f7ff fd78 	bl	800866e <mg_http_get_header>
 8008b7e:	6178      	str	r0, [r7, #20]
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d018      	beq.n	8008bb8 <mg_http_parse+0x1e8>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b92:	f7ff fb2b 	bl	80081ec <mg_to_size_t>
 8008b96:	4603      	mov	r3, r0
 8008b98:	f083 0301 	eor.w	r3, r3, #1
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d002      	beq.n	8008ba8 <mg_http_parse+0x1d8>
 8008ba2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008ba6:	e05a      	b.n	8008c5e <mg_http_parse+0x28e>
    hm->message.len = (size_t) req_len + hm->body.len;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb0:	441a      	add	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2205      	movs	r2, #5
 8008bbe:	492b      	ldr	r1, [pc, #172]	@ (8008c6c <mg_http_parse+0x29c>)
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f009 f8c9 	bl	8011d58 <mg_ncasecmp>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	bf0c      	ite	eq
 8008bcc:	2301      	moveq	r3, #1
 8008bce:	2300      	movne	r3, #0
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	613b      	str	r3, [r7, #16]
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008bda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008bde:	d11a      	bne.n	8008c16 <mg_http_parse+0x246>
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d117      	bne.n	8008c16 <mg_http_parse+0x246>
      mg_vcasecmp(&hm->method, "PUT") != 0 &&
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4921      	ldr	r1, [pc, #132]	@ (8008c70 <mg_http_parse+0x2a0>)
 8008bea:	4618      	mov	r0, r3
 8008bec:	f009 f906 	bl	8011dfc <mg_vcasecmp>
 8008bf0:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00f      	beq.n	8008c16 <mg_http_parse+0x246>
      mg_vcasecmp(&hm->method, "POST") != 0) {
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	491e      	ldr	r1, [pc, #120]	@ (8008c74 <mg_http_parse+0x2a4>)
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f009 f8fe 	bl	8011dfc <mg_vcasecmp>
 8008c00:	4603      	mov	r3, r0
      mg_vcasecmp(&hm->method, "PUT") != 0 &&
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d007      	beq.n	8008c16 <mg_http_parse+0x246>
    hm->body.len = 0;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8008c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c20:	d113      	bne.n	8008c4a <mg_http_parse+0x27a>
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d010      	beq.n	8008c4a <mg_http_parse+0x27a>
      mg_vcasecmp(&hm->uri, "204") == 0) {
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	3308      	adds	r3, #8
 8008c2c:	4912      	ldr	r1, [pc, #72]	@ (8008c78 <mg_http_parse+0x2a8>)
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f009 f8e4 	bl	8011dfc <mg_vcasecmp>
 8008c34:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d107      	bne.n	8008c4a <mg_http_parse+0x27a>
    hm->body.len = 0;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8008c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8008c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d202      	bcs.n	8008c5c <mg_http_parse+0x28c>
 8008c56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c5a:	e000      	b.n	8008c5e <mg_http_parse+0x28e>

  return req_len;
 8008c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3728      	adds	r7, #40	@ 0x28
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	0802f1b0 	.word	0x0802f1b0
 8008c6c:	0802f1c0 	.word	0x0802f1c0
 8008c70:	0802f1c8 	.word	0x0802f1c8
 8008c74:	0802f1cc 	.word	0x0802f1cc
 8008c78:	0802f1d4 	.word	0x0802f1d4

08008c7c <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	3b64      	subs	r3, #100	@ 0x64
 8008c88:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	f200 8469 	bhi.w	8009564 <mg_http_status_code_str+0x8e8>
 8008c92:	a101      	add	r1, pc, #4	@ (adr r1, 8008c98 <mg_http_status_code_str+0x1c>)
 8008c94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c98:	08009469 	.word	0x08009469
 8008c9c:	0800946d 	.word	0x0800946d
 8008ca0:	08009471 	.word	0x08009471
 8008ca4:	08009565 	.word	0x08009565
 8008ca8:	08009565 	.word	0x08009565
 8008cac:	08009565 	.word	0x08009565
 8008cb0:	08009565 	.word	0x08009565
 8008cb4:	08009565 	.word	0x08009565
 8008cb8:	08009565 	.word	0x08009565
 8008cbc:	08009565 	.word	0x08009565
 8008cc0:	08009565 	.word	0x08009565
 8008cc4:	08009565 	.word	0x08009565
 8008cc8:	08009565 	.word	0x08009565
 8008ccc:	08009565 	.word	0x08009565
 8008cd0:	08009565 	.word	0x08009565
 8008cd4:	08009565 	.word	0x08009565
 8008cd8:	08009565 	.word	0x08009565
 8008cdc:	08009565 	.word	0x08009565
 8008ce0:	08009565 	.word	0x08009565
 8008ce4:	08009565 	.word	0x08009565
 8008ce8:	08009565 	.word	0x08009565
 8008cec:	08009565 	.word	0x08009565
 8008cf0:	08009565 	.word	0x08009565
 8008cf4:	08009565 	.word	0x08009565
 8008cf8:	08009565 	.word	0x08009565
 8008cfc:	08009565 	.word	0x08009565
 8008d00:	08009565 	.word	0x08009565
 8008d04:	08009565 	.word	0x08009565
 8008d08:	08009565 	.word	0x08009565
 8008d0c:	08009565 	.word	0x08009565
 8008d10:	08009565 	.word	0x08009565
 8008d14:	08009565 	.word	0x08009565
 8008d18:	08009565 	.word	0x08009565
 8008d1c:	08009565 	.word	0x08009565
 8008d20:	08009565 	.word	0x08009565
 8008d24:	08009565 	.word	0x08009565
 8008d28:	08009565 	.word	0x08009565
 8008d2c:	08009565 	.word	0x08009565
 8008d30:	08009565 	.word	0x08009565
 8008d34:	08009565 	.word	0x08009565
 8008d38:	08009565 	.word	0x08009565
 8008d3c:	08009565 	.word	0x08009565
 8008d40:	08009565 	.word	0x08009565
 8008d44:	08009565 	.word	0x08009565
 8008d48:	08009565 	.word	0x08009565
 8008d4c:	08009565 	.word	0x08009565
 8008d50:	08009565 	.word	0x08009565
 8008d54:	08009565 	.word	0x08009565
 8008d58:	08009565 	.word	0x08009565
 8008d5c:	08009565 	.word	0x08009565
 8008d60:	08009565 	.word	0x08009565
 8008d64:	08009565 	.word	0x08009565
 8008d68:	08009565 	.word	0x08009565
 8008d6c:	08009565 	.word	0x08009565
 8008d70:	08009565 	.word	0x08009565
 8008d74:	08009565 	.word	0x08009565
 8008d78:	08009565 	.word	0x08009565
 8008d7c:	08009565 	.word	0x08009565
 8008d80:	08009565 	.word	0x08009565
 8008d84:	08009565 	.word	0x08009565
 8008d88:	08009565 	.word	0x08009565
 8008d8c:	08009565 	.word	0x08009565
 8008d90:	08009565 	.word	0x08009565
 8008d94:	08009565 	.word	0x08009565
 8008d98:	08009565 	.word	0x08009565
 8008d9c:	08009565 	.word	0x08009565
 8008da0:	08009565 	.word	0x08009565
 8008da4:	08009565 	.word	0x08009565
 8008da8:	08009565 	.word	0x08009565
 8008dac:	08009565 	.word	0x08009565
 8008db0:	08009565 	.word	0x08009565
 8008db4:	08009565 	.word	0x08009565
 8008db8:	08009565 	.word	0x08009565
 8008dbc:	08009565 	.word	0x08009565
 8008dc0:	08009565 	.word	0x08009565
 8008dc4:	08009565 	.word	0x08009565
 8008dc8:	08009565 	.word	0x08009565
 8008dcc:	08009565 	.word	0x08009565
 8008dd0:	08009565 	.word	0x08009565
 8008dd4:	08009565 	.word	0x08009565
 8008dd8:	08009565 	.word	0x08009565
 8008ddc:	08009565 	.word	0x08009565
 8008de0:	08009565 	.word	0x08009565
 8008de4:	08009565 	.word	0x08009565
 8008de8:	08009565 	.word	0x08009565
 8008dec:	08009565 	.word	0x08009565
 8008df0:	08009565 	.word	0x08009565
 8008df4:	08009565 	.word	0x08009565
 8008df8:	08009565 	.word	0x08009565
 8008dfc:	08009565 	.word	0x08009565
 8008e00:	08009565 	.word	0x08009565
 8008e04:	08009565 	.word	0x08009565
 8008e08:	08009565 	.word	0x08009565
 8008e0c:	08009565 	.word	0x08009565
 8008e10:	08009565 	.word	0x08009565
 8008e14:	08009565 	.word	0x08009565
 8008e18:	08009565 	.word	0x08009565
 8008e1c:	08009565 	.word	0x08009565
 8008e20:	08009565 	.word	0x08009565
 8008e24:	08009565 	.word	0x08009565
 8008e28:	08009475 	.word	0x08009475
 8008e2c:	08009479 	.word	0x08009479
 8008e30:	0800947d 	.word	0x0800947d
 8008e34:	08009481 	.word	0x08009481
 8008e38:	08009485 	.word	0x08009485
 8008e3c:	08009489 	.word	0x08009489
 8008e40:	0800948d 	.word	0x0800948d
 8008e44:	08009491 	.word	0x08009491
 8008e48:	08009495 	.word	0x08009495
 8008e4c:	08009565 	.word	0x08009565
 8008e50:	08009565 	.word	0x08009565
 8008e54:	08009565 	.word	0x08009565
 8008e58:	08009565 	.word	0x08009565
 8008e5c:	08009565 	.word	0x08009565
 8008e60:	08009565 	.word	0x08009565
 8008e64:	08009565 	.word	0x08009565
 8008e68:	08009565 	.word	0x08009565
 8008e6c:	08009565 	.word	0x08009565
 8008e70:	08009565 	.word	0x08009565
 8008e74:	08009565 	.word	0x08009565
 8008e78:	08009565 	.word	0x08009565
 8008e7c:	08009565 	.word	0x08009565
 8008e80:	08009565 	.word	0x08009565
 8008e84:	08009565 	.word	0x08009565
 8008e88:	08009565 	.word	0x08009565
 8008e8c:	08009565 	.word	0x08009565
 8008e90:	08009499 	.word	0x08009499
 8008e94:	08009565 	.word	0x08009565
 8008e98:	08009565 	.word	0x08009565
 8008e9c:	08009565 	.word	0x08009565
 8008ea0:	08009565 	.word	0x08009565
 8008ea4:	08009565 	.word	0x08009565
 8008ea8:	08009565 	.word	0x08009565
 8008eac:	08009565 	.word	0x08009565
 8008eb0:	08009565 	.word	0x08009565
 8008eb4:	08009565 	.word	0x08009565
 8008eb8:	08009565 	.word	0x08009565
 8008ebc:	08009565 	.word	0x08009565
 8008ec0:	08009565 	.word	0x08009565
 8008ec4:	08009565 	.word	0x08009565
 8008ec8:	08009565 	.word	0x08009565
 8008ecc:	08009565 	.word	0x08009565
 8008ed0:	08009565 	.word	0x08009565
 8008ed4:	08009565 	.word	0x08009565
 8008ed8:	08009565 	.word	0x08009565
 8008edc:	08009565 	.word	0x08009565
 8008ee0:	08009565 	.word	0x08009565
 8008ee4:	08009565 	.word	0x08009565
 8008ee8:	08009565 	.word	0x08009565
 8008eec:	08009565 	.word	0x08009565
 8008ef0:	08009565 	.word	0x08009565
 8008ef4:	08009565 	.word	0x08009565
 8008ef8:	08009565 	.word	0x08009565
 8008efc:	08009565 	.word	0x08009565
 8008f00:	08009565 	.word	0x08009565
 8008f04:	08009565 	.word	0x08009565
 8008f08:	08009565 	.word	0x08009565
 8008f0c:	08009565 	.word	0x08009565
 8008f10:	08009565 	.word	0x08009565
 8008f14:	08009565 	.word	0x08009565
 8008f18:	08009565 	.word	0x08009565
 8008f1c:	08009565 	.word	0x08009565
 8008f20:	08009565 	.word	0x08009565
 8008f24:	08009565 	.word	0x08009565
 8008f28:	08009565 	.word	0x08009565
 8008f2c:	08009565 	.word	0x08009565
 8008f30:	08009565 	.word	0x08009565
 8008f34:	08009565 	.word	0x08009565
 8008f38:	08009565 	.word	0x08009565
 8008f3c:	08009565 	.word	0x08009565
 8008f40:	08009565 	.word	0x08009565
 8008f44:	08009565 	.word	0x08009565
 8008f48:	08009565 	.word	0x08009565
 8008f4c:	08009565 	.word	0x08009565
 8008f50:	08009565 	.word	0x08009565
 8008f54:	08009565 	.word	0x08009565
 8008f58:	08009565 	.word	0x08009565
 8008f5c:	08009565 	.word	0x08009565
 8008f60:	08009565 	.word	0x08009565
 8008f64:	08009565 	.word	0x08009565
 8008f68:	08009565 	.word	0x08009565
 8008f6c:	08009565 	.word	0x08009565
 8008f70:	08009565 	.word	0x08009565
 8008f74:	08009565 	.word	0x08009565
 8008f78:	08009565 	.word	0x08009565
 8008f7c:	08009565 	.word	0x08009565
 8008f80:	08009565 	.word	0x08009565
 8008f84:	08009565 	.word	0x08009565
 8008f88:	08009565 	.word	0x08009565
 8008f8c:	08009565 	.word	0x08009565
 8008f90:	08009565 	.word	0x08009565
 8008f94:	08009565 	.word	0x08009565
 8008f98:	08009565 	.word	0x08009565
 8008f9c:	08009565 	.word	0x08009565
 8008fa0:	08009565 	.word	0x08009565
 8008fa4:	08009565 	.word	0x08009565
 8008fa8:	08009565 	.word	0x08009565
 8008fac:	08009565 	.word	0x08009565
 8008fb0:	08009565 	.word	0x08009565
 8008fb4:	08009565 	.word	0x08009565
 8008fb8:	0800949d 	.word	0x0800949d
 8008fbc:	080094a1 	.word	0x080094a1
 8008fc0:	080094a5 	.word	0x080094a5
 8008fc4:	080094a9 	.word	0x080094a9
 8008fc8:	080094ad 	.word	0x080094ad
 8008fcc:	080094b1 	.word	0x080094b1
 8008fd0:	08009565 	.word	0x08009565
 8008fd4:	080094b5 	.word	0x080094b5
 8008fd8:	080094b9 	.word	0x080094b9
 8008fdc:	08009565 	.word	0x08009565
 8008fe0:	08009565 	.word	0x08009565
 8008fe4:	08009565 	.word	0x08009565
 8008fe8:	08009565 	.word	0x08009565
 8008fec:	08009565 	.word	0x08009565
 8008ff0:	08009565 	.word	0x08009565
 8008ff4:	08009565 	.word	0x08009565
 8008ff8:	08009565 	.word	0x08009565
 8008ffc:	08009565 	.word	0x08009565
 8009000:	08009565 	.word	0x08009565
 8009004:	08009565 	.word	0x08009565
 8009008:	08009565 	.word	0x08009565
 800900c:	08009565 	.word	0x08009565
 8009010:	08009565 	.word	0x08009565
 8009014:	08009565 	.word	0x08009565
 8009018:	08009565 	.word	0x08009565
 800901c:	08009565 	.word	0x08009565
 8009020:	08009565 	.word	0x08009565
 8009024:	08009565 	.word	0x08009565
 8009028:	08009565 	.word	0x08009565
 800902c:	08009565 	.word	0x08009565
 8009030:	08009565 	.word	0x08009565
 8009034:	08009565 	.word	0x08009565
 8009038:	08009565 	.word	0x08009565
 800903c:	08009565 	.word	0x08009565
 8009040:	08009565 	.word	0x08009565
 8009044:	08009565 	.word	0x08009565
 8009048:	08009565 	.word	0x08009565
 800904c:	08009565 	.word	0x08009565
 8009050:	08009565 	.word	0x08009565
 8009054:	08009565 	.word	0x08009565
 8009058:	08009565 	.word	0x08009565
 800905c:	08009565 	.word	0x08009565
 8009060:	08009565 	.word	0x08009565
 8009064:	08009565 	.word	0x08009565
 8009068:	08009565 	.word	0x08009565
 800906c:	08009565 	.word	0x08009565
 8009070:	08009565 	.word	0x08009565
 8009074:	08009565 	.word	0x08009565
 8009078:	08009565 	.word	0x08009565
 800907c:	08009565 	.word	0x08009565
 8009080:	08009565 	.word	0x08009565
 8009084:	08009565 	.word	0x08009565
 8009088:	08009565 	.word	0x08009565
 800908c:	08009565 	.word	0x08009565
 8009090:	08009565 	.word	0x08009565
 8009094:	08009565 	.word	0x08009565
 8009098:	08009565 	.word	0x08009565
 800909c:	08009565 	.word	0x08009565
 80090a0:	08009565 	.word	0x08009565
 80090a4:	08009565 	.word	0x08009565
 80090a8:	08009565 	.word	0x08009565
 80090ac:	08009565 	.word	0x08009565
 80090b0:	08009565 	.word	0x08009565
 80090b4:	08009565 	.word	0x08009565
 80090b8:	08009565 	.word	0x08009565
 80090bc:	08009565 	.word	0x08009565
 80090c0:	08009565 	.word	0x08009565
 80090c4:	08009565 	.word	0x08009565
 80090c8:	08009565 	.word	0x08009565
 80090cc:	08009565 	.word	0x08009565
 80090d0:	08009565 	.word	0x08009565
 80090d4:	08009565 	.word	0x08009565
 80090d8:	08009565 	.word	0x08009565
 80090dc:	08009565 	.word	0x08009565
 80090e0:	08009565 	.word	0x08009565
 80090e4:	08009565 	.word	0x08009565
 80090e8:	08009565 	.word	0x08009565
 80090ec:	08009565 	.word	0x08009565
 80090f0:	08009565 	.word	0x08009565
 80090f4:	08009565 	.word	0x08009565
 80090f8:	08009565 	.word	0x08009565
 80090fc:	08009565 	.word	0x08009565
 8009100:	08009565 	.word	0x08009565
 8009104:	08009565 	.word	0x08009565
 8009108:	08009565 	.word	0x08009565
 800910c:	08009565 	.word	0x08009565
 8009110:	08009565 	.word	0x08009565
 8009114:	08009565 	.word	0x08009565
 8009118:	08009565 	.word	0x08009565
 800911c:	08009565 	.word	0x08009565
 8009120:	08009565 	.word	0x08009565
 8009124:	08009565 	.word	0x08009565
 8009128:	08009565 	.word	0x08009565
 800912c:	08009565 	.word	0x08009565
 8009130:	08009565 	.word	0x08009565
 8009134:	08009565 	.word	0x08009565
 8009138:	08009565 	.word	0x08009565
 800913c:	08009565 	.word	0x08009565
 8009140:	08009565 	.word	0x08009565
 8009144:	08009565 	.word	0x08009565
 8009148:	080094bd 	.word	0x080094bd
 800914c:	080094c1 	.word	0x080094c1
 8009150:	080094c5 	.word	0x080094c5
 8009154:	080094c9 	.word	0x080094c9
 8009158:	080094cd 	.word	0x080094cd
 800915c:	080094d1 	.word	0x080094d1
 8009160:	080094d5 	.word	0x080094d5
 8009164:	080094d9 	.word	0x080094d9
 8009168:	080094dd 	.word	0x080094dd
 800916c:	080094e1 	.word	0x080094e1
 8009170:	080094e5 	.word	0x080094e5
 8009174:	080094e9 	.word	0x080094e9
 8009178:	080094ed 	.word	0x080094ed
 800917c:	080094f1 	.word	0x080094f1
 8009180:	080094f5 	.word	0x080094f5
 8009184:	080094f9 	.word	0x080094f9
 8009188:	080094fd 	.word	0x080094fd
 800918c:	08009501 	.word	0x08009501
 8009190:	08009505 	.word	0x08009505
 8009194:	08009565 	.word	0x08009565
 8009198:	08009565 	.word	0x08009565
 800919c:	08009509 	.word	0x08009509
 80091a0:	0800950d 	.word	0x0800950d
 80091a4:	08009511 	.word	0x08009511
 80091a8:	08009515 	.word	0x08009515
 80091ac:	08009565 	.word	0x08009565
 80091b0:	08009519 	.word	0x08009519
 80091b4:	08009565 	.word	0x08009565
 80091b8:	0800951d 	.word	0x0800951d
 80091bc:	08009521 	.word	0x08009521
 80091c0:	08009565 	.word	0x08009565
 80091c4:	08009525 	.word	0x08009525
 80091c8:	08009565 	.word	0x08009565
 80091cc:	08009565 	.word	0x08009565
 80091d0:	08009565 	.word	0x08009565
 80091d4:	08009565 	.word	0x08009565
 80091d8:	08009565 	.word	0x08009565
 80091dc:	08009565 	.word	0x08009565
 80091e0:	08009565 	.word	0x08009565
 80091e4:	08009565 	.word	0x08009565
 80091e8:	08009565 	.word	0x08009565
 80091ec:	08009565 	.word	0x08009565
 80091f0:	08009565 	.word	0x08009565
 80091f4:	08009565 	.word	0x08009565
 80091f8:	08009529 	.word	0x08009529
 80091fc:	08009565 	.word	0x08009565
 8009200:	08009565 	.word	0x08009565
 8009204:	08009565 	.word	0x08009565
 8009208:	08009565 	.word	0x08009565
 800920c:	08009565 	.word	0x08009565
 8009210:	08009565 	.word	0x08009565
 8009214:	0800952d 	.word	0x0800952d
 8009218:	08009565 	.word	0x08009565
 800921c:	08009565 	.word	0x08009565
 8009220:	08009565 	.word	0x08009565
 8009224:	08009565 	.word	0x08009565
 8009228:	08009565 	.word	0x08009565
 800922c:	08009565 	.word	0x08009565
 8009230:	08009565 	.word	0x08009565
 8009234:	08009565 	.word	0x08009565
 8009238:	08009565 	.word	0x08009565
 800923c:	08009565 	.word	0x08009565
 8009240:	08009565 	.word	0x08009565
 8009244:	08009565 	.word	0x08009565
 8009248:	08009565 	.word	0x08009565
 800924c:	08009565 	.word	0x08009565
 8009250:	08009565 	.word	0x08009565
 8009254:	08009565 	.word	0x08009565
 8009258:	08009565 	.word	0x08009565
 800925c:	08009565 	.word	0x08009565
 8009260:	08009565 	.word	0x08009565
 8009264:	08009565 	.word	0x08009565
 8009268:	08009565 	.word	0x08009565
 800926c:	08009565 	.word	0x08009565
 8009270:	08009565 	.word	0x08009565
 8009274:	08009565 	.word	0x08009565
 8009278:	08009565 	.word	0x08009565
 800927c:	08009565 	.word	0x08009565
 8009280:	08009565 	.word	0x08009565
 8009284:	08009565 	.word	0x08009565
 8009288:	08009565 	.word	0x08009565
 800928c:	08009565 	.word	0x08009565
 8009290:	08009565 	.word	0x08009565
 8009294:	08009565 	.word	0x08009565
 8009298:	08009565 	.word	0x08009565
 800929c:	08009565 	.word	0x08009565
 80092a0:	08009565 	.word	0x08009565
 80092a4:	08009565 	.word	0x08009565
 80092a8:	08009565 	.word	0x08009565
 80092ac:	08009565 	.word	0x08009565
 80092b0:	08009565 	.word	0x08009565
 80092b4:	08009565 	.word	0x08009565
 80092b8:	08009565 	.word	0x08009565
 80092bc:	08009565 	.word	0x08009565
 80092c0:	08009565 	.word	0x08009565
 80092c4:	08009565 	.word	0x08009565
 80092c8:	08009565 	.word	0x08009565
 80092cc:	08009565 	.word	0x08009565
 80092d0:	08009565 	.word	0x08009565
 80092d4:	08009531 	.word	0x08009531
 80092d8:	08009535 	.word	0x08009535
 80092dc:	08009539 	.word	0x08009539
 80092e0:	0800953d 	.word	0x0800953d
 80092e4:	08009541 	.word	0x08009541
 80092e8:	08009545 	.word	0x08009545
 80092ec:	08009549 	.word	0x08009549
 80092f0:	0800954d 	.word	0x0800954d
 80092f4:	08009551 	.word	0x08009551
 80092f8:	08009555 	.word	0x08009555
 80092fc:	08009565 	.word	0x08009565
 8009300:	08009559 	.word	0x08009559
 8009304:	0800955d 	.word	0x0800955d
 8009308:	08009565 	.word	0x08009565
 800930c:	08009565 	.word	0x08009565
 8009310:	08009565 	.word	0x08009565
 8009314:	08009565 	.word	0x08009565
 8009318:	08009565 	.word	0x08009565
 800931c:	08009565 	.word	0x08009565
 8009320:	08009565 	.word	0x08009565
 8009324:	08009565 	.word	0x08009565
 8009328:	08009565 	.word	0x08009565
 800932c:	08009565 	.word	0x08009565
 8009330:	08009565 	.word	0x08009565
 8009334:	08009565 	.word	0x08009565
 8009338:	08009565 	.word	0x08009565
 800933c:	08009565 	.word	0x08009565
 8009340:	08009565 	.word	0x08009565
 8009344:	08009565 	.word	0x08009565
 8009348:	08009565 	.word	0x08009565
 800934c:	08009565 	.word	0x08009565
 8009350:	08009565 	.word	0x08009565
 8009354:	08009565 	.word	0x08009565
 8009358:	08009565 	.word	0x08009565
 800935c:	08009565 	.word	0x08009565
 8009360:	08009565 	.word	0x08009565
 8009364:	08009565 	.word	0x08009565
 8009368:	08009565 	.word	0x08009565
 800936c:	08009565 	.word	0x08009565
 8009370:	08009565 	.word	0x08009565
 8009374:	08009565 	.word	0x08009565
 8009378:	08009565 	.word	0x08009565
 800937c:	08009565 	.word	0x08009565
 8009380:	08009565 	.word	0x08009565
 8009384:	08009565 	.word	0x08009565
 8009388:	08009565 	.word	0x08009565
 800938c:	08009565 	.word	0x08009565
 8009390:	08009565 	.word	0x08009565
 8009394:	08009565 	.word	0x08009565
 8009398:	08009565 	.word	0x08009565
 800939c:	08009565 	.word	0x08009565
 80093a0:	08009565 	.word	0x08009565
 80093a4:	08009565 	.word	0x08009565
 80093a8:	08009565 	.word	0x08009565
 80093ac:	08009565 	.word	0x08009565
 80093b0:	08009565 	.word	0x08009565
 80093b4:	08009565 	.word	0x08009565
 80093b8:	08009565 	.word	0x08009565
 80093bc:	08009565 	.word	0x08009565
 80093c0:	08009565 	.word	0x08009565
 80093c4:	08009565 	.word	0x08009565
 80093c8:	08009565 	.word	0x08009565
 80093cc:	08009565 	.word	0x08009565
 80093d0:	08009565 	.word	0x08009565
 80093d4:	08009565 	.word	0x08009565
 80093d8:	08009565 	.word	0x08009565
 80093dc:	08009565 	.word	0x08009565
 80093e0:	08009565 	.word	0x08009565
 80093e4:	08009565 	.word	0x08009565
 80093e8:	08009565 	.word	0x08009565
 80093ec:	08009565 	.word	0x08009565
 80093f0:	08009565 	.word	0x08009565
 80093f4:	08009565 	.word	0x08009565
 80093f8:	08009565 	.word	0x08009565
 80093fc:	08009565 	.word	0x08009565
 8009400:	08009565 	.word	0x08009565
 8009404:	08009565 	.word	0x08009565
 8009408:	08009565 	.word	0x08009565
 800940c:	08009565 	.word	0x08009565
 8009410:	08009565 	.word	0x08009565
 8009414:	08009565 	.word	0x08009565
 8009418:	08009565 	.word	0x08009565
 800941c:	08009565 	.word	0x08009565
 8009420:	08009565 	.word	0x08009565
 8009424:	08009565 	.word	0x08009565
 8009428:	08009565 	.word	0x08009565
 800942c:	08009565 	.word	0x08009565
 8009430:	08009565 	.word	0x08009565
 8009434:	08009565 	.word	0x08009565
 8009438:	08009565 	.word	0x08009565
 800943c:	08009565 	.word	0x08009565
 8009440:	08009565 	.word	0x08009565
 8009444:	08009565 	.word	0x08009565
 8009448:	08009565 	.word	0x08009565
 800944c:	08009565 	.word	0x08009565
 8009450:	08009565 	.word	0x08009565
 8009454:	08009565 	.word	0x08009565
 8009458:	08009565 	.word	0x08009565
 800945c:	08009565 	.word	0x08009565
 8009460:	08009565 	.word	0x08009565
 8009464:	08009561 	.word	0x08009561
    case 100: return "Continue";
 8009468:	4b42      	ldr	r3, [pc, #264]	@ (8009574 <mg_http_status_code_str+0x8f8>)
 800946a:	e07c      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 800946c:	4b42      	ldr	r3, [pc, #264]	@ (8009578 <mg_http_status_code_str+0x8fc>)
 800946e:	e07a      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 8009470:	4b42      	ldr	r3, [pc, #264]	@ (800957c <mg_http_status_code_str+0x900>)
 8009472:	e078      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 8009474:	4b42      	ldr	r3, [pc, #264]	@ (8009580 <mg_http_status_code_str+0x904>)
 8009476:	e076      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 8009478:	4b42      	ldr	r3, [pc, #264]	@ (8009584 <mg_http_status_code_str+0x908>)
 800947a:	e074      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 800947c:	4b42      	ldr	r3, [pc, #264]	@ (8009588 <mg_http_status_code_str+0x90c>)
 800947e:	e072      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 8009480:	4b42      	ldr	r3, [pc, #264]	@ (800958c <mg_http_status_code_str+0x910>)
 8009482:	e070      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 8009484:	4b42      	ldr	r3, [pc, #264]	@ (8009590 <mg_http_status_code_str+0x914>)
 8009486:	e06e      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 8009488:	4b42      	ldr	r3, [pc, #264]	@ (8009594 <mg_http_status_code_str+0x918>)
 800948a:	e06c      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 800948c:	4b42      	ldr	r3, [pc, #264]	@ (8009598 <mg_http_status_code_str+0x91c>)
 800948e:	e06a      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 8009490:	4b42      	ldr	r3, [pc, #264]	@ (800959c <mg_http_status_code_str+0x920>)
 8009492:	e068      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 8009494:	4b42      	ldr	r3, [pc, #264]	@ (80095a0 <mg_http_status_code_str+0x924>)
 8009496:	e066      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 8009498:	4b42      	ldr	r3, [pc, #264]	@ (80095a4 <mg_http_status_code_str+0x928>)
 800949a:	e064      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 800949c:	4b42      	ldr	r3, [pc, #264]	@ (80095a8 <mg_http_status_code_str+0x92c>)
 800949e:	e062      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 80094a0:	4b42      	ldr	r3, [pc, #264]	@ (80095ac <mg_http_status_code_str+0x930>)
 80094a2:	e060      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 80094a4:	4b42      	ldr	r3, [pc, #264]	@ (80095b0 <mg_http_status_code_str+0x934>)
 80094a6:	e05e      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 80094a8:	4b42      	ldr	r3, [pc, #264]	@ (80095b4 <mg_http_status_code_str+0x938>)
 80094aa:	e05c      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 80094ac:	4b42      	ldr	r3, [pc, #264]	@ (80095b8 <mg_http_status_code_str+0x93c>)
 80094ae:	e05a      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 80094b0:	4b42      	ldr	r3, [pc, #264]	@ (80095bc <mg_http_status_code_str+0x940>)
 80094b2:	e058      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 80094b4:	4b42      	ldr	r3, [pc, #264]	@ (80095c0 <mg_http_status_code_str+0x944>)
 80094b6:	e056      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 80094b8:	4b42      	ldr	r3, [pc, #264]	@ (80095c4 <mg_http_status_code_str+0x948>)
 80094ba:	e054      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 80094bc:	4b42      	ldr	r3, [pc, #264]	@ (80095c8 <mg_http_status_code_str+0x94c>)
 80094be:	e052      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 80094c0:	4b42      	ldr	r3, [pc, #264]	@ (80095cc <mg_http_status_code_str+0x950>)
 80094c2:	e050      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 80094c4:	4b42      	ldr	r3, [pc, #264]	@ (80095d0 <mg_http_status_code_str+0x954>)
 80094c6:	e04e      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 80094c8:	4b42      	ldr	r3, [pc, #264]	@ (80095d4 <mg_http_status_code_str+0x958>)
 80094ca:	e04c      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 80094cc:	4b42      	ldr	r3, [pc, #264]	@ (80095d8 <mg_http_status_code_str+0x95c>)
 80094ce:	e04a      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 80094d0:	4b42      	ldr	r3, [pc, #264]	@ (80095dc <mg_http_status_code_str+0x960>)
 80094d2:	e048      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 80094d4:	4b42      	ldr	r3, [pc, #264]	@ (80095e0 <mg_http_status_code_str+0x964>)
 80094d6:	e046      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 80094d8:	4b42      	ldr	r3, [pc, #264]	@ (80095e4 <mg_http_status_code_str+0x968>)
 80094da:	e044      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 80094dc:	4b42      	ldr	r3, [pc, #264]	@ (80095e8 <mg_http_status_code_str+0x96c>)
 80094de:	e042      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 80094e0:	4b42      	ldr	r3, [pc, #264]	@ (80095ec <mg_http_status_code_str+0x970>)
 80094e2:	e040      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 80094e4:	4b42      	ldr	r3, [pc, #264]	@ (80095f0 <mg_http_status_code_str+0x974>)
 80094e6:	e03e      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 80094e8:	4b42      	ldr	r3, [pc, #264]	@ (80095f4 <mg_http_status_code_str+0x978>)
 80094ea:	e03c      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 80094ec:	4b42      	ldr	r3, [pc, #264]	@ (80095f8 <mg_http_status_code_str+0x97c>)
 80094ee:	e03a      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 80094f0:	4b42      	ldr	r3, [pc, #264]	@ (80095fc <mg_http_status_code_str+0x980>)
 80094f2:	e038      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 80094f4:	4b42      	ldr	r3, [pc, #264]	@ (8009600 <mg_http_status_code_str+0x984>)
 80094f6:	e036      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 80094f8:	4b42      	ldr	r3, [pc, #264]	@ (8009604 <mg_http_status_code_str+0x988>)
 80094fa:	e034      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 80094fc:	4b42      	ldr	r3, [pc, #264]	@ (8009608 <mg_http_status_code_str+0x98c>)
 80094fe:	e032      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 8009500:	4b42      	ldr	r3, [pc, #264]	@ (800960c <mg_http_status_code_str+0x990>)
 8009502:	e030      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 8009504:	4b42      	ldr	r3, [pc, #264]	@ (8009610 <mg_http_status_code_str+0x994>)
 8009506:	e02e      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 8009508:	4b42      	ldr	r3, [pc, #264]	@ (8009614 <mg_http_status_code_str+0x998>)
 800950a:	e02c      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 800950c:	4b42      	ldr	r3, [pc, #264]	@ (8009618 <mg_http_status_code_str+0x99c>)
 800950e:	e02a      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 8009510:	4b42      	ldr	r3, [pc, #264]	@ (800961c <mg_http_status_code_str+0x9a0>)
 8009512:	e028      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 8009514:	4b42      	ldr	r3, [pc, #264]	@ (8009620 <mg_http_status_code_str+0x9a4>)
 8009516:	e026      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 8009518:	4b42      	ldr	r3, [pc, #264]	@ (8009624 <mg_http_status_code_str+0x9a8>)
 800951a:	e024      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 800951c:	4b42      	ldr	r3, [pc, #264]	@ (8009628 <mg_http_status_code_str+0x9ac>)
 800951e:	e022      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 8009520:	4b42      	ldr	r3, [pc, #264]	@ (800962c <mg_http_status_code_str+0x9b0>)
 8009522:	e020      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 8009524:	4b42      	ldr	r3, [pc, #264]	@ (8009630 <mg_http_status_code_str+0x9b4>)
 8009526:	e01e      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 8009528:	4b42      	ldr	r3, [pc, #264]	@ (8009634 <mg_http_status_code_str+0x9b8>)
 800952a:	e01c      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 800952c:	4b42      	ldr	r3, [pc, #264]	@ (8009638 <mg_http_status_code_str+0x9bc>)
 800952e:	e01a      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 8009530:	4b42      	ldr	r3, [pc, #264]	@ (800963c <mg_http_status_code_str+0x9c0>)
 8009532:	e018      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 8009534:	4b42      	ldr	r3, [pc, #264]	@ (8009640 <mg_http_status_code_str+0x9c4>)
 8009536:	e016      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 8009538:	4b42      	ldr	r3, [pc, #264]	@ (8009644 <mg_http_status_code_str+0x9c8>)
 800953a:	e014      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 800953c:	4b42      	ldr	r3, [pc, #264]	@ (8009648 <mg_http_status_code_str+0x9cc>)
 800953e:	e012      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 8009540:	4b42      	ldr	r3, [pc, #264]	@ (800964c <mg_http_status_code_str+0x9d0>)
 8009542:	e010      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 8009544:	4b42      	ldr	r3, [pc, #264]	@ (8009650 <mg_http_status_code_str+0x9d4>)
 8009546:	e00e      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 8009548:	4b42      	ldr	r3, [pc, #264]	@ (8009654 <mg_http_status_code_str+0x9d8>)
 800954a:	e00c      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 800954c:	4b42      	ldr	r3, [pc, #264]	@ (8009658 <mg_http_status_code_str+0x9dc>)
 800954e:	e00a      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 8009550:	4b42      	ldr	r3, [pc, #264]	@ (800965c <mg_http_status_code_str+0x9e0>)
 8009552:	e008      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 8009554:	4b42      	ldr	r3, [pc, #264]	@ (8009660 <mg_http_status_code_str+0x9e4>)
 8009556:	e006      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 8009558:	4b42      	ldr	r3, [pc, #264]	@ (8009664 <mg_http_status_code_str+0x9e8>)
 800955a:	e004      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 800955c:	4b42      	ldr	r3, [pc, #264]	@ (8009668 <mg_http_status_code_str+0x9ec>)
 800955e:	e002      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 8009560:	4b42      	ldr	r3, [pc, #264]	@ (800966c <mg_http_status_code_str+0x9f0>)
 8009562:	e000      	b.n	8009566 <mg_http_status_code_str+0x8ea>
    default: return "";
 8009564:	4b42      	ldr	r3, [pc, #264]	@ (8009670 <mg_http_status_code_str+0x9f4>)
  }
}
 8009566:	4618      	mov	r0, r3
 8009568:	370c      	adds	r7, #12
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	0802f1f4 	.word	0x0802f1f4
 8009578:	0802f200 	.word	0x0802f200
 800957c:	0802f214 	.word	0x0802f214
 8009580:	0802f220 	.word	0x0802f220
 8009584:	0802f224 	.word	0x0802f224
 8009588:	0802f22c 	.word	0x0802f22c
 800958c:	0802f238 	.word	0x0802f238
 8009590:	0802f258 	.word	0x0802f258
 8009594:	0802f264 	.word	0x0802f264
 8009598:	0802f274 	.word	0x0802f274
 800959c:	0802f284 	.word	0x0802f284
 80095a0:	0802f294 	.word	0x0802f294
 80095a4:	0802f2a8 	.word	0x0802f2a8
 80095a8:	0802f2b0 	.word	0x0802f2b0
 80095ac:	0802f2c4 	.word	0x0802f2c4
 80095b0:	0802f2d8 	.word	0x0802f2d8
 80095b4:	0802f2e0 	.word	0x0802f2e0
 80095b8:	0802f2ec 	.word	0x0802f2ec
 80095bc:	0802f2fc 	.word	0x0802f2fc
 80095c0:	0802f308 	.word	0x0802f308
 80095c4:	0802f31c 	.word	0x0802f31c
 80095c8:	0802f330 	.word	0x0802f330
 80095cc:	0802f33c 	.word	0x0802f33c
 80095d0:	0802f34c 	.word	0x0802f34c
 80095d4:	0802f360 	.word	0x0802f360
 80095d8:	0802f36c 	.word	0x0802f36c
 80095dc:	0802f378 	.word	0x0802f378
 80095e0:	0802f38c 	.word	0x0802f38c
 80095e4:	0802f39c 	.word	0x0802f39c
 80095e8:	0802f3bc 	.word	0x0802f3bc
 80095ec:	0802f3cc 	.word	0x0802f3cc
 80095f0:	0802f3d8 	.word	0x0802f3d8
 80095f4:	0802f3e0 	.word	0x0802f3e0
 80095f8:	0802f3f0 	.word	0x0802f3f0
 80095fc:	0802f404 	.word	0x0802f404
 8009600:	0802f418 	.word	0x0802f418
 8009604:	0802f430 	.word	0x0802f430
 8009608:	0802f448 	.word	0x0802f448
 800960c:	0802f468 	.word	0x0802f468
 8009610:	0802f47c 	.word	0x0802f47c
 8009614:	0802f48c 	.word	0x0802f48c
 8009618:	0802f4a0 	.word	0x0802f4a0
 800961c:	0802f4b8 	.word	0x0802f4b8
 8009620:	0802f4c0 	.word	0x0802f4c0
 8009624:	0802f4d4 	.word	0x0802f4d4
 8009628:	0802f4e8 	.word	0x0802f4e8
 800962c:	0802f500 	.word	0x0802f500
 8009630:	0802f514 	.word	0x0802f514
 8009634:	0802f534 	.word	0x0802f534
 8009638:	0802f558 	.word	0x0802f558
 800963c:	0802f578 	.word	0x0802f578
 8009640:	0802f590 	.word	0x0802f590
 8009644:	0802f5a8 	.word	0x0802f5a8
 8009648:	0802f5b8 	.word	0x0802f5b8
 800964c:	0802f5c4 	.word	0x0802f5c4
 8009650:	0802f5d8 	.word	0x0802f5d8
 8009654:	0802f5e8 	.word	0x0802f5e8
 8009658:	0802f604 	.word	0x0802f604
 800965c:	0802f61c 	.word	0x0802f61c
 8009660:	0802f634 	.word	0x0802f634
 8009664:	0802f644 	.word	0x0802f644
 8009668:	0802f654 	.word	0x0802f654
 800966c:	0802f674 	.word	0x0802f674
 8009670:	0802f694 	.word	0x0802f694

08009674 <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 8009674:	b408      	push	{r3}
 8009676:	b580      	push	{r7, lr}
 8009678:	b08b      	sub	sp, #44	@ 0x2c
 800967a:	af02      	add	r7, sp, #8
 800967c:	60f8      	str	r0, [r7, #12]
 800967e:	60b9      	str	r1, [r7, #8]
 8009680:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8009682:	68b8      	ldr	r0, [r7, #8]
 8009684:	f7ff fafa 	bl	8008c7c <mg_http_status_code_str>
 8009688:	4602      	mov	r2, r0
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d001      	beq.n	8009694 <mg_http_reply+0x20>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	e000      	b.n	8009696 <mg_http_reply+0x22>
 8009694:	4b1f      	ldr	r3, [pc, #124]	@ (8009714 <mg_http_reply+0xa0>)
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	4613      	mov	r3, r2
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	491e      	ldr	r1, [pc, #120]	@ (8009718 <mg_http_reply+0xa4>)
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f003 fe32 	bl	800d308 <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096a8:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 80096aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80096ae:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80096b6:	f107 0314 	add.w	r3, r7, #20
 80096ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096bc:	4817      	ldr	r0, [pc, #92]	@ (800971c <mg_http_reply+0xa8>)
 80096be:	f7fd ff73 	bl	80075a8 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096c6:	2b10      	cmp	r3, #16
 80096c8:	d916      	bls.n	80096f8 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	3b0f      	subs	r3, #15
 80096d2:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 80096dc:	4a10      	ldr	r2, [pc, #64]	@ (8009720 <mg_http_reply+0xac>)
 80096de:	210b      	movs	r1, #11
 80096e0:	f007 fd06 	bl	80110f0 <mg_snprintf>
 80096e4:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80096ea:	69f9      	ldr	r1, [r7, #28]
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	440b      	add	r3, r1
 80096f0:	3b0f      	subs	r3, #15
 80096f2:	4413      	add	r3, r2
 80096f4:	2220      	movs	r2, #32
 80096f6:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80096fe:	f36f 13c7 	bfc	r3, #7, #1
 8009702:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8009706:	bf00      	nop
 8009708:	3724      	adds	r7, #36	@ 0x24
 800970a:	46bd      	mov	sp, r7
 800970c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009710:	b001      	add	sp, #4
 8009712:	4770      	bx	lr
 8009714:	0802f694 	.word	0x0802f694
 8009718:	0802f698 	.word	0x0802f698
 800971c:	0801107f 	.word	0x0801107f
 8009720:	0802f6cc 	.word	0x0802f6cc

08009724 <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *);
static void restore_http_cb(struct mg_connection *c) {
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009732:	4618      	mov	r0, r3
 8009734:	f7fe fb04 	bl	8007d40 <mg_fs_close>
  c->pfn_data = NULL;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->pfn = http_cb;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a07      	ldr	r2, [pc, #28]	@ (8009760 <restore_http_cb+0x3c>)
 8009744:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->is_resp = 0;
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800974e:	f36f 13c7 	bfc	r3, #7, #1
 8009752:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8009756:	bf00      	nop
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	0800aa11 	.word	0x0800aa11

08009764 <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8009764:	b5b0      	push	{r4, r5, r7, lr}
 8009766:	b088      	sub	sp, #32
 8009768:	af04      	add	r7, sp, #16
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	461c      	mov	r4, r3
 8009776:	4615      	mov	r5, r2
 8009778:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800977c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009780:	e9cd 2300 	strd	r2, r3, [sp]
 8009784:	4a04      	ldr	r2, [pc, #16]	@ (8009798 <mg_http_etag+0x34>)
 8009786:	68b9      	ldr	r1, [r7, #8]
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f007 fcb1 	bl	80110f0 <mg_snprintf>
  return buf;
 800978e:	68fb      	ldr	r3, [r7, #12]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bdb0      	pop	{r4, r5, r7, pc}
 8009798:	0802f6d4 	.word	0x0802f6d4

0800979c <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 800979c:	b580      	push	{r7, lr}
 800979e:	b08a      	sub	sp, #40	@ 0x28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	2b08      	cmp	r3, #8
 80097ac:	d002      	beq.n	80097b4 <static_cb+0x18>
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d148      	bne.n	8009846 <static_cb+0xaa>
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097ba:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 80097bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80097c0:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	33a4      	adds	r3, #164	@ 0xa4
 80097c6:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097cc:	69fa      	ldr	r2, [r7, #28]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d905      	bls.n	80097de <static_cb+0x42>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	3348      	adds	r3, #72	@ 0x48
 80097d6:	69f9      	ldr	r1, [r7, #28]
 80097d8:	4618      	mov	r0, r3
 80097da:	f001 fc13 	bl	800b004 <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d234      	bcs.n	8009854 <static_cb+0xb8>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d902      	bls.n	8009806 <static_cb+0x6a>
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	627b      	str	r3, [r7, #36]	@ 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 8009806:	6a3b      	ldr	r3, [r7, #32]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	6a3a      	ldr	r2, [r7, #32]
 800980e:	6810      	ldr	r0, [r2, #0]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009818:	4411      	add	r1, r2
 800981a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800981c:	4798      	blx	r3
 800981e:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	441a      	add	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	651a      	str	r2, [r3, #80]	@ 0x50
    *cl -= n;
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	1ad2      	subs	r2, r2, r3
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d10c      	bne.n	8009858 <static_cb+0xbc>
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f7ff ff70 	bl	8009724 <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8009844:	e008      	b.n	8009858 <static_cb+0xbc>
  } else if (ev == MG_EV_CLOSE) {
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	2b09      	cmp	r3, #9
 800984a:	d106      	bne.n	800985a <static_cb+0xbe>
    restore_http_cb(c);
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f7ff ff69 	bl	8009724 <restore_http_cb>
 8009852:	e002      	b.n	800985a <static_cb+0xbe>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8009854:	bf00      	nop
 8009856:	e000      	b.n	800985a <static_cb+0xbe>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8009858:	bf00      	nop
  }
  (void) ev_data;
}
 800985a:	3728      	adds	r7, #40	@ 0x28
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8009860:	b590      	push	{r4, r7, lr}
 8009862:	b091      	sub	sp, #68	@ 0x44
 8009864:	af02      	add	r7, sp, #8
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	1d38      	adds	r0, r7, #4
 800986a:	e880 0006 	stmia.w	r0, {r1, r2}
 800986e:	603b      	str	r3, [r7, #0]
  struct mg_str entry, k, v, s = mg_str(extra);
 8009870:	f107 0314 	add.w	r3, r7, #20
 8009874:	6839      	ldr	r1, [r7, #0]
 8009876:	4618      	mov	r0, r3
 8009878:	f008 fa22 	bl	8011cc0 <mg_str_s>
  size_t i = 0;
 800987c:	2300      	movs	r3, #0
 800987e:	637b      	str	r3, [r7, #52]	@ 0x34

  // Shrink path to its extension only
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 8009880:	e002      	b.n	8009888 <guess_content_type+0x28>
 8009882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009884:	3301      	adds	r3, #1
 8009886:	637b      	str	r3, [r7, #52]	@ 0x34
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800988c:	429a      	cmp	r2, r3
 800988e:	d208      	bcs.n	80098a2 <guess_content_type+0x42>
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	68b9      	ldr	r1, [r7, #8]
 8009894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009896:	1acb      	subs	r3, r1, r3
 8009898:	3b01      	subs	r3, #1
 800989a:	4413      	add	r3, r2
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	2b2e      	cmp	r3, #46	@ 0x2e
 80098a0:	d1ef      	bne.n	8009882 <guess_content_type+0x22>
  path.buf += path.len - i;
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	68b9      	ldr	r1, [r7, #8]
 80098a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098a8:	1acb      	subs	r3, r1, r3
 80098aa:	4413      	add	r3, r2
 80098ac:	607b      	str	r3, [r7, #4]
  path.len = i;
 80098ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098b0:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_span(s, &entry, &s, ',')) {
 80098b2:	e020      	b.n	80098f6 <guess_content_type+0x96>
    if (mg_span(entry, &k, &v, '=') && mg_strcmp(path, k) == 0) return v;
 80098b4:	f107 031c 	add.w	r3, r7, #28
 80098b8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80098bc:	213d      	movs	r1, #61	@ 0x3d
 80098be:	9100      	str	r1, [sp, #0]
 80098c0:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80098c4:	c903      	ldmia	r1, {r0, r1}
 80098c6:	f008 fc77 	bl	80121b8 <mg_span>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d012      	beq.n	80098f6 <guess_content_type+0x96>
 80098d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098d4:	cb0c      	ldmia	r3, {r2, r3}
 80098d6:	1d39      	adds	r1, r7, #4
 80098d8:	c903      	ldmia	r1, {r0, r1}
 80098da:	f008 faea 	bl	8011eb2 <mg_strcmp>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d108      	bne.n	80098f6 <guess_content_type+0x96>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	461a      	mov	r2, r3
 80098e8:	f107 031c 	add.w	r3, r7, #28
 80098ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80098f0:	e882 0003 	stmia.w	r2, {r0, r1}
 80098f4:	e036      	b.n	8009964 <guess_content_type+0x104>
  while (mg_span(s, &entry, &s, ',')) {
 80098f6:	f107 0314 	add.w	r3, r7, #20
 80098fa:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80098fe:	212c      	movs	r1, #44	@ 0x2c
 8009900:	9100      	str	r1, [sp, #0]
 8009902:	f107 0114 	add.w	r1, r7, #20
 8009906:	c903      	ldmia	r1, {r0, r1}
 8009908:	f008 fc56 	bl	80121b8 <mg_span>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d1d0      	bne.n	80098b4 <guess_content_type+0x54>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8009912:	2300      	movs	r3, #0
 8009914:	637b      	str	r3, [r7, #52]	@ 0x34
 8009916:	e01a      	b.n	800994e <guess_content_type+0xee>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8009918:	4a14      	ldr	r2, [pc, #80]	@ (800996c <guess_content_type+0x10c>)
 800991a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800991c:	00db      	lsls	r3, r3, #3
 800991e:	4413      	add	r3, r2
 8009920:	cb0c      	ldmia	r3, {r2, r3}
 8009922:	1d39      	adds	r1, r7, #4
 8009924:	c903      	ldmia	r1, {r0, r1}
 8009926:	f008 fac4 	bl	8011eb2 <mg_strcmp>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d10b      	bne.n	8009948 <guess_content_type+0xe8>
 8009930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009932:	3301      	adds	r3, #1
 8009934:	68f9      	ldr	r1, [r7, #12]
 8009936:	4a0d      	ldr	r2, [pc, #52]	@ (800996c <guess_content_type+0x10c>)
 8009938:	460c      	mov	r4, r1
 800993a:	00db      	lsls	r3, r3, #3
 800993c:	4413      	add	r3, r2
 800993e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009942:	e884 0003 	stmia.w	r4, {r0, r1}
 8009946:	e00d      	b.n	8009964 <guess_content_type+0x104>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8009948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800994a:	3302      	adds	r3, #2
 800994c:	637b      	str	r3, [r7, #52]	@ 0x34
 800994e:	4a07      	ldr	r2, [pc, #28]	@ (800996c <guess_content_type+0x10c>)
 8009950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009952:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1de      	bne.n	8009918 <guess_content_type+0xb8>
  }

  return mg_str("text/plain; charset=utf-8");
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	4904      	ldr	r1, [pc, #16]	@ (8009970 <guess_content_type+0x110>)
 800995e:	4618      	mov	r0, r3
 8009960:	f008 f9ae 	bl	8011cc0 <mg_str_s>
}
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	373c      	adds	r7, #60	@ 0x3c
 8009968:	46bd      	mov	sp, r7
 800996a:	bd90      	pop	{r4, r7, pc}
 800996c:	2000005c 	.word	0x2000005c
 8009970:	0802f7bc 	.word	0x0802f7bc

08009974 <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 8009974:	b580      	push	{r7, lr}
 8009976:	b08c      	sub	sp, #48	@ 0x30
 8009978:	af02      	add	r7, sp, #8
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 8009980:	2300      	movs	r3, #0
 8009982:	623b      	str	r3, [r7, #32]
  for (i = 0; i + 6 < s->len; i++) {
 8009984:	2300      	movs	r3, #0
 8009986:	627b      	str	r3, [r7, #36]	@ 0x24
 8009988:	e058      	b.n	8009a3c <getrange+0xc8>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009990:	3306      	adds	r3, #6
 8009992:	18d1      	adds	r1, r2, r3
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	685a      	ldr	r2, [r3, #4]
 8009998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	1f9a      	subs	r2, r3, #6
 800999e:	f107 0310 	add.w	r3, r7, #16
 80099a2:	4618      	mov	r0, r3
 80099a4:	f008 f9a9 	bl	8011cfa <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ae:	4413      	add	r3, r2
 80099b0:	2206      	movs	r2, #6
 80099b2:	4929      	ldr	r1, [pc, #164]	@ (8009a58 <getrange+0xe4>)
 80099b4:	4618      	mov	r0, r3
 80099b6:	f022 f87f 	bl	802bab8 <memcmp>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d003      	beq.n	80099c8 <getrange+0x54>
  for (i = 0; i + 6 < s->len; i++) {
 80099c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c2:	3301      	adds	r3, #1
 80099c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80099c6:	e039      	b.n	8009a3c <getrange+0xc8>
    if (mg_span(v, &k, &v, '-')) {
 80099c8:	f107 0310 	add.w	r3, r7, #16
 80099cc:	f107 0218 	add.w	r2, r7, #24
 80099d0:	212d      	movs	r1, #45	@ 0x2d
 80099d2:	9100      	str	r1, [sp, #0]
 80099d4:	f107 0110 	add.w	r1, r7, #16
 80099d8:	c903      	ldmia	r1, {r0, r1}
 80099da:	f008 fbed 	bl	80121b8 <mg_span>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d01d      	beq.n	8009a20 <getrange+0xac>
      if (mg_to_size_t(k, a)) numparsed++;
 80099e4:	68ba      	ldr	r2, [r7, #8]
 80099e6:	f107 0318 	add.w	r3, r7, #24
 80099ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80099ee:	f7fe fbfd 	bl	80081ec <mg_to_size_t>
 80099f2:	4603      	mov	r3, r0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d002      	beq.n	80099fe <getrange+0x8a>
 80099f8:	6a3b      	ldr	r3, [r7, #32]
 80099fa:	3301      	adds	r3, #1
 80099fc:	623b      	str	r3, [r7, #32]
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d022      	beq.n	8009a4a <getrange+0xd6>
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	f107 0310 	add.w	r3, r7, #16
 8009a0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a0e:	f7fe fbed 	bl	80081ec <mg_to_size_t>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d018      	beq.n	8009a4a <getrange+0xd6>
 8009a18:	6a3b      	ldr	r3, [r7, #32]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	623b      	str	r3, [r7, #32]
    } else {
      if (mg_to_size_t(v, a)) numparsed++;
    }
    break;
 8009a1e:	e014      	b.n	8009a4a <getrange+0xd6>
      if (mg_to_size_t(v, a)) numparsed++;
 8009a20:	68ba      	ldr	r2, [r7, #8]
 8009a22:	f107 0310 	add.w	r3, r7, #16
 8009a26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a2a:	f7fe fbdf 	bl	80081ec <mg_to_size_t>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00a      	beq.n	8009a4a <getrange+0xd6>
 8009a34:	6a3b      	ldr	r3, [r7, #32]
 8009a36:	3301      	adds	r3, #1
 8009a38:	623b      	str	r3, [r7, #32]
 8009a3a:	e007      	b.n	8009a4c <getrange+0xd8>
  for (i = 0; i + 6 < s->len; i++) {
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a3e:	1d9a      	adds	r2, r3, #6
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d3a0      	bcc.n	800998a <getrange+0x16>
 8009a48:	e000      	b.n	8009a4c <getrange+0xd8>
    break;
 8009a4a:	bf00      	nop
  }
  return (int) numparsed;
 8009a4c:	6a3b      	ldr	r3, [r7, #32]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3728      	adds	r7, #40	@ 0x28
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	0802f940 	.word	0x0802f940

08009a5c <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 8009a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a60:	b0f7      	sub	sp, #476	@ 0x1dc
 8009a62:	af0a      	add	r7, sp, #40	@ 0x28
 8009a64:	f507 74d8 	add.w	r4, r7, #432	@ 0x1b0
 8009a68:	f5a4 74c6 	sub.w	r4, r4, #396	@ 0x18c
 8009a6c:	6020      	str	r0, [r4, #0]
 8009a6e:	f507 70d8 	add.w	r0, r7, #432	@ 0x1b0
 8009a72:	f5a0 70c8 	sub.w	r0, r0, #400	@ 0x190
 8009a76:	6001      	str	r1, [r0, #0]
 8009a78:	f507 71d8 	add.w	r1, r7, #432	@ 0x1b0
 8009a7c:	f5a1 71ca 	sub.w	r1, r1, #404	@ 0x194
 8009a80:	600a      	str	r2, [r1, #0]
 8009a82:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 8009a86:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 8009a8a:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8009a8c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009a90:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d006      	beq.n	8009aaa <mg_http_serve_file+0x4e>
 8009a9c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009aa0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	695b      	ldr	r3, [r3, #20]
 8009aa8:	e000      	b.n	8009aac <mg_http_serve_file+0x50>
 8009aaa:	4b9d      	ldr	r3, [pc, #628]	@ (8009d20 <mg_http_serve_file+0x2c4>)
 8009aac:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  struct mg_fd *fd = NULL;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  size_t size = 0;
 8009ab6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009aba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009abe:	2200      	movs	r2, #0
 8009ac0:	601a      	str	r2, [r3, #0]
  time_t mtime = 0;
 8009ac2:	f04f 0200 	mov.w	r2, #0
 8009ac6:	f04f 0300 	mov.w	r3, #0
 8009aca:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  struct mg_str *inm = NULL;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8009ad4:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8009ad8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009adc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8009ae0:	6819      	ldr	r1, [r3, #0]
 8009ae2:	4610      	mov	r0, r2
 8009ae4:	f008 f8ec 	bl	8011cc0 <mg_str_s>
 8009ae8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009aec:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 8009af8:	f5a2 708c 	sub.w	r0, r2, #280	@ 0x118
 8009afc:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8009b00:	ca06      	ldmia	r2, {r1, r2}
 8009b02:	f7ff fead 	bl	8009860 <guess_content_type>
  bool gzip = false;
 8009b06:	2300      	movs	r3, #0
 8009b08:	f887 31ab 	strb.w	r3, [r7, #427]	@ 0x1ab

  if (path != NULL) {
 8009b0c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009b10:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d051      	beq.n	8009bbe <mg_http_serve_file+0x162>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 8009b1a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009b1e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8009b22:	4980      	ldr	r1, [pc, #512]	@ (8009d24 <mg_http_serve_file+0x2c8>)
 8009b24:	6818      	ldr	r0, [r3, #0]
 8009b26:	f7fe fda2 	bl	800866e <mg_http_get_header>
 8009b2a:	f8c7 0194 	str.w	r0, [r7, #404]	@ 0x194
    if (ae != NULL && mg_strstr(*ae, mg_str("gzip")) != NULL) {
 8009b2e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d033      	beq.n	8009b9e <mg_http_serve_file+0x142>
 8009b36:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8009b3a:	497b      	ldr	r1, [pc, #492]	@ (8009d28 <mg_http_serve_file+0x2cc>)
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f008 f8bf 	bl	8011cc0 <mg_str_s>
 8009b42:	f8d7 1194 	ldr.w	r1, [r7, #404]	@ 0x194
 8009b46:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8009b4a:	cb0c      	ldmia	r3, {r2, r3}
 8009b4c:	c903      	ldmia	r1, {r0, r1}
 8009b4e:	f008 f9f2 	bl	8011f36 <mg_strstr>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d022      	beq.n	8009b9e <mg_http_serve_file+0x142>
      mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8009b58:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009b5c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8009b60:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a71      	ldr	r2, [pc, #452]	@ (8009d2c <mg_http_serve_file+0x2d0>)
 8009b68:	2180      	movs	r1, #128	@ 0x80
 8009b6a:	f007 fac1 	bl	80110f0 <mg_snprintf>
      fd = mg_fs_open(fs, tmp, MG_FS_READ);
 8009b6e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8009b72:	2201      	movs	r2, #1
 8009b74:	4619      	mov	r1, r3
 8009b76:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8009b7a:	f7fe f8b9 	bl	8007cf0 <mg_fs_open>
 8009b7e:	f8c7 01ac 	str.w	r0, [r7, #428]	@ 0x1ac
      if (fd != NULL) gzip = true, path = tmp;
 8009b82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d009      	beq.n	8009b9e <mg_http_serve_file+0x142>
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	f887 31ab 	strb.w	r3, [r7, #427]	@ 0x1ab
 8009b90:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009b94:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8009b98:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 8009b9c:	601a      	str	r2, [r3, #0]
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8009b9e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d10b      	bne.n	8009bbe <mg_http_serve_file+0x162>
 8009ba6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009baa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8009bae:	2201      	movs	r2, #1
 8009bb0:	6819      	ldr	r1, [r3, #0]
 8009bb2:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8009bb6:	f7fe f89b 	bl	8007cf0 <mg_fs_open>
 8009bba:	f8c7 01ac 	str.w	r0, [r7, #428]	@ 0x1ac
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 8009bbe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d144      	bne.n	8009c50 <mg_http_serve_file+0x1f4>
 8009bc6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009bca:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d03c      	beq.n	8009c50 <mg_http_serve_file+0x1f4>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8009bd6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009bda:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	2201      	movs	r2, #1
 8009be4:	4619      	mov	r1, r3
 8009be6:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8009bea:	f7fe f881 	bl	8007cf0 <mg_fs_open>
 8009bee:	f8c7 01ac 	str.w	r0, [r7, #428]	@ 0x1ac
    path = opts->page404;
 8009bf2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009bf6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8009bfa:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 8009bfe:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 8009c02:	6812      	ldr	r2, [r2, #0]
 8009c04:	6912      	ldr	r2, [r2, #16]
 8009c06:	601a      	str	r2, [r3, #0]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8009c08:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8009c0c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009c10:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8009c14:	6819      	ldr	r1, [r3, #0]
 8009c16:	4610      	mov	r0, r2
 8009c18:	f008 f852 	bl	8011cc0 <mg_str_s>
 8009c1c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009c20:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 8009c2c:	f5a2 748c 	sub.w	r4, r2, #280	@ 0x118
 8009c30:	f107 0010 	add.w	r0, r7, #16
 8009c34:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8009c38:	ca06      	ldmia	r2, {r1, r2}
 8009c3a:	f7ff fe11 	bl	8009860 <guess_content_type>
 8009c3e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009c42:	f5a3 72d0 	sub.w	r2, r3, #416	@ 0x1a0
 8009c46:	4623      	mov	r3, r4
 8009c48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c4c:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8009c50:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00f      	beq.n	8009c78 <mg_http_serve_file+0x21c>
 8009c58:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8009c5c:	681c      	ldr	r4, [r3, #0]
 8009c5e:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8009c62:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 8009c66:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009c6a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8009c6e:	6818      	ldr	r0, [r3, #0]
 8009c70:	47a0      	blx	r4
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d114      	bne.n	8009ca2 <mg_http_serve_file+0x246>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8009c78:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009c7c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	689a      	ldr	r2, [r3, #8]
 8009c84:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009c88:	f5a3 70c6 	sub.w	r0, r3, #396	@ 0x18c
 8009c8c:	4b28      	ldr	r3, [pc, #160]	@ (8009d30 <mg_http_serve_file+0x2d4>)
 8009c8e:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8009c92:	6800      	ldr	r0, [r0, #0]
 8009c94:	f7ff fcee 	bl	8009674 <mg_http_reply>
    mg_fs_close(fd);
 8009c98:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 8009c9c:	f7fe f850 	bl	8007d40 <mg_fs_close>
 8009ca0:	e195      	b.n	8009fce <mg_http_serve_file+0x572>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8009ca2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009ca6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009caa:	6819      	ldr	r1, [r3, #0]
 8009cac:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8009cb0:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8009cb4:	e9cd 2300 	strd	r2, r3, [sp]
 8009cb8:	460a      	mov	r2, r1
 8009cba:	2140      	movs	r1, #64	@ 0x40
 8009cbc:	f7ff fd52 	bl	8009764 <mg_http_etag>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d03a      	beq.n	8009d3c <mg_http_serve_file+0x2e0>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8009cc6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009cca:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8009cce:	4919      	ldr	r1, [pc, #100]	@ (8009d34 <mg_http_serve_file+0x2d8>)
 8009cd0:	6818      	ldr	r0, [r3, #0]
 8009cd2:	f7fe fccc 	bl	800866e <mg_http_get_header>
 8009cd6:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8009cda:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d02c      	beq.n	8009d3c <mg_http_serve_file+0x2e0>
             mg_vcasecmp(inm, etag) == 0) {
 8009ce2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 8009cec:	f008 f886 	bl	8011dfc <mg_vcasecmp>
 8009cf0:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d122      	bne.n	8009d3c <mg_http_serve_file+0x2e0>
    mg_fs_close(fd);
 8009cf6:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 8009cfa:	f7fe f821 	bl	8007d40 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8009cfe:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009d02:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	689a      	ldr	r2, [r3, #8]
 8009d0a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009d0e:	f5a3 70c6 	sub.w	r0, r3, #396	@ 0x18c
 8009d12:	4b09      	ldr	r3, [pc, #36]	@ (8009d38 <mg_http_serve_file+0x2dc>)
 8009d14:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8009d18:	6800      	ldr	r0, [r0, #0]
 8009d1a:	f7ff fcab 	bl	8009674 <mg_http_reply>
 8009d1e:	e156      	b.n	8009fce <mg_http_serve_file+0x572>
 8009d20:	20000034 	.word	0x20000034
 8009d24:	0802f948 	.word	0x0802f948
 8009d28:	0802f958 	.word	0x0802f958
 8009d2c:	0802f960 	.word	0x0802f960
 8009d30:	0802f968 	.word	0x0802f968
 8009d34:	0802f974 	.word	0x0802f974
 8009d38:	0802f694 	.word	0x0802f694
  } else {
    int n, status = 200;
 8009d3c:	23c8      	movs	r3, #200	@ 0xc8
 8009d3e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 8009d42:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009d46:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	601a      	str	r2, [r3, #0]
 8009d4e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009d52:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8009d56:	2200      	movs	r2, #0
 8009d58:	601a      	str	r2, [r3, #0]
 8009d5a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009d5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 8009d68:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009d6c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8009d70:	499a      	ldr	r1, [pc, #616]	@ (8009fdc <mg_http_serve_file+0x580>)
 8009d72:	6818      	ldr	r0, [r3, #0]
 8009d74:	f7fe fc7b 	bl	800866e <mg_http_get_header>
 8009d78:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190
    range[0] = '\0';
 8009d7c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009d80:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009d84:	2200      	movs	r2, #0
 8009d86:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 8009d88:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f000 8095 	beq.w	8009ebc <mg_http_serve_file+0x460>
 8009d92:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8009d96:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	f8d7 0190 	ldr.w	r0, [r7, #400]	@ 0x190
 8009da0:	f7ff fde8 	bl	8009974 <getrange>
 8009da4:	f8c7 018c 	str.w	r0, [r7, #396]	@ 0x18c
 8009da8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f340 8085 	ble.w	8009ebc <mg_http_serve_file+0x460>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 8009db2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d107      	bne.n	8009dca <mg_http_serve_file+0x36e>
 8009dba:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8009dbe:	1e5a      	subs	r2, r3, #1
 8009dc0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009dc4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8009dc8:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 8009dca:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009dce:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009dd8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d808      	bhi.n	8009df4 <mg_http_serve_file+0x398>
 8009de2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009de6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d81a      	bhi.n	8009e2a <mg_http_serve_file+0x3ce>
        status = 416;
 8009df4:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8009df8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
        cl = 0;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8009e02:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009e06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	60bb      	str	r3, [r7, #8]
 8009e10:	60fa      	str	r2, [r7, #12]
 8009e12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009e16:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009e1a:	e9cd 1200 	strd	r1, r2, [sp]
 8009e1e:	4a70      	ldr	r2, [pc, #448]	@ (8009fe0 <mg_http_serve_file+0x584>)
 8009e20:	2164      	movs	r1, #100	@ 0x64
 8009e22:	4618      	mov	r0, r3
 8009e24:	f007 f964 	bl	80110f0 <mg_snprintf>
 8009e28:	e048      	b.n	8009ebc <mg_http_serve_file+0x460>
                    (int64_t) size);
      } else {
        status = 206;
 8009e2a:	23ce      	movs	r3, #206	@ 0xce
 8009e2c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
        cl = r2 - r1 + 1;
 8009e30:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009e34:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009e3e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	1ad3      	subs	r3, r2, r3
 8009e46:	3301      	adds	r3, #1
 8009e48:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
        mg_snprintf(range, sizeof(range),
 8009e4c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009e50:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2200      	movs	r2, #0
 8009e58:	469a      	mov	sl, r3
 8009e5a:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8009e5c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009e60:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8009e6a:	4413      	add	r3, r2
 8009e6c:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 8009e6e:	2200      	movs	r2, #0
 8009e70:	461d      	mov	r5, r3
 8009e72:	4616      	mov	r6, r2
 8009e74:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009e78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	603b      	str	r3, [r7, #0]
 8009e82:	607a      	str	r2, [r7, #4]
 8009e84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009e88:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009e8c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8009e90:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8009e94:	e9cd ab00 	strd	sl, fp, [sp]
 8009e98:	4a52      	ldr	r2, [pc, #328]	@ (8009fe4 <mg_http_serve_file+0x588>)
 8009e9a:	2164      	movs	r1, #100	@ 0x64
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f007 f927 	bl	80110f0 <mg_snprintf>
        fs->sk(fd->fd, r1);
 8009ea2:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8009ea6:	699b      	ldr	r3, [r3, #24]
 8009ea8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8009eac:	6810      	ldr	r0, [r2, #0]
 8009eae:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 8009eb2:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8009eb6:	6812      	ldr	r2, [r2, #0]
 8009eb8:	4611      	mov	r1, r2
 8009eba:	4798      	blx	r3
      }
    }
    mg_printf(c,
 8009ebc:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8009ec0:	f7fe fedc 	bl	8008c7c <mg_http_status_code_str>
 8009ec4:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 8009ec6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009eca:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8009ece:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 8009ed0:	461d      	mov	r5, r3
 8009ed2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009ed6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	4698      	mov	r8, r3
 8009ee4:	4689      	mov	r9, r1
 8009ee6:	f897 31ab 	ldrb.w	r3, [r7, #427]	@ 0x1ab
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d001      	beq.n	8009ef2 <mg_http_serve_file+0x496>
 8009eee:	493e      	ldr	r1, [pc, #248]	@ (8009fe8 <mg_http_serve_file+0x58c>)
 8009ef0:	e000      	b.n	8009ef4 <mg_http_serve_file+0x498>
 8009ef2:	493e      	ldr	r1, [pc, #248]	@ (8009fec <mg_http_serve_file+0x590>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 8009ef4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009ef8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d006      	beq.n	8009f12 <mg_http_serve_file+0x4b6>
 8009f04:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009f08:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	e000      	b.n	8009f14 <mg_http_serve_file+0x4b8>
 8009f12:	4b36      	ldr	r3, [pc, #216]	@ (8009fec <mg_http_serve_file+0x590>)
 8009f14:	f507 70d8 	add.w	r0, r7, #432	@ 0x1b0
 8009f18:	f5a0 70c6 	sub.w	r0, r0, #396	@ 0x18c
 8009f1c:	9308      	str	r3, [sp, #32]
 8009f1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009f22:	9307      	str	r3, [sp, #28]
 8009f24:	9106      	str	r1, [sp, #24]
 8009f26:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8009f2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f2e:	9302      	str	r3, [sp, #8]
 8009f30:	9201      	str	r2, [sp, #4]
 8009f32:	9500      	str	r5, [sp, #0]
 8009f34:	4623      	mov	r3, r4
 8009f36:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8009f3a:	492d      	ldr	r1, [pc, #180]	@ (8009ff0 <mg_http_serve_file+0x594>)
 8009f3c:	6800      	ldr	r0, [r0, #0]
 8009f3e:	f003 f9e3 	bl	800d308 <mg_printf>
    if (mg_vcasecmp(&hm->method, "HEAD") == 0) {
 8009f42:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009f46:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4929      	ldr	r1, [pc, #164]	@ (8009ff4 <mg_http_serve_file+0x598>)
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f007 ff54 	bl	8011dfc <mg_vcasecmp>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d11a      	bne.n	8009f90 <mg_http_serve_file+0x534>
      c->is_draining = 1;
 8009f5a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009f5e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8009f68:	f043 0310 	orr.w	r3, r3, #16
 8009f6c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      c->is_resp = 0;
 8009f70:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009f74:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8009f7e:	f36f 13c7 	bfc	r3, #7, #1
 8009f82:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_fs_close(fd);
 8009f86:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 8009f8a:	f7fd fed9 	bl	8007d40 <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 8009f8e:	e01e      	b.n	8009fce <mg_http_serve_file+0x572>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8009f90:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009f94:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	33a4      	adds	r3, #164	@ 0xa4
 8009f9c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
      c->pfn = static_cb;
 8009fa0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009fa4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a13      	ldr	r2, [pc, #76]	@ (8009ff8 <mg_http_serve_file+0x59c>)
 8009fac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      c->pfn_data = fd;
 8009fb0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009fb4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8009fbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      *clp = cl;
 8009fc2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8009fc6:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8009fca:	601a      	str	r2, [r3, #0]
}
 8009fcc:	e7ff      	b.n	8009fce <mg_http_serve_file+0x572>
 8009fce:	bf00      	nop
 8009fd0:	f507 77da 	add.w	r7, r7, #436	@ 0x1b4
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fda:	bf00      	nop
 8009fdc:	0802f984 	.word	0x0802f984
 8009fe0:	0802f98c 	.word	0x0802f98c
 8009fe4:	0802f9ac 	.word	0x0802f9ac
 8009fe8:	0802f9d4 	.word	0x0802f9d4
 8009fec:	0802f694 	.word	0x0802f694
 8009ff0:	0802f9f0 	.word	0x0802f9f0
 8009ff4:	0802fa40 	.word	0x0802fa40
 8009ff8:	0800979d 	.word	0x0800979d

08009ffc <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 8009ffc:	b082      	sub	sp, #8
 8009ffe:	b590      	push	{r4, r7, lr}
 800a000:	b08b      	sub	sp, #44	@ 0x2c
 800a002:	af02      	add	r7, sp, #8
 800a004:	60f8      	str	r0, [r7, #12]
 800a006:	60b9      	str	r1, [r7, #8]
 800a008:	607a      	str	r2, [r7, #4]
 800a00a:	637b      	str	r3, [r7, #52]	@ 0x34
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 800a00c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a00e:	461a      	mov	r2, r3
 800a010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a012:	9300      	str	r3, [sp, #0]
 800a014:	4613      	mov	r3, r2
 800a016:	4a9a      	ldr	r2, [pc, #616]	@ (800a280 <uri_to_path2+0x284>)
 800a018:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a01a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a01c:	f007 f868 	bl	80110f0 <mg_snprintf>
 800a020:	6178      	str	r0, [r7, #20]
  if (n + 2 >= path_size) {
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	3302      	adds	r3, #2
 800a026:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a028:	429a      	cmp	r2, r3
 800a02a:	d809      	bhi.n	800a040 <uri_to_path2+0x44>
    mg_http_reply(c, 400, "", "Exceeded path size");
 800a02c:	4b95      	ldr	r3, [pc, #596]	@ (800a284 <uri_to_path2+0x288>)
 800a02e:	4a96      	ldr	r2, [pc, #600]	@ (800a288 <uri_to_path2+0x28c>)
 800a030:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	f7ff fb1d 	bl	8009674 <mg_http_reply>
    return -1;
 800a03a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a03e:	e117      	b.n	800a270 <uri_to_path2+0x274>
  }
  path[path_size - 1] = '\0';
 800a040:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a042:	3b01      	subs	r3, #1
 800a044:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a046:	4413      	add	r3, r2
 800a048:	2200      	movs	r2, #0
 800a04a:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with slash
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d012      	beq.n	800a078 <uri_to_path2+0x7c>
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	3b01      	subs	r3, #1
 800a056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a058:	4413      	add	r3, r2
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	2b2f      	cmp	r3, #47	@ 0x2f
 800a05e:	d00b      	beq.n	800a078 <uri_to_path2+0x7c>
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	1c5a      	adds	r2, r3, #1
 800a064:	617a      	str	r2, [r7, #20]
 800a066:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a068:	4413      	add	r3, r2
 800a06a:	222f      	movs	r2, #47	@ 0x2f
 800a06c:	701a      	strb	r2, [r3, #0]
 800a06e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	4413      	add	r3, r2
 800a074:	2200      	movs	r2, #0
 800a076:	701a      	strb	r2, [r3, #0]
  if (url.len < hm->uri.len) {
 800a078:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d212      	bcs.n	800a0a8 <uri_to_path2+0xac>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	689a      	ldr	r2, [r3, #8]
 800a086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a088:	18d0      	adds	r0, r2, r3
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	68da      	ldr	r2, [r3, #12]
 800a08e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a090:	1ad1      	subs	r1, r2, r3
 800a092:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	18d4      	adds	r4, r2, r3
 800a098:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	2200      	movs	r2, #0
 800a0a0:	9200      	str	r2, [sp, #0]
 800a0a2:	4622      	mov	r2, r4
 800a0a4:	f7fe f9fd 	bl	80084a2 <mg_url_decode>
                  path_size - n, 0);
  }
  path[path_size - 1] = '\0';  // Double-check
 800a0a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0ae:	4413      	add	r3, r2
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(path)) {
 800a0b4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a0b6:	f008 f987 	bl	80123c8 <mg_path_is_sane>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	f083 0301 	eor.w	r3, r3, #1
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d009      	beq.n	800a0da <uri_to_path2+0xde>
    mg_http_reply(c, 400, "", "Invalid path");
 800a0c6:	4b71      	ldr	r3, [pc, #452]	@ (800a28c <uri_to_path2+0x290>)
 800a0c8:	4a6f      	ldr	r2, [pc, #444]	@ (800a288 <uri_to_path2+0x28c>)
 800a0ca:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f7ff fad0 	bl	8009674 <mg_http_reply>
    return -1;
 800a0d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a0d8:	e0ca      	b.n	800a270 <uri_to_path2+0x274>
  }
  n = strlen(path);
 800a0da:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a0dc:	f7f6 f910 	bl	8000300 <strlen>
 800a0e0:	6178      	str	r0, [r7, #20]
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 800a0e2:	e007      	b.n	800a0f4 <uri_to_path2+0xf8>
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	617b      	str	r3, [r7, #20]
 800a0ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	701a      	strb	r2, [r3, #0]
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d906      	bls.n	800a108 <uri_to_path2+0x10c>
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a100:	4413      	add	r3, r2
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	2b2f      	cmp	r3, #47	@ 0x2f
 800a106:	d0ed      	beq.n	800a0e4 <uri_to_path2+0xe8>
  flags = mg_vcmp(&hm->uri, "/") == 0 ? MG_FS_DIR : fs->st(path, NULL, NULL);
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	3308      	adds	r3, #8
 800a10c:	4960      	ldr	r1, [pc, #384]	@ (800a290 <uri_to_path2+0x294>)
 800a10e:	4618      	mov	r0, r3
 800a110:	f007 fe50 	bl	8011db4 <mg_vcmp>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d007      	beq.n	800a12a <uri_to_path2+0x12e>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2200      	movs	r2, #0
 800a120:	2100      	movs	r1, #0
 800a122:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a124:	4798      	blx	r3
 800a126:	4603      	mov	r3, r0
 800a128:	e000      	b.n	800a12c <uri_to_path2+0x130>
 800a12a:	2304      	movs	r3, #4
 800a12c:	61fb      	str	r3, [r7, #28]
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 800a12e:	4b59      	ldr	r3, [pc, #356]	@ (800a294 <uri_to_path2+0x298>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2b03      	cmp	r3, #3
 800a134:	dd16      	ble.n	800a164 <uri_to_path2+0x168>
 800a136:	4b58      	ldr	r3, [pc, #352]	@ (800a298 <uri_to_path2+0x29c>)
 800a138:	f640 32b3 	movw	r2, #2995	@ 0xbb3
 800a13c:	4957      	ldr	r1, [pc, #348]	@ (800a29c <uri_to_path2+0x2a0>)
 800a13e:	2004      	movs	r0, #4
 800a140:	f001 ff58 	bl	800bff4 <mg_log_prefix>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	4618      	mov	r0, r3
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	689a      	ldr	r2, [r3, #8]
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	9301      	str	r3, [sp, #4]
 800a156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a158:	9300      	str	r3, [sp, #0]
 800a15a:	4613      	mov	r3, r2
 800a15c:	4602      	mov	r2, r0
 800a15e:	4850      	ldr	r0, [pc, #320]	@ (800a2a0 <uri_to_path2+0x2a4>)
 800a160:	f001 ff98 	bl	800c094 <mg_log>
              flags));
  if (flags == 0) {
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	2b00      	cmp	r3, #0
 800a168:	f000 8081 	beq.w	800a26e <uri_to_path2+0x272>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	f003 0304 	and.w	r3, r3, #4
 800a172:	2b00      	cmp	r3, #0
 800a174:	d020      	beq.n	800a1b8 <uri_to_path2+0x1bc>
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d01c      	beq.n	800a1b8 <uri_to_path2+0x1bc>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	689a      	ldr	r2, [r3, #8]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	3b01      	subs	r3, #1
 800a188:	4413      	add	r3, r2
 800a18a:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 800a18c:	2b2f      	cmp	r3, #47	@ 0x2f
 800a18e:	d013      	beq.n	800a1b8 <uri_to_path2+0x1bc>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.buf);
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 800a194:	461a      	mov	r2, r3
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	4942      	ldr	r1, [pc, #264]	@ (800a2a4 <uri_to_path2+0x2a8>)
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f003 f8b3 	bl	800d308 <mg_printf>
    c->is_resp = 0;
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800a1a8:	f36f 13c7 	bfc	r3, #7, #1
 800a1ac:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    flags = -1;
 800a1b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a1b4:	61fb      	str	r3, [r7, #28]
 800a1b6:	e05a      	b.n	800a26e <uri_to_path2+0x272>
  } else if (flags & MG_FS_DIR) {
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	f003 0304 	and.w	r3, r3, #4
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d055      	beq.n	800a26e <uri_to_path2+0x272>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 800a1c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	18d0      	adds	r0, r2, r3
 800a1c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	4a36      	ldr	r2, [pc, #216]	@ (800a2a8 <uri_to_path2+0x2ac>)
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	f006 ff8d 	bl	80110f0 <mg_snprintf>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d009      	beq.n	800a1f0 <uri_to_path2+0x1f4>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a1e6:	4798      	blx	r3
 800a1e8:	61b8      	str	r0, [r7, #24]
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d116      	bne.n	800a21e <uri_to_path2+0x222>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 800a1f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	18d0      	adds	r0, r2, r3
 800a1f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	1ad3      	subs	r3, r2, r3
 800a1fc:	4a2b      	ldr	r2, [pc, #172]	@ (800a2ac <uri_to_path2+0x2b0>)
 800a1fe:	4619      	mov	r1, r3
 800a200:	f006 ff76 	bl	80110f0 <mg_snprintf>
 800a204:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00c      	beq.n	800a224 <uri_to_path2+0x228>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2200      	movs	r2, #0
 800a210:	2100      	movs	r1, #0
 800a212:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a214:	4798      	blx	r3
 800a216:	61b8      	str	r0, [r7, #24]
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d002      	beq.n	800a224 <uri_to_path2+0x228>
      flags = tmp;
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	61fb      	str	r3, [r7, #28]
 800a222:	e024      	b.n	800a26e <uri_to_path2+0x272>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 800a224:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	18d0      	adds	r0, r2, r3
 800a22a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	1ad3      	subs	r3, r2, r3
 800a230:	4a1f      	ldr	r2, [pc, #124]	@ (800a2b0 <uri_to_path2+0x2b4>)
 800a232:	4619      	mov	r1, r3
 800a234:	f006 ff5c 	bl	80110f0 <mg_snprintf>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d012      	beq.n	800a264 <uri_to_path2+0x268>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2200      	movs	r2, #0
 800a244:	2100      	movs	r1, #0
 800a246:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a248:	4798      	blx	r3
 800a24a:	61b8      	str	r0, [r7, #24]
                    0 &&
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d008      	beq.n	800a264 <uri_to_path2+0x268>
                    0)) {  // check for gzipped index
      flags = tmp;
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	61fb      	str	r3, [r7, #28]
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	330b      	adds	r3, #11
 800a25a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a25c:	4413      	add	r3, r2
 800a25e:	2200      	movs	r2, #0
 800a260:	701a      	strb	r2, [r3, #0]
 800a262:	e004      	b.n	800a26e <uri_to_path2+0x272>
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 800a264:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	4413      	add	r3, r2
 800a26a:	2200      	movs	r2, #0
 800a26c:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 800a26e:	69fb      	ldr	r3, [r7, #28]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3724      	adds	r7, #36	@ 0x24
 800a274:	46bd      	mov	sp, r7
 800a276:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a27a:	b002      	add	sp, #8
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop
 800a280:	0802f134 	.word	0x0802f134
 800a284:	0802fa48 	.word	0x0802fa48
 800a288:	0802f694 	.word	0x0802f694
 800a28c:	0802fa5c 	.word	0x0802fa5c
 800a290:	0802fa6c 	.word	0x0802fa6c
 800a294:	20000244 	.word	0x20000244
 800a298:	08032680 	.word	0x08032680
 800a29c:	0802efcc 	.word	0x0802efcc
 800a2a0:	0802fa70 	.word	0x0802fa70
 800a2a4:	0802fa84 	.word	0x0802fa84
 800a2a8:	0802fac0 	.word	0x0802fac0
 800a2ac:	0802facc 	.word	0x0802facc
 800a2b0:	0802fadc 	.word	0x0802fadc

0800a2b4 <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b09c      	sub	sp, #112	@ 0x70
 800a2b8:	af06      	add	r7, sp, #24
 800a2ba:	6178      	str	r0, [r7, #20]
 800a2bc:	6139      	str	r1, [r7, #16]
 800a2be:	60fa      	str	r2, [r7, #12]
 800a2c0:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	695b      	ldr	r3, [r3, #20]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <uri_to_path+0x1c>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	695b      	ldr	r3, [r3, #20]
 800a2ce:	e000      	b.n	800a2d2 <uri_to_path+0x1e>
 800a2d0:	4b5b      	ldr	r3, [pc, #364]	@ (800a440 <uri_to_path+0x18c>)
 800a2d2:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a2dc:	4611      	mov	r1, r2
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f007 fcee 	bl	8011cc0 <mg_str_s>
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a2ec:	f107 031c 	add.w	r3, r7, #28
 800a2f0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800a2f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a2f8:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 800a2fc:	e078      	b.n	800a3f0 <uri_to_path+0x13c>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 800a2fe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a302:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800a306:	213d      	movs	r1, #61	@ 0x3d
 800a308:	9100      	str	r1, [sp, #0]
 800a30a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800a30e:	c903      	ldmia	r1, {r0, r1}
 800a310:	f007 ff52 	bl	80121b8 <mg_span>
 800a314:	4603      	mov	r3, r0
 800a316:	f083 0301 	eor.w	r3, r3, #1
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d014      	beq.n	800a34a <uri_to_path+0x96>
 800a320:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800a324:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800a328:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a32c:	e883 0003 	stmia.w	r3, {r0, r1}
 800a330:	463b      	mov	r3, r7
 800a332:	2200      	movs	r2, #0
 800a334:	2100      	movs	r1, #0
 800a336:	4618      	mov	r0, r3
 800a338:	f007 fcdf 	bl	8011cfa <mg_str_n>
 800a33c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a340:	463a      	mov	r2, r7
 800a342:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a346:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 800a34a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d123      	bne.n	800a398 <uri_to_path+0xe4>
 800a350:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a354:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800a358:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a35c:	e883 0003 	stmia.w	r3, {r0, r1}
 800a360:	463b      	mov	r3, r7
 800a362:	4938      	ldr	r1, [pc, #224]	@ (800a444 <uri_to_path+0x190>)
 800a364:	4618      	mov	r0, r3
 800a366:	f007 fcab 	bl	8011cc0 <mg_str_s>
 800a36a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800a36e:	463a      	mov	r2, r7
 800a370:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a374:	e883 0003 	stmia.w	r3, {r0, r1}
 800a378:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a37c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800a380:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a384:	e883 0003 	stmia.w	r3, {r0, r1}
 800a388:	f107 031c 	add.w	r3, r7, #28
 800a38c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800a390:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a394:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	68da      	ldr	r2, [r3, #12]
 800a39c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d323      	bcc.n	800a3ea <uri_to_path+0x136>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	6899      	ldr	r1, [r3, #8]
 800a3a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3a8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f007 fca4 	bl	8011cfa <mg_str_n>
 800a3b2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a3b6:	cb0c      	ldmia	r3, {r2, r3}
 800a3b8:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800a3bc:	c903      	ldmia	r1, {r0, r1}
 800a3be:	f007 fd78 	bl	8011eb2 <mg_strcmp>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d112      	bne.n	800a3ee <uri_to_path+0x13a>
    u = k, p = v;
 800a3c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3cc:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800a3d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a3d4:	e883 0003 	stmia.w	r3, {r0, r1}
 800a3d8:	f107 031c 	add.w	r3, r7, #28
 800a3dc:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800a3e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a3e4:	e883 0003 	stmia.w	r3, {r0, r1}
 800a3e8:	e002      	b.n	800a3f0 <uri_to_path+0x13c>
    if (hm->uri.len < k.len) continue;
 800a3ea:	bf00      	nop
 800a3ec:	e000      	b.n	800a3f0 <uri_to_path+0x13c>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 800a3ee:	bf00      	nop
  while (mg_span(s, &part, &s, ',')) {
 800a3f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a3f4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800a3f8:	212c      	movs	r1, #44	@ 0x2c
 800a3fa:	9100      	str	r1, [sp, #0]
 800a3fc:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800a400:	c903      	ldmia	r1, {r0, r1}
 800a402:	f007 fed9 	bl	80121b8 <mg_span>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f47f af78 	bne.w	800a2fe <uri_to_path+0x4a>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 800a40e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a410:	9304      	str	r3, [sp, #16]
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	9303      	str	r3, [sp, #12]
 800a416:	aa01      	add	r2, sp, #4
 800a418:	f107 031c 	add.w	r3, r7, #28
 800a41c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a420:	e882 0003 	stmia.w	r2, {r0, r1}
 800a424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a42c:	6939      	ldr	r1, [r7, #16]
 800a42e:	6978      	ldr	r0, [r7, #20]
 800a430:	f7ff fde4 	bl	8009ffc <uri_to_path2>
 800a434:	4603      	mov	r3, r0
}
 800a436:	4618      	mov	r0, r3
 800a438:	3758      	adds	r7, #88	@ 0x58
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	20000034 	.word	0x20000034
 800a444:	0802fa6c 	.word	0x0802fa6c

0800a448 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 800a448:	b590      	push	{r4, r7, lr}
 800a44a:	b0a9      	sub	sp, #164	@ 0xa4
 800a44c:	af02      	add	r7, sp, #8
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 800a45c:	f107 0310 	add.w	r3, r7, #16
 800a460:	2280      	movs	r2, #128	@ 0x80
 800a462:	9200      	str	r2, [sp, #0]
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	68b9      	ldr	r1, [r7, #8]
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f7ff ff23 	bl	800a2b4 <uri_to_path>
 800a46e:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
  if (flags < 0) {
 800a472:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a476:	2b00      	cmp	r3, #0
 800a478:	db3a      	blt.n	800a4f0 <mg_http_serve_dir+0xa8>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 800a47a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a47e:	f003 0304 	and.w	r3, r3, #4
 800a482:	2b00      	cmp	r3, #0
 800a484:	d007      	beq.n	800a496 <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
#else
    mg_http_reply(c, 403, "", "Forbidden\n");
 800a486:	4b1c      	ldr	r3, [pc, #112]	@ (800a4f8 <mg_http_serve_dir+0xb0>)
 800a488:	4a1c      	ldr	r2, [pc, #112]	@ (800a4fc <mg_http_serve_dir+0xb4>)
 800a48a:	f240 1193 	movw	r1, #403	@ 0x193
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f7ff f8f0 	bl	8009674 <mg_http_reply>
             mg_globmatch(sp, strlen(sp), path, strlen(path))) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 800a494:	e02c      	b.n	800a4f0 <mg_http_serve_dir+0xa8>
  } else if (flags && sp != NULL &&
 800a496:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d021      	beq.n	800a4e2 <mg_http_serve_dir+0x9a>
 800a49e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d01d      	beq.n	800a4e2 <mg_http_serve_dir+0x9a>
             mg_globmatch(sp, strlen(sp), path, strlen(path))) {
 800a4a6:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800a4aa:	f7f5 ff29 	bl	8000300 <strlen>
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	f107 0310 	add.w	r3, r7, #16
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7f5 ff23 	bl	8000300 <strlen>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	f107 0210 	add.w	r2, r7, #16
 800a4c0:	4621      	mov	r1, r4
 800a4c2:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800a4c6:	f007 fe53 	bl	8012170 <mg_globmatch>
 800a4ca:	4603      	mov	r3, r0
  } else if (flags && sp != NULL &&
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d008      	beq.n	800a4e2 <mg_http_serve_dir+0x9a>
    mg_http_serve_ssi(c, opts->root_dir, path);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f107 0210 	add.w	r2, r7, #16
 800a4d8:	4619      	mov	r1, r3
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f007 fbdc 	bl	8011c98 <mg_http_serve_ssi>
}
 800a4e0:	e006      	b.n	800a4f0 <mg_http_serve_dir+0xa8>
    mg_http_serve_file(c, hm, path, opts);
 800a4e2:	f107 0210 	add.w	r2, r7, #16
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	68b9      	ldr	r1, [r7, #8]
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f7ff fab6 	bl	8009a5c <mg_http_serve_file>
}
 800a4f0:	bf00      	nop
 800a4f2:	379c      	adds	r7, #156	@ 0x9c
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd90      	pop	{r4, r7, pc}
 800a4f8:	0802faec 	.word	0x0802faec
 800a4fc:	0802f694 	.word	0x0802f694

0800a500 <mg_http_creds>:
  if (len > 0) buf[len - 1] = '\0';           // Always.
  return n;
}

void mg_http_creds(struct mg_http_message *hm, char *user, size_t userlen,
                   char *pass, size_t passlen) {
 800a500:	b590      	push	{r4, r7, lr}
 800a502:	b0cf      	sub	sp, #316	@ 0x13c
 800a504:	af02      	add	r7, sp, #8
 800a506:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 800a50a:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 800a50e:	6020      	str	r0, [r4, #0]
 800a510:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 800a514:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 800a518:	6001      	str	r1, [r0, #0]
 800a51a:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800a51e:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 800a522:	600a      	str	r2, [r1, #0]
 800a524:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a528:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800a52c:	6013      	str	r3, [r2, #0]
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 800a52e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a532:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800a536:	497a      	ldr	r1, [pc, #488]	@ (800a720 <mg_http_creds+0x220>)
 800a538:	6818      	ldr	r0, [r3, #0]
 800a53a:	f7fe f898 	bl	800866e <mg_http_get_header>
 800a53e:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
  user[0] = pass[0] = '\0';
 800a542:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a546:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2200      	movs	r2, #0
 800a54e:	701a      	strb	r2, [r3, #0]
 800a550:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a554:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	781a      	ldrb	r2, [r3, #0]
 800a55c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a560:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	701a      	strb	r2, [r3, #0]
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800a568:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d05e      	beq.n	800a62e <mg_http_creds+0x12e>
 800a570:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	2b06      	cmp	r3, #6
 800a578:	d959      	bls.n	800a62e <mg_http_creds+0x12e>
 800a57a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2206      	movs	r2, #6
 800a582:	4968      	ldr	r1, [pc, #416]	@ (800a724 <mg_http_creds+0x224>)
 800a584:	4618      	mov	r0, r3
 800a586:	f021 fa97 	bl	802bab8 <memcmp>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d14e      	bne.n	800a62e <mg_http_creds+0x12e>
    char buf[256];
    size_t n = mg_base64_decode(v->buf + 6, v->len - 6, buf, sizeof(buf));
 800a590:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	1d98      	adds	r0, r3, #6
 800a598:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	1f99      	subs	r1, r3, #6
 800a5a0:	f107 0214 	add.w	r2, r7, #20
 800a5a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a5a8:	f7fb fc9e 	bl	8005ee8 <mg_base64_decode>
 800a5ac:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
    const char *p = (const char *) memchr(buf, ':', n > 0 ? n : 0);
 800a5b0:	f107 0314 	add.w	r3, r7, #20
 800a5b4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a5b8:	213a      	movs	r1, #58	@ 0x3a
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7f5 fe50 	bl	8000260 <memchr>
 800a5c0:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    if (p != NULL) {
 800a5c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f000 80a2 	beq.w	800a712 <mg_http_creds+0x212>
      mg_snprintf(user, userlen, "%.*s", p - buf, buf);
 800a5ce:	f107 0314 	add.w	r3, r7, #20
 800a5d2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800a5d6:	1ad2      	subs	r2, r2, r3
 800a5d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5dc:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 800a5e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5e4:	f5a3 7094 	sub.w	r0, r3, #296	@ 0x128
 800a5e8:	f107 0314 	add.w	r3, r7, #20
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	4a4d      	ldr	r2, [pc, #308]	@ (800a728 <mg_http_creds+0x228>)
 800a5f2:	6809      	ldr	r1, [r1, #0]
 800a5f4:	6800      	ldr	r0, [r0, #0]
 800a5f6:	f006 fd7b 	bl	80110f0 <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (size_t) (p - buf) - 1, p + 1);
 800a5fa:	f107 0314 	add.w	r3, r7, #20
 800a5fe:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	461a      	mov	r2, r3
 800a606:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a60a:	1a9b      	subs	r3, r3, r2
 800a60c:	1e5a      	subs	r2, r3, #1
 800a60e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800a612:	3301      	adds	r3, #1
 800a614:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800a618:	f5a1 7098 	sub.w	r0, r1, #304	@ 0x130
 800a61c:	9300      	str	r3, [sp, #0]
 800a61e:	4613      	mov	r3, r2
 800a620:	4a41      	ldr	r2, [pc, #260]	@ (800a728 <mg_http_creds+0x228>)
 800a622:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800a626:	6800      	ldr	r0, [r0, #0]
 800a628:	f006 fd62 	bl	80110f0 <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800a62c:	e071      	b.n	800a712 <mg_http_creds+0x212>
    }
  } else if (v != NULL && v->len > 7 && memcmp(v->buf, "Bearer ", 7) == 0) {
 800a62e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a632:	2b00      	cmp	r3, #0
 800a634:	d024      	beq.n	800a680 <mg_http_creds+0x180>
 800a636:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	2b07      	cmp	r3, #7
 800a63e:	d91f      	bls.n	800a680 <mg_http_creds+0x180>
 800a640:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	2207      	movs	r2, #7
 800a648:	4938      	ldr	r1, [pc, #224]	@ (800a72c <mg_http_creds+0x22c>)
 800a64a:	4618      	mov	r0, r3
 800a64c:	f021 fa34 	bl	802bab8 <memcmp>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d114      	bne.n	800a680 <mg_http_creds+0x180>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->buf + 7);
 800a656:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	1fda      	subs	r2, r3, #7
 800a65e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	3307      	adds	r3, #7
 800a666:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800a66a:	f5a1 7098 	sub.w	r0, r1, #304	@ 0x130
 800a66e:	9300      	str	r3, [sp, #0]
 800a670:	4613      	mov	r3, r2
 800a672:	4a2d      	ldr	r2, [pc, #180]	@ (800a728 <mg_http_creds+0x228>)
 800a674:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800a678:	6800      	ldr	r0, [r0, #0]
 800a67a:	f006 fd39 	bl	80110f0 <mg_snprintf>
 800a67e:	e049      	b.n	800a714 <mg_http_creds+0x214>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 800a680:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a684:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800a688:	4929      	ldr	r1, [pc, #164]	@ (800a730 <mg_http_creds+0x230>)
 800a68a:	6818      	ldr	r0, [r3, #0]
 800a68c:	f7fd ffef 	bl	800866e <mg_http_get_header>
 800a690:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 800a694:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d028      	beq.n	800a6ee <mg_http_creds+0x1ee>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 800a69c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800a6a0:	220c      	movs	r2, #12
 800a6a2:	4924      	ldr	r1, [pc, #144]	@ (800a734 <mg_http_creds+0x234>)
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f007 fb28 	bl	8011cfa <mg_str_n>
 800a6aa:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 800a6ae:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800a6b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a6bc:	ca06      	ldmia	r2, {r1, r2}
 800a6be:	f000 f864 	bl	800a78a <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 800a6c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d024      	beq.n	800a714 <mg_http_creds+0x214>
 800a6ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a6d8:	f5a2 7098 	sub.w	r0, r2, #304	@ 0x130
 800a6dc:	9300      	str	r3, [sp, #0]
 800a6de:	460b      	mov	r3, r1
 800a6e0:	4a11      	ldr	r2, [pc, #68]	@ (800a728 <mg_http_creds+0x228>)
 800a6e2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800a6e6:	6800      	ldr	r0, [r0, #0]
 800a6e8:	f006 fd02 	bl	80110f0 <mg_snprintf>
  } else {
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
  }
}
 800a6ec:	e012      	b.n	800a714 <mg_http_creds+0x214>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 800a6ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a6f2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f103 0010 	add.w	r0, r3, #16
 800a6fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a700:	f5a3 7298 	sub.w	r2, r3, #304	@ 0x130
 800a704:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a708:	6812      	ldr	r2, [r2, #0]
 800a70a:	490a      	ldr	r1, [pc, #40]	@ (800a734 <mg_http_creds+0x234>)
 800a70c:	f7fd fe54 	bl	80083b8 <mg_http_get_var>
}
 800a710:	e000      	b.n	800a714 <mg_http_creds+0x214>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800a712:	bf00      	nop
}
 800a714:	bf00      	nop
 800a716:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd90      	pop	{r4, r7, pc}
 800a71e:	bf00      	nop
 800a720:	0802faf8 	.word	0x0802faf8
 800a724:	0802fb08 	.word	0x0802fb08
 800a728:	0802f134 	.word	0x0802f134
 800a72c:	0802fb10 	.word	0x0802fb10
 800a730:	0802fb18 	.word	0x0802fb18
 800a734:	0802fb20 	.word	0x0802fb20

0800a738 <stripquotes>:

static struct mg_str stripquotes(struct mg_str s) {
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	1d3b      	adds	r3, r7, #4
 800a742:	e883 0006 	stmia.w	r3, {r1, r2}
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 800a746:	68bb      	ldr	r3, [r7, #8]
             ? mg_str_n(s.buf + 1, s.len - 2)
             : s;
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d913      	bls.n	800a774 <stripquotes+0x3c>
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	2b22      	cmp	r3, #34	@ 0x22
 800a752:	d10f      	bne.n	800a774 <stripquotes+0x3c>
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	3b01      	subs	r3, #1
 800a75a:	4413      	add	r3, r2
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	2b22      	cmp	r3, #34	@ 0x22
 800a760:	d108      	bne.n	800a774 <stripquotes+0x3c>
             ? mg_str_n(s.buf + 1, s.len - 2)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	1c59      	adds	r1, r3, #1
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	1e9a      	subs	r2, r3, #2
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	4618      	mov	r0, r3
 800a76e:	f007 fac4 	bl	8011cfa <mg_str_n>
             : s;
 800a772:	e006      	b.n	800a782 <stripquotes+0x4a>
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	461a      	mov	r2, r3
 800a778:	1d3b      	adds	r3, r7, #4
 800a77a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a77e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <mg_http_get_header_var>:

struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 800a78a:	b082      	sub	sp, #8
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b08c      	sub	sp, #48	@ 0x30
 800a790:	af00      	add	r7, sp, #0
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	1d38      	adds	r0, r7, #4
 800a796:	e880 0006 	stmia.w	r0, {r1, r2}
 800a79a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  size_t i;
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 800a79c:	2300      	movs	r3, #0
 800a79e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a7a0:	e072      	b.n	800a888 <mg_http_get_header_var+0xfe>
    if (s.buf[i + v.len] == '=' && memcmp(&s.buf[i], v.buf, v.len) == 0) {
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a7a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7a8:	440b      	add	r3, r1
 800a7aa:	4413      	add	r3, r2
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	2b3d      	cmp	r3, #61	@ 0x3d
 800a7b0:	d167      	bne.n	800a882 <mg_http_get_header_var+0xf8>
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7b6:	4413      	add	r3, r2
 800a7b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a7ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f021 f97b 	bl	802bab8 <memcmp>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d15c      	bne.n	800a882 <mg_http_get_header_var+0xf8>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ce:	440b      	add	r3, r1
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	4413      	add	r3, r2
 800a7d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	4413      	add	r3, r2
 800a7e0:	623b      	str	r3, [r7, #32]
      int q = p < x && *p == '"' ? 1 : 0;
 800a7e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7e4:	6a3b      	ldr	r3, [r7, #32]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d205      	bcs.n	800a7f6 <mg_http_get_header_var+0x6c>
 800a7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	2b22      	cmp	r3, #34	@ 0x22
 800a7f0:	d101      	bne.n	800a7f6 <mg_http_get_header_var+0x6c>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e000      	b.n	800a7f8 <mg_http_get_header_var+0x6e>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	61fb      	str	r3, [r7, #28]
      while (p < x &&
 800a7fa:	e002      	b.n	800a802 <mg_http_get_header_var+0x78>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
        p++;
 800a7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7fe:	3301      	adds	r3, #1
 800a800:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (p < x &&
 800a802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a804:	6a3b      	ldr	r3, [r7, #32]
 800a806:	429a      	cmp	r2, r3
 800a808:	d227      	bcs.n	800a85a <mg_http_get_header_var+0xd0>
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d010      	beq.n	800a832 <mg_http_get_header_var+0xa8>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 800a810:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a814:	429a      	cmp	r2, r3
 800a816:	d003      	beq.n	800a820 <mg_http_get_header_var+0x96>
 800a818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	2b22      	cmp	r3, #34	@ 0x22
 800a81e:	d001      	beq.n	800a824 <mg_http_get_header_var+0x9a>
 800a820:	2301      	movs	r3, #1
 800a822:	e000      	b.n	800a826 <mg_http_get_header_var+0x9c>
 800a824:	2300      	movs	r3, #0
      while (p < x &&
 800a826:	f003 0301 	and.w	r3, r3, #1
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d1e5      	bne.n	800a7fc <mg_http_get_header_var+0x72>
 800a830:	e013      	b.n	800a85a <mg_http_get_header_var+0xd0>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 800a832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	2b3b      	cmp	r3, #59	@ 0x3b
 800a838:	d009      	beq.n	800a84e <mg_http_get_header_var+0xc4>
 800a83a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	2b20      	cmp	r3, #32
 800a840:	d005      	beq.n	800a84e <mg_http_get_header_var+0xc4>
 800a842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	2b2c      	cmp	r3, #44	@ 0x2c
 800a848:	d001      	beq.n	800a84e <mg_http_get_header_var+0xc4>
 800a84a:	2301      	movs	r3, #1
 800a84c:	e000      	b.n	800a850 <mg_http_get_header_var+0xc6>
 800a84e:	2300      	movs	r3, #0
      while (p < x &&
 800a850:	f003 0301 	and.w	r3, r3, #1
 800a854:	b2db      	uxtb	r3, r3
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1d0      	bne.n	800a7fc <mg_http_get_header_var+0x72>
      // MG_INFO(("[%.*s] [%.*s] [%.*s]", (int) s.len, s.buf, (int) v.len,
      // v.buf, (int) (p - b), b));
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 800a85a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a85e:	1ad2      	subs	r2, r2, r3
 800a860:	69fb      	ldr	r3, [r7, #28]
 800a862:	4413      	add	r3, r2
 800a864:	461a      	mov	r2, r3
 800a866:	f107 0314 	add.w	r3, r7, #20
 800a86a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a86c:	4618      	mov	r0, r3
 800a86e:	f007 fa44 	bl	8011cfa <mg_str_n>
 800a872:	68f8      	ldr	r0, [r7, #12]
 800a874:	f107 0314 	add.w	r3, r7, #20
 800a878:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a87c:	f7ff ff5c 	bl	800a738 <stripquotes>
 800a880:	e012      	b.n	800a8a8 <mg_http_get_header_var+0x11e>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 800a882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a884:	3301      	adds	r3, #1
 800a886:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a888:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d006      	beq.n	800a89c <mg_http_get_header_var+0x112>
 800a88e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a892:	4413      	add	r3, r2
 800a894:	1c9a      	adds	r2, r3, #2
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d382      	bcc.n	800a7a2 <mg_http_get_header_var+0x18>
    }
  }
  return mg_str_n(NULL, 0);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f007 fa29 	bl	8011cfa <mg_str_n>
}
 800a8a8:	68f8      	ldr	r0, [r7, #12]
 800a8aa:	3730      	adds	r7, #48	@ 0x30
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a8b2:	b002      	add	sp, #8
 800a8b4:	4770      	bx	lr

0800a8b6 <mg_http_status>:
    }
  }
  return res;
}

int mg_http_status(const struct mg_http_message *hm) {
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b082      	sub	sp, #8
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
  return atoi(hm->uri.buf);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f01f fec6 	bl	802a654 <atoi>
 800a8c8:	4603      	mov	r3, r0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <is_hex_digit>:

static bool is_hex_digit(int c) {
 800a8d2:	b480      	push	{r7}
 800a8d4:	b083      	sub	sp, #12
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2b2f      	cmp	r3, #47	@ 0x2f
 800a8de:	dd02      	ble.n	800a8e6 <is_hex_digit+0x14>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2b39      	cmp	r3, #57	@ 0x39
 800a8e4:	dd0b      	ble.n	800a8fe <is_hex_digit+0x2c>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2b60      	cmp	r3, #96	@ 0x60
 800a8ea:	dd02      	ble.n	800a8f2 <is_hex_digit+0x20>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2b66      	cmp	r3, #102	@ 0x66
 800a8f0:	dd05      	ble.n	800a8fe <is_hex_digit+0x2c>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2b40      	cmp	r3, #64	@ 0x40
 800a8f6:	dd04      	ble.n	800a902 <is_hex_digit+0x30>
         (c >= 'A' && c <= 'F');
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2b46      	cmp	r3, #70	@ 0x46
 800a8fc:	dc01      	bgt.n	800a902 <is_hex_digit+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800a8fe:	2301      	movs	r3, #1
 800a900:	e000      	b.n	800a904 <is_hex_digit+0x32>
 800a902:	2300      	movs	r3, #0
 800a904:	f003 0301 	and.w	r3, r3, #1
 800a908:	b2db      	uxtb	r3, r3
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	370c      	adds	r7, #12
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr

0800a916 <skip_chunk>:

static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 800a916:	b580      	push	{r7, lr}
 800a918:	b086      	sub	sp, #24
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	60f8      	str	r0, [r7, #12]
 800a91e:	60b9      	str	r1, [r7, #8]
 800a920:	607a      	str	r2, [r7, #4]
 800a922:	603b      	str	r3, [r7, #0]
  int i = 0, n = 0;
 800a924:	2300      	movs	r3, #0
 800a926:	617b      	str	r3, [r7, #20]
 800a928:	2300      	movs	r3, #0
 800a92a:	613b      	str	r3, [r7, #16]
  if (len < 3) return 0;
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	2b02      	cmp	r3, #2
 800a930:	dc04      	bgt.n	800a93c <skip_chunk+0x26>
 800a932:	2300      	movs	r3, #0
 800a934:	e067      	b.n	800aa06 <skip_chunk+0xf0>
  while (i < len && is_hex_digit(buf[i])) i++;
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	3301      	adds	r3, #1
 800a93a:	617b      	str	r3, [r7, #20]
 800a93c:	697a      	ldr	r2, [r7, #20]
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	429a      	cmp	r2, r3
 800a942:	da09      	bge.n	800a958 <skip_chunk+0x42>
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	68fa      	ldr	r2, [r7, #12]
 800a948:	4413      	add	r3, r2
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7ff ffc0 	bl	800a8d2 <is_hex_digit>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d1ee      	bne.n	800a936 <skip_chunk+0x20>
  if (i == 0) return -1;                     // Error, no length specified
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d102      	bne.n	800a964 <skip_chunk+0x4e>
 800a95e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a962:	e050      	b.n	800aa06 <skip_chunk+0xf0>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	2b08      	cmp	r3, #8
 800a968:	dd02      	ble.n	800a970 <skip_chunk+0x5a>
 800a96a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a96e:	e04a      	b.n	800aa06 <skip_chunk+0xf0>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 800a970:	697a      	ldr	r2, [r7, #20]
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	429a      	cmp	r2, r3
 800a976:	da0c      	bge.n	800a992 <skip_chunk+0x7c>
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	4413      	add	r3, r2
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	2b0d      	cmp	r3, #13
 800a982:	d106      	bne.n	800a992 <skip_chunk+0x7c>
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	3301      	adds	r3, #1
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	4413      	add	r3, r2
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	2b0a      	cmp	r3, #10
 800a990:	d002      	beq.n	800a998 <skip_chunk+0x82>
 800a992:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a996:	e036      	b.n	800aa06 <skip_chunk+0xf0>
  n = (int) mg_unhexn(buf, (size_t) i);  // Decode chunk length
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	4619      	mov	r1, r3
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f007 fcc9 	bl	8012334 <mg_unhexn>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	613b      	str	r3, [r7, #16]
  if (n < 0) return -1;                  // Error
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	da02      	bge.n	800a9b2 <skip_chunk+0x9c>
 800a9ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a9b0:	e029      	b.n	800aa06 <skip_chunk+0xf0>
  if (n > len - i - 4) return 0;         // Chunk not yet fully buffered
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	1ad3      	subs	r3, r2, r3
 800a9b8:	3b03      	subs	r3, #3
 800a9ba:	693a      	ldr	r2, [r7, #16]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	db01      	blt.n	800a9c4 <skip_chunk+0xae>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	e020      	b.n	800aa06 <skip_chunk+0xf0>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 800a9c4:	697a      	ldr	r2, [r7, #20]
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	3302      	adds	r3, #2
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	2b0d      	cmp	r3, #13
 800a9d4:	d108      	bne.n	800a9e8 <skip_chunk+0xd2>
 800a9d6:	697a      	ldr	r2, [r7, #20]
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	4413      	add	r3, r2
 800a9dc:	3303      	adds	r3, #3
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	2b0a      	cmp	r3, #10
 800a9e6:	d002      	beq.n	800a9ee <skip_chunk+0xd8>
 800a9e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a9ec:	e00b      	b.n	800aa06 <skip_chunk+0xf0>
  *pl = i + 2, *dl = n;
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	1c9a      	adds	r2, r3, #2
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	601a      	str	r2, [r3, #0]
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	693a      	ldr	r2, [r7, #16]
 800a9fa:	601a      	str	r2, [r3, #0]
  return i + 2 + n + 2;
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	1c9a      	adds	r2, r3, #2
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	4413      	add	r3, r2
 800aa04:	3302      	adds	r3, #2
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3718      	adds	r7, #24
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
	...

0800aa10 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 800aa10:	b580      	push	{r7, lr}
 800aa12:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800aa1c:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800aa20:	6018      	str	r0, [r3, #0]
 800aa22:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800aa26:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800aa2a:	6019      	str	r1, [r3, #0]
 800aa2c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800aa30:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800aa34:	601a      	str	r2, [r3, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE) {
 800aa36:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800aa3a:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2b07      	cmp	r3, #7
 800aa42:	d007      	beq.n	800aa54 <http_cb+0x44>
 800aa44:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800aa48:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b09      	cmp	r3, #9
 800aa50:	f040 829d 	bne.w	800af8e <http_cb+0x57e>
    struct mg_http_message hm;
    size_t ofs = 0;  // Parsing offset
 800aa54:	2300      	movs	r3, #0
 800aa56:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
    while (c->is_resp == 0 && ofs < c->recv.len) {
 800aa5a:	e26b      	b.n	800af34 <http_cb+0x524>
      const char *buf = (char *) c->recv.buf + ofs;
 800aa5c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800aa60:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa68:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800aa6c:	4413      	add	r3, r2
 800aa6e:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 800aa72:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800aa76:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa7e:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	f107 0210 	add.w	r2, r7, #16
 800aa88:	4619      	mov	r1, r3
 800aa8a:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 800aa8e:	f7fd ff9f 	bl	80089d0 <mg_http_parse>
 800aa92:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
      struct mg_str *te;  // Transfer - encoding header
      bool is_chunked = false;
 800aa96:	2300      	movs	r3, #0
 800aa98:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
      if (n < 0) {
 800aa9c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	da38      	bge.n	800ab16 <http_cb+0x106>
        // We don't use mg_error() here, to avoid closing pipelined requests
        // prematurely, see #2592
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 800aaa4:	4bbf      	ldr	r3, [pc, #764]	@ (800ada4 <http_cb+0x394>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	dd10      	ble.n	800aace <http_cb+0xbe>
 800aaac:	4bbe      	ldr	r3, [pc, #760]	@ (800ada8 <http_cb+0x398>)
 800aaae:	f640 428d 	movw	r2, #3213	@ 0xc8d
 800aab2:	49be      	ldr	r1, [pc, #760]	@ (800adac <http_cb+0x39c>)
 800aab4:	2001      	movs	r0, #1
 800aab6:	f001 fa9d 	bl	800bff4 <mg_log_prefix>
 800aaba:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800aabe:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aac6:	4619      	mov	r1, r3
 800aac8:	48b9      	ldr	r0, [pc, #740]	@ (800adb0 <http_cb+0x3a0>)
 800aaca:	f001 fae3 	bl	800c094 <mg_log>
        c->is_draining = 1;
 800aace:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800aad2:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800aadc:	f043 0310 	orr.w	r3, r3, #16
 800aae0:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 800aae4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800aae8:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aaf0:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800aaf4:	1ad3      	subs	r3, r2, r3
 800aaf6:	2b10      	cmp	r3, #16
 800aaf8:	bf28      	it	cs
 800aafa:	2310      	movcs	r3, #16
 800aafc:	4619      	mov	r1, r3
 800aafe:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 800ab02:	f001 fafd 	bl	800c100 <mg_hexdump>
        c->recv.len = 0;
 800ab06:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800ab0a:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2200      	movs	r2, #0
 800ab12:	641a      	str	r2, [r3, #64]	@ 0x40
        return;
 800ab14:	e23b      	b.n	800af8e <http_cb+0x57e>
      }
      if (n == 0) break;                 // Request is not buffered yet
 800ab16:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f000 8222 	beq.w	800af64 <http_cb+0x554>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 800ab20:	f107 0210 	add.w	r2, r7, #16
 800ab24:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800ab28:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800ab2c:	210a      	movs	r1, #10
 800ab2e:	6818      	ldr	r0, [r3, #0]
 800ab30:	f7fc f86c 	bl	8006c0c <mg_call>
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 800ab34:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800ab38:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2b09      	cmp	r3, #9
 800ab40:	d128      	bne.n	800ab94 <http_cb+0x184>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 800ab42:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800ab46:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab4e:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800ab52:	1ad2      	subs	r2, r2, r3
 800ab54:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800ab58:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800ab5c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 800ab60:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800ab64:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800ab68:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ab6c:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 800ab70:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 800ab74:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 800ab78:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 800ab7c:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 800ab80:	f8d2 2210 	ldr.w	r2, [r2, #528]	@ 0x210
 800ab84:	1a8a      	subs	r2, r1, r2
 800ab86:	1a9a      	subs	r2, r3, r2
 800ab88:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800ab8c:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800ab90:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 800ab94:	f107 0310 	add.w	r3, r7, #16
 800ab98:	4986      	ldr	r1, [pc, #536]	@ (800adb4 <http_cb+0x3a4>)
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fd fd67 	bl	800866e <mg_http_get_header>
 800aba0:	f8c7 0248 	str.w	r0, [r7, #584]	@ 0x248
 800aba4:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d014      	beq.n	800abd6 <http_cb+0x1c6>
        if (mg_vcasecmp(te, "chunked") == 0) {
 800abac:	4982      	ldr	r1, [pc, #520]	@ (800adb8 <http_cb+0x3a8>)
 800abae:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 800abb2:	f007 f923 	bl	8011dfc <mg_vcasecmp>
 800abb6:	4603      	mov	r3, r0
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d103      	bne.n	800abc4 <http_cb+0x1b4>
          is_chunked = true;
 800abbc:	2301      	movs	r3, #1
 800abbe:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
 800abc2:	e083      	b.n	800accc <http_cb+0x2bc>
        } else {
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 800abc4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800abc8:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800abcc:	497b      	ldr	r1, [pc, #492]	@ (800adbc <http_cb+0x3ac>)
 800abce:	6818      	ldr	r0, [r3, #0]
 800abd0:	f7fc f83c 	bl	8006c4c <mg_error>
          return;
 800abd4:	e1db      	b.n	800af8e <http_cb+0x57e>
        }
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 800abd6:	f107 0310 	add.w	r3, r7, #16
 800abda:	4979      	ldr	r1, [pc, #484]	@ (800adc0 <http_cb+0x3b0>)
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fd fd46 	bl	800866e <mg_http_get_header>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d171      	bne.n	800accc <http_cb+0x2bc>
        // #2593: HTTP packets must contain either Transfer-Encoding or
        // Content-length
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 800abe8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800abec:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2205      	movs	r2, #5
 800abf4:	4973      	ldr	r1, [pc, #460]	@ (800adc4 <http_cb+0x3b4>)
 800abf6:	4618      	mov	r0, r3
 800abf8:	f007 f8ae 	bl	8011d58 <mg_ncasecmp>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	bf0c      	ite	eq
 800ac02:	2301      	moveq	r3, #1
 800ac04:	2300      	movne	r3, #0
 800ac06:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
        bool require_content_len = false;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	f887 325a 	strb.w	r3, [r7, #602]	@ 0x25a
        if (!is_response && (mg_vcasecmp(&hm.method, "POST") == 0 ||
 800ac10:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 800ac14:	f083 0301 	eor.w	r3, r3, #1
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d015      	beq.n	800ac4a <http_cb+0x23a>
 800ac1e:	f107 0310 	add.w	r3, r7, #16
 800ac22:	4969      	ldr	r1, [pc, #420]	@ (800adc8 <http_cb+0x3b8>)
 800ac24:	4618      	mov	r0, r3
 800ac26:	f007 f8e9 	bl	8011dfc <mg_vcasecmp>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d008      	beq.n	800ac42 <http_cb+0x232>
                             mg_vcasecmp(&hm.method, "PUT") == 0)) {
 800ac30:	f107 0310 	add.w	r3, r7, #16
 800ac34:	4965      	ldr	r1, [pc, #404]	@ (800adcc <http_cb+0x3bc>)
 800ac36:	4618      	mov	r0, r3
 800ac38:	f007 f8e0 	bl	8011dfc <mg_vcasecmp>
 800ac3c:	4603      	mov	r3, r0
        if (!is_response && (mg_vcasecmp(&hm.method, "POST") == 0 ||
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d103      	bne.n	800ac4a <http_cb+0x23a>
          // POST and PUT should include an entity body. Therefore, they should
          // contain a Content-length header. Other requests can also contain a
          // body, but their content has no defined semantics (RFC 7231)
          require_content_len = true;
 800ac42:	2301      	movs	r3, #1
 800ac44:	f887 325a 	strb.w	r3, [r7, #602]	@ 0x25a
 800ac48:	e022      	b.n	800ac90 <http_cb+0x280>
        } else if (is_response) {
 800ac4a:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d01e      	beq.n	800ac90 <http_cb+0x280>
          // HTTP spec 7.2 Entity body: All other responses must include a body
          // or Content-Length header field defined with a value of 0.
          int status = mg_http_status(&hm);
 800ac52:	f107 0310 	add.w	r3, r7, #16
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7ff fe2d 	bl	800a8b6 <mg_http_status>
 800ac5c:	f8c7 0240 	str.w	r0, [r7, #576]	@ 0x240
          require_content_len = status >= 200 && status != 204 && status != 304;
 800ac60:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800ac64:	2bc7      	cmp	r3, #199	@ 0xc7
 800ac66:	dd0a      	ble.n	800ac7e <http_cb+0x26e>
 800ac68:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800ac6c:	2bcc      	cmp	r3, #204	@ 0xcc
 800ac6e:	d006      	beq.n	800ac7e <http_cb+0x26e>
 800ac70:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800ac74:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 800ac78:	d001      	beq.n	800ac7e <http_cb+0x26e>
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e000      	b.n	800ac80 <http_cb+0x270>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	f887 325a 	strb.w	r3, [r7, #602]	@ 0x25a
 800ac84:	f897 325a 	ldrb.w	r3, [r7, #602]	@ 0x25a
 800ac88:	f003 0301 	and.w	r3, r3, #1
 800ac8c:	f887 325a 	strb.w	r3, [r7, #602]	@ 0x25a
        }
        if (require_content_len) {
 800ac90:	f897 325a 	ldrb.w	r3, [r7, #602]	@ 0x25a
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d019      	beq.n	800accc <http_cb+0x2bc>
          mg_http_reply(c, 411, "", "");
 800ac98:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800ac9c:	f5a3 7015 	sub.w	r0, r3, #596	@ 0x254
 800aca0:	4b4b      	ldr	r3, [pc, #300]	@ (800add0 <http_cb+0x3c0>)
 800aca2:	4a4b      	ldr	r2, [pc, #300]	@ (800add0 <http_cb+0x3c0>)
 800aca4:	f240 119b 	movw	r1, #411	@ 0x19b
 800aca8:	6800      	ldr	r0, [r0, #0]
 800acaa:	f7fe fce3 	bl	8009674 <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 800acae:	4b3d      	ldr	r3, [pc, #244]	@ (800ada4 <http_cb+0x394>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	dd0a      	ble.n	800accc <http_cb+0x2bc>
 800acb6:	4b3c      	ldr	r3, [pc, #240]	@ (800ada8 <http_cb+0x398>)
 800acb8:	f640 42b3 	movw	r2, #3251	@ 0xcb3
 800acbc:	493b      	ldr	r1, [pc, #236]	@ (800adac <http_cb+0x39c>)
 800acbe:	2001      	movs	r0, #1
 800acc0:	f001 f998 	bl	800bff4 <mg_log_prefix>
 800acc4:	4943      	ldr	r1, [pc, #268]	@ (800add4 <http_cb+0x3c4>)
 800acc6:	4844      	ldr	r0, [pc, #272]	@ (800add8 <http_cb+0x3c8>)
 800acc8:	f001 f9e4 	bl	800c094 <mg_log>
        }
      }

      if (is_chunked) {
 800accc:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	f000 80e8 	beq.w	800aea6 <http_cb+0x496>
        // For chunked data, strip off prefixes and suffixes from chunks
        // and relocate them right after the headers, then report a message
        char *s = (char *) c->recv.buf + ofs + n;
 800acd6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800acda:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ace2:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 800ace6:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800acea:	440b      	add	r3, r1
 800acec:	4413      	add	r3, r2
 800acee:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 800acf2:	2300      	movs	r3, #0
 800acf4:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 800acf8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800acfc:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ad04:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800ad08:	1ad2      	subs	r2, r2, r3
 800ad0a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800ad0e:	1ad3      	subs	r3, r2, r3
 800ad10:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234

        // Find zero-length chunk (the end of the body)
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 800ad14:	e006      	b.n	800ad24 <http_cb+0x314>
 800ad16:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 800ad1a:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800ad1e:	4413      	add	r3, r2
 800ad20:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 800ad24:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800ad28:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800ad2c:	18d0      	adds	r0, r2, r3
 800ad2e:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 800ad32:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800ad36:	1ad1      	subs	r1, r2, r3
 800ad38:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800ad3c:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 800ad40:	f7ff fde9 	bl	800a916 <skip_chunk>
 800ad44:	f8c7 0230 	str.w	r0, [r7, #560]	@ 0x230
 800ad48:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	dd03      	ble.n	800ad58 <http_cb+0x348>
 800ad50:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1de      	bne.n	800ad16 <http_cb+0x306>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 800ad58:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f000 8103 	beq.w	800af68 <http_cb+0x558>
        if (cl < 0) {
 800ad62:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	da08      	bge.n	800ad7c <http_cb+0x36c>
          mg_error(c, "Invalid chunk");
 800ad6a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800ad6e:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800ad72:	491a      	ldr	r1, [pc, #104]	@ (800addc <http_cb+0x3cc>)
 800ad74:	6818      	ldr	r0, [r3, #0]
 800ad76:	f7fb ff69 	bl	8006c4c <mg_error>
          break;
 800ad7a:	e0f8      	b.n	800af6e <http_cb+0x55e>
        }

        // Zero chunk found. Second pass: strip + relocate
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 800ad82:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800ad86:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800ad90:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 800ad94:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800ad98:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800ad9c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 800ada0:	e05d      	b.n	800ae5e <http_cb+0x44e>
 800ada2:	bf00      	nop
 800ada4:	20000244 	.word	0x20000244
 800ada8:	08032690 	.word	0x08032690
 800adac:	0802efcc 	.word	0x0802efcc
 800adb0:	0802fbd8 	.word	0x0802fbd8
 800adb4:	0802fbf0 	.word	0x0802fbf0
 800adb8:	0802fc04 	.word	0x0802fc04
 800adbc:	0802fc0c 	.word	0x0802fc0c
 800adc0:	0802fc28 	.word	0x0802fc28
 800adc4:	0802f1c0 	.word	0x0802f1c0
 800adc8:	0802f1cc 	.word	0x0802f1cc
 800adcc:	0802f1c8 	.word	0x0802f1c8
 800add0:	0802f694 	.word	0x0802f694
 800add4:	0802fc38 	.word	0x0802fc38
 800add8:	0802f120 	.word	0x0802f120
 800addc:	0802fc5c 	.word	0x0802fc5c
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 800ade0:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800ade4:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800ade8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800adec:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800adf0:	18d0      	adds	r0, r2, r3
 800adf2:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800adf6:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 800adfa:	4413      	add	r3, r2
 800adfc:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800ae00:	4413      	add	r3, r2
 800ae02:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800ae06:	4619      	mov	r1, r3
 800ae08:	f020 fe66 	bl	802bad8 <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 800ae0c:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 800ae10:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800ae14:	4413      	add	r3, r2
 800ae16:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 800ae1a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800ae1e:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800ae22:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ae26:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800ae2a:	441a      	add	r2, r3
 800ae2c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800ae30:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800ae34:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800ae38:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800ae3c:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800ae40:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ae44:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800ae48:	441a      	add	r2, r3
 800ae4a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800ae4e:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800ae52:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
          if (dl == 0) break;
 800ae56:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d016      	beq.n	800ae8c <http_cb+0x47c>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 800ae5e:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800ae62:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800ae66:	18d0      	adds	r0, r2, r3
 800ae68:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 800ae6c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800ae70:	1ad1      	subs	r1, r2, r3
 800ae72:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800ae76:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 800ae7a:	f7ff fd4c 	bl	800a916 <skip_chunk>
 800ae7e:	f8c7 0230 	str.w	r0, [r7, #560]	@ 0x230
 800ae82:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	dcaa      	bgt.n	800ade0 <http_cb+0x3d0>
 800ae8a:	e000      	b.n	800ae8e <http_cb+0x47e>
          if (dl == 0) break;
 800ae8c:	bf00      	nop
        }
        ofs += (size_t) (n + o);
 800ae8e:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 800ae92:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800ae96:	4413      	add	r3, r2
 800ae98:	461a      	mov	r2, r3
 800ae9a:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800ae9e:	4413      	add	r3, r2
 800aea0:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 800aea4:	e025      	b.n	800aef2 <http_cb+0x4e2>
      } else {  // Normal, non-chunked data
        size_t len = c->recv.len - ofs - (size_t) n;
 800aea6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800aeaa:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aeb2:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800aeb6:	1ad2      	subs	r2, r2, r3
 800aeb8:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800aebc:	1ad3      	subs	r3, r2, r3
 800aebe:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
        if (hm.body.len > len) break;  // Buffer more data
 800aec2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800aec6:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800aeca:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800aece:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d34a      	bcc.n	800af6c <http_cb+0x55c>
        ofs += (size_t) n + hm.body.len;
 800aed6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800aeda:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800aede:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aee2:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800aee6:	4413      	add	r3, r2
 800aee8:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800aeec:	4413      	add	r3, r2
 800aeee:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
      }

      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 800aef2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800aef6:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800af00:	f003 0304 	and.w	r3, r3, #4
 800af04:	b2db      	uxtb	r3, r3
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00a      	beq.n	800af20 <http_cb+0x510>
 800af0a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800af0e:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800af18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af1c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 800af20:	f107 0210 	add.w	r2, r7, #16
 800af24:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800af28:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800af2c:	210b      	movs	r1, #11
 800af2e:	6818      	ldr	r0, [r3, #0]
 800af30:	f7fb fe6c 	bl	8006c0c <mg_call>
    while (c->is_resp == 0 && ofs < c->recv.len) {
 800af34:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800af38:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800af42:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800af46:	b2db      	uxtb	r3, r3
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d110      	bne.n	800af6e <http_cb+0x55e>
 800af4c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800af50:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af58:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800af5c:	429a      	cmp	r2, r3
 800af5e:	f4ff ad7d 	bcc.w	800aa5c <http_cb+0x4c>
 800af62:	e004      	b.n	800af6e <http_cb+0x55e>
      if (n == 0) break;                 // Request is not buffered yet
 800af64:	bf00      	nop
 800af66:	e002      	b.n	800af6e <http_cb+0x55e>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 800af68:	bf00      	nop
 800af6a:	e000      	b.n	800af6e <http_cb+0x55e>
        if (hm.body.len > len) break;  // Buffer more data
 800af6c:	bf00      	nop
    }
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 800af6e:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00b      	beq.n	800af8e <http_cb+0x57e>
 800af76:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800af7a:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	3338      	adds	r3, #56	@ 0x38
 800af82:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800af86:	2100      	movs	r1, #0
 800af88:	4618      	mov	r0, r3
 800af8a:	f000 f919 	bl	800b1c0 <mg_iobuf_del>
  }
  (void) ev_data;
}
 800af8e:	f507 7718 	add.w	r7, r7, #608	@ 0x260
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop

0800af98 <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
 800afa4:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	68b9      	ldr	r1, [r7, #8]
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f002 fd5d 	bl	800da6c <mg_listen>
 800afb2:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d003      	beq.n	800afc2 <mg_http_listen+0x2a>
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	4a03      	ldr	r2, [pc, #12]	@ (800afcc <mg_http_listen+0x34>)
 800afbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 800afc2:	697b      	ldr	r3, [r7, #20]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3718      	adds	r7, #24
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	0800aa11 	.word	0x0800aa11

0800afd0 <roundup>:





static size_t roundup(size_t size, size_t align) {
 800afd0:	b480      	push	{r7}
 800afd2:	b083      	sub	sp, #12
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00a      	beq.n	800aff6 <roundup+0x26>
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	4413      	add	r3, r2
 800afe6:	1e5a      	subs	r2, r3, #1
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	fbb2 f3f3 	udiv	r3, r2, r3
 800afee:	683a      	ldr	r2, [r7, #0]
 800aff0:	fb02 f303 	mul.w	r3, r2, r3
 800aff4:	e000      	b.n	800aff8 <roundup+0x28>
 800aff6:	687b      	ldr	r3, [r7, #4]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 800b004:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b008:	b088      	sub	sp, #32
 800b00a:	af02      	add	r7, sp, #8
 800b00c:	6078      	str	r0, [r7, #4]
 800b00e:	6039      	str	r1, [r7, #0]
  int ok = 1;
 800b010:	2301      	movs	r3, #1
 800b012:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	68db      	ldr	r3, [r3, #12]
 800b018:	4619      	mov	r1, r3
 800b01a:	6838      	ldr	r0, [r7, #0]
 800b01c:	f7ff ffd8 	bl	800afd0 <roundup>
 800b020:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d117      	bne.n	800b058 <mg_iobuf_resize+0x54>
    mg_bzero(io->buf, io->size);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	4619      	mov	r1, r3
 800b032:	4610      	mov	r0, r2
 800b034:	f007 fcbe 	bl	80129b4 <mg_bzero>
    free(io->buf);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f01f fb31 	bl	802a6a4 <free>
    io->buf = NULL;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	605a      	str	r2, [r3, #4]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	685a      	ldr	r2, [r3, #4]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	609a      	str	r2, [r3, #8]
 800b056:	e053      	b.n	800b100 <mg_iobuf_resize+0xfc>
  } else if (new_size != io->size) {
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	683a      	ldr	r2, [r7, #0]
 800b05e:	429a      	cmp	r2, r3
 800b060:	d04e      	beq.n	800b100 <mg_iobuf_resize+0xfc>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 800b062:	6839      	ldr	r1, [r7, #0]
 800b064:	2001      	movs	r0, #1
 800b066:	f01f faf9 	bl	802a65c <calloc>
 800b06a:	4603      	mov	r3, r0
 800b06c:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d028      	beq.n	800b0c6 <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	683a      	ldr	r2, [r7, #0]
 800b07a:	4293      	cmp	r3, r2
 800b07c:	bf28      	it	cs
 800b07e:	4613      	movcs	r3, r2
 800b080:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00a      	beq.n	800b09e <mg_iobuf_resize+0x9a>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d006      	beq.n	800b09e <mg_iobuf_resize+0x9a>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	68fa      	ldr	r2, [r7, #12]
 800b096:	4619      	mov	r1, r3
 800b098:	6938      	ldr	r0, [r7, #16]
 800b09a:	f020 fd1d 	bl	802bad8 <memmove>
      mg_bzero(io->buf, io->size);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	4610      	mov	r0, r2
 800b0aa:	f007 fc83 	bl	80129b4 <mg_bzero>
      free(io->buf);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f01f faf6 	bl	802a6a4 <free>
      io->buf = (unsigned char *) p;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	693a      	ldr	r2, [r7, #16]
 800b0bc:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	683a      	ldr	r2, [r7, #0]
 800b0c2:	605a      	str	r2, [r3, #4]
 800b0c4:	e01c      	b.n	800b100 <mg_iobuf_resize+0xfc>
    } else {
      ok = 0;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 800b0ca:	4b10      	ldr	r3, [pc, #64]	@ (800b10c <mg_iobuf_resize+0x108>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	dd16      	ble.n	800b100 <mg_iobuf_resize+0xfc>
 800b0d2:	4b0f      	ldr	r3, [pc, #60]	@ (800b110 <mg_iobuf_resize+0x10c>)
 800b0d4:	f640 5226 	movw	r2, #3366	@ 0xd26
 800b0d8:	490e      	ldr	r1, [pc, #56]	@ (800b114 <mg_iobuf_resize+0x110>)
 800b0da:	2001      	movs	r0, #1
 800b0dc:	f000 ff8a 	bl	800bff4 <mg_log_prefix>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	4698      	mov	r8, r3
 800b0e8:	4691      	mov	r9, r2
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	461c      	mov	r4, r3
 800b0f0:	4615      	mov	r5, r2
 800b0f2:	e9cd 4500 	strd	r4, r5, [sp]
 800b0f6:	4642      	mov	r2, r8
 800b0f8:	464b      	mov	r3, r9
 800b0fa:	4807      	ldr	r0, [pc, #28]	@ (800b118 <mg_iobuf_resize+0x114>)
 800b0fc:	f000 ffca 	bl	800c094 <mg_log>
    }
  }
  return ok;
 800b100:	697b      	ldr	r3, [r7, #20]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3718      	adds	r7, #24
 800b106:	46bd      	mov	sp, r7
 800b108:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b10c:	20000244 	.word	0x20000244
 800b110:	08032698 	.word	0x08032698
 800b114:	0802efcc 	.word	0x0802efcc
 800b118:	0802fca4 	.word	0x0802fca4

0800b11c <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b086      	sub	sp, #24
 800b120:	af00      	add	r7, sp, #0
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	607a      	str	r2, [r7, #4]
 800b128:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	689a      	ldr	r2, [r3, #8]
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	441a      	add	r2, r3
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	4619      	mov	r1, r3
 800b138:	4610      	mov	r0, r2
 800b13a:	f7ff ff49 	bl	800afd0 <roundup>
 800b13e:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 800b140:	6979      	ldr	r1, [r7, #20]
 800b142:	68f8      	ldr	r0, [r7, #12]
 800b144:	f7ff ff5e 	bl	800b004 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	697a      	ldr	r2, [r7, #20]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d001      	beq.n	800b156 <mg_iobuf_add+0x3a>
 800b152:	2300      	movs	r3, #0
 800b154:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	68ba      	ldr	r2, [r7, #8]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d210      	bcs.n	800b182 <mg_iobuf_add+0x66>
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	68b9      	ldr	r1, [r7, #8]
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	440b      	add	r3, r1
 800b16a:	18d0      	adds	r0, r2, r3
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	18d1      	adds	r1, r2, r3
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	689a      	ldr	r2, [r3, #8]
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	1ad3      	subs	r3, r2, r3
 800b17c:	461a      	mov	r2, r3
 800b17e:	f020 fcab 	bl	802bad8 <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d008      	beq.n	800b19a <mg_iobuf_add+0x7e>
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	4413      	add	r3, r2
 800b190:	683a      	ldr	r2, [r7, #0]
 800b192:	6879      	ldr	r1, [r7, #4]
 800b194:	4618      	mov	r0, r3
 800b196:	f020 fc9f 	bl	802bad8 <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	68ba      	ldr	r2, [r7, #8]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d902      	bls.n	800b1aa <mg_iobuf_add+0x8e>
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	609a      	str	r2, [r3, #8]
  io->len += len;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	689a      	ldr	r2, [r3, #8]
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	441a      	add	r2, r3
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	609a      	str	r2, [r3, #8]
  return len;
 800b1b6:	683b      	ldr	r3, [r7, #0]
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3718      	adds	r7, #24
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	689b      	ldr	r3, [r3, #8]
 800b1d0:	68ba      	ldr	r2, [r7, #8]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d902      	bls.n	800b1dc <mg_iobuf_del+0x1c>
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 800b1dc:	68ba      	ldr	r2, [r7, #8]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	441a      	add	r2, r3
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d904      	bls.n	800b1f4 <mg_iobuf_del+0x34>
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	689a      	ldr	r2, [r3, #8]
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	1ad3      	subs	r3, r2, r3
 800b1f2:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d012      	beq.n	800b222 <mg_iobuf_del+0x62>
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	18d0      	adds	r0, r2, r3
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	68b9      	ldr	r1, [r7, #8]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	440b      	add	r3, r1
 800b20e:	18d1      	adds	r1, r2, r3
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	689a      	ldr	r2, [r3, #8]
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	1ad2      	subs	r2, r2, r3
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	1ad3      	subs	r3, r2, r3
 800b21c:	461a      	mov	r2, r3
 800b21e:	f020 fc5b 	bl	802bad8 <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00a      	beq.n	800b240 <mg_iobuf_del+0x80>
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	6899      	ldr	r1, [r3, #8]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	1acb      	subs	r3, r1, r3
 800b236:	4413      	add	r3, r2
 800b238:	6879      	ldr	r1, [r7, #4]
 800b23a:	4618      	mov	r0, r3
 800b23c:	f007 fbba 	bl	80129b4 <mg_bzero>
  io->len -= len;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	689a      	ldr	r2, [r3, #8]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	1ad2      	subs	r2, r2, r3
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	609a      	str	r2, [r3, #8]
  return len;
 800b24c:	687b      	ldr	r3, [r7, #4]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3710      	adds	r7, #16
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}

0800b256 <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 800b256:	b580      	push	{r7, lr}
 800b258:	b082      	sub	sp, #8
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 800b25e:	2100      	movs	r1, #0
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f7ff fecf 	bl	800b004 <mg_iobuf_resize>
}
 800b266:	bf00      	nop
 800b268:	3708      	adds	r7, #8
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
	...

0800b270 <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d001      	beq.n	800b282 <escapeseq+0x12>
 800b27e:	4b04      	ldr	r3, [pc, #16]	@ (800b290 <escapeseq+0x20>)
 800b280:	e000      	b.n	800b284 <escapeseq+0x14>
 800b282:	4b04      	ldr	r3, [pc, #16]	@ (800b294 <escapeseq+0x24>)
}
 800b284:	4618      	mov	r0, r3
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr
 800b290:	0802fcb0 	.word	0x0802fcb0
 800b294:	0802fcb8 	.word	0x0802fcb8

0800b298 <json_esc>:

static char json_esc(int c, int esc) {
 800b298:	b580      	push	{r7, lr}
 800b29a:	b086      	sub	sp, #24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 800b2a2:	6838      	ldr	r0, [r7, #0]
 800b2a4:	f7ff ffe4 	bl	800b270 <escapeseq>
 800b2a8:	6138      	str	r0, [r7, #16]
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	bf0c      	ite	eq
 800b2b0:	2301      	moveq	r3, #1
 800b2b2:	2300      	movne	r3, #0
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7ff ffda 	bl	800b270 <escapeseq>
 800b2bc:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	617b      	str	r3, [r7, #20]
 800b2c2:	e010      	b.n	800b2e6 <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d107      	bne.n	800b2e0 <json_esc+0x48>
 800b2d0:	697a      	ldr	r2, [r7, #20]
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	1ad3      	subs	r3, r2, r3
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	4413      	add	r3, r2
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	e007      	b.n	800b2f0 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	617b      	str	r3, [r7, #20]
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d1ea      	bne.n	800b2c4 <json_esc+0x2c>
  }
  return 0;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3718      	adds	r7, #24
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 800b302:	2300      	movs	r3, #0
 800b304:	60fb      	str	r3, [r7, #12]
 800b306:	e02e      	b.n	800b366 <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	4413      	add	r3, r2
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	2b5c      	cmp	r3, #92	@ 0x5c
 800b312:	d114      	bne.n	800b33e <mg_pass_string+0x46>
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	3301      	adds	r3, #1
 800b318:	683a      	ldr	r2, [r7, #0]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	dd0f      	ble.n	800b33e <mg_pass_string+0x46>
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	3301      	adds	r3, #1
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	4413      	add	r3, r2
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	2101      	movs	r1, #1
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7ff ffb4 	bl	800b298 <json_esc>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d003      	beq.n	800b33e <mg_pass_string+0x46>
      i++;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	3301      	adds	r3, #1
 800b33a:	60fb      	str	r3, [r7, #12]
 800b33c:	e010      	b.n	800b360 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	4413      	add	r3, r2
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d102      	bne.n	800b350 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 800b34a:	f06f 0301 	mvn.w	r3, #1
 800b34e:	e010      	b.n	800b372 <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	4413      	add	r3, r2
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	2b22      	cmp	r3, #34	@ 0x22
 800b35a:	d101      	bne.n	800b360 <mg_pass_string+0x68>
      return i;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	e008      	b.n	800b372 <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	3301      	adds	r3, #1
 800b364:	60fb      	str	r3, [r7, #12]
 800b366:	68fa      	ldr	r2, [r7, #12]
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	dbcc      	blt.n	800b308 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 800b36e:	f06f 0301 	mvn.w	r3, #1
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	0000      	movs	r0, r0
 800b37c:	0000      	movs	r0, r0
	...

0800b380 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 800b380:	b480      	push	{r7}
 800b382:	b091      	sub	sp, #68	@ 0x44
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 800b38c:	f04f 0200 	mov.w	r2, #0
 800b390:	f04f 0300 	mov.w	r3, #0
 800b394:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  int i = 0, sign = 1;
 800b398:	2300      	movs	r3, #0
 800b39a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b39c:	2301      	movs	r3, #1
 800b39e:	633b      	str	r3, [r7, #48]	@ 0x30

  // Sign
  if (i < len && *p == '-') {
 800b3a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	da0a      	bge.n	800b3be <mg_atod+0x3e>
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	2b2d      	cmp	r3, #45	@ 0x2d
 800b3ae:	d106      	bne.n	800b3be <mg_atod+0x3e>
    sign = -1, i++;
 800b3b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b3b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3bc:	e00a      	b.n	800b3d4 <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 800b3be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	da21      	bge.n	800b40a <mg_atod+0x8a>
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	2b2b      	cmp	r3, #43	@ 0x2b
 800b3cc:	d11d      	bne.n	800b40a <mg_atod+0x8a>
    i++;
 800b3ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800b3d4:	e019      	b.n	800b40a <mg_atod+0x8a>
    d *= 10.0;
 800b3d6:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800b3da:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b3de:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b3e2:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    d += p[i] - '0';
 800b3e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3e8:	68fa      	ldr	r2, [r7, #12]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	3b30      	subs	r3, #48	@ 0x30
 800b3f0:	ee07 3a90 	vmov	s15, r3
 800b3f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b3f8:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800b3fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b400:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800b404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b406:	3301      	adds	r3, #1
 800b408:	637b      	str	r3, [r7, #52]	@ 0x34
 800b40a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	429a      	cmp	r2, r3
 800b410:	da0b      	bge.n	800b42a <mg_atod+0xaa>
 800b412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	4413      	add	r3, r2
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	2b2f      	cmp	r3, #47	@ 0x2f
 800b41c:	d905      	bls.n	800b42a <mg_atod+0xaa>
 800b41e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	4413      	add	r3, r2
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	2b39      	cmp	r3, #57	@ 0x39
 800b428:	d9d5      	bls.n	800b3d6 <mg_atod+0x56>
  }
  d *= sign;
 800b42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b42c:	ee07 3a90 	vmov	s15, r3
 800b430:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b434:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800b438:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b43c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 800b440:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	429a      	cmp	r2, r3
 800b446:	da51      	bge.n	800b4ec <mg_atod+0x16c>
 800b448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	4413      	add	r3, r2
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	2b2e      	cmp	r3, #46	@ 0x2e
 800b452:	d14b      	bne.n	800b4ec <mg_atod+0x16c>
    double frac = 0.0, base = 0.1;
 800b454:	f04f 0200 	mov.w	r2, #0
 800b458:	f04f 0300 	mov.w	r3, #0
 800b45c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800b460:	a36d      	add	r3, pc, #436	@ (adr r3, 800b618 <mg_atod+0x298>)
 800b462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b466:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 800b46a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b46c:	3301      	adds	r3, #1
 800b46e:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800b470:	e01d      	b.n	800b4ae <mg_atod+0x12e>
      frac += base * (p[i] - '0');
 800b472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	4413      	add	r3, r2
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	3b30      	subs	r3, #48	@ 0x30
 800b47c:	ee07 3a90 	vmov	s15, r3
 800b480:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800b484:	ed97 7b08 	vldr	d7, [r7, #32]
 800b488:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b48c:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 800b490:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b494:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
      base /= 10.0;
 800b498:	ed97 6b08 	vldr	d6, [r7, #32]
 800b49c:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800b4a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b4a4:	ed87 7b08 	vstr	d7, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800b4a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	da0b      	bge.n	800b4ce <mg_atod+0x14e>
 800b4b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	2b2f      	cmp	r3, #47	@ 0x2f
 800b4c0:	d905      	bls.n	800b4ce <mg_atod+0x14e>
 800b4c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4c4:	68fa      	ldr	r2, [r7, #12]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	2b39      	cmp	r3, #57	@ 0x39
 800b4cc:	d9d1      	bls.n	800b472 <mg_atod+0xf2>
    }
    d += frac * sign;
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d0:	ee07 3a90 	vmov	s15, r3
 800b4d4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800b4d8:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800b4dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b4e0:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800b4e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b4e8:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 800b4ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	da7e      	bge.n	800b5f2 <mg_atod+0x272>
 800b4f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	2b65      	cmp	r3, #101	@ 0x65
 800b4fe:	d005      	beq.n	800b50c <mg_atod+0x18c>
 800b500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	4413      	add	r3, r2
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	2b45      	cmp	r3, #69	@ 0x45
 800b50a:	d172      	bne.n	800b5f2 <mg_atod+0x272>
    int j, exp = 0, minus = 0;
 800b50c:	2300      	movs	r3, #0
 800b50e:	61bb      	str	r3, [r7, #24]
 800b510:	2300      	movs	r3, #0
 800b512:	617b      	str	r3, [r7, #20]
    i++;
 800b514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b516:	3301      	adds	r3, #1
 800b518:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 800b51a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	429a      	cmp	r2, r3
 800b520:	da0a      	bge.n	800b538 <mg_atod+0x1b8>
 800b522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b524:	68fa      	ldr	r2, [r7, #12]
 800b526:	4413      	add	r3, r2
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b52c:	d104      	bne.n	800b538 <mg_atod+0x1b8>
 800b52e:	2301      	movs	r3, #1
 800b530:	617b      	str	r3, [r7, #20]
 800b532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b534:	3301      	adds	r3, #1
 800b536:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '+') i++;
 800b538:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	da19      	bge.n	800b574 <mg_atod+0x1f4>
 800b540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	4413      	add	r3, r2
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	2b2b      	cmp	r3, #43	@ 0x2b
 800b54a:	d113      	bne.n	800b574 <mg_atod+0x1f4>
 800b54c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b54e:	3301      	adds	r3, #1
 800b550:	637b      	str	r3, [r7, #52]	@ 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 800b552:	e00f      	b.n	800b574 <mg_atod+0x1f4>
      exp = exp * 10 + (p[i++] - '0');
 800b554:	69ba      	ldr	r2, [r7, #24]
 800b556:	4613      	mov	r3, r2
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	4413      	add	r3, r2
 800b55c:	005b      	lsls	r3, r3, #1
 800b55e:	4619      	mov	r1, r3
 800b560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b562:	1c5a      	adds	r2, r3, #1
 800b564:	637a      	str	r2, [r7, #52]	@ 0x34
 800b566:	461a      	mov	r2, r3
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	4413      	add	r3, r2
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	3b30      	subs	r3, #48	@ 0x30
 800b570:	440b      	add	r3, r1
 800b572:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 800b574:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	429a      	cmp	r2, r3
 800b57a:	da0f      	bge.n	800b59c <mg_atod+0x21c>
 800b57c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	4413      	add	r3, r2
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	2b2f      	cmp	r3, #47	@ 0x2f
 800b586:	d909      	bls.n	800b59c <mg_atod+0x21c>
 800b588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b58a:	68fa      	ldr	r2, [r7, #12]
 800b58c:	4413      	add	r3, r2
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	2b39      	cmp	r3, #57	@ 0x39
 800b592:	d803      	bhi.n	800b59c <mg_atod+0x21c>
 800b594:	69bb      	ldr	r3, [r7, #24]
 800b596:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800b59a:	dbdb      	blt.n	800b554 <mg_atod+0x1d4>
    if (minus) exp = -exp;
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d002      	beq.n	800b5a8 <mg_atod+0x228>
 800b5a2:	69bb      	ldr	r3, [r7, #24]
 800b5a4:	425b      	negs	r3, r3
 800b5a6:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	61fb      	str	r3, [r7, #28]
 800b5ac:	e00a      	b.n	800b5c4 <mg_atod+0x244>
 800b5ae:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800b5b2:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b5b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b5ba:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	61fb      	str	r3, [r7, #28]
 800b5c4:	69fa      	ldr	r2, [r7, #28]
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	dbf0      	blt.n	800b5ae <mg_atod+0x22e>
    for (j = 0; j < -exp; j++) d /= 10.0;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	61fb      	str	r3, [r7, #28]
 800b5d0:	e00a      	b.n	800b5e8 <mg_atod+0x268>
 800b5d2:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800b5d6:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800b5da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b5de:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	61fb      	str	r3, [r7, #28]
 800b5e8:	69bb      	ldr	r3, [r7, #24]
 800b5ea:	425b      	negs	r3, r3
 800b5ec:	69fa      	ldr	r2, [r7, #28]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	dbef      	blt.n	800b5d2 <mg_atod+0x252>
  }

  if (numlen != NULL) *numlen = i;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d002      	beq.n	800b5fe <mg_atod+0x27e>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b5fc:	601a      	str	r2, [r3, #0]
  return d;
 800b5fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b602:	ec43 2b17 	vmov	d7, r2, r3
}
 800b606:	eeb0 0b47 	vmov.f64	d0, d7
 800b60a:	3744      	adds	r7, #68	@ 0x44
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr
 800b614:	f3af 8000 	nop.w
 800b618:	9999999a 	.word	0x9999999a
 800b61c:	3fb99999 	.word	0x3fb99999

0800b620 <mg_json_get>:
    if (ofs > obj.len) ofs = 0;
  }
  return ofs;
}

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 800b620:	b590      	push	{r4, r7, lr}
 800b622:	b09b      	sub	sp, #108	@ 0x6c
 800b624:	af00      	add	r7, sp, #0
 800b626:	f107 0408 	add.w	r4, r7, #8
 800b62a:	e884 0003 	stmia.w	r4, {r0, r1}
 800b62e:	607a      	str	r2, [r7, #4]
 800b630:	603b      	str	r3, [r7, #0]
  const char *s = json.buf;
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	647b      	str	r3, [r7, #68]	@ 0x44
  int len = (int) json.len;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	643b      	str	r3, [r7, #64]	@ 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 800b63a:	2300      	movs	r3, #0
 800b63c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 800b640:	2300      	movs	r3, #0
 800b642:	663b      	str	r3, [r7, #96]	@ 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 800b644:	2300      	movs	r3, #0
 800b646:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int depth = 0;         // Current depth (nesting level)
 800b648:	2300      	movs	r3, #0
 800b64a:	65bb      	str	r3, [r7, #88]	@ 0x58
  int ed = 0;            // Expected depth
 800b64c:	2300      	movs	r3, #0
 800b64e:	657b      	str	r3, [r7, #84]	@ 0x54
  int pos = 1;           // Current position in `path`
 800b650:	2301      	movs	r3, #1
 800b652:	653b      	str	r3, [r7, #80]	@ 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 800b654:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b658:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b65a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b65e:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (toklen) *toklen = 0;
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d002      	beq.n	800b66c <mg_json_get+0x4c>
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	2200      	movs	r2, #0
 800b66a:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	2b24      	cmp	r3, #36	@ 0x24
 800b672:	d002      	beq.n	800b67a <mg_json_get+0x5a>
 800b674:	f06f 0301 	mvn.w	r3, #1
 800b678:	e308      	b.n	800bc8c <mg_json_get+0x66c>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 800b67a:	2300      	movs	r3, #0
 800b67c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b67e:	e2fe      	b.n	800bc7e <mg_json_get+0x65e>
    unsigned char c = ((unsigned char *) s)[i];
 800b680:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b682:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b684:	4413      	add	r3, r2
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800b68c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b690:	2b20      	cmp	r3, #32
 800b692:	f000 82ee 	beq.w	800bc72 <mg_json_get+0x652>
 800b696:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b69a:	2b09      	cmp	r3, #9
 800b69c:	f000 82e9 	beq.w	800bc72 <mg_json_get+0x652>
 800b6a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b6a4:	2b0a      	cmp	r3, #10
 800b6a6:	f000 82e4 	beq.w	800bc72 <mg_json_get+0x652>
 800b6aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b6ae:	2b0d      	cmp	r3, #13
 800b6b0:	f000 82df 	beq.w	800bc72 <mg_json_get+0x652>
    switch (expecting) {
 800b6b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b6b8:	2b03      	cmp	r3, #3
 800b6ba:	f200 82dd 	bhi.w	800bc78 <mg_json_get+0x658>
 800b6be:	a201      	add	r2, pc, #4	@ (adr r2, 800b6c4 <mg_json_get+0xa4>)
 800b6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c4:	0800b6d5 	.word	0x0800b6d5
 800b6c8:	0800b9bd 	.word	0x0800b9bd
 800b6cc:	0800bb4b 	.word	0x0800bb4b
 800b6d0:	0800bb61 	.word	0x0800bb61
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 800b6d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b6d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d101      	bne.n	800b6e0 <mg_json_get+0xc0>
 800b6dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6de:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (c == '{') {
 800b6e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b6e4:	2b7b      	cmp	r3, #123	@ 0x7b
 800b6e6:	d12b      	bne.n	800b740 <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 800b6e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b6ea:	2b1d      	cmp	r3, #29
 800b6ec:	dd02      	ble.n	800b6f4 <mg_json_get+0xd4>
 800b6ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b6f2:	e2cb      	b.n	800bc8c <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 800b6f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b6f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d114      	bne.n	800b726 <mg_json_get+0x106>
 800b6fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	4413      	add	r3, r2
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	2b2e      	cmp	r3, #46	@ 0x2e
 800b706:	d10e      	bne.n	800b726 <mg_json_get+0x106>
 800b708:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b70a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d10a      	bne.n	800b726 <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 800b710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b712:	3301      	adds	r3, #1
 800b714:	657b      	str	r3, [r7, #84]	@ 0x54
 800b716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b718:	3301      	adds	r3, #1
 800b71a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b71c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b720:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b722:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b724:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          nesting[depth++] = c;
 800b726:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b728:	1c5a      	adds	r2, r3, #1
 800b72a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b72c:	3368      	adds	r3, #104	@ 0x68
 800b72e:	443b      	add	r3, r7
 800b730:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800b734:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 800b738:	2301      	movs	r3, #1
 800b73a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          break;
 800b73e:	e29b      	b.n	800bc78 <mg_json_get+0x658>
        } else if (c == '[') {
 800b740:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b744:	2b5b      	cmp	r3, #91	@ 0x5b
 800b746:	d14e      	bne.n	800b7e6 <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 800b748:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b74a:	2b1d      	cmp	r3, #29
 800b74c:	dd02      	ble.n	800b754 <mg_json_get+0x134>
 800b74e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b752:	e29b      	b.n	800bc8c <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 800b754:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b758:	429a      	cmp	r2, r3
 800b75a:	d13a      	bne.n	800b7d2 <mg_json_get+0x1b2>
 800b75c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	4413      	add	r3, r2
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	2b5b      	cmp	r3, #91	@ 0x5b
 800b766:	d134      	bne.n	800b7d2 <mg_json_get+0x1b2>
 800b768:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b76a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d130      	bne.n	800b7d2 <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 800b770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b772:	3301      	adds	r3, #1
 800b774:	657b      	str	r3, [r7, #84]	@ 0x54
 800b776:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b778:	3301      	adds	r3, #1
 800b77a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b77c:	2300      	movs	r3, #0
 800b77e:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 800b780:	2300      	movs	r3, #0
 800b782:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b784:	e010      	b.n	800b7a8 <mg_json_get+0x188>
              ei *= 10;
 800b786:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b788:	4613      	mov	r3, r2
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	4413      	add	r3, r2
 800b78e:	005b      	lsls	r3, r3, #1
 800b790:	64bb      	str	r3, [r7, #72]	@ 0x48
              ei += path[pos] - '0';
 800b792:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	4413      	add	r3, r2
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	3b30      	subs	r3, #48	@ 0x30
 800b79c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b79e:	4413      	add	r3, r2
 800b7a0:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 800b7a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	2b5d      	cmp	r3, #93	@ 0x5d
 800b7b2:	d005      	beq.n	800b7c0 <mg_json_get+0x1a0>
 800b7b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	4413      	add	r3, r2
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d1e2      	bne.n	800b786 <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 800b7c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	4413      	add	r3, r2
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d002      	beq.n	800b7d2 <mg_json_get+0x1b2>
 800b7cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          nesting[depth++] = c;
 800b7d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b7d4:	1c5a      	adds	r2, r3, #1
 800b7d6:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b7d8:	3368      	adds	r3, #104	@ 0x68
 800b7da:	443b      	add	r3, r7
 800b7dc:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800b7e0:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 800b7e4:	e248      	b.n	800bc78 <mg_json_get+0x658>
        } else if (c == ']' && depth > 0) {  // Empty array
 800b7e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b7ea:	2b5d      	cmp	r3, #93	@ 0x5d
 800b7ec:	d13a      	bne.n	800b864 <mg_json_get+0x244>
 800b7ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	dd37      	ble.n	800b864 <mg_json_get+0x244>
          MG_EOO(']');
 800b7f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b7f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d106      	bne.n	800b80a <mg_json_get+0x1ea>
 800b7fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b7fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b800:	429a      	cmp	r2, r3
 800b802:	d002      	beq.n	800b80a <mg_json_get+0x1ea>
 800b804:	f06f 0302 	mvn.w	r3, #2
 800b808:	e240      	b.n	800bc8c <mg_json_get+0x66c>
 800b80a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800b80e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b810:	3b01      	subs	r3, #1
 800b812:	3368      	adds	r3, #104	@ 0x68
 800b814:	443b      	add	r3, r7
 800b816:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800b81a:	3302      	adds	r3, #2
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d002      	beq.n	800b826 <mg_json_get+0x206>
 800b820:	f06f 0301 	mvn.w	r3, #1
 800b824:	e232      	b.n	800bc8c <mg_json_get+0x66c>
 800b826:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b828:	3b01      	subs	r3, #1
 800b82a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b82c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b82e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b830:	429a      	cmp	r2, r3
 800b832:	f040 809c 	bne.w	800b96e <mg_json_get+0x34e>
 800b836:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	4413      	add	r3, r2
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f040 8095 	bne.w	800b96e <mg_json_get+0x34e>
 800b844:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b848:	429a      	cmp	r2, r3
 800b84a:	f040 8090 	bne.w	800b96e <mg_json_get+0x34e>
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d005      	beq.n	800b860 <mg_json_get+0x240>
 800b854:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b856:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	1c5a      	adds	r2, r3, #1
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	601a      	str	r2, [r3, #0]
 800b860:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b862:	e213      	b.n	800bc8c <mg_json_get+0x66c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 800b864:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b868:	2b74      	cmp	r3, #116	@ 0x74
 800b86a:	d113      	bne.n	800b894 <mg_json_get+0x274>
 800b86c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b86e:	3303      	adds	r3, #3
 800b870:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b872:	429a      	cmp	r2, r3
 800b874:	dd0e      	ble.n	800b894 <mg_json_get+0x274>
 800b876:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b878:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b87a:	4413      	add	r3, r2
 800b87c:	2204      	movs	r2, #4
 800b87e:	4998      	ldr	r1, [pc, #608]	@ (800bae0 <mg_json_get+0x4c0>)
 800b880:	4618      	mov	r0, r3
 800b882:	f020 f919 	bl	802bab8 <memcmp>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d103      	bne.n	800b894 <mg_json_get+0x274>
          i += 3;
 800b88c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b88e:	3303      	adds	r3, #3
 800b890:	663b      	str	r3, [r7, #96]	@ 0x60
 800b892:	e06c      	b.n	800b96e <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 800b894:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b898:	2b6e      	cmp	r3, #110	@ 0x6e
 800b89a:	d113      	bne.n	800b8c4 <mg_json_get+0x2a4>
 800b89c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b89e:	3303      	adds	r3, #3
 800b8a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	dd0e      	ble.n	800b8c4 <mg_json_get+0x2a4>
 800b8a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8aa:	4413      	add	r3, r2
 800b8ac:	2204      	movs	r2, #4
 800b8ae:	498d      	ldr	r1, [pc, #564]	@ (800bae4 <mg_json_get+0x4c4>)
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f020 f901 	bl	802bab8 <memcmp>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d103      	bne.n	800b8c4 <mg_json_get+0x2a4>
          i += 3;
 800b8bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8be:	3303      	adds	r3, #3
 800b8c0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b8c2:	e054      	b.n	800b96e <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 800b8c4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b8c8:	2b66      	cmp	r3, #102	@ 0x66
 800b8ca:	d113      	bne.n	800b8f4 <mg_json_get+0x2d4>
 800b8cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8ce:	3304      	adds	r3, #4
 800b8d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	dd0e      	ble.n	800b8f4 <mg_json_get+0x2d4>
 800b8d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8da:	4413      	add	r3, r2
 800b8dc:	2205      	movs	r2, #5
 800b8de:	4982      	ldr	r1, [pc, #520]	@ (800bae8 <mg_json_get+0x4c8>)
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f020 f8e9 	bl	802bab8 <memcmp>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d103      	bne.n	800b8f4 <mg_json_get+0x2d4>
          i += 4;
 800b8ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8ee:	3304      	adds	r3, #4
 800b8f0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b8f2:	e03c      	b.n	800b96e <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 800b8f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b8f8:	2b2d      	cmp	r3, #45	@ 0x2d
 800b8fa:	d007      	beq.n	800b90c <mg_json_get+0x2ec>
 800b8fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b900:	2b2f      	cmp	r3, #47	@ 0x2f
 800b902:	d916      	bls.n	800b932 <mg_json_get+0x312>
 800b904:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b908:	2b39      	cmp	r3, #57	@ 0x39
 800b90a:	d812      	bhi.n	800b932 <mg_json_get+0x312>
          int numlen = 0;
 800b90c:	2300      	movs	r3, #0
 800b90e:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 800b910:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b914:	18d0      	adds	r0, r2, r3
 800b916:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b918:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b91a:	1ad3      	subs	r3, r2, r3
 800b91c:	f107 0210 	add.w	r2, r7, #16
 800b920:	4619      	mov	r1, r3
 800b922:	f7ff fd2d 	bl	800b380 <mg_atod>
          i += numlen - 1;
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	3b01      	subs	r3, #1
 800b92a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b92c:	4413      	add	r3, r2
 800b92e:	663b      	str	r3, [r7, #96]	@ 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 800b930:	e01d      	b.n	800b96e <mg_json_get+0x34e>
        } else if (c == '"') {
 800b932:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b936:	2b22      	cmp	r3, #34	@ 0x22
 800b938:	d116      	bne.n	800b968 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 800b93a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b93c:	3301      	adds	r3, #1
 800b93e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b940:	18d0      	adds	r0, r2, r3
 800b942:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b944:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b946:	1ad3      	subs	r3, r2, r3
 800b948:	3b01      	subs	r3, #1
 800b94a:	4619      	mov	r1, r3
 800b94c:	f7ff fcd4 	bl	800b2f8 <mg_pass_string>
 800b950:	6378      	str	r0, [r7, #52]	@ 0x34
          if (n < 0) return n;
 800b952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b954:	2b00      	cmp	r3, #0
 800b956:	da01      	bge.n	800b95c <mg_json_get+0x33c>
 800b958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b95a:	e197      	b.n	800bc8c <mg_json_get+0x66c>
          i += n + 1;
 800b95c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b95e:	3301      	adds	r3, #1
 800b960:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b962:	4413      	add	r3, r2
 800b964:	663b      	str	r3, [r7, #96]	@ 0x60
 800b966:	e002      	b.n	800b96e <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 800b968:	f06f 0301 	mvn.w	r3, #1
 800b96c:	e18e      	b.n	800bc8c <mg_json_get+0x66c>
        }
        MG_CHECKRET('V');
 800b96e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b972:	429a      	cmp	r2, r3
 800b974:	d114      	bne.n	800b9a0 <mg_json_get+0x380>
 800b976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	4413      	add	r3, r2
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d10e      	bne.n	800b9a0 <mg_json_get+0x380>
 800b982:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b984:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b986:	429a      	cmp	r2, r3
 800b988:	d10a      	bne.n	800b9a0 <mg_json_get+0x380>
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d005      	beq.n	800b99c <mg_json_get+0x37c>
 800b990:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b992:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b994:	1ad3      	subs	r3, r2, r3
 800b996:	1c5a      	adds	r2, r3, #1
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	601a      	str	r2, [r3, #0]
 800b99c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b99e:	e175      	b.n	800bc8c <mg_json_get+0x66c>
        if (depth == ed && ei >= 0) ci++;
 800b9a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b9a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d105      	bne.n	800b9b4 <mg_json_get+0x394>
 800b9a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	db02      	blt.n	800b9b4 <mg_json_get+0x394>
 800b9ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        expecting = S_COMMA_OR_EOO;
 800b9b4:	2303      	movs	r3, #3
 800b9b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 800b9ba:	e15d      	b.n	800bc78 <mg_json_get+0x658>

      case S_KEY:
        if (c == '"') {
 800b9bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b9c0:	2b22      	cmp	r3, #34	@ 0x22
 800b9c2:	d170      	bne.n	800baa6 <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 800b9c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9ca:	18d0      	adds	r0, r2, r3
 800b9cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9d0:	1ad3      	subs	r3, r2, r3
 800b9d2:	3b01      	subs	r3, #1
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	f7ff fc8f 	bl	800b2f8 <mg_pass_string>
 800b9da:	63b8      	str	r0, [r7, #56]	@ 0x38
          if (n < 0) return n;
 800b9dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	da01      	bge.n	800b9e6 <mg_json_get+0x3c6>
 800b9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9e4:	e152      	b.n	800bc8c <mg_json_get+0x66c>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 800b9e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9e8:	1c5a      	adds	r2, r3, #1
 800b9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ec:	4413      	add	r3, r2
 800b9ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	dc02      	bgt.n	800b9fa <mg_json_get+0x3da>
 800b9f4:	f06f 0302 	mvn.w	r3, #2
 800b9f8:	e148      	b.n	800bc8c <mg_json_get+0x66c>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 800b9fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b9fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	da02      	bge.n	800ba08 <mg_json_get+0x3e8>
 800ba02:	f06f 0302 	mvn.w	r3, #2
 800ba06:	e141      	b.n	800bc8c <mg_json_get+0x66c>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 800ba08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ba0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d109      	bne.n	800ba24 <mg_json_get+0x404>
 800ba10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba12:	3b01      	subs	r3, #1
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	4413      	add	r3, r2
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba1c:	d002      	beq.n	800ba24 <mg_json_get+0x404>
 800ba1e:	f06f 0302 	mvn.w	r3, #2
 800ba22:	e133      	b.n	800bc8c <mg_json_get+0x66c>
          // printf("K %s [%.*s] [%.*s] %d %d %d %d %d\n", path, pos, path, n,
          //        &s[i + 1], n, depth, ed, ci, ei);
          //  NOTE(cpq): in the check sequence below is important.
          //  strncmp() must go first: it fails fast if the remaining length
          //  of the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 800ba24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ba26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d133      	bne.n	800ba94 <mg_json_get+0x474>
 800ba2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	4413      	add	r3, r2
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba38:	d12c      	bne.n	800ba94 <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 800ba3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba40:	18d0      	adds	r0, r2, r3
 800ba42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	4413      	add	r3, r2
 800ba48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	f020 f873 	bl	802bb36 <strncmp>
 800ba50:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d11e      	bne.n	800ba94 <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800ba56:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ba58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba5a:	4413      	add	r3, r2
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4413      	add	r3, r2
 800ba62:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d011      	beq.n	800ba8c <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800ba68:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ba6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba6c:	4413      	add	r3, r2
 800ba6e:	461a      	mov	r2, r3
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	4413      	add	r3, r2
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba78:	d008      	beq.n	800ba8c <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 800ba7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ba7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba7e:	4413      	add	r3, r2
 800ba80:	461a      	mov	r2, r3
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	4413      	add	r3, r2
 800ba86:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800ba88:	2b5b      	cmp	r3, #91	@ 0x5b
 800ba8a:	d103      	bne.n	800ba94 <mg_json_get+0x474>
            pos += n;
 800ba8c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ba8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba90:	4413      	add	r3, r2
 800ba92:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          i += n + 1;
 800ba94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba96:	3301      	adds	r3, #1
 800ba98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ba9a:	4413      	add	r3, r2
 800ba9c:	663b      	str	r3, [r7, #96]	@ 0x60
          expecting = S_COLON;
 800ba9e:	2302      	movs	r3, #2
 800baa0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800baa4:	e0e7      	b.n	800bc76 <mg_json_get+0x656>
        } else if (c == '}') {  // Empty object
 800baa6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800baaa:	2b7d      	cmp	r3, #125	@ 0x7d
 800baac:	d14a      	bne.n	800bb44 <mg_json_get+0x524>
          MG_EOO('}');
 800baae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d106      	bne.n	800bac4 <mg_json_get+0x4a4>
 800bab6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bab8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800baba:	429a      	cmp	r2, r3
 800babc:	d002      	beq.n	800bac4 <mg_json_get+0x4a4>
 800babe:	f06f 0302 	mvn.w	r3, #2
 800bac2:	e0e3      	b.n	800bc8c <mg_json_get+0x66c>
 800bac4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800bac8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800baca:	3b01      	subs	r3, #1
 800bacc:	3368      	adds	r3, #104	@ 0x68
 800bace:	443b      	add	r3, r7
 800bad0:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800bad4:	3302      	adds	r3, #2
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d008      	beq.n	800baec <mg_json_get+0x4cc>
 800bada:	f06f 0301 	mvn.w	r3, #1
 800bade:	e0d5      	b.n	800bc8c <mg_json_get+0x66c>
 800bae0:	0802fcc4 	.word	0x0802fcc4
 800bae4:	0802fccc 	.word	0x0802fccc
 800bae8:	0802fcd4 	.word	0x0802fcd4
 800baec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800baee:	3b01      	subs	r3, #1
 800baf0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800baf2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800baf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d114      	bne.n	800bb24 <mg_json_get+0x504>
 800bafa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	4413      	add	r3, r2
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d10e      	bne.n	800bb24 <mg_json_get+0x504>
 800bb06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bb08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d10a      	bne.n	800bb24 <mg_json_get+0x504>
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d005      	beq.n	800bb20 <mg_json_get+0x500>
 800bb14:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bb16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb18:	1ad3      	subs	r3, r2, r3
 800bb1a:	1c5a      	adds	r2, r3, #1
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	601a      	str	r2, [r3, #0]
 800bb20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb22:	e0b3      	b.n	800bc8c <mg_json_get+0x66c>
          expecting = S_COMMA_OR_EOO;
 800bb24:	2303      	movs	r3, #3
 800bb26:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          if (depth == ed && ei >= 0) ci++;
 800bb2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bb2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	f040 80a1 	bne.w	800bc76 <mg_json_get+0x656>
 800bb34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f2c0 809d 	blt.w	800bc76 <mg_json_get+0x656>
 800bb3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb3e:	3301      	adds	r3, #1
 800bb40:	64fb      	str	r3, [r7, #76]	@ 0x4c
        break;
 800bb42:	e098      	b.n	800bc76 <mg_json_get+0x656>
          return MG_JSON_INVALID;
 800bb44:	f06f 0301 	mvn.w	r3, #1
 800bb48:	e0a0      	b.n	800bc8c <mg_json_get+0x66c>

      case S_COLON:
        if (c == ':') {
 800bb4a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bb4e:	2b3a      	cmp	r3, #58	@ 0x3a
 800bb50:	d103      	bne.n	800bb5a <mg_json_get+0x53a>
          expecting = S_VALUE;
 800bb52:	2300      	movs	r3, #0
 800bb54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800bb58:	e08e      	b.n	800bc78 <mg_json_get+0x658>
          return MG_JSON_INVALID;
 800bb5a:	f06f 0301 	mvn.w	r3, #1
 800bb5e:	e095      	b.n	800bc8c <mg_json_get+0x66c>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 800bb60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	dc02      	bgt.n	800bb6c <mg_json_get+0x54c>
          return MG_JSON_INVALID;
 800bb66:	f06f 0301 	mvn.w	r3, #1
 800bb6a:	e08f      	b.n	800bc8c <mg_json_get+0x66c>
        } else if (c == ',') {
 800bb6c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bb70:	2b2c      	cmp	r3, #44	@ 0x2c
 800bb72:	d10d      	bne.n	800bb90 <mg_json_get+0x570>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 800bb74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb76:	3b01      	subs	r3, #1
 800bb78:	3368      	adds	r3, #104	@ 0x68
 800bb7a:	443b      	add	r3, r7
 800bb7c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800bb80:	2b7b      	cmp	r3, #123	@ 0x7b
 800bb82:	bf0c      	ite	eq
 800bb84:	2301      	moveq	r3, #1
 800bb86:	2300      	movne	r3, #0
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800bb8e:	e073      	b.n	800bc78 <mg_json_get+0x658>
        } else if (c == ']' || c == '}') {
 800bb90:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bb94:	2b5d      	cmp	r3, #93	@ 0x5d
 800bb96:	d003      	beq.n	800bba0 <mg_json_get+0x580>
 800bb98:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bb9c:	2b7d      	cmp	r3, #125	@ 0x7d
 800bb9e:	d163      	bne.n	800bc68 <mg_json_get+0x648>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 800bba0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d10d      	bne.n	800bbc4 <mg_json_get+0x5a4>
 800bba8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bbac:	2b7d      	cmp	r3, #125	@ 0x7d
 800bbae:	d109      	bne.n	800bbc4 <mg_json_get+0x5a4>
 800bbb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	4413      	add	r3, r2
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbbc:	d102      	bne.n	800bbc4 <mg_json_get+0x5a4>
            return MG_JSON_NOT_FOUND;
 800bbbe:	f06f 0302 	mvn.w	r3, #2
 800bbc2:	e063      	b.n	800bc8c <mg_json_get+0x66c>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 800bbc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bbc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d10d      	bne.n	800bbe8 <mg_json_get+0x5c8>
 800bbcc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bbd0:	2b5d      	cmp	r3, #93	@ 0x5d
 800bbd2:	d109      	bne.n	800bbe8 <mg_json_get+0x5c8>
 800bbd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbd6:	3b01      	subs	r3, #1
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	4413      	add	r3, r2
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	2b2c      	cmp	r3, #44	@ 0x2c
 800bbe0:	d102      	bne.n	800bbe8 <mg_json_get+0x5c8>
            return MG_JSON_NOT_FOUND;
 800bbe2:	f06f 0302 	mvn.w	r3, #2
 800bbe6:	e051      	b.n	800bc8c <mg_json_get+0x66c>
          MG_EOO('O');
 800bbe8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bbea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d106      	bne.n	800bbfe <mg_json_get+0x5de>
 800bbf0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bbf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d002      	beq.n	800bbfe <mg_json_get+0x5de>
 800bbf8:	f06f 0302 	mvn.w	r3, #2
 800bbfc:	e046      	b.n	800bc8c <mg_json_get+0x66c>
 800bbfe:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800bc02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc04:	3b01      	subs	r3, #1
 800bc06:	3368      	adds	r3, #104	@ 0x68
 800bc08:	443b      	add	r3, r7
 800bc0a:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800bc0e:	3302      	adds	r3, #2
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d002      	beq.n	800bc1a <mg_json_get+0x5fa>
 800bc14:	f06f 0301 	mvn.w	r3, #1
 800bc18:	e038      	b.n	800bc8c <mg_json_get+0x66c>
 800bc1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc1c:	3b01      	subs	r3, #1
 800bc1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bc20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d114      	bne.n	800bc52 <mg_json_get+0x632>
 800bc28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d10e      	bne.n	800bc52 <mg_json_get+0x632>
 800bc34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bc36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d10a      	bne.n	800bc52 <mg_json_get+0x632>
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d005      	beq.n	800bc4e <mg_json_get+0x62e>
 800bc42:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bc44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc46:	1ad3      	subs	r3, r2, r3
 800bc48:	1c5a      	adds	r2, r3, #1
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	601a      	str	r2, [r3, #0]
 800bc4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc50:	e01c      	b.n	800bc8c <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 800bc52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d109      	bne.n	800bc6e <mg_json_get+0x64e>
 800bc5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	db06      	blt.n	800bc6e <mg_json_get+0x64e>
 800bc60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc62:	3301      	adds	r3, #1
 800bc64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc66:	e002      	b.n	800bc6e <mg_json_get+0x64e>
          return MG_JSON_INVALID;
 800bc68:	f06f 0301 	mvn.w	r3, #1
 800bc6c:	e00e      	b.n	800bc8c <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 800bc6e:	bf00      	nop
        break;
 800bc70:	e002      	b.n	800bc78 <mg_json_get+0x658>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800bc72:	bf00      	nop
 800bc74:	e000      	b.n	800bc78 <mg_json_get+0x658>
        break;
 800bc76:	bf00      	nop
  for (i = 0; i < len; i++) {
 800bc78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	663b      	str	r3, [r7, #96]	@ 0x60
 800bc7e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bc80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc82:	429a      	cmp	r2, r3
 800bc84:	f6ff acfc 	blt.w	800b680 <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 800bc88:	f06f 0302 	mvn.w	r3, #2
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	376c      	adds	r7, #108	@ 0x6c
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd90      	pop	{r4, r7, pc}

0800bc94 <mg_json_get_num>:
  int len = 0, ofs = mg_json_get(json, path, &len);
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
                  (size_t) (len < 0 ? 0 : len));
}

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 800bc94:	b590      	push	{r4, r7, lr}
 800bc96:	b089      	sub	sp, #36	@ 0x24
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	f107 0408 	add.w	r4, r7, #8
 800bc9e:	e884 0003 	stmia.w	r4, {r0, r1}
 800bca2:	607a      	str	r2, [r7, #4]
 800bca4:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 800bca6:	2300      	movs	r3, #0
 800bca8:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 800bcaa:	f107 0314 	add.w	r3, r7, #20
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	f107 0108 	add.w	r1, r7, #8
 800bcb4:	c903      	ldmia	r1, {r0, r1}
 800bcb6:	f7ff fcb3 	bl	800b620 <mg_json_get>
 800bcba:	61b8      	str	r0, [r7, #24]
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	db23      	blt.n	800bd0a <mg_json_get_num+0x76>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 800bcc2:	68ba      	ldr	r2, [r7, #8]
 800bcc4:	69bb      	ldr	r3, [r7, #24]
 800bcc6:	4413      	add	r3, r2
 800bcc8:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 800bcca:	2b2d      	cmp	r3, #45	@ 0x2d
 800bccc:	d00b      	beq.n	800bce6 <mg_json_get_num+0x52>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 800bcce:	68ba      	ldr	r2, [r7, #8]
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	4413      	add	r3, r2
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	2b2f      	cmp	r3, #47	@ 0x2f
 800bcd8:	d917      	bls.n	800bd0a <mg_json_get_num+0x76>
 800bcda:	68ba      	ldr	r2, [r7, #8]
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	4413      	add	r3, r2
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	2b39      	cmp	r3, #57	@ 0x39
 800bce4:	d811      	bhi.n	800bd0a <mg_json_get_num+0x76>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00c      	beq.n	800bd06 <mg_json_get_num+0x72>
 800bcec:	68ba      	ldr	r2, [r7, #8]
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	6979      	ldr	r1, [r7, #20]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7ff fb42 	bl	800b380 <mg_atod>
 800bcfc:	eeb0 7b40 	vmov.f64	d7, d0
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 800bd06:	2301      	movs	r3, #1
 800bd08:	61fb      	str	r3, [r7, #28]
  }
  return found;
 800bd0a:	69fb      	ldr	r3, [r7, #28]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	bf14      	ite	ne
 800bd10:	2301      	movne	r3, #1
 800bd12:	2300      	moveq	r3, #0
 800bd14:	b2db      	uxtb	r3, r3
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3724      	adds	r7, #36	@ 0x24
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd90      	pop	{r4, r7, pc}

0800bd1e <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 800bd1e:	b590      	push	{r4, r7, lr}
 800bd20:	b087      	sub	sp, #28
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	f107 0408 	add.w	r4, r7, #8
 800bd28:	e884 0003 	stmia.w	r4, {r0, r1}
 800bd2c:	607a      	str	r2, [r7, #4]
 800bd2e:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 800bd30:	2300      	movs	r3, #0
 800bd32:	617b      	str	r3, [r7, #20]
 800bd34:	2300      	movs	r3, #0
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	f107 0108 	add.w	r1, r7, #8
 800bd3c:	c903      	ldmia	r1, {r0, r1}
 800bd3e:	f7ff fc6f 	bl	800b620 <mg_json_get>
 800bd42:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	db1b      	blt.n	800bd82 <mg_json_get_bool+0x64>
 800bd4a:	68ba      	ldr	r2, [r7, #8]
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	4413      	add	r3, r2
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	2b74      	cmp	r3, #116	@ 0x74
 800bd54:	d005      	beq.n	800bd62 <mg_json_get_bool+0x44>
 800bd56:	68ba      	ldr	r2, [r7, #8]
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	4413      	add	r3, r2
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	2b66      	cmp	r3, #102	@ 0x66
 800bd60:	d10f      	bne.n	800bd82 <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.buf[off] == 't';
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d00a      	beq.n	800bd7e <mg_json_get_bool+0x60>
 800bd68:	68ba      	ldr	r2, [r7, #8]
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	4413      	add	r3, r2
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	2b74      	cmp	r3, #116	@ 0x74
 800bd72:	bf0c      	ite	eq
 800bd74:	2301      	moveq	r3, #1
 800bd76:	2300      	movne	r3, #0
 800bd78:	b2da      	uxtb	r2, r3
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	701a      	strb	r2, [r3, #0]
    found = 1;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	617b      	str	r3, [r7, #20]
  }
  return found;
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	bf14      	ite	ne
 800bd88:	2301      	movne	r3, #1
 800bd8a:	2300      	moveq	r3, #0
 800bd8c:	b2db      	uxtb	r3, r3
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	371c      	adds	r7, #28
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd90      	pop	{r4, r7, pc}

0800bd96 <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 800bd96:	b590      	push	{r4, r7, lr}
 800bd98:	b089      	sub	sp, #36	@ 0x24
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	f107 0408 	add.w	r4, r7, #8
 800bda0:	e884 0003 	stmia.w	r4, {r0, r1}
 800bda4:	607a      	str	r2, [r7, #4]
 800bda6:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 800bda8:	2300      	movs	r3, #0
 800bdaa:	61fb      	str	r3, [r7, #28]
 800bdac:	2300      	movs	r3, #0
 800bdae:	61bb      	str	r3, [r7, #24]
 800bdb0:	e065      	b.n	800be7e <mg_json_unescape+0xe8>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 800bdb2:	68ba      	ldr	r2, [r7, #8]
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	2b5c      	cmp	r3, #92	@ 0x5c
 800bdbc:	d12d      	bne.n	800be1a <mg_json_unescape+0x84>
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	1d5a      	adds	r2, r3, #5
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d228      	bcs.n	800be1a <mg_json_unescape+0x84>
 800bdc8:	68ba      	ldr	r2, [r7, #8]
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	3301      	adds	r3, #1
 800bdce:	4413      	add	r3, r2
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	2b75      	cmp	r3, #117	@ 0x75
 800bdd4:	d121      	bne.n	800be1a <mg_json_unescape+0x84>
      //  \uXXXX escape. We could process a simple one-byte chars
      // \u00xx from the ASCII range. More complex chars would require
      // dragging in a UTF8 library, which is too much for us
      if (s.buf[i + 2] != '0' || s.buf[i + 3] != '0') return false;  // Give up
 800bdd6:	68ba      	ldr	r2, [r7, #8]
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	3302      	adds	r3, #2
 800bddc:	4413      	add	r3, r2
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	2b30      	cmp	r3, #48	@ 0x30
 800bde2:	d106      	bne.n	800bdf2 <mg_json_unescape+0x5c>
 800bde4:	68ba      	ldr	r2, [r7, #8]
 800bde6:	69fb      	ldr	r3, [r7, #28]
 800bde8:	3303      	adds	r3, #3
 800bdea:	4413      	add	r3, r2
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	2b30      	cmp	r3, #48	@ 0x30
 800bdf0:	d001      	beq.n	800bdf6 <mg_json_unescape+0x60>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	e05a      	b.n	800beac <mg_json_unescape+0x116>
      ((unsigned char *) to)[j] = (unsigned char) mg_unhexn(s.buf + i + 4, 2);
 800bdf6:	68ba      	ldr	r2, [r7, #8]
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	3304      	adds	r3, #4
 800bdfc:	4413      	add	r3, r2
 800bdfe:	2102      	movs	r1, #2
 800be00:	4618      	mov	r0, r3
 800be02:	f006 fa97 	bl	8012334 <mg_unhexn>
 800be06:	4601      	mov	r1, r0
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	4413      	add	r3, r2
 800be0e:	b2ca      	uxtb	r2, r1
 800be10:	701a      	strb	r2, [r3, #0]

      i += 5;
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	3305      	adds	r3, #5
 800be16:	61fb      	str	r3, [r7, #28]
 800be18:	e02b      	b.n	800be72 <mg_json_unescape+0xdc>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 800be1a:	68ba      	ldr	r2, [r7, #8]
 800be1c:	69fb      	ldr	r3, [r7, #28]
 800be1e:	4413      	add	r3, r2
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	2b5c      	cmp	r3, #92	@ 0x5c
 800be24:	d11d      	bne.n	800be62 <mg_json_unescape+0xcc>
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	1c5a      	adds	r2, r3, #1
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d218      	bcs.n	800be62 <mg_json_unescape+0xcc>
      char c = json_esc(s.buf[i + 1], 0);
 800be30:	68ba      	ldr	r2, [r7, #8]
 800be32:	69fb      	ldr	r3, [r7, #28]
 800be34:	3301      	adds	r3, #1
 800be36:	4413      	add	r3, r2
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	2100      	movs	r1, #0
 800be3c:	4618      	mov	r0, r3
 800be3e:	f7ff fa2b 	bl	800b298 <json_esc>
 800be42:	4603      	mov	r3, r0
 800be44:	75fb      	strb	r3, [r7, #23]
      if (c == 0) return false;
 800be46:	7dfb      	ldrb	r3, [r7, #23]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d101      	bne.n	800be50 <mg_json_unescape+0xba>
 800be4c:	2300      	movs	r3, #0
 800be4e:	e02d      	b.n	800beac <mg_json_unescape+0x116>
      to[j] = c;
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	69bb      	ldr	r3, [r7, #24]
 800be54:	4413      	add	r3, r2
 800be56:	7dfa      	ldrb	r2, [r7, #23]
 800be58:	701a      	strb	r2, [r3, #0]
      i++;
 800be5a:	69fb      	ldr	r3, [r7, #28]
 800be5c:	3301      	adds	r3, #1
 800be5e:	61fb      	str	r3, [r7, #28]
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 800be60:	e007      	b.n	800be72 <mg_json_unescape+0xdc>
    } else {
      to[j] = s.buf[i];
 800be62:	68ba      	ldr	r2, [r7, #8]
 800be64:	69fb      	ldr	r3, [r7, #28]
 800be66:	441a      	add	r2, r3
 800be68:	6879      	ldr	r1, [r7, #4]
 800be6a:	69bb      	ldr	r3, [r7, #24]
 800be6c:	440b      	add	r3, r1
 800be6e:	7812      	ldrb	r2, [r2, #0]
 800be70:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 800be72:	69fb      	ldr	r3, [r7, #28]
 800be74:	3301      	adds	r3, #1
 800be76:	61fb      	str	r3, [r7, #28]
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	3301      	adds	r3, #1
 800be7c:	61bb      	str	r3, [r7, #24]
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	69fa      	ldr	r2, [r7, #28]
 800be82:	429a      	cmp	r2, r3
 800be84:	d203      	bcs.n	800be8e <mg_json_unescape+0xf8>
 800be86:	69ba      	ldr	r2, [r7, #24]
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d391      	bcc.n	800bdb2 <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 800be8e:	69ba      	ldr	r2, [r7, #24]
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	429a      	cmp	r2, r3
 800be94:	d301      	bcc.n	800be9a <mg_json_unescape+0x104>
 800be96:	2300      	movs	r3, #0
 800be98:	e008      	b.n	800beac <mg_json_unescape+0x116>
  if (n > 0) to[j] = '\0';
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d004      	beq.n	800beaa <mg_json_unescape+0x114>
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	4413      	add	r3, r2
 800bea6:	2200      	movs	r2, #0
 800bea8:	701a      	strb	r2, [r3, #0]
  return true;
 800beaa:	2301      	movs	r3, #1
}
 800beac:	4618      	mov	r0, r3
 800beae:	3724      	adds	r7, #36	@ 0x24
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd90      	pop	{r4, r7, pc}

0800beb4 <mg_json_get_str>:

char *mg_json_get_str(struct mg_str json, const char *path) {
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b08a      	sub	sp, #40	@ 0x28
 800beb8:	af00      	add	r7, sp, #0
 800beba:	f107 0308 	add.w	r3, r7, #8
 800bebe:	e883 0003 	stmia.w	r3, {r0, r1}
 800bec2:	607a      	str	r2, [r7, #4]
  char *result = NULL;
 800bec4:	2300      	movs	r3, #0
 800bec6:	627b      	str	r3, [r7, #36]	@ 0x24
  int len = 0, off = mg_json_get(json, path, &len);
 800bec8:	2300      	movs	r3, #0
 800beca:	617b      	str	r3, [r7, #20]
 800becc:	f107 0314 	add.w	r3, r7, #20
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	f107 0108 	add.w	r1, r7, #8
 800bed6:	c903      	ldmia	r1, {r0, r1}
 800bed8:	f7ff fba2 	bl	800b620 <mg_json_get>
 800bedc:	6238      	str	r0, [r7, #32]
  if (off >= 0 && len > 1 && json.buf[off] == '"') {
 800bede:	6a3b      	ldr	r3, [r7, #32]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	db30      	blt.n	800bf46 <mg_json_get_str+0x92>
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	dd2d      	ble.n	800bf46 <mg_json_get_str+0x92>
 800beea:	68ba      	ldr	r2, [r7, #8]
 800beec:	6a3b      	ldr	r3, [r7, #32]
 800beee:	4413      	add	r3, r2
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	2b22      	cmp	r3, #34	@ 0x22
 800bef4:	d127      	bne.n	800bf46 <mg_json_get_str+0x92>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	4619      	mov	r1, r3
 800befa:	2001      	movs	r0, #1
 800befc:	f01e fbae 	bl	802a65c <calloc>
 800bf00:	4603      	mov	r3, r0
 800bf02:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d01d      	beq.n	800bf46 <mg_json_get_str+0x92>
        !mg_json_unescape(mg_str_n(json.buf + off + 1, (size_t) (len - 2)),
 800bf0a:	68ba      	ldr	r2, [r7, #8]
 800bf0c:	6a3b      	ldr	r3, [r7, #32]
 800bf0e:	3301      	adds	r3, #1
 800bf10:	18d1      	adds	r1, r2, r3
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	3b02      	subs	r3, #2
 800bf16:	461a      	mov	r2, r3
 800bf18:	f107 0318 	add.w	r3, r7, #24
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f005 feec 	bl	8011cfa <mg_str_n>
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf26:	f107 0118 	add.w	r1, r7, #24
 800bf2a:	c903      	ldmia	r1, {r0, r1}
 800bf2c:	f7ff ff33 	bl	800bd96 <mg_json_unescape>
 800bf30:	4603      	mov	r3, r0
 800bf32:	f083 0301 	eor.w	r3, r3, #1
 800bf36:	b2db      	uxtb	r3, r3
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d004      	beq.n	800bf46 <mg_json_get_str+0x92>
                          result, (size_t) len)) {
      free(result);
 800bf3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bf3e:	f01e fbb1 	bl	802a6a4 <free>
      result = NULL;
 800bf42:	2300      	movs	r3, #0
 800bf44:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return result;
 800bf46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3728      	adds	r7, #40	@ 0x28
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <mg_json_get_long>:
    if (slen != NULL) *slen = len / 2 - 1;
  }
  return result;
}

long mg_json_get_long(struct mg_str json, const char *path, long dflt) {
 800bf50:	b590      	push	{r4, r7, lr}
 800bf52:	b089      	sub	sp, #36	@ 0x24
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	f107 0408 	add.w	r4, r7, #8
 800bf5a:	e884 0003 	stmia.w	r4, {r0, r1}
 800bf5e:	607a      	str	r2, [r7, #4]
 800bf60:	603b      	str	r3, [r7, #0]
  double dv;
  long result = dflt;
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	61fb      	str	r3, [r7, #28]
  if (mg_json_get_num(json, path, &dv)) result = (long) dv;
 800bf66:	f107 0310 	add.w	r3, r7, #16
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	f107 0108 	add.w	r1, r7, #8
 800bf70:	c903      	ldmia	r1, {r0, r1}
 800bf72:	f7ff fe8f 	bl	800bc94 <mg_json_get_num>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d006      	beq.n	800bf8a <mg_json_get_long+0x3a>
 800bf7c:	ed97 7b04 	vldr	d7, [r7, #16]
 800bf80:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800bf84:	ee17 3a90 	vmov	r3, s15
 800bf88:	61fb      	str	r3, [r7, #28]
  return result;
 800bf8a:	69fb      	ldr	r3, [r7, #28]
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3724      	adds	r7, #36	@ 0x24
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd90      	pop	{r4, r7, pc}

0800bf94 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 800bf9e:	4b05      	ldr	r3, [pc, #20]	@ (800bfb4 <logc+0x20>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4a05      	ldr	r2, [pc, #20]	@ (800bfb8 <logc+0x24>)
 800bfa4:	6811      	ldr	r1, [r2, #0]
 800bfa6:	79fa      	ldrb	r2, [r7, #7]
 800bfa8:	4610      	mov	r0, r2
 800bfaa:	4798      	blx	r3
}
 800bfac:	bf00      	nop
 800bfae:	3708      	adds	r7, #8
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	20000248 	.word	0x20000248
 800bfb8:	20011b00 	.word	0x20011b00

0800bfbc <logs>:

static void logs(const char *buf, size_t len) {
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	60fb      	str	r3, [r7, #12]
 800bfca:	e009      	b.n	800bfe0 <logs+0x24>
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f7ff ffdd 	bl	800bf94 <logc>
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	60fb      	str	r3, [r7, #12]
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d3f1      	bcc.n	800bfcc <logs+0x10>
}
 800bfe8:	bf00      	nop
 800bfea:	bf00      	nop
 800bfec:	3710      	adds	r7, #16
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
	...

0800bff4 <mg_log_prefix>:

#if MG_ENABLE_CUSTOM_LOG
// Let user define their own mg_log_prefix() and mg_log()
#else
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 800bff4:	b590      	push	{r4, r7, lr}
 800bff6:	b099      	sub	sp, #100	@ 0x64
 800bff8:	af06      	add	r7, sp, #24
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]
 800c000:	603b      	str	r3, [r7, #0]
  const char *p = strrchr(file, '/');
 800c002:	212f      	movs	r1, #47	@ 0x2f
 800c004:	68b8      	ldr	r0, [r7, #8]
 800c006:	f01f fda8 	bl	802bb5a <strrchr>
 800c00a:	6478      	str	r0, [r7, #68]	@ 0x44
  char buf[41];
  size_t n;
  if (p == NULL) p = strrchr(file, '\\');
 800c00c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d104      	bne.n	800c01c <mg_log_prefix+0x28>
 800c012:	215c      	movs	r1, #92	@ 0x5c
 800c014:	68b8      	ldr	r0, [r7, #8]
 800c016:	f01f fda0 	bl	802bb5a <strrchr>
 800c01a:	6478      	str	r0, [r7, #68]	@ 0x44
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 800c01c:	f7f7 fbdc 	bl	80037d8 <mg_millis>
 800c020:	4602      	mov	r2, r0
 800c022:	460b      	mov	r3, r1
 800c024:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c026:	2900      	cmp	r1, #0
 800c028:	d002      	beq.n	800c030 <mg_log_prefix+0x3c>
 800c02a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c02c:	3101      	adds	r1, #1
 800c02e:	e000      	b.n	800c032 <mg_log_prefix+0x3e>
 800c030:	68b9      	ldr	r1, [r7, #8]
 800c032:	f107 0414 	add.w	r4, r7, #20
 800c036:	6838      	ldr	r0, [r7, #0]
 800c038:	9005      	str	r0, [sp, #20]
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	9004      	str	r0, [sp, #16]
 800c03e:	9103      	str	r1, [sp, #12]
 800c040:	68f9      	ldr	r1, [r7, #12]
 800c042:	9102      	str	r1, [sp, #8]
 800c044:	e9cd 2300 	strd	r2, r3, [sp]
 800c048:	4a11      	ldr	r2, [pc, #68]	@ (800c090 <mg_log_prefix+0x9c>)
 800c04a:	2129      	movs	r1, #41	@ 0x29
 800c04c:	4620      	mov	r0, r4
 800c04e:	f005 f84f 	bl	80110f0 <mg_snprintf>
 800c052:	6438      	str	r0, [r7, #64]	@ 0x40
                  p == NULL ? file : p + 1, line, fname);
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 800c054:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c056:	2b27      	cmp	r3, #39	@ 0x27
 800c058:	d90a      	bls.n	800c070 <mg_log_prefix+0x7c>
 800c05a:	2327      	movs	r3, #39	@ 0x27
 800c05c:	643b      	str	r3, [r7, #64]	@ 0x40
  while (n < sizeof(buf)) buf[n++] = ' ';
 800c05e:	e007      	b.n	800c070 <mg_log_prefix+0x7c>
 800c060:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c062:	1c5a      	adds	r2, r3, #1
 800c064:	643a      	str	r2, [r7, #64]	@ 0x40
 800c066:	3348      	adds	r3, #72	@ 0x48
 800c068:	443b      	add	r3, r7
 800c06a:	2220      	movs	r2, #32
 800c06c:	f803 2c34 	strb.w	r2, [r3, #-52]
 800c070:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c072:	2b28      	cmp	r3, #40	@ 0x28
 800c074:	d9f4      	bls.n	800c060 <mg_log_prefix+0x6c>
  logs(buf, n - 1);
 800c076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c078:	1e5a      	subs	r2, r3, #1
 800c07a:	f107 0314 	add.w	r3, r7, #20
 800c07e:	4611      	mov	r1, r2
 800c080:	4618      	mov	r0, r3
 800c082:	f7ff ff9b 	bl	800bfbc <logs>
}
 800c086:	bf00      	nop
 800c088:	374c      	adds	r7, #76	@ 0x4c
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd90      	pop	{r4, r7, pc}
 800c08e:	bf00      	nop
 800c090:	0802fcdc 	.word	0x0802fcdc

0800c094 <mg_log>:

void mg_log(const char *fmt, ...) {
 800c094:	b40f      	push	{r0, r1, r2, r3}
 800c096:	b580      	push	{r7, lr}
 800c098:	b082      	sub	sp, #8
 800c09a:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 800c09c:	f107 0314 	add.w	r3, r7, #20
 800c0a0:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 800c0a2:	4b09      	ldr	r3, [pc, #36]	@ (800c0c8 <mg_log+0x34>)
 800c0a4:	6818      	ldr	r0, [r3, #0]
 800c0a6:	4b09      	ldr	r3, [pc, #36]	@ (800c0cc <mg_log+0x38>)
 800c0a8:	6819      	ldr	r1, [r3, #0]
 800c0aa:	1d3b      	adds	r3, r7, #4
 800c0ac:	693a      	ldr	r2, [r7, #16]
 800c0ae:	f7fb fa7b 	bl	80075a8 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 800c0b2:	2102      	movs	r1, #2
 800c0b4:	4806      	ldr	r0, [pc, #24]	@ (800c0d0 <mg_log+0x3c>)
 800c0b6:	f7ff ff81 	bl	800bfbc <logs>
}
 800c0ba:	bf00      	nop
 800c0bc:	3708      	adds	r7, #8
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c0c4:	b004      	add	sp, #16
 800c0c6:	4770      	bx	lr
 800c0c8:	20000248 	.word	0x20000248
 800c0cc:	20011b00 	.word	0x20011b00
 800c0d0:	0802f19c 	.word	0x0802f19c

0800c0d4 <nibble>:
#endif

static unsigned char nibble(unsigned c) {
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b09      	cmp	r3, #9
 800c0e0:	d804      	bhi.n	800c0ec <nibble+0x18>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	3330      	adds	r3, #48	@ 0x30
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	e003      	b.n	800c0f4 <nibble+0x20>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	3357      	adds	r3, #87	@ 0x57
 800c0f2:	b2db      	uxtb	r3, r3
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 800c100:	b580      	push	{r7, lr}
 800c102:	b08a      	sub	sp, #40	@ 0x28
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 800c10e:	2300      	movs	r3, #0
 800c110:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 800c114:	2300      	movs	r3, #0
 800c116:	623b      	str	r3, [r7, #32]
 800c118:	e07a      	b.n	800c210 <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 800c11a:	6a3b      	ldr	r3, [r7, #32]
 800c11c:	f003 030f 	and.w	r3, r3, #15
 800c120:	2b00      	cmp	r3, #0
 800c122:	d13a      	bne.n	800c19a <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 800c124:	6a3b      	ldr	r3, [r7, #32]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d00f      	beq.n	800c14a <mg_hexdump+0x4a>
 800c12a:	2102      	movs	r1, #2
 800c12c:	484c      	ldr	r0, [pc, #304]	@ (800c260 <mg_hexdump+0x160>)
 800c12e:	f7ff ff45 	bl	800bfbc <logs>
 800c132:	f107 030c 	add.w	r3, r7, #12
 800c136:	2110      	movs	r1, #16
 800c138:	4618      	mov	r0, r3
 800c13a:	f7ff ff3f 	bl	800bfbc <logs>
 800c13e:	200a      	movs	r0, #10
 800c140:	f7ff ff28 	bl	800bf94 <logc>
 800c144:	2300      	movs	r3, #0
 800c146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 800c14a:	6a3b      	ldr	r3, [r7, #32]
 800c14c:	0b1b      	lsrs	r3, r3, #12
 800c14e:	f003 030f 	and.w	r3, r3, #15
 800c152:	4618      	mov	r0, r3
 800c154:	f7ff ffbe 	bl	800c0d4 <nibble>
 800c158:	4603      	mov	r3, r0
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7ff ff1a 	bl	800bf94 <logc>
 800c160:	6a3b      	ldr	r3, [r7, #32]
 800c162:	0a1b      	lsrs	r3, r3, #8
 800c164:	f003 030f 	and.w	r3, r3, #15
 800c168:	4618      	mov	r0, r3
 800c16a:	f7ff ffb3 	bl	800c0d4 <nibble>
 800c16e:	4603      	mov	r3, r0
 800c170:	4618      	mov	r0, r3
 800c172:	f7ff ff0f 	bl	800bf94 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 800c176:	6a3b      	ldr	r3, [r7, #32]
 800c178:	091b      	lsrs	r3, r3, #4
 800c17a:	f003 030f 	and.w	r3, r3, #15
 800c17e:	4618      	mov	r0, r3
 800c180:	f7ff ffa8 	bl	800c0d4 <nibble>
 800c184:	4603      	mov	r3, r0
 800c186:	4618      	mov	r0, r3
 800c188:	f7ff ff04 	bl	800bf94 <logc>
 800c18c:	2030      	movs	r0, #48	@ 0x30
 800c18e:	f7ff ff01 	bl	800bf94 <logc>
 800c192:	2103      	movs	r1, #3
 800c194:	4833      	ldr	r0, [pc, #204]	@ (800c264 <mg_hexdump+0x164>)
 800c196:	f7ff ff11 	bl	800bfbc <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 800c19a:	69fa      	ldr	r2, [r7, #28]
 800c19c:	6a3b      	ldr	r3, [r7, #32]
 800c19e:	4413      	add	r3, r2
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	091b      	lsrs	r3, r3, #4
 800c1a4:	b2db      	uxtb	r3, r3
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7ff ff94 	bl	800c0d4 <nibble>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7ff fef0 	bl	800bf94 <logc>
 800c1b4:	69fa      	ldr	r2, [r7, #28]
 800c1b6:	6a3b      	ldr	r3, [r7, #32]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	f003 030f 	and.w	r3, r3, #15
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7ff ff87 	bl	800c0d4 <nibble>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7ff fee3 	bl	800bf94 <logc>
    logc(' ');                                         // Space after hex number
 800c1ce:	2020      	movs	r0, #32
 800c1d0:	f7ff fee0 	bl	800bf94 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 800c1d4:	69fa      	ldr	r2, [r7, #28]
 800c1d6:	6a3b      	ldr	r3, [r7, #32]
 800c1d8:	4413      	add	r3, r2
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	2b1f      	cmp	r3, #31
 800c1de:	d90a      	bls.n	800c1f6 <mg_hexdump+0xf6>
 800c1e0:	69fa      	ldr	r2, [r7, #28]
 800c1e2:	6a3b      	ldr	r3, [r7, #32]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	2b7e      	cmp	r3, #126	@ 0x7e
 800c1ea:	d804      	bhi.n	800c1f6 <mg_hexdump+0xf6>
 800c1ec:	69fa      	ldr	r2, [r7, #28]
 800c1ee:	6a3b      	ldr	r3, [r7, #32]
 800c1f0:	4413      	add	r3, r2
 800c1f2:	781a      	ldrb	r2, [r3, #0]
 800c1f4:	e000      	b.n	800c1f8 <mg_hexdump+0xf8>
 800c1f6:	222e      	movs	r2, #46	@ 0x2e
 800c1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c1fc:	1c59      	adds	r1, r3, #1
 800c1fe:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 800c202:	3328      	adds	r3, #40	@ 0x28
 800c204:	443b      	add	r3, r7
 800c206:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 800c20a:	6a3b      	ldr	r3, [r7, #32]
 800c20c:	3301      	adds	r3, #1
 800c20e:	623b      	str	r3, [r7, #32]
 800c210:	6a3a      	ldr	r2, [r7, #32]
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	429a      	cmp	r2, r3
 800c216:	d380      	bcc.n	800c11a <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 800c218:	e00d      	b.n	800c236 <mg_hexdump+0x136>
 800c21a:	2103      	movs	r1, #3
 800c21c:	4811      	ldr	r0, [pc, #68]	@ (800c264 <mg_hexdump+0x164>)
 800c21e:	f7ff fecd 	bl	800bfbc <logs>
 800c222:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c226:	1c5a      	adds	r2, r3, #1
 800c228:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 800c22c:	3328      	adds	r3, #40	@ 0x28
 800c22e:	443b      	add	r3, r7
 800c230:	2220      	movs	r2, #32
 800c232:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800c236:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c23a:	2b0f      	cmp	r3, #15
 800c23c:	d9ed      	bls.n	800c21a <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 800c23e:	2102      	movs	r1, #2
 800c240:	4807      	ldr	r0, [pc, #28]	@ (800c260 <mg_hexdump+0x160>)
 800c242:	f7ff febb 	bl	800bfbc <logs>
 800c246:	f107 030c 	add.w	r3, r7, #12
 800c24a:	2110      	movs	r1, #16
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7ff feb5 	bl	800bfbc <logs>
 800c252:	200a      	movs	r0, #10
 800c254:	f7ff fe9e 	bl	800bf94 <logc>
}
 800c258:	bf00      	nop
 800c25a:	3728      	adds	r7, #40	@ 0x28
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	0802fcf0 	.word	0x0802fcf0
 800c264:	0802fcf4 	.word	0x0802fcf4

0800c268 <mg_mqtt_send_header>:
    {MQTT_PROP_WILDCARD_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SUBSCRIPTION_IDENTIFIER_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SHARED_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE}};

void mg_mqtt_send_header(struct mg_connection *c, uint8_t cmd, uint8_t flags,
                         uint32_t len) {
 800c268:	b580      	push	{r7, lr}
 800c26a:	b088      	sub	sp, #32
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	607b      	str	r3, [r7, #4]
 800c272:	460b      	mov	r3, r1
 800c274:	72fb      	strb	r3, [r7, #11]
 800c276:	4613      	mov	r3, r2
 800c278:	72bb      	strb	r3, [r7, #10]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 800c27a:	f107 0314 	add.w	r3, r7, #20
 800c27e:	3301      	adds	r3, #1
 800c280:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 800c282:	7afb      	ldrb	r3, [r7, #11]
 800c284:	011b      	lsls	r3, r3, #4
 800c286:	b25a      	sxtb	r2, r3
 800c288:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800c28c:	4313      	orrs	r3, r2
 800c28e:	b25b      	sxtb	r3, r3
 800c290:	b2db      	uxtb	r3, r3
 800c292:	753b      	strb	r3, [r7, #20]
  do {
    *vlen = len % 0x80;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	b2db      	uxtb	r3, r3
 800c298:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c29c:	b2da      	uxtb	r2, r3
 800c29e:	69fb      	ldr	r3, [r7, #28]
 800c2a0:	701a      	strb	r2, [r3, #0]
    len /= 0x80;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	09db      	lsrs	r3, r3, #7
 800c2a6:	607b      	str	r3, [r7, #4]
    if (len > 0) *vlen |= 0x80;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d006      	beq.n	800c2bc <mg_mqtt_send_header+0x54>
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c2b6:	b2da      	uxtb	r2, r3
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	701a      	strb	r2, [r3, #0]
    vlen++;
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	3301      	adds	r3, #1
 800c2c0:	61fb      	str	r3, [r7, #28]
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d005      	beq.n	800c2d4 <mg_mqtt_send_header+0x6c>
 800c2c8:	f107 0314 	add.w	r3, r7, #20
 800c2cc:	3305      	adds	r3, #5
 800c2ce:	69fa      	ldr	r2, [r7, #28]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d3df      	bcc.n	800c294 <mg_mqtt_send_header+0x2c>
  mg_send(c, buf, (size_t) (vlen - buf));
 800c2d4:	f107 0314 	add.w	r3, r7, #20
 800c2d8:	69fa      	ldr	r2, [r7, #28]
 800c2da:	1ad3      	subs	r3, r2, r3
 800c2dc:	461a      	mov	r2, r3
 800c2de:	f107 0314 	add.w	r3, r7, #20
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	68f8      	ldr	r0, [r7, #12]
 800c2e6:	f004 fdb9 	bl	8010e5c <mg_send>
}
 800c2ea:	bf00      	nop
 800c2ec:	3720      	adds	r7, #32
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <mg_send_u16>:

static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b082      	sub	sp, #8
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	807b      	strh	r3, [r7, #2]
  mg_send(c, &value, sizeof(value));
 800c2fe:	1cbb      	adds	r3, r7, #2
 800c300:	2202      	movs	r2, #2
 800c302:	4619      	mov	r1, r3
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f004 fda9 	bl	8010e5c <mg_send>
}
 800c30a:	bf00      	nop
 800c30c:	3708      	adds	r7, #8
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <mg_send_u32>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 800c312:	b580      	push	{r7, lr}
 800c314:	b082      	sub	sp, #8
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
 800c31a:	6039      	str	r1, [r7, #0]
  mg_send(c, &value, sizeof(value));
 800c31c:	463b      	mov	r3, r7
 800c31e:	2204      	movs	r2, #4
 800c320:	4619      	mov	r1, r3
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f004 fd9a 	bl	8010e5c <mg_send>
}
 800c328:	bf00      	nop
 800c32a:	3708      	adds	r7, #8
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <varint_size>:

static uint8_t varint_size(size_t length) {
 800c330:	b480      	push	{r7}
 800c332:	b085      	sub	sp, #20
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  uint8_t bytes_needed = 0;
 800c338:	2300      	movs	r3, #0
 800c33a:	73fb      	strb	r3, [r7, #15]
  do {
    bytes_needed++;
 800c33c:	7bfb      	ldrb	r3, [r7, #15]
 800c33e:	3301      	adds	r3, #1
 800c340:	73fb      	strb	r3, [r7, #15]
    length /= 0x80;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	09db      	lsrs	r3, r3, #7
 800c346:	607b      	str	r3, [r7, #4]
  } while (length > 0);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1f6      	bne.n	800c33c <varint_size+0xc>
  return bytes_needed;
 800c34e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c350:	4618      	mov	r0, r3
 800c352:	3714      	adds	r7, #20
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 800c35c:	b480      	push	{r7}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 800c366:	2300      	movs	r3, #0
 800c368:	60fb      	str	r3, [r7, #12]

  do {
    uint8_t byte = (uint8_t) (value % 128);
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c372:	72fb      	strb	r3, [r7, #11]
    value /= 128;
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	09db      	lsrs	r3, r3, #7
 800c378:	603b      	str	r3, [r7, #0]
    if (value > 0) byte |= 0x80;
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d003      	beq.n	800c388 <encode_varint+0x2c>
 800c380:	7afb      	ldrb	r3, [r7, #11]
 800c382:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c386:	72fb      	strb	r3, [r7, #11]
    buf[len++] = byte;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	1c5a      	adds	r2, r3, #1
 800c38c:	60fa      	str	r2, [r7, #12]
 800c38e:	687a      	ldr	r2, [r7, #4]
 800c390:	4413      	add	r3, r2
 800c392:	7afa      	ldrb	r2, [r7, #11]
 800c394:	701a      	strb	r2, [r3, #0]
  } while (value > 0);
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d1e6      	bne.n	800c36a <encode_varint+0xe>

  return len;
 800c39c:	68fb      	ldr	r3, [r7, #12]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3714      	adds	r7, #20
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr

0800c3aa <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 800c3aa:	b480      	push	{r7}
 800c3ac:	b089      	sub	sp, #36	@ 0x24
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	60f8      	str	r0, [r7, #12]
 800c3b2:	60b9      	str	r1, [r7, #8]
 800c3b4:	607a      	str	r2, [r7, #4]
  size_t multiplier = 1, offset;
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	61fb      	str	r3, [r7, #28]
  *value = 0;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	601a      	str	r2, [r3, #0]

  for (offset = 0; offset < 4 && offset < len; offset++) {
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	61bb      	str	r3, [r7, #24]
 800c3c4:	e01c      	b.n	800c400 <decode_varint+0x56>
    uint8_t encoded_byte = buf[offset];
 800c3c6:	68fa      	ldr	r2, [r7, #12]
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	4413      	add	r3, r2
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	75fb      	strb	r3, [r7, #23]
    *value += (encoded_byte & 0x7f) * multiplier;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681a      	ldr	r2, [r3, #0]
 800c3d4:	7dfb      	ldrb	r3, [r7, #23]
 800c3d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3da:	69f9      	ldr	r1, [r7, #28]
 800c3dc:	fb01 f303 	mul.w	r3, r1, r3
 800c3e0:	441a      	add	r2, r3
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	601a      	str	r2, [r3, #0]
    multiplier *= 128;
 800c3e6:	69fb      	ldr	r3, [r7, #28]
 800c3e8:	01db      	lsls	r3, r3, #7
 800c3ea:	61fb      	str	r3, [r7, #28]

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 800c3ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	db02      	blt.n	800c3fa <decode_varint+0x50>
 800c3f4:	69bb      	ldr	r3, [r7, #24]
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	e00a      	b.n	800c410 <decode_varint+0x66>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 800c3fa:	69bb      	ldr	r3, [r7, #24]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	61bb      	str	r3, [r7, #24]
 800c400:	69bb      	ldr	r3, [r7, #24]
 800c402:	2b03      	cmp	r3, #3
 800c404:	d803      	bhi.n	800c40e <decode_varint+0x64>
 800c406:	69ba      	ldr	r2, [r7, #24]
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d3db      	bcc.n	800c3c6 <decode_varint+0x1c>
  }

  return 0;
 800c40e:	2300      	movs	r3, #0
}
 800c410:	4618      	mov	r0, r3
 800c412:	3724      	adds	r7, #36	@ 0x24
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
 800c41c:	b480      	push	{r7}
 800c41e:	b085      	sub	sp, #20
 800c420:	af00      	add	r7, sp, #0
 800c422:	4603      	mov	r3, r0
 800c424:	71fb      	strb	r3, [r7, #7]
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
 800c426:	231b      	movs	r3, #27
 800c428:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < num_properties; ++i) {
 800c42a:	2300      	movs	r3, #0
 800c42c:	60fb      	str	r3, [r7, #12]
 800c42e:	e00f      	b.n	800c450 <mqtt_prop_type_by_id+0x34>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 800c430:	4a0d      	ldr	r2, [pc, #52]	@ (800c468 <mqtt_prop_type_by_id+0x4c>)
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c438:	79fa      	ldrb	r2, [r7, #7]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d105      	bne.n	800c44a <mqtt_prop_type_by_id+0x2e>
 800c43e:	4a0a      	ldr	r2, [pc, #40]	@ (800c468 <mqtt_prop_type_by_id+0x4c>)
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	005b      	lsls	r3, r3, #1
 800c444:	4413      	add	r3, r2
 800c446:	785b      	ldrb	r3, [r3, #1]
 800c448:	e008      	b.n	800c45c <mqtt_prop_type_by_id+0x40>
  for (i = 0; i < num_properties; ++i) {
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	3301      	adds	r3, #1
 800c44e:	60fb      	str	r3, [r7, #12]
 800c450:	68fa      	ldr	r2, [r7, #12]
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	429a      	cmp	r2, r3
 800c456:	d3eb      	bcc.n	800c430 <mqtt_prop_type_by_id+0x14>
  }
  return -1;  // Property ID not found
 800c458:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3714      	adds	r7, #20
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr
 800c468:	0803260c 	.word	0x0803260c

0800c46c <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]
  size_t i, size = 0;
 800c476:	2300      	movs	r3, #0
 800c478:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < count; i++) {
 800c47a:	2300      	movs	r3, #0
 800c47c:	60fb      	str	r3, [r7, #12]
 800c47e:	e07a      	b.n	800c576 <get_properties_length+0x10a>
    size++;  // identifier
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	3301      	adds	r3, #1
 800c484:	60bb      	str	r3, [r7, #8]
    switch (mqtt_prop_type_by_id(props[i].id)) {
 800c486:	68fa      	ldr	r2, [r7, #12]
 800c488:	4613      	mov	r3, r2
 800c48a:	005b      	lsls	r3, r3, #1
 800c48c:	4413      	add	r3, r2
 800c48e:	00db      	lsls	r3, r3, #3
 800c490:	461a      	mov	r2, r3
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4413      	add	r3, r2
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	4618      	mov	r0, r3
 800c49a:	f7ff ffbf 	bl	800c41c <mqtt_prop_type_by_id>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b06      	cmp	r3, #6
 800c4a2:	d863      	bhi.n	800c56c <get_properties_length+0x100>
 800c4a4:	a201      	add	r2, pc, #4	@ (adr r2, 800c4ac <get_properties_length+0x40>)
 800c4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4aa:	bf00      	nop
 800c4ac:	0800c565 	.word	0x0800c565
 800c4b0:	0800c4f9 	.word	0x0800c4f9
 800c4b4:	0800c4c9 	.word	0x0800c4c9
 800c4b8:	0800c515 	.word	0x0800c515
 800c4bc:	0800c531 	.word	0x0800c531
 800c4c0:	0800c555 	.word	0x0800c555
 800c4c4:	0800c55d 	.word	0x0800c55d
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 800c4c8:	68fa      	ldr	r2, [r7, #12]
 800c4ca:	4613      	mov	r3, r2
 800c4cc:	005b      	lsls	r3, r3, #1
 800c4ce:	4413      	add	r3, r2
 800c4d0:	00db      	lsls	r3, r3, #3
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	6959      	ldr	r1, [r3, #20]
 800c4da:	68fa      	ldr	r2, [r7, #12]
 800c4dc:	4613      	mov	r3, r2
 800c4de:	005b      	lsls	r3, r3, #1
 800c4e0:	4413      	add	r3, r2
 800c4e2:	00db      	lsls	r3, r3, #3
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	68db      	ldr	r3, [r3, #12]
 800c4ec:	18ca      	adds	r2, r1, r3
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	3304      	adds	r3, #4
 800c4f4:	60bb      	str	r3, [r7, #8]
                            2 * sizeof(uint16_t));
        break;
 800c4f6:	e03b      	b.n	800c570 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 800c4f8:	68fa      	ldr	r2, [r7, #12]
 800c4fa:	4613      	mov	r3, r2
 800c4fc:	005b      	lsls	r3, r3, #1
 800c4fe:	4413      	add	r3, r2
 800c500:	00db      	lsls	r3, r3, #3
 800c502:	461a      	mov	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	4413      	add	r3, r2
 800c508:	695a      	ldr	r2, [r3, #20]
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	4413      	add	r3, r2
 800c50e:	3302      	adds	r3, #2
 800c510:	60bb      	str	r3, [r7, #8]
        break;
 800c512:	e02d      	b.n	800c570 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	4613      	mov	r3, r2
 800c518:	005b      	lsls	r3, r3, #1
 800c51a:	4413      	add	r3, r2
 800c51c:	00db      	lsls	r3, r3, #3
 800c51e:	461a      	mov	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	4413      	add	r3, r2
 800c524:	695a      	ldr	r2, [r3, #20]
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	4413      	add	r3, r2
 800c52a:	3302      	adds	r3, #2
 800c52c:	60bb      	str	r3, [r7, #8]
        break;
 800c52e:	e01f      	b.n	800c570 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 800c530:	68fa      	ldr	r2, [r7, #12]
 800c532:	4613      	mov	r3, r2
 800c534:	005b      	lsls	r3, r3, #1
 800c536:	4413      	add	r3, r2
 800c538:	00db      	lsls	r3, r3, #3
 800c53a:	461a      	mov	r2, r3
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	4413      	add	r3, r2
 800c540:	685b      	ldr	r3, [r3, #4]
 800c542:	4618      	mov	r0, r3
 800c544:	f7ff fef4 	bl	800c330 <varint_size>
 800c548:	4603      	mov	r3, r0
 800c54a:	461a      	mov	r2, r3
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	4413      	add	r3, r2
 800c550:	60bb      	str	r3, [r7, #8]
        break;
 800c552:	e00d      	b.n	800c570 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	3304      	adds	r3, #4
 800c558:	60bb      	str	r3, [r7, #8]
        break;
 800c55a:	e009      	b.n	800c570 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	3302      	adds	r3, #2
 800c560:	60bb      	str	r3, [r7, #8]
        break;
 800c562:	e005      	b.n	800c570 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	3301      	adds	r3, #1
 800c568:	60bb      	str	r3, [r7, #8]
        break;
 800c56a:	e001      	b.n	800c570 <get_properties_length+0x104>
      default:
        return size;  // cannot parse further down
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	e007      	b.n	800c580 <get_properties_length+0x114>
  for (i = 0; i < count; i++) {
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	3301      	adds	r3, #1
 800c574:	60fb      	str	r3, [r7, #12]
 800c576:	68fa      	ldr	r2, [r7, #12]
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d380      	bcc.n	800c480 <get_properties_length+0x14>
    }
  }

  return size;
 800c57e:	68bb      	ldr	r3, [r7, #8]
}
 800c580:	4618      	mov	r0, r3
 800c582:	3710      	adds	r7, #16
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
  size_t size = get_properties_length(props, count);
 800c592:	6839      	ldr	r1, [r7, #0]
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f7ff ff69 	bl	800c46c <get_properties_length>
 800c59a:	60f8      	str	r0, [r7, #12]
  size += varint_size(size);
 800c59c:	68f8      	ldr	r0, [r7, #12]
 800c59e:	f7ff fec7 	bl	800c330 <varint_size>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	4413      	add	r3, r2
 800c5aa:	60fb      	str	r3, [r7, #12]
  return size;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3710      	adds	r7, #16
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
	...

0800c5b8 <mg_send_mqtt_properties>:

static void mg_send_mqtt_properties(struct mg_connection *c,
                                    struct mg_mqtt_prop *props, size_t nprops) {
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b08a      	sub	sp, #40	@ 0x28
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	60f8      	str	r0, [r7, #12]
 800c5c0:	60b9      	str	r1, [r7, #8]
 800c5c2:	607a      	str	r2, [r7, #4]
  size_t total_size = get_properties_length(props, nprops);
 800c5c4:	6879      	ldr	r1, [r7, #4]
 800c5c6:	68b8      	ldr	r0, [r7, #8]
 800c5c8:	f7ff ff50 	bl	800c46c <get_properties_length>
 800c5cc:	6238      	str	r0, [r7, #32]
  uint8_t buf_v[4] = {0, 0, 0, 0};
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	61bb      	str	r3, [r7, #24]
  uint8_t buf[4] = {0, 0, 0, 0};
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	617b      	str	r3, [r7, #20]
  size_t i, len = encode_varint(buf, total_size);
 800c5d6:	f107 0314 	add.w	r3, r7, #20
 800c5da:	6a39      	ldr	r1, [r7, #32]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7ff febd 	bl	800c35c <encode_varint>
 800c5e2:	61f8      	str	r0, [r7, #28]

  mg_send(c, buf, (size_t) len);
 800c5e4:	f107 0314 	add.w	r3, r7, #20
 800c5e8:	69fa      	ldr	r2, [r7, #28]
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	68f8      	ldr	r0, [r7, #12]
 800c5ee:	f004 fc35 	bl	8010e5c <mg_send>
  for (i = 0; i < nprops; i++) {
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5f6:	e11f      	b.n	800c838 <mg_send_mqtt_properties+0x280>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 800c5f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5fa:	4613      	mov	r3, r2
 800c5fc:	005b      	lsls	r3, r3, #1
 800c5fe:	4413      	add	r3, r2
 800c600:	00db      	lsls	r3, r3, #3
 800c602:	461a      	mov	r2, r3
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	4413      	add	r3, r2
 800c608:	2201      	movs	r2, #1
 800c60a:	4619      	mov	r1, r3
 800c60c:	68f8      	ldr	r0, [r7, #12]
 800c60e:	f004 fc25 	bl	8010e5c <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 800c612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c614:	4613      	mov	r3, r2
 800c616:	005b      	lsls	r3, r3, #1
 800c618:	4413      	add	r3, r2
 800c61a:	00db      	lsls	r3, r3, #3
 800c61c:	461a      	mov	r2, r3
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	4413      	add	r3, r2
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	4618      	mov	r0, r3
 800c626:	f7ff fef9 	bl	800c41c <mqtt_prop_type_by_id>
 800c62a:	4603      	mov	r3, r0
 800c62c:	2b06      	cmp	r3, #6
 800c62e:	f200 8100 	bhi.w	800c832 <mg_send_mqtt_properties+0x27a>
 800c632:	a201      	add	r2, pc, #4	@ (adr r2, 800c638 <mg_send_mqtt_properties+0x80>)
 800c634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c638:	0800c6f7 	.word	0x0800c6f7
 800c63c:	0800c75f 	.word	0x0800c75f
 800c640:	0800c655 	.word	0x0800c655
 800c644:	0800c7b1 	.word	0x0800c7b1
 800c648:	0800c803 	.word	0x0800c803
 800c64c:	0800c73b 	.word	0x0800c73b
 800c650:	0800c715 	.word	0x0800c715
      case MQTT_PROP_TYPE_STRING_PAIR:
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 800c654:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c656:	4613      	mov	r3, r2
 800c658:	005b      	lsls	r3, r3, #1
 800c65a:	4413      	add	r3, r2
 800c65c:	00db      	lsls	r3, r3, #3
 800c65e:	461a      	mov	r2, r3
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	4413      	add	r3, r2
 800c664:	68db      	ldr	r3, [r3, #12]
 800c666:	b29b      	uxth	r3, r3
 800c668:	4618      	mov	r0, r3
 800c66a:	f006 f9d5 	bl	8012a18 <mg_ntohs>
 800c66e:	4603      	mov	r3, r0
 800c670:	4619      	mov	r1, r3
 800c672:	68f8      	ldr	r0, [r7, #12]
 800c674:	f7ff fe3d 	bl	800c2f2 <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 800c678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c67a:	4613      	mov	r3, r2
 800c67c:	005b      	lsls	r3, r3, #1
 800c67e:	4413      	add	r3, r2
 800c680:	00db      	lsls	r3, r3, #3
 800c682:	461a      	mov	r2, r3
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	4413      	add	r3, r2
 800c688:	6899      	ldr	r1, [r3, #8]
 800c68a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c68c:	4613      	mov	r3, r2
 800c68e:	005b      	lsls	r3, r3, #1
 800c690:	4413      	add	r3, r2
 800c692:	00db      	lsls	r3, r3, #3
 800c694:	461a      	mov	r2, r3
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	4413      	add	r3, r2
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	461a      	mov	r2, r3
 800c69e:	68f8      	ldr	r0, [r7, #12]
 800c6a0:	f004 fbdc 	bl	8010e5c <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 800c6a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	005b      	lsls	r3, r3, #1
 800c6aa:	4413      	add	r3, r2
 800c6ac:	00db      	lsls	r3, r3, #3
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	695b      	ldr	r3, [r3, #20]
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f006 f9ad 	bl	8012a18 <mg_ntohs>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	68f8      	ldr	r0, [r7, #12]
 800c6c4:	f7ff fe15 	bl	800c2f2 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 800c6c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6ca:	4613      	mov	r3, r2
 800c6cc:	005b      	lsls	r3, r3, #1
 800c6ce:	4413      	add	r3, r2
 800c6d0:	00db      	lsls	r3, r3, #3
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	6919      	ldr	r1, [r3, #16]
 800c6da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6dc:	4613      	mov	r3, r2
 800c6de:	005b      	lsls	r3, r3, #1
 800c6e0:	4413      	add	r3, r2
 800c6e2:	00db      	lsls	r3, r3, #3
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	695b      	ldr	r3, [r3, #20]
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	68f8      	ldr	r0, [r7, #12]
 800c6f0:	f004 fbb4 	bl	8010e5c <mg_send>
        break;
 800c6f4:	e09d      	b.n	800c832 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BYTE:
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 800c6f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6f8:	4613      	mov	r3, r2
 800c6fa:	005b      	lsls	r3, r3, #1
 800c6fc:	4413      	add	r3, r2
 800c6fe:	00db      	lsls	r3, r3, #3
 800c700:	461a      	mov	r2, r3
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	4413      	add	r3, r2
 800c706:	3304      	adds	r3, #4
 800c708:	2201      	movs	r2, #1
 800c70a:	4619      	mov	r1, r3
 800c70c:	68f8      	ldr	r0, [r7, #12]
 800c70e:	f004 fba5 	bl	8010e5c <mg_send>
        break;
 800c712:	e08e      	b.n	800c832 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_SHORT:
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 800c714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c716:	4613      	mov	r3, r2
 800c718:	005b      	lsls	r3, r3, #1
 800c71a:	4413      	add	r3, r2
 800c71c:	00db      	lsls	r3, r3, #3
 800c71e:	461a      	mov	r2, r3
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	4413      	add	r3, r2
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	b29b      	uxth	r3, r3
 800c728:	4618      	mov	r0, r3
 800c72a:	f006 f975 	bl	8012a18 <mg_ntohs>
 800c72e:	4603      	mov	r3, r0
 800c730:	4619      	mov	r1, r3
 800c732:	68f8      	ldr	r0, [r7, #12]
 800c734:	f7ff fddd 	bl	800c2f2 <mg_send_u16>
        break;
 800c738:	e07b      	b.n	800c832 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_INT:
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 800c73a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c73c:	4613      	mov	r3, r2
 800c73e:	005b      	lsls	r3, r3, #1
 800c740:	4413      	add	r3, r2
 800c742:	00db      	lsls	r3, r3, #3
 800c744:	461a      	mov	r2, r3
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	4413      	add	r3, r2
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	4618      	mov	r0, r3
 800c74e:	f006 f94a 	bl	80129e6 <mg_ntohl>
 800c752:	4603      	mov	r3, r0
 800c754:	4619      	mov	r1, r3
 800c756:	68f8      	ldr	r0, [r7, #12]
 800c758:	f7ff fddb 	bl	800c312 <mg_send_u32>
        break;
 800c75c:	e069      	b.n	800c832 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_STRING:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 800c75e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c760:	4613      	mov	r3, r2
 800c762:	005b      	lsls	r3, r3, #1
 800c764:	4413      	add	r3, r2
 800c766:	00db      	lsls	r3, r3, #3
 800c768:	461a      	mov	r2, r3
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	4413      	add	r3, r2
 800c76e:	695b      	ldr	r3, [r3, #20]
 800c770:	b29b      	uxth	r3, r3
 800c772:	4618      	mov	r0, r3
 800c774:	f006 f950 	bl	8012a18 <mg_ntohs>
 800c778:	4603      	mov	r3, r0
 800c77a:	4619      	mov	r1, r3
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f7ff fdb8 	bl	800c2f2 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 800c782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c784:	4613      	mov	r3, r2
 800c786:	005b      	lsls	r3, r3, #1
 800c788:	4413      	add	r3, r2
 800c78a:	00db      	lsls	r3, r3, #3
 800c78c:	461a      	mov	r2, r3
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	4413      	add	r3, r2
 800c792:	6919      	ldr	r1, [r3, #16]
 800c794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c796:	4613      	mov	r3, r2
 800c798:	005b      	lsls	r3, r3, #1
 800c79a:	4413      	add	r3, r2
 800c79c:	00db      	lsls	r3, r3, #3
 800c79e:	461a      	mov	r2, r3
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	4413      	add	r3, r2
 800c7a4:	695b      	ldr	r3, [r3, #20]
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	68f8      	ldr	r0, [r7, #12]
 800c7aa:	f004 fb57 	bl	8010e5c <mg_send>
        break;
 800c7ae:	e040      	b.n	800c832 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BINARY_DATA:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 800c7b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7b2:	4613      	mov	r3, r2
 800c7b4:	005b      	lsls	r3, r3, #1
 800c7b6:	4413      	add	r3, r2
 800c7b8:	00db      	lsls	r3, r3, #3
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	4413      	add	r3, r2
 800c7c0:	695b      	ldr	r3, [r3, #20]
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f006 f927 	bl	8012a18 <mg_ntohs>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	68f8      	ldr	r0, [r7, #12]
 800c7d0:	f7ff fd8f 	bl	800c2f2 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 800c7d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	005b      	lsls	r3, r3, #1
 800c7da:	4413      	add	r3, r2
 800c7dc:	00db      	lsls	r3, r3, #3
 800c7de:	461a      	mov	r2, r3
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	4413      	add	r3, r2
 800c7e4:	6919      	ldr	r1, [r3, #16]
 800c7e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7e8:	4613      	mov	r3, r2
 800c7ea:	005b      	lsls	r3, r3, #1
 800c7ec:	4413      	add	r3, r2
 800c7ee:	00db      	lsls	r3, r3, #3
 800c7f0:	461a      	mov	r2, r3
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	695b      	ldr	r3, [r3, #20]
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	f004 fb2e 	bl	8010e5c <mg_send>
        break;
 800c800:	e017      	b.n	800c832 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        len = encode_varint(buf_v, props[i].iv);
 800c802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c804:	4613      	mov	r3, r2
 800c806:	005b      	lsls	r3, r3, #1
 800c808:	4413      	add	r3, r2
 800c80a:	00db      	lsls	r3, r3, #3
 800c80c:	461a      	mov	r2, r3
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	4413      	add	r3, r2
 800c812:	685a      	ldr	r2, [r3, #4]
 800c814:	f107 0318 	add.w	r3, r7, #24
 800c818:	4611      	mov	r1, r2
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7ff fd9e 	bl	800c35c <encode_varint>
 800c820:	61f8      	str	r0, [r7, #28]
        mg_send(c, buf_v, (size_t) len);
 800c822:	f107 0318 	add.w	r3, r7, #24
 800c826:	69fa      	ldr	r2, [r7, #28]
 800c828:	4619      	mov	r1, r3
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f004 fb16 	bl	8010e5c <mg_send>
        break;
 800c830:	bf00      	nop
  for (i = 0; i < nprops; i++) {
 800c832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c834:	3301      	adds	r3, #1
 800c836:	627b      	str	r3, [r7, #36]	@ 0x24
 800c838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	f4ff aedb 	bcc.w	800c5f8 <mg_send_mqtt_properties+0x40>
    }
  }
}
 800c842:	bf00      	nop
 800c844:	bf00      	nop
 800c846:	3728      	adds	r7, #40	@ 0x28
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <mg_mqtt_login>:
  }

  return new_pos;
}

void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b090      	sub	sp, #64	@ 0x40
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
  char rnd[10], client_id[21];
  struct mg_str cid = opts->client_id;
 800c856:	683a      	ldr	r2, [r7, #0]
 800c858:	f107 0310 	add.w	r3, r7, #16
 800c85c:	3210      	adds	r2, #16
 800c85e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c862:	e883 0003 	stmia.w	r3, {r0, r1}
  size_t total_len = 7 + 1 + 2 + 2;
 800c866:	230c      	movs	r3, #12
 800c868:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 800c86a:	2300      	movs	r3, #0
 800c86c:	723b      	strb	r3, [r7, #8]
 800c86e:	2304      	movs	r3, #4
 800c870:	727b      	strb	r3, [r7, #9]
 800c872:	234d      	movs	r3, #77	@ 0x4d
 800c874:	72bb      	strb	r3, [r7, #10]
 800c876:	2351      	movs	r3, #81	@ 0x51
 800c878:	72fb      	strb	r3, [r7, #11]
 800c87a:	2354      	movs	r3, #84	@ 0x54
 800c87c:	733b      	strb	r3, [r7, #12]
 800c87e:	2354      	movs	r3, #84	@ 0x54
 800c880:	737b      	strb	r3, [r7, #13]
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800c888:	73bb      	strb	r3, [r7, #14]
 800c88a:	2300      	movs	r3, #0
 800c88c:	73fb      	strb	r3, [r7, #15]

  if (cid.len == 0) {
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d118      	bne.n	800c8c6 <mg_mqtt_login+0x7a>
    mg_random(rnd, sizeof(rnd));
 800c894:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c898:	210a      	movs	r1, #10
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7f6 ff6e 	bl	800377c <mg_random>
    mg_hex(rnd, sizeof(rnd), client_id);
 800c8a0:	f107 0218 	add.w	r2, r7, #24
 800c8a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c8a8:	210a      	movs	r1, #10
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f005 fce2 	bl	8012274 <mg_hex>
    client_id[sizeof(client_id) - 1] = '\0';
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    cid = mg_str(client_id);
 800c8b6:	f107 0310 	add.w	r3, r7, #16
 800c8ba:	f107 0218 	add.w	r2, r7, #24
 800c8be:	4611      	mov	r1, r2
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f005 f9fd 	bl	8011cc0 <mg_str_s>
  }

  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 800c8c6:	7bbb      	ldrb	r3, [r7, #14]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d101      	bne.n	800c8d0 <mg_mqtt_login+0x84>
 800c8cc:	2304      	movs	r3, #4
 800c8ce:	73bb      	strb	r3, [r7, #14]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 800c8d0:	7bbb      	ldrb	r3, [r7, #14]
 800c8d2:	2b05      	cmp	r3, #5
 800c8d4:	bf0c      	ite	eq
 800c8d6:	2301      	moveq	r3, #1
 800c8d8:	2300      	movne	r3, #0
 800c8da:	b2d9      	uxtb	r1, r3
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800c8e2:	f361 0382 	bfi	r3, r1, #2, #1
 800c8e6:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c8f0:	00db      	lsls	r3, r3, #3
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	f003 0318 	and.w	r3, r3, #24
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	73fb      	strb	r3, [r7, #15]
  if (opts->user.len > 0) {
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d00a      	beq.n	800c91a <mg_mqtt_login+0xce>
    total_len += 2 + (uint32_t) opts->user.len;
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	685a      	ldr	r2, [r3, #4]
 800c908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c90a:	4413      	add	r3, r2
 800c90c:	3302      	adds	r3, #2
 800c90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    hdr[7] |= MQTT_HAS_USER_NAME;
 800c910:	7bfb      	ldrb	r3, [r7, #15]
 800c912:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c916:	b2db      	uxtb	r3, r3
 800c918:	73fb      	strb	r3, [r7, #15]
  }
  if (opts->pass.len > 0) {
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d00a      	beq.n	800c938 <mg_mqtt_login+0xec>
    total_len += 2 + (uint32_t) opts->pass.len;
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	68da      	ldr	r2, [r3, #12]
 800c926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c928:	4413      	add	r3, r2
 800c92a:	3302      	adds	r3, #2
 800c92c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    hdr[7] |= MQTT_HAS_PASSWORD;
 800c92e:	7bfb      	ldrb	r3, [r7, #15]
 800c930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c934:	b2db      	uxtb	r3, r3
 800c936:	73fb      	strb	r3, [r7, #15]
  }
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	69db      	ldr	r3, [r3, #28]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d00d      	beq.n	800c95c <mg_mqtt_login+0x110>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	69da      	ldr	r2, [r3, #28]
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c948:	441a      	add	r2, r3
 800c94a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c94c:	4413      	add	r3, r2
 800c94e:	3304      	adds	r3, #4
 800c950:	63fb      	str	r3, [r7, #60]	@ 0x3c
    hdr[7] |= MQTT_HAS_WILL;
 800c952:	7bfb      	ldrb	r3, [r7, #15]
 800c954:	f043 0304 	orr.w	r3, r3, #4
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	73fb      	strb	r3, [r7, #15]
  }
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c962:	2b00      	cmp	r3, #0
 800c964:	d102      	bne.n	800c96c <mg_mqtt_login+0x120>
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d104      	bne.n	800c976 <mg_mqtt_login+0x12a>
 800c96c:	7bfb      	ldrb	r3, [r7, #15]
 800c96e:	f043 0302 	orr.w	r3, r3, #2
 800c972:	b2db      	uxtb	r3, r3
 800c974:	73fb      	strb	r3, [r7, #15]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d004      	beq.n	800c98a <mg_mqtt_login+0x13e>
 800c980:	7bfb      	ldrb	r3, [r7, #15]
 800c982:	f043 0320 	orr.w	r3, r3, #32
 800c986:	b2db      	uxtb	r3, r3
 800c988:	73fb      	strb	r3, [r7, #15]
  total_len += (uint32_t) cid.len;
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c98e:	4413      	add	r3, r2
 800c990:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (c->is_mqtt5) {
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800c998:	f003 0304 	and.w	r3, r3, #4
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d01c      	beq.n	800c9dc <mg_mqtt_login+0x190>
    total_len += get_props_size(opts->props, opts->num_props);
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	4610      	mov	r0, r2
 800c9ae:	f7ff fdeb 	bl	800c588 <get_props_size>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9b6:	4413      	add	r3, r2
 800c9b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (hdr[7] & MQTT_HAS_WILL)
 800c9ba:	7bfb      	ldrb	r3, [r7, #15]
 800c9bc:	f003 0304 	and.w	r3, r3, #4
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00b      	beq.n	800c9dc <mg_mqtt_login+0x190>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	4610      	mov	r0, r2
 800c9d0:	f7ff fdda 	bl	800c588 <get_props_size>
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9d8:	4413      	add	r3, r2
 800c9da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 800c9dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9de:	2200      	movs	r2, #0
 800c9e0:	2101      	movs	r1, #1
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f7ff fc40 	bl	800c268 <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 800c9e8:	f107 0308 	add.w	r3, r7, #8
 800c9ec:	2208      	movs	r2, #8
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f004 fa33 	bl	8010e5c <mg_send>
  // keepalive == 0 means "do not disconnect us!"
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f006 f80c 	bl	8012a18 <mg_ntohs>
 800ca00:	4603      	mov	r3, r0
 800ca02:	4619      	mov	r1, r3
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f7ff fc74 	bl	800c2f2 <mg_send_u16>

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800ca10:	f003 0304 	and.w	r3, r3, #4
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d007      	beq.n	800ca2a <mg_mqtt_login+0x1de>
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca22:	461a      	mov	r2, r3
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f7ff fdc7 	bl	800c5b8 <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	b29b      	uxth	r3, r3
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f005 fff2 	bl	8012a18 <mg_ntohs>
 800ca34:	4603      	mov	r3, r0
 800ca36:	4619      	mov	r1, r3
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f7ff fc5a 	bl	800c2f2 <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	697a      	ldr	r2, [r7, #20]
 800ca42:	4619      	mov	r1, r3
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f004 fa09 	bl	8010e5c <mg_send>

  if (hdr[7] & MQTT_HAS_WILL) {
 800ca4a:	7bfb      	ldrb	r3, [r7, #15]
 800ca4c:	f003 0304 	and.w	r3, r3, #4
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d035      	beq.n	800cac0 <mg_mqtt_login+0x274>
    if (c->is_mqtt5)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800ca5a:	f003 0304 	and.w	r3, r3, #4
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d007      	beq.n	800ca74 <mg_mqtt_login+0x228>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7ff fda2 	bl	800c5b8 <mg_send_mqtt_properties>

    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	69db      	ldr	r3, [r3, #28]
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f005 ffcc 	bl	8012a18 <mg_ntohs>
 800ca80:	4603      	mov	r3, r0
 800ca82:	4619      	mov	r1, r3
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f7ff fc34 	bl	800c2f2 <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	6999      	ldr	r1, [r3, #24]
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	69db      	ldr	r3, [r3, #28]
 800ca92:	461a      	mov	r2, r3
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f004 f9e1 	bl	8010e5c <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	4618      	mov	r0, r3
 800caa2:	f005 ffb9 	bl	8012a18 <mg_ntohs>
 800caa6:	4603      	mov	r3, r0
 800caa8:	4619      	mov	r1, r3
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f7ff fc21 	bl	800c2f2 <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	6a19      	ldr	r1, [r3, #32]
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cab8:	461a      	mov	r2, r3
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f004 f9ce 	bl	8010e5c <mg_send>
  }
  if (opts->user.len > 0) {
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d012      	beq.n	800caee <mg_mqtt_login+0x2a2>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	b29b      	uxth	r3, r3
 800cace:	4618      	mov	r0, r3
 800cad0:	f005 ffa2 	bl	8012a18 <mg_ntohs>
 800cad4:	4603      	mov	r3, r0
 800cad6:	4619      	mov	r1, r3
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f7ff fc0a 	bl	800c2f2 <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	6819      	ldr	r1, [r3, #0]
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	461a      	mov	r2, r3
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f004 f9b7 	bl	8010e5c <mg_send>
  }
  if (opts->pass.len > 0) {
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d012      	beq.n	800cb1c <mg_mqtt_login+0x2d0>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	68db      	ldr	r3, [r3, #12]
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	4618      	mov	r0, r3
 800cafe:	f005 ff8b 	bl	8012a18 <mg_ntohs>
 800cb02:	4603      	mov	r3, r0
 800cb04:	4619      	mov	r1, r3
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f7ff fbf3 	bl	800c2f2 <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	6899      	ldr	r1, [r3, #8]
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	68db      	ldr	r3, [r3, #12]
 800cb14:	461a      	mov	r2, r3
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f004 f9a0 	bl	8010e5c <mg_send>
  }
}
 800cb1c:	bf00      	nop
 800cb1e:	3740      	adds	r7, #64	@ 0x40
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <mg_mqtt_pub>:

uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 800cb24:	b590      	push	{r4, r7, lr}
 800cb26:	b087      	sub	sp, #28
 800cb28:	af02      	add	r7, sp, #8
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
  uint16_t id = opts->retransmit_id;
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cb32:	81fb      	strh	r3, [r7, #14]
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb3a:	005b      	lsls	r3, r3, #1
 800cb3c:	b25b      	sxtb	r3, r3
 800cb3e:	f003 0306 	and.w	r3, r3, #6
 800cb42:	b25b      	sxtb	r3, r3
 800cb44:	683a      	ldr	r2, [r7, #0]
 800cb46:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 800cb4a:	2a00      	cmp	r2, #0
 800cb4c:	d001      	beq.n	800cb52 <mg_mqtt_pub+0x2e>
 800cb4e:	2201      	movs	r2, #1
 800cb50:	e000      	b.n	800cb54 <mg_mqtt_pub+0x30>
 800cb52:	2200      	movs	r2, #0
 800cb54:	4313      	orrs	r3, r2
 800cb56:	b25b      	sxtb	r3, r3
 800cb58:	737b      	strb	r3, [r7, #13]
  size_t len = 2 + opts->topic.len + opts->message.len;
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	69da      	ldr	r2, [r3, #28]
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb62:	4413      	add	r3, r2
 800cb64:	3302      	adds	r3, #2
 800cb66:	60bb      	str	r3, [r7, #8]
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 800cb68:	4b51      	ldr	r3, [pc, #324]	@ (800ccb0 <mg_mqtt_pub+0x18c>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2b02      	cmp	r3, #2
 800cb6e:	dd19      	ble.n	800cba4 <mg_mqtt_pub+0x80>
 800cb70:	4b50      	ldr	r3, [pc, #320]	@ (800ccb4 <mg_mqtt_pub+0x190>)
 800cb72:	f241 121b 	movw	r2, #4379	@ 0x111b
 800cb76:	4950      	ldr	r1, [pc, #320]	@ (800ccb8 <mg_mqtt_pub+0x194>)
 800cb78:	2003      	movs	r0, #3
 800cb7a:	f7ff fa3b 	bl	800bff4 <mg_log_prefix>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	69db      	ldr	r3, [r3, #28]
 800cb86:	461c      	mov	r4, r3
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	699a      	ldr	r2, [r3, #24]
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb90:	4618      	mov	r0, r3
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	6a1b      	ldr	r3, [r3, #32]
 800cb96:	9301      	str	r3, [sp, #4]
 800cb98:	9000      	str	r0, [sp, #0]
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	4622      	mov	r2, r4
 800cb9e:	4847      	ldr	r0, [pc, #284]	@ (800ccbc <mg_mqtt_pub+0x198>)
 800cba0:	f7ff fa78 	bl	800c094 <mg_log>
            (char *) opts->topic.buf, (int) opts->message.len,
            (char *) opts->message.buf));
  if (opts->qos > 0) len += 2;
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d002      	beq.n	800cbb4 <mg_mqtt_pub+0x90>
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	3302      	adds	r3, #2
 800cbb2:	60bb      	str	r3, [r7, #8]
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800cbba:	f003 0304 	and.w	r3, r3, #4
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d00b      	beq.n	800cbdc <mg_mqtt_pub+0xb8>
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbcc:	4619      	mov	r1, r3
 800cbce:	4610      	mov	r0, r2
 800cbd0:	f7ff fcda 	bl	800c588 <get_props_size>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	4413      	add	r3, r2
 800cbda:	60bb      	str	r3, [r7, #8]

  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d006      	beq.n	800cbf4 <mg_mqtt_pub+0xd0>
 800cbe6:	89fb      	ldrh	r3, [r7, #14]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d003      	beq.n	800cbf4 <mg_mqtt_pub+0xd0>
 800cbec:	7b7b      	ldrb	r3, [r7, #13]
 800cbee:	f043 0308 	orr.w	r3, r3, #8
 800cbf2:	737b      	strb	r3, [r7, #13]
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 800cbf4:	7b7a      	ldrb	r2, [r7, #13]
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	2103      	movs	r1, #3
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f7ff fb34 	bl	800c268 <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	69db      	ldr	r3, [r3, #28]
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	4618      	mov	r0, r3
 800cc08:	f005 ff06 	bl	8012a18 <mg_ntohs>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	4619      	mov	r1, r3
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f7ff fb6e 	bl	800c2f2 <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	6999      	ldr	r1, [r3, #24]
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	69db      	ldr	r3, [r3, #28]
 800cc1e:	461a      	mov	r2, r3
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f004 f91b 	bl	8010e5c <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d01e      	beq.n	800cc6e <mg_mqtt_pub+0x14a>
    if (id == 0) {  // generate new one if not resending
 800cc30:	89fb      	ldrh	r3, [r7, #14]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d112      	bne.n	800cc5c <mg_mqtt_pub+0x138>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cc3c:	3201      	adds	r2, #1
 800cc3e:	b292      	uxth	r2, r2
 800cc40:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800cc42:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d105      	bne.n	800cc54 <mg_mqtt_pub+0x130>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cc4e:	3201      	adds	r2, #1
 800cc50:	b292      	uxth	r2, r2
 800cc52:	859a      	strh	r2, [r3, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cc5a:	81fb      	strh	r3, [r7, #14]
    }
    mg_send_u16(c, mg_htons(id));
 800cc5c:	89fb      	ldrh	r3, [r7, #14]
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f005 feda 	bl	8012a18 <mg_ntohs>
 800cc64:	4603      	mov	r3, r0
 800cc66:	4619      	mov	r1, r3
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f7ff fb42 	bl	800c2f2 <mg_send_u16>
  }

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800cc74:	f003 0304 	and.w	r3, r3, #4
 800cc78:	b2db      	uxtb	r3, r3
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d007      	beq.n	800cc8e <mg_mqtt_pub+0x16a>
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc86:	461a      	mov	r2, r3
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f7ff fc95 	bl	800c5b8 <mg_send_mqtt_properties>

  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d007      	beq.n	800cca6 <mg_mqtt_pub+0x182>
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	6a19      	ldr	r1, [r3, #32]
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc9e:	461a      	mov	r2, r3
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f004 f8db 	bl	8010e5c <mg_send>
  return id;
 800cca6:	89fb      	ldrh	r3, [r7, #14]
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3714      	adds	r7, #20
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd90      	pop	{r4, r7, pc}
 800ccb0:	20000244 	.word	0x20000244
 800ccb4:	080326a8 	.word	0x080326a8
 800ccb8:	0802efcc 	.word	0x0802efcc
 800ccbc:	0802fcfc 	.word	0x0802fcfc

0800ccc0 <mg_mqtt_sub>:

void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b086      	sub	sp, #24
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]
  uint8_t qos_ = opts->qos & 3;
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ccd0:	f003 0303 	and.w	r3, r3, #3
 800ccd4:	b2db      	uxtb	r3, r3
 800ccd6:	73fb      	strb	r3, [r7, #15]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800ccde:	f003 0304 	and.w	r3, r3, #4
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d009      	beq.n	800ccfc <mg_mqtt_sub+0x3c>
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	4610      	mov	r0, r2
 800ccf4:	f7ff fc48 	bl	800c588 <get_props_size>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	e000      	b.n	800ccfe <mg_mqtt_sub+0x3e>
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	617b      	str	r3, [r7, #20]
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	69da      	ldr	r2, [r3, #28]
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	4413      	add	r3, r2
 800cd08:	3305      	adds	r3, #5
 800cd0a:	613b      	str	r3, [r7, #16]

  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	2202      	movs	r2, #2
 800cd10:	2108      	movs	r1, #8
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f7ff faa8 	bl	800c268 <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cd1e:	3201      	adds	r2, #1
 800cd20:	b292      	uxth	r2, r2
 800cd22:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800cd24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d105      	bne.n	800cd36 <mg_mqtt_sub+0x76>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cd30:	3201      	adds	r2, #1
 800cd32:	b292      	uxth	r2, r2
 800cd34:	859a      	strh	r2, [r3, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f005 fe6b 	bl	8012a18 <mg_ntohs>
 800cd42:	4603      	mov	r3, r0
 800cd44:	4619      	mov	r1, r3
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f7ff fad3 	bl	800c2f2 <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800cd52:	f003 0304 	and.w	r3, r3, #4
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d007      	beq.n	800cd6c <mg_mqtt_sub+0xac>
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd64:	461a      	mov	r2, r3
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f7ff fc26 	bl	800c5b8 <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	69db      	ldr	r3, [r3, #28]
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	4618      	mov	r0, r3
 800cd74:	f005 fe50 	bl	8012a18 <mg_ntohs>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f7ff fab8 	bl	800c2f2 <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	6999      	ldr	r1, [r3, #24]
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	69db      	ldr	r3, [r3, #28]
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f004 f865 	bl	8010e5c <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 800cd92:	f107 030f 	add.w	r3, r7, #15
 800cd96:	2201      	movs	r2, #1
 800cd98:	4619      	mov	r1, r3
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f004 f85e 	bl	8010e5c <mg_send>
}
 800cda0:	bf00      	nop
 800cda2:	3718      	adds	r7, #24
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}

0800cda8 <mg_mqtt_parse>:

int mg_mqtt_parse(const uint8_t *buf, size_t len, uint8_t version,
                  struct mg_mqtt_message *m) {
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b08a      	sub	sp, #40	@ 0x28
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	60f8      	str	r0, [r7, #12]
 800cdb0:	60b9      	str	r1, [r7, #8]
 800cdb2:	603b      	str	r3, [r7, #0]
 800cdb4:	4613      	mov	r3, r2
 800cdb6:	71fb      	strb	r3, [r7, #7]
  uint8_t lc = 0, *p, *end;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t n = 0, len_len = 0;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	61fb      	str	r3, [r7, #28]
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	61bb      	str	r3, [r7, #24]

  memset(m, 0, sizeof(*m));
 800cdc6:	2228      	movs	r2, #40	@ 0x28
 800cdc8:	2100      	movs	r1, #0
 800cdca:	6838      	ldr	r0, [r7, #0]
 800cdcc:	f01e fe9e 	bl	802bb0c <memset>
  m->dgram.buf = (char *) buf;
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	68fa      	ldr	r2, [r7, #12]
 800cdd4:	611a      	str	r2, [r3, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d801      	bhi.n	800cde0 <mg_mqtt_parse+0x38>
 800cddc:	2301      	movs	r3, #1
 800cdde:	e104      	b.n	800cfea <mg_mqtt_parse+0x242>
  m->cmd = (uint8_t) (buf[0] >> 4);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	091b      	lsrs	r3, r3, #4
 800cde6:	b2da      	uxtb	r2, r3
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	769a      	strb	r2, [r3, #26]
  m->qos = (buf[0] >> 1) & 3;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	085b      	lsrs	r3, r3, #1
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	f003 0303 	and.w	r3, r3, #3
 800cdf8:	b2da      	uxtb	r2, r3
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	76da      	strb	r2, [r3, #27]

  n = len_len = 0;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	61bb      	str	r3, [r7, #24]
 800ce02:	69bb      	ldr	r3, [r7, #24]
 800ce04:	61fb      	str	r3, [r7, #28]
  p = (uint8_t *) buf + 1;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	623b      	str	r3, [r7, #32]
  while ((size_t) (p - buf) < len) {
 800ce0c:	e01f      	b.n	800ce4e <mg_mqtt_parse+0xa6>
    lc = *((uint8_t *) p++);
 800ce0e:	6a3b      	ldr	r3, [r7, #32]
 800ce10:	1c5a      	adds	r2, r3, #1
 800ce12:	623a      	str	r2, [r7, #32]
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 800ce1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce1e:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 800ce22:	69ba      	ldr	r2, [r7, #24]
 800ce24:	4613      	mov	r3, r2
 800ce26:	00db      	lsls	r3, r3, #3
 800ce28:	1a9b      	subs	r3, r3, r2
 800ce2a:	fa01 f303 	lsl.w	r3, r1, r3
 800ce2e:	461a      	mov	r2, r3
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	4413      	add	r3, r2
 800ce34:	61fb      	str	r3, [r7, #28]
    len_len++;
 800ce36:	69bb      	ldr	r3, [r7, #24]
 800ce38:	3301      	adds	r3, #1
 800ce3a:	61bb      	str	r3, [r7, #24]
    if (!(lc & 0x80)) break;
 800ce3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	da0c      	bge.n	800ce5e <mg_mqtt_parse+0xb6>
    if (len_len >= 4) return MQTT_MALFORMED;
 800ce44:	69bb      	ldr	r3, [r7, #24]
 800ce46:	2b03      	cmp	r3, #3
 800ce48:	d901      	bls.n	800ce4e <mg_mqtt_parse+0xa6>
 800ce4a:	2302      	movs	r3, #2
 800ce4c:	e0cd      	b.n	800cfea <mg_mqtt_parse+0x242>
  while ((size_t) (p - buf) < len) {
 800ce4e:	6a3a      	ldr	r2, [r7, #32]
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	1ad3      	subs	r3, r2, r3
 800ce54:	461a      	mov	r2, r3
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d8d8      	bhi.n	800ce0e <mg_mqtt_parse+0x66>
 800ce5c:	e000      	b.n	800ce60 <mg_mqtt_parse+0xb8>
    if (!(lc & 0x80)) break;
 800ce5e:	bf00      	nop
  }
  end = p + n;
 800ce60:	6a3a      	ldr	r2, [r7, #32]
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	4413      	add	r3, r2
 800ce66:	617b      	str	r3, [r7, #20]
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 800ce68:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	db05      	blt.n	800ce7c <mg_mqtt_parse+0xd4>
 800ce70:	68fa      	ldr	r2, [r7, #12]
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	4413      	add	r3, r2
 800ce76:	697a      	ldr	r2, [r7, #20]
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d901      	bls.n	800ce80 <mg_mqtt_parse+0xd8>
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	e0b4      	b.n	800cfea <mg_mqtt_parse+0x242>
  m->dgram.len = (size_t) (end - buf);
 800ce80:	697a      	ldr	r2, [r7, #20]
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	1ad3      	subs	r3, r2, r3
 800ce86:	461a      	mov	r2, r3
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	615a      	str	r2, [r3, #20]

  switch (m->cmd) {
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	7e9b      	ldrb	r3, [r3, #26]
 800ce90:	2b0b      	cmp	r3, #11
 800ce92:	f300 80a8 	bgt.w	800cfe6 <mg_mqtt_parse+0x23e>
 800ce96:	2b04      	cmp	r3, #4
 800ce98:	da10      	bge.n	800cebc <mg_mqtt_parse+0x114>
 800ce9a:	2b02      	cmp	r3, #2
 800ce9c:	d002      	beq.n	800cea4 <mg_mqtt_parse+0xfc>
 800ce9e:	2b03      	cmp	r3, #3
 800cea0:	d024      	beq.n	800ceec <mg_mqtt_parse+0x144>
      m->data.buf = (char *) p;
      m->data.len = (size_t) (end - p);
      break;
    }
    default:
      break;
 800cea2:	e0a0      	b.n	800cfe6 <mg_mqtt_parse+0x23e>
      if (end - p < 2) return MQTT_MALFORMED;
 800cea4:	697a      	ldr	r2, [r7, #20]
 800cea6:	6a3b      	ldr	r3, [r7, #32]
 800cea8:	1ad3      	subs	r3, r2, r3
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	dc01      	bgt.n	800ceb2 <mg_mqtt_parse+0x10a>
 800ceae:	2302      	movs	r3, #2
 800ceb0:	e09b      	b.n	800cfea <mg_mqtt_parse+0x242>
      m->ack = p[1];
 800ceb2:	6a3b      	ldr	r3, [r7, #32]
 800ceb4:	785a      	ldrb	r2, [r3, #1]
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	771a      	strb	r2, [r3, #28]
      break;
 800ceba:	e095      	b.n	800cfe8 <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 800cebc:	6a3b      	ldr	r3, [r7, #32]
 800cebe:	3302      	adds	r3, #2
 800cec0:	697a      	ldr	r2, [r7, #20]
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d201      	bcs.n	800ceca <mg_mqtt_parse+0x122>
 800cec6:	2302      	movs	r3, #2
 800cec8:	e08f      	b.n	800cfea <mg_mqtt_parse+0x242>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 800ceca:	6a3b      	ldr	r3, [r7, #32]
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	021b      	lsls	r3, r3, #8
 800ced0:	b21a      	sxth	r2, r3
 800ced2:	6a3b      	ldr	r3, [r7, #32]
 800ced4:	3301      	adds	r3, #1
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	b21b      	sxth	r3, r3
 800ceda:	4313      	orrs	r3, r2
 800cedc:	b21b      	sxth	r3, r3
 800cede:	b29a      	uxth	r2, r3
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	831a      	strh	r2, [r3, #24]
      p += 2;
 800cee4:	6a3b      	ldr	r3, [r7, #32]
 800cee6:	3302      	adds	r3, #2
 800cee8:	623b      	str	r3, [r7, #32]
      break;
 800ceea:	e07d      	b.n	800cfe8 <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 800ceec:	6a3b      	ldr	r3, [r7, #32]
 800ceee:	3302      	adds	r3, #2
 800cef0:	697a      	ldr	r2, [r7, #20]
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d201      	bcs.n	800cefa <mg_mqtt_parse+0x152>
 800cef6:	2302      	movs	r3, #2
 800cef8:	e077      	b.n	800cfea <mg_mqtt_parse+0x242>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 800cefa:	6a3b      	ldr	r3, [r7, #32]
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	021b      	lsls	r3, r3, #8
 800cf00:	b21a      	sxth	r2, r3
 800cf02:	6a3b      	ldr	r3, [r7, #32]
 800cf04:	3301      	adds	r3, #1
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	b21b      	sxth	r3, r3
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	b21b      	sxth	r3, r3
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	461a      	mov	r2, r3
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	605a      	str	r2, [r3, #4]
      m->topic.buf = (char *) p + 2;
 800cf16:	6a3b      	ldr	r3, [r7, #32]
 800cf18:	1c9a      	adds	r2, r3, #2
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	601a      	str	r2, [r3, #0]
      p += 2 + m->topic.len;
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	3302      	adds	r3, #2
 800cf24:	6a3a      	ldr	r2, [r7, #32]
 800cf26:	4413      	add	r3, r2
 800cf28:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 800cf2a:	6a3a      	ldr	r2, [r7, #32]
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d901      	bls.n	800cf36 <mg_mqtt_parse+0x18e>
 800cf32:	2302      	movs	r3, #2
 800cf34:	e059      	b.n	800cfea <mg_mqtt_parse+0x242>
      if (m->qos > 0) {
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	7edb      	ldrb	r3, [r3, #27]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d016      	beq.n	800cf6c <mg_mqtt_parse+0x1c4>
        if (p + 2 > end) return MQTT_MALFORMED;
 800cf3e:	6a3b      	ldr	r3, [r7, #32]
 800cf40:	3302      	adds	r3, #2
 800cf42:	697a      	ldr	r2, [r7, #20]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d201      	bcs.n	800cf4c <mg_mqtt_parse+0x1a4>
 800cf48:	2302      	movs	r3, #2
 800cf4a:	e04e      	b.n	800cfea <mg_mqtt_parse+0x242>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 800cf4c:	6a3b      	ldr	r3, [r7, #32]
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	021b      	lsls	r3, r3, #8
 800cf52:	b21a      	sxth	r2, r3
 800cf54:	6a3b      	ldr	r3, [r7, #32]
 800cf56:	3301      	adds	r3, #1
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	b21b      	sxth	r3, r3
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	b21b      	sxth	r3, r3
 800cf60:	b29a      	uxth	r2, r3
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	831a      	strh	r2, [r3, #24]
        p += 2;
 800cf66:	6a3b      	ldr	r3, [r7, #32]
 800cf68:	3302      	adds	r3, #2
 800cf6a:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 800cf6c:	6a3a      	ldr	r2, [r7, #32]
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d901      	bls.n	800cf78 <mg_mqtt_parse+0x1d0>
 800cf74:	2302      	movs	r3, #2
 800cf76:	e038      	b.n	800cfea <mg_mqtt_parse+0x242>
      if (version == 5 && p + 2 < end) {
 800cf78:	79fb      	ldrb	r3, [r7, #7]
 800cf7a:	2b05      	cmp	r3, #5
 800cf7c:	d123      	bne.n	800cfc6 <mg_mqtt_parse+0x21e>
 800cf7e:	6a3b      	ldr	r3, [r7, #32]
 800cf80:	3302      	adds	r3, #2
 800cf82:	697a      	ldr	r2, [r7, #20]
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d91e      	bls.n	800cfc6 <mg_mqtt_parse+0x21e>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 800cf88:	697a      	ldr	r2, [r7, #20]
 800cf8a:	6a3b      	ldr	r3, [r7, #32]
 800cf8c:	1ad3      	subs	r3, r2, r3
 800cf8e:	4619      	mov	r1, r3
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	3324      	adds	r3, #36	@ 0x24
 800cf94:	461a      	mov	r2, r3
 800cf96:	6a38      	ldr	r0, [r7, #32]
 800cf98:	f7ff fa07 	bl	800c3aa <decode_varint>
 800cf9c:	61b8      	str	r0, [r7, #24]
        if (!len_len) return MQTT_MALFORMED;
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d101      	bne.n	800cfa8 <mg_mqtt_parse+0x200>
 800cfa4:	2302      	movs	r3, #2
 800cfa6:	e020      	b.n	800cfea <mg_mqtt_parse+0x242>
        m->props_start = (size_t) (p + len_len - buf);
 800cfa8:	6a3a      	ldr	r2, [r7, #32]
 800cfaa:	69bb      	ldr	r3, [r7, #24]
 800cfac:	441a      	add	r2, r3
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	1ad3      	subs	r3, r2, r3
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	621a      	str	r2, [r3, #32]
        p += len_len + m->props_size;
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cfbc:	69bb      	ldr	r3, [r7, #24]
 800cfbe:	4413      	add	r3, r2
 800cfc0:	6a3a      	ldr	r2, [r7, #32]
 800cfc2:	4413      	add	r3, r2
 800cfc4:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 800cfc6:	6a3a      	ldr	r2, [r7, #32]
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d901      	bls.n	800cfd2 <mg_mqtt_parse+0x22a>
 800cfce:	2302      	movs	r3, #2
 800cfd0:	e00b      	b.n	800cfea <mg_mqtt_parse+0x242>
      m->data.buf = (char *) p;
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	6a3a      	ldr	r2, [r7, #32]
 800cfd6:	609a      	str	r2, [r3, #8]
      m->data.len = (size_t) (end - p);
 800cfd8:	697a      	ldr	r2, [r7, #20]
 800cfda:	6a3b      	ldr	r3, [r7, #32]
 800cfdc:	1ad3      	subs	r3, r2, r3
 800cfde:	461a      	mov	r2, r3
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	60da      	str	r2, [r3, #12]
      break;
 800cfe4:	e000      	b.n	800cfe8 <mg_mqtt_parse+0x240>
      break;
 800cfe6:	bf00      	nop
  }
  return MQTT_OK;
 800cfe8:	2300      	movs	r3, #0
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3728      	adds	r7, #40	@ 0x28
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
	...

0800cff4 <mqtt_cb>:

static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 800cff4:	b590      	push	{r4, r7, lr}
 800cff6:	b099      	sub	sp, #100	@ 0x64
 800cff8:	af02      	add	r7, sp, #8
 800cffa:	60f8      	str	r0, [r7, #12]
 800cffc:	60b9      	str	r1, [r7, #8]
 800cffe:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_READ) {
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	2b07      	cmp	r3, #7
 800d004:	f040 8124 	bne.w	800d250 <mqtt_cb+0x25c>
    for (;;) {
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800d00e:	f003 0304 	and.w	r3, r3, #4
 800d012:	b2db      	uxtb	r3, r3
 800d014:	2b00      	cmp	r3, #0
 800d016:	d001      	beq.n	800d01c <mqtt_cb+0x28>
 800d018:	2305      	movs	r3, #5
 800d01a:	e000      	b.n	800d01e <mqtt_cb+0x2a>
 800d01c:	2304      	movs	r3, #4
 800d01e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
      struct mg_mqtt_message mm;
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800d02a:	f107 0314 	add.w	r3, r7, #20
 800d02e:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 800d032:	f7ff feb9 	bl	800cda8 <mg_mqtt_parse>
 800d036:	64f8      	str	r0, [r7, #76]	@ 0x4c
      if (rc == MQTT_MALFORMED) {
 800d038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d03a:	2b02      	cmp	r3, #2
 800d03c:	d118      	bne.n	800d070 <mqtt_cb+0x7c>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 800d03e:	4b86      	ldr	r3, [pc, #536]	@ (800d258 <mqtt_cb+0x264>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	dd0c      	ble.n	800d060 <mqtt_cb+0x6c>
 800d046:	4b85      	ldr	r3, [pc, #532]	@ (800d25c <mqtt_cb+0x268>)
 800d048:	f241 1290 	movw	r2, #4496	@ 0x1190
 800d04c:	4984      	ldr	r1, [pc, #528]	@ (800d260 <mqtt_cb+0x26c>)
 800d04e:	2001      	movs	r0, #1
 800d050:	f7fe ffd0 	bl	800bff4 <mg_log_prefix>
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d058:	4619      	mov	r1, r3
 800d05a:	4882      	ldr	r0, [pc, #520]	@ (800d264 <mqtt_cb+0x270>)
 800d05c:	f7ff f81a 	bl	800c094 <mg_log>
        c->is_closing = 1;
 800d060:	68fa      	ldr	r2, [r7, #12]
 800d062:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800d066:	f043 0320 	orr.w	r3, r3, #32
 800d06a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        break;
 800d06e:	e0ef      	b.n	800d250 <mqtt_cb+0x25c>
      } else if (rc == MQTT_OK) {
 800d070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d072:	2b00      	cmp	r3, #0
 800d074:	f040 80eb 	bne.w	800d24e <mqtt_cb+0x25a>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 800d078:	4b77      	ldr	r3, [pc, #476]	@ (800d258 <mqtt_cb+0x264>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	2b03      	cmp	r3, #3
 800d07e:	dd17      	ble.n	800d0b0 <mqtt_cb+0xbc>
 800d080:	4b76      	ldr	r3, [pc, #472]	@ (800d25c <mqtt_cb+0x268>)
 800d082:	f241 1294 	movw	r2, #4500	@ 0x1194
 800d086:	4976      	ldr	r1, [pc, #472]	@ (800d260 <mqtt_cb+0x26c>)
 800d088:	2004      	movs	r0, #4
 800d08a:	f7fe ffb3 	bl	800bff4 <mg_log_prefix>
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800d092:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d096:	4618      	mov	r0, r3
 800d098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d09a:	461c      	mov	r4, r3
 800d09c:	6a3b      	ldr	r3, [r7, #32]
 800d09e:	461a      	mov	r2, r3
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	9301      	str	r3, [sp, #4]
 800d0a4:	9200      	str	r2, [sp, #0]
 800d0a6:	4623      	mov	r3, r4
 800d0a8:	4602      	mov	r2, r0
 800d0aa:	486f      	ldr	r0, [pc, #444]	@ (800d268 <mqtt_cb+0x274>)
 800d0ac:	f7fe fff2 	bl	800c094 <mg_log>
                    (int) mm.dgram.len, (int) mm.data.len, mm.data.buf));
        switch (mm.cmd) {
 800d0b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d0b4:	3b02      	subs	r3, #2
 800d0b6:	2b04      	cmp	r3, #4
 800d0b8:	f200 80ba 	bhi.w	800d230 <mqtt_cb+0x23c>
 800d0bc:	a201      	add	r2, pc, #4	@ (adr r2, 800d0c4 <mqtt_cb+0xd0>)
 800d0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c2:	bf00      	nop
 800d0c4:	0800d0d9 	.word	0x0800d0d9
 800d0c8:	0800d14d 	.word	0x0800d14d
 800d0cc:	0800d231 	.word	0x0800d231
 800d0d0:	0800d1d7 	.word	0x0800d1d7
 800d0d4:	0800d203 	.word	0x0800d203
          case MQTT_CMD_CONNACK:
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 800d0d8:	f107 0314 	add.w	r3, r7, #20
 800d0dc:	331c      	adds	r3, #28
 800d0de:	461a      	mov	r2, r3
 800d0e0:	2111      	movs	r1, #17
 800d0e2:	68f8      	ldr	r0, [r7, #12]
 800d0e4:	f7f9 fd92 	bl	8006c0c <mg_call>
            if (mm.ack == 0) {
 800d0e8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d112      	bne.n	800d116 <mqtt_cb+0x122>
              MG_DEBUG(("%lu Connected", c->id));
 800d0f0:	4b59      	ldr	r3, [pc, #356]	@ (800d258 <mqtt_cb+0x264>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2b02      	cmp	r3, #2
 800d0f6:	f340 809a 	ble.w	800d22e <mqtt_cb+0x23a>
 800d0fa:	4b58      	ldr	r3, [pc, #352]	@ (800d25c <mqtt_cb+0x268>)
 800d0fc:	f241 129a 	movw	r2, #4506	@ 0x119a
 800d100:	4957      	ldr	r1, [pc, #348]	@ (800d260 <mqtt_cb+0x26c>)
 800d102:	2003      	movs	r0, #3
 800d104:	f7fe ff76 	bl	800bff4 <mg_log_prefix>
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d10c:	4619      	mov	r1, r3
 800d10e:	4857      	ldr	r0, [pc, #348]	@ (800d26c <mqtt_cb+0x278>)
 800d110:	f7fe ffc0 	bl	800c094 <mg_log>
            } else {
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
              c->is_closing = 1;
            }
            break;
 800d114:	e08b      	b.n	800d22e <mqtt_cb+0x23a>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 800d116:	4b50      	ldr	r3, [pc, #320]	@ (800d258 <mqtt_cb+0x264>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	dd0e      	ble.n	800d13c <mqtt_cb+0x148>
 800d11e:	4b4f      	ldr	r3, [pc, #316]	@ (800d25c <mqtt_cb+0x268>)
 800d120:	f241 129c 	movw	r2, #4508	@ 0x119c
 800d124:	494e      	ldr	r1, [pc, #312]	@ (800d260 <mqtt_cb+0x26c>)
 800d126:	2001      	movs	r0, #1
 800d128:	f7fe ff64 	bl	800bff4 <mg_log_prefix>
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d130:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800d134:	4619      	mov	r1, r3
 800d136:	484e      	ldr	r0, [pc, #312]	@ (800d270 <mqtt_cb+0x27c>)
 800d138:	f7fe ffac 	bl	800c094 <mg_log>
              c->is_closing = 1;
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800d142:	f043 0320 	orr.w	r3, r3, #32
 800d146:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
            break;
 800d14a:	e070      	b.n	800d22e <mqtt_cb+0x23a>
          case MQTT_CMD_PUBLISH: {
            /*MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) mm.topic.len,
                      mm.topic.buf, (int) mm.data.len, mm.data.buf));*/
            if (mm.qos > 0) {
 800d14c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d150:	2b00      	cmp	r3, #0
 800d152:	d038      	beq.n	800d1c6 <mqtt_cb+0x1d2>
              uint16_t id = mg_ntohs(mm.id);
 800d154:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d156:	4618      	mov	r0, r3
 800d158:	f005 fc5e 	bl	8012a18 <mg_ntohs>
 800d15c:	4603      	mov	r3, r0
 800d15e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
              uint32_t remaining_len = sizeof(id);
 800d162:	2302      	movs	r3, #2
 800d164:	657b      	str	r3, [r7, #84]	@ 0x54
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800d16c:	f003 0304 	and.w	r3, r3, #4
 800d170:	b2db      	uxtb	r3, r3
 800d172:	2b00      	cmp	r3, #0
 800d174:	d002      	beq.n	800d17c <mqtt_cb+0x188>
 800d176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d178:	3302      	adds	r3, #2
 800d17a:	657b      	str	r3, [r7, #84]	@ 0x54

              mg_mqtt_send_header(
                  c,
                  (uint8_t) (mm.qos == 2 ? MQTT_CMD_PUBREC : MQTT_CMD_PUBACK),
 800d17c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
              mg_mqtt_send_header(
 800d180:	2b02      	cmp	r3, #2
 800d182:	d101      	bne.n	800d188 <mqtt_cb+0x194>
 800d184:	2105      	movs	r1, #5
 800d186:	e000      	b.n	800d18a <mqtt_cb+0x196>
 800d188:	2104      	movs	r1, #4
 800d18a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d18c:	2200      	movs	r2, #0
 800d18e:	68f8      	ldr	r0, [r7, #12]
 800d190:	f7ff f86a 	bl	800c268 <mg_mqtt_send_header>
                  0, remaining_len);
              mg_send(c, &id, sizeof(id));
 800d194:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 800d198:	2202      	movs	r2, #2
 800d19a:	4619      	mov	r1, r3
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f003 fe5d 	bl	8010e5c <mg_send>

              if (c->is_mqtt5) {
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800d1a8:	f003 0304 	and.w	r3, r3, #4
 800d1ac:	b2db      	uxtb	r3, r3
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d009      	beq.n	800d1c6 <mqtt_cb+0x1d2>
                uint16_t zero = 0;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                mg_send(c, &zero, sizeof(zero));
 800d1b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d1bc:	2202      	movs	r2, #2
 800d1be:	4619      	mov	r1, r3
 800d1c0:	68f8      	ldr	r0, [r7, #12]
 800d1c2:	f003 fe4b 	bl	8010e5c <mg_send>
              }
            }
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 800d1c6:	f107 0314 	add.w	r3, r7, #20
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	2110      	movs	r1, #16
 800d1ce:	68f8      	ldr	r0, [r7, #12]
 800d1d0:	f7f9 fd1c 	bl	8006c0c <mg_call>
            break;
 800d1d4:	e02c      	b.n	800d230 <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREC: {  // MQTT5: 3.5.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 800d1d6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f005 fc1d 	bl	8012a18 <mg_ntohs>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.6.2-1
 800d1e2:	2302      	movs	r3, #2
 800d1e4:	647b      	str	r3, [r7, #68]	@ 0x44
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 800d1e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1e8:	2202      	movs	r2, #2
 800d1ea:	2106      	movs	r1, #6
 800d1ec:	68f8      	ldr	r0, [r7, #12]
 800d1ee:	f7ff f83b 	bl	800c268 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 800d1f2:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 800d1f6:	2202      	movs	r2, #2
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	68f8      	ldr	r0, [r7, #12]
 800d1fc:	f003 fe2e 	bl	8010e5c <mg_send>
            break;
 800d200:	e016      	b.n	800d230 <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREL: {  // MQTT5: 3.6.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 800d202:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d204:	4618      	mov	r0, r3
 800d206:	f005 fc07 	bl	8012a18 <mg_ntohs>
 800d20a:	4603      	mov	r3, r0
 800d20c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.7.2-1
 800d20e:	2302      	movs	r3, #2
 800d210:	64bb      	str	r3, [r7, #72]	@ 0x48
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 800d212:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d214:	2200      	movs	r2, #0
 800d216:	2107      	movs	r1, #7
 800d218:	68f8      	ldr	r0, [r7, #12]
 800d21a:	f7ff f825 	bl	800c268 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 800d21e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d222:	2202      	movs	r2, #2
 800d224:	4619      	mov	r1, r3
 800d226:	68f8      	ldr	r0, [r7, #12]
 800d228:	f003 fe18 	bl	8010e5c <mg_send>
            break;
 800d22c:	e000      	b.n	800d230 <mqtt_cb+0x23c>
            break;
 800d22e:	bf00      	nop
          }
        }
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 800d230:	f107 0314 	add.w	r3, r7, #20
 800d234:	461a      	mov	r2, r3
 800d236:	210f      	movs	r1, #15
 800d238:	68f8      	ldr	r0, [r7, #12]
 800d23a:	f7f9 fce7 	bl	8006c0c <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	3338      	adds	r3, #56	@ 0x38
 800d242:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d244:	2100      	movs	r1, #0
 800d246:	4618      	mov	r0, r3
 800d248:	f7fd ffba 	bl	800b1c0 <mg_iobuf_del>
    for (;;) {
 800d24c:	e6dc      	b.n	800d008 <mqtt_cb+0x14>
      } else {
        break;
 800d24e:	bf00      	nop
      }
    }
  }
  (void) ev_data;
}
 800d250:	bf00      	nop
 800d252:	375c      	adds	r7, #92	@ 0x5c
 800d254:	46bd      	mov	sp, r7
 800d256:	bd90      	pop	{r4, r7, pc}
 800d258:	20000244 	.word	0x20000244
 800d25c:	080326b4 	.word	0x080326b4
 800d260:	0802efcc 	.word	0x0802efcc
 800d264:	0802fd14 	.word	0x0802fd14
 800d268:	0802fd30 	.word	0x0802fd30
 800d26c:	0802fd50 	.word	0x0802fd50
 800d270:	0802fd60 	.word	0x0802fd60

0800d274 <mg_mqtt_connect>:
  }
}

struct mg_connection *mg_mqtt_connect(struct mg_mgr *mgr, const char *url,
                                      const struct mg_mqtt_opts *opts,
                                      mg_event_handler_t fn, void *fn_data) {
 800d274:	b580      	push	{r7, lr}
 800d276:	b096      	sub	sp, #88	@ 0x58
 800d278:	af00      	add	r7, sp, #0
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	607a      	str	r2, [r7, #4]
 800d280:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 800d282:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d284:	683a      	ldr	r2, [r7, #0]
 800d286:	68b9      	ldr	r1, [r7, #8]
 800d288:	68f8      	ldr	r0, [r7, #12]
 800d28a:	f000 fb61 	bl	800d950 <mg_connect>
 800d28e:	6578      	str	r0, [r7, #84]	@ 0x54
  if (c != NULL) {
 800d290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d292:	2b00      	cmp	r3, #0
 800d294:	d015      	beq.n	800d2c2 <mg_mqtt_connect+0x4e>
    struct mg_mqtt_opts empty;
    memset(&empty, 0, sizeof(empty));
 800d296:	f107 0314 	add.w	r3, r7, #20
 800d29a:	2240      	movs	r2, #64	@ 0x40
 800d29c:	2100      	movs	r1, #0
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f01e fc34 	bl	802bb0c <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d102      	bne.n	800d2b0 <mg_mqtt_connect+0x3c>
 800d2aa:	f107 0314 	add.w	r3, r7, #20
 800d2ae:	e000      	b.n	800d2b2 <mg_mqtt_connect+0x3e>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	4619      	mov	r1, r3
 800d2b4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d2b6:	f7ff fac9 	bl	800c84c <mg_mqtt_login>
    c->pfn = mqtt_cb;
 800d2ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2bc:	4a03      	ldr	r2, [pc, #12]	@ (800d2cc <mg_mqtt_connect+0x58>)
 800d2be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
  return c;
 800d2c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3758      	adds	r7, #88	@ 0x58
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	0800cff5 	.word	0x0800cff5

0800d2d0 <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b086      	sub	sp, #24
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	60f8      	str	r0, [r7, #12]
 800d2d8:	60b9      	str	r1, [r7, #8]
 800d2da:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2e0:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	68ba      	ldr	r2, [r7, #8]
 800d2ec:	4805      	ldr	r0, [pc, #20]	@ (800d304 <mg_vprintf+0x34>)
 800d2ee:	f7fa f95b 	bl	80075a8 <mg_vxprintf>
  return c->send.len - old;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	1ad3      	subs	r3, r2, r3
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3718      	adds	r7, #24
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
 800d302:	bf00      	nop
 800d304:	0801107f 	.word	0x0801107f

0800d308 <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 800d308:	b40e      	push	{r1, r2, r3}
 800d30a:	b580      	push	{r7, lr}
 800d30c:	b085      	sub	sp, #20
 800d30e:	af00      	add	r7, sp, #0
 800d310:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 800d312:	2300      	movs	r3, #0
 800d314:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 800d316:	f107 0320 	add.w	r3, r7, #32
 800d31a:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 800d31c:	f107 0308 	add.w	r3, r7, #8
 800d320:	461a      	mov	r2, r3
 800d322:	69f9      	ldr	r1, [r7, #28]
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f7ff ffd3 	bl	800d2d0 <mg_vprintf>
 800d32a:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 800d32c:	68fb      	ldr	r3, [r7, #12]
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3714      	adds	r7, #20
 800d332:	46bd      	mov	sp, r7
 800d334:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d338:	b003      	add	sp, #12
 800d33a:	4770      	bx	lr

0800d33c <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b086      	sub	sp, #24
 800d340:	af00      	add	r7, sp, #0
 800d342:	f107 0308 	add.w	r3, r7, #8
 800d346:	e883 0003 	stmia.w	r3, {r0, r1}
 800d34a:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 800d34c:	480d      	ldr	r0, [pc, #52]	@ (800d384 <mg_atonl+0x48>)
 800d34e:	f005 fb4a 	bl	80129e6 <mg_ntohl>
 800d352:	4603      	mov	r3, r0
 800d354:	617b      	str	r3, [r7, #20]
  if (mg_vcasecmp(&str, "localhost") != 0) return false;
 800d356:	f107 0308 	add.w	r3, r7, #8
 800d35a:	490b      	ldr	r1, [pc, #44]	@ (800d388 <mg_atonl+0x4c>)
 800d35c:	4618      	mov	r0, r3
 800d35e:	f004 fd4d 	bl	8011dfc <mg_vcasecmp>
 800d362:	4603      	mov	r3, r0
 800d364:	2b00      	cmp	r3, #0
 800d366:	d001      	beq.n	800d36c <mg_atonl+0x30>
 800d368:	2300      	movs	r3, #0
 800d36a:	e006      	b.n	800d37a <mg_atonl+0x3e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	697a      	ldr	r2, [r7, #20]
 800d370:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2200      	movs	r2, #0
 800d376:	74da      	strb	r2, [r3, #19]
  return true;
 800d378:	2301      	movs	r3, #1
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3718      	adds	r7, #24
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}
 800d382:	bf00      	nop
 800d384:	7f000001 	.word	0x7f000001
 800d388:	0802fd80 	.word	0x0802fd80

0800d38c <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	f107 0308 	add.w	r3, r7, #8
 800d396:	e883 0003 	stmia.w	r3, {r0, r1}
 800d39a:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d001      	beq.n	800d3a6 <mg_atone+0x1a>
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	e009      	b.n	800d3ba <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2210      	movs	r2, #16
 800d3aa:	2100      	movs	r1, #0
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f01e fbad 	bl	802bb0c <memset>
  addr->is_ip6 = false;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	74da      	strb	r2, [r3, #19]
  return true;
 800d3b8:	2301      	movs	r3, #1
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3710      	adds	r7, #16
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}

0800d3c2 <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 800d3c2:	b480      	push	{r7}
 800d3c4:	b089      	sub	sp, #36	@ 0x24
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	f107 0308 	add.w	r3, r7, #8
 800d3cc:	e883 0003 	stmia.w	r3, {r0, r1}
 800d3d0:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 800d3da:	2300      	movs	r3, #0
 800d3dc:	61fb      	str	r3, [r7, #28]
 800d3de:	e049      	b.n	800d474 <mg_aton4+0xb2>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 800d3e0:	68ba      	ldr	r2, [r7, #8]
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	4413      	add	r3, r2
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	2b2f      	cmp	r3, #47	@ 0x2f
 800d3ea:	d925      	bls.n	800d438 <mg_aton4+0x76>
 800d3ec:	68ba      	ldr	r2, [r7, #8]
 800d3ee:	69fb      	ldr	r3, [r7, #28]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	2b39      	cmp	r3, #57	@ 0x39
 800d3f6:	d81f      	bhi.n	800d438 <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 800d3f8:	f107 0210 	add.w	r2, r7, #16
 800d3fc:	69bb      	ldr	r3, [r7, #24]
 800d3fe:	4413      	add	r3, r2
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	461a      	mov	r2, r3
 800d404:	4613      	mov	r3, r2
 800d406:	009b      	lsls	r3, r3, #2
 800d408:	4413      	add	r3, r2
 800d40a:	005b      	lsls	r3, r3, #1
 800d40c:	4619      	mov	r1, r3
 800d40e:	68ba      	ldr	r2, [r7, #8]
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	4413      	add	r3, r2
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	3b30      	subs	r3, #48	@ 0x30
 800d418:	440b      	add	r3, r1
 800d41a:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	2bff      	cmp	r3, #255	@ 0xff
 800d420:	dd01      	ble.n	800d426 <mg_aton4+0x64>
 800d422:	2300      	movs	r3, #0
 800d424:	e03d      	b.n	800d4a2 <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	b2d9      	uxtb	r1, r3
 800d42a:	f107 0210 	add.w	r2, r7, #16
 800d42e:	69bb      	ldr	r3, [r7, #24]
 800d430:	4413      	add	r3, r2
 800d432:	460a      	mov	r2, r1
 800d434:	701a      	strb	r2, [r3, #0]
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 800d436:	e01a      	b.n	800d46e <mg_aton4+0xac>
    } else if (str.buf[i] == '.') {
 800d438:	68ba      	ldr	r2, [r7, #8]
 800d43a:	69fb      	ldr	r3, [r7, #28]
 800d43c:	4413      	add	r3, r2
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	2b2e      	cmp	r3, #46	@ 0x2e
 800d442:	d112      	bne.n	800d46a <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 800d444:	69bb      	ldr	r3, [r7, #24]
 800d446:	2b02      	cmp	r3, #2
 800d448:	d809      	bhi.n	800d45e <mg_aton4+0x9c>
 800d44a:	69fb      	ldr	r3, [r7, #28]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d006      	beq.n	800d45e <mg_aton4+0x9c>
 800d450:	68ba      	ldr	r2, [r7, #8]
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	3b01      	subs	r3, #1
 800d456:	4413      	add	r3, r2
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d45c:	d101      	bne.n	800d462 <mg_aton4+0xa0>
 800d45e:	2300      	movs	r3, #0
 800d460:	e01f      	b.n	800d4a2 <mg_aton4+0xe0>
      num_dots++;
 800d462:	69bb      	ldr	r3, [r7, #24]
 800d464:	3301      	adds	r3, #1
 800d466:	61bb      	str	r3, [r7, #24]
 800d468:	e001      	b.n	800d46e <mg_aton4+0xac>
    } else {
      return false;
 800d46a:	2300      	movs	r3, #0
 800d46c:	e019      	b.n	800d4a2 <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 800d46e:	69fb      	ldr	r3, [r7, #28]
 800d470:	3301      	adds	r3, #1
 800d472:	61fb      	str	r3, [r7, #28]
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	69fa      	ldr	r2, [r7, #28]
 800d478:	429a      	cmp	r2, r3
 800d47a:	d3b1      	bcc.n	800d3e0 <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 800d47c:	69bb      	ldr	r3, [r7, #24]
 800d47e:	2b03      	cmp	r3, #3
 800d480:	d106      	bne.n	800d490 <mg_aton4+0xce>
 800d482:	68ba      	ldr	r2, [r7, #8]
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	3b01      	subs	r3, #1
 800d488:	4413      	add	r3, r2
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d48e:	d101      	bne.n	800d494 <mg_aton4+0xd2>
 800d490:	2300      	movs	r3, #0
 800d492:	e006      	b.n	800d4a2 <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	693a      	ldr	r2, [r7, #16]
 800d498:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2200      	movs	r2, #0
 800d49e:	74da      	strb	r2, [r3, #19]
  return true;
 800d4a0:	2301      	movs	r3, #1
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3724      	adds	r7, #36	@ 0x24
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ac:	4770      	bx	lr

0800d4ae <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 800d4ae:	b580      	push	{r7, lr}
 800d4b0:	b088      	sub	sp, #32
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	f107 0308 	add.w	r3, r7, #8
 800d4b8:	e883 0003 	stmia.w	r3, {r0, r1}
 800d4bc:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2b0d      	cmp	r3, #13
 800d4c2:	d801      	bhi.n	800d4c8 <mg_v4mapped+0x1a>
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	e056      	b.n	800d576 <mg_v4mapped+0xc8>
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	2b3a      	cmp	r3, #58	@ 0x3a
 800d4ce:	d109      	bne.n	800d4e4 <mg_v4mapped+0x36>
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	2b3a      	cmp	r3, #58	@ 0x3a
 800d4d8:	d104      	bne.n	800d4e4 <mg_v4mapped+0x36>
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	3306      	adds	r3, #6
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	2b3a      	cmp	r3, #58	@ 0x3a
 800d4e2:	d001      	beq.n	800d4e8 <mg_v4mapped+0x3a>
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	e046      	b.n	800d576 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 800d4e8:	2302      	movs	r3, #2
 800d4ea:	61fb      	str	r3, [r7, #28]
 800d4ec:	e010      	b.n	800d510 <mg_v4mapped+0x62>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 800d4ee:	68ba      	ldr	r2, [r7, #8]
 800d4f0:	69fb      	ldr	r3, [r7, #28]
 800d4f2:	4413      	add	r3, r2
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	2b66      	cmp	r3, #102	@ 0x66
 800d4f8:	d007      	beq.n	800d50a <mg_v4mapped+0x5c>
 800d4fa:	68ba      	ldr	r2, [r7, #8]
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	4413      	add	r3, r2
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	2b46      	cmp	r3, #70	@ 0x46
 800d504:	d001      	beq.n	800d50a <mg_v4mapped+0x5c>
 800d506:	2300      	movs	r3, #0
 800d508:	e035      	b.n	800d576 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 800d50a:	69fb      	ldr	r3, [r7, #28]
 800d50c:	3301      	adds	r3, #1
 800d50e:	61fb      	str	r3, [r7, #28]
 800d510:	69fb      	ldr	r3, [r7, #28]
 800d512:	2b05      	cmp	r3, #5
 800d514:	ddeb      	ble.n	800d4ee <mg_v4mapped+0x40>
  }
  // struct mg_str s = mg_str_n(&str.buf[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	1dd9      	adds	r1, r3, #7
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	1fda      	subs	r2, r3, #7
 800d51e:	f107 0314 	add.w	r3, r7, #20
 800d522:	4618      	mov	r0, r3
 800d524:	f004 fbe9 	bl	8011cfa <mg_str_n>
 800d528:	687a      	ldr	r2, [r7, #4]
 800d52a:	f107 0314 	add.w	r3, r7, #20
 800d52e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d532:	f7ff ff46 	bl	800d3c2 <mg_aton4>
 800d536:	4603      	mov	r3, r0
 800d538:	f083 0301 	eor.w	r3, r3, #1
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d001      	beq.n	800d546 <mg_v4mapped+0x98>
 800d542:	2300      	movs	r3, #0
 800d544:	e017      	b.n	800d576 <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2210      	movs	r2, #16
 800d550:	2100      	movs	r1, #0
 800d552:	4618      	mov	r0, r3
 800d554:	f01e fada 	bl	802bb0c <memset>
  addr->ip[10] = addr->ip[11] = 255;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	22ff      	movs	r2, #255	@ 0xff
 800d55c:	72da      	strb	r2, [r3, #11]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	7ada      	ldrb	r2, [r3, #11]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	330c      	adds	r3, #12
 800d56a:	693a      	ldr	r2, [r7, #16]
 800d56c:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2201      	movs	r2, #1
 800d572:	74da      	strb	r2, [r3, #19]
  return true;
 800d574:	2301      	movs	r3, #1
}
 800d576:	4618      	mov	r0, r3
 800d578:	3720      	adds	r7, #32
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}

0800d57e <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 800d57e:	b580      	push	{r7, lr}
 800d580:	b08a      	sub	sp, #40	@ 0x28
 800d582:	af00      	add	r7, sp, #0
 800d584:	f107 0308 	add.w	r3, r7, #8
 800d588:	e883 0003 	stmia.w	r3, {r0, r1}
 800d58c:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 800d58e:	2300      	movs	r3, #0
 800d590:	623b      	str	r3, [r7, #32]
 800d592:	2300      	movs	r3, #0
 800d594:	61fb      	str	r3, [r7, #28]
 800d596:	232a      	movs	r3, #42	@ 0x2a
 800d598:	61bb      	str	r3, [r7, #24]
  addr->scope_id = 0;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2200      	movs	r2, #0
 800d59e:	749a      	strb	r2, [r3, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2b02      	cmp	r3, #2
 800d5a4:	d909      	bls.n	800d5ba <mg_aton6+0x3c>
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	2b5b      	cmp	r3, #91	@ 0x5b
 800d5ac:	d105      	bne.n	800d5ba <mg_aton6+0x3c>
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	3301      	adds	r3, #1
 800d5b2:	60bb      	str	r3, [r7, #8]
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	3b02      	subs	r3, #2
 800d5b8:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	f107 0308 	add.w	r3, r7, #8
 800d5c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d5c4:	f7ff ff73 	bl	800d4ae <mg_v4mapped>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d001      	beq.n	800d5d2 <mg_aton6+0x54>
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	e0ea      	b.n	800d7a8 <mg_aton6+0x22a>
  for (i = 0; i < str.len; i++) {
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5d6:	e0b9      	b.n	800d74c <mg_aton6+0x1ce>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 800d5d8:	68ba      	ldr	r2, [r7, #8]
 800d5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5dc:	4413      	add	r3, r2
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	2b2f      	cmp	r3, #47	@ 0x2f
 800d5e2:	d905      	bls.n	800d5f0 <mg_aton6+0x72>
 800d5e4:	68ba      	ldr	r2, [r7, #8]
 800d5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e8:	4413      	add	r3, r2
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	2b39      	cmp	r3, #57	@ 0x39
 800d5ee:	d917      	bls.n	800d620 <mg_aton6+0xa2>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800d5f0:	68ba      	ldr	r2, [r7, #8]
 800d5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f4:	4413      	add	r3, r2
 800d5f6:	781b      	ldrb	r3, [r3, #0]
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 800d5f8:	2b60      	cmp	r3, #96	@ 0x60
 800d5fa:	d905      	bls.n	800d608 <mg_aton6+0x8a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800d5fc:	68ba      	ldr	r2, [r7, #8]
 800d5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d600:	4413      	add	r3, r2
 800d602:	781b      	ldrb	r3, [r3, #0]
 800d604:	2b66      	cmp	r3, #102	@ 0x66
 800d606:	d90b      	bls.n	800d620 <mg_aton6+0xa2>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800d608:	68ba      	ldr	r2, [r7, #8]
 800d60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d60c:	4413      	add	r3, r2
 800d60e:	781b      	ldrb	r3, [r3, #0]
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800d610:	2b40      	cmp	r3, #64	@ 0x40
 800d612:	d926      	bls.n	800d662 <mg_aton6+0xe4>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800d614:	68ba      	ldr	r2, [r7, #8]
 800d616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d618:	4413      	add	r3, r2
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	2b46      	cmp	r3, #70	@ 0x46
 800d61e:	d820      	bhi.n	800d662 <mg_aton6+0xe4>
      unsigned long val;
      if (i > j + 3) return false;
 800d620:	6a3b      	ldr	r3, [r7, #32]
 800d622:	3303      	adds	r3, #3
 800d624:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d626:	429a      	cmp	r2, r3
 800d628:	d901      	bls.n	800d62e <mg_aton6+0xb0>
 800d62a:	2300      	movs	r3, #0
 800d62c:	e0bc      	b.n	800d7a8 <mg_aton6+0x22a>
      // MG_DEBUG(("%lu %lu [%.*s]", i, j, (int) (i - j + 1), &str.buf[j]));
      val = mg_unhexn(&str.buf[j], i - j + 1);
 800d62e:	68ba      	ldr	r2, [r7, #8]
 800d630:	6a3b      	ldr	r3, [r7, #32]
 800d632:	18d0      	adds	r0, r2, r3
 800d634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d636:	6a3b      	ldr	r3, [r7, #32]
 800d638:	1ad3      	subs	r3, r2, r3
 800d63a:	3301      	adds	r3, #1
 800d63c:	4619      	mov	r1, r3
 800d63e:	f004 fe79 	bl	8012334 <mg_unhexn>
 800d642:	6178      	str	r0, [r7, #20]
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	0a1b      	lsrs	r3, r3, #8
 800d648:	b2d9      	uxtb	r1, r3
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	69fb      	ldr	r3, [r7, #28]
 800d64e:	4413      	add	r3, r2
 800d650:	460a      	mov	r2, r1
 800d652:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	3301      	adds	r3, #1
 800d658:	697a      	ldr	r2, [r7, #20]
 800d65a:	b2d1      	uxtb	r1, r2
 800d65c:	687a      	ldr	r2, [r7, #4]
 800d65e:	54d1      	strb	r1, [r2, r3]
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800d660:	e071      	b.n	800d746 <mg_aton6+0x1c8>
    } else if (str.buf[i] == ':') {
 800d662:	68ba      	ldr	r2, [r7, #8]
 800d664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d666:	4413      	add	r3, r2
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	2b3a      	cmp	r3, #58	@ 0x3a
 800d66c:	d134      	bne.n	800d6d8 <mg_aton6+0x15a>
      j = i + 1;
 800d66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d670:	3301      	adds	r3, #1
 800d672:	623b      	str	r3, [r7, #32]
      if (i > 0 && str.buf[i - 1] == ':') {
 800d674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d676:	2b00      	cmp	r3, #0
 800d678:	d014      	beq.n	800d6a4 <mg_aton6+0x126>
 800d67a:	68ba      	ldr	r2, [r7, #8]
 800d67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d67e:	3b01      	subs	r3, #1
 800d680:	4413      	add	r3, r2
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	2b3a      	cmp	r3, #58	@ 0x3a
 800d686:	d10d      	bne.n	800d6a4 <mg_aton6+0x126>
        dc = n;  // Double colon
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	61bb      	str	r3, [r7, #24]
        if (i > 1 && str.buf[i - 2] == ':') return false;
 800d68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d90f      	bls.n	800d6b2 <mg_aton6+0x134>
 800d692:	68ba      	ldr	r2, [r7, #8]
 800d694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d696:	3b02      	subs	r3, #2
 800d698:	4413      	add	r3, r2
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	2b3a      	cmp	r3, #58	@ 0x3a
 800d69e:	d108      	bne.n	800d6b2 <mg_aton6+0x134>
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	e081      	b.n	800d7a8 <mg_aton6+0x22a>
      } else if (i > 0) {
 800d6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d004      	beq.n	800d6b4 <mg_aton6+0x136>
        n += 2;
 800d6aa:	69fb      	ldr	r3, [r7, #28]
 800d6ac:	3302      	adds	r3, #2
 800d6ae:	61fb      	str	r3, [r7, #28]
 800d6b0:	e000      	b.n	800d6b4 <mg_aton6+0x136>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 800d6b2:	bf00      	nop
      }
      if (n > 14) return false;
 800d6b4:	69fb      	ldr	r3, [r7, #28]
 800d6b6:	2b0e      	cmp	r3, #14
 800d6b8:	d901      	bls.n	800d6be <mg_aton6+0x140>
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	e074      	b.n	800d7a8 <mg_aton6+0x22a>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 800d6be:	69fb      	ldr	r3, [r7, #28]
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	2100      	movs	r1, #0
 800d6c6:	54d1      	strb	r1, [r2, r3]
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	5cd1      	ldrb	r1, [r2, r3]
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	4413      	add	r3, r2
 800d6d2:	460a      	mov	r2, r1
 800d6d4:	701a      	strb	r2, [r3, #0]
 800d6d6:	e036      	b.n	800d746 <mg_aton6+0x1c8>
    } else if (str.buf[i] == '%') {       // Scope ID
 800d6d8:	68ba      	ldr	r2, [r7, #8]
 800d6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6dc:	4413      	add	r3, r2
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	2b25      	cmp	r3, #37	@ 0x25
 800d6e2:	d12e      	bne.n	800d742 <mg_aton6+0x1c4>
      for (i = i + 1; i < str.len; i++) {
 800d6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800d6ea:	e025      	b.n	800d738 <mg_aton6+0x1ba>
        if (str.buf[i] < '0' || str.buf[i] > '9') return false;
 800d6ec:	68ba      	ldr	r2, [r7, #8]
 800d6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f0:	4413      	add	r3, r2
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	2b2f      	cmp	r3, #47	@ 0x2f
 800d6f6:	d905      	bls.n	800d704 <mg_aton6+0x186>
 800d6f8:	68ba      	ldr	r2, [r7, #8]
 800d6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6fc:	4413      	add	r3, r2
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	2b39      	cmp	r3, #57	@ 0x39
 800d702:	d901      	bls.n	800d708 <mg_aton6+0x18a>
 800d704:	2300      	movs	r3, #0
 800d706:	e04f      	b.n	800d7a8 <mg_aton6+0x22a>
        addr->scope_id = (uint8_t) (addr->scope_id * 10);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	7c9b      	ldrb	r3, [r3, #18]
 800d70c:	461a      	mov	r2, r3
 800d70e:	0092      	lsls	r2, r2, #2
 800d710:	4413      	add	r3, r2
 800d712:	005b      	lsls	r3, r3, #1
 800d714:	b2da      	uxtb	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	749a      	strb	r2, [r3, #18]
        addr->scope_id = (uint8_t) (addr->scope_id + (str.buf[i] - '0'));
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	7c9a      	ldrb	r2, [r3, #18]
 800d71e:	68b9      	ldr	r1, [r7, #8]
 800d720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d722:	440b      	add	r3, r1
 800d724:	781b      	ldrb	r3, [r3, #0]
 800d726:	4413      	add	r3, r2
 800d728:	b2db      	uxtb	r3, r3
 800d72a:	3b30      	subs	r3, #48	@ 0x30
 800d72c:	b2da      	uxtb	r2, r3
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	749a      	strb	r2, [r3, #18]
      for (i = i + 1; i < str.len; i++) {
 800d732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d734:	3301      	adds	r3, #1
 800d736:	627b      	str	r3, [r7, #36]	@ 0x24
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d73c:	429a      	cmp	r2, r3
 800d73e:	d3d5      	bcc.n	800d6ec <mg_aton6+0x16e>
 800d740:	e001      	b.n	800d746 <mg_aton6+0x1c8>
      }
    } else {
      return false;
 800d742:	2300      	movs	r3, #0
 800d744:	e030      	b.n	800d7a8 <mg_aton6+0x22a>
  for (i = 0; i < str.len; i++) {
 800d746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d748:	3301      	adds	r3, #1
 800d74a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d750:	429a      	cmp	r2, r3
 800d752:	f4ff af41 	bcc.w	800d5d8 <mg_aton6+0x5a>
    }
  }
  if (n < 14 && dc == 42) return false;
 800d756:	69fb      	ldr	r3, [r7, #28]
 800d758:	2b0d      	cmp	r3, #13
 800d75a:	d804      	bhi.n	800d766 <mg_aton6+0x1e8>
 800d75c:	69bb      	ldr	r3, [r7, #24]
 800d75e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d760:	d101      	bne.n	800d766 <mg_aton6+0x1e8>
 800d762:	2300      	movs	r3, #0
 800d764:	e020      	b.n	800d7a8 <mg_aton6+0x22a>
  if (n < 14) {
 800d766:	69fb      	ldr	r3, [r7, #28]
 800d768:	2b0d      	cmp	r3, #13
 800d76a:	d819      	bhi.n	800d7a0 <mg_aton6+0x222>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 800d76c:	69ba      	ldr	r2, [r7, #24]
 800d76e:	69fb      	ldr	r3, [r7, #28]
 800d770:	1ad3      	subs	r3, r2, r3
 800d772:	330e      	adds	r3, #14
 800d774:	687a      	ldr	r2, [r7, #4]
 800d776:	18d0      	adds	r0, r2, r3
 800d778:	687a      	ldr	r2, [r7, #4]
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	18d1      	adds	r1, r2, r3
 800d77e:	69fa      	ldr	r2, [r7, #28]
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	1ad3      	subs	r3, r2, r3
 800d784:	3302      	adds	r3, #2
 800d786:	461a      	mov	r2, r3
 800d788:	f01e f9a6 	bl	802bad8 <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 800d78c:	687a      	ldr	r2, [r7, #4]
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	18d0      	adds	r0, r2, r3
 800d792:	69fb      	ldr	r3, [r7, #28]
 800d794:	f1c3 030e 	rsb	r3, r3, #14
 800d798:	461a      	mov	r2, r3
 800d79a:	2100      	movs	r1, #0
 800d79c:	f01e f9b6 	bl	802bb0c <memset>
  }

  addr->is_ip6 = true;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	74da      	strb	r2, [r3, #19]
  return true;
 800d7a6:	2301      	movs	r3, #1
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3728      	adds	r7, #40	@ 0x28
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	f107 0308 	add.w	r3, r7, #8
 800d7ba:	e883 0003 	stmia.w	r3, {r0, r1}
 800d7be:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.buf));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 800d7c0:	687a      	ldr	r2, [r7, #4]
 800d7c2:	f107 0308 	add.w	r3, r7, #8
 800d7c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d7ca:	f7ff fddf 	bl	800d38c <mg_atone>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d11d      	bne.n	800d810 <mg_aton+0x60>
 800d7d4:	687a      	ldr	r2, [r7, #4]
 800d7d6:	f107 0308 	add.w	r3, r7, #8
 800d7da:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d7de:	f7ff fdad 	bl	800d33c <mg_atonl>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d113      	bne.n	800d810 <mg_aton+0x60>
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	f107 0308 	add.w	r3, r7, #8
 800d7ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d7f2:	f7ff fde6 	bl	800d3c2 <mg_aton4>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d109      	bne.n	800d810 <mg_aton+0x60>
         mg_aton6(str, addr);
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	f107 0308 	add.w	r3, r7, #8
 800d802:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d806:	f7ff feba 	bl	800d57e <mg_aton6>
 800d80a:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d001      	beq.n	800d814 <mg_aton+0x64>
 800d810:	2301      	movs	r3, #1
 800d812:	e000      	b.n	800d816 <mg_aton+0x66>
 800d814:	2300      	movs	r3, #0
 800d816:	f003 0301 	and.w	r3, r3, #1
 800d81a:	b2db      	uxtb	r3, r3
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3710      	adds	r7, #16
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 800d824:	b580      	push	{r7, lr}
 800d826:	b084      	sub	sp, #16
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d830:	33b0      	adds	r3, #176	@ 0xb0
 800d832:	4619      	mov	r1, r3
 800d834:	2001      	movs	r0, #1
 800d836:	f01c ff11 	bl	802a65c <calloc>
 800d83a:	4603      	mov	r3, r0
 800d83c:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d017      	beq.n	800d874 <mg_alloc_conn+0x50>
    c->mgr = mgr;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	687a      	ldr	r2, [r7, #4]
 800d848:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d850:	675a      	str	r2, [r3, #116]	@ 0x74
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	645a      	str	r2, [r3, #68]	@ 0x44
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	655a      	str	r2, [r3, #84]	@ 0x54
    c->id = ++mgr->nextid;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	69db      	ldr	r3, [r3, #28]
 800d866:	1c5a      	adds	r2, r3, #1
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	61da      	str	r2, [r3, #28]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	69da      	ldr	r2, [r3, #28]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	635a      	str	r2, [r3, #52]	@ 0x34
    MG_PROF_INIT(c);
  }
  return c;
 800d874:	68fb      	ldr	r3, [r7, #12]
}
 800d876:	4618      	mov	r0, r3
 800d878:	3710      	adds	r7, #16
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
	...

0800d880 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f7f8 fc19 	bl	80060c0 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	60fb      	str	r3, [r7, #12]
 800d894:	e002      	b.n	800d89c <mg_close_conn+0x1c>
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	60fb      	str	r3, [r7, #12]
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	687a      	ldr	r2, [r7, #4]
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d1f7      	bne.n	800d896 <mg_close_conn+0x16>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681a      	ldr	r2, [r3, #0]
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	689b      	ldr	r3, [r3, #8]
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d103      	bne.n	800d8c2 <mg_close_conn+0x42>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	691b      	ldr	r3, [r3, #16]
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d103      	bne.n	800d8d6 <mg_close_conn+0x56>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	685b      	ldr	r3, [r3, #4]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	2109      	movs	r1, #9
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f7f9 f996 	bl	8006c0c <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 800d8e0:	4b17      	ldr	r3, [pc, #92]	@ (800d940 <mg_close_conn+0xc0>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	2b02      	cmp	r3, #2
 800d8e6:	dd0e      	ble.n	800d906 <mg_close_conn+0x86>
 800d8e8:	4b16      	ldr	r3, [pc, #88]	@ (800d944 <mg_close_conn+0xc4>)
 800d8ea:	f241 2290 	movw	r2, #4752	@ 0x1290
 800d8ee:	4916      	ldr	r1, [pc, #88]	@ (800d948 <mg_close_conn+0xc8>)
 800d8f0:	2003      	movs	r0, #3
 800d8f2:	f7fe fb7f 	bl	800bff4 <mg_log_prefix>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8fe:	461a      	mov	r2, r3
 800d900:	4812      	ldr	r0, [pc, #72]	@ (800d94c <mg_close_conn+0xcc>)
 800d902:	f7fe fbc7 	bl	800c094 <mg_log>
  MG_PROF_DUMP(c);
  MG_PROF_FREE(c);

  mg_tls_free(c);
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f004 fea2 	bl	8012650 <mg_tls_free>
  mg_iobuf_free(&c->recv);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	3338      	adds	r3, #56	@ 0x38
 800d910:	4618      	mov	r0, r3
 800d912:	f7fd fca0 	bl	800b256 <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	3348      	adds	r3, #72	@ 0x48
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7fd fc9b 	bl	800b256 <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	3368      	adds	r3, #104	@ 0x68
 800d924:	4618      	mov	r0, r3
 800d926:	f7fd fc96 	bl	800b256 <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 800d92a:	21b0      	movs	r1, #176	@ 0xb0
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f005 f841 	bl	80129b4 <mg_bzero>
  free(c);
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f01c feb6 	bl	802a6a4 <free>
}
 800d938:	bf00      	nop
 800d93a:	3710      	adds	r7, #16
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	20000244 	.word	0x20000244
 800d944:	080326bc 	.word	0x080326bc
 800d948:	0802efcc 	.word	0x0802efcc
 800d94c:	0802fd8c 	.word	0x0802fd8c

0800d950 <mg_connect>:

struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,
                                 mg_event_handler_t fn, void *fn_data) {
 800d950:	b580      	push	{r7, lr}
 800d952:	b086      	sub	sp, #24
 800d954:	af00      	add	r7, sp, #0
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	607a      	str	r2, [r7, #4]
 800d95c:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 800d95e:	2300      	movs	r3, #0
 800d960:	617b      	str	r3, [r7, #20]
  if (url == NULL || url[0] == '\0') {
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d003      	beq.n	800d970 <mg_connect+0x20>
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d10e      	bne.n	800d98e <mg_connect+0x3e>
    MG_ERROR(("null url"));
 800d970:	4b37      	ldr	r3, [pc, #220]	@ (800da50 <mg_connect+0x100>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	dd66      	ble.n	800da46 <mg_connect+0xf6>
 800d978:	4b36      	ldr	r3, [pc, #216]	@ (800da54 <mg_connect+0x104>)
 800d97a:	f44f 5295 	mov.w	r2, #4768	@ 0x12a0
 800d97e:	4936      	ldr	r1, [pc, #216]	@ (800da58 <mg_connect+0x108>)
 800d980:	2001      	movs	r0, #1
 800d982:	f7fe fb37 	bl	800bff4 <mg_log_prefix>
 800d986:	4835      	ldr	r0, [pc, #212]	@ (800da5c <mg_connect+0x10c>)
 800d988:	f7fe fb84 	bl	800c094 <mg_log>
 800d98c:	e05b      	b.n	800da46 <mg_connect+0xf6>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 800d98e:	68f8      	ldr	r0, [r7, #12]
 800d990:	f7ff ff48 	bl	800d824 <mg_alloc_conn>
 800d994:	6178      	str	r0, [r7, #20]
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d10e      	bne.n	800d9ba <mg_connect+0x6a>
    MG_ERROR(("OOM"));
 800d99c:	4b2c      	ldr	r3, [pc, #176]	@ (800da50 <mg_connect+0x100>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	dd50      	ble.n	800da46 <mg_connect+0xf6>
 800d9a4:	4b2b      	ldr	r3, [pc, #172]	@ (800da54 <mg_connect+0x104>)
 800d9a6:	f241 22a2 	movw	r2, #4770	@ 0x12a2
 800d9aa:	492b      	ldr	r1, [pc, #172]	@ (800da58 <mg_connect+0x108>)
 800d9ac:	2001      	movs	r0, #1
 800d9ae:	f7fe fb21 	bl	800bff4 <mg_log_prefix>
 800d9b2:	482b      	ldr	r0, [pc, #172]	@ (800da60 <mg_connect+0x110>)
 800d9b4:	f7fe fb6e 	bl	800c094 <mg_log>
 800d9b8:	e045      	b.n	800da46 <mg_connect+0xf6>
  } else {
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681a      	ldr	r2, [r3, #0]
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	601a      	str	r2, [r3, #0]
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	697a      	ldr	r2, [r7, #20]
 800d9c6:	601a      	str	r2, [r3, #0]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 800d9c8:	2204      	movs	r2, #4
 800d9ca:	4926      	ldr	r1, [pc, #152]	@ (800da64 <mg_connect+0x114>)
 800d9cc:	68b8      	ldr	r0, [r7, #8]
 800d9ce:	f01e f8b2 	bl	802bb36 <strncmp>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	bf0c      	ite	eq
 800d9d8:	2301      	moveq	r3, #1
 800d9da:	2300      	movne	r3, #0
 800d9dc:	b2d9      	uxtb	r1, r3
 800d9de:	697a      	ldr	r2, [r7, #20]
 800d9e0:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800d9e4:	f361 0300 	bfi	r3, r1, #0, #1
 800d9e8:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d9f2:	631a      	str	r2, [r3, #48]	@ 0x30
    c->fn = fn;
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	679a      	str	r2, [r3, #120]	@ 0x78
    c->is_client = true;
 800d9fa:	697a      	ldr	r2, [r7, #20]
 800d9fc:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800da00:	f043 0302 	orr.w	r3, r3, #2
 800da04:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->fn_data = fn_data;
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	683a      	ldr	r2, [r7, #0]
 800da0c:	67da      	str	r2, [r3, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 800da0e:	4b10      	ldr	r3, [pc, #64]	@ (800da50 <mg_connect+0x100>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	2b02      	cmp	r3, #2
 800da14:	dd0e      	ble.n	800da34 <mg_connect+0xe4>
 800da16:	4b0f      	ldr	r3, [pc, #60]	@ (800da54 <mg_connect+0x104>)
 800da18:	f241 22aa 	movw	r2, #4778	@ 0x12aa
 800da1c:	490e      	ldr	r1, [pc, #56]	@ (800da58 <mg_connect+0x108>)
 800da1e:	2003      	movs	r0, #3
 800da20:	f7fe fae8 	bl	800bff4 <mg_log_prefix>
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	480e      	ldr	r0, [pc, #56]	@ (800da68 <mg_connect+0x118>)
 800da30:	f7fe fb30 	bl	800c094 <mg_log>
    mg_call(c, MG_EV_OPEN, (void *) url);
 800da34:	68ba      	ldr	r2, [r7, #8]
 800da36:	2101      	movs	r1, #1
 800da38:	6978      	ldr	r0, [r7, #20]
 800da3a:	f7f9 f8e7 	bl	8006c0c <mg_call>
    mg_resolve(c, url);
 800da3e:	68b9      	ldr	r1, [r7, #8]
 800da40:	6978      	ldr	r0, [r7, #20]
 800da42:	f7f9 f89f 	bl	8006b84 <mg_resolve>
  }
  return c;
 800da46:	697b      	ldr	r3, [r7, #20]
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3718      	adds	r7, #24
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}
 800da50:	20000244 	.word	0x20000244
 800da54:	080326cc 	.word	0x080326cc
 800da58:	0802efcc 	.word	0x0802efcc
 800da5c:	0802fd9c 	.word	0x0802fd9c
 800da60:	0802fda8 	.word	0x0802fda8
 800da64:	0802fdac 	.word	0x0802fdac
 800da68:	0802f110 	.word	0x0802f110

0800da6c <mg_listen>:

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b086      	sub	sp, #24
 800da70:	af00      	add	r7, sp, #0
 800da72:	60f8      	str	r0, [r7, #12]
 800da74:	60b9      	str	r1, [r7, #8]
 800da76:	607a      	str	r2, [r7, #4]
 800da78:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 800da7a:	2300      	movs	r3, #0
 800da7c:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	f7ff fed0 	bl	800d824 <mg_alloc_conn>
 800da84:	6178      	str	r0, [r7, #20]
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d10f      	bne.n	800daac <mg_listen+0x40>
    MG_ERROR(("OOM %s", url));
 800da8c:	4b41      	ldr	r3, [pc, #260]	@ (800db94 <mg_listen+0x128>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	2b00      	cmp	r3, #0
 800da92:	dd7a      	ble.n	800db8a <mg_listen+0x11e>
 800da94:	4b40      	ldr	r3, [pc, #256]	@ (800db98 <mg_listen+0x12c>)
 800da96:	f241 22b5 	movw	r2, #4789	@ 0x12b5
 800da9a:	4940      	ldr	r1, [pc, #256]	@ (800db9c <mg_listen+0x130>)
 800da9c:	2001      	movs	r0, #1
 800da9e:	f7fe faa9 	bl	800bff4 <mg_log_prefix>
 800daa2:	68b9      	ldr	r1, [r7, #8]
 800daa4:	483e      	ldr	r0, [pc, #248]	@ (800dba0 <mg_listen+0x134>)
 800daa6:	f7fe faf5 	bl	800c094 <mg_log>
 800daaa:	e06e      	b.n	800db8a <mg_listen+0x11e>
  } else if (!mg_open_listener(c, url)) {
 800daac:	68b9      	ldr	r1, [r7, #8]
 800daae:	6978      	ldr	r0, [r7, #20]
 800dab0:	f003 f814 	bl	8010adc <mg_open_listener>
 800dab4:	4603      	mov	r3, r0
 800dab6:	f083 0301 	eor.w	r3, r3, #1
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d019      	beq.n	800daf4 <mg_listen+0x88>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 800dac0:	4b34      	ldr	r3, [pc, #208]	@ (800db94 <mg_listen+0x128>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	dd0f      	ble.n	800dae8 <mg_listen+0x7c>
 800dac8:	4b33      	ldr	r3, [pc, #204]	@ (800db98 <mg_listen+0x12c>)
 800daca:	f241 22b7 	movw	r2, #4791	@ 0x12b7
 800dace:	4933      	ldr	r1, [pc, #204]	@ (800db9c <mg_listen+0x130>)
 800dad0:	2001      	movs	r0, #1
 800dad2:	f7fe fa8f 	bl	800bff4 <mg_log_prefix>
 800dad6:	f01e fd17 	bl	802c508 <__errno>
 800dada:	4603      	mov	r3, r0
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	461a      	mov	r2, r3
 800dae0:	68b9      	ldr	r1, [r7, #8]
 800dae2:	4830      	ldr	r0, [pc, #192]	@ (800dba4 <mg_listen+0x138>)
 800dae4:	f7fe fad6 	bl	800c094 <mg_log>
    MG_PROF_FREE(c);
    free(c);
 800dae8:	6978      	ldr	r0, [r7, #20]
 800daea:	f01c fddb 	bl	802a6a4 <free>
    c = NULL;
 800daee:	2300      	movs	r3, #0
 800daf0:	617b      	str	r3, [r7, #20]
 800daf2:	e04a      	b.n	800db8a <mg_listen+0x11e>
  } else {
    c->is_listening = 1;
 800daf4:	697a      	ldr	r2, [r7, #20]
 800daf6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800dafa:	f043 0301 	orr.w	r3, r3, #1
 800dafe:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 800db02:	2204      	movs	r2, #4
 800db04:	4928      	ldr	r1, [pc, #160]	@ (800dba8 <mg_listen+0x13c>)
 800db06:	68b8      	ldr	r0, [r7, #8]
 800db08:	f01e f815 	bl	802bb36 <strncmp>
 800db0c:	4603      	mov	r3, r0
 800db0e:	2b00      	cmp	r3, #0
 800db10:	bf0c      	ite	eq
 800db12:	2301      	moveq	r3, #1
 800db14:	2300      	movne	r3, #0
 800db16:	b2d9      	uxtb	r1, r3
 800db18:	697a      	ldr	r2, [r7, #20]
 800db1a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800db1e:	f361 0300 	bfi	r3, r1, #0, #1
 800db22:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681a      	ldr	r2, [r3, #0]
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	601a      	str	r2, [r3, #0]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	697a      	ldr	r2, [r7, #20]
 800db32:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	687a      	ldr	r2, [r7, #4]
 800db38:	679a      	str	r2, [r3, #120]	@ 0x78
    c->fn_data = fn_data;
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	683a      	ldr	r2, [r7, #0]
 800db3e:	67da      	str	r2, [r3, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 800db40:	2200      	movs	r2, #0
 800db42:	2101      	movs	r1, #1
 800db44:	6978      	ldr	r0, [r7, #20]
 800db46:	f7f9 f861 	bl	8006c0c <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 800db4a:	68b8      	ldr	r0, [r7, #8]
 800db4c:	f004 fdd2 	bl	80126f4 <mg_url_is_ssl>
 800db50:	4603      	mov	r3, r0
 800db52:	2b00      	cmp	r3, #0
 800db54:	d006      	beq.n	800db64 <mg_listen+0xf8>
 800db56:	697a      	ldr	r2, [r7, #20]
 800db58:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800db5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db60:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 800db64:	4b0b      	ldr	r3, [pc, #44]	@ (800db94 <mg_listen+0x128>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2b02      	cmp	r3, #2
 800db6a:	dd0e      	ble.n	800db8a <mg_listen+0x11e>
 800db6c:	4b0a      	ldr	r3, [pc, #40]	@ (800db98 <mg_listen+0x12c>)
 800db6e:	f241 22c3 	movw	r2, #4803	@ 0x12c3
 800db72:	490a      	ldr	r1, [pc, #40]	@ (800db9c <mg_listen+0x130>)
 800db74:	2003      	movs	r0, #3
 800db76:	f7fe fa3d 	bl	800bff4 <mg_log_prefix>
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	4809      	ldr	r0, [pc, #36]	@ (800dbac <mg_listen+0x140>)
 800db86:	f7fe fa85 	bl	800c094 <mg_log>
  }
  return c;
 800db8a:	697b      	ldr	r3, [r7, #20]
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3718      	adds	r7, #24
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}
 800db94:	20000244 	.word	0x20000244
 800db98:	080326d8 	.word	0x080326d8
 800db9c:	0802efcc 	.word	0x0802efcc
 800dba0:	0802fdb4 	.word	0x0802fdb4
 800dba4:	0802fdbc 	.word	0x0802fdbc
 800dba8:	0802fdac 	.word	0x0802fdac
 800dbac:	0802f110 	.word	0x0802f110

0800dbb0 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b08a      	sub	sp, #40	@ 0x28
 800dbb4:	af04      	add	r7, sp, #16
 800dbb6:	60f8      	str	r0, [r7, #12]
 800dbb8:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 800dbbc:	2128      	movs	r1, #40	@ 0x28
 800dbbe:	2001      	movs	r0, #1
 800dbc0:	f01c fd4c 	bl	802a65c <calloc>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	617b      	str	r3, [r7, #20]
  if (t != NULL) {
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d014      	beq.n	800dbf8 <mg_timer_add+0x48>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800dbd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbd6:	9302      	str	r3, [sp, #8]
 800dbd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbda:	9301      	str	r3, [sp, #4]
 800dbdc:	6a3b      	ldr	r3, [r7, #32]
 800dbde:	9300      	str	r3, [sp, #0]
 800dbe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbe4:	6979      	ldr	r1, [r7, #20]
 800dbe6:	f004 fc22 	bl	801242e <mg_timer_init>
    t->id = mgr->timerid++;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	6a1b      	ldr	r3, [r3, #32]
 800dbee:	1c59      	adds	r1, r3, #1
 800dbf0:	68fa      	ldr	r2, [r7, #12]
 800dbf2:	6211      	str	r1, [r2, #32]
 800dbf4:	697a      	ldr	r2, [r7, #20]
 800dbf6:	6013      	str	r3, [r2, #0]
  }
  return t;
 800dbf8:	697b      	ldr	r3, [r7, #20]
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3718      	adds	r7, #24
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
	...

0800dc04 <mg_mgr_init>:
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
  mg_tls_ctx_free(mgr);
}

void mg_mgr_init(struct mg_mgr *mgr) {
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 800dc0c:	2248      	movs	r2, #72	@ 0x48
 800dc0e:	2100      	movs	r1, #0
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f01d ff7b 	bl	802bb0c <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
    MG_ERROR(("epoll_create1 errno %d", errno));
#else
  mgr->epoll_fd = -1;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dc1c:	639a      	str	r2, [r3, #56]	@ 0x38
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#elif MG_ENABLE_TCPIP_DRIVER_INIT && defined(MG_TCPIP_DRIVER_INIT)
  MG_TCPIP_DRIVER_INIT(mgr);
 800dc1e:	4b23      	ldr	r3, [pc, #140]	@ (800dcac <mg_mgr_init+0xa8>)
 800dc20:	2204      	movs	r2, #4
 800dc22:	601a      	str	r2, [r3, #0]
 800dc24:	4b21      	ldr	r3, [pc, #132]	@ (800dcac <mg_mgr_init+0xa8>)
 800dc26:	2200      	movs	r2, #0
 800dc28:	711a      	strb	r2, [r3, #4]
 800dc2a:	2000      	movs	r0, #0
 800dc2c:	f004 fedb 	bl	80129e6 <mg_ntohl>
 800dc30:	4603      	mov	r3, r0
 800dc32:	4a1f      	ldr	r2, [pc, #124]	@ (800dcb0 <mg_mgr_init+0xac>)
 800dc34:	6093      	str	r3, [r2, #8]
 800dc36:	2000      	movs	r0, #0
 800dc38:	f004 fed5 	bl	80129e6 <mg_ntohl>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	4a1c      	ldr	r2, [pc, #112]	@ (800dcb0 <mg_mgr_init+0xac>)
 800dc40:	60d3      	str	r3, [r2, #12]
 800dc42:	2000      	movs	r0, #0
 800dc44:	f004 fecf 	bl	80129e6 <mg_ntohl>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	4a19      	ldr	r2, [pc, #100]	@ (800dcb0 <mg_mgr_init+0xac>)
 800dc4c:	6113      	str	r3, [r2, #16]
 800dc4e:	4b18      	ldr	r3, [pc, #96]	@ (800dcb0 <mg_mgr_init+0xac>)
 800dc50:	4a18      	ldr	r2, [pc, #96]	@ (800dcb4 <mg_mgr_init+0xb0>)
 800dc52:	625a      	str	r2, [r3, #36]	@ 0x24
 800dc54:	4b16      	ldr	r3, [pc, #88]	@ (800dcb0 <mg_mgr_init+0xac>)
 800dc56:	4a15      	ldr	r2, [pc, #84]	@ (800dcac <mg_mgr_init+0xa8>)
 800dc58:	629a      	str	r2, [r3, #40]	@ 0x28
 800dc5a:	4915      	ldr	r1, [pc, #84]	@ (800dcb0 <mg_mgr_init+0xac>)
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f002 fd1b 	bl	8010698 <mg_tcpip_init>
 800dc62:	4b15      	ldr	r3, [pc, #84]	@ (800dcb8 <mg_mgr_init+0xb4>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	dd0b      	ble.n	800dc82 <mg_mgr_init+0x7e>
 800dc6a:	4b14      	ldr	r3, [pc, #80]	@ (800dcbc <mg_mgr_init+0xb8>)
 800dc6c:	f241 320c 	movw	r2, #4876	@ 0x130c
 800dc70:	4913      	ldr	r1, [pc, #76]	@ (800dcc0 <mg_mgr_init+0xbc>)
 800dc72:	2002      	movs	r0, #2
 800dc74:	f7fe f9be 	bl	800bff4 <mg_log_prefix>
 800dc78:	4a0d      	ldr	r2, [pc, #52]	@ (800dcb0 <mg_mgr_init+0xac>)
 800dc7a:	4912      	ldr	r1, [pc, #72]	@ (800dcc4 <mg_mgr_init+0xc0>)
 800dc7c:	4812      	ldr	r0, [pc, #72]	@ (800dcc8 <mg_mgr_init+0xc4>)
 800dc7e:	f7fe fa09 	bl	800c094 <mg_log>
#endif
  mgr->pipe = MG_INVALID_SOCKET;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dc88:	645a      	str	r2, [r3, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800dc90:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	4a0d      	ldr	r2, [pc, #52]	@ (800dccc <mg_mgr_init+0xc8>)
 800dc96:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	4a0d      	ldr	r2, [pc, #52]	@ (800dcd0 <mg_mgr_init+0xcc>)
 800dc9c:	60da      	str	r2, [r3, #12]
  mg_tls_ctx_init(mgr);
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f004 fd1d 	bl	80126de <mg_tls_ctx_init>
}
 800dca4:	bf00      	nop
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}
 800dcac:	20014bac 	.word	0x20014bac
 800dcb0:	20014bb8 	.word	0x20014bb8
 800dcb4:	2000024c 	.word	0x2000024c
 800dcb8:	20000244 	.word	0x20000244
 800dcbc:	080326e4 	.word	0x080326e4
 800dcc0:	0802efcc 	.word	0x0802efcc
 800dcc4:	08011309 	.word	0x08011309
 800dcc8:	0802fdec 	.word	0x0802fdec
 800dccc:	0802fe04 	.word	0x0802fe04
 800dcd0:	0802fe18 	.word	0x0802fe18

0800dcd4 <mkpay>:
  struct dhcp *dhcp;
};

static void send_syn(struct mg_connection *c);

static void mkpay(struct pkt *pkt, void *p) {
 800dcd4:	b590      	push	{r4, r7, lr}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	681a      	ldr	r2, [r3, #0]
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	441a      	add	r2, r3
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	1ad3      	subs	r3, r2, r3
 800dcec:	461a      	mov	r2, r3
 800dcee:	68fc      	ldr	r4, [r7, #12]
 800dcf0:	463b      	mov	r3, r7
 800dcf2:	68b9      	ldr	r1, [r7, #8]
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f004 f800 	bl	8011cfa <mg_str_n>
 800dcfa:	f104 0308 	add.w	r3, r4, #8
 800dcfe:	463a      	mov	r2, r7
 800dd00:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dd04:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800dd08:	bf00      	nop
 800dd0a:	3714      	adds	r7, #20
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd90      	pop	{r4, r7, pc}

0800dd10 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 800dd10:	b480      	push	{r7}
 800dd12:	b087      	sub	sp, #28
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	60f8      	str	r0, [r7, #12]
 800dd18:	60b9      	str	r1, [r7, #8]
 800dd1a:	607a      	str	r2, [r7, #4]
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	613b      	str	r3, [r7, #16]
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 800dd20:	2300      	movs	r3, #0
 800dd22:	617b      	str	r3, [r7, #20]
 800dd24:	e014      	b.n	800dd50 <csumup+0x40>
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	f003 0301 	and.w	r3, r3, #1
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d004      	beq.n	800dd3a <csumup+0x2a>
 800dd30:	693a      	ldr	r2, [r7, #16]
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	4413      	add	r3, r2
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	e004      	b.n	800dd44 <csumup+0x34>
 800dd3a:	693a      	ldr	r2, [r7, #16]
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	4413      	add	r3, r2
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	021b      	lsls	r3, r3, #8
 800dd44:	68fa      	ldr	r2, [r7, #12]
 800dd46:	4413      	add	r3, r2
 800dd48:	60fb      	str	r3, [r7, #12]
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	617b      	str	r3, [r7, #20]
 800dd50:	697a      	ldr	r2, [r7, #20]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d3e6      	bcc.n	800dd26 <csumup+0x16>
  return sum;
 800dd58:	68fb      	ldr	r3, [r7, #12]
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	371c      	adds	r7, #28
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd64:	4770      	bx	lr

0800dd66 <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 800dd66:	b580      	push	{r7, lr}
 800dd68:	b082      	sub	sp, #8
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 800dd6e:	e005      	b.n	800dd7c <csumfin+0x16>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	b29a      	uxth	r2, r3
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	0c1b      	lsrs	r3, r3, #16
 800dd78:	4413      	add	r3, r2
 800dd7a:	607b      	str	r3, [r7, #4]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	0c1b      	lsrs	r3, r3, #16
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d1f5      	bne.n	800dd70 <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	43db      	mvns	r3, r3
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f004 fe43 	bl	8012a18 <mg_ntohs>
 800dd92:	4603      	mov	r3, r0
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3708      	adds	r7, #8
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b084      	sub	sp, #16
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 800dda6:	683a      	ldr	r2, [r7, #0]
 800dda8:	6879      	ldr	r1, [r7, #4]
 800ddaa:	2000      	movs	r0, #0
 800ddac:	f7ff ffb0 	bl	800dd10 <csumup>
 800ddb0:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 800ddb2:	68f8      	ldr	r0, [r7, #12]
 800ddb4:	f7ff ffd7 	bl	800dd66 <csumfin>
 800ddb8:	4603      	mov	r3, r0
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3710      	adds	r7, #16
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
	...

0800ddc4 <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 800ddc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ddc8:	b088      	sub	sp, #32
 800ddca:	af02      	add	r7, sp, #8
 800ddcc:	6078      	str	r0, [r7, #4]
 800ddce:	460b      	mov	r3, r1
 800ddd0:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddd8:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	33b0      	adds	r3, #176	@ 0xb0
 800ddde:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 800dde0:	78fb      	ldrb	r3, [r7, #3]
 800dde2:	2b01      	cmp	r3, #1
 800dde4:	d013      	beq.n	800de0e <settmout+0x4a>
 800dde6:	78fb      	ldrb	r3, [r7, #3]
 800dde8:	2b02      	cmp	r3, #2
 800ddea:	d00e      	beq.n	800de0a <settmout+0x46>
 800ddec:	78fb      	ldrb	r3, [r7, #3]
 800ddee:	2b03      	cmp	r3, #3
 800ddf0:	d008      	beq.n	800de04 <settmout+0x40>
 800ddf2:	78fb      	ldrb	r3, [r7, #3]
 800ddf4:	2b04      	cmp	r3, #4
 800ddf6:	d102      	bne.n	800ddfe <settmout+0x3a>
 800ddf8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ddfc:	e008      	b.n	800de10 <settmout+0x4c>
 800ddfe:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 800de02:	e005      	b.n	800de10 <settmout+0x4c>
 800de04:	f643 2398 	movw	r3, #15000	@ 0x3a98
 800de08:	e002      	b.n	800de10 <settmout+0x4c>
 800de0a:	2364      	movs	r3, #100	@ 0x64
 800de0c:	e000      	b.n	800de10 <settmout+0x4c>
 800de0e:	2396      	movs	r3, #150	@ 0x96
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 800de10:	60fb      	str	r3, [r7, #12]
               : type == MIP_TTYPE_SYN ? MIP_TCP_SYN_MS
               : type == MIP_TTYPE_FIN ? MIP_TCP_FIN_MS
                                       : MIP_TCP_KEEPALIVE_MS;
  s->timer = ifp->now + n;
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800de18:	68f9      	ldr	r1, [r7, #12]
 800de1a:	2000      	movs	r0, #0
 800de1c:	460c      	mov	r4, r1
 800de1e:	4605      	mov	r5, r0
 800de20:	eb12 0804 	adds.w	r8, r2, r4
 800de24:	eb43 0905 	adc.w	r9, r3, r5
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	78fa      	ldrb	r2, [r7, #3]
 800de32:	779a      	strb	r2, [r3, #30]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 800de34:	4b0d      	ldr	r3, [pc, #52]	@ (800de6c <settmout+0xa8>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	2b03      	cmp	r3, #3
 800de3a:	dd12      	ble.n	800de62 <settmout+0x9e>
 800de3c:	4b0c      	ldr	r3, [pc, #48]	@ (800de70 <settmout+0xac>)
 800de3e:	f241 32c6 	movw	r2, #5062	@ 0x13c6
 800de42:	490c      	ldr	r1, [pc, #48]	@ (800de74 <settmout+0xb0>)
 800de44:	2004      	movs	r0, #4
 800de46:	f7fe f8d5 	bl	800bff4 <mg_log_prefix>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800de4e:	78f8      	ldrb	r0, [r7, #3]
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800de56:	e9cd 2300 	strd	r2, r3, [sp]
 800de5a:	4602      	mov	r2, r0
 800de5c:	4806      	ldr	r0, [pc, #24]	@ (800de78 <settmout+0xb4>)
 800de5e:	f7fe f919 	bl	800c094 <mg_log>
}
 800de62:	bf00      	nop
 800de64:	3718      	adds	r7, #24
 800de66:	46bd      	mov	sp, r7
 800de68:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800de6c:	20000244 	.word	0x20000244
 800de70:	080326f0 	.word	0x080326f0
 800de74:	0802efcc 	.word	0x0802efcc
 800de78:	0802fe38 	.word	0x0802fe38

0800de7c <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b084      	sub	sp, #16
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
 800de84:	6039      	str	r1, [r7, #0]
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	687a      	ldr	r2, [r7, #4]
 800de8e:	6950      	ldr	r0, [r2, #20]
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	6839      	ldr	r1, [r7, #0]
 800de94:	4798      	blx	r3
 800de96:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 800de98:	68fa      	ldr	r2, [r7, #12]
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d104      	bne.n	800deaa <ether_output+0x2e>
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dea4:	1c5a      	adds	r2, r3, #1
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	66da      	str	r2, [r3, #108]	@ 0x6c
  return n;
 800deaa:	68fb      	ldr	r3, [r7, #12]
}
 800deac:	4618      	mov	r0, r3
 800deae:	3710      	adds	r7, #16
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <arp_ask>:

static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b084      	sub	sp, #16
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	6039      	str	r1, [r7, #0]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	695b      	ldr	r3, [r3, #20]
 800dec2:	60fb      	str	r3, [r7, #12]
  struct arp *arp = (struct arp *) (eth + 1);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	330e      	adds	r3, #14
 800dec8:	60bb      	str	r3, [r7, #8]
  memset(eth->dst, 255, sizeof(eth->dst));
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2206      	movs	r2, #6
 800dece:	21ff      	movs	r1, #255	@ 0xff
 800ded0:	4618      	mov	r0, r3
 800ded2:	f01d fe1b 	bl	802bb0c <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	3306      	adds	r3, #6
 800deda:	6879      	ldr	r1, [r7, #4]
 800dedc:	2206      	movs	r2, #6
 800dede:	4618      	mov	r0, r3
 800dee0:	f01e fb49 	bl	802c576 <memcpy>
  eth->type = mg_htons(0x806);
 800dee4:	f640 0006 	movw	r0, #2054	@ 0x806
 800dee8:	f004 fd96 	bl	8012a18 <mg_ntohs>
 800deec:	4603      	mov	r3, r0
 800deee:	461a      	mov	r2, r3
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 800def4:	221c      	movs	r2, #28
 800def6:	2100      	movs	r1, #0
 800def8:	68b8      	ldr	r0, [r7, #8]
 800defa:	f01d fe07 	bl	802bb0c <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 800defe:	2001      	movs	r0, #1
 800df00:	f004 fd8a 	bl	8012a18 <mg_ntohs>
 800df04:	4603      	mov	r3, r0
 800df06:	461a      	mov	r2, r3
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	801a      	strh	r2, [r3, #0]
 800df0c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800df10:	f004 fd82 	bl	8012a18 <mg_ntohs>
 800df14:	4603      	mov	r3, r0
 800df16:	461a      	mov	r2, r3
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	805a      	strh	r2, [r3, #2]
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	2206      	movs	r2, #6
 800df20:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	2204      	movs	r2, #4
 800df26:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 800df28:	2001      	movs	r0, #1
 800df2a:	f004 fd75 	bl	8012a18 <mg_ntohs>
 800df2e:	4603      	mov	r3, r0
 800df30:	461a      	mov	r2, r3
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	80da      	strh	r2, [r3, #6]
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	683a      	ldr	r2, [r7, #0]
 800df3a:	619a      	str	r2, [r3, #24]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	689a      	ldr	r2, [r3, #8]
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	3308      	adds	r3, #8
 800df4a:	6879      	ldr	r1, [r7, #4]
 800df4c:	2206      	movs	r2, #6
 800df4e:	4618      	mov	r0, r3
 800df50:	f01e fb11 	bl	802c576 <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	f103 021c 	add.w	r2, r3, #28
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	1ad3      	subs	r3, r2, r3
 800df5e:	4619      	mov	r1, r3
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f7ff ff8b 	bl	800de7c <ether_output>
}
 800df66:	bf00      	nop
 800df68:	3710      	adds	r7, #16
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}
	...

0800df70 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 800df70:	b580      	push	{r7, lr}
 800df72:	b082      	sub	sp, #8
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800df7e:	2b03      	cmp	r3, #3
 800df80:	d13b      	bne.n	800dffa <onstatechange+0x8a>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 800df82:	4b37      	ldr	r3, [pc, #220]	@ (800e060 <onstatechange+0xf0>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	2b01      	cmp	r3, #1
 800df88:	dd0d      	ble.n	800dfa6 <onstatechange+0x36>
 800df8a:	4b36      	ldr	r3, [pc, #216]	@ (800e064 <onstatechange+0xf4>)
 800df8c:	f241 32df 	movw	r2, #5087	@ 0x13df
 800df90:	4935      	ldr	r1, [pc, #212]	@ (800e068 <onstatechange+0xf8>)
 800df92:	2002      	movs	r0, #2
 800df94:	f7fe f82e 	bl	800bff4 <mg_log_prefix>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	3308      	adds	r3, #8
 800df9c:	461a      	mov	r2, r3
 800df9e:	4933      	ldr	r1, [pc, #204]	@ (800e06c <onstatechange+0xfc>)
 800dfa0:	4833      	ldr	r0, [pc, #204]	@ (800e070 <onstatechange+0x100>)
 800dfa2:	f7fe f877 	bl	800c094 <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 800dfa6:	4b2e      	ldr	r3, [pc, #184]	@ (800e060 <onstatechange+0xf0>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	2b01      	cmp	r3, #1
 800dfac:	dd0d      	ble.n	800dfca <onstatechange+0x5a>
 800dfae:	4b2d      	ldr	r3, [pc, #180]	@ (800e064 <onstatechange+0xf4>)
 800dfb0:	f44f 529f 	mov.w	r2, #5088	@ 0x13e0
 800dfb4:	492c      	ldr	r1, [pc, #176]	@ (800e068 <onstatechange+0xf8>)
 800dfb6:	2002      	movs	r0, #2
 800dfb8:	f7fe f81c 	bl	800bff4 <mg_log_prefix>
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	3310      	adds	r3, #16
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	492a      	ldr	r1, [pc, #168]	@ (800e06c <onstatechange+0xfc>)
 800dfc4:	482b      	ldr	r0, [pc, #172]	@ (800e074 <onstatechange+0x104>)
 800dfc6:	f7fe f865 	bl	800c094 <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 800dfca:	4b25      	ldr	r3, [pc, #148]	@ (800e060 <onstatechange+0xf0>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	dd0c      	ble.n	800dfec <onstatechange+0x7c>
 800dfd2:	4b24      	ldr	r3, [pc, #144]	@ (800e064 <onstatechange+0xf4>)
 800dfd4:	f241 32e1 	movw	r2, #5089	@ 0x13e1
 800dfd8:	4923      	ldr	r1, [pc, #140]	@ (800e068 <onstatechange+0xf8>)
 800dfda:	2002      	movs	r0, #2
 800dfdc:	f7fe f80a 	bl	800bff4 <mg_log_prefix>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	4924      	ldr	r1, [pc, #144]	@ (800e078 <onstatechange+0x108>)
 800dfe6:	4825      	ldr	r0, [pc, #148]	@ (800e07c <onstatechange+0x10c>)
 800dfe8:	f7fe f854 	bl	800c094 <mg_log>
    arp_ask(ifp, ifp->gw);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	691b      	ldr	r3, [r3, #16]
 800dff0:	4619      	mov	r1, r3
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f7ff ff5e 	bl	800deb4 <arp_ask>
    MG_ERROR(("Link up"));
    srand((unsigned int) mg_millis());
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
    MG_ERROR(("Link down"));
  }
}
 800dff8:	e02e      	b.n	800e058 <onstatechange+0xe8>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800e000:	2b01      	cmp	r3, #1
 800e002:	d116      	bne.n	800e032 <onstatechange+0xc2>
    MG_ERROR(("Link up"));
 800e004:	4b16      	ldr	r3, [pc, #88]	@ (800e060 <onstatechange+0xf0>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	dd09      	ble.n	800e020 <onstatechange+0xb0>
 800e00c:	4b15      	ldr	r3, [pc, #84]	@ (800e064 <onstatechange+0xf4>)
 800e00e:	f241 32e4 	movw	r2, #5092	@ 0x13e4
 800e012:	4915      	ldr	r1, [pc, #84]	@ (800e068 <onstatechange+0xf8>)
 800e014:	2001      	movs	r0, #1
 800e016:	f7fd ffed 	bl	800bff4 <mg_log_prefix>
 800e01a:	4819      	ldr	r0, [pc, #100]	@ (800e080 <onstatechange+0x110>)
 800e01c:	f7fe f83a 	bl	800c094 <mg_log>
    srand((unsigned int) mg_millis());
 800e020:	f7f5 fbda 	bl	80037d8 <mg_millis>
 800e024:	4602      	mov	r2, r0
 800e026:	460b      	mov	r3, r1
 800e028:	4613      	mov	r3, r2
 800e02a:	4618      	mov	r0, r3
 800e02c:	f01c fbf0 	bl	802a810 <srand>
}
 800e030:	e012      	b.n	800e058 <onstatechange+0xe8>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d10d      	bne.n	800e058 <onstatechange+0xe8>
    MG_ERROR(("Link down"));
 800e03c:	4b08      	ldr	r3, [pc, #32]	@ (800e060 <onstatechange+0xf0>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	2b00      	cmp	r3, #0
 800e042:	dd09      	ble.n	800e058 <onstatechange+0xe8>
 800e044:	4b07      	ldr	r3, [pc, #28]	@ (800e064 <onstatechange+0xf4>)
 800e046:	f241 32e7 	movw	r2, #5095	@ 0x13e7
 800e04a:	4907      	ldr	r1, [pc, #28]	@ (800e068 <onstatechange+0xf8>)
 800e04c:	2001      	movs	r0, #1
 800e04e:	f7fd ffd1 	bl	800bff4 <mg_log_prefix>
 800e052:	480c      	ldr	r0, [pc, #48]	@ (800e084 <onstatechange+0x114>)
 800e054:	f7fe f81e 	bl	800c094 <mg_log>
}
 800e058:	bf00      	nop
 800e05a:	3708      	adds	r7, #8
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}
 800e060:	20000244 	.word	0x20000244
 800e064:	080326fc 	.word	0x080326fc
 800e068:	0802efcc 	.word	0x0802efcc
 800e06c:	08011245 	.word	0x08011245
 800e070:	0802fe48 	.word	0x0802fe48
 800e074:	0802fe58 	.word	0x0802fe58
 800e078:	08011309 	.word	0x08011309
 800e07c:	0802fe68 	.word	0x0802fe68
 800e080:	0802fe78 	.word	0x0802fe78
 800e084:	0802fe80 	.word	0x0802fe80

0800e088 <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 800e088:	b580      	push	{r7, lr}
 800e08a:	b086      	sub	sp, #24
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	603b      	str	r3, [r7, #0]
 800e094:	4613      	mov	r3, r2
 800e096:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	695b      	ldr	r3, [r3, #20]
 800e09c:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	330e      	adds	r3, #14
 800e0a2:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	2206      	movs	r2, #6
 800e0a8:	68b9      	ldr	r1, [r7, #8]
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f01e fa63 	bl	802c576 <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	3306      	adds	r3, #6
 800e0b4:	68f9      	ldr	r1, [r7, #12]
 800e0b6:	2206      	movs	r2, #6
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f01e fa5c 	bl	802c576 <memcpy>
  eth->type = mg_htons(0x800);
 800e0be:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800e0c2:	f004 fca9 	bl	8012a18 <mg_ntohs>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 800e0ce:	2214      	movs	r2, #20
 800e0d0:	2100      	movs	r1, #0
 800e0d2:	6938      	ldr	r0, [r7, #16]
 800e0d4:	f01d fd1a 	bl	802bb0c <memset>
  ip->ver = 0x45;   // Version 4, header length 5 words
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	2245      	movs	r2, #69	@ 0x45
 800e0dc:	701a      	strb	r2, [r3, #0]
  ip->frag = 0x40;  // Don't fragment
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e0e6:	719a      	strb	r2, [r3, #6]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	71da      	strb	r2, [r3, #7]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 800e0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	3314      	adds	r3, #20
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f004 fc8f 	bl	8012a18 <mg_ntohs>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	461a      	mov	r2, r3
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	2240      	movs	r2, #64	@ 0x40
 800e106:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	79fa      	ldrb	r2, [r7, #7]
 800e10c:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	683a      	ldr	r2, [r7, #0]
 800e112:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	6a3a      	ldr	r2, [r7, #32]
 800e118:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 800e11a:	2114      	movs	r1, #20
 800e11c:	6938      	ldr	r0, [r7, #16]
 800e11e:	f7ff fe3d 	bl	800dd9c <ipcsum>
 800e122:	4603      	mov	r3, r0
 800e124:	461a      	mov	r2, r3
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	815a      	strh	r2, [r3, #10]
  return ip;
 800e12a:	693b      	ldr	r3, [r7, #16]
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3718      	adds	r7, #24
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 800e134:	b580      	push	{r7, lr}
 800e136:	b08a      	sub	sp, #40	@ 0x28
 800e138:	af02      	add	r7, sp, #8
 800e13a:	60f8      	str	r0, [r7, #12]
 800e13c:	60b9      	str	r1, [r7, #8]
 800e13e:	607a      	str	r2, [r7, #4]
 800e140:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 800e142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e144:	3308      	adds	r3, #8
 800e146:	9301      	str	r3, [sp, #4]
 800e148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e14a:	9300      	str	r3, [sp, #0]
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2211      	movs	r2, #17
 800e150:	68b9      	ldr	r1, [r7, #8]
 800e152:	68f8      	ldr	r0, [r7, #12]
 800e154:	f7ff ff98 	bl	800e088 <tx_ip>
 800e158:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 800e15a:	69fb      	ldr	r3, [r7, #28]
 800e15c:	3314      	adds	r3, #20
 800e15e:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 800e160:	69bb      	ldr	r3, [r7, #24]
 800e162:	887a      	ldrh	r2, [r7, #2]
 800e164:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800e16a:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 800e16c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e16e:	b29b      	uxth	r3, r3
 800e170:	3308      	adds	r3, #8
 800e172:	b29b      	uxth	r3, r3
 800e174:	4618      	mov	r0, r3
 800e176:	f004 fc4f 	bl	8012a18 <mg_ntohs>
 800e17a:	4603      	mov	r3, r0
 800e17c:	461a      	mov	r2, r3
 800e17e:	69bb      	ldr	r3, [r7, #24]
 800e180:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 800e182:	69bb      	ldr	r3, [r7, #24]
 800e184:	2200      	movs	r2, #0
 800e186:	719a      	strb	r2, [r3, #6]
 800e188:	2200      	movs	r2, #0
 800e18a:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 800e18c:	2208      	movs	r2, #8
 800e18e:	69b9      	ldr	r1, [r7, #24]
 800e190:	2000      	movs	r0, #0
 800e192:	f7ff fdbd 	bl	800dd10 <csumup>
 800e196:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 800e198:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e19a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e19c:	6978      	ldr	r0, [r7, #20]
 800e19e:	f7ff fdb7 	bl	800dd10 <csumup>
 800e1a2:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800e1a4:	69fb      	ldr	r3, [r7, #28]
 800e1a6:	330c      	adds	r3, #12
 800e1a8:	2204      	movs	r2, #4
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	6978      	ldr	r0, [r7, #20]
 800e1ae:	f7ff fdaf 	bl	800dd10 <csumup>
 800e1b2:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800e1b4:	69fb      	ldr	r3, [r7, #28]
 800e1b6:	3310      	adds	r3, #16
 800e1b8:	2204      	movs	r2, #4
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	6978      	ldr	r0, [r7, #20]
 800e1be:	f7ff fda7 	bl	800dd10 <csumup>
 800e1c2:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 800e1c4:	69fb      	ldr	r3, [r7, #28]
 800e1c6:	7a5b      	ldrb	r3, [r3, #9]
 800e1c8:	461a      	mov	r2, r3
 800e1ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1cc:	441a      	add	r2, r3
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	4413      	add	r3, r2
 800e1d2:	3308      	adds	r3, #8
 800e1d4:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 800e1d6:	6978      	ldr	r0, [r7, #20]
 800e1d8:	f7ff fdc5 	bl	800dd66 <csumfin>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	461a      	mov	r2, r3
 800e1e0:	69bb      	ldr	r3, [r7, #24]
 800e1e2:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 800e1e4:	69bb      	ldr	r3, [r7, #24]
 800e1e6:	3308      	adds	r3, #8
 800e1e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e1ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f01d fc73 	bl	802bad8 <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 800e1f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1f4:	332a      	adds	r3, #42	@ 0x2a
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	68f8      	ldr	r0, [r7, #12]
 800e1fa:	f7ff fe3f 	bl	800de7c <ether_output>
}
 800e1fe:	bf00      	nop
 800e200:	3720      	adds	r7, #32
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
	...

0800e208 <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 800e208:	b5b0      	push	{r4, r5, r7, lr}
 800e20a:	b0cc      	sub	sp, #304	@ 0x130
 800e20c:	af04      	add	r7, sp, #16
 800e20e:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 800e212:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 800e216:	6020      	str	r0, [r4, #0]
 800e218:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 800e21c:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 800e220:	6001      	str	r1, [r0, #0]
 800e222:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800e226:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 800e22a:	600a      	str	r2, [r1, #0]
 800e22c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800e230:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800e234:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800e236:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e23a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800e23e:	4a38      	ldr	r2, [pc, #224]	@ (800e320 <tx_dhcp+0x118>)
 800e240:	4618      	mov	r0, r3
 800e242:	4611      	mov	r1, r2
 800e244:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800e248:	461a      	mov	r2, r3
 800e24a:	f01e f994 	bl	802c576 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 800e24e:	4835      	ldr	r0, [pc, #212]	@ (800e324 <tx_dhcp+0x11c>)
 800e250:	f004 fbc9 	bl	80129e6 <mg_ntohl>
 800e254:	4602      	mov	r2, r0
 800e256:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e25a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800e25e:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 800e262:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e266:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e26a:	6819      	ldr	r1, [r3, #0]
 800e26c:	f107 0310 	add.w	r3, r7, #16
 800e270:	331c      	adds	r3, #28
 800e272:	2206      	movs	r2, #6
 800e274:	4618      	mov	r0, r3
 800e276:	f01e f97e 	bl	802c576 <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 800e27a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e27e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	3302      	adds	r3, #2
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	461a      	mov	r2, r3
 800e28a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e28e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800e292:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 800e294:	f107 0310 	add.w	r3, r7, #16
 800e298:	33f0      	adds	r3, #240	@ 0xf0
 800e29a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800e29e:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f01e f967 	bl	802c576 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 800e2a8:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d009      	beq.n	800e2c4 <tx_dhcp+0xbc>
 800e2b0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e2b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800e2b8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800e2bc:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 800e2c0:	6812      	ldr	r2, [r2, #0]
 800e2c2:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 800e2c4:	2044      	movs	r0, #68	@ 0x44
 800e2c6:	f004 fba7 	bl	8012a18 <mg_ntohs>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	461d      	mov	r5, r3
 800e2ce:	2043      	movs	r0, #67	@ 0x43
 800e2d0:	f004 fba2 	bl	8012a18 <mg_ntohs>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	461c      	mov	r4, r3
 800e2d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e2dc:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 800e2e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e2e4:	f5a3 718c 	sub.w	r1, r3, #280	@ 0x118
 800e2e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e2ec:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 800e2f0:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800e2f4:	9303      	str	r3, [sp, #12]
 800e2f6:	f107 0310 	add.w	r3, r7, #16
 800e2fa:	9302      	str	r3, [sp, #8]
 800e2fc:	9401      	str	r4, [sp, #4]
 800e2fe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e302:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	9300      	str	r3, [sp, #0]
 800e30a:	462b      	mov	r3, r5
 800e30c:	6812      	ldr	r2, [r2, #0]
 800e30e:	6809      	ldr	r1, [r1, #0]
 800e310:	6800      	ldr	r0, [r0, #0]
 800e312:	f7ff ff0f 	bl	800e134 <tx_udp>
         sizeof(dhcp));
}
 800e316:	bf00      	nop
 800e318:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bdb0      	pop	{r4, r5, r7, pc}
 800e320:	0802fe8c 	.word	0x0802fe8c
 800e324:	63825363 	.word	0x63825363

0800e328 <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 800e328:	b5b0      	push	{r4, r5, r7, lr}
 800e32a:	b090      	sub	sp, #64	@ 0x40
 800e32c:	af04      	add	r7, sp, #16
 800e32e:	60f8      	str	r0, [r7, #12]
 800e330:	60b9      	str	r1, [r7, #8]
 800e332:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 800e334:	4b19      	ldr	r3, [pc, #100]	@ (800e39c <tx_dhcp_request_sel+0x74>)
 800e336:	f107 0414 	add.w	r4, r7, #20
 800e33a:	461d      	mov	r5, r3
 800e33c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e33e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e340:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e344:	c403      	stmia	r4!, {r0, r1}
 800e346:	7022      	strb	r2, [r4, #0]
      12, 3, 'm', 'i', 'p',     // Host name: "mip"
      54, 4, 0,   0,   0,   0,  // DHCP server ID
      50, 4, 0,   0,   0,   0,  // Requested IP
      255                       // End of options
  };
  memcpy(opts + 14, &ip_srv, sizeof(ip_srv));
 800e348:	f107 0314 	add.w	r3, r7, #20
 800e34c:	330e      	adds	r3, #14
 800e34e:	687a      	ldr	r2, [r7, #4]
 800e350:	601a      	str	r2, [r3, #0]
  memcpy(opts + 20, &ip_req, sizeof(ip_req));
 800e352:	f107 0314 	add.w	r3, r7, #20
 800e356:	3314      	adds	r3, #20
 800e358:	68ba      	ldr	r2, [r7, #8]
 800e35a:	601a      	str	r2, [r3, #0]
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 800e35c:	2300      	movs	r3, #0
 800e35e:	9302      	str	r3, [sp, #8]
 800e360:	2319      	movs	r3, #25
 800e362:	9301      	str	r3, [sp, #4]
 800e364:	f107 0314 	add.w	r3, r7, #20
 800e368:	9300      	str	r3, [sp, #0]
 800e36a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e36e:	2200      	movs	r2, #0
 800e370:	490b      	ldr	r1, [pc, #44]	@ (800e3a0 <tx_dhcp_request_sel+0x78>)
 800e372:	68f8      	ldr	r0, [r7, #12]
 800e374:	f7ff ff48 	bl	800e208 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800e378:	4b0a      	ldr	r3, [pc, #40]	@ (800e3a4 <tx_dhcp_request_sel+0x7c>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	2b02      	cmp	r3, #2
 800e37e:	dd09      	ble.n	800e394 <tx_dhcp_request_sel+0x6c>
 800e380:	4b09      	ldr	r3, [pc, #36]	@ (800e3a8 <tx_dhcp_request_sel+0x80>)
 800e382:	f241 4233 	movw	r2, #5171	@ 0x1433
 800e386:	4909      	ldr	r1, [pc, #36]	@ (800e3ac <tx_dhcp_request_sel+0x84>)
 800e388:	2003      	movs	r0, #3
 800e38a:	f7fd fe33 	bl	800bff4 <mg_log_prefix>
 800e38e:	4808      	ldr	r0, [pc, #32]	@ (800e3b0 <tx_dhcp_request_sel+0x88>)
 800e390:	f7fd fe80 	bl	800c094 <mg_log>
}
 800e394:	bf00      	nop
 800e396:	3730      	adds	r7, #48	@ 0x30
 800e398:	46bd      	mov	sp, r7
 800e39a:	bdb0      	pop	{r4, r5, r7, pc}
 800e39c:	0802ffac 	.word	0x0802ffac
 800e3a0:	08032644 	.word	0x08032644
 800e3a4:	20000244 	.word	0x20000244
 800e3a8:	0803270c 	.word	0x0803270c
 800e3ac:	0802efcc 	.word	0x0802efcc
 800e3b0:	0802ff9c 	.word	0x0802ff9c

0800e3b4 <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b08a      	sub	sp, #40	@ 0x28
 800e3b8:	af04      	add	r7, sp, #16
 800e3ba:	60f8      	str	r0, [r7, #12]
 800e3bc:	60b9      	str	r1, [r7, #8]
 800e3be:	607a      	str	r2, [r7, #4]
 800e3c0:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 800e3c2:	4b10      	ldr	r3, [pc, #64]	@ (800e404 <tx_dhcp_request_re+0x50>)
 800e3c4:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	9302      	str	r3, [sp, #8]
 800e3ca:	2304      	movs	r3, #4
 800e3cc:	9301      	str	r3, [sp, #4]
 800e3ce:	f107 0314 	add.w	r3, r7, #20
 800e3d2:	9300      	str	r3, [sp, #0]
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	68b9      	ldr	r1, [r7, #8]
 800e3da:	68f8      	ldr	r0, [r7, #12]
 800e3dc:	f7ff ff14 	bl	800e208 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800e3e0:	4b09      	ldr	r3, [pc, #36]	@ (800e408 <tx_dhcp_request_re+0x54>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	2b02      	cmp	r3, #2
 800e3e6:	dd09      	ble.n	800e3fc <tx_dhcp_request_re+0x48>
 800e3e8:	4b08      	ldr	r3, [pc, #32]	@ (800e40c <tx_dhcp_request_re+0x58>)
 800e3ea:	f241 423e 	movw	r2, #5182	@ 0x143e
 800e3ee:	4908      	ldr	r1, [pc, #32]	@ (800e410 <tx_dhcp_request_re+0x5c>)
 800e3f0:	2003      	movs	r0, #3
 800e3f2:	f7fd fdff 	bl	800bff4 <mg_log_prefix>
 800e3f6:	4807      	ldr	r0, [pc, #28]	@ (800e414 <tx_dhcp_request_re+0x60>)
 800e3f8:	f7fd fe4c 	bl	800c094 <mg_log>
}
 800e3fc:	bf00      	nop
 800e3fe:	3718      	adds	r7, #24
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}
 800e404:	ff030135 	.word	0xff030135
 800e408:	20000244 	.word	0x20000244
 800e40c:	08032720 	.word	0x08032720
 800e410:	0802efcc 	.word	0x0802efcc
 800e414:	0802ff9c 	.word	0x0802ff9c

0800e418 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 800e418:	b580      	push	{r7, lr}
 800e41a:	b088      	sub	sp, #32
 800e41c:	af04      	add	r7, sp, #16
 800e41e:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 800e420:	4a14      	ldr	r2, [pc, #80]	@ (800e474 <tx_dhcp_discover+0x5c>)
 800e422:	f107 0308 	add.w	r3, r7, #8
 800e426:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e42a:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 800e42e:	2300      	movs	r3, #0
 800e430:	9302      	str	r3, [sp, #8]
 800e432:	2308      	movs	r3, #8
 800e434:	9301      	str	r3, [sp, #4]
 800e436:	f107 0308 	add.w	r3, r7, #8
 800e43a:	9300      	str	r3, [sp, #0]
 800e43c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e440:	2200      	movs	r2, #0
 800e442:	490d      	ldr	r1, [pc, #52]	@ (800e478 <tx_dhcp_discover+0x60>)
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f7ff fedf 	bl	800e208 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 800e44a:	4b0c      	ldr	r3, [pc, #48]	@ (800e47c <tx_dhcp_discover+0x64>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2b02      	cmp	r3, #2
 800e450:	dd0c      	ble.n	800e46c <tx_dhcp_discover+0x54>
 800e452:	4b0b      	ldr	r3, [pc, #44]	@ (800e480 <tx_dhcp_discover+0x68>)
 800e454:	f241 4248 	movw	r2, #5192	@ 0x1448
 800e458:	490a      	ldr	r1, [pc, #40]	@ (800e484 <tx_dhcp_discover+0x6c>)
 800e45a:	2003      	movs	r0, #3
 800e45c:	f7fd fdca 	bl	800bff4 <mg_log_prefix>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	461a      	mov	r2, r3
 800e464:	4908      	ldr	r1, [pc, #32]	@ (800e488 <tx_dhcp_discover+0x70>)
 800e466:	4809      	ldr	r0, [pc, #36]	@ (800e48c <tx_dhcp_discover+0x74>)
 800e468:	f7fd fe14 	bl	800c094 <mg_log>
}
 800e46c:	bf00      	nop
 800e46e:	3710      	adds	r7, #16
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}
 800e474:	0802ffe8 	.word	0x0802ffe8
 800e478:	08032644 	.word	0x08032644
 800e47c:	20000244 	.word	0x20000244
 800e480:	08032734 	.word	0x08032734
 800e484:	0802efcc 	.word	0x0802efcc
 800e488:	08011309 	.word	0x08011309
 800e48c:	0802ffc8 	.word	0x0802ffc8

0800e490 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 800e490:	b580      	push	{r7, lr}
 800e492:	b086      	sub	sp, #24
 800e494:	af00      	add	r7, sp, #0
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	4613      	mov	r3, r2
 800e49c:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	617b      	str	r3, [r7, #20]
 800e4a8:	e057      	b.n	800e55a <getpeer+0xca>
    if (c->is_arplooking && pkt->arp &&
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800e4b0:	f003 0310 	and.w	r3, r3, #16
 800e4b4:	b2db      	uxtb	r3, r3
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d010      	beq.n	800e4dc <getpeer+0x4c>
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	699b      	ldr	r3, [r3, #24]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d00c      	beq.n	800e4dc <getpeer+0x4c>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	699b      	ldr	r3, [r3, #24]
 800e4c6:	f103 000e 	add.w	r0, r3, #14
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	331c      	adds	r3, #28
 800e4ce:	2204      	movs	r2, #4
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	f01d faf1 	bl	802bab8 <memcmp>
 800e4d6:	4603      	mov	r3, r0
    if (c->is_arplooking && pkt->arp &&
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d042      	beq.n	800e562 <getpeer+0xd2>
      break;
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800e4e2:	f003 0301 	and.w	r3, r3, #1
 800e4e6:	b2db      	uxtb	r3, r3
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d00b      	beq.n	800e504 <getpeer+0x74>
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d007      	beq.n	800e504 <getpeer+0x74>
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	8b1a      	ldrh	r2, [r3, #24]
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4fc:	885b      	ldrh	r3, [r3, #2]
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	429a      	cmp	r2, r3
 800e502:	d030      	beq.n	800e566 <getpeer+0xd6>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800e50a:	f003 0301 	and.w	r3, r3, #1
 800e50e:	b2db      	uxtb	r3, r3
 800e510:	2b00      	cmp	r3, #0
 800e512:	d11f      	bne.n	800e554 <getpeer+0xc4>
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d01b      	beq.n	800e554 <getpeer+0xc4>
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	8b1a      	ldrh	r2, [r3, #24]
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e524:	885b      	ldrh	r3, [r3, #2]
 800e526:	b29b      	uxth	r3, r3
 800e528:	429a      	cmp	r2, r3
 800e52a:	d113      	bne.n	800e554 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800e532:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e536:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800e538:	79fa      	ldrb	r2, [r7, #7]
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d10a      	bne.n	800e554 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800e53e:	79fb      	ldrb	r3, [r7, #7]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d111      	bne.n	800e568 <getpeer+0xd8>
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e54c:	881b      	ldrh	r3, [r3, #0]
 800e54e:	b29b      	uxth	r3, r3
 800e550:	429a      	cmp	r2, r3
 800e552:	d009      	beq.n	800e568 <getpeer+0xd8>
  for (c = mgr->conns; c != NULL; c = c->next) {
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	617b      	str	r3, [r7, #20]
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d1a4      	bne.n	800e4aa <getpeer+0x1a>
 800e560:	e002      	b.n	800e568 <getpeer+0xd8>
      break;
 800e562:	bf00      	nop
 800e564:	e000      	b.n	800e568 <getpeer+0xd8>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800e566:	bf00      	nop
      break;
  }
  return c;
 800e568:	697b      	ldr	r3, [r7, #20]
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3718      	adds	r7, #24
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
	...

0800e574 <rx_arp>:

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800e574:	b5b0      	push	{r4, r5, r7, lr}
 800e576:	b088      	sub	sp, #32
 800e578:	af02      	add	r7, sp, #8
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	699b      	ldr	r3, [r3, #24]
 800e582:	88db      	ldrh	r3, [r3, #6]
 800e584:	b29c      	uxth	r4, r3
 800e586:	2001      	movs	r0, #1
 800e588:	f004 fa46 	bl	8012a18 <mg_ntohs>
 800e58c:	4603      	mov	r3, r0
 800e58e:	429c      	cmp	r4, r3
 800e590:	d176      	bne.n	800e680 <rx_arp+0x10c>
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	699b      	ldr	r3, [r3, #24]
 800e596:	699a      	ldr	r2, [r3, #24]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	689b      	ldr	r3, [r3, #8]
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d16f      	bne.n	800e680 <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.buf;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	695b      	ldr	r3, [r3, #20]
 800e5a4:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	330e      	adds	r3, #14
 800e5aa:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 800e5ac:	6978      	ldr	r0, [r7, #20]
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	691b      	ldr	r3, [r3, #16]
 800e5b2:	3306      	adds	r3, #6
 800e5b4:	2206      	movs	r2, #6
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	f01d ffdd 	bl	802c576 <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	3306      	adds	r3, #6
 800e5c0:	6879      	ldr	r1, [r7, #4]
 800e5c2:	2206      	movs	r2, #6
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f01d ffd6 	bl	802c576 <memcpy>
    eth->type = mg_htons(0x806);
 800e5ca:	f640 0006 	movw	r0, #2054	@ 0x806
 800e5ce:	f004 fa23 	bl	8012a18 <mg_ntohs>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	699a      	ldr	r2, [r3, #24]
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	6814      	ldr	r4, [r2, #0]
 800e5e2:	6850      	ldr	r0, [r2, #4]
 800e5e4:	6891      	ldr	r1, [r2, #8]
 800e5e6:	68d5      	ldr	r5, [r2, #12]
 800e5e8:	601c      	str	r4, [r3, #0]
 800e5ea:	6058      	str	r0, [r3, #4]
 800e5ec:	6099      	str	r1, [r3, #8]
 800e5ee:	60dd      	str	r5, [r3, #12]
 800e5f0:	6914      	ldr	r4, [r2, #16]
 800e5f2:	6950      	ldr	r0, [r2, #20]
 800e5f4:	6991      	ldr	r1, [r2, #24]
 800e5f6:	611c      	str	r4, [r3, #16]
 800e5f8:	6158      	str	r0, [r3, #20]
 800e5fa:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 800e5fc:	2002      	movs	r0, #2
 800e5fe:	f004 fa0b 	bl	8012a18 <mg_ntohs>
 800e602:	4603      	mov	r3, r0
 800e604:	461a      	mov	r2, r3
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	f103 0012 	add.w	r0, r3, #18
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	699b      	ldr	r3, [r3, #24]
 800e614:	3308      	adds	r3, #8
 800e616:	2206      	movs	r2, #6
 800e618:	4619      	mov	r1, r3
 800e61a:	f01d ffac 	bl	802c576 <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	3308      	adds	r3, #8
 800e622:	6879      	ldr	r1, [r7, #4]
 800e624:	2206      	movs	r2, #6
 800e626:	4618      	mov	r0, r3
 800e628:	f01d ffa5 	bl	802c576 <memcpy>
    arp->tpa = pkt->arp->spa;
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	699b      	ldr	r3, [r3, #24]
 800e630:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	689a      	ldr	r2, [r3, #8]
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 800e642:	4b4a      	ldr	r3, [pc, #296]	@ (800e76c <rx_arp+0x1f8>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	2b02      	cmp	r3, #2
 800e648:	dd10      	ble.n	800e66c <rx_arp+0xf8>
 800e64a:	4b49      	ldr	r3, [pc, #292]	@ (800e770 <rx_arp+0x1fc>)
 800e64c:	f241 426a 	movw	r2, #5226	@ 0x146a
 800e650:	4948      	ldr	r1, [pc, #288]	@ (800e774 <rx_arp+0x200>)
 800e652:	2003      	movs	r0, #3
 800e654:	f7fd fcce 	bl	800bff4 <mg_log_prefix>
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	f103 0218 	add.w	r2, r3, #24
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	9300      	str	r3, [sp, #0]
 800e662:	4b45      	ldr	r3, [pc, #276]	@ (800e778 <rx_arp+0x204>)
 800e664:	4945      	ldr	r1, [pc, #276]	@ (800e77c <rx_arp+0x208>)
 800e666:	4846      	ldr	r0, [pc, #280]	@ (800e780 <rx_arp+0x20c>)
 800e668:	f7fd fd14 	bl	800c094 <mg_log>
              &ifp->mac));
    ether_output(ifp, PDIFF(eth, arp + 1));
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	f103 021c 	add.w	r2, r3, #28
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	1ad3      	subs	r3, r2, r3
 800e676:	4619      	mov	r1, r3
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f7ff fbff 	bl	800de7c <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800e67e:	e071      	b.n	800e764 <rx_arp+0x1f0>
  } else if (pkt->arp->op == mg_htons(2)) {
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	699b      	ldr	r3, [r3, #24]
 800e684:	88db      	ldrh	r3, [r3, #6]
 800e686:	b29c      	uxth	r4, r3
 800e688:	2002      	movs	r0, #2
 800e68a:	f004 f9c5 	bl	8012a18 <mg_ntohs>
 800e68e:	4603      	mov	r3, r0
 800e690:	429c      	cmp	r4, r3
 800e692:	d167      	bne.n	800e764 <rx_arp+0x1f0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	699b      	ldr	r3, [r3, #24]
 800e698:	3312      	adds	r3, #18
 800e69a:	6879      	ldr	r1, [r7, #4]
 800e69c:	2206      	movs	r2, #6
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f01d fa0a 	bl	802bab8 <memcmp>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d15b      	bne.n	800e762 <rx_arp+0x1ee>
    if (pkt->arp->spa == ifp->gw) {
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	699b      	ldr	r3, [r3, #24]
 800e6ae:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	691b      	ldr	r3, [r3, #16]
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	d10a      	bne.n	800e6d0 <rx_arp+0x15c>
      // Got response for the GW ARP request. Set ifp->gwmac
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f103 0042 	add.w	r0, r3, #66	@ 0x42
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	699b      	ldr	r3, [r3, #24]
 800e6c4:	3308      	adds	r3, #8
 800e6c6:	2206      	movs	r2, #6
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	f01d ff54 	bl	802c576 <memcpy>
 800e6ce:	e049      	b.n	800e764 <rx_arp+0x1f0>
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	6839      	ldr	r1, [r7, #0]
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f7ff fed9 	bl	800e490 <getpeer>
 800e6de:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d03e      	beq.n	800e764 <rx_arp+0x1f0>
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800e6ec:	f003 0310 	and.w	r3, r3, #16
 800e6f0:	b2db      	uxtb	r3, r3
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d036      	beq.n	800e764 <rx_arp+0x1f0>
        struct connstate *s = (struct connstate *) (c + 1);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	33b0      	adds	r3, #176	@ 0xb0
 800e6fa:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	f103 0018 	add.w	r0, r3, #24
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	699b      	ldr	r3, [r3, #24]
 800e706:	3308      	adds	r3, #8
 800e708:	2206      	movs	r2, #6
 800e70a:	4619      	mov	r1, r3
 800e70c:	f01d ff33 	bl	802c576 <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 800e710:	4b16      	ldr	r3, [pc, #88]	@ (800e76c <rx_arp+0x1f8>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	2b02      	cmp	r3, #2
 800e716:	dd15      	ble.n	800e744 <rx_arp+0x1d0>
 800e718:	4b15      	ldr	r3, [pc, #84]	@ (800e770 <rx_arp+0x1fc>)
 800e71a:	f241 4277 	movw	r2, #5239	@ 0x1477
 800e71e:	4915      	ldr	r1, [pc, #84]	@ (800e774 <rx_arp+0x200>)
 800e720:	2003      	movs	r0, #3
 800e722:	f7fd fc67 	bl	800bff4 <mg_log_prefix>
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f103 021c 	add.w	r2, r3, #28
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	3318      	adds	r3, #24
 800e734:	9301      	str	r3, [sp, #4]
 800e736:	4b10      	ldr	r3, [pc, #64]	@ (800e778 <rx_arp+0x204>)
 800e738:	9300      	str	r3, [sp, #0]
 800e73a:	4613      	mov	r3, r2
 800e73c:	4a0f      	ldr	r2, [pc, #60]	@ (800e77c <rx_arp+0x208>)
 800e73e:	4811      	ldr	r0, [pc, #68]	@ (800e784 <rx_arp+0x210>)
 800e740:	f7fd fca8 	bl	800c094 <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 800e744:	68fa      	ldr	r2, [r7, #12]
 800e746:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800e74a:	f36f 1304 	bfc	r3, #4, #1
 800e74e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
        send_syn(c);
 800e752:	68f8      	ldr	r0, [r7, #12]
 800e754:	f002 f87a 	bl	801084c <send_syn>
        settmout(c, MIP_TTYPE_SYN);
 800e758:	2103      	movs	r1, #3
 800e75a:	68f8      	ldr	r0, [r7, #12]
 800e75c:	f7ff fb32 	bl	800ddc4 <settmout>
 800e760:	e000      	b.n	800e764 <rx_arp+0x1f0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800e762:	bf00      	nop
      }
    }
  }
}
 800e764:	3718      	adds	r7, #24
 800e766:	46bd      	mov	sp, r7
 800e768:	bdb0      	pop	{r4, r5, r7, pc}
 800e76a:	bf00      	nop
 800e76c:	20000244 	.word	0x20000244
 800e770:	08032748 	.word	0x08032748
 800e774:	0802efcc 	.word	0x0802efcc
 800e778:	08011309 	.word	0x08011309
 800e77c:	08011245 	.word	0x08011245
 800e780:	0802fff0 	.word	0x0802fff0
 800e784:	08030008 	.word	0x08030008

0800e788 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800e788:	b580      	push	{r7, lr}
 800e78a:	b08a      	sub	sp, #40	@ 0x28
 800e78c:	af02      	add	r7, sp, #8
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	2b08      	cmp	r3, #8
 800e79a:	d14d      	bne.n	800e838 <rx_icmp+0xb0>
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	69db      	ldr	r3, [r3, #28]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d049      	beq.n	800e838 <rx_icmp+0xb0>
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	69db      	ldr	r3, [r3, #28]
 800e7a8:	691a      	ldr	r2, [r3, #16]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	689b      	ldr	r3, [r3, #8]
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d142      	bne.n	800e838 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 800e7b2:	2326      	movs	r3, #38	@ 0x26
 800e7b4:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	699a      	ldr	r2, [r3, #24]
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	1ad3      	subs	r3, r2, r3
 800e7be:	617b      	str	r3, [r7, #20]
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 800e7c6:	69fa      	ldr	r2, [r7, #28]
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d901      	bls.n	800e7d2 <rx_icmp+0x4a>
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	691b      	ldr	r3, [r3, #16]
 800e7d6:	1d99      	adds	r1, r3, #6
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6898      	ldr	r0, [r3, #8]
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	69db      	ldr	r3, [r3, #28]
 800e7e0:	68db      	ldr	r3, [r3, #12]
 800e7e2:	69fa      	ldr	r2, [r7, #28]
 800e7e4:	3204      	adds	r2, #4
 800e7e6:	9201      	str	r2, [sp, #4]
 800e7e8:	9300      	str	r3, [sp, #0]
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	2201      	movs	r2, #1
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f7ff fc4a 	bl	800e088 <tx_ip>
 800e7f4:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	3314      	adds	r3, #20
 800e7fa:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 800e7fc:	2204      	movs	r2, #4
 800e7fe:	2100      	movs	r1, #0
 800e800:	68f8      	ldr	r0, [r7, #12]
 800e802:	f01d f983 	bl	802bb0c <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	1d18      	adds	r0, r3, #4
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	689b      	ldr	r3, [r3, #8]
 800e80e:	69fa      	ldr	r2, [r7, #28]
 800e810:	4619      	mov	r1, r3
 800e812:	f01d feb0 	bl	802c576 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 800e816:	69fb      	ldr	r3, [r7, #28]
 800e818:	3304      	adds	r3, #4
 800e81a:	4619      	mov	r1, r3
 800e81c:	68f8      	ldr	r0, [r7, #12]
 800e81e:	f7ff fabd 	bl	800dd9c <ipcsum>
 800e822:	4603      	mov	r3, r0
 800e824:	461a      	mov	r2, r3
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 800e82a:	69ba      	ldr	r2, [r7, #24]
 800e82c:	69fb      	ldr	r3, [r7, #28]
 800e82e:	4413      	add	r3, r2
 800e830:	4619      	mov	r1, r3
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f7ff fb22 	bl	800de7c <ether_output>
  }
}
 800e838:	bf00      	nop
 800e83a:	3720      	adds	r7, #32
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800e840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e844:	b08e      	sub	sp, #56	@ 0x38
 800e846:	af00      	add	r7, sp, #0
 800e848:	60f8      	str	r0, [r7, #12]
 800e84a:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0;
 800e84c:	2300      	movs	r3, #0
 800e84e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e850:	2300      	movs	r3, #0
 800e852:	623b      	str	r3, [r7, #32]
 800e854:	2300      	movs	r3, #0
 800e856:	61fb      	str	r3, [r7, #28]
 800e858:	2300      	movs	r3, #0
 800e85a:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 800e85c:	2300      	movs	r3, #0
 800e85e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800e868:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e870:	33f0      	adds	r3, #240	@ 0xf0
 800e872:	62fb      	str	r3, [r7, #44]	@ 0x2c
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	681a      	ldr	r2, [r3, #0]
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	4413      	add	r3, r2
 800e87e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e884:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800e888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e88a:	429a      	cmp	r2, r3
 800e88c:	f0c0 815c 	bcc.w	800eb48 <rx_dhcp_client+0x308>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e894:	1d18      	adds	r0, r3, #4
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	3302      	adds	r3, #2
 800e89a:	2204      	movs	r2, #4
 800e89c:	4619      	mov	r1, r3
 800e89e:	f01d f90b 	bl	802bab8 <memcmp>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	f040 8151 	bne.w	800eb4c <rx_dhcp_client+0x30c>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800e8aa:	e05b      	b.n	800e964 <rx_dhcp_client+0x124>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 800e8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8ae:	781b      	ldrb	r3, [r3, #0]
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	d10e      	bne.n	800e8d2 <rx_dhcp_client+0x92>
 800e8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	781b      	ldrb	r3, [r3, #0]
 800e8ba:	2b04      	cmp	r3, #4
 800e8bc:	d109      	bne.n	800e8d2 <rx_dhcp_client+0x92>
 800e8be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8c0:	3306      	adds	r3, #6
 800e8c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d904      	bls.n	800e8d2 <rx_dhcp_client+0x92>
      memcpy(&mask, p + 2, sizeof(mask));
 800e8c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8ca:	3302      	adds	r3, #2
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	61fb      	str	r3, [r7, #28]
 800e8d0:	e041      	b.n	800e956 <rx_dhcp_client+0x116>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 800e8d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	2b03      	cmp	r3, #3
 800e8d8:	d112      	bne.n	800e900 <rx_dhcp_client+0xc0>
 800e8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8dc:	3301      	adds	r3, #1
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	2b04      	cmp	r3, #4
 800e8e2:	d10d      	bne.n	800e900 <rx_dhcp_client+0xc0>
 800e8e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8e6:	3306      	adds	r3, #6
 800e8e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d908      	bls.n	800e900 <rx_dhcp_client+0xc0>
      memcpy(&gw, p + 2, sizeof(gw));
 800e8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8f0:	3302      	adds	r3, #2
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	623b      	str	r3, [r7, #32]
      ip = pkt->dhcp->yiaddr;
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8fa:	691b      	ldr	r3, [r3, #16]
 800e8fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8fe:	e02a      	b.n	800e956 <rx_dhcp_client+0x116>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 800e900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	2b33      	cmp	r3, #51	@ 0x33
 800e906:	d114      	bne.n	800e932 <rx_dhcp_client+0xf2>
 800e908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e90a:	3301      	adds	r3, #1
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	2b04      	cmp	r3, #4
 800e910:	d10f      	bne.n	800e932 <rx_dhcp_client+0xf2>
 800e912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e914:	3306      	adds	r3, #6
 800e916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e918:	429a      	cmp	r2, r3
 800e91a:	d90a      	bls.n	800e932 <rx_dhcp_client+0xf2>
      memcpy(&lease, p + 2, sizeof(lease));
 800e91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e91e:	3302      	adds	r3, #2
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	61bb      	str	r3, [r7, #24]
      lease = mg_ntohl(lease);
 800e924:	69bb      	ldr	r3, [r7, #24]
 800e926:	4618      	mov	r0, r3
 800e928:	f004 f85d 	bl	80129e6 <mg_ntohl>
 800e92c:	4603      	mov	r3, r0
 800e92e:	61bb      	str	r3, [r7, #24]
 800e930:	e011      	b.n	800e956 <rx_dhcp_client+0x116>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 800e932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e934:	781b      	ldrb	r3, [r3, #0]
 800e936:	2b35      	cmp	r3, #53	@ 0x35
 800e938:	d10d      	bne.n	800e956 <rx_dhcp_client+0x116>
 800e93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e93c:	3301      	adds	r3, #1
 800e93e:	781b      	ldrb	r3, [r3, #0]
 800e940:	2b01      	cmp	r3, #1
 800e942:	d108      	bne.n	800e956 <rx_dhcp_client+0x116>
 800e944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e946:	3306      	adds	r3, #6
 800e948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d903      	bls.n	800e956 <rx_dhcp_client+0x116>
      msgtype = p[2];
 800e94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e950:	789b      	ldrb	r3, [r3, #2]
 800e952:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    }
    p += p[1] + 2;
 800e956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e958:	3301      	adds	r3, #1
 800e95a:	781b      	ldrb	r3, [r3, #0]
 800e95c:	3302      	adds	r3, #2
 800e95e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e960:	4413      	add	r3, r2
 800e962:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800e964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e966:	3301      	adds	r3, #1
 800e968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d903      	bls.n	800e976 <rx_dhcp_client+0x136>
 800e96e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e970:	781b      	ldrb	r3, [r3, #0]
 800e972:	2bff      	cmp	r3, #255	@ 0xff
 800e974:	d19a      	bne.n	800e8ac <rx_dhcp_client+0x6c>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 800e976:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e97a:	2b06      	cmp	r3, #6
 800e97c:	d10c      	bne.n	800e998 <rx_dhcp_client+0x158>
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	689b      	ldr	r3, [r3, #8]
 800e982:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e984:	429a      	cmp	r2, r3
 800e986:	d107      	bne.n	800e998 <rx_dhcp_client+0x158>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	2201      	movs	r2, #1
 800e98c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2200      	movs	r2, #0
 800e994:	609a      	str	r2, [r3, #8]
 800e996:	e0cc      	b.n	800eb32 <rx_dhcp_client+0x2f2>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 800e998:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e99c:	2b02      	cmp	r3, #2
 800e99e:	d123      	bne.n	800e9e8 <rx_dhcp_client+0x1a8>
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800e9a6:	2b01      	cmp	r3, #1
 800e9a8:	d11e      	bne.n	800e9e8 <rx_dhcp_client+0x1a8>
 800e9aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d01b      	beq.n	800e9e8 <rx_dhcp_client+0x1a8>
 800e9b0:	6a3b      	ldr	r3, [r7, #32]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d018      	beq.n	800e9e8 <rx_dhcp_client+0x1a8>
 800e9b6:	69bb      	ldr	r3, [r7, #24]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d015      	beq.n	800e9e8 <rx_dhcp_client+0x1a8>
             lease) {  // DHCPOFFER
    // select IP, (4.4.1) (fallback to IP source addr on foul play)
    tx_dhcp_request_sel(ifp, ip,
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9c0:	695b      	ldr	r3, [r3, #20]
    tx_dhcp_request_sel(ifp, ip,
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d003      	beq.n	800e9ce <rx_dhcp_client+0x18e>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tx_dhcp_request_sel(ifp, ip,
 800e9ca:	695b      	ldr	r3, [r3, #20]
 800e9cc:	e002      	b.n	800e9d4 <rx_dhcp_client+0x194>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	69db      	ldr	r3, [r3, #28]
    tx_dhcp_request_sel(ifp, ip,
 800e9d2:	68db      	ldr	r3, [r3, #12]
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e9d8:	68f8      	ldr	r0, [r7, #12]
 800e9da:	f7ff fca5 	bl	800e328 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	2202      	movs	r2, #2
 800e9e2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 800e9e6:	e0a4      	b.n	800eb32 <rx_dhcp_client+0x2f2>
  } else if (msgtype == 5) {          // DHCPACK
 800e9e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e9ec:	2b05      	cmp	r3, #5
 800e9ee:	f040 80a0 	bne.w	800eb32 <rx_dhcp_client+0x2f2>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800e9f8:	2b02      	cmp	r3, #2
 800e9fa:	d163      	bne.n	800eac4 <rx_dhcp_client+0x284>
 800e9fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d060      	beq.n	800eac4 <rx_dhcp_client+0x284>
 800ea02:	6a3b      	ldr	r3, [r7, #32]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d05d      	beq.n	800eac4 <rx_dhcp_client+0x284>
 800ea08:	69bb      	ldr	r3, [r7, #24]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d05a      	beq.n	800eac4 <rx_dhcp_client+0x284>
      ifp->lease_expire = ifp->now + lease * 1000;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800ea14:	69b9      	ldr	r1, [r7, #24]
 800ea16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ea1a:	fb00 f101 	mul.w	r1, r0, r1
 800ea1e:	2000      	movs	r0, #0
 800ea20:	4688      	mov	r8, r1
 800ea22:	4681      	mov	r9, r0
 800ea24:	eb12 0108 	adds.w	r1, r2, r8
 800ea28:	6039      	str	r1, [r7, #0]
 800ea2a:	eb43 0309 	adc.w	r3, r3, r9
 800ea2e:	607b      	str	r3, [r7, #4]
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ea36:	e9c3 1216 	strd	r1, r2, [r3, #88]	@ 0x58
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800ea3a:	4b47      	ldr	r3, [pc, #284]	@ (800eb58 <rx_dhcp_client+0x318>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	dd16      	ble.n	800ea70 <rx_dhcp_client+0x230>
 800ea42:	4b46      	ldr	r3, [pc, #280]	@ (800eb5c <rx_dhcp_client+0x31c>)
 800ea44:	f241 42b3 	movw	r2, #5299	@ 0x14b3
 800ea48:	4945      	ldr	r1, [pc, #276]	@ (800eb60 <rx_dhcp_client+0x320>)
 800ea4a:	2002      	movs	r0, #2
 800ea4c:	f7fd fad2 	bl	800bff4 <mg_log_prefix>
 800ea50:	69bc      	ldr	r4, [r7, #24]
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 800ea58:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ea5c:	f04f 0300 	mov.w	r3, #0
 800ea60:	f7f1 fe62 	bl	8000728 <__aeabi_uldivmod>
 800ea64:	4602      	mov	r2, r0
 800ea66:	460b      	mov	r3, r1
 800ea68:	4621      	mov	r1, r4
 800ea6a:	483e      	ldr	r0, [pc, #248]	@ (800eb64 <rx_dhcp_client+0x324>)
 800ea6c:	f7fd fb12 	bl	800c094 <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f103 0042 	add.w	r0, r3, #66	@ 0x42
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	691b      	ldr	r3, [r3, #16]
 800ea7a:	3306      	adds	r3, #6
 800ea7c:	2206      	movs	r2, #6
 800ea7e:	4619      	mov	r1, r3
 800ea80:	f01d fd79 	bl	802c576 <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ea88:	609a      	str	r2, [r3, #8]
 800ea8a:	6a3a      	ldr	r2, [r7, #32]
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	611a      	str	r2, [r3, #16]
 800ea90:	69fa      	ldr	r2, [r7, #28]
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2203      	movs	r2, #3
 800ea9a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 800ea9e:	f107 0310 	add.w	r3, r7, #16
 800eaa2:	2108      	movs	r1, #8
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7f4 fe69 	bl	800377c <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 800eaaa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800eaae:	4614      	mov	r4, r2
 800eab0:	f7f4 fe92 	bl	80037d8 <mg_millis>
 800eab4:	4602      	mov	r2, r0
 800eab6:	460b      	mov	r3, r1
 800eab8:	4613      	mov	r3, r2
 800eaba:	4423      	add	r3, r4
 800eabc:	4618      	mov	r0, r3
 800eabe:	f01b fea7 	bl	802a810 <srand>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800eac2:	e036      	b.n	800eb32 <rx_dhcp_client+0x2f2>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800eaca:	2b03      	cmp	r3, #3
 800eacc:	d131      	bne.n	800eb32 <rx_dhcp_client+0x2f2>
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	689b      	ldr	r3, [r3, #8]
 800ead2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d12c      	bne.n	800eb32 <rx_dhcp_client+0x2f2>
      ifp->lease_expire = ifp->now + lease * 1000;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800eade:	69b9      	ldr	r1, [r7, #24]
 800eae0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800eae4:	fb00 f101 	mul.w	r1, r0, r1
 800eae8:	2000      	movs	r0, #0
 800eaea:	460c      	mov	r4, r1
 800eaec:	4605      	mov	r5, r0
 800eaee:	eb12 0a04 	adds.w	sl, r2, r4
 800eaf2:	eb43 0b05 	adc.w	fp, r3, r5
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	e9c3 ab16 	strd	sl, fp, [r3, #88]	@ 0x58
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800eafc:	4b16      	ldr	r3, [pc, #88]	@ (800eb58 <rx_dhcp_client+0x318>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	dd16      	ble.n	800eb32 <rx_dhcp_client+0x2f2>
 800eb04:	4b15      	ldr	r3, [pc, #84]	@ (800eb5c <rx_dhcp_client+0x31c>)
 800eb06:	f241 42bd 	movw	r2, #5309	@ 0x14bd
 800eb0a:	4915      	ldr	r1, [pc, #84]	@ (800eb60 <rx_dhcp_client+0x320>)
 800eb0c:	2002      	movs	r0, #2
 800eb0e:	f7fd fa71 	bl	800bff4 <mg_log_prefix>
 800eb12:	69bc      	ldr	r4, [r7, #24]
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 800eb1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800eb1e:	f04f 0300 	mov.w	r3, #0
 800eb22:	f7f1 fe01 	bl	8000728 <__aeabi_uldivmod>
 800eb26:	4602      	mov	r2, r0
 800eb28:	460b      	mov	r3, r1
 800eb2a:	4621      	mov	r1, r4
 800eb2c:	480d      	ldr	r0, [pc, #52]	@ (800eb64 <rx_dhcp_client+0x324>)
 800eb2e:	f7fd fab1 	bl	800c094 <mg_log>
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800eb38:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	d006      	beq.n	800eb4e <rx_dhcp_client+0x30e>
 800eb40:	68f8      	ldr	r0, [r7, #12]
 800eb42:	f7ff fa15 	bl	800df70 <onstatechange>
 800eb46:	e002      	b.n	800eb4e <rx_dhcp_client+0x30e>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800eb48:	bf00      	nop
 800eb4a:	e000      	b.n	800eb4e <rx_dhcp_client+0x30e>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800eb4c:	bf00      	nop
}
 800eb4e:	3738      	adds	r7, #56	@ 0x38
 800eb50:	46bd      	mov	sp, r7
 800eb52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eb56:	bf00      	nop
 800eb58:	20000244 	.word	0x20000244
 800eb5c:	08032750 	.word	0x08032750
 800eb60:	0802efcc 	.word	0x0802efcc
 800eb64:	08030024 	.word	0x08030024

0800eb68 <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800eb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb6c:	b0d6      	sub	sp, #344	@ 0x158
 800eb6e:	af04      	add	r7, sp, #16
 800eb70:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800eb74:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800eb78:	6018      	str	r0, [r3, #0]
 800eb7a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800eb7e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800eb82:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 800eb84:	2300      	movs	r3, #0
 800eb86:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
 800eb8a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800eb8e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb96:	33f0      	adds	r3, #240	@ 0xf0
 800eb98:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 800eb9c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800eba0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ebac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	685b      	ldr	r3, [r3, #4]
 800ebb4:	4413      	add	r3, r2
 800ebb6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800ebba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ebbe:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebc6:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800ebca:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800ebce:	429a      	cmp	r2, r3
 800ebd0:	f0c0 81b0 	bcc.w	800ef34 <rx_dhcp_server+0x3cc>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800ebd4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ebd8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ebdc:	4ad8      	ldr	r2, [pc, #864]	@ (800ef40 <rx_dhcp_server+0x3d8>)
 800ebde:	4618      	mov	r0, r3
 800ebe0:	4611      	mov	r1, r2
 800ebe2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800ebe6:	461a      	mov	r2, r3
 800ebe8:	f01d fcc5 	bl	802c576 <memcpy>
  res.yiaddr = ifp->ip;
 800ebec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ebf0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	689a      	ldr	r2, [r3, #8]
 800ebf8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ebfc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ec00:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 800ec02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ec06:	3310      	adds	r3, #16
 800ec08:	3303      	adds	r3, #3
 800ec0a:	781a      	ldrb	r2, [r3, #0]
 800ec0c:	3201      	adds	r2, #1
 800ec0e:	b2d2      	uxtb	r2, r2
 800ec10:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800ec12:	e020      	b.n	800ec56 <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 800ec14:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ec18:	781b      	ldrb	r3, [r3, #0]
 800ec1a:	2b35      	cmp	r3, #53	@ 0x35
 800ec1c:	d111      	bne.n	800ec42 <rx_dhcp_server+0xda>
 800ec1e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ec22:	3301      	adds	r3, #1
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	2b01      	cmp	r3, #1
 800ec28:	d10b      	bne.n	800ec42 <rx_dhcp_server+0xda>
 800ec2a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ec2e:	3302      	adds	r3, #2
 800ec30:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d904      	bls.n	800ec42 <rx_dhcp_server+0xda>
      op = p[2];
 800ec38:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ec3c:	789b      	ldrb	r3, [r3, #2]
 800ec3e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
    }
    p += p[1] + 2;
 800ec42:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ec46:	3301      	adds	r3, #1
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	3302      	adds	r3, #2
 800ec4c:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 800ec50:	4413      	add	r3, r2
 800ec52:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800ec56:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800ec60:	429a      	cmp	r2, r3
 800ec62:	d904      	bls.n	800ec6e <rx_dhcp_server+0x106>
 800ec64:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ec68:	781b      	ldrb	r3, [r3, #0]
 800ec6a:	2bff      	cmp	r3, #255	@ 0xff
 800ec6c:	d1d2      	bne.n	800ec14 <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 800ec6e:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d004      	beq.n	800ec80 <rx_dhcp_server+0x118>
 800ec76:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800ec7a:	2b03      	cmp	r3, #3
 800ec7c:	f040 815b 	bne.w	800ef36 <rx_dhcp_server+0x3ce>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 800ec80:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d101      	bne.n	800ec8c <rx_dhcp_server+0x124>
 800ec88:	2302      	movs	r3, #2
 800ec8a:	e000      	b.n	800ec8e <rx_dhcp_server+0x126>
 800ec8c:	2305      	movs	r3, #5
 800ec8e:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
    uint8_t opts[] = {
 800ec92:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ec96:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ec9a:	2235      	movs	r2, #53	@ 0x35
 800ec9c:	701a      	strb	r2, [r3, #0]
 800ec9e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800eca2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800eca6:	2201      	movs	r2, #1
 800eca8:	705a      	strb	r2, [r3, #1]
 800ecaa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ecae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ecb2:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 800ecb6:	709a      	strb	r2, [r3, #2]
 800ecb8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ecbc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ecc0:	2201      	movs	r2, #1
 800ecc2:	70da      	strb	r2, [r3, #3]
 800ecc4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ecc8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800eccc:	2204      	movs	r2, #4
 800ecce:	711a      	strb	r2, [r3, #4]
 800ecd0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ecd4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ecd8:	2200      	movs	r2, #0
 800ecda:	715a      	strb	r2, [r3, #5]
 800ecdc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ece0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ece4:	2200      	movs	r2, #0
 800ece6:	719a      	strb	r2, [r3, #6]
 800ece8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ecec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	71da      	strb	r2, [r3, #7]
 800ecf4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ecf8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	721a      	strb	r2, [r3, #8]
 800ed00:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ed04:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ed08:	2236      	movs	r2, #54	@ 0x36
 800ed0a:	725a      	strb	r2, [r3, #9]
 800ed0c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ed10:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ed14:	2204      	movs	r2, #4
 800ed16:	729a      	strb	r2, [r3, #10]
 800ed18:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ed1c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ed20:	2200      	movs	r2, #0
 800ed22:	72da      	strb	r2, [r3, #11]
 800ed24:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ed28:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	731a      	strb	r2, [r3, #12]
 800ed30:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ed34:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ed38:	2200      	movs	r2, #0
 800ed3a:	735a      	strb	r2, [r3, #13]
 800ed3c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ed40:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ed44:	2200      	movs	r2, #0
 800ed46:	739a      	strb	r2, [r3, #14]
 800ed48:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ed4c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ed50:	220c      	movs	r2, #12
 800ed52:	73da      	strb	r2, [r3, #15]
 800ed54:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ed58:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ed5c:	2203      	movs	r2, #3
 800ed5e:	741a      	strb	r2, [r3, #16]
 800ed60:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ed64:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ed68:	226d      	movs	r2, #109	@ 0x6d
 800ed6a:	745a      	strb	r2, [r3, #17]
 800ed6c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ed70:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ed74:	2269      	movs	r2, #105	@ 0x69
 800ed76:	749a      	strb	r2, [r3, #18]
 800ed78:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ed7c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ed80:	2270      	movs	r2, #112	@ 0x70
 800ed82:	74da      	strb	r2, [r3, #19]
 800ed84:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ed88:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ed8c:	2233      	movs	r2, #51	@ 0x33
 800ed8e:	751a      	strb	r2, [r3, #20]
 800ed90:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ed94:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ed98:	2204      	movs	r2, #4
 800ed9a:	755a      	strb	r2, [r3, #21]
 800ed9c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800eda0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800eda4:	22ff      	movs	r2, #255	@ 0xff
 800eda6:	759a      	strb	r2, [r3, #22]
 800eda8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800edac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800edb0:	22ff      	movs	r2, #255	@ 0xff
 800edb2:	75da      	strb	r2, [r3, #23]
 800edb4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800edb8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800edbc:	22ff      	movs	r2, #255	@ 0xff
 800edbe:	761a      	strb	r2, [r3, #24]
 800edc0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800edc4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800edc8:	22ff      	movs	r2, #255	@ 0xff
 800edca:	765a      	strb	r2, [r3, #25]
 800edcc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800edd0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800edd4:	22ff      	movs	r2, #255	@ 0xff
 800edd6:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 800edd8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800eddc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ede4:	f103 011c 	add.w	r1, r3, #28
 800ede8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800edec:	331c      	adds	r3, #28
 800edee:	2206      	movs	r2, #6
 800edf0:	4618      	mov	r0, r3
 800edf2:	f01d fbc0 	bl	802c576 <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 800edf6:	f107 030c 	add.w	r3, r7, #12
 800edfa:	3305      	adds	r3, #5
 800edfc:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800ee00:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800ee04:	6812      	ldr	r2, [r2, #0]
 800ee06:	320c      	adds	r2, #12
 800ee08:	6812      	ldr	r2, [r2, #0]
 800ee0a:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 800ee0c:	f107 030c 	add.w	r3, r7, #12
 800ee10:	330b      	adds	r3, #11
 800ee12:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800ee16:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800ee1a:	6812      	ldr	r2, [r2, #0]
 800ee1c:	3208      	adds	r2, #8
 800ee1e:	6812      	ldr	r2, [r2, #0]
 800ee20:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 800ee22:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ee26:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ee2a:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800ee2e:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800ee32:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 800ee36:	4615      	mov	r5, r2
 800ee38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ee40:	c403      	stmia	r4!, {r0, r1}
 800ee42:	8022      	strh	r2, [r4, #0]
 800ee44:	3402      	adds	r4, #2
 800ee46:	0c13      	lsrs	r3, r2, #16
 800ee48:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 800ee4a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ee4e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee56:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800ee5a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ee5e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ee62:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    res.xid = pkt->dhcp->xid;
 800ee66:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ee6a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee72:	685a      	ldr	r2, [r3, #4]
 800ee74:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ee78:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ee7c:	605a      	str	r2, [r3, #4]
    if (ifp->enable_get_gateway) {
 800ee7e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ee82:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	7f9b      	ldrb	r3, [r3, #30]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d01c      	beq.n	800eec8 <rx_dhcp_server+0x360>
      ifp->gw = res.yiaddr;
 800ee8e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ee92:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ee96:	691a      	ldr	r2, [r3, #16]
 800ee98:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ee9c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	611a      	str	r2, [r3, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800eea4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800eea8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	f103 0042 	add.w	r0, r3, #66	@ 0x42
 800eeb2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800eeb6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	691b      	ldr	r3, [r3, #16]
 800eebe:	3306      	adds	r3, #6
 800eec0:	2206      	movs	r2, #6
 800eec2:	4619      	mov	r1, r3
 800eec4:	f01d fb57 	bl	802c576 <memcpy>
    }
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 800eec8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800eecc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	691b      	ldr	r3, [r3, #16]
 800eed4:	1d9d      	adds	r5, r3, #6
 800eed6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800eeda:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	689e      	ldr	r6, [r3, #8]
 800eee2:	2043      	movs	r0, #67	@ 0x43
 800eee4:	f003 fd98 	bl	8012a18 <mg_ntohs>
 800eee8:	4603      	mov	r3, r0
 800eeea:	4698      	mov	r8, r3
 800eeec:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800eef0:	2b01      	cmp	r3, #1
 800eef2:	d005      	beq.n	800ef00 <rx_dhcp_server+0x398>
 800eef4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800eef8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800eefc:	691c      	ldr	r4, [r3, #16]
 800eefe:	e001      	b.n	800ef04 <rx_dhcp_server+0x39c>
 800ef00:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ef04:	2044      	movs	r0, #68	@ 0x44
 800ef06:	f003 fd87 	bl	8012a18 <mg_ntohs>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	461a      	mov	r2, r3
 800ef0e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ef12:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 800ef16:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800ef1a:	9303      	str	r3, [sp, #12]
 800ef1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ef20:	9302      	str	r3, [sp, #8]
 800ef22:	9201      	str	r2, [sp, #4]
 800ef24:	9400      	str	r4, [sp, #0]
 800ef26:	4643      	mov	r3, r8
 800ef28:	4632      	mov	r2, r6
 800ef2a:	4629      	mov	r1, r5
 800ef2c:	6800      	ldr	r0, [r0, #0]
 800ef2e:	f7ff f901 	bl	800e134 <tx_udp>
 800ef32:	e000      	b.n	800ef36 <rx_dhcp_server+0x3ce>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800ef34:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 800ef36:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef40:	0803003c 	.word	0x0803003c

0800ef44 <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b084      	sub	sp, #16
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef52:	2201      	movs	r2, #1
 800ef54:	6839      	ldr	r1, [r7, #0]
 800ef56:	4618      	mov	r0, r3
 800ef58:	f7ff fa9a 	bl	800e490 <getpeer>
 800ef5c:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d059      	beq.n	800f018 <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef68:	881b      	ldrh	r3, [r3, #0]
 800ef6a:	b29a      	uxth	r2, r3
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	331c      	adds	r3, #28
 800ef74:	683a      	ldr	r2, [r7, #0]
 800ef76:	69d2      	ldr	r2, [r2, #28]
 800ef78:	320c      	adds	r2, #12
 800ef7a:	6812      	ldr	r2, [r2, #0]
 800ef7c:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	33b0      	adds	r3, #176	@ 0xb0
 800ef82:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	f103 0018 	add.w	r0, r3, #24
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	691b      	ldr	r3, [r3, #16]
 800ef8e:	3306      	adds	r3, #6
 800ef90:	2206      	movs	r2, #6
 800ef92:	4619      	mov	r1, r3
 800ef94:	f01d faef 	bl	802c576 <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800efa0:	d304      	bcc.n	800efac <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 800efa2:	491f      	ldr	r1, [pc, #124]	@ (800f020 <rx_udp+0xdc>)
 800efa4:	68f8      	ldr	r0, [r7, #12]
 800efa6:	f7f7 fe51 	bl	8006c4c <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800efaa:	e035      	b.n	800f018 <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efb4:	1ad2      	subs	r2, r2, r3
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	68db      	ldr	r3, [r3, #12]
 800efba:	429a      	cmp	r2, r3
 800efbc:	d212      	bcs.n	800efe4 <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	68db      	ldr	r3, [r3, #12]
 800efcc:	4413      	add	r3, r2
 800efce:	4619      	mov	r1, r3
 800efd0:	f7fc f818 	bl	800b004 <mg_iobuf_resize>
 800efd4:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d104      	bne.n	800efe4 <rx_udp+0xa0>
      mg_error(c, "oom");
 800efda:	4912      	ldr	r1, [pc, #72]	@ (800f024 <rx_udp+0xe0>)
 800efdc:	68f8      	ldr	r0, [r7, #12]
 800efde:	f7f7 fe35 	bl	8006c4c <mg_error>
}
 800efe2:	e019      	b.n	800f018 <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efec:	18d0      	adds	r0, r2, r3
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	6899      	ldr	r1, [r3, #8]
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	68db      	ldr	r3, [r3, #12]
 800eff6:	461a      	mov	r2, r3
 800eff8:	f01d fabd 	bl	802c576 <memcpy>
      c->recv.len += pkt->pay.len;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	68db      	ldr	r3, [r3, #12]
 800f004:	441a      	add	r2, r3
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	641a      	str	r2, [r3, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	330c      	adds	r3, #12
 800f00e:	461a      	mov	r2, r3
 800f010:	2107      	movs	r1, #7
 800f012:	68f8      	ldr	r0, [r7, #12]
 800f014:	f7f7 fdfa 	bl	8006c0c <mg_call>
}
 800f018:	bf00      	nop
 800f01a:	3710      	adds	r7, #16
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}
 800f020:	0803014c 	.word	0x0803014c
 800f024:	08030168 	.word	0x08030168

0800f028 <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 800f028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f02a:	b091      	sub	sp, #68	@ 0x44
 800f02c:	af06      	add	r7, sp, #24
 800f02e:	60f8      	str	r0, [r7, #12]
 800f030:	60b9      	str	r1, [r7, #8]
 800f032:	607a      	str	r2, [r7, #4]
 800f034:	70fb      	strb	r3, [r7, #3]
    buf = opts;
    len = sizeof(opts);
  }
#endif
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	689a      	ldr	r2, [r3, #8]
 800f03a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f03c:	3314      	adds	r3, #20
 800f03e:	9301      	str	r3, [sp, #4]
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	9300      	str	r3, [sp, #0]
 800f044:	4613      	mov	r3, r2
 800f046:	2206      	movs	r2, #6
 800f048:	68b9      	ldr	r1, [r7, #8]
 800f04a:	68f8      	ldr	r0, [r7, #12]
 800f04c:	f7ff f81c 	bl	800e088 <tx_ip>
 800f050:	6278      	str	r0, [r7, #36]	@ 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 800f052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f054:	3314      	adds	r3, #20
 800f056:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 800f058:	2214      	movs	r2, #20
 800f05a:	2100      	movs	r1, #0
 800f05c:	6a38      	ldr	r0, [r7, #32]
 800f05e:	f01c fd55 	bl	802bb0c <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 800f062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f064:	2b00      	cmp	r3, #0
 800f066:	d009      	beq.n	800f07c <tx_tcp+0x54>
 800f068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d006      	beq.n	800f07c <tx_tcp+0x54>
 800f06e:	6a3b      	ldr	r3, [r7, #32]
 800f070:	3314      	adds	r3, #20
 800f072:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f074:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f076:	4618      	mov	r0, r3
 800f078:	f01c fd2e 	bl	802bad8 <memmove>
  tcp->sport = sport;
 800f07c:	6a3b      	ldr	r3, [r7, #32]
 800f07e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800f082:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 800f084:	6a3b      	ldr	r3, [r7, #32]
 800f086:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800f08a:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 800f08c:	6a3b      	ldr	r3, [r7, #32]
 800f08e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f090:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 800f092:	6a3b      	ldr	r3, [r7, #32]
 800f094:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f096:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 800f098:	6a3b      	ldr	r3, [r7, #32]
 800f09a:	78fa      	ldrb	r2, [r7, #3]
 800f09c:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(MIP_TCP_WIN);
 800f09e:	f241 7070 	movw	r0, #6000	@ 0x1770
 800f0a2:	f003 fcb9 	bl	8012a18 <mg_ntohs>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	6a3b      	ldr	r3, [r7, #32]
 800f0ac:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 800f0ae:	6a3b      	ldr	r3, [r7, #32]
 800f0b0:	2250      	movs	r2, #80	@ 0x50
 800f0b2:	731a      	strb	r2, [r3, #12]
  // if (flags & TH_SYN) tcp->off = 0x70;  // Handshake? header size 28 bytes

  uint32_t cs = 0;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 800f0b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0ba:	b29b      	uxth	r3, r3
 800f0bc:	3314      	adds	r3, #20
 800f0be:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	753b      	strb	r3, [r7, #20]
 800f0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0c6:	7a5b      	ldrb	r3, [r3, #9]
 800f0c8:	757b      	strb	r3, [r7, #21]
 800f0ca:	8b7b      	ldrh	r3, [r7, #26]
 800f0cc:	0a1b      	lsrs	r3, r3, #8
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	b2db      	uxtb	r3, r3
 800f0d2:	75bb      	strb	r3, [r7, #22]
 800f0d4:	8b7b      	ldrh	r3, [r7, #26]
 800f0d6:	b2db      	uxtb	r3, r3
 800f0d8:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 800f0da:	8b7b      	ldrh	r3, [r7, #26]
 800f0dc:	461a      	mov	r2, r3
 800f0de:	6a39      	ldr	r1, [r7, #32]
 800f0e0:	69f8      	ldr	r0, [r7, #28]
 800f0e2:	f7fe fe15 	bl	800dd10 <csumup>
 800f0e6:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800f0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0ea:	330c      	adds	r3, #12
 800f0ec:	2204      	movs	r2, #4
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	69f8      	ldr	r0, [r7, #28]
 800f0f2:	f7fe fe0d 	bl	800dd10 <csumup>
 800f0f6:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800f0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0fa:	3310      	adds	r3, #16
 800f0fc:	2204      	movs	r2, #4
 800f0fe:	4619      	mov	r1, r3
 800f100:	69f8      	ldr	r0, [r7, #28]
 800f102:	f7fe fe05 	bl	800dd10 <csumup>
 800f106:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 800f108:	f107 0314 	add.w	r3, r7, #20
 800f10c:	2204      	movs	r2, #4
 800f10e:	4619      	mov	r1, r3
 800f110:	69f8      	ldr	r0, [r7, #28]
 800f112:	f7fe fdfd 	bl	800dd10 <csumup>
 800f116:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 800f118:	69f8      	ldr	r0, [r7, #28]
 800f11a:	f7fe fe24 	bl	800dd66 <csumfin>
 800f11e:	4603      	mov	r3, r0
 800f120:	461a      	mov	r2, r3
 800f122:	6a3b      	ldr	r3, [r7, #32]
 800f124:	821a      	strh	r2, [r3, #16]
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 800f126:	4b21      	ldr	r3, [pc, #132]	@ (800f1ac <tx_tcp+0x184>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	2b03      	cmp	r3, #3
 800f12c:	dd2c      	ble.n	800f188 <tx_tcp+0x160>
 800f12e:	4b20      	ldr	r3, [pc, #128]	@ (800f1b0 <tx_tcp+0x188>)
 800f130:	f241 5222 	movw	r2, #5410	@ 0x1522
 800f134:	491f      	ldr	r1, [pc, #124]	@ (800f1b4 <tx_tcp+0x18c>)
 800f136:	2004      	movs	r0, #4
 800f138:	f7fc ff5c 	bl	800bff4 <mg_log_prefix>
 800f13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f13e:	f103 050c 	add.w	r5, r3, #12
 800f142:	6a3b      	ldr	r3, [r7, #32]
 800f144:	881b      	ldrh	r3, [r3, #0]
 800f146:	b29b      	uxth	r3, r3
 800f148:	4618      	mov	r0, r3
 800f14a:	f003 fc65 	bl	8012a18 <mg_ntohs>
 800f14e:	4603      	mov	r3, r0
 800f150:	461e      	mov	r6, r3
 800f152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f154:	f103 0410 	add.w	r4, r3, #16
 800f158:	6a3b      	ldr	r3, [r7, #32]
 800f15a:	885b      	ldrh	r3, [r3, #2]
 800f15c:	b29b      	uxth	r3, r3
 800f15e:	4618      	mov	r0, r3
 800f160:	f003 fc5a 	bl	8012a18 <mg_ntohs>
 800f164:	4603      	mov	r3, r0
 800f166:	461a      	mov	r2, r3
 800f168:	6a3b      	ldr	r3, [r7, #32]
 800f16a:	7b5b      	ldrb	r3, [r3, #13]
 800f16c:	4619      	mov	r1, r3
 800f16e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f170:	9304      	str	r3, [sp, #16]
 800f172:	9103      	str	r1, [sp, #12]
 800f174:	9202      	str	r2, [sp, #8]
 800f176:	9401      	str	r4, [sp, #4]
 800f178:	4b0f      	ldr	r3, [pc, #60]	@ (800f1b8 <tx_tcp+0x190>)
 800f17a:	9300      	str	r3, [sp, #0]
 800f17c:	4633      	mov	r3, r6
 800f17e:	462a      	mov	r2, r5
 800f180:	490d      	ldr	r1, [pc, #52]	@ (800f1b8 <tx_tcp+0x190>)
 800f182:	480e      	ldr	r0, [pc, #56]	@ (800f1bc <tx_tcp+0x194>)
 800f184:	f7fc ff86 	bl	800c094 <mg_log>
              mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst,
              mg_ntohs(tcp->dport), tcp->flags, len));
  // mg_hexdump(ifp->tx.buf, PDIFF(ifp->tx.buf, tcp + 1) + len);
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 800f188:	6a3b      	ldr	r3, [r7, #32]
 800f18a:	f103 0214 	add.w	r2, r3, #20
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	695b      	ldr	r3, [r3, #20]
 800f192:	1ad3      	subs	r3, r2, r3
 800f194:	461a      	mov	r2, r3
 800f196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f198:	4413      	add	r3, r2
 800f19a:	4619      	mov	r1, r3
 800f19c:	68f8      	ldr	r0, [r7, #12]
 800f19e:	f7fe fe6d 	bl	800de7c <ether_output>
 800f1a2:	4603      	mov	r3, r0
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	372c      	adds	r7, #44	@ 0x2c
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1ac:	20000244 	.word	0x20000244
 800f1b0:	08032760 	.word	0x08032760
 800f1b4:	0802efcc 	.word	0x0802efcc
 800f1b8:	08011245 	.word	0x08011245
 800f1bc:	0803016c 	.word	0x0803016c

0800f1c0 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 800f1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1c4:	b08c      	sub	sp, #48	@ 0x30
 800f1c6:	af06      	add	r7, sp, #24
 800f1c8:	60f8      	str	r0, [r7, #12]
 800f1ca:	60b9      	str	r1, [r7, #8]
 800f1cc:	603b      	str	r3, [r7, #0]
 800f1ce:	4613      	mov	r3, r2
 800f1d0:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1d6:	7b5b      	ldrb	r3, [r3, #13]
 800f1d8:	f003 0303 	and.w	r3, r3, #3
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	bf14      	ite	ne
 800f1e0:	2301      	movne	r3, #1
 800f1e2:	2300      	moveq	r3, #0
 800f1e4:	b2db      	uxtb	r3, r3
 800f1e6:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	691b      	ldr	r3, [r3, #16]
 800f1ec:	1d9e      	adds	r6, r3, #6
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	69db      	ldr	r3, [r3, #28]
 800f1f2:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1fa:	885b      	ldrh	r3, [r3, #2]
 800f1fc:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800f202:	881b      	ldrh	r3, [r3, #0]
 800f204:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	4618      	mov	r0, r3
 800f20e:	f003 fbea 	bl	80129e6 <mg_ntohl>
 800f212:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	4413      	add	r3, r2
 800f218:	4618      	mov	r0, r3
 800f21a:	f003 fbe4 	bl	80129e6 <mg_ntohl>
 800f21e:	4601      	mov	r1, r0
 800f220:	79fa      	ldrb	r2, [r7, #7]
 800f222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f224:	9305      	str	r3, [sp, #20]
 800f226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f228:	9304      	str	r3, [sp, #16]
 800f22a:	9103      	str	r1, [sp, #12]
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	9302      	str	r3, [sp, #8]
 800f230:	9501      	str	r5, [sp, #4]
 800f232:	9400      	str	r4, [sp, #0]
 800f234:	4613      	mov	r3, r2
 800f236:	4642      	mov	r2, r8
 800f238:	4631      	mov	r1, r6
 800f23a:	68f8      	ldr	r0, [r7, #12]
 800f23c:	f7ff fef4 	bl	800f028 <tx_tcp>
 800f240:	4603      	mov	r3, r0
                buf, len);
}
 800f242:	4618      	mov	r0, r3
 800f244:	3718      	adds	r7, #24
 800f246:	46bd      	mov	sp, r7
 800f248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f24c <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 800f24c:	b5b0      	push	{r4, r5, r7, lr}
 800f24e:	b084      	sub	sp, #16
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	4618      	mov	r0, r3
 800f25c:	f7fe fae2 	bl	800d824 <mg_alloc_conn>
 800f260:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d10f      	bne.n	800f288 <accept_conn+0x3c>
    MG_ERROR(("OOM"));
 800f268:	4b4e      	ldr	r3, [pc, #312]	@ (800f3a4 <accept_conn+0x158>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	dd09      	ble.n	800f284 <accept_conn+0x38>
 800f270:	4b4d      	ldr	r3, [pc, #308]	@ (800f3a8 <accept_conn+0x15c>)
 800f272:	f241 5236 	movw	r2, #5430	@ 0x1536
 800f276:	494d      	ldr	r1, [pc, #308]	@ (800f3ac <accept_conn+0x160>)
 800f278:	2001      	movs	r0, #1
 800f27a:	f7fc febb 	bl	800bff4 <mg_log_prefix>
 800f27e:	484c      	ldr	r0, [pc, #304]	@ (800f3b0 <accept_conn+0x164>)
 800f280:	f7fc ff08 	bl	800c094 <mg_log>
    return NULL;
 800f284:	2300      	movs	r3, #0
 800f286:	e088      	b.n	800f39a <accept_conn+0x14e>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	33b0      	adds	r3, #176	@ 0xb0
 800f28c:	60bb      	str	r3, [r7, #8]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f292:	689b      	ldr	r3, [r3, #8]
 800f294:	4618      	mov	r0, r3
 800f296:	f003 fba6 	bl	80129e6 <mg_ntohl>
 800f29a:	4602      	mov	r2, r0
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	601a      	str	r2, [r3, #0]
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2a4:	685b      	ldr	r3, [r3, #4]
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f003 fb9d 	bl	80129e6 <mg_ntohl>
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	f103 0018 	add.w	r0, r3, #24
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	691b      	ldr	r3, [r3, #16]
 800f2bc:	3306      	adds	r3, #6
 800f2be:	2206      	movs	r2, #6
 800f2c0:	4619      	mov	r1, r3
 800f2c2:	f01d f958 	bl	802c576 <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 800f2c6:	2100      	movs	r1, #0
 800f2c8:	68f8      	ldr	r0, [r7, #12]
 800f2ca:	f7fe fd7b 	bl	800ddc4 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	331c      	adds	r3, #28
 800f2d2:	683a      	ldr	r2, [r7, #0]
 800f2d4:	69d2      	ldr	r2, [r2, #28]
 800f2d6:	320c      	adds	r2, #12
 800f2d8:	6812      	ldr	r2, [r2, #0]
 800f2da:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2e0:	881b      	ldrh	r3, [r3, #0]
 800f2e2:	b29a      	uxth	r2, r3
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 800f2e8:	4b2e      	ldr	r3, [pc, #184]	@ (800f3a4 <accept_conn+0x158>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	2b02      	cmp	r3, #2
 800f2ee:	dd0e      	ble.n	800f30e <accept_conn+0xc2>
 800f2f0:	4b2d      	ldr	r3, [pc, #180]	@ (800f3a8 <accept_conn+0x15c>)
 800f2f2:	f241 523f 	movw	r2, #5439	@ 0x153f
 800f2f6:	492d      	ldr	r1, [pc, #180]	@ (800f3ac <accept_conn+0x160>)
 800f2f8:	2003      	movs	r0, #3
 800f2fa:	f7fc fe7b 	bl	800bff4 <mg_log_prefix>
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	331c      	adds	r3, #28
 800f306:	4a2b      	ldr	r2, [pc, #172]	@ (800f3b4 <accept_conn+0x168>)
 800f308:	482b      	ldr	r0, [pc, #172]	@ (800f3b8 <accept_conn+0x16c>)
 800f30a:	f7fc fec3 	bl	800c094 <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	685b      	ldr	r3, [r3, #4]
 800f312:	681a      	ldr	r2, [r3, #0]
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	601a      	str	r2, [r3, #0]
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	685b      	ldr	r3, [r3, #4]
 800f31c:	68fa      	ldr	r2, [r7, #12]
 800f31e:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 800f320:	68fa      	ldr	r2, [r7, #12]
 800f322:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800f326:	f043 0304 	orr.w	r3, r3, #4
 800f32a:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800f334:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f338:	b2d9      	uxtb	r1, r3
 800f33a:	68fa      	ldr	r2, [r7, #12]
 800f33c:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800f340:	f361 03c3 	bfi	r3, r1, #3, #1
 800f344:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  c->pfn = lsn->pfn;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->loc = lsn->loc;
 800f354:	68fa      	ldr	r2, [r7, #12]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f102 0408 	add.w	r4, r2, #8
 800f35c:	f103 0508 	add.w	r5, r3, #8
 800f360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f364:	682b      	ldr	r3, [r5, #0]
 800f366:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->fn = lsn->fn;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	679a      	str	r2, [r3, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	67da      	str	r2, [r3, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 800f384:	2200      	movs	r2, #0
 800f386:	2101      	movs	r1, #1
 800f388:	68f8      	ldr	r0, [r7, #12]
 800f38a:	f7f7 fc3f 	bl	8006c0c <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 800f38e:	2200      	movs	r2, #0
 800f390:	2105      	movs	r1, #5
 800f392:	68f8      	ldr	r0, [r7, #12]
 800f394:	f7f7 fc3a 	bl	8006c0c <mg_call>
  return c;
 800f398:	68fb      	ldr	r3, [r7, #12]
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	3710      	adds	r7, #16
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bdb0      	pop	{r4, r5, r7, pc}
 800f3a2:	bf00      	nop
 800f3a4:	20000244 	.word	0x20000244
 800f3a8:	08032768 	.word	0x08032768
 800f3ac:	0802efcc 	.word	0x0802efcc
 800f3b0:	0802fda8 	.word	0x0802fda8
 800f3b4:	080112bd 	.word	0x080112bd
 800f3b8:	08030190 	.word	0x08030190

0800f3bc <trim_len>:

static size_t trim_len(struct mg_connection *c, size_t len) {
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b08a      	sub	sp, #40	@ 0x28
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	685b      	ldr	r3, [r3, #4]
 800f3ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f3cc:	627b      	str	r3, [r7, #36]	@ 0x24
  size_t eth_h_len = 14, ip_max_h_len = 24, tcp_max_h_len = 60, udp_h_len = 8;
 800f3ce:	230e      	movs	r3, #14
 800f3d0:	623b      	str	r3, [r7, #32]
 800f3d2:	2318      	movs	r3, #24
 800f3d4:	61fb      	str	r3, [r7, #28]
 800f3d6:	233c      	movs	r3, #60	@ 0x3c
 800f3d8:	61bb      	str	r3, [r7, #24]
 800f3da:	2308      	movs	r3, #8
 800f3dc:	617b      	str	r3, [r7, #20]
  size_t max_headers_len =
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 800f3de:	6a3a      	ldr	r2, [r7, #32]
 800f3e0:	69fb      	ldr	r3, [r7, #28]
 800f3e2:	441a      	add	r2, r3
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800f3ea:	f003 0301 	and.w	r3, r3, #1
 800f3ee:	b2db      	uxtb	r3, r3
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d001      	beq.n	800f3f8 <trim_len+0x3c>
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	e000      	b.n	800f3fa <trim_len+0x3e>
 800f3f8:	69bb      	ldr	r3, [r7, #24]
  size_t max_headers_len =
 800f3fa:	4413      	add	r3, r2
 800f3fc:	613b      	str	r3, [r7, #16]
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800f404:	f003 0301 	and.w	r3, r3, #1
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d103      	bne.n	800f416 <trim_len+0x5a>
 800f40e:	693a      	ldr	r2, [r7, #16]
 800f410:	6a3b      	ldr	r3, [r7, #32]
 800f412:	1ad3      	subs	r3, r2, r3
 800f414:	e000      	b.n	800f418 <trim_len+0x5c>
 800f416:	2344      	movs	r3, #68	@ 0x44
 800f418:	60fb      	str	r3, [r7, #12]

  // If the frame exceeds the available buffer, trim the length
  if (len + max_headers_len > ifp->tx.len) {
 800f41a:	683a      	ldr	r2, [r7, #0]
 800f41c:	693b      	ldr	r3, [r7, #16]
 800f41e:	441a      	add	r2, r3
 800f420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f422:	699b      	ldr	r3, [r3, #24]
 800f424:	429a      	cmp	r2, r3
 800f426:	d904      	bls.n	800f432 <trim_len+0x76>
    len = ifp->tx.len - max_headers_len;
 800f428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f42a:	699a      	ldr	r2, [r3, #24]
 800f42c:	693b      	ldr	r3, [r7, #16]
 800f42e:	1ad3      	subs	r3, r2, r3
 800f430:	603b      	str	r3, [r7, #0]
  }
  // Ensure the MTU isn't lower than the minimum allowed value
  if (ifp->mtu < min_mtu) {
 800f432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f434:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800f438:	461a      	mov	r2, r3
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	4293      	cmp	r3, r2
 800f43e:	d913      	bls.n	800f468 <trim_len+0xac>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 800f440:	4b20      	ldr	r3, [pc, #128]	@ (800f4c4 <trim_len+0x108>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	2b00      	cmp	r3, #0
 800f446:	dd0a      	ble.n	800f45e <trim_len+0xa2>
 800f448:	4b1f      	ldr	r3, [pc, #124]	@ (800f4c8 <trim_len+0x10c>)
 800f44a:	f241 525a 	movw	r2, #5466	@ 0x155a
 800f44e:	491f      	ldr	r1, [pc, #124]	@ (800f4cc <trim_len+0x110>)
 800f450:	2001      	movs	r0, #1
 800f452:	f7fc fdcf 	bl	800bff4 <mg_log_prefix>
 800f456:	68f9      	ldr	r1, [r7, #12]
 800f458:	481d      	ldr	r0, [pc, #116]	@ (800f4d0 <trim_len+0x114>)
 800f45a:	f7fc fe1b 	bl	800c094 <mg_log>
    ifp->mtu = (uint16_t) min_mtu;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	b29a      	uxth	r2, r3
 800f462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f464:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  }
  // If the total packet size exceeds the MTU, trim the length
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 800f468:	683a      	ldr	r2, [r7, #0]
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	441a      	add	r2, r3
 800f46e:	6a3b      	ldr	r3, [r7, #32]
 800f470:	1ad3      	subs	r3, r2, r3
 800f472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f474:	f8b2 2040 	ldrh.w	r2, [r2, #64]	@ 0x40
 800f478:	4293      	cmp	r3, r2
 800f47a:	d91e      	bls.n	800f4ba <trim_len+0xfe>
    len = ifp->mtu - max_headers_len + eth_h_len;
 800f47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f47e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800f482:	461a      	mov	r2, r3
 800f484:	693b      	ldr	r3, [r7, #16]
 800f486:	1ad3      	subs	r3, r2, r3
 800f488:	6a3a      	ldr	r2, [r7, #32]
 800f48a:	4413      	add	r3, r2
 800f48c:	603b      	str	r3, [r7, #0]
    if (c->is_udp) {
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800f494:	f003 0301 	and.w	r3, r3, #1
 800f498:	b2db      	uxtb	r3, r3
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d00d      	beq.n	800f4ba <trim_len+0xfe>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 800f49e:	4b09      	ldr	r3, [pc, #36]	@ (800f4c4 <trim_len+0x108>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	dd09      	ble.n	800f4ba <trim_len+0xfe>
 800f4a6:	4b08      	ldr	r3, [pc, #32]	@ (800f4c8 <trim_len+0x10c>)
 800f4a8:	f241 5261 	movw	r2, #5473	@ 0x1561
 800f4ac:	4907      	ldr	r1, [pc, #28]	@ (800f4cc <trim_len+0x110>)
 800f4ae:	2001      	movs	r0, #1
 800f4b0:	f7fc fda0 	bl	800bff4 <mg_log_prefix>
 800f4b4:	4807      	ldr	r0, [pc, #28]	@ (800f4d4 <trim_len+0x118>)
 800f4b6:	f7fc fded 	bl	800c094 <mg_log>
    }
  }

  return len;
 800f4ba:	683b      	ldr	r3, [r7, #0]
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	3728      	adds	r7, #40	@ 0x28
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	20000244 	.word	0x20000244
 800f4c8:	08032774 	.word	0x08032774
 800f4cc:	0802efcc 	.word	0x0802efcc
 800f4d0:	080301a0 	.word	0x080301a0
 800f4d4:	080301cc 	.word	0x080301cc

0800f4d8 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 800f4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4da:	b08f      	sub	sp, #60	@ 0x3c
 800f4dc:	af06      	add	r7, sp, #24
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	60b9      	str	r1, [r7, #8]
 800f4e2:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	685b      	ldr	r3, [r3, #4]
 800f4e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4ea:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	33b0      	adds	r3, #176	@ 0xb0
 800f4f0:	61bb      	str	r3, [r7, #24]
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	331c      	adds	r3, #28
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	617b      	str	r3, [r7, #20]
  len = trim_len(c, len);
 800f4fa:	6879      	ldr	r1, [r7, #4]
 800f4fc:	68f8      	ldr	r0, [r7, #12]
 800f4fe:	f7ff ff5d 	bl	800f3bc <trim_len>
 800f502:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800f50a:	f003 0301 	and.w	r3, r3, #1
 800f50e:	b2db      	uxtb	r3, r3
 800f510:	2b00      	cmp	r3, #0
 800f512:	d015      	beq.n	800f540 <mg_io_send+0x68>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 800f514:	69bb      	ldr	r3, [r7, #24]
 800f516:	f103 0118 	add.w	r1, r3, #24
 800f51a:	69fb      	ldr	r3, [r7, #28]
 800f51c:	6898      	ldr	r0, [r3, #8]
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	8b1c      	ldrh	r4, [r3, #24]
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f526:	687a      	ldr	r2, [r7, #4]
 800f528:	9203      	str	r2, [sp, #12]
 800f52a:	68ba      	ldr	r2, [r7, #8]
 800f52c:	9202      	str	r2, [sp, #8]
 800f52e:	9301      	str	r3, [sp, #4]
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	9300      	str	r3, [sp, #0]
 800f534:	4623      	mov	r3, r4
 800f536:	4602      	mov	r2, r0
 800f538:	69f8      	ldr	r0, [r7, #28]
 800f53a:	f7fe fdfb 	bl	800e134 <tx_udp>
 800f53e:	e03d      	b.n	800f5bc <mg_io_send+0xe4>
  } else {
    size_t sent =
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 800f540:	69bb      	ldr	r3, [r7, #24]
 800f542:	f103 0618 	add.w	r6, r3, #24
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	8b1c      	ldrh	r4, [r3, #24]
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800f54e:	69bb      	ldr	r3, [r7, #24]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	4618      	mov	r0, r3
 800f554:	f003 fa47 	bl	80129e6 <mg_ntohl>
 800f558:	6038      	str	r0, [r7, #0]
 800f55a:	69bb      	ldr	r3, [r7, #24]
 800f55c:	685b      	ldr	r3, [r3, #4]
 800f55e:	4618      	mov	r0, r3
 800f560:	f003 fa41 	bl	80129e6 <mg_ntohl>
 800f564:	4602      	mov	r2, r0
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	9305      	str	r3, [sp, #20]
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	9304      	str	r3, [sp, #16]
 800f56e:	9203      	str	r2, [sp, #12]
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	9302      	str	r3, [sp, #8]
 800f574:	9501      	str	r5, [sp, #4]
 800f576:	9400      	str	r4, [sp, #0]
 800f578:	2318      	movs	r3, #24
 800f57a:	697a      	ldr	r2, [r7, #20]
 800f57c:	4631      	mov	r1, r6
 800f57e:	69f8      	ldr	r0, [r7, #28]
 800f580:	f7ff fd52 	bl	800f028 <tx_tcp>
 800f584:	6138      	str	r0, [r7, #16]
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len);
    if (sent == 0) {
 800f586:	693b      	ldr	r3, [r7, #16]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d102      	bne.n	800f592 <mg_io_send+0xba>
      return MG_IO_WAIT;
 800f58c:	f06f 0301 	mvn.w	r3, #1
 800f590:	e015      	b.n	800f5be <mg_io_send+0xe6>
    } else if (sent == (size_t) -1) {
 800f592:	693b      	ldr	r3, [r7, #16]
 800f594:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f598:	d102      	bne.n	800f5a0 <mg_io_send+0xc8>
      return MG_IO_ERR;
 800f59a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f59e:	e00e      	b.n	800f5be <mg_io_send+0xe6>
    } else {
      s->seq += (uint32_t) len;
 800f5a0:	69bb      	ldr	r3, [r7, #24]
 800f5a2:	681a      	ldr	r2, [r3, #0]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	441a      	add	r2, r3
 800f5a8:	69bb      	ldr	r3, [r7, #24]
 800f5aa:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 800f5ac:	69bb      	ldr	r3, [r7, #24]
 800f5ae:	7f9b      	ldrb	r3, [r3, #30]
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d103      	bne.n	800f5bc <mg_io_send+0xe4>
 800f5b4:	2100      	movs	r1, #0
 800f5b6:	68f8      	ldr	r0, [r7, #12]
 800f5b8:	f7fe fc04 	bl	800ddc4 <settmout>
    }
  }
  return (long) len;
 800f5bc:	687b      	ldr	r3, [r7, #4]
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3724      	adds	r7, #36	@ 0x24
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800f5c8 <handle_tls_recv>:

static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b084      	sub	sp, #16
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
 800f5d0:	6039      	str	r1, [r7, #0]
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	681a      	ldr	r2, [r3, #0]
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	689b      	ldr	r3, [r3, #8]
 800f5da:	18d1      	adds	r1, r2, r3
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	685a      	ldr	r2, [r3, #4]
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	689b      	ldr	r3, [r3, #8]
 800f5e4:	1ad3      	subs	r3, r2, r3
 800f5e6:	461a      	mov	r2, r3
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f003 f83b 	bl	8012664 <mg_tls_recv>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	60fb      	str	r3, [r7, #12]
  if (n == MG_IO_ERR) {
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f5f8:	d104      	bne.n	800f604 <handle_tls_recv+0x3c>
    mg_error(c, "TLS recv error");
 800f5fa:	490c      	ldr	r1, [pc, #48]	@ (800f62c <handle_tls_recv+0x64>)
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f7f7 fb25 	bl	8006c4c <mg_error>
  } else if (n > 0) {
    // Decrypted successfully - trigger MG_EV_READ
    io->len += (size_t) n;
    mg_call(c, MG_EV_READ, &n);
  }
}
 800f602:	e00f      	b.n	800f624 <handle_tls_recv+0x5c>
  } else if (n > 0) {
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	2b00      	cmp	r3, #0
 800f608:	dd0c      	ble.n	800f624 <handle_tls_recv+0x5c>
    io->len += (size_t) n;
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	689b      	ldr	r3, [r3, #8]
 800f60e:	68fa      	ldr	r2, [r7, #12]
 800f610:	441a      	add	r2, r3
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	609a      	str	r2, [r3, #8]
    mg_call(c, MG_EV_READ, &n);
 800f616:	f107 030c 	add.w	r3, r7, #12
 800f61a:	461a      	mov	r2, r3
 800f61c:	2107      	movs	r1, #7
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f7f7 faf4 	bl	8006c0c <mg_call>
}
 800f624:	bf00      	nop
 800f626:	3710      	adds	r7, #16
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}
 800f62c:	080301f8 	.word	0x080301f8

0800f630 <read_conn>:

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 800f630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f634:	b090      	sub	sp, #64	@ 0x40
 800f636:	af06      	add	r7, sp, #24
 800f638:	60f8      	str	r0, [r7, #12]
 800f63a:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	33b0      	adds	r3, #176	@ 0xb0
 800f640:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f64c:	b2db      	uxtb	r3, r3
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d002      	beq.n	800f658 <read_conn+0x28>
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	3368      	adds	r3, #104	@ 0x68
 800f656:	e001      	b.n	800f65c <read_conn+0x2c>
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	3338      	adds	r3, #56	@ 0x38
 800f65c:	61fb      	str	r3, [r7, #28]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f662:	685b      	ldr	r3, [r3, #4]
 800f664:	4618      	mov	r0, r3
 800f666:	f003 f9be 	bl	80129e6 <mg_ntohl>
 800f66a:	61b8      	str	r0, [r7, #24]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	331c      	adds	r3, #28
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	613b      	str	r3, [r7, #16]
  if (pkt->tcp->flags & TH_FIN) {
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f678:	7b5b      	ldrb	r3, [r3, #13]
 800f67a:	f003 0301 	and.w	r3, r3, #1
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d070      	beq.n	800f764 <read_conn+0x134>
    // If we initiated the closure, we reply with ACK upon receiving FIN
    // If we didn't initiate it, we reply with FIN as part of the normal TCP
    // closure process
    uint8_t flags = TH_ACK;
 800f682:	2310      	movs	r3, #16
 800f684:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f68c:	685b      	ldr	r3, [r3, #4]
 800f68e:	4618      	mov	r0, r3
 800f690:	f003 f9a9 	bl	80129e6 <mg_ntohl>
 800f694:	4602      	mov	r2, r0
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	68db      	ldr	r3, [r3, #12]
 800f69a:	4413      	add	r3, r2
 800f69c:	1c5a      	adds	r2, r3, #1
 800f69e:	6a3b      	ldr	r3, [r7, #32]
 800f6a0:	605a      	str	r2, [r3, #4]
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800f6a8:	f003 0310 	and.w	r3, r3, #16
 800f6ac:	b2db      	uxtb	r3, r3
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d01e      	beq.n	800f6f0 <read_conn+0xc0>
 800f6b2:	6a3b      	ldr	r3, [r7, #32]
 800f6b4:	7f9b      	ldrb	r3, [r3, #30]
 800f6b6:	2b04      	cmp	r3, #4
 800f6b8:	d11a      	bne.n	800f6f0 <read_conn+0xc0>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 800f6ba:	6a3b      	ldr	r3, [r7, #32]
 800f6bc:	681c      	ldr	r4, [r3, #0]
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6c2:	689b      	ldr	r3, [r3, #8]
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f003 f98e 	bl	80129e6 <mg_ntohl>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	429c      	cmp	r4, r3
 800f6ce:	d105      	bne.n	800f6dc <read_conn+0xac>
        s->seq++;                               // Yes. Increment our SEQ
 800f6d0:	6a3b      	ldr	r3, [r7, #32]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	1c5a      	adds	r2, r3, #1
 800f6d6:	6a3b      	ldr	r3, [r7, #32]
 800f6d8:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 800f6da:	e01a      	b.n	800f712 <read_conn+0xe2>
      } else {                                  // Otherwise,
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6e0:	689b      	ldr	r3, [r3, #8]
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f003 f97f 	bl	80129e6 <mg_ntohl>
 800f6e8:	4602      	mov	r2, r0
 800f6ea:	6a3b      	ldr	r3, [r7, #32]
 800f6ec:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 800f6ee:	e010      	b.n	800f712 <read_conn+0xe2>
      }
    } else {
      flags |= TH_FIN;
 800f6f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f6f4:	f043 0301 	orr.w	r3, r3, #1
 800f6f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      c->is_draining = 1;
 800f6fc:	68fa      	ldr	r2, [r7, #12]
 800f6fe:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800f702:	f043 0310 	orr.w	r3, r3, #16
 800f706:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 800f70a:	2104      	movs	r1, #4
 800f70c:	68f8      	ldr	r0, [r7, #12]
 800f70e:	f7fe fb59 	bl	800ddc4 <settmout>
    }
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	685b      	ldr	r3, [r3, #4]
 800f716:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 800f718:	6a3b      	ldr	r3, [r7, #32]
 800f71a:	f103 0818 	add.w	r8, r3, #24
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	607b      	str	r3, [r7, #4]
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	8b1c      	ldrh	r4, [r3, #24]
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800f72a:	6a3b      	ldr	r3, [r7, #32]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	4618      	mov	r0, r3
 800f730:	f003 f959 	bl	80129e6 <mg_ntohl>
 800f734:	6038      	str	r0, [r7, #0]
 800f736:	6a3b      	ldr	r3, [r7, #32]
 800f738:	685b      	ldr	r3, [r3, #4]
 800f73a:	4618      	mov	r0, r3
 800f73c:	f003 f953 	bl	80129e6 <mg_ntohl>
 800f740:	4602      	mov	r2, r0
 800f742:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f746:	2100      	movs	r1, #0
 800f748:	9105      	str	r1, [sp, #20]
 800f74a:	4990      	ldr	r1, [pc, #576]	@ (800f98c <read_conn+0x35c>)
 800f74c:	9104      	str	r1, [sp, #16]
 800f74e:	9203      	str	r2, [sp, #12]
 800f750:	6839      	ldr	r1, [r7, #0]
 800f752:	9102      	str	r1, [sp, #8]
 800f754:	9501      	str	r5, [sp, #4]
 800f756:	9400      	str	r4, [sp, #0]
 800f758:	687a      	ldr	r2, [r7, #4]
 800f75a:	4641      	mov	r1, r8
 800f75c:	4630      	mov	r0, r6
 800f75e:	f7ff fc63 	bl	800f028 <tx_tcp>
      // Plain text connection, data is already in c->recv, trigger
      // MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800f762:	e173      	b.n	800fa4c <read_conn+0x41c>
  } else if (pkt->pay.len == 0) {
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	68db      	ldr	r3, [r3, #12]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	f000 816f 	beq.w	800fa4c <read_conn+0x41c>
  } else if (seq != s->ack) {
 800f76e:	6a3b      	ldr	r3, [r7, #32]
 800f770:	685b      	ldr	r3, [r3, #4]
 800f772:	69ba      	ldr	r2, [r7, #24]
 800f774:	429a      	cmp	r2, r3
 800f776:	d059      	beq.n	800f82c <read_conn+0x1fc>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	4618      	mov	r0, r3
 800f780:	f003 f931 	bl	80129e6 <mg_ntohl>
 800f784:	4602      	mov	r2, r0
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	68db      	ldr	r3, [r3, #12]
 800f78a:	4413      	add	r3, r2
 800f78c:	617b      	str	r3, [r7, #20]
    if (s->ack == ack) {
 800f78e:	6a3b      	ldr	r3, [r7, #32]
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	697a      	ldr	r2, [r7, #20]
 800f794:	429a      	cmp	r2, r3
 800f796:	d10f      	bne.n	800f7b8 <read_conn+0x188>
      MG_VERBOSE(("ignoring duplicate pkt"));
 800f798:	4b7d      	ldr	r3, [pc, #500]	@ (800f990 <read_conn+0x360>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	2b03      	cmp	r3, #3
 800f79e:	f340 8155 	ble.w	800fa4c <read_conn+0x41c>
 800f7a2:	4b7c      	ldr	r3, [pc, #496]	@ (800f994 <read_conn+0x364>)
 800f7a4:	f241 52a8 	movw	r2, #5544	@ 0x15a8
 800f7a8:	497b      	ldr	r1, [pc, #492]	@ (800f998 <read_conn+0x368>)
 800f7aa:	2004      	movs	r0, #4
 800f7ac:	f7fc fc22 	bl	800bff4 <mg_log_prefix>
 800f7b0:	487a      	ldr	r0, [pc, #488]	@ (800f99c <read_conn+0x36c>)
 800f7b2:	f7fc fc6f 	bl	800c094 <mg_log>
}
 800f7b6:	e149      	b.n	800fa4c <read_conn+0x41c>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 800f7b8:	4b75      	ldr	r3, [pc, #468]	@ (800f990 <read_conn+0x360>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	2b03      	cmp	r3, #3
 800f7be:	dd0d      	ble.n	800f7dc <read_conn+0x1ac>
 800f7c0:	4b74      	ldr	r3, [pc, #464]	@ (800f994 <read_conn+0x364>)
 800f7c2:	f241 52aa 	movw	r2, #5546	@ 0x15aa
 800f7c6:	4974      	ldr	r1, [pc, #464]	@ (800f998 <read_conn+0x368>)
 800f7c8:	2004      	movs	r0, #4
 800f7ca:	f7fc fc13 	bl	800bff4 <mg_log_prefix>
 800f7ce:	6a3b      	ldr	r3, [r7, #32]
 800f7d0:	685a      	ldr	r2, [r3, #4]
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	69b9      	ldr	r1, [r7, #24]
 800f7d6:	4872      	ldr	r0, [pc, #456]	@ (800f9a0 <read_conn+0x370>)
 800f7d8:	f7fc fc5c 	bl	800c094 <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 800f7e2:	6a3b      	ldr	r3, [r7, #32]
 800f7e4:	f103 0818 	add.w	r8, r3, #24
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	607b      	str	r3, [r7, #4]
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	8b1c      	ldrh	r4, [r3, #24]
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800f7f4:	6a3b      	ldr	r3, [r7, #32]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f003 f8f4 	bl	80129e6 <mg_ntohl>
 800f7fe:	6038      	str	r0, [r7, #0]
 800f800:	6a3b      	ldr	r3, [r7, #32]
 800f802:	685b      	ldr	r3, [r3, #4]
 800f804:	4618      	mov	r0, r3
 800f806:	f003 f8ee 	bl	80129e6 <mg_ntohl>
 800f80a:	4603      	mov	r3, r0
 800f80c:	2200      	movs	r2, #0
 800f80e:	9205      	str	r2, [sp, #20]
 800f810:	4a5e      	ldr	r2, [pc, #376]	@ (800f98c <read_conn+0x35c>)
 800f812:	9204      	str	r2, [sp, #16]
 800f814:	9303      	str	r3, [sp, #12]
 800f816:	6839      	ldr	r1, [r7, #0]
 800f818:	9102      	str	r1, [sp, #8]
 800f81a:	9501      	str	r5, [sp, #4]
 800f81c:	9400      	str	r4, [sp, #0]
 800f81e:	2310      	movs	r3, #16
 800f820:	687a      	ldr	r2, [r7, #4]
 800f822:	4641      	mov	r1, r8
 800f824:	4630      	mov	r0, r6
 800f826:	f7ff fbff 	bl	800f028 <tx_tcp>
}
 800f82a:	e10f      	b.n	800fa4c <read_conn+0x41c>
  } else if (io->size - io->len < pkt->pay.len &&
 800f82c:	69fb      	ldr	r3, [r7, #28]
 800f82e:	685a      	ldr	r2, [r3, #4]
 800f830:	69fb      	ldr	r3, [r7, #28]
 800f832:	689b      	ldr	r3, [r3, #8]
 800f834:	1ad2      	subs	r2, r2, r3
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	68db      	ldr	r3, [r3, #12]
 800f83a:	429a      	cmp	r2, r3
 800f83c:	d210      	bcs.n	800f860 <read_conn+0x230>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800f83e:	69fb      	ldr	r3, [r7, #28]
 800f840:	689a      	ldr	r2, [r3, #8]
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	68db      	ldr	r3, [r3, #12]
 800f846:	4413      	add	r3, r2
 800f848:	4619      	mov	r1, r3
 800f84a:	69f8      	ldr	r0, [r7, #28]
 800f84c:	f7fb fbda 	bl	800b004 <mg_iobuf_resize>
 800f850:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 800f852:	2b00      	cmp	r3, #0
 800f854:	d104      	bne.n	800f860 <read_conn+0x230>
    mg_error(c, "oom");
 800f856:	4953      	ldr	r1, [pc, #332]	@ (800f9a4 <read_conn+0x374>)
 800f858:	68f8      	ldr	r0, [r7, #12]
 800f85a:	f7f7 f9f7 	bl	8006c4c <mg_error>
 800f85e:	e0f5      	b.n	800fa4c <read_conn+0x41c>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 800f860:	69fb      	ldr	r3, [r7, #28]
 800f862:	681a      	ldr	r2, [r3, #0]
 800f864:	69fb      	ldr	r3, [r7, #28]
 800f866:	689b      	ldr	r3, [r3, #8]
 800f868:	18d0      	adds	r0, r2, r3
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	6899      	ldr	r1, [r3, #8]
 800f86e:	68bb      	ldr	r3, [r7, #8]
 800f870:	68db      	ldr	r3, [r3, #12]
 800f872:	461a      	mov	r2, r3
 800f874:	f01c fe7f 	bl	802c576 <memcpy>
    io->len += pkt->pay.len;
 800f878:	69fb      	ldr	r3, [r7, #28]
 800f87a:	689a      	ldr	r2, [r3, #8]
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	68db      	ldr	r3, [r3, #12]
 800f880:	441a      	add	r2, r3
 800f882:	69fb      	ldr	r3, [r7, #28]
 800f884:	609a      	str	r2, [r3, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 800f886:	4b42      	ldr	r3, [pc, #264]	@ (800f990 <read_conn+0x360>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	2b03      	cmp	r3, #3
 800f88c:	dd15      	ble.n	800f8ba <read_conn+0x28a>
 800f88e:	4b41      	ldr	r3, [pc, #260]	@ (800f994 <read_conn+0x364>)
 800f890:	f241 52bb 	movw	r2, #5563	@ 0x15bb
 800f894:	4940      	ldr	r1, [pc, #256]	@ (800f998 <read_conn+0x368>)
 800f896:	2004      	movs	r0, #4
 800f898:	f7fc fbac 	bl	800bff4 <mg_log_prefix>
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8a4:	685b      	ldr	r3, [r3, #4]
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f003 f89d 	bl	80129e6 <mg_ntohl>
 800f8ac:	4602      	mov	r2, r0
 800f8ae:	6a3b      	ldr	r3, [r7, #32]
 800f8b0:	685b      	ldr	r3, [r3, #4]
 800f8b2:	4621      	mov	r1, r4
 800f8b4:	483c      	ldr	r0, [pc, #240]	@ (800f9a8 <read_conn+0x378>)
 800f8b6:	f7fc fbed 	bl	800c094 <mg_log>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f003 f890 	bl	80129e6 <mg_ntohl>
 800f8c6:	4602      	mov	r2, r0
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	68db      	ldr	r3, [r3, #12]
 800f8cc:	441a      	add	r2, r3
 800f8ce:	6a3b      	ldr	r3, [r7, #32]
 800f8d0:	605a      	str	r2, [r3, #4]
    s->unacked += pkt->pay.len;
 800f8d2:	6a3b      	ldr	r3, [r7, #32]
 800f8d4:	695a      	ldr	r2, [r3, #20]
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	68db      	ldr	r3, [r3, #12]
 800f8da:	441a      	add	r2, r3
 800f8dc:	6a3b      	ldr	r3, [r7, #32]
 800f8de:	615a      	str	r2, [r3, #20]
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 800f8e0:	6a3b      	ldr	r3, [r7, #32]
 800f8e2:	695b      	ldr	r3, [r3, #20]
 800f8e4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	d961      	bls.n	800f9b0 <read_conn+0x380>
 800f8ec:	6a3b      	ldr	r3, [r7, #32]
 800f8ee:	691a      	ldr	r2, [r3, #16]
 800f8f0:	6a3b      	ldr	r3, [r7, #32]
 800f8f2:	685b      	ldr	r3, [r3, #4]
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d05b      	beq.n	800f9b0 <read_conn+0x380>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 800f8f8:	4b25      	ldr	r3, [pc, #148]	@ (800f990 <read_conn+0x360>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	2b03      	cmp	r3, #3
 800f8fe:	dd0e      	ble.n	800f91e <read_conn+0x2ee>
 800f900:	4b24      	ldr	r3, [pc, #144]	@ (800f994 <read_conn+0x364>)
 800f902:	f241 52c2 	movw	r2, #5570	@ 0x15c2
 800f906:	4924      	ldr	r1, [pc, #144]	@ (800f998 <read_conn+0x368>)
 800f908:	2004      	movs	r0, #4
 800f90a:	f7fc fb73 	bl	800bff4 <mg_log_prefix>
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800f912:	6a3b      	ldr	r3, [r7, #32]
 800f914:	691b      	ldr	r3, [r3, #16]
 800f916:	461a      	mov	r2, r3
 800f918:	4824      	ldr	r0, [pc, #144]	@ (800f9ac <read_conn+0x37c>)
 800f91a:	f7fc fbbb 	bl	800c094 <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	685b      	ldr	r3, [r3, #4]
 800f922:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 800f924:	6a3b      	ldr	r3, [r7, #32]
 800f926:	f103 0818 	add.w	r8, r3, #24
 800f92a:	693b      	ldr	r3, [r7, #16]
 800f92c:	607b      	str	r3, [r7, #4]
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	8b1c      	ldrh	r4, [r3, #24]
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800f936:	6a3b      	ldr	r3, [r7, #32]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	4618      	mov	r0, r3
 800f93c:	f003 f853 	bl	80129e6 <mg_ntohl>
 800f940:	6038      	str	r0, [r7, #0]
 800f942:	6a3b      	ldr	r3, [r7, #32]
 800f944:	685b      	ldr	r3, [r3, #4]
 800f946:	4618      	mov	r0, r3
 800f948:	f003 f84d 	bl	80129e6 <mg_ntohl>
 800f94c:	4603      	mov	r3, r0
 800f94e:	2200      	movs	r2, #0
 800f950:	9205      	str	r2, [sp, #20]
 800f952:	2200      	movs	r2, #0
 800f954:	9204      	str	r2, [sp, #16]
 800f956:	9303      	str	r3, [sp, #12]
 800f958:	6839      	ldr	r1, [r7, #0]
 800f95a:	9102      	str	r1, [sp, #8]
 800f95c:	9501      	str	r5, [sp, #4]
 800f95e:	9400      	str	r4, [sp, #0]
 800f960:	2310      	movs	r3, #16
 800f962:	687a      	ldr	r2, [r7, #4]
 800f964:	4641      	mov	r1, r8
 800f966:	4630      	mov	r0, r6
 800f968:	f7ff fb5e 	bl	800f028 <tx_tcp>
      s->unacked = 0;
 800f96c:	6a3b      	ldr	r3, [r7, #32]
 800f96e:	2200      	movs	r2, #0
 800f970:	615a      	str	r2, [r3, #20]
      s->acked = s->ack;
 800f972:	6a3b      	ldr	r3, [r7, #32]
 800f974:	685a      	ldr	r2, [r3, #4]
 800f976:	6a3b      	ldr	r3, [r7, #32]
 800f978:	611a      	str	r2, [r3, #16]
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 800f97a:	6a3b      	ldr	r3, [r7, #32]
 800f97c:	7f9b      	ldrb	r3, [r3, #30]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d01e      	beq.n	800f9c0 <read_conn+0x390>
 800f982:	2100      	movs	r1, #0
 800f984:	68f8      	ldr	r0, [r7, #12]
 800f986:	f7fe fa1d 	bl	800ddc4 <settmout>
 800f98a:	e019      	b.n	800f9c0 <read_conn+0x390>
 800f98c:	0802f694 	.word	0x0802f694
 800f990:	20000244 	.word	0x20000244
 800f994:	08032780 	.word	0x08032780
 800f998:	0802efcc 	.word	0x0802efcc
 800f99c:	08030208 	.word	0x08030208
 800f9a0:	08030220 	.word	0x08030220
 800f9a4:	08030168 	.word	0x08030168
 800f9a8:	08030238 	.word	0x08030238
 800f9ac:	0803024c 	.word	0x0803024c
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 800f9b0:	6a3b      	ldr	r3, [r7, #32]
 800f9b2:	7f9b      	ldrb	r3, [r3, #30]
 800f9b4:	2b01      	cmp	r3, #1
 800f9b6:	d003      	beq.n	800f9c0 <read_conn+0x390>
 800f9b8:	2101      	movs	r1, #1
 800f9ba:	68f8      	ldr	r0, [r7, #12]
 800f9bc:	f7fe fa02 	bl	800ddc4 <settmout>
    if (c->is_tls && c->is_tls_hs) {
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f9c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9ca:	b2db      	uxtb	r3, r3
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d00b      	beq.n	800f9e8 <read_conn+0x3b8>
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f9d6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f9da:	b2db      	uxtb	r3, r3
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d003      	beq.n	800f9e8 <read_conn+0x3b8>
      mg_tls_handshake(c);
 800f9e0:	68f8      	ldr	r0, [r7, #12]
 800f9e2:	f002 fe2b 	bl	801263c <mg_tls_handshake>
 800f9e6:	e031      	b.n	800fa4c <read_conn+0x41c>
    } else if (c->is_tls) {
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f9ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9f2:	b2db      	uxtb	r3, r3
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d021      	beq.n	800fa3c <read_conn+0x40c>
      io = &c->recv;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	3338      	adds	r3, #56	@ 0x38
 800f9fc:	61fb      	str	r3, [r7, #28]
      if (io->size - io->len < pkt->pay.len &&
 800f9fe:	69fb      	ldr	r3, [r7, #28]
 800fa00:	685a      	ldr	r2, [r3, #4]
 800fa02:	69fb      	ldr	r3, [r7, #28]
 800fa04:	689b      	ldr	r3, [r3, #8]
 800fa06:	1ad2      	subs	r2, r2, r3
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	68db      	ldr	r3, [r3, #12]
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d210      	bcs.n	800fa32 <read_conn+0x402>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800fa10:	69fb      	ldr	r3, [r7, #28]
 800fa12:	689a      	ldr	r2, [r3, #8]
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	68db      	ldr	r3, [r3, #12]
 800fa18:	4413      	add	r3, r2
 800fa1a:	4619      	mov	r1, r3
 800fa1c:	69f8      	ldr	r0, [r7, #28]
 800fa1e:	f7fb faf1 	bl	800b004 <mg_iobuf_resize>
 800fa22:	4603      	mov	r3, r0
      if (io->size - io->len < pkt->pay.len &&
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d104      	bne.n	800fa32 <read_conn+0x402>
        mg_error(c, "oom");
 800fa28:	490b      	ldr	r1, [pc, #44]	@ (800fa58 <read_conn+0x428>)
 800fa2a:	68f8      	ldr	r0, [r7, #12]
 800fa2c:	f7f7 f90e 	bl	8006c4c <mg_error>
 800fa30:	e00c      	b.n	800fa4c <read_conn+0x41c>
        handle_tls_recv(c, io);
 800fa32:	69f9      	ldr	r1, [r7, #28]
 800fa34:	68f8      	ldr	r0, [r7, #12]
 800fa36:	f7ff fdc7 	bl	800f5c8 <handle_tls_recv>
}
 800fa3a:	e007      	b.n	800fa4c <read_conn+0x41c>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	330c      	adds	r3, #12
 800fa40:	461a      	mov	r2, r3
 800fa42:	2107      	movs	r1, #7
 800fa44:	68f8      	ldr	r0, [r7, #12]
 800fa46:	f7f7 f8e1 	bl	8006c0c <mg_call>
}
 800fa4a:	e7ff      	b.n	800fa4c <read_conn+0x41c>
 800fa4c:	bf00      	nop
 800fa4e:	3728      	adds	r7, #40	@ 0x28
 800fa50:	46bd      	mov	sp, r7
 800fa52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa56:	bf00      	nop
 800fa58:	08030168 	.word	0x08030168

0800fa5c <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800fa5c:	b590      	push	{r4, r7, lr}
 800fa5e:	b089      	sub	sp, #36	@ 0x24
 800fa60:	af02      	add	r7, sp, #8
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	6839      	ldr	r1, [r7, #0]
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7fe fd0e 	bl	800e490 <getpeer>
 800fa74:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d002      	beq.n	800fa82 <rx_tcp+0x26>
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	33b0      	adds	r3, #176	@ 0xb0
 800fa80:	e000      	b.n	800fa84 <rx_tcp+0x28>
 800fa82:	2300      	movs	r3, #0
 800fa84:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d03c      	beq.n	800fb06 <rx_tcp+0xaa>
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800fa92:	f003 0320 	and.w	r3, r3, #32
 800fa96:	b2db      	uxtb	r3, r3
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d034      	beq.n	800fb06 <rx_tcp+0xaa>
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800faa0:	7b5b      	ldrb	r3, [r3, #13]
 800faa2:	2b12      	cmp	r3, #18
 800faa4:	d12f      	bne.n	800fb06 <rx_tcp+0xaa>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800faaa:	689b      	ldr	r3, [r3, #8]
 800faac:	4618      	mov	r0, r3
 800faae:	f002 ff9a 	bl	80129e6 <mg_ntohl>
 800fab2:	4602      	mov	r2, r0
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	601a      	str	r2, [r3, #0]
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fabc:	685b      	ldr	r3, [r3, #4]
 800fabe:	4618      	mov	r0, r3
 800fac0:	f002 ff91 	bl	80129e6 <mg_ntohl>
 800fac4:	4603      	mov	r3, r0
 800fac6:	1c5a      	adds	r2, r3, #1
 800fac8:	693b      	ldr	r3, [r7, #16]
 800faca:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fad0:	689b      	ldr	r3, [r3, #8]
 800fad2:	2200      	movs	r2, #0
 800fad4:	9201      	str	r2, [sp, #4]
 800fad6:	2200      	movs	r2, #0
 800fad8:	9200      	str	r2, [sp, #0]
 800fada:	2210      	movs	r2, #16
 800fadc:	6839      	ldr	r1, [r7, #0]
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f7ff fb6e 	bl	800f1c0 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 800fae4:	697a      	ldr	r2, [r7, #20]
 800fae6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800faea:	f36f 1345 	bfc	r3, #5, #1
 800faee:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 800faf2:	2100      	movs	r1, #0
 800faf4:	6978      	ldr	r0, [r7, #20]
 800faf6:	f7fe f965 	bl	800ddc4 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 800fafa:	2200      	movs	r2, #0
 800fafc:	2104      	movs	r1, #4
 800fafe:	6978      	ldr	r0, [r7, #20]
 800fb00:	f7f7 f884 	bl	8006c0c <mg_call>
 800fb04:	e0c8      	b.n	800fc98 <rx_tcp+0x23c>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d019      	beq.n	800fb40 <rx_tcp+0xe4>
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800fb12:	f003 0320 	and.w	r3, r3, #32
 800fb16:	b2db      	uxtb	r3, r3
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d011      	beq.n	800fb40 <rx_tcp+0xe4>
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb20:	7b5b      	ldrb	r3, [r3, #13]
 800fb22:	2b10      	cmp	r3, #16
 800fb24:	d00c      	beq.n	800fb40 <rx_tcp+0xe4>
    // mg_hexdump(pkt->raw.buf, pkt->raw.len);
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb2a:	689b      	ldr	r3, [r3, #8]
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	9201      	str	r2, [sp, #4]
 800fb30:	2200      	movs	r2, #0
 800fb32:	9200      	str	r2, [sp, #0]
 800fb34:	2214      	movs	r2, #20
 800fb36:	6839      	ldr	r1, [r7, #0]
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f7ff fb41 	bl	800f1c0 <tx_tcp_pkt>
 800fb3e:	e0ab      	b.n	800fc98 <rx_tcp+0x23c>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d00b      	beq.n	800fb5e <rx_tcp+0x102>
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb4a:	7b5b      	ldrb	r3, [r3, #13]
 800fb4c:	f003 0304 	and.w	r3, r3, #4
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d004      	beq.n	800fb5e <rx_tcp+0x102>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800fb54:	4952      	ldr	r1, [pc, #328]	@ (800fca0 <rx_tcp+0x244>)
 800fb56:	6978      	ldr	r0, [r7, #20]
 800fb58:	f7f7 f878 	bl	8006c4c <mg_error>
 800fb5c:	e09c      	b.n	800fc98 <rx_tcp+0x23c>
  } else if (c != NULL) {
 800fb5e:	697b      	ldr	r3, [r7, #20]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d00f      	beq.n	800fb84 <rx_tcp+0x128>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	2200      	movs	r2, #0
 800fb68:	77da      	strb	r2, [r3, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 800fb6a:	693b      	ldr	r3, [r7, #16]
 800fb6c:	7f9b      	ldrb	r3, [r3, #30]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d103      	bne.n	800fb7a <rx_tcp+0x11e>
      settmout(c,
 800fb72:	2100      	movs	r1, #0
 800fb74:	6978      	ldr	r0, [r7, #20]
 800fb76:	f7fe f925 	bl	800ddc4 <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 800fb7a:	6839      	ldr	r1, [r7, #0]
 800fb7c:	6978      	ldr	r0, [r7, #20]
 800fb7e:	f7ff fd57 	bl	800f630 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_VERBOSE(("dropped silently.."));
  }
}
 800fb82:	e089      	b.n	800fc98 <rx_tcp+0x23c>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb88:	2201      	movs	r2, #1
 800fb8a:	6839      	ldr	r1, [r7, #0]
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7fe fc7f 	bl	800e490 <getpeer>
 800fb92:	6178      	str	r0, [r7, #20]
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d10c      	bne.n	800fbb4 <rx_tcp+0x158>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb9e:	689b      	ldr	r3, [r3, #8]
 800fba0:	2200      	movs	r2, #0
 800fba2:	9201      	str	r2, [sp, #4]
 800fba4:	2200      	movs	r2, #0
 800fba6:	9200      	str	r2, [sp, #0]
 800fba8:	2214      	movs	r2, #20
 800fbaa:	6839      	ldr	r1, [r7, #0]
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f7ff fb07 	bl	800f1c0 <tx_tcp_pkt>
}
 800fbb2:	e071      	b.n	800fc98 <rx_tcp+0x23c>
  } else if (pkt->tcp->flags & TH_RST) {
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbb8:	7b5b      	ldrb	r3, [r3, #13]
 800fbba:	f003 0304 	and.w	r3, r3, #4
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d00c      	beq.n	800fbdc <rx_tcp+0x180>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800fbc8:	f003 0304 	and.w	r3, r3, #4
 800fbcc:	b2db      	uxtb	r3, r3
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d062      	beq.n	800fc98 <rx_tcp+0x23c>
 800fbd2:	4933      	ldr	r1, [pc, #204]	@ (800fca0 <rx_tcp+0x244>)
 800fbd4:	6978      	ldr	r0, [r7, #20]
 800fbd6:	f7f7 f839 	bl	8006c4c <mg_error>
}
 800fbda:	e05d      	b.n	800fc98 <rx_tcp+0x23c>
  } else if (pkt->tcp->flags & TH_SYN) {
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbe0:	7b5b      	ldrb	r3, [r3, #13]
 800fbe2:	f003 0302 	and.w	r3, r3, #2
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d016      	beq.n	800fc18 <rx_tcp+0x1bc>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbee:	881b      	ldrh	r3, [r3, #0]
 800fbf0:	b29b      	uxth	r3, r3
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f002 ff10 	bl	8012a18 <mg_ntohs>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f002 fef3 	bl	80129e6 <mg_ntohl>
 800fc00:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 800fc02:	2300      	movs	r3, #0
 800fc04:	9301      	str	r3, [sp, #4]
 800fc06:	2300      	movs	r3, #0
 800fc08:	9300      	str	r3, [sp, #0]
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	2212      	movs	r2, #18
 800fc0e:	6839      	ldr	r1, [r7, #0]
 800fc10:	6878      	ldr	r0, [r7, #4]
 800fc12:	f7ff fad5 	bl	800f1c0 <tx_tcp_pkt>
}
 800fc16:	e03f      	b.n	800fc98 <rx_tcp+0x23c>
  } else if (pkt->tcp->flags & TH_FIN) {
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc1c:	7b5b      	ldrb	r3, [r3, #13]
 800fc1e:	f003 0301 	and.w	r3, r3, #1
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d00c      	beq.n	800fc40 <rx_tcp+0x1e4>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc2a:	689b      	ldr	r3, [r3, #8]
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	9201      	str	r2, [sp, #4]
 800fc30:	2200      	movs	r2, #0
 800fc32:	9200      	str	r2, [sp, #0]
 800fc34:	2211      	movs	r2, #17
 800fc36:	6839      	ldr	r1, [r7, #0]
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f7ff fac1 	bl	800f1c0 <tx_tcp_pkt>
}
 800fc3e:	e02b      	b.n	800fc98 <rx_tcp+0x23c>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc44:	689b      	ldr	r3, [r3, #8]
 800fc46:	4618      	mov	r0, r3
 800fc48:	f002 fecd 	bl	80129e6 <mg_ntohl>
 800fc4c:	4604      	mov	r4, r0
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc52:	881b      	ldrh	r3, [r3, #0]
 800fc54:	b29b      	uxth	r3, r3
 800fc56:	4618      	mov	r0, r3
 800fc58:	f002 fede 	bl	8012a18 <mg_ntohs>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	3301      	adds	r3, #1
 800fc60:	429c      	cmp	r4, r3
 800fc62:	d104      	bne.n	800fc6e <rx_tcp+0x212>
    accept_conn(c, pkt);
 800fc64:	6839      	ldr	r1, [r7, #0]
 800fc66:	6978      	ldr	r0, [r7, #20]
 800fc68:	f7ff faf0 	bl	800f24c <accept_conn>
}
 800fc6c:	e014      	b.n	800fc98 <rx_tcp+0x23c>
  } else if (!c->is_accepted) {  // no peer
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800fc74:	f003 0304 	and.w	r3, r3, #4
 800fc78:	b2db      	uxtb	r3, r3
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d10c      	bne.n	800fc98 <rx_tcp+0x23c>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc82:	689b      	ldr	r3, [r3, #8]
 800fc84:	2200      	movs	r2, #0
 800fc86:	9201      	str	r2, [sp, #4]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	9200      	str	r2, [sp, #0]
 800fc8c:	2214      	movs	r2, #20
 800fc8e:	6839      	ldr	r1, [r7, #0]
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f7ff fa95 	bl	800f1c0 <tx_tcp_pkt>
}
 800fc96:	e7ff      	b.n	800fc98 <rx_tcp+0x23c>
 800fc98:	bf00      	nop
 800fc9a:	371c      	adds	r7, #28
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd90      	pop	{r4, r7, pc}
 800fca0:	0803025c 	.word	0x0803025c

0800fca4 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800fca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fca6:	b089      	sub	sp, #36	@ 0x24
 800fca8:	af04      	add	r7, sp, #16
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	6039      	str	r1, [r7, #0]
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	69db      	ldr	r3, [r3, #28]
 800fcb2:	88db      	ldrh	r3, [r3, #6]
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	f003 0320 	and.w	r3, r3, #32
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d109      	bne.n	800fcd2 <rx_ip+0x2e>
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	69db      	ldr	r3, [r3, #28]
 800fcc2:	88db      	ldrh	r3, [r3, #6]
 800fcc4:	b29b      	uxth	r3, r3
 800fcc6:	461a      	mov	r2, r3
 800fcc8:	f64f 731f 	movw	r3, #65311	@ 0xff1f
 800fccc:	4013      	ands	r3, r2
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d026      	beq.n	800fd20 <rx_ip+0x7c>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	69db      	ldr	r3, [r3, #28]
 800fcd6:	7a5b      	ldrb	r3, [r3, #9]
 800fcd8:	2b11      	cmp	r3, #17
 800fcda:	d105      	bne.n	800fce8 <rx_ip+0x44>
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	69db      	ldr	r3, [r3, #28]
 800fce0:	f103 0214 	add.w	r2, r3, #20
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	69db      	ldr	r3, [r3, #28]
 800fcec:	7a5b      	ldrb	r3, [r3, #9]
 800fcee:	2b06      	cmp	r3, #6
 800fcf0:	d105      	bne.n	800fcfe <rx_ip+0x5a>
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	69db      	ldr	r3, [r3, #28]
 800fcf6:	f103 0214 	add.w	r2, r3, #20
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	629a      	str	r2, [r3, #40]	@ 0x28
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd02:	2200      	movs	r2, #0
 800fd04:	6839      	ldr	r1, [r7, #0]
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7fe fbc2 	bl	800e490 <getpeer>
 800fd0c:	60b8      	str	r0, [r7, #8]
    if (c) mg_error(c, "Received fragmented packet");
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	f000 811b 	beq.w	800ff4c <rx_ip+0x2a8>
 800fd16:	4992      	ldr	r1, [pc, #584]	@ (800ff60 <rx_ip+0x2bc>)
 800fd18:	68b8      	ldr	r0, [r7, #8]
 800fd1a:	f7f6 ff97 	bl	8006c4c <mg_error>
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 800fd1e:	e115      	b.n	800ff4c <rx_ip+0x2a8>
  } else if (pkt->ip->proto == 1) {
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	69db      	ldr	r3, [r3, #28]
 800fd24:	7a5b      	ldrb	r3, [r3, #9]
 800fd26:	2b01      	cmp	r3, #1
 800fd28:	d116      	bne.n	800fd58 <rx_ip+0xb4>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	69db      	ldr	r3, [r3, #28]
 800fd2e:	f103 0214 	add.w	r2, r3, #20
 800fd32:	683b      	ldr	r3, [r7, #0]
 800fd34:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	68db      	ldr	r3, [r3, #12]
 800fd3a:	2b03      	cmp	r3, #3
 800fd3c:	f240 8108 	bls.w	800ff50 <rx_ip+0x2ac>
    mkpay(pkt, pkt->icmp + 1);
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd44:	3304      	adds	r3, #4
 800fd46:	4619      	mov	r1, r3
 800fd48:	6838      	ldr	r0, [r7, #0]
 800fd4a:	f7fd ffc3 	bl	800dcd4 <mkpay>
    rx_icmp(ifp, pkt);
 800fd4e:	6839      	ldr	r1, [r7, #0]
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f7fe fd19 	bl	800e788 <rx_icmp>
 800fd56:	e100      	b.n	800ff5a <rx_ip+0x2b6>
  } else if (pkt->ip->proto == 17) {
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	69db      	ldr	r3, [r3, #28]
 800fd5c:	7a5b      	ldrb	r3, [r3, #9]
 800fd5e:	2b11      	cmp	r3, #17
 800fd60:	f040 808b 	bne.w	800fe7a <rx_ip+0x1d6>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	69db      	ldr	r3, [r3, #28]
 800fd68:	f103 0214 	add.w	r2, r3, #20
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	68db      	ldr	r3, [r3, #12]
 800fd74:	2b07      	cmp	r3, #7
 800fd76:	f240 80ed 	bls.w	800ff54 <rx_ip+0x2b0>
    mkpay(pkt, pkt->udp + 1);
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd7e:	3308      	adds	r3, #8
 800fd80:	4619      	mov	r1, r3
 800fd82:	6838      	ldr	r0, [r7, #0]
 800fd84:	f7fd ffa6 	bl	800dcd4 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800fd88:	4b76      	ldr	r3, [pc, #472]	@ (800ff64 <rx_ip+0x2c0>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	2b03      	cmp	r3, #3
 800fd8e:	dd2d      	ble.n	800fdec <rx_ip+0x148>
 800fd90:	4b75      	ldr	r3, [pc, #468]	@ (800ff68 <rx_ip+0x2c4>)
 800fd92:	f241 6222 	movw	r2, #5666	@ 0x1622
 800fd96:	4975      	ldr	r1, [pc, #468]	@ (800ff6c <rx_ip+0x2c8>)
 800fd98:	2004      	movs	r0, #4
 800fd9a:	f7fc f92b 	bl	800bff4 <mg_log_prefix>
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	69db      	ldr	r3, [r3, #28]
 800fda2:	f103 050c 	add.w	r5, r3, #12
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdaa:	881b      	ldrh	r3, [r3, #0]
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f002 fe32 	bl	8012a18 <mg_ntohs>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	461e      	mov	r6, r3
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	69db      	ldr	r3, [r3, #28]
 800fdbc:	f103 0410 	add.w	r4, r3, #16
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdc4:	885b      	ldrh	r3, [r3, #2]
 800fdc6:	b29b      	uxth	r3, r3
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f002 fe25 	bl	8012a18 <mg_ntohs>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	68db      	ldr	r3, [r3, #12]
 800fdd6:	9303      	str	r3, [sp, #12]
 800fdd8:	9202      	str	r2, [sp, #8]
 800fdda:	9401      	str	r4, [sp, #4]
 800fddc:	4b64      	ldr	r3, [pc, #400]	@ (800ff70 <rx_ip+0x2cc>)
 800fdde:	9300      	str	r3, [sp, #0]
 800fde0:	4633      	mov	r3, r6
 800fde2:	462a      	mov	r2, r5
 800fde4:	4962      	ldr	r1, [pc, #392]	@ (800ff70 <rx_ip+0x2cc>)
 800fde6:	4863      	ldr	r0, [pc, #396]	@ (800ff74 <rx_ip+0x2d0>)
 800fde8:	f7fc f954 	bl	800c094 <mg_log>
                mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	7f1b      	ldrb	r3, [r3, #28]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d01c      	beq.n	800fe2e <rx_ip+0x18a>
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdf8:	885b      	ldrh	r3, [r3, #2]
 800fdfa:	b29c      	uxth	r4, r3
 800fdfc:	2044      	movs	r0, #68	@ 0x44
 800fdfe:	f002 fe0b 	bl	8012a18 <mg_ntohs>
 800fe02:	4603      	mov	r3, r0
 800fe04:	429c      	cmp	r4, r3
 800fe06:	d112      	bne.n	800fe2e <rx_ip+0x18a>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe0c:	f103 0208 	add.w	r2, r3, #8
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe18:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800fe1c:	4619      	mov	r1, r3
 800fe1e:	6838      	ldr	r0, [r7, #0]
 800fe20:	f7fd ff58 	bl	800dcd4 <mkpay>
      rx_dhcp_client(ifp, pkt);
 800fe24:	6839      	ldr	r1, [r7, #0]
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f7fe fd0a 	bl	800e840 <rx_dhcp_client>
 800fe2c:	e095      	b.n	800ff5a <rx_ip+0x2b6>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	7f5b      	ldrb	r3, [r3, #29]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d01c      	beq.n	800fe70 <rx_ip+0x1cc>
 800fe36:	683b      	ldr	r3, [r7, #0]
 800fe38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe3a:	885b      	ldrh	r3, [r3, #2]
 800fe3c:	b29c      	uxth	r4, r3
 800fe3e:	2043      	movs	r0, #67	@ 0x43
 800fe40:	f002 fdea 	bl	8012a18 <mg_ntohs>
 800fe44:	4603      	mov	r3, r0
 800fe46:	429c      	cmp	r4, r3
 800fe48:	d112      	bne.n	800fe70 <rx_ip+0x1cc>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe4e:	f103 0208 	add.w	r2, r3, #8
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe5a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800fe5e:	4619      	mov	r1, r3
 800fe60:	6838      	ldr	r0, [r7, #0]
 800fe62:	f7fd ff37 	bl	800dcd4 <mkpay>
      rx_dhcp_server(ifp, pkt);
 800fe66:	6839      	ldr	r1, [r7, #0]
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f7fe fe7d 	bl	800eb68 <rx_dhcp_server>
 800fe6e:	e074      	b.n	800ff5a <rx_ip+0x2b6>
    } else {
      rx_udp(ifp, pkt);
 800fe70:	6839      	ldr	r1, [r7, #0]
 800fe72:	6878      	ldr	r0, [r7, #4]
 800fe74:	f7ff f866 	bl	800ef44 <rx_udp>
 800fe78:	e06f      	b.n	800ff5a <rx_ip+0x2b6>
    }
  } else if (pkt->ip->proto == 6) {
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	69db      	ldr	r3, [r3, #28]
 800fe7e:	7a5b      	ldrb	r3, [r3, #9]
 800fe80:	2b06      	cmp	r3, #6
 800fe82:	d16a      	bne.n	800ff5a <rx_ip+0x2b6>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	69db      	ldr	r3, [r3, #28]
 800fe88:	f103 0214 	add.w	r2, r3, #20
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	68db      	ldr	r3, [r3, #12]
 800fe94:	2b13      	cmp	r3, #19
 800fe96:	d95f      	bls.n	800ff58 <rx_ip+0x2b4>
    mkpay(pkt, pkt->tcp + 1);
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe9c:	3314      	adds	r3, #20
 800fe9e:	4619      	mov	r1, r3
 800fea0:	6838      	ldr	r0, [r7, #0]
 800fea2:	f7fd ff17 	bl	800dcd4 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	69db      	ldr	r3, [r3, #28]
 800feaa:	885b      	ldrh	r3, [r3, #2]
 800feac:	b29b      	uxth	r3, r3
 800feae:	4618      	mov	r0, r3
 800feb0:	f002 fdb2 	bl	8012a18 <mg_ntohs>
 800feb4:	4603      	mov	r3, r0
 800feb6:	81fb      	strh	r3, [r7, #14]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800febc:	7b1b      	ldrb	r3, [r3, #12]
 800febe:	091b      	lsrs	r3, r3, #4
 800fec0:	b2db      	uxtb	r3, r3
 800fec2:	3305      	adds	r3, #5
 800fec4:	b29b      	uxth	r3, r3
 800fec6:	009b      	lsls	r3, r3, #2
 800fec8:	81bb      	strh	r3, [r7, #12]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 800feca:	89fa      	ldrh	r2, [r7, #14]
 800fecc:	89bb      	ldrh	r3, [r7, #12]
 800fece:	429a      	cmp	r2, r3
 800fed0:	d305      	bcc.n	800fede <rx_ip+0x23a>
 800fed2:	89fa      	ldrh	r2, [r7, #14]
 800fed4:	89bb      	ldrh	r3, [r7, #12]
 800fed6:	1ad3      	subs	r3, r2, r3
 800fed8:	461a      	mov	r2, r3
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	60da      	str	r2, [r3, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800fede:	4b21      	ldr	r3, [pc, #132]	@ (800ff64 <rx_ip+0x2c0>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	2b03      	cmp	r3, #3
 800fee4:	dd2d      	ble.n	800ff42 <rx_ip+0x29e>
 800fee6:	4b20      	ldr	r3, [pc, #128]	@ (800ff68 <rx_ip+0x2c4>)
 800fee8:	f241 6237 	movw	r2, #5687	@ 0x1637
 800feec:	491f      	ldr	r1, [pc, #124]	@ (800ff6c <rx_ip+0x2c8>)
 800feee:	2004      	movs	r0, #4
 800fef0:	f7fc f880 	bl	800bff4 <mg_log_prefix>
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	69db      	ldr	r3, [r3, #28]
 800fef8:	f103 050c 	add.w	r5, r3, #12
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff00:	881b      	ldrh	r3, [r3, #0]
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	4618      	mov	r0, r3
 800ff06:	f002 fd87 	bl	8012a18 <mg_ntohs>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	461e      	mov	r6, r3
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	69db      	ldr	r3, [r3, #28]
 800ff12:	f103 0410 	add.w	r4, r3, #16
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff1a:	885b      	ldrh	r3, [r3, #2]
 800ff1c:	b29b      	uxth	r3, r3
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f002 fd7a 	bl	8012a18 <mg_ntohs>
 800ff24:	4603      	mov	r3, r0
 800ff26:	461a      	mov	r2, r3
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	68db      	ldr	r3, [r3, #12]
 800ff2c:	9303      	str	r3, [sp, #12]
 800ff2e:	9202      	str	r2, [sp, #8]
 800ff30:	9401      	str	r4, [sp, #4]
 800ff32:	4b0f      	ldr	r3, [pc, #60]	@ (800ff70 <rx_ip+0x2cc>)
 800ff34:	9300      	str	r3, [sp, #0]
 800ff36:	4633      	mov	r3, r6
 800ff38:	462a      	mov	r2, r5
 800ff3a:	490d      	ldr	r1, [pc, #52]	@ (800ff70 <rx_ip+0x2cc>)
 800ff3c:	480e      	ldr	r0, [pc, #56]	@ (800ff78 <rx_ip+0x2d4>)
 800ff3e:	f7fc f8a9 	bl	800c094 <mg_log>
                mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 800ff42:	6839      	ldr	r1, [r7, #0]
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f7ff fd89 	bl	800fa5c <rx_tcp>
 800ff4a:	e006      	b.n	800ff5a <rx_ip+0x2b6>
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 800ff4c:	bf00      	nop
 800ff4e:	e004      	b.n	800ff5a <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800ff50:	bf00      	nop
 800ff52:	e002      	b.n	800ff5a <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800ff54:	bf00      	nop
 800ff56:	e000      	b.n	800ff5a <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800ff58:	bf00      	nop
  }
}
 800ff5a:	3714      	adds	r7, #20
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff60:	08030268 	.word	0x08030268
 800ff64:	20000244 	.word	0x20000244
 800ff68:	0803278c 	.word	0x0803278c
 800ff6c:	0802efcc 	.word	0x0802efcc
 800ff70:	08011245 	.word	0x08011245
 800ff74:	08030284 	.word	0x08030284
 800ff78:	080302a0 	.word	0x080302a0

0800ff7c <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	6a1b      	ldr	r3, [r3, #32]
 800ff8a:	799b      	ldrb	r3, [r3, #6]
 800ff8c:	2b01      	cmp	r3, #1
 800ff8e:	d004      	beq.n	800ff9a <rx_ip6+0x1e>
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	6a1b      	ldr	r3, [r3, #32]
 800ff94:	799b      	ldrb	r3, [r3, #6]
 800ff96:	2b3a      	cmp	r3, #58	@ 0x3a
 800ff98:	d115      	bne.n	800ffc6 <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	6a1b      	ldr	r3, [r3, #32]
 800ff9e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	68db      	ldr	r3, [r3, #12]
 800ffaa:	2b03      	cmp	r3, #3
 800ffac:	d922      	bls.n	800fff4 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffb2:	3304      	adds	r3, #4
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	6838      	ldr	r0, [r7, #0]
 800ffb8:	f7fd fe8c 	bl	800dcd4 <mkpay>
    rx_icmp(ifp, pkt);
 800ffbc:	6839      	ldr	r1, [r7, #0]
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f7fe fbe2 	bl	800e788 <rx_icmp>
 800ffc4:	e019      	b.n	800fffa <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	6a1b      	ldr	r3, [r3, #32]
 800ffca:	799b      	ldrb	r3, [r3, #6]
 800ffcc:	2b11      	cmp	r3, #17
 800ffce:	d114      	bne.n	800fffa <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	6a1b      	ldr	r3, [r3, #32]
 800ffd4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	68db      	ldr	r3, [r3, #12]
 800ffe0:	2b07      	cmp	r3, #7
 800ffe2:	d909      	bls.n	800fff8 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffe8:	3308      	adds	r3, #8
 800ffea:	4619      	mov	r1, r3
 800ffec:	6838      	ldr	r0, [r7, #0]
 800ffee:	f7fd fe71 	bl	800dcd4 <mkpay>
 800fff2:	e002      	b.n	800fffa <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800fff4:	bf00      	nop
 800fff6:	e000      	b.n	800fffa <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800fff8:	bf00      	nop
  }
}
 800fffa:	3708      	adds	r7, #8
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}

08010000 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 8010000:	b590      	push	{r4, r7, lr}
 8010002:	b093      	sub	sp, #76	@ 0x4c
 8010004:	af00      	add	r7, sp, #0
 8010006:	60f8      	str	r0, [r7, #12]
 8010008:	60b9      	str	r1, [r7, #8]
 801000a:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 801000c:	f107 0314 	add.w	r3, r7, #20
 8010010:	2234      	movs	r2, #52	@ 0x34
 8010012:	2100      	movs	r1, #0
 8010014:	4618      	mov	r0, r3
 8010016:	f01b fd79 	bl	802bb0c <memset>
  pkt.raw.buf = (char *) buf;
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	627b      	str	r3, [r7, #36]	@ 0x24
  // mg_hexdump(buf, len > 16 ? 16: len);
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 8010026:	69bb      	ldr	r3, [r7, #24]
 8010028:	2b0d      	cmp	r3, #13
 801002a:	f240 80d7 	bls.w	80101dc <mg_tcpip_rx+0x1dc>
  if (ifp->enable_mac_check &&
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d013      	beq.n	8010060 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8010038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801003a:	4618      	mov	r0, r3
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	2206      	movs	r2, #6
 8010040:	4619      	mov	r1, r3
 8010042:	f01b fd39 	bl	802bab8 <memcmp>
 8010046:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 8010048:	2b00      	cmp	r3, #0
 801004a:	d009      	beq.n	8010060 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 801004c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801004e:	2206      	movs	r2, #6
 8010050:	496c      	ldr	r1, [pc, #432]	@ (8010204 <mg_tcpip_rx+0x204>)
 8010052:	4618      	mov	r0, r3
 8010054:	f01b fd30 	bl	802bab8 <memcmp>
 8010058:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 801005a:	2b00      	cmp	r3, #0
 801005c:	f040 80c0 	bne.w	80101e0 <mg_tcpip_rx+0x1e0>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	7fdb      	ldrb	r3, [r3, #31]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d01a      	beq.n	801009e <mg_tcpip_rx+0x9e>
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2b04      	cmp	r3, #4
 801006c:	d917      	bls.n	801009e <mg_tcpip_rx+0x9e>
    len -= 4;  // TODO(scaprile): check on bigendian
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	3b04      	subs	r3, #4
 8010072:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 8010074:	687a      	ldr	r2, [r7, #4]
 8010076:	68b9      	ldr	r1, [r7, #8]
 8010078:	2000      	movs	r0, #0
 801007a:	f002 fce5 	bl	8012a48 <mg_crc32>
 801007e:	4603      	mov	r3, r0
 8010080:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8010082:	68ba      	ldr	r2, [r7, #8]
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	4413      	add	r3, r2
 8010088:	4618      	mov	r0, r3
 801008a:	f107 0310 	add.w	r3, r7, #16
 801008e:	2204      	movs	r2, #4
 8010090:	4619      	mov	r1, r3
 8010092:	f01b fd11 	bl	802bab8 <memcmp>
 8010096:	4603      	mov	r3, r0
 8010098:	2b00      	cmp	r3, #0
 801009a:	f040 80a3 	bne.w	80101e4 <mg_tcpip_rx+0x1e4>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 801009e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100a0:	899b      	ldrh	r3, [r3, #12]
 80100a2:	b29c      	uxth	r4, r3
 80100a4:	f640 0006 	movw	r0, #2054	@ 0x806
 80100a8:	f002 fcb6 	bl	8012a18 <mg_ntohs>
 80100ac:	4603      	mov	r3, r0
 80100ae:	429c      	cmp	r4, r3
 80100b0:	d10d      	bne.n	80100ce <mg_tcpip_rx+0xce>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 80100b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100b4:	330e      	adds	r3, #14
 80100b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 80100b8:	69bb      	ldr	r3, [r7, #24]
 80100ba:	2b29      	cmp	r3, #41	@ 0x29
 80100bc:	f240 8094 	bls.w	80101e8 <mg_tcpip_rx+0x1e8>
    rx_arp(ifp, &pkt);
 80100c0:	f107 0314 	add.w	r3, r7, #20
 80100c4:	4619      	mov	r1, r3
 80100c6:	68f8      	ldr	r0, [r7, #12]
 80100c8:	f7fe fa54 	bl	800e574 <rx_arp>
 80100cc:	e097      	b.n	80101fe <mg_tcpip_rx+0x1fe>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 80100ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100d0:	899b      	ldrh	r3, [r3, #12]
 80100d2:	b29c      	uxth	r4, r3
 80100d4:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 80100d8:	f002 fc9e 	bl	8012a18 <mg_ntohs>
 80100dc:	4603      	mov	r3, r0
 80100de:	429c      	cmp	r4, r3
 80100e0:	d11b      	bne.n	801011a <mg_tcpip_rx+0x11a>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 80100e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100e4:	330e      	adds	r3, #14
 80100e6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 80100e8:	69bb      	ldr	r3, [r7, #24]
 80100ea:	2b35      	cmp	r3, #53	@ 0x35
 80100ec:	d97e      	bls.n	80101ec <mg_tcpip_rx+0x1ec>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 80100ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	091b      	lsrs	r3, r3, #4
 80100f4:	b2db      	uxtb	r3, r3
 80100f6:	2b06      	cmp	r3, #6
 80100f8:	d17a      	bne.n	80101f0 <mg_tcpip_rx+0x1f0>
    mkpay(&pkt, pkt.ip6 + 1);
 80100fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100fc:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8010100:	f107 0314 	add.w	r3, r7, #20
 8010104:	4611      	mov	r1, r2
 8010106:	4618      	mov	r0, r3
 8010108:	f7fd fde4 	bl	800dcd4 <mkpay>
    rx_ip6(ifp, &pkt);
 801010c:	f107 0314 	add.w	r3, r7, #20
 8010110:	4619      	mov	r1, r3
 8010112:	68f8      	ldr	r0, [r7, #12]
 8010114:	f7ff ff32 	bl	800ff7c <rx_ip6>
 8010118:	e071      	b.n	80101fe <mg_tcpip_rx+0x1fe>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 801011a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801011c:	899b      	ldrh	r3, [r3, #12]
 801011e:	b29c      	uxth	r4, r3
 8010120:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8010124:	f002 fc78 	bl	8012a18 <mg_ntohs>
 8010128:	4603      	mov	r3, r0
 801012a:	429c      	cmp	r4, r3
 801012c:	d133      	bne.n	8010196 <mg_tcpip_rx+0x196>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 801012e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010130:	330e      	adds	r3, #14
 8010132:	633b      	str	r3, [r7, #48]	@ 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8010134:	69bb      	ldr	r3, [r7, #24]
 8010136:	2b21      	cmp	r3, #33	@ 0x21
 8010138:	d95c      	bls.n	80101f4 <mg_tcpip_rx+0x1f4>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 801013a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801013c:	885b      	ldrh	r3, [r3, #2]
 801013e:	b29b      	uxth	r3, r3
 8010140:	4618      	mov	r0, r3
 8010142:	f002 fc69 	bl	8012a18 <mg_ntohs>
 8010146:	4603      	mov	r3, r0
 8010148:	f103 020e 	add.w	r2, r3, #14
 801014c:	69bb      	ldr	r3, [r7, #24]
 801014e:	429a      	cmp	r2, r3
 8010150:	d208      	bcs.n	8010164 <mg_tcpip_rx+0x164>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 8010152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010154:	885b      	ldrh	r3, [r3, #2]
 8010156:	b29b      	uxth	r3, r3
 8010158:	4618      	mov	r0, r3
 801015a:	f002 fc5d 	bl	8012a18 <mg_ntohs>
 801015e:	4603      	mov	r3, r0
 8010160:	330e      	adds	r3, #14
 8010162:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8010164:	69bb      	ldr	r3, [r7, #24]
 8010166:	2b21      	cmp	r3, #33	@ 0x21
 8010168:	d946      	bls.n	80101f8 <mg_tcpip_rx+0x1f8>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 801016a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	091b      	lsrs	r3, r3, #4
 8010170:	b2db      	uxtb	r3, r3
 8010172:	2b04      	cmp	r3, #4
 8010174:	d142      	bne.n	80101fc <mg_tcpip_rx+0x1fc>
    mkpay(&pkt, pkt.ip + 1);
 8010176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010178:	f103 0214 	add.w	r2, r3, #20
 801017c:	f107 0314 	add.w	r3, r7, #20
 8010180:	4611      	mov	r1, r2
 8010182:	4618      	mov	r0, r3
 8010184:	f7fd fda6 	bl	800dcd4 <mkpay>
    rx_ip(ifp, &pkt);
 8010188:	f107 0314 	add.w	r3, r7, #20
 801018c:	4619      	mov	r1, r3
 801018e:	68f8      	ldr	r0, [r7, #12]
 8010190:	f7ff fd88 	bl	800fca4 <rx_ip>
 8010194:	e033      	b.n	80101fe <mg_tcpip_rx+0x1fe>
  } else {
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 8010196:	4b1c      	ldr	r3, [pc, #112]	@ (8010208 <mg_tcpip_rx+0x208>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	2b02      	cmp	r3, #2
 801019c:	dd11      	ble.n	80101c2 <mg_tcpip_rx+0x1c2>
 801019e:	4b1b      	ldr	r3, [pc, #108]	@ (801020c <mg_tcpip_rx+0x20c>)
 80101a0:	f241 6275 	movw	r2, #5749	@ 0x1675
 80101a4:	491a      	ldr	r1, [pc, #104]	@ (8010210 <mg_tcpip_rx+0x210>)
 80101a6:	2003      	movs	r0, #3
 80101a8:	f7fb ff24 	bl	800bff4 <mg_log_prefix>
 80101ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ae:	899b      	ldrh	r3, [r3, #12]
 80101b0:	b29b      	uxth	r3, r3
 80101b2:	4618      	mov	r0, r3
 80101b4:	f002 fc30 	bl	8012a18 <mg_ntohs>
 80101b8:	4603      	mov	r3, r0
 80101ba:	4619      	mov	r1, r3
 80101bc:	4815      	ldr	r0, [pc, #84]	@ (8010214 <mg_tcpip_rx+0x214>)
 80101be:	f7fb ff69 	bl	800c094 <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 80101c2:	4b11      	ldr	r3, [pc, #68]	@ (8010208 <mg_tcpip_rx+0x208>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	2b03      	cmp	r3, #3
 80101c8:	dd19      	ble.n	80101fe <mg_tcpip_rx+0x1fe>
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2b20      	cmp	r3, #32
 80101ce:	bf28      	it	cs
 80101d0:	2320      	movcs	r3, #32
 80101d2:	4619      	mov	r1, r3
 80101d4:	68b8      	ldr	r0, [r7, #8]
 80101d6:	f7fb ff93 	bl	800c100 <mg_hexdump>
 80101da:	e010      	b.n	80101fe <mg_tcpip_rx+0x1fe>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 80101dc:	bf00      	nop
 80101de:	e00e      	b.n	80101fe <mg_tcpip_rx+0x1fe>
    return;
 80101e0:	bf00      	nop
 80101e2:	e00c      	b.n	80101fe <mg_tcpip_rx+0x1fe>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 80101e4:	bf00      	nop
 80101e6:	e00a      	b.n	80101fe <mg_tcpip_rx+0x1fe>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 80101e8:	bf00      	nop
 80101ea:	e008      	b.n	80101fe <mg_tcpip_rx+0x1fe>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 80101ec:	bf00      	nop
 80101ee:	e006      	b.n	80101fe <mg_tcpip_rx+0x1fe>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 80101f0:	bf00      	nop
 80101f2:	e004      	b.n	80101fe <mg_tcpip_rx+0x1fe>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 80101f4:	bf00      	nop
 80101f6:	e002      	b.n	80101fe <mg_tcpip_rx+0x1fe>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 80101f8:	bf00      	nop
 80101fa:	e000      	b.n	80101fe <mg_tcpip_rx+0x1fe>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 80101fc:	bf00      	nop
  }
}
 80101fe:	374c      	adds	r7, #76	@ 0x4c
 8010200:	46bd      	mov	sp, r7
 8010202:	bd90      	pop	{r4, r7, pc}
 8010204:	08032644 	.word	0x08032644
 8010208:	20000244 	.word	0x20000244
 801020c:	08032794 	.word	0x08032794
 8010210:	0802efcc 	.word	0x0802efcc
 8010214:	080302bc 	.word	0x080302bc

08010218 <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 8010218:	b5f0      	push	{r4, r5, r6, r7, lr}
 801021a:	b095      	sub	sp, #84	@ 0x54
 801021c:	af06      	add	r7, sp, #24
 801021e:	6178      	str	r0, [r7, #20]
 8010220:	e9c7 2302 	strd	r2, r3, [r7, #8]
  struct mg_connection *c;
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 8010224:	697b      	ldr	r3, [r7, #20]
 8010226:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 801022a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801022e:	e9cd 2300 	strd	r2, r3, [sp]
 8010232:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010236:	f04f 0300 	mov.w	r3, #0
 801023a:	4608      	mov	r0, r1
 801023c:	f002 f923 	bl	8012486 <mg_timer_expired>
 8010240:	4603      	mov	r3, r0
 8010242:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  ifp->now = now;
 8010246:	6979      	ldr	r1, [r7, #20]
 8010248:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801024c:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
             names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
             ifp->ndrop, ifp->nerr));
  }
#endif
  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 8010250:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8010254:	2b00      	cmp	r3, #0
 8010256:	d052      	beq.n	80102fe <mg_tcpip_poll+0xe6>
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801025c:	68db      	ldr	r3, [r3, #12]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d04d      	beq.n	80102fe <mg_tcpip_poll+0xe6>
    bool up = ifp->driver->up(ifp);
 8010262:	697b      	ldr	r3, [r7, #20]
 8010264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010266:	68db      	ldr	r3, [r3, #12]
 8010268:	6978      	ldr	r0, [r7, #20]
 801026a:	4798      	blx	r3
 801026c:	4603      	mov	r3, r0
 801026e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 8010272:	697b      	ldr	r3, [r7, #20]
 8010274:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8010278:	2b00      	cmp	r3, #0
 801027a:	bf14      	ite	ne
 801027c:	2301      	movne	r3, #1
 801027e:	2300      	moveq	r3, #0
 8010280:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if (up != current) {
 8010284:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8010288:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 801028c:	429a      	cmp	r2, r3
 801028e:	d023      	beq.n	80102d8 <mg_tcpip_poll+0xc0>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 8010290:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8010294:	f083 0301 	eor.w	r3, r3, #1
 8010298:	b2db      	uxtb	r3, r3
 801029a:	2b00      	cmp	r3, #0
 801029c:	d001      	beq.n	80102a2 <mg_tcpip_poll+0x8a>
 801029e:	2300      	movs	r3, #0
 80102a0:	e006      	b.n	80102b0 <mg_tcpip_poll+0x98>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	7f1b      	ldrb	r3, [r3, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d001      	beq.n	80102ae <mg_tcpip_poll+0x96>
 80102aa:	2301      	movs	r3, #1
 80102ac:	e000      	b.n	80102b0 <mg_tcpip_poll+0x98>
 80102ae:	2303      	movs	r3, #3
 80102b0:	697a      	ldr	r2, [r7, #20]
 80102b2:	f882 3074 	strb.w	r3, [r2, #116]	@ 0x74
                                             : MG_TCPIP_STATE_READY;
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 80102b6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80102ba:	f083 0301 	eor.w	r3, r3, #1
 80102be:	b2db      	uxtb	r3, r3
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d006      	beq.n	80102d2 <mg_tcpip_poll+0xba>
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	7f1b      	ldrb	r3, [r3, #28]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d002      	beq.n	80102d2 <mg_tcpip_poll+0xba>
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	2200      	movs	r2, #0
 80102d0:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 80102d2:	6978      	ldr	r0, [r7, #20]
 80102d4:	f7fd fe4c 	bl	800df70 <onstatechange>
    }
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d10d      	bne.n	80102fe <mg_tcpip_poll+0xe6>
 80102e2:	4ba4      	ldr	r3, [pc, #656]	@ (8010574 <mg_tcpip_poll+0x35c>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	dd09      	ble.n	80102fe <mg_tcpip_poll+0xe6>
 80102ea:	4ba3      	ldr	r3, [pc, #652]	@ (8010578 <mg_tcpip_poll+0x360>)
 80102ec:	f241 6292 	movw	r2, #5778	@ 0x1692
 80102f0:	49a2      	ldr	r1, [pc, #648]	@ (801057c <mg_tcpip_poll+0x364>)
 80102f2:	2001      	movs	r0, #1
 80102f4:	f7fb fe7e 	bl	800bff4 <mg_log_prefix>
 80102f8:	48a1      	ldr	r0, [pc, #644]	@ (8010580 <mg_tcpip_poll+0x368>)
 80102fa:	f7fb fecb 	bl	800c094 <mg_log>
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8010304:	2b00      	cmp	r3, #0
 8010306:	f000 818d 	beq.w	8010624 <mg_tcpip_poll+0x40c>

  // DHCP RFC-2131 (4.4)
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8010310:	2b01      	cmp	r3, #1
 8010312:	d107      	bne.n	8010324 <mg_tcpip_poll+0x10c>
 8010314:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8010318:	2b00      	cmp	r3, #0
 801031a:	d003      	beq.n	8010324 <mg_tcpip_poll+0x10c>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 801031c:	6978      	ldr	r0, [r7, #20]
 801031e:	f7fe f87b 	bl	800e418 <tx_dhcp_discover>
 8010322:	e04c      	b.n	80103be <mg_tcpip_poll+0x1a6>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8010324:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8010328:	2b00      	cmp	r3, #0
 801032a:	d048      	beq.n	80103be <mg_tcpip_poll+0x1a6>
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8010332:	2b03      	cmp	r3, #3
 8010334:	d143      	bne.n	80103be <mg_tcpip_poll+0x1a6>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 8010336:	697b      	ldr	r3, [r7, #20]
 8010338:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 801033c:	4313      	orrs	r3, r2
 801033e:	d03e      	beq.n	80103be <mg_tcpip_poll+0x1a6>
    if (ifp->now >= ifp->lease_expire) {
 8010340:	697b      	ldr	r3, [r7, #20]
 8010342:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 801034c:	4290      	cmp	r0, r2
 801034e:	eb71 0303 	sbcs.w	r3, r1, r3
 8010352:	d30a      	bcc.n	801036a <mg_tcpip_poll+0x152>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 8010354:	697b      	ldr	r3, [r7, #20]
 8010356:	2201      	movs	r2, #1
 8010358:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	2200      	movs	r2, #0
 8010360:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 8010362:	6978      	ldr	r0, [r7, #20]
 8010364:	f7fd fe04 	bl	800df70 <onstatechange>
 8010368:	e029      	b.n	80103be <mg_tcpip_poll+0x1a6>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8010370:	4984      	ldr	r1, [pc, #528]	@ (8010584 <mg_tcpip_poll+0x36c>)
 8010372:	1854      	adds	r4, r2, r1
 8010374:	f143 0500 	adc.w	r5, r3, #0
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 801037e:	42a2      	cmp	r2, r4
 8010380:	41ab      	sbcs	r3, r5
 8010382:	d21c      	bcs.n	80103be <mg_tcpip_poll+0x1a6>
               ((ifp->now / 1000) % 60) == 0) {
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 801038a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801038e:	f04f 0300 	mov.w	r3, #0
 8010392:	f7f0 f9c9 	bl	8000728 <__aeabi_uldivmod>
 8010396:	4602      	mov	r2, r0
 8010398:	460b      	mov	r3, r1
 801039a:	4610      	mov	r0, r2
 801039c:	4619      	mov	r1, r3
 801039e:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 80103a2:	f04f 0300 	mov.w	r3, #0
 80103a6:	f7f0 f9bf 	bl	8000728 <__aeabi_uldivmod>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 80103aa:	4313      	orrs	r3, r2
 80103ac:	d107      	bne.n	80103be <mg_tcpip_poll+0x1a6>
      // hack: 30 min before deadline, try to rebind (4.3.6) every min
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	689a      	ldr	r2, [r3, #8]
 80103b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80103b6:	4974      	ldr	r1, [pc, #464]	@ (8010588 <mg_tcpip_poll+0x370>)
 80103b8:	6978      	ldr	r0, [r7, #20]
 80103ba:	f7fd fffb 	bl	800e3b4 <tx_dhcp_request_re>
    }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103c2:	689b      	ldr	r3, [r3, #8]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d019      	beq.n	80103fc <mg_tcpip_poll+0x1e4>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 80103c8:	697b      	ldr	r3, [r7, #20]
 80103ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103cc:	689b      	ldr	r3, [r3, #8]
 80103ce:	697a      	ldr	r2, [r7, #20]
 80103d0:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 80103d2:	697a      	ldr	r2, [r7, #20]
 80103d4:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 80103d6:	697a      	ldr	r2, [r7, #20]
 80103d8:	4798      	blx	r3
 80103da:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (len > 0) {
 80103dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d024      	beq.n	801042c <mg_tcpip_poll+0x214>
      ifp->nrecv++;
 80103e2:	697b      	ldr	r3, [r7, #20]
 80103e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80103e6:	1c5a      	adds	r2, r3, #1
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	669a      	str	r2, [r3, #104]	@ 0x68
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 80103ec:	697b      	ldr	r3, [r7, #20]
 80103ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80103f2:	4619      	mov	r1, r3
 80103f4:	6978      	ldr	r0, [r7, #20]
 80103f6:	f7ff fe03 	bl	8010000 <mg_tcpip_rx>
 80103fa:	e017      	b.n	801042c <mg_tcpip_poll+0x214>
    }
  } else {  // Interrupt-based driver. Fills recv queue itself
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	3330      	adds	r3, #48	@ 0x30
 8010400:	f107 0220 	add.w	r2, r7, #32
 8010404:	4611      	mov	r1, r2
 8010406:	4618      	mov	r0, r3
 8010408:	f001 f906 	bl	8011618 <mg_queue_next>
 801040c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (len > 0) {
 801040e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010410:	2b00      	cmp	r3, #0
 8010412:	d00b      	beq.n	801042c <mg_tcpip_poll+0x214>
      mg_tcpip_rx(ifp, buf, len);
 8010414:	6a3b      	ldr	r3, [r7, #32]
 8010416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010418:	4619      	mov	r1, r3
 801041a:	6978      	ldr	r0, [r7, #20]
 801041c:	f7ff fdf0 	bl	8010000 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 8010420:	697b      	ldr	r3, [r7, #20]
 8010422:	3330      	adds	r3, #48	@ 0x30
 8010424:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010426:	4618      	mov	r0, r3
 8010428:	f001 f974 	bl	8011714 <mg_queue_del>
    }
  }

  // Process timeouts
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	637b      	str	r3, [r7, #52]	@ 0x34
 8010434:	e0f1      	b.n	801061a <mg_tcpip_poll+0x402>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 8010436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010438:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801043c:	f003 0301 	and.w	r3, r3, #1
 8010440:	b2db      	uxtb	r3, r3
 8010442:	2b00      	cmp	r3, #0
 8010444:	f040 80e5 	bne.w	8010612 <mg_tcpip_poll+0x3fa>
 8010448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801044a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801044e:	f003 0301 	and.w	r3, r3, #1
 8010452:	b2db      	uxtb	r3, r3
 8010454:	2b00      	cmp	r3, #0
 8010456:	f040 80dc 	bne.w	8010612 <mg_tcpip_poll+0x3fa>
 801045a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801045c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010460:	f003 0308 	and.w	r3, r3, #8
 8010464:	b2db      	uxtb	r3, r3
 8010466:	2b00      	cmp	r3, #0
 8010468:	f040 80d3 	bne.w	8010612 <mg_tcpip_poll+0x3fa>
    struct connstate *s = (struct connstate *) (c + 1);
 801046c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801046e:	33b0      	adds	r3, #176	@ 0xb0
 8010470:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8010472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010474:	331c      	adds	r3, #28
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	61fb      	str	r3, [r7, #28]
    if (now > s->timer) {
 801047a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801047c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8010480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010484:	4290      	cmp	r0, r2
 8010486:	eb71 0303 	sbcs.w	r3, r1, r3
 801048a:	f080 80c3 	bcs.w	8010614 <mg_tcpip_poll+0x3fc>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 801048e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010490:	7f9b      	ldrb	r3, [r3, #30]
 8010492:	2b01      	cmp	r3, #1
 8010494:	d142      	bne.n	801051c <mg_tcpip_poll+0x304>
 8010496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010498:	691a      	ldr	r2, [r3, #16]
 801049a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801049c:	685b      	ldr	r3, [r3, #4]
 801049e:	429a      	cmp	r2, r3
 80104a0:	d03c      	beq.n	801051c <mg_tcpip_poll+0x304>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 80104a2:	4b34      	ldr	r3, [pc, #208]	@ (8010574 <mg_tcpip_poll+0x35c>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	2b03      	cmp	r3, #3
 80104a8:	dd0f      	ble.n	80104ca <mg_tcpip_poll+0x2b2>
 80104aa:	4b33      	ldr	r3, [pc, #204]	@ (8010578 <mg_tcpip_poll+0x360>)
 80104ac:	f241 62be 	movw	r2, #5822	@ 0x16be
 80104b0:	4932      	ldr	r1, [pc, #200]	@ (801057c <mg_tcpip_poll+0x364>)
 80104b2:	2004      	movs	r0, #4
 80104b4:	f7fb fd9e 	bl	800bff4 <mg_log_prefix>
 80104b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80104bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104be:	681a      	ldr	r2, [r3, #0]
 80104c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104c2:	685b      	ldr	r3, [r3, #4]
 80104c4:	4831      	ldr	r0, [pc, #196]	@ (801058c <mg_tcpip_poll+0x374>)
 80104c6:	f7fb fde5 	bl	800c094 <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 80104ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104cc:	f103 0618 	add.w	r6, r3, #24
 80104d0:	69fb      	ldr	r3, [r7, #28]
 80104d2:	613b      	str	r3, [r7, #16]
 80104d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104d6:	8b1c      	ldrh	r4, [r3, #24]
 80104d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104da:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 80104dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	4618      	mov	r0, r3
 80104e2:	f002 fa80 	bl	80129e6 <mg_ntohl>
 80104e6:	6078      	str	r0, [r7, #4]
 80104e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104ea:	685b      	ldr	r3, [r3, #4]
 80104ec:	4618      	mov	r0, r3
 80104ee:	f002 fa7a 	bl	80129e6 <mg_ntohl>
 80104f2:	4603      	mov	r3, r0
 80104f4:	2200      	movs	r2, #0
 80104f6:	9205      	str	r2, [sp, #20]
 80104f8:	2200      	movs	r2, #0
 80104fa:	9204      	str	r2, [sp, #16]
 80104fc:	9303      	str	r3, [sp, #12]
 80104fe:	6879      	ldr	r1, [r7, #4]
 8010500:	9102      	str	r1, [sp, #8]
 8010502:	9501      	str	r5, [sp, #4]
 8010504:	9400      	str	r4, [sp, #0]
 8010506:	2310      	movs	r3, #16
 8010508:	693a      	ldr	r2, [r7, #16]
 801050a:	4631      	mov	r1, r6
 801050c:	6978      	ldr	r0, [r7, #20]
 801050e:	f7fe fd8b 	bl	800f028 <tx_tcp>
               mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
        s->acked = s->ack;
 8010512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010514:	685a      	ldr	r2, [r3, #4]
 8010516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010518:	611a      	str	r2, [r3, #16]
 801051a:	e075      	b.n	8010608 <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_ARP) {
 801051c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801051e:	7f9b      	ldrb	r3, [r3, #30]
 8010520:	2b02      	cmp	r3, #2
 8010522:	d104      	bne.n	801052e <mg_tcpip_poll+0x316>
        mg_error(c, "ARP timeout");
 8010524:	491a      	ldr	r1, [pc, #104]	@ (8010590 <mg_tcpip_poll+0x378>)
 8010526:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8010528:	f7f6 fb90 	bl	8006c4c <mg_error>
 801052c:	e06c      	b.n	8010608 <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 801052e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010530:	7f9b      	ldrb	r3, [r3, #30]
 8010532:	2b03      	cmp	r3, #3
 8010534:	d104      	bne.n	8010540 <mg_tcpip_poll+0x328>
        mg_error(c, "Connection timeout");
 8010536:	4917      	ldr	r1, [pc, #92]	@ (8010594 <mg_tcpip_poll+0x37c>)
 8010538:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801053a:	f7f6 fb87 	bl	8006c4c <mg_error>
 801053e:	e063      	b.n	8010608 <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_FIN) {
 8010540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010542:	7f9b      	ldrb	r3, [r3, #30]
 8010544:	2b04      	cmp	r3, #4
 8010546:	d107      	bne.n	8010558 <mg_tcpip_poll+0x340>
        c->is_closing = 1;
 8010548:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801054a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801054e:	f043 0320 	orr.w	r3, r3, #32
 8010552:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        continue;
 8010556:	e05d      	b.n	8010614 <mg_tcpip_poll+0x3fc>
      } else {
        if (s->tmiss++ > 2) {
 8010558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801055a:	7fdb      	ldrb	r3, [r3, #31]
 801055c:	1c5a      	adds	r2, r3, #1
 801055e:	b2d1      	uxtb	r1, r2
 8010560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010562:	77d1      	strb	r1, [r2, #31]
 8010564:	2b02      	cmp	r3, #2
 8010566:	d919      	bls.n	801059c <mg_tcpip_poll+0x384>
          mg_error(c, "keepalive");
 8010568:	490b      	ldr	r1, [pc, #44]	@ (8010598 <mg_tcpip_poll+0x380>)
 801056a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801056c:	f7f6 fb6e 	bl	8006c4c <mg_error>
 8010570:	e04a      	b.n	8010608 <mg_tcpip_poll+0x3f0>
 8010572:	bf00      	nop
 8010574:	20000244 	.word	0x20000244
 8010578:	080327a0 	.word	0x080327a0
 801057c:	0802efcc 	.word	0x0802efcc
 8010580:	080302d0 	.word	0x080302d0
 8010584:	001b7740 	.word	0x001b7740
 8010588:	08032644 	.word	0x08032644
 801058c:	080302e0 	.word	0x080302e0
 8010590:	080302f0 	.word	0x080302f0
 8010594:	080302fc 	.word	0x080302fc
 8010598:	08030310 	.word	0x08030310
        } else {
          MG_VERBOSE(("%lu keepalive", c->id));
 801059c:	4b23      	ldr	r3, [pc, #140]	@ (801062c <mg_tcpip_poll+0x414>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	2b03      	cmp	r3, #3
 80105a2:	dd0c      	ble.n	80105be <mg_tcpip_poll+0x3a6>
 80105a4:	4b22      	ldr	r3, [pc, #136]	@ (8010630 <mg_tcpip_poll+0x418>)
 80105a6:	f241 62cd 	movw	r2, #5837	@ 0x16cd
 80105aa:	4922      	ldr	r1, [pc, #136]	@ (8010634 <mg_tcpip_poll+0x41c>)
 80105ac:	2004      	movs	r0, #4
 80105ae:	f7fb fd21 	bl	800bff4 <mg_log_prefix>
 80105b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80105b6:	4619      	mov	r1, r3
 80105b8:	481f      	ldr	r0, [pc, #124]	@ (8010638 <mg_tcpip_poll+0x420>)
 80105ba:	f7fb fd6b 	bl	800c094 <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 80105be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105c0:	f103 0618 	add.w	r6, r3, #24
 80105c4:	69fb      	ldr	r3, [r7, #28]
 80105c6:	613b      	str	r3, [r7, #16]
 80105c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105ca:	8b1c      	ldrh	r4, [r3, #24]
 80105cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105ce:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 80105d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105d2:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 80105d4:	3b01      	subs	r3, #1
 80105d6:	4618      	mov	r0, r3
 80105d8:	f002 fa05 	bl	80129e6 <mg_ntohl>
 80105dc:	6078      	str	r0, [r7, #4]
 80105de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105e0:	685b      	ldr	r3, [r3, #4]
 80105e2:	4618      	mov	r0, r3
 80105e4:	f002 f9ff 	bl	80129e6 <mg_ntohl>
 80105e8:	4603      	mov	r3, r0
 80105ea:	2200      	movs	r2, #0
 80105ec:	9205      	str	r2, [sp, #20]
 80105ee:	2200      	movs	r2, #0
 80105f0:	9204      	str	r2, [sp, #16]
 80105f2:	9303      	str	r3, [sp, #12]
 80105f4:	6879      	ldr	r1, [r7, #4]
 80105f6:	9102      	str	r1, [sp, #8]
 80105f8:	9501      	str	r5, [sp, #4]
 80105fa:	9400      	str	r4, [sp, #0]
 80105fc:	2310      	movs	r3, #16
 80105fe:	693a      	ldr	r2, [r7, #16]
 8010600:	4631      	mov	r1, r6
 8010602:	6978      	ldr	r0, [r7, #20]
 8010604:	f7fe fd10 	bl	800f028 <tx_tcp>
        }
      }

      settmout(c, MIP_TTYPE_KEEPALIVE);
 8010608:	2100      	movs	r1, #0
 801060a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801060c:	f7fd fbda 	bl	800ddc4 <settmout>
 8010610:	e000      	b.n	8010614 <mg_tcpip_poll+0x3fc>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 8010612:	bf00      	nop
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 8010614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	637b      	str	r3, [r7, #52]	@ 0x34
 801061a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801061c:	2b00      	cmp	r3, #0
 801061e:	f47f af0a 	bne.w	8010436 <mg_tcpip_poll+0x21e>
 8010622:	e000      	b.n	8010626 <mg_tcpip_poll+0x40e>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8010624:	bf00      	nop
    }
  }
}
 8010626:	373c      	adds	r7, #60	@ 0x3c
 8010628:	46bd      	mov	sp, r7
 801062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801062c:	20000244 	.word	0x20000244
 8010630:	080327a0 	.word	0x080327a0
 8010634:	0802efcc 	.word	0x0802efcc
 8010638:	0803031c 	.word	0x0803031c

0801063c <mg_tcpip_qwrite>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 801063c:	b580      	push	{r7, lr}
 801063e:	b086      	sub	sp, #24
 8010640:	af00      	add	r7, sp, #0
 8010642:	60f8      	str	r0, [r7, #12]
 8010644:	60b9      	str	r1, [r7, #8]
 8010646:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	3330      	adds	r3, #48	@ 0x30
 801064c:	f107 0114 	add.w	r1, r7, #20
 8010650:	68ba      	ldr	r2, [r7, #8]
 8010652:	4618      	mov	r0, r3
 8010654:	f000 ff88 	bl	8011568 <mg_queue_book>
 8010658:	4602      	mov	r2, r0
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	4293      	cmp	r3, r2
 801065e:	d811      	bhi.n	8010684 <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 8010660:	697b      	ldr	r3, [r7, #20]
 8010662:	68ba      	ldr	r2, [r7, #8]
 8010664:	68f9      	ldr	r1, [r7, #12]
 8010666:	4618      	mov	r0, r3
 8010668:	f01b ff85 	bl	802c576 <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	3330      	adds	r3, #48	@ 0x30
 8010670:	68b9      	ldr	r1, [r7, #8]
 8010672:	4618      	mov	r0, r3
 8010674:	f001 f816 	bl	80116a4 <mg_queue_add>
    ifp->nrecv++;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801067c:	1c5a      	adds	r2, r3, #1
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	669a      	str	r2, [r3, #104]	@ 0x68
  } else {
    ifp->ndrop++;
  }
}
 8010682:	e004      	b.n	801068e <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010688:	1c5a      	adds	r2, r3, #1
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	665a      	str	r2, [r3, #100]	@ 0x64
}
 801068e:	bf00      	nop
 8010690:	3718      	adds	r7, #24
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}
	...

08010698 <mg_tcpip_init>:

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 8010698:	b580      	push	{r7, lr}
 801069a:	b084      	sub	sp, #16
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
 80106a0:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	781b      	ldrb	r3, [r3, #0]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d12d      	bne.n	8010706 <mg_tcpip_init+0x6e>
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	785b      	ldrb	r3, [r3, #1]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d129      	bne.n	8010706 <mg_tcpip_init+0x6e>
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	789b      	ldrb	r3, [r3, #2]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d125      	bne.n	8010706 <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d121      	bne.n	8010706 <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	791b      	ldrb	r3, [r3, #4]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d11d      	bne.n	8010706 <mg_tcpip_init+0x6e>
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	795b      	ldrb	r3, [r3, #5]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d119      	bne.n	8010706 <mg_tcpip_init+0x6e>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	2202      	movs	r2, #2
 80106d6:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	3301      	adds	r3, #1
 80106dc:	2105      	movs	r1, #5
 80106de:	4618      	mov	r0, r3
 80106e0:	f7f3 f84c 	bl	800377c <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 80106e4:	4b51      	ldr	r3, [pc, #324]	@ (801082c <mg_tcpip_init+0x194>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	dd0c      	ble.n	8010706 <mg_tcpip_init+0x6e>
 80106ec:	4b50      	ldr	r3, [pc, #320]	@ (8010830 <mg_tcpip_init+0x198>)
 80106ee:	f241 62ec 	movw	r2, #5868	@ 0x16ec
 80106f2:	4950      	ldr	r1, [pc, #320]	@ (8010834 <mg_tcpip_init+0x19c>)
 80106f4:	2002      	movs	r0, #2
 80106f6:	f7fb fc7d 	bl	800bff4 <mg_log_prefix>
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	461a      	mov	r2, r3
 80106fe:	494e      	ldr	r1, [pc, #312]	@ (8010838 <mg_tcpip_init+0x1a0>)
 8010700:	484e      	ldr	r0, [pc, #312]	@ (801083c <mg_tcpip_init+0x1a4>)
 8010702:	f7fb fcc7 	bl	800c094 <mg_log>
  }

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d019      	beq.n	8010744 <mg_tcpip_init+0xac>
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	6838      	ldr	r0, [r7, #0]
 8010718:	4798      	blx	r3
 801071a:	4603      	mov	r3, r0
 801071c:	f083 0301 	eor.w	r3, r3, #1
 8010720:	b2db      	uxtb	r3, r3
 8010722:	2b00      	cmp	r3, #0
 8010724:	d00e      	beq.n	8010744 <mg_tcpip_init+0xac>
    MG_ERROR(("driver init failed"));
 8010726:	4b41      	ldr	r3, [pc, #260]	@ (801082c <mg_tcpip_init+0x194>)
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	2b00      	cmp	r3, #0
 801072c:	dd7a      	ble.n	8010824 <mg_tcpip_init+0x18c>
 801072e:	4b40      	ldr	r3, [pc, #256]	@ (8010830 <mg_tcpip_init+0x198>)
 8010730:	f241 62f0 	movw	r2, #5872	@ 0x16f0
 8010734:	493f      	ldr	r1, [pc, #252]	@ (8010834 <mg_tcpip_init+0x19c>)
 8010736:	2001      	movs	r0, #1
 8010738:	f7fb fc5c 	bl	800bff4 <mg_log_prefix>
 801073c:	4840      	ldr	r0, [pc, #256]	@ (8010840 <mg_tcpip_init+0x1a8>)
 801073e:	f7fb fca9 	bl	800c094 <mg_log>
 8010742:	e06f      	b.n	8010824 <mg_tcpip_init+0x18c>
  } else {
    size_t framesize = 1540;
 8010744:	f240 6304 	movw	r3, #1540	@ 0x604
 8010748:	60fb      	str	r3, [r7, #12]
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 801074a:	68f9      	ldr	r1, [r7, #12]
 801074c:	2001      	movs	r0, #1
 801074e:	f019 ff85 	bl	802a65c <calloc>
 8010752:	4603      	mov	r3, r0
 8010754:	461a      	mov	r2, r3
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	615a      	str	r2, [r3, #20]
 801075a:	683b      	ldr	r3, [r7, #0]
 801075c:	68fa      	ldr	r2, [r7, #12]
 801075e:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010764:	2b00      	cmp	r3, #0
 8010766:	d10a      	bne.n	801077e <mg_tcpip_init+0xe6>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801076c:	689b      	ldr	r3, [r3, #8]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d001      	beq.n	8010776 <mg_tcpip_init+0xde>
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	e001      	b.n	801077a <mg_tcpip_init+0xe2>
 8010776:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801077a:	683a      	ldr	r2, [r7, #0]
 801077c:	6353      	str	r3, [r2, #52]	@ 0x34
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010782:	4619      	mov	r1, r3
 8010784:	2001      	movs	r0, #1
 8010786:	f019 ff69 	bl	802a65c <calloc>
 801078a:	4603      	mov	r3, r0
 801078c:	461a      	mov	r2, r3
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	631a      	str	r2, [r3, #48]	@ 0x30
    ifp->timer_1000ms = mg_millis();
 8010792:	f7f3 f821 	bl	80037d8 <mg_millis>
 8010796:	4602      	mov	r2, r0
 8010798:	460b      	mov	r3, r1
 801079a:	6839      	ldr	r1, [r7, #0]
 801079c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    mgr->priv = ifp;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	683a      	ldr	r2, [r7, #0]
 80107a4:	63da      	str	r2, [r3, #60]	@ 0x3c
    ifp->mgr = mgr;
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	687a      	ldr	r2, [r7, #4]
 80107aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80107b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    mgr->extraconnsize = sizeof(struct connstate);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2230      	movs	r2, #48	@ 0x30
 80107ba:	641a      	str	r2, [r3, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	689b      	ldr	r3, [r3, #8]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d102      	bne.n	80107ca <mg_tcpip_init+0x132>
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	2201      	movs	r2, #1
 80107c8:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	3342      	adds	r3, #66	@ 0x42
 80107ce:	2206      	movs	r2, #6
 80107d0:	21ff      	movs	r1, #255	@ 0xff
 80107d2:	4618      	mov	r0, r3
 80107d4:	f01b f99a 	bl	802bb0c <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	3360      	adds	r3, #96	@ 0x60
 80107dc:	2102      	movs	r1, #2
 80107de:	4618      	mov	r0, r3
 80107e0:	f7f2 ffcc 	bl	800377c <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80107ea:	4b16      	ldr	r3, [pc, #88]	@ (8010844 <mg_tcpip_init+0x1ac>)
 80107ec:	4313      	orrs	r3, r2
 80107ee:	b29a      	uxth	r2, r3
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	695b      	ldr	r3, [r3, #20]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d003      	beq.n	8010806 <mg_tcpip_init+0x16e>
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010802:	2b00      	cmp	r3, #0
 8010804:	d10e      	bne.n	8010824 <mg_tcpip_init+0x18c>
 8010806:	4b09      	ldr	r3, [pc, #36]	@ (801082c <mg_tcpip_init+0x194>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	2b00      	cmp	r3, #0
 801080c:	dd0a      	ble.n	8010824 <mg_tcpip_init+0x18c>
 801080e:	4b08      	ldr	r3, [pc, #32]	@ (8010830 <mg_tcpip_init+0x198>)
 8010810:	f241 7201 	movw	r2, #5889	@ 0x1701
 8010814:	4907      	ldr	r1, [pc, #28]	@ (8010834 <mg_tcpip_init+0x19c>)
 8010816:	2001      	movs	r0, #1
 8010818:	f7fb fbec 	bl	800bff4 <mg_log_prefix>
 801081c:	480a      	ldr	r0, [pc, #40]	@ (8010848 <mg_tcpip_init+0x1b0>)
 801081e:	f7fb fc39 	bl	800c094 <mg_log>
  }
}
 8010822:	e7ff      	b.n	8010824 <mg_tcpip_init+0x18c>
 8010824:	bf00      	nop
 8010826:	3710      	adds	r7, #16
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}
 801082c:	20000244 	.word	0x20000244
 8010830:	080327b0 	.word	0x080327b0
 8010834:	0802efcc 	.word	0x0802efcc
 8010838:	08011309 	.word	0x08011309
 801083c:	0803032c 	.word	0x0803032c
 8010840:	08030350 	.word	0x08030350
 8010844:	ffff8000 	.word	0xffff8000
 8010848:	0802fda8 	.word	0x0802fda8

0801084c <send_syn>:
void mg_tcpip_free(struct mg_tcpip_if *ifp) {
  free(ifp->recv_queue.buf);
  free(ifp->tx.buf);
}

static void send_syn(struct mg_connection *c) {
 801084c:	b590      	push	{r4, r7, lr}
 801084e:	b08d      	sub	sp, #52	@ 0x34
 8010850:	af06      	add	r7, sp, #24
 8010852:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	33b0      	adds	r3, #176	@ 0xb0
 8010858:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	8b1b      	ldrh	r3, [r3, #24]
 801085e:	4618      	mov	r0, r3
 8010860:	f002 f8da 	bl	8012a18 <mg_ntohs>
 8010864:	4603      	mov	r3, r0
 8010866:	4618      	mov	r0, r3
 8010868:	f002 f8bd 	bl	80129e6 <mg_ntohl>
 801086c:	6138      	str	r0, [r7, #16]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	685b      	ldr	r3, [r3, #4]
 8010872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010874:	60fb      	str	r3, [r7, #12]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	331c      	adds	r3, #28
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	60bb      	str	r3, [r7, #8]
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 801087e:	697b      	ldr	r3, [r7, #20]
 8010880:	f103 0018 	add.w	r0, r3, #24
 8010884:	68bc      	ldr	r4, [r7, #8]
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	8b1b      	ldrh	r3, [r3, #24]
 801088a:	687a      	ldr	r2, [r7, #4]
 801088c:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 801088e:	2100      	movs	r1, #0
 8010890:	9105      	str	r1, [sp, #20]
 8010892:	2100      	movs	r1, #0
 8010894:	9104      	str	r1, [sp, #16]
 8010896:	2100      	movs	r1, #0
 8010898:	9103      	str	r1, [sp, #12]
 801089a:	6939      	ldr	r1, [r7, #16]
 801089c:	9102      	str	r1, [sp, #8]
 801089e:	9201      	str	r2, [sp, #4]
 80108a0:	9300      	str	r3, [sp, #0]
 80108a2:	2302      	movs	r3, #2
 80108a4:	4622      	mov	r2, r4
 80108a6:	4601      	mov	r1, r0
 80108a8:	68f8      	ldr	r0, [r7, #12]
 80108aa:	f7fe fbbd 	bl	800f028 <tx_tcp>
         0);
}
 80108ae:	bf00      	nop
 80108b0:	371c      	adds	r7, #28
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd90      	pop	{r4, r7, pc}
	...

080108b8 <mg_connect_resolved>:

void mg_connect_resolved(struct mg_connection *c) {
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b08a      	sub	sp, #40	@ 0x28
 80108bc:	af02      	add	r7, sp, #8
 80108be:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	685b      	ldr	r3, [r3, #4]
 80108c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108c6:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	331c      	adds	r3, #28
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	60fb      	str	r3, [r7, #12]
  c->is_resolving = 0;
 80108d0:	687a      	ldr	r2, [r7, #4]
 80108d2:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80108d6:	f36f 03c3 	bfc	r3, #3, #1
 80108da:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 80108de:	69fb      	ldr	r3, [r7, #28]
 80108e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80108e4:	b21b      	sxth	r3, r3
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	db04      	blt.n	80108f4 <mg_connect_resolved+0x3c>
 80108ea:	69fb      	ldr	r3, [r7, #28]
 80108ec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80108f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	3308      	adds	r3, #8
 80108f8:	69fa      	ldr	r2, [r7, #28]
 80108fa:	3208      	adds	r2, #8
 80108fc:	6812      	ldr	r2, [r2, #0]
 80108fe:	601a      	str	r2, [r3, #0]
  c->loc.port = mg_htons(ifp->eport++);
 8010900:	69fb      	ldr	r3, [r7, #28]
 8010902:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010906:	1c5a      	adds	r2, r3, #1
 8010908:	b291      	uxth	r1, r2
 801090a:	69fa      	ldr	r2, [r7, #28]
 801090c:	f8a2 1060 	strh.w	r1, [r2, #96]	@ 0x60
 8010910:	4618      	mov	r0, r3
 8010912:	f002 f881 	bl	8012a18 <mg_ntohs>
 8010916:	4603      	mov	r3, r0
 8010918:	461a      	mov	r2, r3
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	831a      	strh	r2, [r3, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 801091e:	4b68      	ldr	r3, [pc, #416]	@ (8010ac0 <mg_connect_resolved+0x208>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	2b02      	cmp	r3, #2
 8010924:	dd15      	ble.n	8010952 <mg_connect_resolved+0x9a>
 8010926:	4b67      	ldr	r3, [pc, #412]	@ (8010ac4 <mg_connect_resolved+0x20c>)
 8010928:	f241 721c 	movw	r2, #5916	@ 0x171c
 801092c:	4966      	ldr	r1, [pc, #408]	@ (8010ac8 <mg_connect_resolved+0x210>)
 801092e:	2003      	movs	r0, #3
 8010930:	f7fb fb60 	bl	800bff4 <mg_log_prefix>
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f103 0208 	add.w	r2, r3, #8
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	331c      	adds	r3, #28
 8010942:	9301      	str	r3, [sp, #4]
 8010944:	4b61      	ldr	r3, [pc, #388]	@ (8010acc <mg_connect_resolved+0x214>)
 8010946:	9300      	str	r3, [sp, #0]
 8010948:	4613      	mov	r3, r2
 801094a:	4a60      	ldr	r2, [pc, #384]	@ (8010acc <mg_connect_resolved+0x214>)
 801094c:	4860      	ldr	r0, [pc, #384]	@ (8010ad0 <mg_connect_resolved+0x218>)
 801094e:	f7fb fba1 	bl	800c094 <mg_log>
            &c->rem));
  mg_call(c, MG_EV_RESOLVE, NULL);
 8010952:	2200      	movs	r2, #0
 8010954:	2103      	movs	r1, #3
 8010956:	6878      	ldr	r0, [r7, #4]
 8010958:	f7f6 f958 	bl	8006c0c <mg_call>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010962:	f003 0301 	and.w	r3, r3, #1
 8010966:	b2db      	uxtb	r3, r3
 8010968:	2b00      	cmp	r3, #0
 801096a:	d017      	beq.n	801099c <mg_connect_resolved+0xe4>
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010972:	d008      	beq.n	8010986 <mg_connect_resolved+0xce>
 8010974:	69fb      	ldr	r3, [r7, #28]
 8010976:	689a      	ldr	r2, [r3, #8]
 8010978:	69fb      	ldr	r3, [r7, #28]
 801097a:	68db      	ldr	r3, [r3, #12]
 801097c:	43db      	mvns	r3, r3
 801097e:	431a      	orrs	r2, r3
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	429a      	cmp	r2, r3
 8010984:	d10a      	bne.n	801099c <mg_connect_resolved+0xe4>
    struct connstate *s = (struct connstate *) (c + 1);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	33b0      	adds	r3, #176	@ 0xb0
 801098a:	61bb      	str	r3, [r7, #24]
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 801098c:	69bb      	ldr	r3, [r7, #24]
 801098e:	3318      	adds	r3, #24
 8010990:	2206      	movs	r2, #6
 8010992:	21ff      	movs	r1, #255	@ 0xff
 8010994:	4618      	mov	r0, r3
 8010996:	f01b f8b9 	bl	802bb0c <memset>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 801099a:	e08c      	b.n	8010ab6 <mg_connect_resolved+0x1fe>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask))) {
 801099c:	69fb      	ldr	r3, [r7, #28]
 801099e:	689b      	ldr	r3, [r3, #8]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d031      	beq.n	8010a08 <mg_connect_resolved+0x150>
 80109a4:	69fb      	ldr	r3, [r7, #28]
 80109a6:	689a      	ldr	r2, [r3, #8]
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	405a      	eors	r2, r3
 80109ac:	69fb      	ldr	r3, [r7, #28]
 80109ae:	68db      	ldr	r3, [r3, #12]
 80109b0:	4013      	ands	r3, r2
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d128      	bne.n	8010a08 <mg_connect_resolved+0x150>
    // If we're in the same LAN, fire an ARP lookup.
    MG_DEBUG(("%lu ARP lookup...", c->id));
 80109b6:	4b42      	ldr	r3, [pc, #264]	@ (8010ac0 <mg_connect_resolved+0x208>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	2b02      	cmp	r3, #2
 80109bc:	dd0c      	ble.n	80109d8 <mg_connect_resolved+0x120>
 80109be:	4b41      	ldr	r3, [pc, #260]	@ (8010ac4 <mg_connect_resolved+0x20c>)
 80109c0:	f241 7224 	movw	r2, #5924	@ 0x1724
 80109c4:	4940      	ldr	r1, [pc, #256]	@ (8010ac8 <mg_connect_resolved+0x210>)
 80109c6:	2003      	movs	r0, #3
 80109c8:	f7fb fb14 	bl	800bff4 <mg_log_prefix>
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109d0:	4619      	mov	r1, r3
 80109d2:	4840      	ldr	r0, [pc, #256]	@ (8010ad4 <mg_connect_resolved+0x21c>)
 80109d4:	f7fb fb5e 	bl	800c094 <mg_log>
    arp_ask(ifp, rem_ip);
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	4619      	mov	r1, r3
 80109dc:	69f8      	ldr	r0, [r7, #28]
 80109de:	f7fd fa69 	bl	800deb4 <arp_ask>
    settmout(c, MIP_TTYPE_ARP);
 80109e2:	2102      	movs	r1, #2
 80109e4:	6878      	ldr	r0, [r7, #4]
 80109e6:	f7fd f9ed 	bl	800ddc4 <settmout>
    c->is_arplooking = 1;
 80109ea:	687a      	ldr	r2, [r7, #4]
 80109ec:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80109f0:	f043 0310 	orr.w	r3, r3, #16
 80109f4:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_connecting = 1;
 80109f8:	687a      	ldr	r2, [r7, #4]
 80109fa:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80109fe:	f043 0320 	orr.w	r3, r3, #32
 8010a02:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 8010a06:	e056      	b.n	8010ab6 <mg_connect_resolved+0x1fe>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 8010a08:	f107 030c 	add.w	r3, r7, #12
 8010a0c:	781b      	ldrb	r3, [r3, #0]
 8010a0e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8010a12:	2be0      	cmp	r3, #224	@ 0xe0
 8010a14:	d126      	bne.n	8010a64 <mg_connect_resolved+0x1ac>
    struct connstate *s = (struct connstate *) (c + 1);  // 224 to 239, E0 to EF
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	33b0      	adds	r3, #176	@ 0xb0
 8010a1a:	613b      	str	r3, [r7, #16]
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 8010a1c:	4a2e      	ldr	r2, [pc, #184]	@ (8010ad8 <mg_connect_resolved+0x220>)
 8010a1e:	f107 0308 	add.w	r3, r7, #8
 8010a22:	6812      	ldr	r2, [r2, #0]
 8010a24:	4611      	mov	r1, r2
 8010a26:	8019      	strh	r1, [r3, #0]
 8010a28:	3302      	adds	r3, #2
 8010a2a:	0c12      	lsrs	r2, r2, #16
 8010a2c:	701a      	strb	r2, [r3, #0]
    memcpy(s->mac, mcastp, 3);
 8010a2e:	693b      	ldr	r3, [r7, #16]
 8010a30:	3318      	adds	r3, #24
 8010a32:	461a      	mov	r2, r3
 8010a34:	f107 0308 	add.w	r3, r7, #8
 8010a38:	8819      	ldrh	r1, [r3, #0]
 8010a3a:	789b      	ldrb	r3, [r3, #2]
 8010a3c:	8011      	strh	r1, [r2, #0]
 8010a3e:	7093      	strb	r3, [r2, #2]
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	3318      	adds	r3, #24
 8010a44:	1cd8      	adds	r0, r3, #3
 8010a46:	f107 030c 	add.w	r3, r7, #12
 8010a4a:	3301      	adds	r3, #1
 8010a4c:	2203      	movs	r2, #3
 8010a4e:	4619      	mov	r1, r3
 8010a50:	f01b fd91 	bl	802c576 <memcpy>
    s->mac[3] &= 0x7F;
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	7edb      	ldrb	r3, [r3, #27]
 8010a58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a5c:	b2da      	uxtb	r2, r3
 8010a5e:	693b      	ldr	r3, [r7, #16]
 8010a60:	76da      	strb	r2, [r3, #27]
      send_syn(c);
      settmout(c, MIP_TTYPE_SYN);
      c->is_connecting = 1;
    }
  }
}
 8010a62:	e028      	b.n	8010ab6 <mg_connect_resolved+0x1fe>
    struct connstate *s = (struct connstate *) (c + 1);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	33b0      	adds	r3, #176	@ 0xb0
 8010a68:	617b      	str	r3, [r7, #20]
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 8010a6a:	697b      	ldr	r3, [r7, #20]
 8010a6c:	f103 0018 	add.w	r0, r3, #24
 8010a70:	69fb      	ldr	r3, [r7, #28]
 8010a72:	3342      	adds	r3, #66	@ 0x42
 8010a74:	2206      	movs	r2, #6
 8010a76:	4619      	mov	r1, r3
 8010a78:	f01b fd7d 	bl	802c576 <memcpy>
    if (c->is_udp) {
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010a82:	f003 0301 	and.w	r3, r3, #1
 8010a86:	b2db      	uxtb	r3, r3
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d005      	beq.n	8010a98 <mg_connect_resolved+0x1e0>
      mg_call(c, MG_EV_CONNECT, NULL);
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	2104      	movs	r1, #4
 8010a90:	6878      	ldr	r0, [r7, #4]
 8010a92:	f7f6 f8bb 	bl	8006c0c <mg_call>
}
 8010a96:	e00e      	b.n	8010ab6 <mg_connect_resolved+0x1fe>
      send_syn(c);
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f7ff fed7 	bl	801084c <send_syn>
      settmout(c, MIP_TTYPE_SYN);
 8010a9e:	2103      	movs	r1, #3
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f7fd f98f 	bl	800ddc4 <settmout>
      c->is_connecting = 1;
 8010aa6:	687a      	ldr	r2, [r7, #4]
 8010aa8:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8010aac:	f043 0320 	orr.w	r3, r3, #32
 8010ab0:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
}
 8010ab4:	e7ff      	b.n	8010ab6 <mg_connect_resolved+0x1fe>
 8010ab6:	bf00      	nop
 8010ab8:	3720      	adds	r7, #32
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd80      	pop	{r7, pc}
 8010abe:	bf00      	nop
 8010ac0:	20000244 	.word	0x20000244
 8010ac4:	080327c0 	.word	0x080327c0
 8010ac8:	0802efcc 	.word	0x0802efcc
 8010acc:	080112bd 	.word	0x080112bd
 8010ad0:	08030364 	.word	0x08030364
 8010ad4:	08030374 	.word	0x08030374
 8010ad8:	08030388 	.word	0x08030388

08010adc <mg_open_listener>:

bool mg_open_listener(struct mg_connection *c, const char *url) {
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b082      	sub	sp, #8
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
 8010ae4:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 8010ae6:	6838      	ldr	r0, [r7, #0]
 8010ae8:	f001 ff00 	bl	80128ec <mg_url_port>
 8010aec:	4603      	mov	r3, r0
 8010aee:	4618      	mov	r0, r3
 8010af0:	f001 ff92 	bl	8012a18 <mg_ntohs>
 8010af4:	4603      	mov	r3, r0
 8010af6:	461a      	mov	r2, r3
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	831a      	strh	r2, [r3, #24]
  return true;
 8010afc:	2301      	movs	r3, #1
}
 8010afe:	4618      	mov	r0, r3
 8010b00:	3708      	adds	r7, #8
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}
	...

08010b08 <write_conn>:

static void write_conn(struct mg_connection *c) {
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b084      	sub	sp, #16
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b1a:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d009      	beq.n	8010b34 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b28:	461a      	mov	r2, r3
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f001 fdb3 	bl	8012696 <mg_tls_send>
 8010b30:	4603      	mov	r3, r0
 8010b32:	e008      	b.n	8010b46 <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b3c:	461a      	mov	r2, r3
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	f7fe fcca 	bl	800f4d8 <mg_io_send>
 8010b44:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8010b46:	60fb      	str	r3, [r7, #12]
  if (len == MG_IO_ERR) {
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010b4e:	d104      	bne.n	8010b5a <write_conn+0x52>
    mg_error(c, "tx err");
 8010b50:	490c      	ldr	r1, [pc, #48]	@ (8010b84 <write_conn+0x7c>)
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f7f6 f87a 	bl	8006c4c <mg_error>
  } else if (len > 0) {
    mg_iobuf_del(&c->send, 0, (size_t) len);
    mg_call(c, MG_EV_WRITE, &len);
  }
}
 8010b58:	e010      	b.n	8010b7c <write_conn+0x74>
  } else if (len > 0) {
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	dd0d      	ble.n	8010b7c <write_conn+0x74>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	3348      	adds	r3, #72	@ 0x48
 8010b64:	68fa      	ldr	r2, [r7, #12]
 8010b66:	2100      	movs	r1, #0
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7fa fb29 	bl	800b1c0 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 8010b6e:	f107 030c 	add.w	r3, r7, #12
 8010b72:	461a      	mov	r2, r3
 8010b74:	2108      	movs	r1, #8
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f7f6 f848 	bl	8006c0c <mg_call>
}
 8010b7c:	bf00      	nop
 8010b7e:	3710      	adds	r7, #16
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}
 8010b84:	0803038c 	.word	0x0803038c

08010b88 <init_closure>:

static void init_closure(struct mg_connection *c) {
 8010b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b8a:	b08f      	sub	sp, #60	@ 0x3c
 8010b8c:	af06      	add	r7, sp, #24
 8010b8e:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	33b0      	adds	r3, #176	@ 0xb0
 8010b94:	61fb      	str	r3, [r7, #28]
  if (c->is_udp == false && c->is_listening == false &&
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010b9c:	f003 0301 	and.w	r3, r3, #1
 8010ba0:	b2db      	uxtb	r3, r3
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d13f      	bne.n	8010c26 <init_closure+0x9e>
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010bac:	f003 0301 	and.w	r3, r3, #1
 8010bb0:	b2db      	uxtb	r3, r3
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d137      	bne.n	8010c26 <init_closure+0x9e>
      c->is_connecting == false) {  // For TCP conns,
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010bbc:	f003 0320 	and.w	r3, r3, #32
 8010bc0:	b2db      	uxtb	r3, r3
  if (c->is_udp == false && c->is_listening == false &&
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d12f      	bne.n	8010c26 <init_closure+0x9e>
    struct mg_tcpip_if *ifp =
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	685b      	ldr	r3, [r3, #4]
    struct mg_tcpip_if *ifp =
 8010bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010bcc:	61bb      	str	r3, [r7, #24]
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	331c      	adds	r3, #28
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	617b      	str	r3, [r7, #20]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 8010bd6:	69fb      	ldr	r3, [r7, #28]
 8010bd8:	f103 0618 	add.w	r6, r3, #24
 8010bdc:	697b      	ldr	r3, [r7, #20]
 8010bde:	60bb      	str	r3, [r7, #8]
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	8b1c      	ldrh	r4, [r3, #24]
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8010be8:	69fb      	ldr	r3, [r7, #28]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	4618      	mov	r0, r3
 8010bee:	f001 fefa 	bl	80129e6 <mg_ntohl>
 8010bf2:	6078      	str	r0, [r7, #4]
 8010bf4:	69fb      	ldr	r3, [r7, #28]
 8010bf6:	685b      	ldr	r3, [r3, #4]
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f001 fef4 	bl	80129e6 <mg_ntohl>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	2200      	movs	r2, #0
 8010c02:	9205      	str	r2, [sp, #20]
 8010c04:	2200      	movs	r2, #0
 8010c06:	9204      	str	r2, [sp, #16]
 8010c08:	9303      	str	r3, [sp, #12]
 8010c0a:	6879      	ldr	r1, [r7, #4]
 8010c0c:	9102      	str	r1, [sp, #8]
 8010c0e:	9501      	str	r5, [sp, #4]
 8010c10:	9400      	str	r4, [sp, #0]
 8010c12:	2311      	movs	r3, #17
 8010c14:	68ba      	ldr	r2, [r7, #8]
 8010c16:	4631      	mov	r1, r6
 8010c18:	69b8      	ldr	r0, [r7, #24]
 8010c1a:	f7fe fa05 	bl	800f028 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    settmout(c, MIP_TTYPE_FIN);
 8010c1e:	2104      	movs	r1, #4
 8010c20:	68f8      	ldr	r0, [r7, #12]
 8010c22:	f7fd f8cf 	bl	800ddc4 <settmout>
  }
}
 8010c26:	bf00      	nop
 8010c28:	3724      	adds	r7, #36	@ 0x24
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010c2e <close_conn>:

static void close_conn(struct mg_connection *c) {
 8010c2e:	b580      	push	{r7, lr}
 8010c30:	b084      	sub	sp, #16
 8010c32:	af00      	add	r7, sp, #0
 8010c34:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	33b0      	adds	r3, #176	@ 0xb0
 8010c3a:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	3320      	adds	r3, #32
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7fa fb08 	bl	800b256 <mg_iobuf_free>
  mg_close_conn(c);
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f7fc fe1a 	bl	800d880 <mg_close_conn>
}
 8010c4c:	bf00      	nop
 8010c4e:	3710      	adds	r7, #16
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}

08010c54 <can_write>:

static bool can_write(struct mg_connection *c) {
 8010c54:	b480      	push	{r7}
 8010c56:	b083      	sub	sp, #12
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010c62:	f003 0320 	and.w	r3, r3, #32
 8010c66:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d11d      	bne.n	8010ca8 <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010c72:	f003 0308 	and.w	r3, r3, #8
 8010c76:	b2db      	uxtb	r3, r3
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d115      	bne.n	8010ca8 <can_write+0x54>
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d011      	beq.n	8010ca8 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010c8a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010c8e:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d109      	bne.n	8010ca8 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010c9a:	f003 0310 	and.w	r3, r3, #16
 8010c9e:	b2db      	uxtb	r3, r3
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d101      	bne.n	8010ca8 <can_write+0x54>
 8010ca4:	2301      	movs	r3, #1
 8010ca6:	e000      	b.n	8010caa <can_write+0x56>
 8010ca8:	2300      	movs	r3, #0
 8010caa:	f003 0301 	and.w	r3, r3, #1
 8010cae:	b2db      	uxtb	r3, r3
}
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	370c      	adds	r7, #12
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cba:	4770      	bx	lr

08010cbc <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 8010cbc:	b5b0      	push	{r4, r5, r7, lr}
 8010cbe:	b08c      	sub	sp, #48	@ 0x30
 8010cc0:	af04      	add	r7, sp, #16
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010cca:	61bb      	str	r3, [r7, #24]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 8010ccc:	f7f2 fd84 	bl	80037d8 <mg_millis>
 8010cd0:	4602      	mov	r2, r0
 8010cd2:	460b      	mov	r3, r1
 8010cd4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  mg_timer_poll(&mgr->timers, now);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8010cde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010ce2:	4608      	mov	r0, r1
 8010ce4:	f001 fc33 	bl	801254e <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 8010ce8:	69bb      	ldr	r3, [r7, #24]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	f000 80aa 	beq.w	8010e44 <mg_mgr_poll+0x188>
 8010cf0:	69bb      	ldr	r3, [r7, #24]
 8010cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	f000 80a5 	beq.w	8010e44 <mg_mgr_poll+0x188>
  mg_tcpip_poll(ifp, now);
 8010cfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010cfe:	69b8      	ldr	r0, [r7, #24]
 8010d00:	f7ff fa8a 	bl	8010218 <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	61fb      	str	r3, [r7, #28]
 8010d0a:	e096      	b.n	8010e3a <mg_mgr_poll+0x17e>
    tmp = c->next;
 8010d0c:	69fb      	ldr	r3, [r7, #28]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	617b      	str	r3, [r7, #20]
    struct connstate *s = (struct connstate *) (c + 1);
 8010d12:	69fb      	ldr	r3, [r7, #28]
 8010d14:	33b0      	adds	r3, #176	@ 0xb0
 8010d16:	613b      	str	r3, [r7, #16]
    mg_call(c, MG_EV_POLL, &now);
 8010d18:	f107 0308 	add.w	r3, r7, #8
 8010d1c:	461a      	mov	r2, r3
 8010d1e:	2102      	movs	r1, #2
 8010d20:	69f8      	ldr	r0, [r7, #28]
 8010d22:	f7f5 ff73 	bl	8006c0c <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 8010d26:	4b49      	ldr	r3, [pc, #292]	@ (8010e4c <mg_mgr_poll+0x190>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	2b03      	cmp	r3, #3
 8010d2c:	dd48      	ble.n	8010dc0 <mg_mgr_poll+0x104>
 8010d2e:	4b48      	ldr	r3, [pc, #288]	@ (8010e50 <mg_mgr_poll+0x194>)
 8010d30:	f241 7270 	movw	r2, #6000	@ 0x1770
 8010d34:	4947      	ldr	r1, [pc, #284]	@ (8010e54 <mg_mgr_poll+0x198>)
 8010d36:	2004      	movs	r0, #4
 8010d38:	f7fb f95c 	bl	800bff4 <mg_log_prefix>
 8010d3c:	69fb      	ldr	r3, [r7, #28]
 8010d3e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8010d40:	69fb      	ldr	r3, [r7, #28]
 8010d42:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d4a:	b2db      	uxtb	r3, r3
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d001      	beq.n	8010d54 <mg_mgr_poll+0x98>
 8010d50:	2454      	movs	r4, #84	@ 0x54
 8010d52:	e000      	b.n	8010d56 <mg_mgr_poll+0x9a>
 8010d54:	2474      	movs	r4, #116	@ 0x74
 8010d56:	69fb      	ldr	r3, [r7, #28]
 8010d58:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010d5c:	f003 0320 	and.w	r3, r3, #32
 8010d60:	b2db      	uxtb	r3, r3
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d001      	beq.n	8010d6a <mg_mgr_poll+0xae>
 8010d66:	2543      	movs	r5, #67	@ 0x43
 8010d68:	e000      	b.n	8010d6c <mg_mgr_poll+0xb0>
 8010d6a:	2563      	movs	r5, #99	@ 0x63
 8010d6c:	69fb      	ldr	r3, [r7, #28]
 8010d6e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010d72:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010d76:	b2db      	uxtb	r3, r3
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d001      	beq.n	8010d80 <mg_mgr_poll+0xc4>
 8010d7c:	2348      	movs	r3, #72	@ 0x48
 8010d7e:	e000      	b.n	8010d82 <mg_mgr_poll+0xc6>
 8010d80:	2368      	movs	r3, #104	@ 0x68
 8010d82:	69fa      	ldr	r2, [r7, #28]
 8010d84:	f892 20ac 	ldrb.w	r2, [r2, #172]	@ 0xac
 8010d88:	f002 0208 	and.w	r2, r2, #8
 8010d8c:	b2d2      	uxtb	r2, r2
 8010d8e:	2a00      	cmp	r2, #0
 8010d90:	d001      	beq.n	8010d96 <mg_mgr_poll+0xda>
 8010d92:	2252      	movs	r2, #82	@ 0x52
 8010d94:	e000      	b.n	8010d98 <mg_mgr_poll+0xdc>
 8010d96:	2272      	movs	r2, #114	@ 0x72
 8010d98:	69f9      	ldr	r1, [r7, #28]
 8010d9a:	f891 10ad 	ldrb.w	r1, [r1, #173]	@ 0xad
 8010d9e:	f001 0120 	and.w	r1, r1, #32
 8010da2:	b2c9      	uxtb	r1, r1
 8010da4:	2900      	cmp	r1, #0
 8010da6:	d001      	beq.n	8010dac <mg_mgr_poll+0xf0>
 8010da8:	2143      	movs	r1, #67	@ 0x43
 8010daa:	e000      	b.n	8010dae <mg_mgr_poll+0xf2>
 8010dac:	2163      	movs	r1, #99	@ 0x63
 8010dae:	9102      	str	r1, [sp, #8]
 8010db0:	9201      	str	r2, [sp, #4]
 8010db2:	9300      	str	r3, [sp, #0]
 8010db4:	462b      	mov	r3, r5
 8010db6:	4622      	mov	r2, r4
 8010db8:	4601      	mov	r1, r0
 8010dba:	4827      	ldr	r0, [pc, #156]	@ (8010e58 <mg_mgr_poll+0x19c>)
 8010dbc:	f7fb f96a 	bl	800c094 <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c'));
    if (c->is_tls && mg_tls_pending(c) > 0)
 8010dc0:	69fb      	ldr	r3, [r7, #28]
 8010dc2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010dca:	b2db      	uxtb	r3, r3
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d00b      	beq.n	8010de8 <mg_mgr_poll+0x12c>
 8010dd0:	69f8      	ldr	r0, [r7, #28]
 8010dd2:	f001 fc79 	bl	80126c8 <mg_tls_pending>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d005      	beq.n	8010de8 <mg_mgr_poll+0x12c>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 8010ddc:	69fb      	ldr	r3, [r7, #28]
 8010dde:	3368      	adds	r3, #104	@ 0x68
 8010de0:	4619      	mov	r1, r3
 8010de2:	69f8      	ldr	r0, [r7, #28]
 8010de4:	f7fe fbf0 	bl	800f5c8 <handle_tls_recv>
    if (can_write(c)) write_conn(c);
 8010de8:	69f8      	ldr	r0, [r7, #28]
 8010dea:	f7ff ff33 	bl	8010c54 <can_write>
 8010dee:	4603      	mov	r3, r0
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d002      	beq.n	8010dfa <mg_mgr_poll+0x13e>
 8010df4:	69f8      	ldr	r0, [r7, #28]
 8010df6:	f7ff fe87 	bl	8010b08 <write_conn>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 8010dfa:	69fb      	ldr	r3, [r7, #28]
 8010dfc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010e00:	f003 0310 	and.w	r3, r3, #16
 8010e04:	b2db      	uxtb	r3, r3
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d00a      	beq.n	8010e20 <mg_mgr_poll+0x164>
 8010e0a:	69fb      	ldr	r3, [r7, #28]
 8010e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d106      	bne.n	8010e20 <mg_mgr_poll+0x164>
 8010e12:	693b      	ldr	r3, [r7, #16]
 8010e14:	7f9b      	ldrb	r3, [r3, #30]
 8010e16:	2b04      	cmp	r3, #4
 8010e18:	d002      	beq.n	8010e20 <mg_mgr_poll+0x164>
      init_closure(c);
 8010e1a:	69f8      	ldr	r0, [r7, #28]
 8010e1c:	f7ff feb4 	bl	8010b88 <init_closure>
    if (c->is_closing) close_conn(c);
 8010e20:	69fb      	ldr	r3, [r7, #28]
 8010e22:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010e26:	f003 0320 	and.w	r3, r3, #32
 8010e2a:	b2db      	uxtb	r3, r3
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d002      	beq.n	8010e36 <mg_mgr_poll+0x17a>
 8010e30:	69f8      	ldr	r0, [r7, #28]
 8010e32:	f7ff fefc 	bl	8010c2e <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8010e36:	697b      	ldr	r3, [r7, #20]
 8010e38:	61fb      	str	r3, [r7, #28]
 8010e3a:	69fb      	ldr	r3, [r7, #28]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	f47f af65 	bne.w	8010d0c <mg_mgr_poll+0x50>
 8010e42:	e000      	b.n	8010e46 <mg_mgr_poll+0x18a>
  if (ifp == NULL || ifp->driver == NULL) return;
 8010e44:	bf00      	nop
  }
  (void) ms;
}
 8010e46:	3720      	adds	r7, #32
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8010e4c:	20000244 	.word	0x20000244
 8010e50:	080327d4 	.word	0x080327d4
 8010e54:	0802efcc 	.word	0x0802efcc
 8010e58:	08030394 	.word	0x08030394

08010e5c <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 8010e5c:	b5b0      	push	{r4, r5, r7, lr}
 8010e5e:	b08c      	sub	sp, #48	@ 0x30
 8010e60:	af04      	add	r7, sp, #16
 8010e62:	60f8      	str	r0, [r7, #12]
 8010e64:	60b9      	str	r1, [r7, #8]
 8010e66:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	685b      	ldr	r3, [r3, #4]
 8010e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e6e:	61bb      	str	r3, [r7, #24]
  bool res = false;
 8010e70:	2300      	movs	r3, #0
 8010e72:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	331c      	adds	r3, #28
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 8010e7c:	69bb      	ldr	r3, [r7, #24]
 8010e7e:	689b      	ldr	r3, [r3, #8]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d004      	beq.n	8010e8e <mg_send+0x32>
 8010e84:	69bb      	ldr	r3, [r7, #24]
 8010e86:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8010e8a:	2b03      	cmp	r3, #3
 8010e8c:	d004      	beq.n	8010e98 <mg_send+0x3c>
    mg_error(c, "net down");
 8010e8e:	4921      	ldr	r1, [pc, #132]	@ (8010f14 <mg_send+0xb8>)
 8010e90:	68f8      	ldr	r0, [r7, #12]
 8010e92:	f7f5 fedb 	bl	8006c4c <mg_error>
 8010e96:	e037      	b.n	8010f08 <mg_send+0xac>
  } else if (c->is_udp) {
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010e9e:	f003 0301 	and.w	r3, r3, #1
 8010ea2:	b2db      	uxtb	r3, r3
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d020      	beq.n	8010eea <mg_send+0x8e>
    struct connstate *s = (struct connstate *) (c + 1);
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	33b0      	adds	r3, #176	@ 0xb0
 8010eac:	617b      	str	r3, [r7, #20]
    len = trim_len(c, len);  // Trimming length if necessary
 8010eae:	6879      	ldr	r1, [r7, #4]
 8010eb0:	68f8      	ldr	r0, [r7, #12]
 8010eb2:	f7fe fa83 	bl	800f3bc <trim_len>
 8010eb6:	6078      	str	r0, [r7, #4]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8010eb8:	697b      	ldr	r3, [r7, #20]
 8010eba:	f103 0018 	add.w	r0, r3, #24
 8010ebe:	69bb      	ldr	r3, [r7, #24]
 8010ec0:	689c      	ldr	r4, [r3, #8]
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	8b1d      	ldrh	r5, [r3, #24]
 8010ec6:	693b      	ldr	r3, [r7, #16]
 8010ec8:	68fa      	ldr	r2, [r7, #12]
 8010eca:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8010ecc:	6879      	ldr	r1, [r7, #4]
 8010ece:	9103      	str	r1, [sp, #12]
 8010ed0:	68b9      	ldr	r1, [r7, #8]
 8010ed2:	9102      	str	r1, [sp, #8]
 8010ed4:	9201      	str	r2, [sp, #4]
 8010ed6:	9300      	str	r3, [sp, #0]
 8010ed8:	462b      	mov	r3, r5
 8010eda:	4622      	mov	r2, r4
 8010edc:	4601      	mov	r1, r0
 8010ede:	69b8      	ldr	r0, [r7, #24]
 8010ee0:	f7fd f928 	bl	800e134 <tx_udp>
    res = true;
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	77fb      	strb	r3, [r7, #31]
 8010ee8:	e00e      	b.n	8010f08 <mg_send+0xac>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	68ba      	ldr	r2, [r7, #8]
 8010ef8:	f7fa f910 	bl	800b11c <mg_iobuf_add>
 8010efc:	4603      	mov	r3, r0
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	bf14      	ite	ne
 8010f02:	2301      	movne	r3, #1
 8010f04:	2300      	moveq	r3, #0
 8010f06:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 8010f08:	7ffb      	ldrb	r3, [r7, #31]
}
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	3720      	adds	r7, #32
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bdb0      	pop	{r4, r5, r7, pc}
 8010f12:	bf00      	nop
 8010f14:	080303a8 	.word	0x080303a8

08010f18 <mg_ota_begin>:
#endif



#if MG_OTA == MG_OTA_NONE
bool mg_ota_begin(size_t new_firmware_size) {
 8010f18:	b480      	push	{r7}
 8010f1a:	b083      	sub	sp, #12
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
  (void) new_firmware_size;
  return true;
 8010f20:	2301      	movs	r3, #1
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	370c      	adds	r7, #12
 8010f26:	46bd      	mov	sp, r7
 8010f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2c:	4770      	bx	lr

08010f2e <mg_ota_write>:
bool mg_ota_write(const void *buf, size_t len) {
 8010f2e:	b480      	push	{r7}
 8010f30:	b083      	sub	sp, #12
 8010f32:	af00      	add	r7, sp, #0
 8010f34:	6078      	str	r0, [r7, #4]
 8010f36:	6039      	str	r1, [r7, #0]
  (void) buf, (void) len;
  return true;
 8010f38:	2301      	movs	r3, #1
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	370c      	adds	r7, #12
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f44:	4770      	bx	lr

08010f46 <mg_ota_end>:
bool mg_ota_end(void) {
 8010f46:	b480      	push	{r7}
 8010f48:	af00      	add	r7, sp, #0
  return true;
 8010f4a:	2301      	movs	r3, #1
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f54:	4770      	bx	lr

08010f56 <mg_ota_commit>:
bool mg_ota_commit(void) {
 8010f56:	b480      	push	{r7}
 8010f58:	af00      	add	r7, sp, #0
  return true;
 8010f5a:	2301      	movs	r3, #1
}
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f64:	4770      	bx	lr

08010f66 <mg_ota_rollback>:
bool mg_ota_rollback(void) {
 8010f66:	b480      	push	{r7}
 8010f68:	af00      	add	r7, sp, #0
  return true;
 8010f6a:	2301      	movs	r3, #1
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f74:	4770      	bx	lr

08010f76 <mg_ota_status>:
int mg_ota_status(int fw) {
 8010f76:	b480      	push	{r7}
 8010f78:	b083      	sub	sp, #12
 8010f7a:	af00      	add	r7, sp, #0
 8010f7c:	6078      	str	r0, [r7, #4]
  (void) fw;
  return 0;
 8010f7e:	2300      	movs	r3, #0
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	370c      	adds	r7, #12
 8010f84:	46bd      	mov	sp, r7
 8010f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8a:	4770      	bx	lr

08010f8c <mg_ota_crc32>:
uint32_t mg_ota_crc32(int fw) {
 8010f8c:	b480      	push	{r7}
 8010f8e:	b083      	sub	sp, #12
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
  (void) fw;
  return 0;
 8010f94:	2300      	movs	r3, #0
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	370c      	adds	r7, #12
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa0:	4770      	bx	lr

08010fa2 <mg_ota_timestamp>:
uint32_t mg_ota_timestamp(int fw) {
 8010fa2:	b480      	push	{r7}
 8010fa4:	b083      	sub	sp, #12
 8010fa6:	af00      	add	r7, sp, #0
 8010fa8:	6078      	str	r0, [r7, #4]
  (void) fw;
  return 0;
 8010faa:	2300      	movs	r3, #0
}
 8010fac:	4618      	mov	r0, r3
 8010fae:	370c      	adds	r7, #12
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb6:	4770      	bx	lr

08010fb8 <mg_ota_size>:
size_t mg_ota_size(int fw) {
 8010fb8:	b480      	push	{r7}
 8010fba:	b083      	sub	sp, #12
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
  (void) fw;
  return 0;
 8010fc0:	2300      	movs	r3, #0
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	370c      	adds	r7, #12
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fcc:	4770      	bx	lr

08010fce <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8010fce:	b580      	push	{r7, lr}
 8010fd0:	b084      	sub	sp, #16
 8010fd2:	af00      	add	r7, sp, #0
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	6039      	str	r1, [r7, #0]
 8010fd8:	71fb      	strb	r3, [r7, #7]
 8010fda:	4613      	mov	r3, r2
 8010fdc:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8010fe2:	79bb      	ldrb	r3, [r7, #6]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d00d      	beq.n	8011004 <mg_pfn_iobuf_private+0x36>
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	689b      	ldr	r3, [r3, #8]
 8010fec:	1c9a      	adds	r2, r3, #2
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	685b      	ldr	r3, [r3, #4]
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	d906      	bls.n	8011004 <mg_pfn_iobuf_private+0x36>
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	689b      	ldr	r3, [r3, #8]
 8010ffa:	3302      	adds	r3, #2
 8010ffc:	4619      	mov	r1, r3
 8010ffe:	68f8      	ldr	r0, [r7, #12]
 8011000:	f7fa f800 	bl	800b004 <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	689b      	ldr	r3, [r3, #8]
 8011008:	1c9a      	adds	r2, r3, #2
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	685b      	ldr	r3, [r3, #4]
 801100e:	429a      	cmp	r2, r3
 8011010:	d811      	bhi.n	8011036 <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	681a      	ldr	r2, [r3, #0]
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	689b      	ldr	r3, [r3, #8]
 801101a:	1c58      	adds	r0, r3, #1
 801101c:	68f9      	ldr	r1, [r7, #12]
 801101e:	6088      	str	r0, [r1, #8]
 8011020:	4413      	add	r3, r2
 8011022:	79fa      	ldrb	r2, [r7, #7]
 8011024:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	681a      	ldr	r2, [r3, #0]
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	689b      	ldr	r3, [r3, #8]
 801102e:	4413      	add	r3, r2
 8011030:	2200      	movs	r2, #0
 8011032:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 8011034:	e00f      	b.n	8011056 <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	689a      	ldr	r2, [r3, #8]
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	685b      	ldr	r3, [r3, #4]
 801103e:	429a      	cmp	r2, r3
 8011040:	d209      	bcs.n	8011056 <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	681a      	ldr	r2, [r3, #0]
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	689b      	ldr	r3, [r3, #8]
 801104a:	1c58      	adds	r0, r3, #1
 801104c:	68f9      	ldr	r1, [r7, #12]
 801104e:	6088      	str	r0, [r1, #8]
 8011050:	4413      	add	r3, r2
 8011052:	2200      	movs	r2, #0
 8011054:	701a      	strb	r2, [r3, #0]
}
 8011056:	bf00      	nop
 8011058:	3710      	adds	r7, #16
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}

0801105e <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 801105e:	b580      	push	{r7, lr}
 8011060:	b082      	sub	sp, #8
 8011062:	af00      	add	r7, sp, #0
 8011064:	4603      	mov	r3, r0
 8011066:	6039      	str	r1, [r7, #0]
 8011068:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 801106a:	79fb      	ldrb	r3, [r7, #7]
 801106c:	2200      	movs	r2, #0
 801106e:	6839      	ldr	r1, [r7, #0]
 8011070:	4618      	mov	r0, r3
 8011072:	f7ff ffac 	bl	8010fce <mg_pfn_iobuf_private>
}
 8011076:	bf00      	nop
 8011078:	3708      	adds	r7, #8
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}

0801107e <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 801107e:	b580      	push	{r7, lr}
 8011080:	b082      	sub	sp, #8
 8011082:	af00      	add	r7, sp, #0
 8011084:	4603      	mov	r3, r0
 8011086:	6039      	str	r1, [r7, #0]
 8011088:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 801108a:	79fb      	ldrb	r3, [r7, #7]
 801108c:	2201      	movs	r2, #1
 801108e:	6839      	ldr	r1, [r7, #0]
 8011090:	4618      	mov	r0, r3
 8011092:	f7ff ff9c 	bl	8010fce <mg_pfn_iobuf_private>
}
 8011096:	bf00      	nop
 8011098:	3708      	adds	r7, #8
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}
	...

080110a0 <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b08a      	sub	sp, #40	@ 0x28
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	60f8      	str	r0, [r7, #12]
 80110a8:	60b9      	str	r1, [r7, #8]
 80110aa:	607a      	str	r2, [r7, #4]
 80110ac:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	617b      	str	r3, [r7, #20]
 80110b2:	68bb      	ldr	r3, [r7, #8]
 80110b4:	61bb      	str	r3, [r7, #24]
 80110b6:	2300      	movs	r3, #0
 80110b8:	61fb      	str	r3, [r7, #28]
 80110ba:	2300      	movs	r3, #0
 80110bc:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 80110be:	f107 0114 	add.w	r1, r7, #20
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	687a      	ldr	r2, [r7, #4]
 80110c6:	4809      	ldr	r0, [pc, #36]	@ (80110ec <mg_vsnprintf+0x4c>)
 80110c8:	f7f6 fa6e 	bl	80075a8 <mg_vxprintf>
 80110cc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n < len) buf[n] = '\0';
 80110ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	429a      	cmp	r2, r3
 80110d4:	d204      	bcs.n	80110e0 <mg_vsnprintf+0x40>
 80110d6:	68fa      	ldr	r2, [r7, #12]
 80110d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110da:	4413      	add	r3, r2
 80110dc:	2200      	movs	r2, #0
 80110de:	701a      	strb	r2, [r3, #0]
  return n;
 80110e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3728      	adds	r7, #40	@ 0x28
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}
 80110ea:	bf00      	nop
 80110ec:	0801105f 	.word	0x0801105f

080110f0 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 80110f0:	b40c      	push	{r2, r3}
 80110f2:	b580      	push	{r7, lr}
 80110f4:	b084      	sub	sp, #16
 80110f6:	af00      	add	r7, sp, #0
 80110f8:	6078      	str	r0, [r7, #4]
 80110fa:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 80110fc:	f107 031c 	add.w	r3, r7, #28
 8011100:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8011102:	f107 0308 	add.w	r3, r7, #8
 8011106:	69ba      	ldr	r2, [r7, #24]
 8011108:	6839      	ldr	r1, [r7, #0]
 801110a:	6878      	ldr	r0, [r7, #4]
 801110c:	f7ff ffc8 	bl	80110a0 <mg_vsnprintf>
 8011110:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 8011112:	68fb      	ldr	r3, [r7, #12]
}
 8011114:	4618      	mov	r0, r3
 8011116:	3710      	adds	r7, #16
 8011118:	46bd      	mov	sp, r7
 801111a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801111e:	b002      	add	sp, #8
 8011120:	4770      	bx	lr

08011122 <mg_pfn_stdout>:
  s = mg_vmprintf(fmt, &ap);
  va_end(ap);
  return s;
}

void mg_pfn_stdout(char c, void *param) {
 8011122:	b580      	push	{r7, lr}
 8011124:	b082      	sub	sp, #8
 8011126:	af00      	add	r7, sp, #0
 8011128:	4603      	mov	r3, r0
 801112a:	6039      	str	r1, [r7, #0]
 801112c:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 801112e:	79fb      	ldrb	r3, [r7, #7]
 8011130:	4618      	mov	r0, r3
 8011132:	f01a fb37 	bl	802b7a4 <putchar>
  (void) param;
}
 8011136:	bf00      	nop
 8011138:	3708      	adds	r7, #8
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}
	...

08011140 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8011140:	b580      	push	{r7, lr}
 8011142:	b088      	sub	sp, #32
 8011144:	af04      	add	r7, sp, #16
 8011146:	60f8      	str	r0, [r7, #12]
 8011148:	60b9      	str	r1, [r7, #8]
 801114a:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	781b      	ldrb	r3, [r3, #0]
 8011150:	4618      	mov	r0, r3
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	3301      	adds	r3, #1
 8011156:	781b      	ldrb	r3, [r3, #0]
 8011158:	461a      	mov	r2, r3
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	3302      	adds	r3, #2
 801115e:	781b      	ldrb	r3, [r3, #0]
 8011160:	4619      	mov	r1, r3
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	3303      	adds	r3, #3
 8011166:	781b      	ldrb	r3, [r3, #0]
 8011168:	9302      	str	r3, [sp, #8]
 801116a:	9101      	str	r1, [sp, #4]
 801116c:	9200      	str	r2, [sp, #0]
 801116e:	4603      	mov	r3, r0
 8011170:	4a04      	ldr	r2, [pc, #16]	@ (8011184 <print_ip4+0x44>)
 8011172:	68b9      	ldr	r1, [r7, #8]
 8011174:	68f8      	ldr	r0, [r7, #12]
 8011176:	f7f6 f9fc 	bl	8007572 <mg_xprintf>
 801117a:	4603      	mov	r3, r0
}
 801117c:	4618      	mov	r0, r3
 801117e:	3710      	adds	r7, #16
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}
 8011184:	080303b4 	.word	0x080303b4

08011188 <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8011188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801118c:	b08e      	sub	sp, #56	@ 0x38
 801118e:	af08      	add	r7, sp, #32
 8011190:	6178      	str	r0, [r7, #20]
 8011192:	6139      	str	r1, [r7, #16]
 8011194:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	881b      	ldrh	r3, [r3, #0]
 801119a:	4618      	mov	r0, r3
 801119c:	f001 fc3c 	bl	8012a18 <mg_ntohs>
 80111a0:	4603      	mov	r3, r0
 80111a2:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	3302      	adds	r3, #2
 80111a8:	881b      	ldrh	r3, [r3, #0]
 80111aa:	4618      	mov	r0, r3
 80111ac:	f001 fc34 	bl	8012a18 <mg_ntohs>
 80111b0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80111b2:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	3304      	adds	r3, #4
 80111b8:	881b      	ldrh	r3, [r3, #0]
 80111ba:	4618      	mov	r0, r3
 80111bc:	f001 fc2c 	bl	8012a18 <mg_ntohs>
 80111c0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80111c2:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	3306      	adds	r3, #6
 80111c8:	881b      	ldrh	r3, [r3, #0]
 80111ca:	4618      	mov	r0, r3
 80111cc:	f001 fc24 	bl	8012a18 <mg_ntohs>
 80111d0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80111d2:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	3308      	adds	r3, #8
 80111d8:	881b      	ldrh	r3, [r3, #0]
 80111da:	4618      	mov	r0, r3
 80111dc:	f001 fc1c 	bl	8012a18 <mg_ntohs>
 80111e0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80111e2:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	330a      	adds	r3, #10
 80111e8:	881b      	ldrh	r3, [r3, #0]
 80111ea:	4618      	mov	r0, r3
 80111ec:	f001 fc14 	bl	8012a18 <mg_ntohs>
 80111f0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80111f2:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	330c      	adds	r3, #12
 80111f8:	881b      	ldrh	r3, [r3, #0]
 80111fa:	4618      	mov	r0, r3
 80111fc:	f001 fc0c 	bl	8012a18 <mg_ntohs>
 8011200:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8011202:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	330e      	adds	r3, #14
 8011208:	881b      	ldrh	r3, [r3, #0]
 801120a:	4618      	mov	r0, r3
 801120c:	f001 fc04 	bl	8012a18 <mg_ntohs>
 8011210:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8011212:	9306      	str	r3, [sp, #24]
 8011214:	683a      	ldr	r2, [r7, #0]
 8011216:	9205      	str	r2, [sp, #20]
 8011218:	687a      	ldr	r2, [r7, #4]
 801121a:	9204      	str	r2, [sp, #16]
 801121c:	68bb      	ldr	r3, [r7, #8]
 801121e:	9303      	str	r3, [sp, #12]
 8011220:	9602      	str	r6, [sp, #8]
 8011222:	9501      	str	r5, [sp, #4]
 8011224:	9400      	str	r4, [sp, #0]
 8011226:	4643      	mov	r3, r8
 8011228:	4a05      	ldr	r2, [pc, #20]	@ (8011240 <print_ip6+0xb8>)
 801122a:	6939      	ldr	r1, [r7, #16]
 801122c:	6978      	ldr	r0, [r7, #20]
 801122e:	f7f6 f9a0 	bl	8007572 <mg_xprintf>
 8011232:	4603      	mov	r3, r0
}
 8011234:	4618      	mov	r0, r3
 8011236:	3718      	adds	r7, #24
 8011238:	46bd      	mov	sp, r7
 801123a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801123e:	bf00      	nop
 8011240:	080303c0 	.word	0x080303c0

08011244 <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8011244:	b580      	push	{r7, lr}
 8011246:	b086      	sub	sp, #24
 8011248:	af00      	add	r7, sp, #0
 801124a:	60f8      	str	r0, [r7, #12]
 801124c:	60b9      	str	r1, [r7, #8]
 801124e:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	1d19      	adds	r1, r3, #4
 8011256:	687a      	ldr	r2, [r7, #4]
 8011258:	6011      	str	r1, [r2, #0]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 801125e:	697a      	ldr	r2, [r7, #20]
 8011260:	68b9      	ldr	r1, [r7, #8]
 8011262:	68f8      	ldr	r0, [r7, #12]
 8011264:	f7ff ff6c 	bl	8011140 <print_ip4>
 8011268:	4603      	mov	r3, r0
}
 801126a:	4618      	mov	r0, r3
 801126c:	3718      	adds	r7, #24
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}

08011272 <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8011272:	b580      	push	{r7, lr}
 8011274:	b086      	sub	sp, #24
 8011276:	af00      	add	r7, sp, #0
 8011278:	60f8      	str	r0, [r7, #12]
 801127a:	60b9      	str	r1, [r7, #8]
 801127c:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	1d19      	adds	r1, r3, #4
 8011284:	687a      	ldr	r2, [r7, #4]
 8011286:	6011      	str	r1, [r2, #0]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 801128c:	697b      	ldr	r3, [r7, #20]
 801128e:	7cdb      	ldrb	r3, [r3, #19]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d007      	beq.n	80112a4 <mg_print_ip+0x32>
 8011294:	697b      	ldr	r3, [r7, #20]
 8011296:	461a      	mov	r2, r3
 8011298:	68b9      	ldr	r1, [r7, #8]
 801129a:	68f8      	ldr	r0, [r7, #12]
 801129c:	f7ff ff74 	bl	8011188 <print_ip6>
 80112a0:	4603      	mov	r3, r0
 80112a2:	e006      	b.n	80112b2 <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 80112a4:	697b      	ldr	r3, [r7, #20]
 80112a6:	461a      	mov	r2, r3
 80112a8:	68b9      	ldr	r1, [r7, #8]
 80112aa:	68f8      	ldr	r0, [r7, #12]
 80112ac:	f7ff ff48 	bl	8011140 <print_ip4>
 80112b0:	4603      	mov	r3, r0
}
 80112b2:	4618      	mov	r0, r3
 80112b4:	3718      	adds	r7, #24
 80112b6:	46bd      	mov	sp, r7
 80112b8:	bd80      	pop	{r7, pc}
	...

080112bc <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 80112bc:	b580      	push	{r7, lr}
 80112be:	b088      	sub	sp, #32
 80112c0:	af02      	add	r7, sp, #8
 80112c2:	60f8      	str	r0, [r7, #12]
 80112c4:	60b9      	str	r1, [r7, #8]
 80112c6:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	1d19      	adds	r1, r3, #4
 80112ce:	687a      	ldr	r2, [r7, #4]
 80112d0:	6011      	str	r1, [r2, #0]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	8a1b      	ldrh	r3, [r3, #16]
 80112da:	4618      	mov	r0, r3
 80112dc:	f001 fb9c 	bl	8012a18 <mg_ntohs>
 80112e0:	4603      	mov	r3, r0
 80112e2:	9301      	str	r3, [sp, #4]
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	9300      	str	r3, [sp, #0]
 80112e8:	4b05      	ldr	r3, [pc, #20]	@ (8011300 <mg_print_ip_port+0x44>)
 80112ea:	4a06      	ldr	r2, [pc, #24]	@ (8011304 <mg_print_ip_port+0x48>)
 80112ec:	68b9      	ldr	r1, [r7, #8]
 80112ee:	68f8      	ldr	r0, [r7, #12]
 80112f0:	f7f6 f93f 	bl	8007572 <mg_xprintf>
 80112f4:	4603      	mov	r3, r0
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3718      	adds	r7, #24
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd80      	pop	{r7, pc}
 80112fe:	bf00      	nop
 8011300:	08011273 	.word	0x08011273
 8011304:	080303dc 	.word	0x080303dc

08011308 <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8011308:	b5b0      	push	{r4, r5, r7, lr}
 801130a:	b08c      	sub	sp, #48	@ 0x30
 801130c:	af06      	add	r7, sp, #24
 801130e:	60f8      	str	r0, [r7, #12]
 8011310:	60b9      	str	r1, [r7, #8]
 8011312:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	1d19      	adds	r1, r3, #4
 801131a:	687a      	ldr	r2, [r7, #4]
 801131c:	6011      	str	r1, [r2, #0]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8011322:	697b      	ldr	r3, [r7, #20]
 8011324:	781b      	ldrb	r3, [r3, #0]
 8011326:	461d      	mov	r5, r3
 8011328:	697b      	ldr	r3, [r7, #20]
 801132a:	3301      	adds	r3, #1
 801132c:	781b      	ldrb	r3, [r3, #0]
 801132e:	461a      	mov	r2, r3
 8011330:	697b      	ldr	r3, [r7, #20]
 8011332:	3302      	adds	r3, #2
 8011334:	781b      	ldrb	r3, [r3, #0]
 8011336:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 8011338:	697b      	ldr	r3, [r7, #20]
 801133a:	3303      	adds	r3, #3
 801133c:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 801133e:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 8011340:	697b      	ldr	r3, [r7, #20]
 8011342:	3304      	adds	r3, #4
 8011344:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8011346:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 8011348:	697b      	ldr	r3, [r7, #20]
 801134a:	3305      	adds	r3, #5
 801134c:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 801134e:	9304      	str	r3, [sp, #16]
 8011350:	9403      	str	r4, [sp, #12]
 8011352:	9002      	str	r0, [sp, #8]
 8011354:	9101      	str	r1, [sp, #4]
 8011356:	9200      	str	r2, [sp, #0]
 8011358:	462b      	mov	r3, r5
 801135a:	4a05      	ldr	r2, [pc, #20]	@ (8011370 <mg_print_mac+0x68>)
 801135c:	68b9      	ldr	r1, [r7, #8]
 801135e:	68f8      	ldr	r0, [r7, #12]
 8011360:	f7f6 f907 	bl	8007572 <mg_xprintf>
 8011364:	4603      	mov	r3, r0
}
 8011366:	4618      	mov	r0, r3
 8011368:	3718      	adds	r7, #24
 801136a:	46bd      	mov	sp, r7
 801136c:	bdb0      	pop	{r4, r5, r7, pc}
 801136e:	bf00      	nop
 8011370:	080303e4 	.word	0x080303e4

08011374 <mg_esc>:

static char mg_esc(int c, bool esc) {
 8011374:	b480      	push	{r7}
 8011376:	b087      	sub	sp, #28
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
 801137c:	460b      	mov	r3, r1
 801137e:	70fb      	strb	r3, [r7, #3]
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
 8011380:	4b19      	ldr	r3, [pc, #100]	@ (80113e8 <mg_esc+0x74>)
 8011382:	613b      	str	r3, [r7, #16]
 8011384:	4b19      	ldr	r3, [pc, #100]	@ (80113ec <mg_esc+0x78>)
 8011386:	60fb      	str	r3, [r7, #12]
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8011388:	78fb      	ldrb	r3, [r7, #3]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d001      	beq.n	8011392 <mg_esc+0x1e>
 801138e:	693b      	ldr	r3, [r7, #16]
 8011390:	e000      	b.n	8011394 <mg_esc+0x20>
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	617b      	str	r3, [r7, #20]
 8011396:	e01b      	b.n	80113d0 <mg_esc+0x5c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	781b      	ldrb	r3, [r3, #0]
 801139c:	461a      	mov	r2, r3
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	4293      	cmp	r3, r2
 80113a2:	d112      	bne.n	80113ca <mg_esc+0x56>
 80113a4:	78fb      	ldrb	r3, [r7, #3]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d007      	beq.n	80113ba <mg_esc+0x46>
 80113aa:	697a      	ldr	r2, [r7, #20]
 80113ac:	693b      	ldr	r3, [r7, #16]
 80113ae:	1ad3      	subs	r3, r2, r3
 80113b0:	461a      	mov	r2, r3
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	4413      	add	r3, r2
 80113b6:	781b      	ldrb	r3, [r3, #0]
 80113b8:	e00f      	b.n	80113da <mg_esc+0x66>
 80113ba:	697a      	ldr	r2, [r7, #20]
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	1ad3      	subs	r3, r2, r3
 80113c0:	461a      	mov	r2, r3
 80113c2:	693b      	ldr	r3, [r7, #16]
 80113c4:	4413      	add	r3, r2
 80113c6:	781b      	ldrb	r3, [r3, #0]
 80113c8:	e007      	b.n	80113da <mg_esc+0x66>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	3301      	adds	r3, #1
 80113ce:	617b      	str	r3, [r7, #20]
 80113d0:	697b      	ldr	r3, [r7, #20]
 80113d2:	781b      	ldrb	r3, [r3, #0]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d1df      	bne.n	8011398 <mg_esc+0x24>
  }
  return 0;
 80113d8:	2300      	movs	r3, #0
}
 80113da:	4618      	mov	r0, r3
 80113dc:	371c      	adds	r7, #28
 80113de:	46bd      	mov	sp, r7
 80113e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e4:	4770      	bx	lr
 80113e6:	bf00      	nop
 80113e8:	0802fcb0 	.word	0x0802fcb0
 80113ec:	0802fcb8 	.word	0x0802fcb8

080113f0 <mg_escape>:

static char mg_escape(int c) {
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b082      	sub	sp, #8
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
  return mg_esc(c, true);
 80113f8:	2101      	movs	r1, #1
 80113fa:	6878      	ldr	r0, [r7, #4]
 80113fc:	f7ff ffba 	bl	8011374 <mg_esc>
 8011400:	4603      	mov	r3, r0
}
 8011402:	4618      	mov	r0, r3
 8011404:	3708      	adds	r7, #8
 8011406:	46bd      	mov	sp, r7
 8011408:	bd80      	pop	{r7, pc}

0801140a <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 801140a:	b580      	push	{r7, lr}
 801140c:	b088      	sub	sp, #32
 801140e:	af00      	add	r7, sp, #0
 8011410:	60f8      	str	r0, [r7, #12]
 8011412:	60b9      	str	r1, [r7, #8]
 8011414:	607a      	str	r2, [r7, #4]
 8011416:	603b      	str	r3, [r7, #0]
  size_t i = 0, extra = 0;
 8011418:	2300      	movs	r3, #0
 801141a:	61fb      	str	r3, [r7, #28]
 801141c:	2300      	movs	r3, #0
 801141e:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8011420:	2300      	movs	r3, #0
 8011422:	61fb      	str	r3, [r7, #28]
 8011424:	e023      	b.n	801146e <qcpy+0x64>
    char c = mg_escape(buf[i]);
 8011426:	687a      	ldr	r2, [r7, #4]
 8011428:	69fb      	ldr	r3, [r7, #28]
 801142a:	4413      	add	r3, r2
 801142c:	781b      	ldrb	r3, [r3, #0]
 801142e:	4618      	mov	r0, r3
 8011430:	f7ff ffde 	bl	80113f0 <mg_escape>
 8011434:	4603      	mov	r3, r0
 8011436:	75fb      	strb	r3, [r7, #23]
    if (c) {
 8011438:	7dfb      	ldrb	r3, [r7, #23]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d00c      	beq.n	8011458 <qcpy+0x4e>
      out('\\', ptr), out(c, ptr), extra++;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	68b9      	ldr	r1, [r7, #8]
 8011442:	205c      	movs	r0, #92	@ 0x5c
 8011444:	4798      	blx	r3
 8011446:	7dfa      	ldrb	r2, [r7, #23]
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	68b9      	ldr	r1, [r7, #8]
 801144c:	4610      	mov	r0, r2
 801144e:	4798      	blx	r3
 8011450:	69bb      	ldr	r3, [r7, #24]
 8011452:	3301      	adds	r3, #1
 8011454:	61bb      	str	r3, [r7, #24]
 8011456:	e007      	b.n	8011468 <qcpy+0x5e>
    } else {
      out(buf[i], ptr);
 8011458:	687a      	ldr	r2, [r7, #4]
 801145a:	69fb      	ldr	r3, [r7, #28]
 801145c:	4413      	add	r3, r2
 801145e:	781a      	ldrb	r2, [r3, #0]
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	68b9      	ldr	r1, [r7, #8]
 8011464:	4610      	mov	r0, r2
 8011466:	4798      	blx	r3
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8011468:	69fb      	ldr	r3, [r7, #28]
 801146a:	3301      	adds	r3, #1
 801146c:	61fb      	str	r3, [r7, #28]
 801146e:	69fa      	ldr	r2, [r7, #28]
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	429a      	cmp	r2, r3
 8011474:	d205      	bcs.n	8011482 <qcpy+0x78>
 8011476:	687a      	ldr	r2, [r7, #4]
 8011478:	69fb      	ldr	r3, [r7, #28]
 801147a:	4413      	add	r3, r2
 801147c:	781b      	ldrb	r3, [r3, #0]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d1d1      	bne.n	8011426 <qcpy+0x1c>
    }
  }
  return i + extra;
 8011482:	69fa      	ldr	r2, [r7, #28]
 8011484:	69bb      	ldr	r3, [r7, #24]
 8011486:	4413      	add	r3, r2
}
 8011488:	4618      	mov	r0, r3
 801148a:	3720      	adds	r7, #32
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}

08011490 <mg_print_esc>:
  size_t len = (size_t) va_arg(*ap, int);
  uint8_t *buf = va_arg(*ap, uint8_t *);
  return bcpy(out, arg, buf, len);
}

size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 8011490:	b580      	push	{r7, lr}
 8011492:	b086      	sub	sp, #24
 8011494:	af00      	add	r7, sp, #0
 8011496:	60f8      	str	r0, [r7, #12]
 8011498:	60b9      	str	r1, [r7, #8]
 801149a:	607a      	str	r2, [r7, #4]
  size_t len = (size_t) va_arg(*ap, int);
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	1d19      	adds	r1, r3, #4
 80114a2:	687a      	ldr	r2, [r7, #4]
 80114a4:	6011      	str	r1, [r2, #0]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	617b      	str	r3, [r7, #20]
  char *p = va_arg(*ap, char *);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	1d19      	adds	r1, r3, #4
 80114b0:	687a      	ldr	r2, [r7, #4]
 80114b2:	6011      	str	r1, [r2, #0]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	613b      	str	r3, [r7, #16]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 80114b8:	697b      	ldr	r3, [r7, #20]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d109      	bne.n	80114d2 <mg_print_esc+0x42>
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d004      	beq.n	80114ce <mg_print_esc+0x3e>
 80114c4:	6938      	ldr	r0, [r7, #16]
 80114c6:	f7ee ff1b 	bl	8000300 <strlen>
 80114ca:	4603      	mov	r3, r0
 80114cc:	e000      	b.n	80114d0 <mg_print_esc+0x40>
 80114ce:	2300      	movs	r3, #0
 80114d0:	617b      	str	r3, [r7, #20]
  return qcpy(out, arg, p, len);
 80114d2:	697b      	ldr	r3, [r7, #20]
 80114d4:	693a      	ldr	r2, [r7, #16]
 80114d6:	68b9      	ldr	r1, [r7, #8]
 80114d8:	68f8      	ldr	r0, [r7, #12]
 80114da:	f7ff ff96 	bl	801140a <qcpy>
 80114de:	4603      	mov	r3, r0
}
 80114e0:	4618      	mov	r0, r3
 80114e2:	3718      	adds	r7, #24
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd80      	pop	{r7, pc}

080114e8 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b084      	sub	sp, #16
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 80114f0:	2300      	movs	r3, #0
 80114f2:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 80114f4:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	681a      	ldr	r2, [r3, #0]
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	689b      	ldr	r3, [r3, #8]
 8011500:	4413      	add	r3, r2
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	689a      	ldr	r2, [r3, #8]
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	4413      	add	r3, r2
 801150e:	1d1a      	adds	r2, r3, #4
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	685b      	ldr	r3, [r3, #4]
 8011514:	429a      	cmp	r2, r3
 8011516:	d906      	bls.n	8011526 <mg_queue_read_len+0x3e>
 8011518:	4b05      	ldr	r3, [pc, #20]	@ (8011530 <mg_queue_read_len+0x48>)
 801151a:	4a06      	ldr	r2, [pc, #24]	@ (8011534 <mg_queue_read_len+0x4c>)
 801151c:	f641 116a 	movw	r1, #6506	@ 0x196a
 8011520:	4805      	ldr	r0, [pc, #20]	@ (8011538 <mg_queue_read_len+0x50>)
 8011522:	f019 f879 	bl	802a618 <__assert_func>
  return n;
 8011526:	68fb      	ldr	r3, [r7, #12]
}
 8011528:	4618      	mov	r0, r3
 801152a:	3710      	adds	r7, #16
 801152c:	46bd      	mov	sp, r7
 801152e:	bd80      	pop	{r7, pc}
 8011530:	08030448 	.word	0x08030448
 8011534:	080327e0 	.word	0x080327e0
 8011538:	0802efcc 	.word	0x0802efcc

0801153c <mg_queue_write_len>:

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 801153c:	b480      	push	{r7}
 801153e:	b085      	sub	sp, #20
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
 8011544:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	681a      	ldr	r2, [r3, #0]
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	68db      	ldr	r3, [r3, #12]
 8011552:	4413      	add	r3, r2
 8011554:	68fa      	ldr	r2, [r7, #12]
 8011556:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 8011558:	f3bf 8f5b 	dmb	ish
}
 801155c:	bf00      	nop
 801155e:	3714      	adds	r7, #20
 8011560:	46bd      	mov	sp, r7
 8011562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011566:	4770      	bx	lr

08011568 <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 8011568:	b580      	push	{r7, lr}
 801156a:	b086      	sub	sp, #24
 801156c:	af00      	add	r7, sp, #0
 801156e:	60f8      	str	r0, [r7, #12]
 8011570:	60b9      	str	r1, [r7, #8]
 8011572:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 8011574:	2300      	movs	r3, #0
 8011576:	617b      	str	r3, [r7, #20]
 8011578:	2308      	movs	r3, #8
 801157a:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	68da      	ldr	r2, [r3, #12]
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	689b      	ldr	r3, [r3, #8]
 8011584:	429a      	cmp	r2, r3
 8011586:	d312      	bcc.n	80115ae <mg_queue_book+0x46>
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	68da      	ldr	r2, [r3, #12]
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	441a      	add	r2, r3
 8011590:	693b      	ldr	r3, [r7, #16]
 8011592:	441a      	add	r2, r3
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	685b      	ldr	r3, [r3, #4]
 8011598:	429a      	cmp	r2, r3
 801159a:	d808      	bhi.n	80115ae <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	685a      	ldr	r2, [r3, #4]
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	68db      	ldr	r3, [r3, #12]
 80115a4:	1ad2      	subs	r2, r2, r3
 80115a6:	693b      	ldr	r3, [r7, #16]
 80115a8:	1ad3      	subs	r3, r2, r3
 80115aa:	617b      	str	r3, [r7, #20]
 80115ac:	e011      	b.n	80115d2 <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	68da      	ldr	r2, [r3, #12]
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	689b      	ldr	r3, [r3, #8]
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d30b      	bcc.n	80115d2 <mg_queue_book+0x6a>
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	689b      	ldr	r3, [r3, #8]
 80115be:	693a      	ldr	r2, [r7, #16]
 80115c0:	429a      	cmp	r2, r3
 80115c2:	d206      	bcs.n	80115d2 <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 80115c4:	2100      	movs	r1, #0
 80115c6:	68f8      	ldr	r0, [r7, #12]
 80115c8:	f7ff ffb8 	bl	801153c <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	2200      	movs	r2, #0
 80115d0:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	68da      	ldr	r2, [r3, #12]
 80115d6:	693b      	ldr	r3, [r7, #16]
 80115d8:	441a      	add	r2, r3
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	441a      	add	r2, r3
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	689b      	ldr	r3, [r3, #8]
 80115e2:	429a      	cmp	r2, r3
 80115e4:	d207      	bcs.n	80115f6 <mg_queue_book+0x8e>
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	689a      	ldr	r2, [r3, #8]
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	68db      	ldr	r3, [r3, #12]
 80115ee:	1ad2      	subs	r2, r2, r3
 80115f0:	693b      	ldr	r3, [r7, #16]
 80115f2:	1ad3      	subs	r3, r2, r3
 80115f4:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 80115f6:	68bb      	ldr	r3, [r7, #8]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d007      	beq.n	801160c <mg_queue_book+0xa4>
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	681a      	ldr	r2, [r3, #0]
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	68db      	ldr	r3, [r3, #12]
 8011604:	3304      	adds	r3, #4
 8011606:	441a      	add	r2, r3
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	601a      	str	r2, [r3, #0]
  return space;
 801160c:	697b      	ldr	r3, [r7, #20]
}
 801160e:	4618      	mov	r0, r3
 8011610:	3718      	adds	r7, #24
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}
	...

08011618 <mg_queue_next>:

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 8011618:	b580      	push	{r7, lr}
 801161a:	b084      	sub	sp, #16
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8011622:	2300      	movs	r3, #0
 8011624:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	689a      	ldr	r2, [r3, #8]
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	68db      	ldr	r3, [r3, #12]
 801162e:	429a      	cmp	r2, r3
 8011630:	d013      	beq.n	801165a <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	f7ff ff58 	bl	80114e8 <mg_queue_read_len>
 8011638:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d10c      	bne.n	801165a <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	2200      	movs	r2, #0
 8011644:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	68da      	ldr	r2, [r3, #12]
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	689b      	ldr	r3, [r3, #8]
 801164e:	429a      	cmp	r2, r3
 8011650:	d903      	bls.n	801165a <mg_queue_next+0x42>
 8011652:	6878      	ldr	r0, [r7, #4]
 8011654:	f7ff ff48 	bl	80114e8 <mg_queue_read_len>
 8011658:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 801165a:	683b      	ldr	r3, [r7, #0]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d007      	beq.n	8011670 <mg_queue_next+0x58>
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	681a      	ldr	r2, [r3, #0]
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	689b      	ldr	r3, [r3, #8]
 8011668:	3304      	adds	r3, #4
 801166a:	441a      	add	r2, r3
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	689a      	ldr	r2, [r3, #8]
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	441a      	add	r2, r3
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	685b      	ldr	r3, [r3, #4]
 801167c:	429a      	cmp	r2, r3
 801167e:	d906      	bls.n	801168e <mg_queue_next+0x76>
 8011680:	4b05      	ldr	r3, [pc, #20]	@ (8011698 <mg_queue_next+0x80>)
 8011682:	4a06      	ldr	r2, [pc, #24]	@ (801169c <mg_queue_next+0x84>)
 8011684:	f641 118b 	movw	r1, #6539	@ 0x198b
 8011688:	4805      	ldr	r0, [pc, #20]	@ (80116a0 <mg_queue_next+0x88>)
 801168a:	f018 ffc5 	bl	802a618 <__assert_func>
  return len;
 801168e:	68fb      	ldr	r3, [r7, #12]
}
 8011690:	4618      	mov	r0, r3
 8011692:	3710      	adds	r7, #16
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}
 8011698:	0803046c 	.word	0x0803046c
 801169c:	080327f4 	.word	0x080327f4
 80116a0:	0802efcc 	.word	0x0802efcc

080116a4 <mg_queue_add>:

void mg_queue_add(struct mg_queue *q, size_t len) {
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b082      	sub	sp, #8
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
 80116ac:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d106      	bne.n	80116c2 <mg_queue_add+0x1e>
 80116b4:	4b13      	ldr	r3, [pc, #76]	@ (8011704 <mg_queue_add+0x60>)
 80116b6:	4a14      	ldr	r2, [pc, #80]	@ (8011708 <mg_queue_add+0x64>)
 80116b8:	f641 1190 	movw	r1, #6544	@ 0x1990
 80116bc:	4813      	ldr	r0, [pc, #76]	@ (801170c <mg_queue_add+0x68>)
 80116be:	f018 ffab 	bl	802a618 <__assert_func>
  mg_queue_write_len(q, len);
 80116c2:	6839      	ldr	r1, [r7, #0]
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	f7ff ff39 	bl	801153c <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	68da      	ldr	r2, [r3, #12]
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	4413      	add	r3, r2
 80116d2:	f103 0208 	add.w	r2, r3, #8
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	685b      	ldr	r3, [r3, #4]
 80116da:	429a      	cmp	r2, r3
 80116dc:	d906      	bls.n	80116ec <mg_queue_add+0x48>
 80116de:	4b0c      	ldr	r3, [pc, #48]	@ (8011710 <mg_queue_add+0x6c>)
 80116e0:	4a09      	ldr	r2, [pc, #36]	@ (8011708 <mg_queue_add+0x64>)
 80116e2:	f641 1192 	movw	r1, #6546	@ 0x1992
 80116e6:	4809      	ldr	r0, [pc, #36]	@ (801170c <mg_queue_add+0x68>)
 80116e8:	f018 ff96 	bl	802a618 <__assert_func>
  q->head += len + sizeof(uint32_t);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	68da      	ldr	r2, [r3, #12]
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	4413      	add	r3, r2
 80116f4:	1d1a      	adds	r2, r3, #4
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	60da      	str	r2, [r3, #12]
}
 80116fa:	bf00      	nop
 80116fc:	3708      	adds	r7, #8
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}
 8011702:	bf00      	nop
 8011704:	08030488 	.word	0x08030488
 8011708:	08032804 	.word	0x08032804
 801170c:	0802efcc 	.word	0x0802efcc
 8011710:	08030490 	.word	0x08030490

08011714 <mg_queue_del>:

void mg_queue_del(struct mg_queue *q, size_t len) {
 8011714:	b580      	push	{r7, lr}
 8011716:	b082      	sub	sp, #8
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
 801171c:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	689a      	ldr	r2, [r3, #8]
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	4413      	add	r3, r2
 8011726:	1d1a      	adds	r2, r3, #4
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	689b      	ldr	r3, [r3, #8]
 8011730:	1d1a      	adds	r2, r3, #4
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	685b      	ldr	r3, [r3, #4]
 8011736:	429a      	cmp	r2, r3
 8011738:	d906      	bls.n	8011748 <mg_queue_del+0x34>
 801173a:	4b05      	ldr	r3, [pc, #20]	@ (8011750 <mg_queue_del+0x3c>)
 801173c:	4a05      	ldr	r2, [pc, #20]	@ (8011754 <mg_queue_del+0x40>)
 801173e:	f641 1198 	movw	r1, #6552	@ 0x1998
 8011742:	4805      	ldr	r0, [pc, #20]	@ (8011758 <mg_queue_del+0x44>)
 8011744:	f018 ff68 	bl	802a618 <__assert_func>
}
 8011748:	bf00      	nop
 801174a:	3708      	adds	r7, #8
 801174c:	46bd      	mov	sp, r7
 801174e:	bd80      	pop	{r7, pc}
 8011750:	080304c0 	.word	0x080304c0
 8011754:	08032814 	.word	0x08032814
 8011758:	0802efcc 	.word	0x0802efcc
 801175c:	00000000 	.word	0x00000000

08011760 <gettimestamp>:


#define SNTP_TIME_OFFSET 2208988800U  // (1970 - 1900) in seconds
#define SNTP_MAX_FRAC 4294967295.0    // 2 ** 32 - 1

static int64_t gettimestamp(const uint32_t *data) {
 8011760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011764:	b086      	sub	sp, #24
 8011766:	af00      	add	r7, sp, #0
 8011768:	60f8      	str	r0, [r7, #12]
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	4618      	mov	r0, r3
 8011770:	f001 f939 	bl	80129e6 <mg_ntohl>
 8011774:	6178      	str	r0, [r7, #20]
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	3304      	adds	r3, #4
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	4618      	mov	r0, r3
 801177e:	f001 f932 	bl	80129e6 <mg_ntohl>
 8011782:	6138      	str	r0, [r7, #16]
  if (sec) sec -= SNTP_TIME_OFFSET;
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d003      	beq.n	8011792 <gettimestamp+0x32>
 801178a:	697a      	ldr	r2, [r7, #20]
 801178c:	4b2e      	ldr	r3, [pc, #184]	@ (8011848 <gettimestamp+0xe8>)
 801178e:	4413      	add	r3, r2
 8011790:	617b      	str	r3, [r7, #20]
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	2200      	movs	r2, #0
 8011796:	4698      	mov	r8, r3
 8011798:	4691      	mov	r9, r2
 801179a:	4642      	mov	r2, r8
 801179c:	464b      	mov	r3, r9
 801179e:	f04f 0000 	mov.w	r0, #0
 80117a2:	f04f 0100 	mov.w	r1, #0
 80117a6:	0159      	lsls	r1, r3, #5
 80117a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80117ac:	0150      	lsls	r0, r2, #5
 80117ae:	4602      	mov	r2, r0
 80117b0:	460b      	mov	r3, r1
 80117b2:	ebb2 0408 	subs.w	r4, r2, r8
 80117b6:	eb63 0509 	sbc.w	r5, r3, r9
 80117ba:	f04f 0200 	mov.w	r2, #0
 80117be:	f04f 0300 	mov.w	r3, #0
 80117c2:	00ab      	lsls	r3, r5, #2
 80117c4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80117c8:	00a2      	lsls	r2, r4, #2
 80117ca:	4614      	mov	r4, r2
 80117cc:	461d      	mov	r5, r3
 80117ce:	eb14 0a08 	adds.w	sl, r4, r8
 80117d2:	eb45 0b09 	adc.w	fp, r5, r9
 80117d6:	f04f 0200 	mov.w	r2, #0
 80117da:	f04f 0300 	mov.w	r3, #0
 80117de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80117e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80117e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80117ea:	4692      	mov	sl, r2
 80117ec:	469b      	mov	fp, r3
 80117ee:	4654      	mov	r4, sl
 80117f0:	465d      	mov	r5, fp
 80117f2:	693b      	ldr	r3, [r7, #16]
 80117f4:	ee07 3a90 	vmov	s15, r3
 80117f8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80117fc:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 8011838 <gettimestamp+0xd8>
 8011800:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011804:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8011840 <gettimestamp+0xe0>
 8011808:	ee27 7b06 	vmul.f64	d7, d7, d6
 801180c:	ec51 0b17 	vmov	r0, r1, d7
 8011810:	f7ee ffa2 	bl	8000758 <__aeabi_d2lz>
 8011814:	4602      	mov	r2, r0
 8011816:	460b      	mov	r3, r1
 8011818:	18a1      	adds	r1, r4, r2
 801181a:	6039      	str	r1, [r7, #0]
 801181c:	eb45 0303 	adc.w	r3, r5, r3
 8011820:	607b      	str	r3, [r7, #4]
 8011822:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8011826:	4610      	mov	r0, r2
 8011828:	4619      	mov	r1, r3
 801182a:	3718      	adds	r7, #24
 801182c:	46bd      	mov	sp, r7
 801182e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011832:	bf00      	nop
 8011834:	f3af 8000 	nop.w
 8011838:	ffe00000 	.word	0xffe00000
 801183c:	41efffff 	.word	0x41efffff
 8011840:	00000000 	.word	0x00000000
 8011844:	408f4000 	.word	0x408f4000
 8011848:	7c558180 	.word	0x7c558180

0801184c <mg_sntp_parse>:

int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 801184c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011850:	b09c      	sub	sp, #112	@ 0x70
 8011852:	af08      	add	r7, sp, #32
 8011854:	6178      	str	r0, [r7, #20]
 8011856:	6139      	str	r1, [r7, #16]
  int64_t res = -1;
 8011858:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801185c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011860:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  int mode = len > 0 ? buf[0] & 7 : 0;
 8011864:	693b      	ldr	r3, [r7, #16]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d004      	beq.n	8011874 <mg_sntp_parse+0x28>
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	781b      	ldrb	r3, [r3, #0]
 801186e:	f003 0307 	and.w	r3, r3, #7
 8011872:	e000      	b.n	8011876 <mg_sntp_parse+0x2a>
 8011874:	2300      	movs	r3, #0
 8011876:	647b      	str	r3, [r7, #68]	@ 0x44
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 8011878:	693b      	ldr	r3, [r7, #16]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d006      	beq.n	801188c <mg_sntp_parse+0x40>
 801187e:	697b      	ldr	r3, [r7, #20]
 8011880:	781b      	ldrb	r3, [r3, #0]
 8011882:	08db      	lsrs	r3, r3, #3
 8011884:	b2db      	uxtb	r3, r3
 8011886:	f003 0307 	and.w	r3, r3, #7
 801188a:	e000      	b.n	801188e <mg_sntp_parse+0x42>
 801188c:	2300      	movs	r3, #0
 801188e:	643b      	str	r3, [r7, #64]	@ 0x40
  if (len < 48) {
 8011890:	693b      	ldr	r3, [r7, #16]
 8011892:	2b2f      	cmp	r3, #47	@ 0x2f
 8011894:	d810      	bhi.n	80118b8 <mg_sntp_parse+0x6c>
    MG_ERROR(("%s", "corrupt packet"));
 8011896:	4b65      	ldr	r3, [pc, #404]	@ (8011a2c <mg_sntp_parse+0x1e0>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	2b00      	cmp	r3, #0
 801189c:	f340 80be 	ble.w	8011a1c <mg_sntp_parse+0x1d0>
 80118a0:	4b63      	ldr	r3, [pc, #396]	@ (8011a30 <mg_sntp_parse+0x1e4>)
 80118a2:	f641 329a 	movw	r2, #7066	@ 0x1b9a
 80118a6:	4963      	ldr	r1, [pc, #396]	@ (8011a34 <mg_sntp_parse+0x1e8>)
 80118a8:	2001      	movs	r0, #1
 80118aa:	f7fa fba3 	bl	800bff4 <mg_log_prefix>
 80118ae:	4962      	ldr	r1, [pc, #392]	@ (8011a38 <mg_sntp_parse+0x1ec>)
 80118b0:	4862      	ldr	r0, [pc, #392]	@ (8011a3c <mg_sntp_parse+0x1f0>)
 80118b2:	f7fa fbef 	bl	800c094 <mg_log>
 80118b6:	e0b1      	b.n	8011a1c <mg_sntp_parse+0x1d0>
  } else if (mode != 4 && mode != 5) {
 80118b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118ba:	2b04      	cmp	r3, #4
 80118bc:	d013      	beq.n	80118e6 <mg_sntp_parse+0x9a>
 80118be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118c0:	2b05      	cmp	r3, #5
 80118c2:	d010      	beq.n	80118e6 <mg_sntp_parse+0x9a>
    MG_ERROR(("%s", "not a server reply"));
 80118c4:	4b59      	ldr	r3, [pc, #356]	@ (8011a2c <mg_sntp_parse+0x1e0>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	f340 80a7 	ble.w	8011a1c <mg_sntp_parse+0x1d0>
 80118ce:	4b58      	ldr	r3, [pc, #352]	@ (8011a30 <mg_sntp_parse+0x1e4>)
 80118d0:	f641 329c 	movw	r2, #7068	@ 0x1b9c
 80118d4:	4957      	ldr	r1, [pc, #348]	@ (8011a34 <mg_sntp_parse+0x1e8>)
 80118d6:	2001      	movs	r0, #1
 80118d8:	f7fa fb8c 	bl	800bff4 <mg_log_prefix>
 80118dc:	4958      	ldr	r1, [pc, #352]	@ (8011a40 <mg_sntp_parse+0x1f4>)
 80118de:	4857      	ldr	r0, [pc, #348]	@ (8011a3c <mg_sntp_parse+0x1f0>)
 80118e0:	f7fa fbd8 	bl	800c094 <mg_log>
 80118e4:	e09a      	b.n	8011a1c <mg_sntp_parse+0x1d0>
  } else if (buf[1] == 0) {
 80118e6:	697b      	ldr	r3, [r7, #20]
 80118e8:	3301      	adds	r3, #1
 80118ea:	781b      	ldrb	r3, [r3, #0]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d110      	bne.n	8011912 <mg_sntp_parse+0xc6>
    MG_ERROR(("%s", "server sent a kiss of death"));
 80118f0:	4b4e      	ldr	r3, [pc, #312]	@ (8011a2c <mg_sntp_parse+0x1e0>)
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	f340 8091 	ble.w	8011a1c <mg_sntp_parse+0x1d0>
 80118fa:	4b4d      	ldr	r3, [pc, #308]	@ (8011a30 <mg_sntp_parse+0x1e4>)
 80118fc:	f641 329e 	movw	r2, #7070	@ 0x1b9e
 8011900:	494c      	ldr	r1, [pc, #304]	@ (8011a34 <mg_sntp_parse+0x1e8>)
 8011902:	2001      	movs	r0, #1
 8011904:	f7fa fb76 	bl	800bff4 <mg_log_prefix>
 8011908:	494e      	ldr	r1, [pc, #312]	@ (8011a44 <mg_sntp_parse+0x1f8>)
 801190a:	484c      	ldr	r0, [pc, #304]	@ (8011a3c <mg_sntp_parse+0x1f0>)
 801190c:	f7fa fbc2 	bl	800c094 <mg_log>
 8011910:	e084      	b.n	8011a1c <mg_sntp_parse+0x1d0>
  } else if (version == 4 || version == 3) {
 8011912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011914:	2b04      	cmp	r3, #4
 8011916:	d002      	beq.n	801191e <mg_sntp_parse+0xd2>
 8011918:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801191a:	2b03      	cmp	r3, #3
 801191c:	d16f      	bne.n	80119fe <mg_sntp_parse+0x1b2>
    // int64_t ref = gettimestamp((uint32_t *) &buf[16]);
    int64_t t0 = gettimestamp((uint32_t *) &buf[24]);
 801191e:	697b      	ldr	r3, [r7, #20]
 8011920:	3318      	adds	r3, #24
 8011922:	4618      	mov	r0, r3
 8011924:	f7ff ff1c 	bl	8011760 <gettimestamp>
 8011928:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
    int64_t t1 = gettimestamp((uint32_t *) &buf[32]);
 801192c:	697b      	ldr	r3, [r7, #20]
 801192e:	3320      	adds	r3, #32
 8011930:	4618      	mov	r0, r3
 8011932:	f7ff ff15 	bl	8011760 <gettimestamp>
 8011936:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
    int64_t t2 = gettimestamp((uint32_t *) &buf[40]);
 801193a:	697b      	ldr	r3, [r7, #20]
 801193c:	3328      	adds	r3, #40	@ 0x28
 801193e:	4618      	mov	r0, r3
 8011940:	f7ff ff0e 	bl	8011760 <gettimestamp>
 8011944:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
    int64_t t3 = (int64_t) mg_millis();
 8011948:	f7f1 ff46 	bl	80037d8 <mg_millis>
 801194c:	4602      	mov	r2, r0
 801194e:	460b      	mov	r3, r1
 8011950:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int64_t delta = (t3 - t0) - (t2 - t1);
 8011954:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011958:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801195c:	ebb0 0802 	subs.w	r8, r0, r2
 8011960:	eb61 0903 	sbc.w	r9, r1, r3
 8011964:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8011968:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801196c:	1a84      	subs	r4, r0, r2
 801196e:	eb61 0503 	sbc.w	r5, r1, r3
 8011972:	ebb8 0304 	subs.w	r3, r8, r4
 8011976:	60bb      	str	r3, [r7, #8]
 8011978:	eb69 0305 	sbc.w	r3, r9, r5
 801197c:	60fb      	str	r3, [r7, #12]
 801197e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8011982:	e9c7 3406 	strd	r3, r4, [r7, #24]
    MG_VERBOSE(("%lld %lld %lld %lld delta:%lld", t0, t1, t2, t3, delta));
 8011986:	4b29      	ldr	r3, [pc, #164]	@ (8011a2c <mg_sntp_parse+0x1e0>)
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	2b03      	cmp	r3, #3
 801198c:	dd1b      	ble.n	80119c6 <mg_sntp_parse+0x17a>
 801198e:	4b28      	ldr	r3, [pc, #160]	@ (8011a30 <mg_sntp_parse+0x1e4>)
 8011990:	f641 32a6 	movw	r2, #7078	@ 0x1ba6
 8011994:	4927      	ldr	r1, [pc, #156]	@ (8011a34 <mg_sntp_parse+0x1e8>)
 8011996:	2004      	movs	r0, #4
 8011998:	f7fa fb2c 	bl	800bff4 <mg_log_prefix>
 801199c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80119a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80119a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80119a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80119ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80119b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80119b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80119b8:	e9cd 2300 	strd	r2, r3, [sp]
 80119bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80119c0:	4821      	ldr	r0, [pc, #132]	@ (8011a48 <mg_sntp_parse+0x1fc>)
 80119c2:	f7fa fb67 	bl	800c094 <mg_log>
    res = t2 + delta / 2;
 80119c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	da06      	bge.n	80119dc <mg_sntp_parse+0x190>
 80119ce:	1c51      	adds	r1, r2, #1
 80119d0:	6039      	str	r1, [r7, #0]
 80119d2:	f143 0300 	adc.w	r3, r3, #0
 80119d6:	607b      	str	r3, [r7, #4]
 80119d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80119dc:	f04f 0000 	mov.w	r0, #0
 80119e0:	f04f 0100 	mov.w	r1, #0
 80119e4:	0850      	lsrs	r0, r2, #1
 80119e6:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 80119ea:	1059      	asrs	r1, r3, #1
 80119ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80119f0:	eb12 0a00 	adds.w	sl, r2, r0
 80119f4:	eb43 0b01 	adc.w	fp, r3, r1
 80119f8:	e9c7 ab12 	strd	sl, fp, [r7, #72]	@ 0x48
  } else if (version == 4 || version == 3) {
 80119fc:	e00e      	b.n	8011a1c <mg_sntp_parse+0x1d0>
  } else {
    MG_ERROR(("unexpected version: %d", version));
 80119fe:	4b0b      	ldr	r3, [pc, #44]	@ (8011a2c <mg_sntp_parse+0x1e0>)
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	dd0a      	ble.n	8011a1c <mg_sntp_parse+0x1d0>
 8011a06:	4b0a      	ldr	r3, [pc, #40]	@ (8011a30 <mg_sntp_parse+0x1e4>)
 8011a08:	f641 32a9 	movw	r2, #7081	@ 0x1ba9
 8011a0c:	4909      	ldr	r1, [pc, #36]	@ (8011a34 <mg_sntp_parse+0x1e8>)
 8011a0e:	2001      	movs	r0, #1
 8011a10:	f7fa faf0 	bl	800bff4 <mg_log_prefix>
 8011a14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011a16:	480d      	ldr	r0, [pc, #52]	@ (8011a4c <mg_sntp_parse+0x200>)
 8011a18:	f7fa fb3c 	bl	800c094 <mg_log>
  }
  return res;
 8011a1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
}
 8011a20:	4610      	mov	r0, r2
 8011a22:	4619      	mov	r1, r3
 8011a24:	3750      	adds	r7, #80	@ 0x50
 8011a26:	46bd      	mov	sp, r7
 8011a28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011a2c:	20000244 	.word	0x20000244
 8011a30:	08032824 	.word	0x08032824
 8011a34:	0802efcc 	.word	0x0802efcc
 8011a38:	08030598 	.word	0x08030598
 8011a3c:	0802f120 	.word	0x0802f120
 8011a40:	080305a8 	.word	0x080305a8
 8011a44:	080305bc 	.word	0x080305bc
 8011a48:	080305d8 	.word	0x080305d8
 8011a4c:	080305f8 	.word	0x080305f8

08011a50 <sntp_cb>:

static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 8011a50:	b590      	push	{r4, r7, lr}
 8011a52:	b087      	sub	sp, #28
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	60f8      	str	r0, [r7, #12]
 8011a58:	60b9      	str	r1, [r7, #8]
 8011a5a:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_READ) {
 8011a5c:	68bb      	ldr	r3, [r7, #8]
 8011a5e:	2b07      	cmp	r3, #7
 8011a60:	d158      	bne.n	8011b14 <sntp_cb+0xc4>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a6a:	4619      	mov	r1, r3
 8011a6c:	4610      	mov	r0, r2
 8011a6e:	f7ff feed 	bl	801184c <mg_sntp_parse>
 8011a72:	4602      	mov	r2, r0
 8011a74:	460b      	mov	r3, r1
 8011a76:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (milliseconds > 0) {
 8011a7a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011a7e:	2a01      	cmp	r2, #1
 8011a80:	f173 0300 	sbcs.w	r3, r3, #0
 8011a84:	db3c      	blt.n	8011b00 <sntp_cb+0xb0>
      MG_DEBUG(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 8011a86:	4b28      	ldr	r3, [pc, #160]	@ (8011b28 <sntp_cb+0xd8>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	2b02      	cmp	r3, #2
 8011a8c:	dd0d      	ble.n	8011aaa <sntp_cb+0x5a>
 8011a8e:	4b27      	ldr	r3, [pc, #156]	@ (8011b2c <sntp_cb+0xdc>)
 8011a90:	f641 32b2 	movw	r2, #7090	@ 0x1bb2
 8011a94:	4926      	ldr	r1, [pc, #152]	@ (8011b30 <sntp_cb+0xe0>)
 8011a96:	2003      	movs	r0, #3
 8011a98:	f7fa faac 	bl	800bff4 <mg_log_prefix>
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8011aa0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011aa4:	4823      	ldr	r0, [pc, #140]	@ (8011b34 <sntp_cb+0xe4>)
 8011aa6:	f7fa faf5 	bl	800c094 <mg_log>
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 8011aaa:	f107 0310 	add.w	r3, r7, #16
 8011aae:	461a      	mov	r2, r3
 8011ab0:	2112      	movs	r1, #18
 8011ab2:	68f8      	ldr	r0, [r7, #12]
 8011ab4:	f7f5 f8aa 	bl	8006c0c <mg_call>
      MG_VERBOSE(("%u.%u", (unsigned) (milliseconds / 1000),
 8011ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8011b28 <sntp_cb+0xd8>)
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	2b03      	cmp	r3, #3
 8011abe:	dd1f      	ble.n	8011b00 <sntp_cb+0xb0>
 8011ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8011b2c <sntp_cb+0xdc>)
 8011ac2:	f641 32b4 	movw	r2, #7092	@ 0x1bb4
 8011ac6:	491a      	ldr	r1, [pc, #104]	@ (8011b30 <sntp_cb+0xe0>)
 8011ac8:	2004      	movs	r0, #4
 8011aca:	f7fa fa93 	bl	800bff4 <mg_log_prefix>
 8011ace:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011ad2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011ad6:	f04f 0300 	mov.w	r3, #0
 8011ada:	f7ee fdd5 	bl	8000688 <__aeabi_ldivmod>
 8011ade:	4602      	mov	r2, r0
 8011ae0:	460b      	mov	r3, r1
 8011ae2:	4614      	mov	r4, r2
 8011ae4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011ae8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011aec:	f04f 0300 	mov.w	r3, #0
 8011af0:	f7ee fdca 	bl	8000688 <__aeabi_ldivmod>
 8011af4:	4613      	mov	r3, r2
 8011af6:	461a      	mov	r2, r3
 8011af8:	4621      	mov	r1, r4
 8011afa:	480f      	ldr	r0, [pc, #60]	@ (8011b38 <sntp_cb+0xe8>)
 8011afc:	f7fa faca 	bl	800c094 <mg_log>
                  (unsigned) (milliseconds % 1000)));
    }
    mg_iobuf_del(&c->recv, 0, c->recv.len);  // Free receive buffer
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b0a:	461a      	mov	r2, r3
 8011b0c:	2100      	movs	r1, #0
 8011b0e:	f7f9 fb57 	bl	800b1c0 <mg_iobuf_del>
  } else if (ev == MG_EV_CONNECT) {
    mg_sntp_request(c);
  } else if (ev == MG_EV_CLOSE) {
  }
  (void) ev_data;
}
 8011b12:	e005      	b.n	8011b20 <sntp_cb+0xd0>
  } else if (ev == MG_EV_CONNECT) {
 8011b14:	68bb      	ldr	r3, [r7, #8]
 8011b16:	2b04      	cmp	r3, #4
 8011b18:	d102      	bne.n	8011b20 <sntp_cb+0xd0>
    mg_sntp_request(c);
 8011b1a:	68f8      	ldr	r0, [r7, #12]
 8011b1c:	f000 f810 	bl	8011b40 <mg_sntp_request>
}
 8011b20:	bf00      	nop
 8011b22:	371c      	adds	r7, #28
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd90      	pop	{r4, r7, pc}
 8011b28:	20000244 	.word	0x20000244
 8011b2c:	08032834 	.word	0x08032834
 8011b30:	0802efcc 	.word	0x0802efcc
 8011b34:	08030610 	.word	0x08030610
 8011b38:	08030634 	.word	0x08030634
 8011b3c:	00000000 	.word	0x00000000

08011b40 <mg_sntp_request>:

void mg_sntp_request(struct mg_connection *c) {
 8011b40:	b590      	push	{r4, r7, lr}
 8011b42:	b095      	sub	sp, #84	@ 0x54
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
  if (c->is_resolving) {
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011b4e:	f003 0308 	and.w	r3, r3, #8
 8011b52:	b2db      	uxtb	r3, r3
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d011      	beq.n	8011b7c <mg_sntp_request+0x3c>
    MG_ERROR(("%lu wait until resolved", c->id));
 8011b58:	4b37      	ldr	r3, [pc, #220]	@ (8011c38 <mg_sntp_request+0xf8>)
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	dd5f      	ble.n	8011c20 <mg_sntp_request+0xe0>
 8011b60:	4b36      	ldr	r3, [pc, #216]	@ (8011c3c <mg_sntp_request+0xfc>)
 8011b62:	f641 32c1 	movw	r2, #7105	@ 0x1bc1
 8011b66:	4936      	ldr	r1, [pc, #216]	@ (8011c40 <mg_sntp_request+0x100>)
 8011b68:	2001      	movs	r0, #1
 8011b6a:	f7fa fa43 	bl	800bff4 <mg_log_prefix>
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011b72:	4619      	mov	r1, r3
 8011b74:	4833      	ldr	r0, [pc, #204]	@ (8011c44 <mg_sntp_request+0x104>)
 8011b76:	f7fa fa8d 	bl	800c094 <mg_log>
    buf[0] = (0 << 6) | (4 << 3) | 3;
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
    t[1] = mg_htonl((uint32_t) frac);
    mg_send(c, buf, sizeof(buf));
  }
}
 8011b7a:	e051      	b.n	8011c20 <mg_sntp_request+0xe0>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 8011b7c:	f7f1 fe2c 	bl	80037d8 <mg_millis>
 8011b80:	4602      	mov	r2, r0
 8011b82:	460b      	mov	r3, r1
 8011b84:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    uint8_t buf[48] = {0};
 8011b88:	2300      	movs	r3, #0
 8011b8a:	60bb      	str	r3, [r7, #8]
 8011b8c:	f107 030c 	add.w	r3, r7, #12
 8011b90:	222c      	movs	r2, #44	@ 0x2c
 8011b92:	2100      	movs	r1, #0
 8011b94:	4618      	mov	r0, r3
 8011b96:	f019 ffb9 	bl	802bb0c <memset>
    uint32_t *t = (uint32_t *) &buf[40];
 8011b9a:	f107 0308 	add.w	r3, r7, #8
 8011b9e:	3328      	adds	r3, #40	@ 0x28
 8011ba0:	647b      	str	r3, [r7, #68]	@ 0x44
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 8011ba2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8011ba6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011baa:	f04f 0300 	mov.w	r3, #0
 8011bae:	f7ee fd6b 	bl	8000688 <__aeabi_ldivmod>
 8011bb2:	4610      	mov	r0, r2
 8011bb4:	4619      	mov	r1, r3
 8011bb6:	f7ee fd39 	bl	800062c <__aeabi_l2d>
 8011bba:	ec41 0b15 	vmov	d5, r0, r1
 8011bbe:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8011c28 <mg_sntp_request+0xe8>
 8011bc2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8011bc6:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8011c30 <mg_sntp_request+0xf0>
 8011bca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011bce:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    buf[0] = (0 << 6) | (4 << 3) | 3;
 8011bd2:	2323      	movs	r3, #35	@ 0x23
 8011bd4:	723b      	strb	r3, [r7, #8]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 8011bd6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8011bda:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011bde:	f04f 0300 	mov.w	r3, #0
 8011be2:	f7ee fd51 	bl	8000688 <__aeabi_ldivmod>
 8011be6:	4602      	mov	r2, r0
 8011be8:	460b      	mov	r3, r1
 8011bea:	4b17      	ldr	r3, [pc, #92]	@ (8011c48 <mg_sntp_request+0x108>)
 8011bec:	4413      	add	r3, r2
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f000 fef9 	bl	80129e6 <mg_ntohl>
 8011bf4:	4602      	mov	r2, r0
 8011bf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011bf8:	601a      	str	r2, [r3, #0]
    t[1] = mg_htonl((uint32_t) frac);
 8011bfa:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8011bfe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8011c02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c04:	1d1c      	adds	r4, r3, #4
 8011c06:	ee17 0a90 	vmov	r0, s15
 8011c0a:	f000 feec 	bl	80129e6 <mg_ntohl>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	6023      	str	r3, [r4, #0]
    mg_send(c, buf, sizeof(buf));
 8011c12:	f107 0308 	add.w	r3, r7, #8
 8011c16:	2230      	movs	r2, #48	@ 0x30
 8011c18:	4619      	mov	r1, r3
 8011c1a:	6878      	ldr	r0, [r7, #4]
 8011c1c:	f7ff f91e 	bl	8010e5c <mg_send>
}
 8011c20:	bf00      	nop
 8011c22:	3754      	adds	r7, #84	@ 0x54
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd90      	pop	{r4, r7, pc}
 8011c28:	00000000 	.word	0x00000000
 8011c2c:	408f4000 	.word	0x408f4000
 8011c30:	ffe00000 	.word	0xffe00000
 8011c34:	41efffff 	.word	0x41efffff
 8011c38:	20000244 	.word	0x20000244
 8011c3c:	0803283c 	.word	0x0803283c
 8011c40:	0802efcc 	.word	0x0802efcc
 8011c44:	0803063c 	.word	0x0803063c
 8011c48:	83aa7e80 	.word	0x83aa7e80

08011c4c <mg_sntp_connect>:

struct mg_connection *mg_sntp_connect(struct mg_mgr *mgr, const char *url,
                                      mg_event_handler_t fn, void *fnd) {
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b086      	sub	sp, #24
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	60f8      	str	r0, [r7, #12]
 8011c54:	60b9      	str	r1, [r7, #8]
 8011c56:	607a      	str	r2, [r7, #4]
 8011c58:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	617b      	str	r3, [r7, #20]
  if (url == NULL) url = "udp://time.google.com:123";
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d101      	bne.n	8011c68 <mg_sntp_connect+0x1c>
 8011c64:	4b0a      	ldr	r3, [pc, #40]	@ (8011c90 <mg_sntp_connect+0x44>)
 8011c66:	60bb      	str	r3, [r7, #8]
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) c->pfn = sntp_cb;
 8011c68:	683b      	ldr	r3, [r7, #0]
 8011c6a:	687a      	ldr	r2, [r7, #4]
 8011c6c:	68b9      	ldr	r1, [r7, #8]
 8011c6e:	68f8      	ldr	r0, [r7, #12]
 8011c70:	f7fb fe6e 	bl	800d950 <mg_connect>
 8011c74:	6178      	str	r0, [r7, #20]
 8011c76:	697b      	ldr	r3, [r7, #20]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d003      	beq.n	8011c84 <mg_sntp_connect+0x38>
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	4a05      	ldr	r2, [pc, #20]	@ (8011c94 <mg_sntp_connect+0x48>)
 8011c80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 8011c84:	697b      	ldr	r3, [r7, #20]
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	3718      	adds	r7, #24
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}
 8011c8e:	bf00      	nop
 8011c90:	08030654 	.word	0x08030654
 8011c94:	08011a51 	.word	0x08011a51

08011c98 <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b084      	sub	sp, #16
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	60f8      	str	r0, [r7, #12]
 8011ca0:	60b9      	str	r1, [r7, #8]
 8011ca2:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 8011ca4:	4b05      	ldr	r3, [pc, #20]	@ (8011cbc <mg_http_serve_ssi+0x24>)
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8011cac:	68f8      	ldr	r0, [r7, #12]
 8011cae:	f7f7 fce1 	bl	8009674 <mg_http_reply>
  (void) root, (void) fullpath;
}
 8011cb2:	bf00      	nop
 8011cb4:	3710      	adds	r7, #16
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}
 8011cba:	bf00      	nop
 8011cbc:	08030670 	.word	0x08030670

08011cc0 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b084      	sub	sp, #16
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
 8011cc8:	6039      	str	r1, [r7, #0]
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 8011cca:	683b      	ldr	r3, [r7, #0]
 8011ccc:	60bb      	str	r3, [r7, #8]
 8011cce:	683b      	ldr	r3, [r7, #0]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d004      	beq.n	8011cde <mg_str_s+0x1e>
 8011cd4:	6838      	ldr	r0, [r7, #0]
 8011cd6:	f7ee fb13 	bl	8000300 <strlen>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	e000      	b.n	8011ce0 <mg_str_s+0x20>
 8011cde:	2300      	movs	r3, #0
 8011ce0:	60fb      	str	r3, [r7, #12]
  return str;
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	f107 0308 	add.w	r3, r7, #8
 8011cea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011cee:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	3710      	adds	r7, #16
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}

08011cfa <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 8011cfa:	b480      	push	{r7}
 8011cfc:	b087      	sub	sp, #28
 8011cfe:	af00      	add	r7, sp, #0
 8011d00:	60f8      	str	r0, [r7, #12]
 8011d02:	60b9      	str	r1, [r7, #8]
 8011d04:	607a      	str	r2, [r7, #4]
  struct mg_str str = {(char *) s, n};
 8011d06:	68bb      	ldr	r3, [r7, #8]
 8011d08:	613b      	str	r3, [r7, #16]
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	617b      	str	r3, [r7, #20]
  return str;
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	461a      	mov	r2, r3
 8011d12:	f107 0310 	add.w	r3, r7, #16
 8011d16:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d1a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8011d1e:	68f8      	ldr	r0, [r7, #12]
 8011d20:	371c      	adds	r7, #28
 8011d22:	46bd      	mov	sp, r7
 8011d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d28:	4770      	bx	lr

08011d2a <mg_lower>:

int mg_lower(const char *s) {
 8011d2a:	b480      	push	{r7}
 8011d2c:	b085      	sub	sp, #20
 8011d2e:	af00      	add	r7, sp, #0
 8011d30:	6078      	str	r0, [r7, #4]
  int c = *s;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	781b      	ldrb	r3, [r3, #0]
 8011d36:	60fb      	str	r3, [r7, #12]
  if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	2b40      	cmp	r3, #64	@ 0x40
 8011d3c:	dd05      	ble.n	8011d4a <mg_lower+0x20>
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	2b5a      	cmp	r3, #90	@ 0x5a
 8011d42:	dc02      	bgt.n	8011d4a <mg_lower+0x20>
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	3320      	adds	r3, #32
 8011d48:	60fb      	str	r3, [r7, #12]
  return c;
 8011d4a:	68fb      	ldr	r3, [r7, #12]
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	3714      	adds	r7, #20
 8011d50:	46bd      	mov	sp, r7
 8011d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d56:	4770      	bx	lr

08011d58 <mg_ncasecmp>:

int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 8011d58:	b590      	push	{r4, r7, lr}
 8011d5a:	b087      	sub	sp, #28
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	60f8      	str	r0, [r7, #12]
 8011d60:	60b9      	str	r1, [r7, #8]
 8011d62:	607a      	str	r2, [r7, #4]
  int diff = 0;
 8011d64:	2300      	movs	r3, #0
 8011d66:	617b      	str	r3, [r7, #20]
  if (len > 0) do {
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d01d      	beq.n	8011daa <mg_ncasecmp+0x52>
      diff = mg_lower(s1++) - mg_lower(s2++);
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	1c5a      	adds	r2, r3, #1
 8011d72:	60fa      	str	r2, [r7, #12]
 8011d74:	4618      	mov	r0, r3
 8011d76:	f7ff ffd8 	bl	8011d2a <mg_lower>
 8011d7a:	4604      	mov	r4, r0
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	1c5a      	adds	r2, r3, #1
 8011d80:	60ba      	str	r2, [r7, #8]
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7ff ffd1 	bl	8011d2a <mg_lower>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	1ae3      	subs	r3, r4, r3
 8011d8c:	617b      	str	r3, [r7, #20]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 8011d8e:	697b      	ldr	r3, [r7, #20]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d10a      	bne.n	8011daa <mg_ncasecmp+0x52>
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	3b01      	subs	r3, #1
 8011d98:	781b      	ldrb	r3, [r3, #0]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d005      	beq.n	8011daa <mg_ncasecmp+0x52>
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	3b01      	subs	r3, #1
 8011da2:	607b      	str	r3, [r7, #4]
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d1e1      	bne.n	8011d6e <mg_ncasecmp+0x16>
  return diff;
 8011daa:	697b      	ldr	r3, [r7, #20]
}
 8011dac:	4618      	mov	r0, r3
 8011dae:	371c      	adds	r7, #28
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd90      	pop	{r4, r7, pc}

08011db4 <mg_vcmp>:

int mg_casecmp(const char *s1, const char *s2) {
  return mg_ncasecmp(s1, s2, (size_t) ~0);
}

int mg_vcmp(const struct mg_str *s1, const char *s2) {
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b086      	sub	sp, #24
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
 8011dbc:	6039      	str	r1, [r7, #0]
  size_t n2 = strlen(s2), n1 = s1->len;
 8011dbe:	6838      	ldr	r0, [r7, #0]
 8011dc0:	f7ee fa9e 	bl	8000300 <strlen>
 8011dc4:	6178      	str	r0, [r7, #20]
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	685b      	ldr	r3, [r3, #4]
 8011dca:	613b      	str	r3, [r7, #16]
  int r = strncmp(s1->buf, s2, (n1 < n2) ? n1 : n2);
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	6818      	ldr	r0, [r3, #0]
 8011dd0:	697a      	ldr	r2, [r7, #20]
 8011dd2:	693b      	ldr	r3, [r7, #16]
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	bf28      	it	cs
 8011dd8:	4613      	movcs	r3, r2
 8011dda:	461a      	mov	r2, r3
 8011ddc:	6839      	ldr	r1, [r7, #0]
 8011dde:	f019 feaa 	bl	802bb36 <strncmp>
 8011de2:	60f8      	str	r0, [r7, #12]
  if (r == 0) return (int) (n1 - n2);
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d103      	bne.n	8011df2 <mg_vcmp+0x3e>
 8011dea:	693a      	ldr	r2, [r7, #16]
 8011dec:	697b      	ldr	r3, [r7, #20]
 8011dee:	1ad3      	subs	r3, r2, r3
 8011df0:	e000      	b.n	8011df4 <mg_vcmp+0x40>
  return r;
 8011df2:	68fb      	ldr	r3, [r7, #12]
}
 8011df4:	4618      	mov	r0, r3
 8011df6:	3718      	adds	r7, #24
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}

08011dfc <mg_vcasecmp>:

int mg_vcasecmp(const struct mg_str *str1, const char *str2) {
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b086      	sub	sp, #24
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
 8011e04:	6039      	str	r1, [r7, #0]
  size_t n2 = strlen(str2), n1 = str1->len;
 8011e06:	6838      	ldr	r0, [r7, #0]
 8011e08:	f7ee fa7a 	bl	8000300 <strlen>
 8011e0c:	6178      	str	r0, [r7, #20]
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	685b      	ldr	r3, [r3, #4]
 8011e12:	613b      	str	r3, [r7, #16]
  int r = mg_ncasecmp(str1->buf, str2, (n1 < n2) ? n1 : n2);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	6818      	ldr	r0, [r3, #0]
 8011e18:	697a      	ldr	r2, [r7, #20]
 8011e1a:	693b      	ldr	r3, [r7, #16]
 8011e1c:	4293      	cmp	r3, r2
 8011e1e:	bf28      	it	cs
 8011e20:	4613      	movcs	r3, r2
 8011e22:	461a      	mov	r2, r3
 8011e24:	6839      	ldr	r1, [r7, #0]
 8011e26:	f7ff ff97 	bl	8011d58 <mg_ncasecmp>
 8011e2a:	60f8      	str	r0, [r7, #12]
  if (r == 0) return (int) (n1 - n2);
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d103      	bne.n	8011e3a <mg_vcasecmp+0x3e>
 8011e32:	693a      	ldr	r2, [r7, #16]
 8011e34:	697b      	ldr	r3, [r7, #20]
 8011e36:	1ad3      	subs	r3, r2, r3
 8011e38:	e000      	b.n	8011e3c <mg_vcasecmp+0x40>
  return r;
 8011e3a:	68fb      	ldr	r3, [r7, #12]
}
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	3718      	adds	r7, #24
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}

08011e44 <mg_strdup>:

struct mg_str mg_strdup(const struct mg_str s) {
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b088      	sub	sp, #32
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	60f8      	str	r0, [r7, #12]
 8011e4c:	1d3b      	adds	r3, r7, #4
 8011e4e:	e883 0006 	stmia.w	r3, {r1, r2}
  struct mg_str r = {NULL, 0};
 8011e52:	2300      	movs	r3, #0
 8011e54:	617b      	str	r3, [r7, #20]
 8011e56:	2300      	movs	r3, #0
 8011e58:	61bb      	str	r3, [r7, #24]
  if (s.len > 0 && s.buf != NULL) {
 8011e5a:	68bb      	ldr	r3, [r7, #8]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d01c      	beq.n	8011e9a <mg_strdup+0x56>
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d019      	beq.n	8011e9a <mg_strdup+0x56>
    char *sc = (char *) calloc(1, s.len + 1);
 8011e66:	68bb      	ldr	r3, [r7, #8]
 8011e68:	3301      	adds	r3, #1
 8011e6a:	4619      	mov	r1, r3
 8011e6c:	2001      	movs	r0, #1
 8011e6e:	f018 fbf5 	bl	802a65c <calloc>
 8011e72:	4603      	mov	r3, r0
 8011e74:	61fb      	str	r3, [r7, #28]
    if (sc != NULL) {
 8011e76:	69fb      	ldr	r3, [r7, #28]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d00e      	beq.n	8011e9a <mg_strdup+0x56>
      memcpy(sc, s.buf, s.len);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	68ba      	ldr	r2, [r7, #8]
 8011e80:	4619      	mov	r1, r3
 8011e82:	69f8      	ldr	r0, [r7, #28]
 8011e84:	f01a fb77 	bl	802c576 <memcpy>
      sc[s.len] = '\0';
 8011e88:	68bb      	ldr	r3, [r7, #8]
 8011e8a:	69fa      	ldr	r2, [r7, #28]
 8011e8c:	4413      	add	r3, r2
 8011e8e:	2200      	movs	r2, #0
 8011e90:	701a      	strb	r2, [r3, #0]
      r.buf = sc;
 8011e92:	69fb      	ldr	r3, [r7, #28]
 8011e94:	617b      	str	r3, [r7, #20]
      r.len = s.len;
 8011e96:	68bb      	ldr	r3, [r7, #8]
 8011e98:	61bb      	str	r3, [r7, #24]
    }
  }
  return r;
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	461a      	mov	r2, r3
 8011e9e:	f107 0314 	add.w	r3, r7, #20
 8011ea2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011ea6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8011eaa:	68f8      	ldr	r0, [r7, #12]
 8011eac:	3720      	adds	r7, #32
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	bd80      	pop	{r7, pc}

08011eb2 <mg_strcmp>:

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 8011eb2:	b490      	push	{r4, r7}
 8011eb4:	b088      	sub	sp, #32
 8011eb6:	af00      	add	r7, sp, #0
 8011eb8:	f107 0408 	add.w	r4, r7, #8
 8011ebc:	e884 0003 	stmia.w	r4, {r0, r1}
 8011ec0:	4639      	mov	r1, r7
 8011ec2:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8011eca:	e019      	b.n	8011f00 <mg_strcmp+0x4e>
    int c1 = str1.buf[i];
 8011ecc:	68ba      	ldr	r2, [r7, #8]
 8011ece:	69fb      	ldr	r3, [r7, #28]
 8011ed0:	4413      	add	r3, r2
 8011ed2:	781b      	ldrb	r3, [r3, #0]
 8011ed4:	61bb      	str	r3, [r7, #24]
    int c2 = str2.buf[i];
 8011ed6:	683a      	ldr	r2, [r7, #0]
 8011ed8:	69fb      	ldr	r3, [r7, #28]
 8011eda:	4413      	add	r3, r2
 8011edc:	781b      	ldrb	r3, [r3, #0]
 8011ede:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 8011ee0:	69ba      	ldr	r2, [r7, #24]
 8011ee2:	697b      	ldr	r3, [r7, #20]
 8011ee4:	429a      	cmp	r2, r3
 8011ee6:	da02      	bge.n	8011eee <mg_strcmp+0x3c>
 8011ee8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011eec:	e01e      	b.n	8011f2c <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 8011eee:	69ba      	ldr	r2, [r7, #24]
 8011ef0:	697b      	ldr	r3, [r7, #20]
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	dd01      	ble.n	8011efa <mg_strcmp+0x48>
 8011ef6:	2301      	movs	r3, #1
 8011ef8:	e018      	b.n	8011f2c <mg_strcmp+0x7a>
    i++;
 8011efa:	69fb      	ldr	r3, [r7, #28]
 8011efc:	3301      	adds	r3, #1
 8011efe:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	69fa      	ldr	r2, [r7, #28]
 8011f04:	429a      	cmp	r2, r3
 8011f06:	d203      	bcs.n	8011f10 <mg_strcmp+0x5e>
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	69fa      	ldr	r2, [r7, #28]
 8011f0c:	429a      	cmp	r2, r3
 8011f0e:	d3dd      	bcc.n	8011ecc <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	69fa      	ldr	r2, [r7, #28]
 8011f14:	429a      	cmp	r2, r3
 8011f16:	d201      	bcs.n	8011f1c <mg_strcmp+0x6a>
 8011f18:	2301      	movs	r3, #1
 8011f1a:	e007      	b.n	8011f2c <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	69fa      	ldr	r2, [r7, #28]
 8011f20:	429a      	cmp	r2, r3
 8011f22:	d202      	bcs.n	8011f2a <mg_strcmp+0x78>
 8011f24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011f28:	e000      	b.n	8011f2c <mg_strcmp+0x7a>
  return 0;
 8011f2a:	2300      	movs	r3, #0
}
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	3720      	adds	r7, #32
 8011f30:	46bd      	mov	sp, r7
 8011f32:	bc90      	pop	{r4, r7}
 8011f34:	4770      	bx	lr

08011f36 <mg_strstr>:

const char *mg_strstr(const struct mg_str haystack,
                      const struct mg_str needle) {
 8011f36:	b590      	push	{r4, r7, lr}
 8011f38:	b087      	sub	sp, #28
 8011f3a:	af00      	add	r7, sp, #0
 8011f3c:	f107 0408 	add.w	r4, r7, #8
 8011f40:	e884 0003 	stmia.w	r4, {r0, r1}
 8011f44:	4639      	mov	r1, r7
 8011f46:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i;
  if (needle.len > haystack.len) return NULL;
 8011f4a:	687a      	ldr	r2, [r7, #4]
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	429a      	cmp	r2, r3
 8011f50:	d901      	bls.n	8011f56 <mg_strstr+0x20>
 8011f52:	2300      	movs	r3, #0
 8011f54:	e020      	b.n	8011f98 <mg_strstr+0x62>
  if (needle.len == 0) return haystack.buf;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d101      	bne.n	8011f60 <mg_strstr+0x2a>
 8011f5c:	68bb      	ldr	r3, [r7, #8]
 8011f5e:	e01b      	b.n	8011f98 <mg_strstr+0x62>
  for (i = 0; i <= haystack.len - needle.len; i++) {
 8011f60:	2300      	movs	r3, #0
 8011f62:	617b      	str	r3, [r7, #20]
 8011f64:	e011      	b.n	8011f8a <mg_strstr+0x54>
    if (memcmp(haystack.buf + i, needle.buf, needle.len) == 0) {
 8011f66:	68ba      	ldr	r2, [r7, #8]
 8011f68:	697b      	ldr	r3, [r7, #20]
 8011f6a:	4413      	add	r3, r2
 8011f6c:	6839      	ldr	r1, [r7, #0]
 8011f6e:	687a      	ldr	r2, [r7, #4]
 8011f70:	4618      	mov	r0, r3
 8011f72:	f019 fda1 	bl	802bab8 <memcmp>
 8011f76:	4603      	mov	r3, r0
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d103      	bne.n	8011f84 <mg_strstr+0x4e>
      return haystack.buf + i;
 8011f7c:	68ba      	ldr	r2, [r7, #8]
 8011f7e:	697b      	ldr	r3, [r7, #20]
 8011f80:	4413      	add	r3, r2
 8011f82:	e009      	b.n	8011f98 <mg_strstr+0x62>
  for (i = 0; i <= haystack.len - needle.len; i++) {
 8011f84:	697b      	ldr	r3, [r7, #20]
 8011f86:	3301      	adds	r3, #1
 8011f88:	617b      	str	r3, [r7, #20]
 8011f8a:	68fa      	ldr	r2, [r7, #12]
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	1ad3      	subs	r3, r2, r3
 8011f90:	697a      	ldr	r2, [r7, #20]
 8011f92:	429a      	cmp	r2, r3
 8011f94:	d9e7      	bls.n	8011f66 <mg_strstr+0x30>
    }
  }
  return NULL;
 8011f96:	2300      	movs	r3, #0
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	371c      	adds	r7, #28
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd90      	pop	{r4, r7, pc}

08011fa0 <mg_match>:
  while (s.len > 0 && is_space((int) *s.buf)) s.buf++, s.len--;
  while (s.len > 0 && is_space((int) *(s.buf + s.len - 1))) s.len--;
  return s;
}

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 8011fa0:	b490      	push	{r4, r7}
 8011fa2:	b088      	sub	sp, #32
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	f107 0408 	add.w	r4, r7, #8
 8011faa:	e884 0003 	stmia.w	r4, {r0, r1}
 8011fae:	4639      	mov	r1, r7
 8011fb0:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	61fb      	str	r3, [r7, #28]
 8011fb8:	2300      	movs	r3, #0
 8011fba:	61bb      	str	r3, [r7, #24]
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	617b      	str	r3, [r7, #20]
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	613b      	str	r3, [r7, #16]
  if (caps) caps->buf = NULL, caps->len = 0;
 8011fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	f000 80ae 	beq.w	8012128 <mg_match+0x188>
 8011fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fce:	2200      	movs	r2, #0
 8011fd0:	601a      	str	r2, [r3, #0]
 8011fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 8011fd8:	e0a6      	b.n	8012128 <mg_match+0x188>
    if (i < p.len && j < s.len && (p.buf[i] == '?' || s.buf[j] == p.buf[i])) {
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	69fa      	ldr	r2, [r7, #28]
 8011fde:	429a      	cmp	r2, r3
 8011fe0:	d24f      	bcs.n	8012082 <mg_match+0xe2>
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	69ba      	ldr	r2, [r7, #24]
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	d24b      	bcs.n	8012082 <mg_match+0xe2>
 8011fea:	683a      	ldr	r2, [r7, #0]
 8011fec:	69fb      	ldr	r3, [r7, #28]
 8011fee:	4413      	add	r3, r2
 8011ff0:	781b      	ldrb	r3, [r3, #0]
 8011ff2:	2b3f      	cmp	r3, #63	@ 0x3f
 8011ff4:	d009      	beq.n	801200a <mg_match+0x6a>
 8011ff6:	68ba      	ldr	r2, [r7, #8]
 8011ff8:	69bb      	ldr	r3, [r7, #24]
 8011ffa:	4413      	add	r3, r2
 8011ffc:	781a      	ldrb	r2, [r3, #0]
 8011ffe:	6839      	ldr	r1, [r7, #0]
 8012000:	69fb      	ldr	r3, [r7, #28]
 8012002:	440b      	add	r3, r1
 8012004:	781b      	ldrb	r3, [r3, #0]
 8012006:	429a      	cmp	r2, r3
 8012008:	d13b      	bne.n	8012082 <mg_match+0xe2>
      if (caps == NULL) {
 801200a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801200c:	2b00      	cmp	r3, #0
 801200e:	d031      	beq.n	8012074 <mg_match+0xd4>
      } else if (p.buf[i] == '?') {
 8012010:	683a      	ldr	r2, [r7, #0]
 8012012:	69fb      	ldr	r3, [r7, #28]
 8012014:	4413      	add	r3, r2
 8012016:	781b      	ldrb	r3, [r3, #0]
 8012018:	2b3f      	cmp	r3, #63	@ 0x3f
 801201a:	d111      	bne.n	8012040 <mg_match+0xa0>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 801201c:	68ba      	ldr	r2, [r7, #8]
 801201e:	69bb      	ldr	r3, [r7, #24]
 8012020:	441a      	add	r2, r3
 8012022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012024:	601a      	str	r2, [r3, #0]
 8012026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012028:	2201      	movs	r2, #1
 801202a:	605a      	str	r2, [r3, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 801202c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801202e:	3308      	adds	r3, #8
 8012030:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012034:	2200      	movs	r2, #0
 8012036:	601a      	str	r2, [r3, #0]
 8012038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801203a:	2200      	movs	r2, #0
 801203c:	605a      	str	r2, [r3, #4]
 801203e:	e019      	b.n	8012074 <mg_match+0xd4>
      } else if (caps->buf != NULL && caps->len == 0) {
 8012040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d015      	beq.n	8012074 <mg_match+0xd4>
 8012048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801204a:	685b      	ldr	r3, [r3, #4]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d111      	bne.n	8012074 <mg_match+0xd4>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8012050:	68ba      	ldr	r2, [r7, #8]
 8012052:	69bb      	ldr	r3, [r7, #24]
 8012054:	441a      	add	r2, r3
 8012056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	1ad3      	subs	r3, r2, r3
 801205c:	461a      	mov	r2, r3
 801205e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012060:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 8012062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012064:	3308      	adds	r3, #8
 8012066:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801206a:	2200      	movs	r2, #0
 801206c:	605a      	str	r2, [r3, #4]
 801206e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012070:	2200      	movs	r2, #0
 8012072:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 8012074:	69fb      	ldr	r3, [r7, #28]
 8012076:	3301      	adds	r3, #1
 8012078:	61fb      	str	r3, [r7, #28]
 801207a:	69bb      	ldr	r3, [r7, #24]
 801207c:	3301      	adds	r3, #1
 801207e:	61bb      	str	r3, [r7, #24]
 8012080:	e052      	b.n	8012128 <mg_match+0x188>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	69fa      	ldr	r2, [r7, #28]
 8012086:	429a      	cmp	r2, r3
 8012088:	d222      	bcs.n	80120d0 <mg_match+0x130>
 801208a:	683a      	ldr	r2, [r7, #0]
 801208c:	69fb      	ldr	r3, [r7, #28]
 801208e:	4413      	add	r3, r2
 8012090:	781b      	ldrb	r3, [r3, #0]
 8012092:	2b2a      	cmp	r3, #42	@ 0x2a
 8012094:	d005      	beq.n	80120a2 <mg_match+0x102>
 8012096:	683a      	ldr	r2, [r7, #0]
 8012098:	69fb      	ldr	r3, [r7, #28]
 801209a:	4413      	add	r3, r2
 801209c:	781b      	ldrb	r3, [r3, #0]
 801209e:	2b23      	cmp	r3, #35	@ 0x23
 80120a0:	d116      	bne.n	80120d0 <mg_match+0x130>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 80120a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d00b      	beq.n	80120c0 <mg_match+0x120>
 80120a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d107      	bne.n	80120c0 <mg_match+0x120>
 80120b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120b2:	2200      	movs	r2, #0
 80120b4:	605a      	str	r2, [r3, #4]
 80120b6:	68ba      	ldr	r2, [r7, #8]
 80120b8:	69bb      	ldr	r3, [r7, #24]
 80120ba:	441a      	add	r2, r3
 80120bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120be:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 80120c0:	69fb      	ldr	r3, [r7, #28]
 80120c2:	1c5a      	adds	r2, r3, #1
 80120c4:	61fa      	str	r2, [r7, #28]
 80120c6:	617b      	str	r3, [r7, #20]
 80120c8:	69bb      	ldr	r3, [r7, #24]
 80120ca:	3301      	adds	r3, #1
 80120cc:	613b      	str	r3, [r7, #16]
 80120ce:	e02b      	b.n	8012128 <mg_match+0x188>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 80120d0:	693b      	ldr	r3, [r7, #16]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d025      	beq.n	8012122 <mg_match+0x182>
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	693a      	ldr	r2, [r7, #16]
 80120da:	429a      	cmp	r2, r3
 80120dc:	d821      	bhi.n	8012122 <mg_match+0x182>
 80120de:	683a      	ldr	r2, [r7, #0]
 80120e0:	697b      	ldr	r3, [r7, #20]
 80120e2:	4413      	add	r3, r2
 80120e4:	781b      	ldrb	r3, [r3, #0]
 80120e6:	2b23      	cmp	r3, #35	@ 0x23
 80120e8:	d005      	beq.n	80120f6 <mg_match+0x156>
 80120ea:	68ba      	ldr	r2, [r7, #8]
 80120ec:	69bb      	ldr	r3, [r7, #24]
 80120ee:	4413      	add	r3, r2
 80120f0:	781b      	ldrb	r3, [r3, #0]
 80120f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80120f4:	d015      	beq.n	8012122 <mg_match+0x182>
      i = ni, j = nj;
 80120f6:	697b      	ldr	r3, [r7, #20]
 80120f8:	61fb      	str	r3, [r7, #28]
 80120fa:	693b      	ldr	r3, [r7, #16]
 80120fc:	61bb      	str	r3, [r7, #24]
      if (caps && caps->buf == NULL && caps->len == 0) {
 80120fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012100:	2b00      	cmp	r3, #0
 8012102:	d010      	beq.n	8012126 <mg_match+0x186>
 8012104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d10c      	bne.n	8012126 <mg_match+0x186>
 801210c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801210e:	685b      	ldr	r3, [r3, #4]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d108      	bne.n	8012126 <mg_match+0x186>
        caps--, caps->len = 0;  // Restart previous cap
 8012114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012116:	3b08      	subs	r3, #8
 8012118:	62bb      	str	r3, [r7, #40]	@ 0x28
 801211a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801211c:	2200      	movs	r2, #0
 801211e:	605a      	str	r2, [r3, #4]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8012120:	e001      	b.n	8012126 <mg_match+0x186>
      }
    } else {
      return false;
 8012122:	2300      	movs	r3, #0
 8012124:	e01f      	b.n	8012166 <mg_match+0x1c6>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8012126:	bf00      	nop
  while (i < p.len || j < s.len) {
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	69fa      	ldr	r2, [r7, #28]
 801212c:	429a      	cmp	r2, r3
 801212e:	f4ff af54 	bcc.w	8011fda <mg_match+0x3a>
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	69ba      	ldr	r2, [r7, #24]
 8012136:	429a      	cmp	r2, r3
 8012138:	f4ff af4f 	bcc.w	8011fda <mg_match+0x3a>
    }
  }
  if (caps && caps->buf && caps->len == 0) {
 801213c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801213e:	2b00      	cmp	r3, #0
 8012140:	d010      	beq.n	8012164 <mg_match+0x1c4>
 8012142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d00c      	beq.n	8012164 <mg_match+0x1c4>
 801214a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801214c:	685b      	ldr	r3, [r3, #4]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d108      	bne.n	8012164 <mg_match+0x1c4>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 8012152:	68ba      	ldr	r2, [r7, #8]
 8012154:	69bb      	ldr	r3, [r7, #24]
 8012156:	441a      	add	r2, r3
 8012158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	1ad3      	subs	r3, r2, r3
 801215e:	461a      	mov	r2, r3
 8012160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012162:	605a      	str	r2, [r3, #4]
  }
  return true;
 8012164:	2301      	movs	r3, #1
}
 8012166:	4618      	mov	r0, r3
 8012168:	3720      	adds	r7, #32
 801216a:	46bd      	mov	sp, r7
 801216c:	bc90      	pop	{r4, r7}
 801216e:	4770      	bx	lr

08012170 <mg_globmatch>:

bool mg_globmatch(const char *s1, size_t n1, const char *s2, size_t n2) {
 8012170:	b580      	push	{r7, lr}
 8012172:	b08a      	sub	sp, #40	@ 0x28
 8012174:	af02      	add	r7, sp, #8
 8012176:	60f8      	str	r0, [r7, #12]
 8012178:	60b9      	str	r1, [r7, #8]
 801217a:	607a      	str	r2, [r7, #4]
 801217c:	603b      	str	r3, [r7, #0]
  return mg_match(mg_str_n(s2, n2), mg_str_n(s1, n1), NULL);
 801217e:	f107 0310 	add.w	r3, r7, #16
 8012182:	683a      	ldr	r2, [r7, #0]
 8012184:	6879      	ldr	r1, [r7, #4]
 8012186:	4618      	mov	r0, r3
 8012188:	f7ff fdb7 	bl	8011cfa <mg_str_n>
 801218c:	f107 0318 	add.w	r3, r7, #24
 8012190:	68ba      	ldr	r2, [r7, #8]
 8012192:	68f9      	ldr	r1, [r7, #12]
 8012194:	4618      	mov	r0, r3
 8012196:	f7ff fdb0 	bl	8011cfa <mg_str_n>
 801219a:	2300      	movs	r3, #0
 801219c:	9300      	str	r3, [sp, #0]
 801219e:	f107 0318 	add.w	r3, r7, #24
 80121a2:	cb0c      	ldmia	r3, {r2, r3}
 80121a4:	f107 0110 	add.w	r1, r7, #16
 80121a8:	c903      	ldmia	r1, {r0, r1}
 80121aa:	f7ff fef9 	bl	8011fa0 <mg_match>
 80121ae:	4603      	mov	r3, r0
}
 80121b0:	4618      	mov	r0, r3
 80121b2:	3720      	adds	r7, #32
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}

080121b8 <mg_span>:

bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 80121b8:	b590      	push	{r4, r7, lr}
 80121ba:	b089      	sub	sp, #36	@ 0x24
 80121bc:	af00      	add	r7, sp, #0
 80121be:	f107 0410 	add.w	r4, r7, #16
 80121c2:	e884 0003 	stmia.w	r4, {r0, r1}
 80121c6:	60fa      	str	r2, [r7, #12]
 80121c8:	60bb      	str	r3, [r7, #8]
  if (s.len == 0 || s.buf == NULL) {
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d002      	beq.n	80121d6 <mg_span+0x1e>
 80121d0:	693b      	ldr	r3, [r7, #16]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d101      	bne.n	80121da <mg_span+0x22>
    return false;  // Empty string, nothing to span - fail
 80121d6:	2300      	movs	r3, #0
 80121d8:	e047      	b.n	801226a <mg_span+0xb2>
  } else {
    size_t len = 0;
 80121da:	2300      	movs	r3, #0
 80121dc:	61fb      	str	r3, [r7, #28]
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 80121de:	e002      	b.n	80121e6 <mg_span+0x2e>
 80121e0:	69fb      	ldr	r3, [r7, #28]
 80121e2:	3301      	adds	r3, #1
 80121e4:	61fb      	str	r3, [r7, #28]
 80121e6:	697b      	ldr	r3, [r7, #20]
 80121e8:	69fa      	ldr	r2, [r7, #28]
 80121ea:	429a      	cmp	r2, r3
 80121ec:	d207      	bcs.n	80121fe <mg_span+0x46>
 80121ee:	693a      	ldr	r2, [r7, #16]
 80121f0:	69fb      	ldr	r3, [r7, #28]
 80121f2:	4413      	add	r3, r2
 80121f4:	781b      	ldrb	r3, [r3, #0]
 80121f6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80121fa:	429a      	cmp	r2, r3
 80121fc:	d1f0      	bne.n	80121e0 <mg_span+0x28>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d00c      	beq.n	801221e <mg_span+0x66>
 8012204:	6939      	ldr	r1, [r7, #16]
 8012206:	68fc      	ldr	r4, [r7, #12]
 8012208:	463b      	mov	r3, r7
 801220a:	69fa      	ldr	r2, [r7, #28]
 801220c:	4618      	mov	r0, r3
 801220e:	f7ff fd74 	bl	8011cfa <mg_str_n>
 8012212:	4622      	mov	r2, r4
 8012214:	463b      	mov	r3, r7
 8012216:	e893 0003 	ldmia.w	r3, {r0, r1}
 801221a:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d010      	beq.n	8012246 <mg_span+0x8e>
 8012224:	693a      	ldr	r2, [r7, #16]
 8012226:	69fb      	ldr	r3, [r7, #28]
 8012228:	18d1      	adds	r1, r2, r3
 801222a:	697a      	ldr	r2, [r7, #20]
 801222c:	69fb      	ldr	r3, [r7, #28]
 801222e:	1ad2      	subs	r2, r2, r3
 8012230:	68bc      	ldr	r4, [r7, #8]
 8012232:	463b      	mov	r3, r7
 8012234:	4618      	mov	r0, r3
 8012236:	f7ff fd60 	bl	8011cfa <mg_str_n>
 801223a:	4622      	mov	r2, r4
 801223c:	463b      	mov	r3, r7
 801223e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012242:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d00d      	beq.n	8012268 <mg_span+0xb0>
 801224c:	697b      	ldr	r3, [r7, #20]
 801224e:	69fa      	ldr	r2, [r7, #28]
 8012250:	429a      	cmp	r2, r3
 8012252:	d209      	bcs.n	8012268 <mg_span+0xb0>
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	1c5a      	adds	r2, r3, #1
 801225a:	68bb      	ldr	r3, [r7, #8]
 801225c:	601a      	str	r2, [r3, #0]
 801225e:	68bb      	ldr	r3, [r7, #8]
 8012260:	685b      	ldr	r3, [r3, #4]
 8012262:	1e5a      	subs	r2, r3, #1
 8012264:	68bb      	ldr	r3, [r7, #8]
 8012266:	605a      	str	r2, [r3, #4]
    return true;
 8012268:	2301      	movs	r3, #1
  }
}
 801226a:	4618      	mov	r0, r3
 801226c:	3724      	adds	r7, #36	@ 0x24
 801226e:	46bd      	mov	sp, r7
 8012270:	bd90      	pop	{r4, r7, pc}
	...

08012274 <mg_hex>:

char *mg_hex(const void *buf, size_t len, char *to) {
 8012274:	b480      	push	{r7}
 8012276:	b089      	sub	sp, #36	@ 0x24
 8012278:	af00      	add	r7, sp, #0
 801227a:	60f8      	str	r0, [r7, #12]
 801227c:	60b9      	str	r1, [r7, #8]
 801227e:	607a      	str	r2, [r7, #4]
  const unsigned char *p = (const unsigned char *) buf;
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	61fb      	str	r3, [r7, #28]
  const char *hex = "0123456789abcdef";
 8012284:	4b19      	ldr	r3, [pc, #100]	@ (80122ec <mg_hex+0x78>)
 8012286:	617b      	str	r3, [r7, #20]
  size_t i = 0;
 8012288:	2300      	movs	r3, #0
 801228a:	61bb      	str	r3, [r7, #24]
  for (; len--; p++) {
 801228c:	e01d      	b.n	80122ca <mg_hex+0x56>
    to[i++] = hex[p[0] >> 4];
 801228e:	69fb      	ldr	r3, [r7, #28]
 8012290:	781b      	ldrb	r3, [r3, #0]
 8012292:	091b      	lsrs	r3, r3, #4
 8012294:	b2db      	uxtb	r3, r3
 8012296:	461a      	mov	r2, r3
 8012298:	697b      	ldr	r3, [r7, #20]
 801229a:	441a      	add	r2, r3
 801229c:	69bb      	ldr	r3, [r7, #24]
 801229e:	1c59      	adds	r1, r3, #1
 80122a0:	61b9      	str	r1, [r7, #24]
 80122a2:	6879      	ldr	r1, [r7, #4]
 80122a4:	440b      	add	r3, r1
 80122a6:	7812      	ldrb	r2, [r2, #0]
 80122a8:	701a      	strb	r2, [r3, #0]
    to[i++] = hex[p[0] & 0x0f];
 80122aa:	69fb      	ldr	r3, [r7, #28]
 80122ac:	781b      	ldrb	r3, [r3, #0]
 80122ae:	f003 030f 	and.w	r3, r3, #15
 80122b2:	697a      	ldr	r2, [r7, #20]
 80122b4:	441a      	add	r2, r3
 80122b6:	69bb      	ldr	r3, [r7, #24]
 80122b8:	1c59      	adds	r1, r3, #1
 80122ba:	61b9      	str	r1, [r7, #24]
 80122bc:	6879      	ldr	r1, [r7, #4]
 80122be:	440b      	add	r3, r1
 80122c0:	7812      	ldrb	r2, [r2, #0]
 80122c2:	701a      	strb	r2, [r3, #0]
  for (; len--; p++) {
 80122c4:	69fb      	ldr	r3, [r7, #28]
 80122c6:	3301      	adds	r3, #1
 80122c8:	61fb      	str	r3, [r7, #28]
 80122ca:	68bb      	ldr	r3, [r7, #8]
 80122cc:	1e5a      	subs	r2, r3, #1
 80122ce:	60ba      	str	r2, [r7, #8]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d1dc      	bne.n	801228e <mg_hex+0x1a>
  }
  to[i] = '\0';
 80122d4:	687a      	ldr	r2, [r7, #4]
 80122d6:	69bb      	ldr	r3, [r7, #24]
 80122d8:	4413      	add	r3, r2
 80122da:	2200      	movs	r2, #0
 80122dc:	701a      	strb	r2, [r3, #0]
  return to;
 80122de:	687b      	ldr	r3, [r7, #4]
}
 80122e0:	4618      	mov	r0, r3
 80122e2:	3724      	adds	r7, #36	@ 0x24
 80122e4:	46bd      	mov	sp, r7
 80122e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ea:	4770      	bx	lr
 80122ec:	0802f13c 	.word	0x0802f13c

080122f0 <mg_unhex_nimble>:

static unsigned char mg_unhex_nimble(unsigned char c) {
 80122f0:	b480      	push	{r7}
 80122f2:	b083      	sub	sp, #12
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	4603      	mov	r3, r0
 80122f8:	71fb      	strb	r3, [r7, #7]
  return (c >= '0' && c <= '9')   ? (unsigned char) (c - '0')
         : (c >= 'A' && c <= 'F') ? (unsigned char) (c - '7')
 80122fa:	79fb      	ldrb	r3, [r7, #7]
 80122fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80122fe:	d906      	bls.n	801230e <mg_unhex_nimble+0x1e>
  return (c >= '0' && c <= '9')   ? (unsigned char) (c - '0')
 8012300:	79fb      	ldrb	r3, [r7, #7]
 8012302:	2b39      	cmp	r3, #57	@ 0x39
 8012304:	d803      	bhi.n	801230e <mg_unhex_nimble+0x1e>
         : (c >= 'A' && c <= 'F') ? (unsigned char) (c - '7')
 8012306:	79fb      	ldrb	r3, [r7, #7]
 8012308:	3b30      	subs	r3, #48	@ 0x30
 801230a:	b2db      	uxtb	r3, r3
 801230c:	e00c      	b.n	8012328 <mg_unhex_nimble+0x38>
 801230e:	79fb      	ldrb	r3, [r7, #7]
 8012310:	2b40      	cmp	r3, #64	@ 0x40
 8012312:	d906      	bls.n	8012322 <mg_unhex_nimble+0x32>
 8012314:	79fb      	ldrb	r3, [r7, #7]
 8012316:	2b46      	cmp	r3, #70	@ 0x46
 8012318:	d803      	bhi.n	8012322 <mg_unhex_nimble+0x32>
 801231a:	79fb      	ldrb	r3, [r7, #7]
 801231c:	3b37      	subs	r3, #55	@ 0x37
 801231e:	b2db      	uxtb	r3, r3
 8012320:	e002      	b.n	8012328 <mg_unhex_nimble+0x38>
 8012322:	79fb      	ldrb	r3, [r7, #7]
 8012324:	3b57      	subs	r3, #87	@ 0x57
 8012326:	b2db      	uxtb	r3, r3
                                  : (unsigned char) (c - 'W');
}
 8012328:	4618      	mov	r0, r3
 801232a:	370c      	adds	r7, #12
 801232c:	46bd      	mov	sp, r7
 801232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012332:	4770      	bx	lr

08012334 <mg_unhexn>:

unsigned long mg_unhexn(const char *s, size_t len) {
 8012334:	b580      	push	{r7, lr}
 8012336:	b084      	sub	sp, #16
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
 801233c:	6039      	str	r1, [r7, #0]
  unsigned long i = 0, v = 0;
 801233e:	2300      	movs	r3, #0
 8012340:	60fb      	str	r3, [r7, #12]
 8012342:	2300      	movs	r3, #0
 8012344:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < len; i++) v <<= 4, v |= mg_unhex_nimble(((uint8_t *) s)[i]);
 8012346:	2300      	movs	r3, #0
 8012348:	60fb      	str	r3, [r7, #12]
 801234a:	e011      	b.n	8012370 <mg_unhexn+0x3c>
 801234c:	68bb      	ldr	r3, [r7, #8]
 801234e:	011b      	lsls	r3, r3, #4
 8012350:	60bb      	str	r3, [r7, #8]
 8012352:	687a      	ldr	r2, [r7, #4]
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	4413      	add	r3, r2
 8012358:	781b      	ldrb	r3, [r3, #0]
 801235a:	4618      	mov	r0, r3
 801235c:	f7ff ffc8 	bl	80122f0 <mg_unhex_nimble>
 8012360:	4603      	mov	r3, r0
 8012362:	461a      	mov	r2, r3
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	4313      	orrs	r3, r2
 8012368:	60bb      	str	r3, [r7, #8]
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	3301      	adds	r3, #1
 801236e:	60fb      	str	r3, [r7, #12]
 8012370:	68fa      	ldr	r2, [r7, #12]
 8012372:	683b      	ldr	r3, [r7, #0]
 8012374:	429a      	cmp	r2, r3
 8012376:	d3e9      	bcc.n	801234c <mg_unhexn+0x18>
  return v;
 8012378:	68bb      	ldr	r3, [r7, #8]
}
 801237a:	4618      	mov	r0, r3
 801237c:	3710      	adds	r7, #16
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}

08012382 <mg_unhex>:

void mg_unhex(const char *buf, size_t len, unsigned char *to) {
 8012382:	b580      	push	{r7, lr}
 8012384:	b086      	sub	sp, #24
 8012386:	af00      	add	r7, sp, #0
 8012388:	60f8      	str	r0, [r7, #12]
 801238a:	60b9      	str	r1, [r7, #8]
 801238c:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i += 2) {
 801238e:	2300      	movs	r3, #0
 8012390:	617b      	str	r3, [r7, #20]
 8012392:	e010      	b.n	80123b6 <mg_unhex+0x34>
    to[i >> 1] = (unsigned char) mg_unhexn(&buf[i], 2);
 8012394:	68fa      	ldr	r2, [r7, #12]
 8012396:	697b      	ldr	r3, [r7, #20]
 8012398:	4413      	add	r3, r2
 801239a:	2102      	movs	r1, #2
 801239c:	4618      	mov	r0, r3
 801239e:	f7ff ffc9 	bl	8012334 <mg_unhexn>
 80123a2:	4601      	mov	r1, r0
 80123a4:	697b      	ldr	r3, [r7, #20]
 80123a6:	085b      	lsrs	r3, r3, #1
 80123a8:	687a      	ldr	r2, [r7, #4]
 80123aa:	4413      	add	r3, r2
 80123ac:	b2ca      	uxtb	r2, r1
 80123ae:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i += 2) {
 80123b0:	697b      	ldr	r3, [r7, #20]
 80123b2:	3302      	adds	r3, #2
 80123b4:	617b      	str	r3, [r7, #20]
 80123b6:	697a      	ldr	r2, [r7, #20]
 80123b8:	68bb      	ldr	r3, [r7, #8]
 80123ba:	429a      	cmp	r2, r3
 80123bc:	d3ea      	bcc.n	8012394 <mg_unhex+0x12>
  }
}
 80123be:	bf00      	nop
 80123c0:	bf00      	nop
 80123c2:	3718      	adds	r7, #24
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bd80      	pop	{r7, pc}

080123c8 <mg_path_is_sane>:

bool mg_path_is_sane(const char *path) {
 80123c8:	b480      	push	{r7}
 80123ca:	b085      	sub	sp, #20
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
  const char *s = path;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	60fb      	str	r3, [r7, #12]
  if (path[0] == '.' && path[1] == '.') return false;  // Starts with ..
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	781b      	ldrb	r3, [r3, #0]
 80123d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80123da:	d11d      	bne.n	8012418 <mg_path_is_sane+0x50>
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	3301      	adds	r3, #1
 80123e0:	781b      	ldrb	r3, [r3, #0]
 80123e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80123e4:	d118      	bne.n	8012418 <mg_path_is_sane+0x50>
 80123e6:	2300      	movs	r3, #0
 80123e8:	e01b      	b.n	8012422 <mg_path_is_sane+0x5a>
  for (; s[0] != '\0'; s++) {
    if (s[0] == '/' || s[0] == '\\') {               // Subdir?
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	781b      	ldrb	r3, [r3, #0]
 80123ee:	2b2f      	cmp	r3, #47	@ 0x2f
 80123f0:	d003      	beq.n	80123fa <mg_path_is_sane+0x32>
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	781b      	ldrb	r3, [r3, #0]
 80123f6:	2b5c      	cmp	r3, #92	@ 0x5c
 80123f8:	d10b      	bne.n	8012412 <mg_path_is_sane+0x4a>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	3301      	adds	r3, #1
 80123fe:	781b      	ldrb	r3, [r3, #0]
 8012400:	2b2e      	cmp	r3, #46	@ 0x2e
 8012402:	d106      	bne.n	8012412 <mg_path_is_sane+0x4a>
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	3302      	adds	r3, #2
 8012408:	781b      	ldrb	r3, [r3, #0]
 801240a:	2b2e      	cmp	r3, #46	@ 0x2e
 801240c:	d101      	bne.n	8012412 <mg_path_is_sane+0x4a>
 801240e:	2300      	movs	r3, #0
 8012410:	e007      	b.n	8012422 <mg_path_is_sane+0x5a>
  for (; s[0] != '\0'; s++) {
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	3301      	adds	r3, #1
 8012416:	60fb      	str	r3, [r7, #12]
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	781b      	ldrb	r3, [r3, #0]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d1e4      	bne.n	80123ea <mg_path_is_sane+0x22>
    }
  }
  return true;
 8012420:	2301      	movs	r3, #1
}
 8012422:	4618      	mov	r0, r3
 8012424:	3714      	adds	r7, #20
 8012426:	46bd      	mov	sp, r7
 8012428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242c:	4770      	bx	lr

0801242e <mg_timer_init>:


#define MG_TIMER_CALLED 4

void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 801242e:	b480      	push	{r7}
 8012430:	b085      	sub	sp, #20
 8012432:	af00      	add	r7, sp, #0
 8012434:	60f8      	str	r0, [r7, #12]
 8012436:	60b9      	str	r1, [r7, #8]
 8012438:	e9c7 2300 	strd	r2, r3, [r7]
  t->id = 0, t->period_ms = ms, t->expire = 0;
 801243c:	68bb      	ldr	r3, [r7, #8]
 801243e:	2200      	movs	r2, #0
 8012440:	601a      	str	r2, [r3, #0]
 8012442:	68b9      	ldr	r1, [r7, #8]
 8012444:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012448:	e9c1 2302 	strd	r2, r3, [r1, #8]
 801244c:	68b9      	ldr	r1, [r7, #8]
 801244e:	f04f 0200 	mov.w	r2, #0
 8012452:	f04f 0300 	mov.w	r3, #0
 8012456:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 801245a:	68bb      	ldr	r3, [r7, #8]
 801245c:	69ba      	ldr	r2, [r7, #24]
 801245e:	619a      	str	r2, [r3, #24]
 8012460:	68bb      	ldr	r3, [r7, #8]
 8012462:	69fa      	ldr	r2, [r7, #28]
 8012464:	61da      	str	r2, [r3, #28]
 8012466:	68bb      	ldr	r3, [r7, #8]
 8012468:	6a3a      	ldr	r2, [r7, #32]
 801246a:	621a      	str	r2, [r3, #32]
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	681a      	ldr	r2, [r3, #0]
 8012470:	68bb      	ldr	r3, [r7, #8]
 8012472:	625a      	str	r2, [r3, #36]	@ 0x24
  *head = t;
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	68ba      	ldr	r2, [r7, #8]
 8012478:	601a      	str	r2, [r3, #0]
}
 801247a:	bf00      	nop
 801247c:	3714      	adds	r7, #20
 801247e:	46bd      	mov	sp, r7
 8012480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012484:	4770      	bx	lr

08012486 <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8012486:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801248a:	b086      	sub	sp, #24
 801248c:	af00      	add	r7, sp, #0
 801248e:	6178      	str	r0, [r7, #20]
 8012490:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8012494:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8012498:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801249c:	eb10 0a02 	adds.w	sl, r0, r2
 80124a0:	eb41 0b03 	adc.w	fp, r1, r3
 80124a4:	697b      	ldr	r3, [r7, #20]
 80124a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124aa:	4592      	cmp	sl, r2
 80124ac:	eb7b 0303 	sbcs.w	r3, fp, r3
 80124b0:	d206      	bcs.n	80124c0 <mg_timer_expired+0x3a>
 80124b2:	6979      	ldr	r1, [r7, #20]
 80124b4:	f04f 0200 	mov.w	r2, #0
 80124b8:	f04f 0300 	mov.w	r3, #0
 80124bc:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 80124c0:	697b      	ldr	r3, [r7, #20]
 80124c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124c6:	4313      	orrs	r3, r2
 80124c8:	d10d      	bne.n	80124e6 <mg_timer_expired+0x60>
 80124ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80124ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80124d2:	1886      	adds	r6, r0, r2
 80124d4:	603e      	str	r6, [r7, #0]
 80124d6:	eb41 0303 	adc.w	r3, r1, r3
 80124da:	607b      	str	r3, [r7, #4]
 80124dc:	697b      	ldr	r3, [r7, #20]
 80124de:	e9d7 1200 	ldrd	r1, r2, [r7]
 80124e2:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 80124e6:	697b      	ldr	r3, [r7, #20]
 80124e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80124f0:	4290      	cmp	r0, r2
 80124f2:	eb71 0303 	sbcs.w	r3, r1, r3
 80124f6:	d201      	bcs.n	80124fc <mg_timer_expired+0x76>
 80124f8:	2300      	movs	r3, #0
 80124fa:	e022      	b.n	8012542 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 80124fc:	697b      	ldr	r3, [r7, #20]
 80124fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012502:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8012506:	ebb0 0802 	subs.w	r8, r0, r2
 801250a:	eb61 0903 	sbc.w	r9, r1, r3
 801250e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012512:	4542      	cmp	r2, r8
 8012514:	eb73 0309 	sbcs.w	r3, r3, r9
 8012518:	d207      	bcs.n	801252a <mg_timer_expired+0xa4>
 801251a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801251e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012522:	1884      	adds	r4, r0, r2
 8012524:	eb41 0503 	adc.w	r5, r1, r3
 8012528:	e007      	b.n	801253a <mg_timer_expired+0xb4>
 801252a:	697b      	ldr	r3, [r7, #20]
 801252c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012530:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012534:	1884      	adds	r4, r0, r2
 8012536:	eb41 0503 	adc.w	r5, r1, r3
 801253a:	697b      	ldr	r3, [r7, #20]
 801253c:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 8012540:	2301      	movs	r3, #1
}
 8012542:	4618      	mov	r0, r3
 8012544:	3718      	adds	r7, #24
 8012546:	46bd      	mov	sp, r7
 8012548:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801254c:	4770      	bx	lr

0801254e <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 801254e:	b590      	push	{r4, r7, lr}
 8012550:	b08b      	sub	sp, #44	@ 0x2c
 8012552:	af02      	add	r7, sp, #8
 8012554:	60f8      	str	r0, [r7, #12]
 8012556:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	61fb      	str	r3, [r7, #28]
 8012560:	e054      	b.n	801260c <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8012562:	69fb      	ldr	r3, [r7, #28]
 8012564:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8012568:	4313      	orrs	r3, r2
 801256a:	d10d      	bne.n	8012588 <mg_timer_poll+0x3a>
 801256c:	69fb      	ldr	r3, [r7, #28]
 801256e:	699b      	ldr	r3, [r3, #24]
 8012570:	f003 0302 	and.w	r3, r3, #2
 8012574:	2b00      	cmp	r3, #0
 8012576:	d007      	beq.n	8012588 <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 8012578:	69fb      	ldr	r3, [r7, #28]
 801257a:	699b      	ldr	r3, [r3, #24]
 801257c:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8012580:	2b00      	cmp	r3, #0
 8012582:	d101      	bne.n	8012588 <mg_timer_poll+0x3a>
 8012584:	2301      	movs	r3, #1
 8012586:	e000      	b.n	801258a <mg_timer_poll+0x3c>
 8012588:	2300      	movs	r3, #0
 801258a:	76fb      	strb	r3, [r7, #27]
 801258c:	7efb      	ldrb	r3, [r7, #27]
 801258e:	f003 0301 	and.w	r3, r3, #1
 8012592:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8012594:	69fb      	ldr	r3, [r7, #28]
 8012596:	f103 0410 	add.w	r4, r3, #16
 801259a:	69fb      	ldr	r3, [r7, #28]
 801259c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80125a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80125a4:	e9cd 2300 	strd	r2, r3, [sp]
 80125a8:	4602      	mov	r2, r0
 80125aa:	460b      	mov	r3, r1
 80125ac:	4620      	mov	r0, r4
 80125ae:	f7ff ff6a 	bl	8012486 <mg_timer_expired>
 80125b2:	4603      	mov	r3, r0
 80125b4:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 80125b6:	69fb      	ldr	r3, [r7, #28]
 80125b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125ba:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 80125bc:	7efb      	ldrb	r3, [r7, #27]
 80125be:	f083 0301 	eor.w	r3, r3, #1
 80125c2:	b2db      	uxtb	r3, r3
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d005      	beq.n	80125d4 <mg_timer_poll+0x86>
 80125c8:	7ebb      	ldrb	r3, [r7, #26]
 80125ca:	f083 0301 	eor.w	r3, r3, #1
 80125ce:	b2db      	uxtb	r3, r3
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d118      	bne.n	8012606 <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 80125d4:	69fb      	ldr	r3, [r7, #28]
 80125d6:	699b      	ldr	r3, [r3, #24]
 80125d8:	f003 0301 	and.w	r3, r3, #1
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d105      	bne.n	80125ec <mg_timer_poll+0x9e>
 80125e0:	69fb      	ldr	r3, [r7, #28]
 80125e2:	699b      	ldr	r3, [r3, #24]
 80125e4:	f003 0304 	and.w	r3, r3, #4
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d105      	bne.n	80125f8 <mg_timer_poll+0xaa>
      t->fn(t->arg);
 80125ec:	69fb      	ldr	r3, [r7, #28]
 80125ee:	69db      	ldr	r3, [r3, #28]
 80125f0:	69fa      	ldr	r2, [r7, #28]
 80125f2:	6a12      	ldr	r2, [r2, #32]
 80125f4:	4610      	mov	r0, r2
 80125f6:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 80125f8:	69fb      	ldr	r3, [r7, #28]
 80125fa:	699b      	ldr	r3, [r3, #24]
 80125fc:	f043 0204 	orr.w	r2, r3, #4
 8012600:	69fb      	ldr	r3, [r7, #28]
 8012602:	619a      	str	r2, [r3, #24]
 8012604:	e000      	b.n	8012608 <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 8012606:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	61fb      	str	r3, [r7, #28]
 801260c:	69fb      	ldr	r3, [r7, #28]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d1a7      	bne.n	8012562 <mg_timer_poll+0x14>
  }
}
 8012612:	bf00      	nop
 8012614:	bf00      	nop
 8012616:	3724      	adds	r7, #36	@ 0x24
 8012618:	46bd      	mov	sp, r7
 801261a:	bd90      	pop	{r4, r7, pc}

0801261c <mg_tls_init>:
#line 1 "src/tls_dummy.c"
#endif


#if MG_TLS == MG_TLS_NONE
void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
 801261c:	b580      	push	{r7, lr}
 801261e:	b082      	sub	sp, #8
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
 8012624:	6039      	str	r1, [r7, #0]
  (void) opts;
  mg_error(c, "TLS is not enabled");
 8012626:	4904      	ldr	r1, [pc, #16]	@ (8012638 <mg_tls_init+0x1c>)
 8012628:	6878      	ldr	r0, [r7, #4]
 801262a:	f7f4 fb0f 	bl	8006c4c <mg_error>
}
 801262e:	bf00      	nop
 8012630:	3708      	adds	r7, #8
 8012632:	46bd      	mov	sp, r7
 8012634:	bd80      	pop	{r7, pc}
 8012636:	bf00      	nop
 8012638:	08030680 	.word	0x08030680

0801263c <mg_tls_handshake>:
void mg_tls_handshake(struct mg_connection *c) {
 801263c:	b480      	push	{r7}
 801263e:	b083      	sub	sp, #12
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
  (void) c;
}
 8012644:	bf00      	nop
 8012646:	370c      	adds	r7, #12
 8012648:	46bd      	mov	sp, r7
 801264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264e:	4770      	bx	lr

08012650 <mg_tls_free>:
void mg_tls_free(struct mg_connection *c) {
 8012650:	b480      	push	{r7}
 8012652:	b083      	sub	sp, #12
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
  (void) c;
}
 8012658:	bf00      	nop
 801265a:	370c      	adds	r7, #12
 801265c:	46bd      	mov	sp, r7
 801265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012662:	4770      	bx	lr

08012664 <mg_tls_recv>:
long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 8012664:	b480      	push	{r7}
 8012666:	b085      	sub	sp, #20
 8012668:	af00      	add	r7, sp, #0
 801266a:	60f8      	str	r0, [r7, #12]
 801266c:	60b9      	str	r1, [r7, #8]
 801266e:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d005      	beq.n	8012682 <mg_tls_recv+0x1e>
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d002      	beq.n	8012682 <mg_tls_recv+0x1e>
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d101      	bne.n	8012686 <mg_tls_recv+0x22>
 8012682:	2300      	movs	r3, #0
 8012684:	e001      	b.n	801268a <mg_tls_recv+0x26>
 8012686:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801268a:	4618      	mov	r0, r3
 801268c:	3714      	adds	r7, #20
 801268e:	46bd      	mov	sp, r7
 8012690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012694:	4770      	bx	lr

08012696 <mg_tls_send>:
long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 8012696:	b480      	push	{r7}
 8012698:	b085      	sub	sp, #20
 801269a:	af00      	add	r7, sp, #0
 801269c:	60f8      	str	r0, [r7, #12]
 801269e:	60b9      	str	r1, [r7, #8]
 80126a0:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d005      	beq.n	80126b4 <mg_tls_send+0x1e>
 80126a8:	68bb      	ldr	r3, [r7, #8]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d002      	beq.n	80126b4 <mg_tls_send+0x1e>
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d101      	bne.n	80126b8 <mg_tls_send+0x22>
 80126b4:	2300      	movs	r3, #0
 80126b6:	e001      	b.n	80126bc <mg_tls_send+0x26>
 80126b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80126bc:	4618      	mov	r0, r3
 80126be:	3714      	adds	r7, #20
 80126c0:	46bd      	mov	sp, r7
 80126c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c6:	4770      	bx	lr

080126c8 <mg_tls_pending>:
size_t mg_tls_pending(struct mg_connection *c) {
 80126c8:	b480      	push	{r7}
 80126ca:	b083      	sub	sp, #12
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
  (void) c;
  return 0;
 80126d0:	2300      	movs	r3, #0
}
 80126d2:	4618      	mov	r0, r3
 80126d4:	370c      	adds	r7, #12
 80126d6:	46bd      	mov	sp, r7
 80126d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126dc:	4770      	bx	lr

080126de <mg_tls_ctx_init>:
void mg_tls_ctx_init(struct mg_mgr *mgr) {
 80126de:	b480      	push	{r7}
 80126e0:	b083      	sub	sp, #12
 80126e2:	af00      	add	r7, sp, #0
 80126e4:	6078      	str	r0, [r7, #4]
  (void) mgr;
}
 80126e6:	bf00      	nop
 80126e8:	370c      	adds	r7, #12
 80126ea:	46bd      	mov	sp, r7
 80126ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f0:	4770      	bx	lr
	...

080126f4 <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b082      	sub	sp, #8
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80126fc:	2204      	movs	r2, #4
 80126fe:	491b      	ldr	r1, [pc, #108]	@ (801276c <mg_url_is_ssl+0x78>)
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f019 fa18 	bl	802bb36 <strncmp>
 8012706:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8012708:	2b00      	cmp	r3, #0
 801270a:	d027      	beq.n	801275c <mg_url_is_ssl+0x68>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 801270c:	2206      	movs	r2, #6
 801270e:	4918      	ldr	r1, [pc, #96]	@ (8012770 <mg_url_is_ssl+0x7c>)
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f019 fa10 	bl	802bb36 <strncmp>
 8012716:	4603      	mov	r3, r0
 8012718:	2b00      	cmp	r3, #0
 801271a:	d01f      	beq.n	801275c <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 801271c:	2206      	movs	r2, #6
 801271e:	4915      	ldr	r1, [pc, #84]	@ (8012774 <mg_url_is_ssl+0x80>)
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f019 fa08 	bl	802bb36 <strncmp>
 8012726:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8012728:	2b00      	cmp	r3, #0
 801272a:	d017      	beq.n	801275c <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 801272c:	2204      	movs	r2, #4
 801272e:	4912      	ldr	r1, [pc, #72]	@ (8012778 <mg_url_is_ssl+0x84>)
 8012730:	6878      	ldr	r0, [r7, #4]
 8012732:	f019 fa00 	bl	802bb36 <strncmp>
 8012736:	4603      	mov	r3, r0
 8012738:	2b00      	cmp	r3, #0
 801273a:	d00f      	beq.n	801275c <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 801273c:	2204      	movs	r2, #4
 801273e:	490f      	ldr	r1, [pc, #60]	@ (801277c <mg_url_is_ssl+0x88>)
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f019 f9f8 	bl	802bb36 <strncmp>
 8012746:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8012748:	2b00      	cmp	r3, #0
 801274a:	d007      	beq.n	801275c <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 801274c:	2205      	movs	r2, #5
 801274e:	490c      	ldr	r1, [pc, #48]	@ (8012780 <mg_url_is_ssl+0x8c>)
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f019 f9f0 	bl	802bb36 <strncmp>
 8012756:	4603      	mov	r3, r0
 8012758:	2b00      	cmp	r3, #0
 801275a:	d101      	bne.n	8012760 <mg_url_is_ssl+0x6c>
 801275c:	2301      	movs	r3, #1
 801275e:	e000      	b.n	8012762 <mg_url_is_ssl+0x6e>
 8012760:	2300      	movs	r3, #0
}
 8012762:	4618      	mov	r0, r3
 8012764:	3708      	adds	r7, #8
 8012766:	46bd      	mov	sp, r7
 8012768:	bd80      	pop	{r7, pc}
 801276a:	bf00      	nop
 801276c:	08030694 	.word	0x08030694
 8012770:	0803069c 	.word	0x0803069c
 8012774:	080306a4 	.word	0x080306a4
 8012778:	080306ac 	.word	0x080306ac
 801277c:	080306b4 	.word	0x080306b4
 8012780:	080306bc 	.word	0x080306bc

08012784 <urlparse>:

static struct url urlparse(const char *url) {
 8012784:	b5b0      	push	{r4, r5, r7, lr}
 8012786:	b08a      	sub	sp, #40	@ 0x28
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
 801278c:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 801278e:	f107 0308 	add.w	r3, r7, #8
 8012792:	221c      	movs	r2, #28
 8012794:	2100      	movs	r1, #0
 8012796:	4618      	mov	r0, r3
 8012798:	f019 f9b8 	bl	802bb0c <memset>
  for (i = 0; url[i] != '\0'; i++) {
 801279c:	2300      	movs	r3, #0
 801279e:	627b      	str	r3, [r7, #36]	@ 0x24
 80127a0:	e05b      	b.n	801285a <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 80127a2:	683a      	ldr	r2, [r7, #0]
 80127a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127a6:	4413      	add	r3, r2
 80127a8:	781b      	ldrb	r3, [r3, #0]
 80127aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80127ac:	d112      	bne.n	80127d4 <urlparse+0x50>
 80127ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d00f      	beq.n	80127d4 <urlparse+0x50>
 80127b4:	697b      	ldr	r3, [r7, #20]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d10c      	bne.n	80127d4 <urlparse+0x50>
 80127ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127bc:	3b01      	subs	r3, #1
 80127be:	683a      	ldr	r2, [r7, #0]
 80127c0:	4413      	add	r3, r2
 80127c2:	781b      	ldrb	r3, [r3, #0]
 80127c4:	2b2f      	cmp	r3, #47	@ 0x2f
 80127c6:	d105      	bne.n	80127d4 <urlparse+0x50>
      u.host = i + 1;
 80127c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127ca:	3301      	adds	r3, #1
 80127cc:	617b      	str	r3, [r7, #20]
      u.port = 0;
 80127ce:	2300      	movs	r3, #0
 80127d0:	61bb      	str	r3, [r7, #24]
 80127d2:	e03f      	b.n	8012854 <urlparse+0xd0>
    } else if (url[i] == ']') {
 80127d4:	683a      	ldr	r2, [r7, #0]
 80127d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127d8:	4413      	add	r3, r2
 80127da:	781b      	ldrb	r3, [r3, #0]
 80127dc:	2b5d      	cmp	r3, #93	@ 0x5d
 80127de:	d102      	bne.n	80127e6 <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 80127e0:	2300      	movs	r3, #0
 80127e2:	61bb      	str	r3, [r7, #24]
 80127e4:	e036      	b.n	8012854 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 80127e6:	683a      	ldr	r2, [r7, #0]
 80127e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127ea:	4413      	add	r3, r2
 80127ec:	781b      	ldrb	r3, [r3, #0]
 80127ee:	2b3a      	cmp	r3, #58	@ 0x3a
 80127f0:	d109      	bne.n	8012806 <urlparse+0x82>
 80127f2:	69bb      	ldr	r3, [r7, #24]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d106      	bne.n	8012806 <urlparse+0x82>
 80127f8:	69fb      	ldr	r3, [r7, #28]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d103      	bne.n	8012806 <urlparse+0x82>
      u.port = i + 1;
 80127fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012800:	3301      	adds	r3, #1
 8012802:	61bb      	str	r3, [r7, #24]
 8012804:	e026      	b.n	8012854 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8012806:	683a      	ldr	r2, [r7, #0]
 8012808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801280a:	4413      	add	r3, r2
 801280c:	781b      	ldrb	r3, [r3, #0]
 801280e:	2b40      	cmp	r3, #64	@ 0x40
 8012810:	d112      	bne.n	8012838 <urlparse+0xb4>
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d10f      	bne.n	8012838 <urlparse+0xb4>
 8012818:	693b      	ldr	r3, [r7, #16]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d10c      	bne.n	8012838 <urlparse+0xb4>
 801281e:	69fb      	ldr	r3, [r7, #28]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d109      	bne.n	8012838 <urlparse+0xb4>
      u.user = u.host;
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 8012828:	69bb      	ldr	r3, [r7, #24]
 801282a:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 801282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801282e:	3301      	adds	r3, #1
 8012830:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8012832:	2300      	movs	r3, #0
 8012834:	61bb      	str	r3, [r7, #24]
 8012836:	e00d      	b.n	8012854 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 8012838:	683a      	ldr	r2, [r7, #0]
 801283a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801283c:	4413      	add	r3, r2
 801283e:	781b      	ldrb	r3, [r3, #0]
 8012840:	2b2f      	cmp	r3, #47	@ 0x2f
 8012842:	d107      	bne.n	8012854 <urlparse+0xd0>
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d004      	beq.n	8012854 <urlparse+0xd0>
 801284a:	69fb      	ldr	r3, [r7, #28]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d101      	bne.n	8012854 <urlparse+0xd0>
      u.uri = i;
 8012850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012852:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8012854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012856:	3301      	adds	r3, #1
 8012858:	627b      	str	r3, [r7, #36]	@ 0x24
 801285a:	683a      	ldr	r2, [r7, #0]
 801285c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801285e:	4413      	add	r3, r2
 8012860:	781b      	ldrb	r3, [r3, #0]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d19d      	bne.n	80127a2 <urlparse+0x1e>
    }
  }
  u.end = i;
 8012866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012868:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	461d      	mov	r5, r3
 801286e:	f107 0408 	add.w	r4, r7, #8
 8012872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012876:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801287a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 801287e:	6878      	ldr	r0, [r7, #4]
 8012880:	3728      	adds	r7, #40	@ 0x28
 8012882:	46bd      	mov	sp, r7
 8012884:	bdb0      	pop	{r4, r5, r7, pc}

08012886 <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 8012886:	b580      	push	{r7, lr}
 8012888:	b08c      	sub	sp, #48	@ 0x30
 801288a:	af00      	add	r7, sp, #0
 801288c:	6078      	str	r0, [r7, #4]
 801288e:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 8012890:	f107 0310 	add.w	r3, r7, #16
 8012894:	6839      	ldr	r1, [r7, #0]
 8012896:	4618      	mov	r0, r3
 8012898:	f7ff ff74 	bl	8012784 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 801289c:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d004      	beq.n	80128ac <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 80128a2:	6a3a      	ldr	r2, [r7, #32]
 80128a4:	69fb      	ldr	r3, [r7, #28]
 80128a6:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 80128a8:	3b01      	subs	r3, #1
 80128aa:	e009      	b.n	80128c0 <mg_url_host+0x3a>
 80128ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                     : u.end - u.host;
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d003      	beq.n	80128ba <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 80128b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80128b4:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 80128b6:	1ad3      	subs	r3, r2, r3
 80128b8:	e002      	b.n	80128c0 <mg_url_host+0x3a>
 80128ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80128bc:	69fb      	ldr	r3, [r7, #28]
 80128be:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 80128c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 80128c2:	69fb      	ldr	r3, [r7, #28]
 80128c4:	683a      	ldr	r2, [r7, #0]
 80128c6:	18d1      	adds	r1, r2, r3
 80128c8:	f107 0308 	add.w	r3, r7, #8
 80128cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80128ce:	4618      	mov	r0, r3
 80128d0:	f7ff fa13 	bl	8011cfa <mg_str_n>
  return s;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	461a      	mov	r2, r3
 80128d8:	f107 0308 	add.w	r3, r7, #8
 80128dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80128e0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80128e4:	6878      	ldr	r0, [r7, #4]
 80128e6:	3730      	adds	r7, #48	@ 0x30
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}

080128ec <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b08a      	sub	sp, #40	@ 0x28
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 80128f4:	f107 0308 	add.w	r3, r7, #8
 80128f8:	6879      	ldr	r1, [r7, #4]
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7ff ff42 	bl	8012784 <urlparse>
  unsigned short port = 0;
 8012900:	2300      	movs	r3, #0
 8012902:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8012904:	2205      	movs	r2, #5
 8012906:	4925      	ldr	r1, [pc, #148]	@ (801299c <mg_url_port+0xb0>)
 8012908:	6878      	ldr	r0, [r7, #4]
 801290a:	f019 f914 	bl	802bb36 <strncmp>
 801290e:	4603      	mov	r3, r0
 8012910:	2b00      	cmp	r3, #0
 8012912:	d007      	beq.n	8012924 <mg_url_port+0x38>
 8012914:	2203      	movs	r2, #3
 8012916:	4922      	ldr	r1, [pc, #136]	@ (80129a0 <mg_url_port+0xb4>)
 8012918:	6878      	ldr	r0, [r7, #4]
 801291a:	f019 f90c 	bl	802bb36 <strncmp>
 801291e:	4603      	mov	r3, r0
 8012920:	2b00      	cmp	r3, #0
 8012922:	d101      	bne.n	8012928 <mg_url_port+0x3c>
 8012924:	2350      	movs	r3, #80	@ 0x50
 8012926:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8012928:	2204      	movs	r2, #4
 801292a:	491e      	ldr	r1, [pc, #120]	@ (80129a4 <mg_url_port+0xb8>)
 801292c:	6878      	ldr	r0, [r7, #4]
 801292e:	f019 f902 	bl	802bb36 <strncmp>
 8012932:	4603      	mov	r3, r0
 8012934:	2b00      	cmp	r3, #0
 8012936:	d007      	beq.n	8012948 <mg_url_port+0x5c>
 8012938:	2206      	movs	r2, #6
 801293a:	491b      	ldr	r1, [pc, #108]	@ (80129a8 <mg_url_port+0xbc>)
 801293c:	6878      	ldr	r0, [r7, #4]
 801293e:	f019 f8fa 	bl	802bb36 <strncmp>
 8012942:	4603      	mov	r3, r0
 8012944:	2b00      	cmp	r3, #0
 8012946:	d102      	bne.n	801294e <mg_url_port+0x62>
    port = 443;
 8012948:	f240 13bb 	movw	r3, #443	@ 0x1bb
 801294c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 801294e:	2205      	movs	r2, #5
 8012950:	4916      	ldr	r1, [pc, #88]	@ (80129ac <mg_url_port+0xc0>)
 8012952:	6878      	ldr	r0, [r7, #4]
 8012954:	f019 f8ef 	bl	802bb36 <strncmp>
 8012958:	4603      	mov	r3, r0
 801295a:	2b00      	cmp	r3, #0
 801295c:	d102      	bne.n	8012964 <mg_url_port+0x78>
 801295e:	f240 735b 	movw	r3, #1883	@ 0x75b
 8012962:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8012964:	2206      	movs	r2, #6
 8012966:	4912      	ldr	r1, [pc, #72]	@ (80129b0 <mg_url_port+0xc4>)
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	f019 f8e4 	bl	802bb36 <strncmp>
 801296e:	4603      	mov	r3, r0
 8012970:	2b00      	cmp	r3, #0
 8012972:	d102      	bne.n	801297a <mg_url_port+0x8e>
 8012974:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 8012978:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 801297a:	69bb      	ldr	r3, [r7, #24]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d007      	beq.n	8012990 <mg_url_port+0xa4>
 8012980:	69bb      	ldr	r3, [r7, #24]
 8012982:	687a      	ldr	r2, [r7, #4]
 8012984:	4413      	add	r3, r2
 8012986:	4618      	mov	r0, r3
 8012988:	f017 fe64 	bl	802a654 <atoi>
 801298c:	4603      	mov	r3, r0
 801298e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  return port;
 8012990:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8012992:	4618      	mov	r0, r3
 8012994:	3728      	adds	r7, #40	@ 0x28
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}
 801299a:	bf00      	nop
 801299c:	080306c4 	.word	0x080306c4
 80129a0:	080306cc 	.word	0x080306cc
 80129a4:	08030694 	.word	0x08030694
 80129a8:	0803069c 	.word	0x0803069c
 80129ac:	080306d0 	.word	0x080306d0
 80129b0:	080306a4 	.word	0x080306a4

080129b4 <mg_bzero>:
#endif


// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
void mg_bzero(volatile unsigned char *buf, size_t len) {
 80129b4:	b480      	push	{r7}
 80129b6:	b083      	sub	sp, #12
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
 80129bc:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d00a      	beq.n	80129da <mg_bzero+0x26>
    while (len--) *buf++ = 0;
 80129c4:	e004      	b.n	80129d0 <mg_bzero+0x1c>
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	1c5a      	adds	r2, r3, #1
 80129ca:	607a      	str	r2, [r7, #4]
 80129cc:	2200      	movs	r2, #0
 80129ce:	701a      	strb	r2, [r3, #0]
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	1e5a      	subs	r2, r3, #1
 80129d4:	603a      	str	r2, [r7, #0]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d1f5      	bne.n	80129c6 <mg_bzero+0x12>
  }
}
 80129da:	bf00      	nop
 80129dc:	370c      	adds	r7, #12
 80129de:	46bd      	mov	sp, r7
 80129e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e4:	4770      	bx	lr

080129e6 <mg_ntohl>:
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
}

uint32_t mg_ntohl(uint32_t net) {
 80129e6:	b480      	push	{r7}
 80129e8:	b085      	sub	sp, #20
 80129ea:	af00      	add	r7, sp, #0
 80129ec:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 80129ee:	2300      	movs	r3, #0
 80129f0:	60fb      	str	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 80129f6:	7bfb      	ldrb	r3, [r7, #15]
 80129f8:	461a      	mov	r2, r3
 80129fa:	7bbb      	ldrb	r3, [r7, #14]
 80129fc:	021b      	lsls	r3, r3, #8
 80129fe:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8012a00:	7b7b      	ldrb	r3, [r7, #13]
 8012a02:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8012a04:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8012a06:	7b3b      	ldrb	r3, [r7, #12]
 8012a08:	061b      	lsls	r3, r3, #24
 8012a0a:	4313      	orrs	r3, r2
}
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	3714      	adds	r7, #20
 8012a10:	46bd      	mov	sp, r7
 8012a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a16:	4770      	bx	lr

08012a18 <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 8012a18:	b480      	push	{r7}
 8012a1a:	b085      	sub	sp, #20
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	4603      	mov	r3, r0
 8012a20:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 8012a22:	2300      	movs	r3, #0
 8012a24:	81bb      	strh	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 8012a26:	88fb      	ldrh	r3, [r7, #6]
 8012a28:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8012a2a:	7b7b      	ldrb	r3, [r7, #13]
 8012a2c:	b21a      	sxth	r2, r3
 8012a2e:	7b3b      	ldrb	r3, [r7, #12]
 8012a30:	021b      	lsls	r3, r3, #8
 8012a32:	b21b      	sxth	r3, r3
 8012a34:	4313      	orrs	r3, r2
 8012a36:	b21b      	sxth	r3, r3
 8012a38:	b29b      	uxth	r3, r3
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	3714      	adds	r7, #20
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a44:	4770      	bx	lr
	...

08012a48 <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8012a48:	b480      	push	{r7}
 8012a4a:	b087      	sub	sp, #28
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	60f8      	str	r0, [r7, #12]
 8012a50:	60b9      	str	r1, [r7, #8]
 8012a52:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	43db      	mvns	r3, r3
 8012a58:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8012a5a:	e01f      	b.n	8012a9c <mg_crc32+0x54>
    uint8_t byte = *(uint8_t *) buf++;
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	1c5a      	adds	r2, r3, #1
 8012a60:	60ba      	str	r2, [r7, #8]
 8012a62:	781b      	ldrb	r3, [r3, #0]
 8012a64:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ byte) & 0x0F] ^ (crc >> 4);
 8012a66:	7dfa      	ldrb	r2, [r7, #23]
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	4053      	eors	r3, r2
 8012a6c:	f003 030f 	and.w	r3, r3, #15
 8012a70:	4a11      	ldr	r2, [pc, #68]	@ (8012ab8 <mg_crc32+0x70>)
 8012a72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	091b      	lsrs	r3, r3, #4
 8012a7a:	4053      	eors	r3, r2
 8012a7c:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (byte >> 4)) & 0x0F] ^ (crc >> 4);
 8012a7e:	7dfb      	ldrb	r3, [r7, #23]
 8012a80:	091b      	lsrs	r3, r3, #4
 8012a82:	b2db      	uxtb	r3, r3
 8012a84:	461a      	mov	r2, r3
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	4053      	eors	r3, r2
 8012a8a:	f003 030f 	and.w	r3, r3, #15
 8012a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8012ab8 <mg_crc32+0x70>)
 8012a90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	091b      	lsrs	r3, r3, #4
 8012a98:	4053      	eors	r3, r2
 8012a9a:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	1e5a      	subs	r2, r3, #1
 8012aa0:	607a      	str	r2, [r7, #4]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d1da      	bne.n	8012a5c <mg_crc32+0x14>
  }
  return ~crc;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	43db      	mvns	r3, r3
}
 8012aaa:	4618      	mov	r0, r3
 8012aac:	371c      	adds	r7, #28
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab4:	4770      	bx	lr
 8012ab6:	bf00      	nop
 8012ab8:	0803284c 	.word	0x0803284c

08012abc <mg_phy_id_to_str>:
  MG_PHY_LAN87x_REG_SCSR = 31,
  MG_PHY_RTL8201_REG_RMSR = 16,  // in page 7
  MG_PHY_RTL8201_REG_PAGESEL = 31
};

static const char *mg_phy_id_to_str(uint16_t id1, uint16_t id2) {
 8012abc:	b480      	push	{r7}
 8012abe:	b083      	sub	sp, #12
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	460a      	mov	r2, r1
 8012ac6:	80fb      	strh	r3, [r7, #6]
 8012ac8:	4613      	mov	r3, r2
 8012aca:	80bb      	strh	r3, [r7, #4]
  switch (id1) {
 8012acc:	88fb      	ldrh	r3, [r7, #6]
 8012ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012ad2:	d00b      	beq.n	8012aec <mg_phy_id_to_str+0x30>
 8012ad4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012ad8:	dc17      	bgt.n	8012b0a <mg_phy_id_to_str+0x4e>
 8012ada:	2b22      	cmp	r3, #34	@ 0x22
 8012adc:	d00f      	beq.n	8012afe <mg_phy_id_to_str+0x42>
 8012ade:	2b22      	cmp	r3, #34	@ 0x22
 8012ae0:	dc13      	bgt.n	8012b0a <mg_phy_id_to_str+0x4e>
 8012ae2:	2b07      	cmp	r3, #7
 8012ae4:	d00d      	beq.n	8012b02 <mg_phy_id_to_str+0x46>
 8012ae6:	2b1c      	cmp	r3, #28
 8012ae8:	d00d      	beq.n	8012b06 <mg_phy_id_to_str+0x4a>
 8012aea:	e00e      	b.n	8012b0a <mg_phy_id_to_str+0x4e>
    case MG_PHY_DP83x:
      switch (id2) {
 8012aec:	88bb      	ldrh	r3, [r7, #4]
 8012aee:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8012af2:	4293      	cmp	r3, r2
 8012af4:	d101      	bne.n	8012afa <mg_phy_id_to_str+0x3e>
        case MG_PHY_DP83867:
          return "DP83867";
 8012af6:	4b08      	ldr	r3, [pc, #32]	@ (8012b18 <mg_phy_id_to_str+0x5c>)
 8012af8:	e008      	b.n	8012b0c <mg_phy_id_to_str+0x50>
        default:
          return "DP83x";
 8012afa:	4b08      	ldr	r3, [pc, #32]	@ (8012b1c <mg_phy_id_to_str+0x60>)
 8012afc:	e006      	b.n	8012b0c <mg_phy_id_to_str+0x50>
      }
    case MG_PHY_KSZ8x:
      return "KSZ8x";
 8012afe:	4b08      	ldr	r3, [pc, #32]	@ (8012b20 <mg_phy_id_to_str+0x64>)
 8012b00:	e004      	b.n	8012b0c <mg_phy_id_to_str+0x50>
    case MG_PHY_LAN87x:
      return "LAN87x";
 8012b02:	4b08      	ldr	r3, [pc, #32]	@ (8012b24 <mg_phy_id_to_str+0x68>)
 8012b04:	e002      	b.n	8012b0c <mg_phy_id_to_str+0x50>
    case MG_PHY_RTL8201:
      return "RTL8201";
 8012b06:	4b08      	ldr	r3, [pc, #32]	@ (8012b28 <mg_phy_id_to_str+0x6c>)
 8012b08:	e000      	b.n	8012b0c <mg_phy_id_to_str+0x50>
    default:
      return "unknown";
 8012b0a:	4b08      	ldr	r3, [pc, #32]	@ (8012b2c <mg_phy_id_to_str+0x70>)
  }
  (void) id2;
}
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	370c      	adds	r7, #12
 8012b10:	46bd      	mov	sp, r7
 8012b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b16:	4770      	bx	lr
 8012b18:	080308d0 	.word	0x080308d0
 8012b1c:	080308d8 	.word	0x080308d8
 8012b20:	080308e0 	.word	0x080308e0
 8012b24:	080308e8 	.word	0x080308e8
 8012b28:	080308f0 	.word	0x080308f0
 8012b2c:	080308f8 	.word	0x080308f8

08012b30 <mg_phy_init>:

void mg_phy_init(struct mg_phy *phy, uint8_t phy_addr, uint8_t config) {
 8012b30:	b5b0      	push	{r4, r5, r7, lr}
 8012b32:	b084      	sub	sp, #16
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
 8012b38:	460b      	mov	r3, r1
 8012b3a:	70fb      	strb	r3, [r7, #3]
 8012b3c:	4613      	mov	r3, r2
 8012b3e:	70bb      	strb	r3, [r7, #2]
  uint16_t id1, id2;
  phy->write_reg(phy_addr, MG_PHY_REG_BCR, MG_BIT(15));  // Reset PHY
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	685b      	ldr	r3, [r3, #4]
 8012b44:	78f8      	ldrb	r0, [r7, #3]
 8012b46:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8012b4a:	2100      	movs	r1, #0
 8012b4c:	4798      	blx	r3
  phy->write_reg(phy_addr, MG_PHY_REG_BCR, MG_BIT(12));  // Autonegotiation
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	685b      	ldr	r3, [r3, #4]
 8012b52:	78f8      	ldrb	r0, [r7, #3]
 8012b54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8012b58:	2100      	movs	r1, #0
 8012b5a:	4798      	blx	r3

  id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	78fa      	ldrb	r2, [r7, #3]
 8012b62:	2102      	movs	r1, #2
 8012b64:	4610      	mov	r0, r2
 8012b66:	4798      	blx	r3
 8012b68:	4603      	mov	r3, r0
 8012b6a:	81fb      	strh	r3, [r7, #14]
  id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	78fa      	ldrb	r2, [r7, #3]
 8012b72:	2103      	movs	r1, #3
 8012b74:	4610      	mov	r0, r2
 8012b76:	4798      	blx	r3
 8012b78:	4603      	mov	r3, r0
 8012b7a:	81bb      	strh	r3, [r7, #12]
  MG_INFO(("PHY ID: %#04x %#04x (%s)", id1, id2, mg_phy_id_to_str(id1, id2)));
 8012b7c:	4b25      	ldr	r3, [pc, #148]	@ (8012c14 <mg_phy_init+0xe4>)
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	2b01      	cmp	r3, #1
 8012b82:	dd14      	ble.n	8012bae <mg_phy_init+0x7e>
 8012b84:	4b24      	ldr	r3, [pc, #144]	@ (8012c18 <mg_phy_init+0xe8>)
 8012b86:	f643 5201 	movw	r2, #15617	@ 0x3d01
 8012b8a:	4924      	ldr	r1, [pc, #144]	@ (8012c1c <mg_phy_init+0xec>)
 8012b8c:	2002      	movs	r0, #2
 8012b8e:	f7f9 fa31 	bl	800bff4 <mg_log_prefix>
 8012b92:	89fc      	ldrh	r4, [r7, #14]
 8012b94:	89bd      	ldrh	r5, [r7, #12]
 8012b96:	89ba      	ldrh	r2, [r7, #12]
 8012b98:	89fb      	ldrh	r3, [r7, #14]
 8012b9a:	4611      	mov	r1, r2
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f7ff ff8d 	bl	8012abc <mg_phy_id_to_str>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	462a      	mov	r2, r5
 8012ba6:	4621      	mov	r1, r4
 8012ba8:	481d      	ldr	r0, [pc, #116]	@ (8012c20 <mg_phy_init+0xf0>)
 8012baa:	f7f9 fa73 	bl	800c094 <mg_log>

  if (config & MG_PHY_CLOCKS_MAC) {
 8012bae:	78bb      	ldrb	r3, [r7, #2]
 8012bb0:	f003 0302 	and.w	r3, r3, #2
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d119      	bne.n	8012bec <mg_phy_init+0xbc>
    // Use PHY crystal oscillator (preserve defaults)
    // nothing to do
  } else {  // MAC clocks PHY, PHY has no xtal
    // Enable 50 MHz external ref clock at XI (preserve defaults)
    if (id1 == MG_PHY_DP83x && id2 != MG_PHY_DP83867) {
 8012bb8:	89fb      	ldrh	r3, [r7, #14]
 8012bba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012bbe:	d10b      	bne.n	8012bd8 <mg_phy_init+0xa8>
 8012bc0:	89bb      	ldrh	r3, [r7, #12]
 8012bc2:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8012bc6:	4293      	cmp	r3, r2
 8012bc8:	d006      	beq.n	8012bd8 <mg_phy_init+0xa8>
      phy->write_reg(phy_addr, MG_PHY_DP83x_REG_RCSR, MG_BIT(7) | MG_BIT(0));
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	685b      	ldr	r3, [r3, #4]
 8012bce:	78f8      	ldrb	r0, [r7, #3]
 8012bd0:	2281      	movs	r2, #129	@ 0x81
 8012bd2:	2117      	movs	r1, #23
 8012bd4:	4798      	blx	r3
 8012bd6:	e009      	b.n	8012bec <mg_phy_init+0xbc>
    } else if (id1 == MG_PHY_KSZ8x) {
 8012bd8:	89fb      	ldrh	r3, [r7, #14]
 8012bda:	2b22      	cmp	r3, #34	@ 0x22
 8012bdc:	d106      	bne.n	8012bec <mg_phy_init+0xbc>
      phy->write_reg(phy_addr, MG_PHY_KSZ8x_REG_PC2R,
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	685b      	ldr	r3, [r3, #4]
 8012be2:	78f8      	ldrb	r0, [r7, #3]
 8012be4:	f248 1280 	movw	r2, #33152	@ 0x8180
 8012be8:	211f      	movs	r1, #31
 8012bea:	4798      	blx	r3
      phy->write_reg(phy_addr, MG_PHY_RTL8201_REG_PAGESEL, 0);  // Select page 0
#endif
    }
  }

  if (config & MG_PHY_LEDS_ACTIVE_HIGH && id1 == MG_PHY_DP83x) {
 8012bec:	78bb      	ldrb	r3, [r7, #2]
 8012bee:	f003 0301 	and.w	r3, r3, #1
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d00a      	beq.n	8012c0c <mg_phy_init+0xdc>
 8012bf6:	89fb      	ldrh	r3, [r7, #14]
 8012bf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012bfc:	d106      	bne.n	8012c0c <mg_phy_init+0xdc>
    phy->write_reg(phy_addr, MG_PHY_DP83x_REG_LEDCR,
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	685b      	ldr	r3, [r3, #4]
 8012c02:	78f8      	ldrb	r0, [r7, #3]
 8012c04:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012c08:	2118      	movs	r1, #24
 8012c0a:	4798      	blx	r3
                   MG_BIT(9) | MG_BIT(7));  // LED status, active high
  }  // Other PHYs do not support this feature
}
 8012c0c:	bf00      	nop
 8012c0e:	3710      	adds	r7, #16
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bdb0      	pop	{r4, r5, r7, pc}
 8012c14:	20000244 	.word	0x20000244
 8012c18:	0803288c 	.word	0x0803288c
 8012c1c:	0802efcc 	.word	0x0802efcc
 8012c20:	08030900 	.word	0x08030900

08012c24 <mg_phy_up>:

bool mg_phy_up(struct mg_phy *phy, uint8_t phy_addr, bool *full_duplex,
               uint8_t *speed) {
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b08a      	sub	sp, #40	@ 0x28
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	60f8      	str	r0, [r7, #12]
 8012c2c:	607a      	str	r2, [r7, #4]
 8012c2e:	603b      	str	r3, [r7, #0]
 8012c30:	460b      	mov	r3, r1
 8012c32:	72fb      	strb	r3, [r7, #11]
  bool up = false;
 8012c34:	2300      	movs	r3, #0
 8012c36:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint16_t bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	7afa      	ldrb	r2, [r7, #11]
 8012c40:	2101      	movs	r1, #1
 8012c42:	4610      	mov	r0, r2
 8012c44:	4798      	blx	r3
 8012c46:	4603      	mov	r3, r0
 8012c48:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if ((bsr & MG_BIT(5)) && !(bsr & MG_BIT(2)))  // some PHYs latch down events
 8012c4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012c4c:	f003 0320 	and.w	r3, r3, #32
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d00c      	beq.n	8012c6e <mg_phy_up+0x4a>
 8012c54:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012c56:	f003 0304 	and.w	r3, r3, #4
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d107      	bne.n	8012c6e <mg_phy_up+0x4a>
    bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);  // read again
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	7afa      	ldrb	r2, [r7, #11]
 8012c64:	2101      	movs	r1, #1
 8012c66:	4610      	mov	r0, r2
 8012c68:	4798      	blx	r3
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  up = bsr & MG_BIT(2);
 8012c6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012c70:	f003 0304 	and.w	r3, r3, #4
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	bf14      	ite	ne
 8012c78:	2301      	movne	r3, #1
 8012c7a:	2300      	moveq	r3, #0
 8012c7c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (up && full_duplex != NULL && speed != NULL) {
 8012c80:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	f000 80c2 	beq.w	8012e0e <mg_phy_up+0x1ea>
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	f000 80be 	beq.w	8012e0e <mg_phy_up+0x1ea>
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	f000 80ba 	beq.w	8012e0e <mg_phy_up+0x1ea>
    uint16_t id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	7afa      	ldrb	r2, [r7, #11]
 8012ca0:	2102      	movs	r1, #2
 8012ca2:	4610      	mov	r0, r2
 8012ca4:	4798      	blx	r3
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (id1 == MG_PHY_DP83x) {
 8012caa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012cb0:	d14b      	bne.n	8012d4a <mg_phy_up+0x126>
      uint16_t id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	7afa      	ldrb	r2, [r7, #11]
 8012cb8:	2103      	movs	r1, #3
 8012cba:	4610      	mov	r0, r2
 8012cbc:	4798      	blx	r3
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	837b      	strh	r3, [r7, #26]
      if (id2 == MG_PHY_DP83867) {
 8012cc2:	8b7b      	ldrh	r3, [r7, #26]
 8012cc4:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8012cc8:	4293      	cmp	r3, r2
 8012cca:	d120      	bne.n	8012d0e <mg_phy_up+0xea>
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83867_REG_PHYSTS);
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	7afa      	ldrb	r2, [r7, #11]
 8012cd2:	2111      	movs	r1, #17
 8012cd4:	4610      	mov	r0, r2
 8012cd6:	4798      	blx	r3
 8012cd8:	4603      	mov	r3, r0
 8012cda:	82fb      	strh	r3, [r7, #22]
        *full_duplex = physts & MG_BIT(13);
 8012cdc:	8afb      	ldrh	r3, [r7, #22]
 8012cde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	bf14      	ite	ne
 8012ce6:	2301      	movne	r3, #1
 8012ce8:	2300      	moveq	r3, #0
 8012cea:	b2da      	uxtb	r2, r3
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 8012cf0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	db06      	blt.n	8012d06 <mg_phy_up+0xe2>
                 : (physts & MG_BIT(14)) ? MG_PHY_SPEED_100M
                                         : MG_PHY_SPEED_10M;
 8012cf8:	8afb      	ldrh	r3, [r7, #22]
 8012cfa:	0b9b      	lsrs	r3, r3, #14
 8012cfc:	b2db      	uxtb	r3, r3
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 8012cfe:	f003 0301 	and.w	r3, r3, #1
 8012d02:	b2da      	uxtb	r2, r3
 8012d04:	e000      	b.n	8012d08 <mg_phy_up+0xe4>
 8012d06:	2202      	movs	r2, #2
 8012d08:	683b      	ldr	r3, [r7, #0]
 8012d0a:	701a      	strb	r2, [r3, #0]
 8012d0c:	e07f      	b.n	8012e0e <mg_phy_up+0x1ea>
      } else {
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83x_REG_PHYSTS);
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	7afa      	ldrb	r2, [r7, #11]
 8012d14:	2110      	movs	r1, #16
 8012d16:	4610      	mov	r0, r2
 8012d18:	4798      	blx	r3
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	833b      	strh	r3, [r7, #24]
        *full_duplex = physts & MG_BIT(2);
 8012d1e:	8b3b      	ldrh	r3, [r7, #24]
 8012d20:	f003 0304 	and.w	r3, r3, #4
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	bf14      	ite	ne
 8012d28:	2301      	movne	r3, #1
 8012d2a:	2300      	moveq	r3, #0
 8012d2c:	b2da      	uxtb	r2, r3
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(1)) ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 8012d32:	8b3b      	ldrh	r3, [r7, #24]
 8012d34:	f003 0302 	and.w	r3, r3, #2
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	bf0c      	ite	eq
 8012d3c:	2301      	moveq	r3, #1
 8012d3e:	2300      	movne	r3, #0
 8012d40:	b2db      	uxtb	r3, r3
 8012d42:	461a      	mov	r2, r3
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	701a      	strb	r2, [r3, #0]
 8012d48:	e061      	b.n	8012e0e <mg_phy_up+0x1ea>
      }
    } else if (id1 == MG_PHY_KSZ8x) {
 8012d4a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012d4c:	2b22      	cmp	r3, #34	@ 0x22
 8012d4e:	d11d      	bne.n	8012d8c <mg_phy_up+0x168>
      uint16_t pc1r = phy->read_reg(phy_addr, MG_PHY_KSZ8x_REG_PC1R);
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	7afa      	ldrb	r2, [r7, #11]
 8012d56:	211e      	movs	r1, #30
 8012d58:	4610      	mov	r0, r2
 8012d5a:	4798      	blx	r3
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	83bb      	strh	r3, [r7, #28]
      *full_duplex = pc1r & MG_BIT(2);
 8012d60:	8bbb      	ldrh	r3, [r7, #28]
 8012d62:	f003 0304 	and.w	r3, r3, #4
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	bf14      	ite	ne
 8012d6a:	2301      	movne	r3, #1
 8012d6c:	2300      	moveq	r3, #0
 8012d6e:	b2da      	uxtb	r2, r3
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	701a      	strb	r2, [r3, #0]
      *speed = (pc1r & 3) == 1 ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 8012d74:	8bbb      	ldrh	r3, [r7, #28]
 8012d76:	f003 0303 	and.w	r3, r3, #3
 8012d7a:	2b01      	cmp	r3, #1
 8012d7c:	bf14      	ite	ne
 8012d7e:	2301      	movne	r3, #1
 8012d80:	2300      	moveq	r3, #0
 8012d82:	b2db      	uxtb	r3, r3
 8012d84:	461a      	mov	r2, r3
 8012d86:	683b      	ldr	r3, [r7, #0]
 8012d88:	701a      	strb	r2, [r3, #0]
 8012d8a:	e040      	b.n	8012e0e <mg_phy_up+0x1ea>
    } else if (id1 == MG_PHY_LAN87x) {
 8012d8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012d8e:	2b07      	cmp	r3, #7
 8012d90:	d11a      	bne.n	8012dc8 <mg_phy_up+0x1a4>
      uint16_t scsr = phy->read_reg(phy_addr, MG_PHY_LAN87x_REG_SCSR);
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	7afa      	ldrb	r2, [r7, #11]
 8012d98:	211f      	movs	r1, #31
 8012d9a:	4610      	mov	r0, r2
 8012d9c:	4798      	blx	r3
 8012d9e:	4603      	mov	r3, r0
 8012da0:	83fb      	strh	r3, [r7, #30]
      *full_duplex = scsr & MG_BIT(4);
 8012da2:	8bfb      	ldrh	r3, [r7, #30]
 8012da4:	f003 0310 	and.w	r3, r3, #16
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	bf14      	ite	ne
 8012dac:	2301      	movne	r3, #1
 8012dae:	2300      	moveq	r3, #0
 8012db0:	b2da      	uxtb	r2, r3
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	701a      	strb	r2, [r3, #0]
      *speed = (scsr & MG_BIT(3)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 8012db6:	8bfb      	ldrh	r3, [r7, #30]
 8012db8:	08db      	lsrs	r3, r3, #3
 8012dba:	b2db      	uxtb	r3, r3
 8012dbc:	f003 0301 	and.w	r3, r3, #1
 8012dc0:	b2da      	uxtb	r2, r3
 8012dc2:	683b      	ldr	r3, [r7, #0]
 8012dc4:	701a      	strb	r2, [r3, #0]
 8012dc6:	e022      	b.n	8012e0e <mg_phy_up+0x1ea>
    } else if (id1 == MG_PHY_RTL8201) {
 8012dc8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012dca:	2b1c      	cmp	r3, #28
 8012dcc:	d11f      	bne.n	8012e0e <mg_phy_up+0x1ea>
      uint16_t bcr = phy->read_reg(phy_addr, MG_PHY_REG_BCR);
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	7afa      	ldrb	r2, [r7, #11]
 8012dd4:	2100      	movs	r1, #0
 8012dd6:	4610      	mov	r0, r2
 8012dd8:	4798      	blx	r3
 8012dda:	4603      	mov	r3, r0
 8012ddc:	843b      	strh	r3, [r7, #32]
      if (bcr & MG_BIT(15)) return 0;  // still resetting
 8012dde:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	da01      	bge.n	8012dea <mg_phy_up+0x1c6>
 8012de6:	2300      	movs	r3, #0
 8012de8:	e013      	b.n	8012e12 <mg_phy_up+0x1ee>
      *full_duplex = bcr & MG_BIT(8);
 8012dea:	8c3b      	ldrh	r3, [r7, #32]
 8012dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	bf14      	ite	ne
 8012df4:	2301      	movne	r3, #1
 8012df6:	2300      	moveq	r3, #0
 8012df8:	b2da      	uxtb	r2, r3
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	701a      	strb	r2, [r3, #0]
      *speed = (bcr & MG_BIT(13)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 8012dfe:	8c3b      	ldrh	r3, [r7, #32]
 8012e00:	0b5b      	lsrs	r3, r3, #13
 8012e02:	b2db      	uxtb	r3, r3
 8012e04:	f003 0301 	and.w	r3, r3, #1
 8012e08:	b2da      	uxtb	r2, r3
 8012e0a:	683b      	ldr	r3, [r7, #0]
 8012e0c:	701a      	strb	r2, [r3, #0]
    }
  }
  return up;
 8012e0e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8012e12:	4618      	mov	r0, r3
 8012e14:	3728      	adds	r7, #40	@ 0x28
 8012e16:	46bd      	mov	sp, r7
 8012e18:	bd80      	pop	{r7, pc}
	...

08012e1c <eth_read_phy>:
static uint8_t s_txno;                               // Current TX descriptor
static uint8_t s_rxno;                               // Current RX descriptor

static struct mg_tcpip_if *s_ifp;  // MIP interface

static uint16_t eth_read_phy(uint8_t addr, uint8_t reg) {
 8012e1c:	b480      	push	{r7}
 8012e1e:	b083      	sub	sp, #12
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	4603      	mov	r3, r0
 8012e24:	460a      	mov	r2, r1
 8012e26:	71fb      	strb	r3, [r7, #7]
 8012e28:	4613      	mov	r3, r2
 8012e2a:	71bb      	strb	r3, [r7, #6]
  ETH->MACMIIAR &= (7 << 2);
 8012e2c:	4b12      	ldr	r3, [pc, #72]	@ (8012e78 <eth_read_phy+0x5c>)
 8012e2e:	691b      	ldr	r3, [r3, #16]
 8012e30:	4a11      	ldr	r2, [pc, #68]	@ (8012e78 <eth_read_phy+0x5c>)
 8012e32:	f003 031c 	and.w	r3, r3, #28
 8012e36:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= ((uint32_t) addr << 11) | ((uint32_t) reg << 6);
 8012e38:	4b0f      	ldr	r3, [pc, #60]	@ (8012e78 <eth_read_phy+0x5c>)
 8012e3a:	691a      	ldr	r2, [r3, #16]
 8012e3c:	79fb      	ldrb	r3, [r7, #7]
 8012e3e:	02d9      	lsls	r1, r3, #11
 8012e40:	79bb      	ldrb	r3, [r7, #6]
 8012e42:	019b      	lsls	r3, r3, #6
 8012e44:	430b      	orrs	r3, r1
 8012e46:	490c      	ldr	r1, [pc, #48]	@ (8012e78 <eth_read_phy+0x5c>)
 8012e48:	4313      	orrs	r3, r2
 8012e4a:	610b      	str	r3, [r1, #16]
  ETH->MACMIIAR |= MG_BIT(0);
 8012e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8012e78 <eth_read_phy+0x5c>)
 8012e4e:	691b      	ldr	r3, [r3, #16]
 8012e50:	4a09      	ldr	r2, [pc, #36]	@ (8012e78 <eth_read_phy+0x5c>)
 8012e52:	f043 0301 	orr.w	r3, r3, #1
 8012e56:	6113      	str	r3, [r2, #16]
  while (ETH->MACMIIAR & MG_BIT(0)) (void) 0;
 8012e58:	bf00      	nop
 8012e5a:	4b07      	ldr	r3, [pc, #28]	@ (8012e78 <eth_read_phy+0x5c>)
 8012e5c:	691b      	ldr	r3, [r3, #16]
 8012e5e:	f003 0301 	and.w	r3, r3, #1
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d1f9      	bne.n	8012e5a <eth_read_phy+0x3e>
  return ETH->MACMIIDR & 0xffff;
 8012e66:	4b04      	ldr	r3, [pc, #16]	@ (8012e78 <eth_read_phy+0x5c>)
 8012e68:	695b      	ldr	r3, [r3, #20]
 8012e6a:	b29b      	uxth	r3, r3
}
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	370c      	adds	r7, #12
 8012e70:	46bd      	mov	sp, r7
 8012e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e76:	4770      	bx	lr
 8012e78:	40028000 	.word	0x40028000

08012e7c <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint16_t val) {
 8012e7c:	b480      	push	{r7}
 8012e7e:	b083      	sub	sp, #12
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	4603      	mov	r3, r0
 8012e84:	71fb      	strb	r3, [r7, #7]
 8012e86:	460b      	mov	r3, r1
 8012e88:	71bb      	strb	r3, [r7, #6]
 8012e8a:	4613      	mov	r3, r2
 8012e8c:	80bb      	strh	r3, [r7, #4]
  ETH->MACMIIDR = val;
 8012e8e:	4a14      	ldr	r2, [pc, #80]	@ (8012ee0 <eth_write_phy+0x64>)
 8012e90:	88bb      	ldrh	r3, [r7, #4]
 8012e92:	6153      	str	r3, [r2, #20]
  ETH->MACMIIAR &= (7 << 2);
 8012e94:	4b12      	ldr	r3, [pc, #72]	@ (8012ee0 <eth_write_phy+0x64>)
 8012e96:	691b      	ldr	r3, [r3, #16]
 8012e98:	4a11      	ldr	r2, [pc, #68]	@ (8012ee0 <eth_write_phy+0x64>)
 8012e9a:	f003 031c 	and.w	r3, r3, #28
 8012e9e:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= ((uint32_t) addr << 11) | ((uint32_t) reg << 6) | MG_BIT(1);
 8012ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8012ee0 <eth_write_phy+0x64>)
 8012ea2:	691a      	ldr	r2, [r3, #16]
 8012ea4:	79fb      	ldrb	r3, [r7, #7]
 8012ea6:	02d9      	lsls	r1, r3, #11
 8012ea8:	79bb      	ldrb	r3, [r7, #6]
 8012eaa:	019b      	lsls	r3, r3, #6
 8012eac:	430b      	orrs	r3, r1
 8012eae:	4313      	orrs	r3, r2
 8012eb0:	4a0b      	ldr	r2, [pc, #44]	@ (8012ee0 <eth_write_phy+0x64>)
 8012eb2:	f043 0302 	orr.w	r3, r3, #2
 8012eb6:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= MG_BIT(0);
 8012eb8:	4b09      	ldr	r3, [pc, #36]	@ (8012ee0 <eth_write_phy+0x64>)
 8012eba:	691b      	ldr	r3, [r3, #16]
 8012ebc:	4a08      	ldr	r2, [pc, #32]	@ (8012ee0 <eth_write_phy+0x64>)
 8012ebe:	f043 0301 	orr.w	r3, r3, #1
 8012ec2:	6113      	str	r3, [r2, #16]
  while (ETH->MACMIIAR & MG_BIT(0)) (void) 0;
 8012ec4:	bf00      	nop
 8012ec6:	4b06      	ldr	r3, [pc, #24]	@ (8012ee0 <eth_write_phy+0x64>)
 8012ec8:	691b      	ldr	r3, [r3, #16]
 8012eca:	f003 0301 	and.w	r3, r3, #1
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d1f9      	bne.n	8012ec6 <eth_write_phy+0x4a>
}
 8012ed2:	bf00      	nop
 8012ed4:	bf00      	nop
 8012ed6:	370c      	adds	r7, #12
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ede:	4770      	bx	lr
 8012ee0:	40028000 	.word	0x40028000

08012ee4 <get_hclk>:

static uint32_t get_hclk(void) {
 8012ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ee8:	b08d      	sub	sp, #52	@ 0x34
 8012eea:	af00      	add	r7, sp, #0
  struct rcc {
    volatile uint32_t CR, PLLCFGR, CFGR;
  } *rcc = (struct rcc *) 0x40023800;
 8012eec:	4e3c      	ldr	r6, [pc, #240]	@ (8012fe0 <get_hclk+0xfc>)
 8012eee:	62be      	str	r6, [r7, #40]	@ 0x28
  uint32_t clk = 0, hsi = 16000000 /* 16 MHz */, hse = 8000000 /* 8MHz */;
 8012ef0:	2600      	movs	r6, #0
 8012ef2:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8012ef4:	4e3b      	ldr	r6, [pc, #236]	@ (8012fe4 <get_hclk+0x100>)
 8012ef6:	627e      	str	r6, [r7, #36]	@ 0x24
 8012ef8:	4e3b      	ldr	r6, [pc, #236]	@ (8012fe8 <get_hclk+0x104>)
 8012efa:	623e      	str	r6, [r7, #32]

  if (rcc->CFGR & (1 << 2)) {
 8012efc:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 8012efe:	68b6      	ldr	r6, [r6, #8]
 8012f00:	f006 0604 	and.w	r6, r6, #4
 8012f04:	2e00      	cmp	r6, #0
 8012f06:	d002      	beq.n	8012f0e <get_hclk+0x2a>
    clk = hse;
 8012f08:	6a3b      	ldr	r3, [r7, #32]
 8012f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012f0c:	e049      	b.n	8012fa2 <get_hclk+0xbe>
  } else if (rcc->CFGR & (1 << 3)) {
 8012f0e:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 8012f10:	68b6      	ldr	r6, [r6, #8]
 8012f12:	f006 0608 	and.w	r6, r6, #8
 8012f16:	2e00      	cmp	r6, #0
 8012f18:	d041      	beq.n	8012f9e <get_hclk+0xba>
    uint32_t vco, m, n, p;
    m = (rcc->PLLCFGR & (0x3f << 0)) >> 0;
 8012f1a:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 8012f1c:	6876      	ldr	r6, [r6, #4]
 8012f1e:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 8012f22:	61fe      	str	r6, [r7, #28]
    n = (rcc->PLLCFGR & (0x1ff << 6)) >> 6;
 8012f24:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 8012f26:	6876      	ldr	r6, [r6, #4]
 8012f28:	09b6      	lsrs	r6, r6, #6
 8012f2a:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8012f2e:	61be      	str	r6, [r7, #24]
    p = (((rcc->PLLCFGR & (3 << 16)) >> 16) + 1) * 2;
 8012f30:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 8012f32:	6876      	ldr	r6, [r6, #4]
 8012f34:	0c36      	lsrs	r6, r6, #16
 8012f36:	f006 0603 	and.w	r6, r6, #3
 8012f3a:	3601      	adds	r6, #1
 8012f3c:	0076      	lsls	r6, r6, #1
 8012f3e:	617e      	str	r6, [r7, #20]
    clk = (rcc->PLLCFGR & (1 << 22)) ? hse : hsi;
 8012f40:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 8012f42:	6876      	ldr	r6, [r6, #4]
 8012f44:	f406 0680 	and.w	r6, r6, #4194304	@ 0x400000
 8012f48:	2e00      	cmp	r6, #0
 8012f4a:	d001      	beq.n	8012f50 <get_hclk+0x6c>
 8012f4c:	6a3e      	ldr	r6, [r7, #32]
 8012f4e:	e000      	b.n	8012f52 <get_hclk+0x6e>
 8012f50:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 8012f52:	62fe      	str	r6, [r7, #44]	@ 0x2c
    vco = (uint32_t) ((uint64_t) clk * n / m);
 8012f54:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 8012f56:	f04f 0c00 	mov.w	ip, #0
 8012f5a:	4634      	mov	r4, r6
 8012f5c:	4665      	mov	r5, ip
 8012f5e:	69be      	ldr	r6, [r7, #24]
 8012f60:	f04f 0c00 	mov.w	ip, #0
 8012f64:	4632      	mov	r2, r6
 8012f66:	4663      	mov	r3, ip
 8012f68:	fb02 fc05 	mul.w	ip, r2, r5
 8012f6c:	fb04 f603 	mul.w	r6, r4, r3
 8012f70:	4466      	add	r6, ip
 8012f72:	fba4 0102 	umull	r0, r1, r4, r2
 8012f76:	1873      	adds	r3, r6, r1
 8012f78:	4619      	mov	r1, r3
 8012f7a:	69fb      	ldr	r3, [r7, #28]
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	4698      	mov	r8, r3
 8012f80:	4691      	mov	r9, r2
 8012f82:	4642      	mov	r2, r8
 8012f84:	464b      	mov	r3, r9
 8012f86:	f7ed fbcf 	bl	8000728 <__aeabi_uldivmod>
 8012f8a:	4602      	mov	r2, r0
 8012f8c:	460b      	mov	r3, r1
 8012f8e:	4613      	mov	r3, r2
 8012f90:	613b      	str	r3, [r7, #16]
    clk = vco / p;
 8012f92:	693a      	ldr	r2, [r7, #16]
 8012f94:	697b      	ldr	r3, [r7, #20]
 8012f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012f9c:	e001      	b.n	8012fa2 <get_hclk+0xbe>
  } else {
    clk = hsi;
 8012f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  uint32_t hpre = (rcc->CFGR & (15 << 4)) >> 4;
 8012fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fa4:	689b      	ldr	r3, [r3, #8]
 8012fa6:	091b      	lsrs	r3, r3, #4
 8012fa8:	f003 030f 	and.w	r3, r3, #15
 8012fac:	60fb      	str	r3, [r7, #12]
  if (hpre < 8) return clk;
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	2b07      	cmp	r3, #7
 8012fb2:	d801      	bhi.n	8012fb8 <get_hclk+0xd4>
 8012fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fb6:	e00e      	b.n	8012fd6 <get_hclk+0xf2>

  uint8_t ahbptab[8] = {1, 2, 3, 4, 6, 7, 8, 9};  // log2(div)
 8012fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8012fec <get_hclk+0x108>)
 8012fba:	1d3b      	adds	r3, r7, #4
 8012fbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012fc0:	e883 0003 	stmia.w	r3, {r0, r1}
  return ((uint32_t) clk) >> ahbptab[hpre - 8];
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	3b08      	subs	r3, #8
 8012fc8:	3330      	adds	r3, #48	@ 0x30
 8012fca:	443b      	add	r3, r7
 8012fcc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8012fd0:	461a      	mov	r2, r3
 8012fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fd4:	40d3      	lsrs	r3, r2
}
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	3734      	adds	r7, #52	@ 0x34
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fe0:	40023800 	.word	0x40023800
 8012fe4:	00f42400 	.word	0x00f42400
 8012fe8:	007a1200 	.word	0x007a1200
 8012fec:	0803091c 	.word	0x0803091c

08012ff0 <guess_mdc_cr>:
//  specify a range of frequencies and activate one of a series of dividers to
//  keep the MDC clock safely below 2.5MHz. We guess a divider setting based on
//  HCLK with a +5% drift. If the user uses a different clock from our
//  defaults, needs to set the macros on top Valid for STM32F74xxx/75xxx
//  (38.8.1) and STM32F42xxx/43xxx (33.8.1) (both 4.5% worst case drift)
static int guess_mdc_cr(void) {
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b088      	sub	sp, #32
 8012ff4:	af00      	add	r7, sp, #0
  uint8_t crs[] = {2, 3, 0, 1, 4, 5};          // ETH->MACMIIAR::CR values
 8012ff6:	4a34      	ldr	r2, [pc, #208]	@ (80130c8 <guess_mdc_cr+0xd8>)
 8012ff8:	f107 030c 	add.w	r3, r7, #12
 8012ffc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013000:	6018      	str	r0, [r3, #0]
 8013002:	3304      	adds	r3, #4
 8013004:	8019      	strh	r1, [r3, #0]
  uint8_t div[] = {16, 26, 42, 62, 102, 124};  // Respective HCLK dividers
 8013006:	4a31      	ldr	r2, [pc, #196]	@ (80130cc <guess_mdc_cr+0xdc>)
 8013008:	1d3b      	adds	r3, r7, #4
 801300a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801300e:	6018      	str	r0, [r3, #0]
 8013010:	3304      	adds	r3, #4
 8013012:	8019      	strh	r1, [r3, #0]
  uint32_t hclk = get_hclk();                  // Guess system HCLK
 8013014:	f7ff ff66 	bl	8012ee4 <get_hclk>
 8013018:	6178      	str	r0, [r7, #20]
  int result = -1;                             // Invalid CR value
 801301a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801301e:	61fb      	str	r3, [r7, #28]
  if (hclk < 25000000) {
 8013020:	697b      	ldr	r3, [r7, #20]
 8013022:	4a2b      	ldr	r2, [pc, #172]	@ (80130d0 <guess_mdc_cr+0xe0>)
 8013024:	4293      	cmp	r3, r2
 8013026:	d80e      	bhi.n	8013046 <guess_mdc_cr+0x56>
    MG_ERROR(("HCLK too low"));
 8013028:	4b2a      	ldr	r3, [pc, #168]	@ (80130d4 <guess_mdc_cr+0xe4>)
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	2b00      	cmp	r3, #0
 801302e:	dd36      	ble.n	801309e <guess_mdc_cr+0xae>
 8013030:	4b29      	ldr	r3, [pc, #164]	@ (80130d8 <guess_mdc_cr+0xe8>)
 8013032:	f643 727c 	movw	r2, #16252	@ 0x3f7c
 8013036:	4929      	ldr	r1, [pc, #164]	@ (80130dc <guess_mdc_cr+0xec>)
 8013038:	2001      	movs	r0, #1
 801303a:	f7f8 ffdb 	bl	800bff4 <mg_log_prefix>
 801303e:	4828      	ldr	r0, [pc, #160]	@ (80130e0 <guess_mdc_cr+0xf0>)
 8013040:	f7f9 f828 	bl	800c094 <mg_log>
 8013044:	e02b      	b.n	801309e <guess_mdc_cr+0xae>
  } else {
    for (int i = 0; i < 6; i++) {
 8013046:	2300      	movs	r3, #0
 8013048:	61bb      	str	r3, [r7, #24]
 801304a:	e014      	b.n	8013076 <guess_mdc_cr+0x86>
      if (hclk / div[i] <= 2375000UL /* 2.5MHz - 5% */) {
 801304c:	1d3a      	adds	r2, r7, #4
 801304e:	69bb      	ldr	r3, [r7, #24]
 8013050:	4413      	add	r3, r2
 8013052:	781b      	ldrb	r3, [r3, #0]
 8013054:	461a      	mov	r2, r3
 8013056:	697b      	ldr	r3, [r7, #20]
 8013058:	fbb3 f3f2 	udiv	r3, r3, r2
 801305c:	4a21      	ldr	r2, [pc, #132]	@ (80130e4 <guess_mdc_cr+0xf4>)
 801305e:	4293      	cmp	r3, r2
 8013060:	d806      	bhi.n	8013070 <guess_mdc_cr+0x80>
        result = crs[i];
 8013062:	f107 020c 	add.w	r2, r7, #12
 8013066:	69bb      	ldr	r3, [r7, #24]
 8013068:	4413      	add	r3, r2
 801306a:	781b      	ldrb	r3, [r3, #0]
 801306c:	61fb      	str	r3, [r7, #28]
        break;
 801306e:	e005      	b.n	801307c <guess_mdc_cr+0x8c>
    for (int i = 0; i < 6; i++) {
 8013070:	69bb      	ldr	r3, [r7, #24]
 8013072:	3301      	adds	r3, #1
 8013074:	61bb      	str	r3, [r7, #24]
 8013076:	69bb      	ldr	r3, [r7, #24]
 8013078:	2b05      	cmp	r3, #5
 801307a:	dde7      	ble.n	801304c <guess_mdc_cr+0x5c>
      }
    }
    if (result < 0) MG_ERROR(("HCLK too high"));
 801307c:	69fb      	ldr	r3, [r7, #28]
 801307e:	2b00      	cmp	r3, #0
 8013080:	da0d      	bge.n	801309e <guess_mdc_cr+0xae>
 8013082:	4b14      	ldr	r3, [pc, #80]	@ (80130d4 <guess_mdc_cr+0xe4>)
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	2b00      	cmp	r3, #0
 8013088:	dd09      	ble.n	801309e <guess_mdc_cr+0xae>
 801308a:	4b13      	ldr	r3, [pc, #76]	@ (80130d8 <guess_mdc_cr+0xe8>)
 801308c:	f643 7284 	movw	r2, #16260	@ 0x3f84
 8013090:	4912      	ldr	r1, [pc, #72]	@ (80130dc <guess_mdc_cr+0xec>)
 8013092:	2001      	movs	r0, #1
 8013094:	f7f8 ffae 	bl	800bff4 <mg_log_prefix>
 8013098:	4813      	ldr	r0, [pc, #76]	@ (80130e8 <guess_mdc_cr+0xf8>)
 801309a:	f7f8 fffb 	bl	800c094 <mg_log>
  }
  MG_DEBUG(("HCLK: %u, CR: %d", hclk, result));
 801309e:	4b0d      	ldr	r3, [pc, #52]	@ (80130d4 <guess_mdc_cr+0xe4>)
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	2b02      	cmp	r3, #2
 80130a4:	dd0b      	ble.n	80130be <guess_mdc_cr+0xce>
 80130a6:	4b0c      	ldr	r3, [pc, #48]	@ (80130d8 <guess_mdc_cr+0xe8>)
 80130a8:	f643 7286 	movw	r2, #16262	@ 0x3f86
 80130ac:	490b      	ldr	r1, [pc, #44]	@ (80130dc <guess_mdc_cr+0xec>)
 80130ae:	2003      	movs	r0, #3
 80130b0:	f7f8 ffa0 	bl	800bff4 <mg_log_prefix>
 80130b4:	69fa      	ldr	r2, [r7, #28]
 80130b6:	6979      	ldr	r1, [r7, #20]
 80130b8:	480c      	ldr	r0, [pc, #48]	@ (80130ec <guess_mdc_cr+0xfc>)
 80130ba:	f7f8 ffeb 	bl	800c094 <mg_log>
  return result;
 80130be:	69fb      	ldr	r3, [r7, #28]
}
 80130c0:	4618      	mov	r0, r3
 80130c2:	3720      	adds	r7, #32
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bd80      	pop	{r7, pc}
 80130c8:	08030958 	.word	0x08030958
 80130cc:	08030960 	.word	0x08030960
 80130d0:	017d783f 	.word	0x017d783f
 80130d4:	20000244 	.word	0x20000244
 80130d8:	08032898 	.word	0x08032898
 80130dc:	0802efcc 	.word	0x0802efcc
 80130e0:	08030924 	.word	0x08030924
 80130e4:	00243d58 	.word	0x00243d58
 80130e8:	08030934 	.word	0x08030934
 80130ec:	08030944 	.word	0x08030944

080130f0 <mg_tcpip_driver_stm32f_init>:

static bool mg_tcpip_driver_stm32f_init(struct mg_tcpip_if *ifp) {
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b08a      	sub	sp, #40	@ 0x28
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32f_data *d =
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80130fc:	61fb      	str	r3, [r7, #28]
      (struct mg_tcpip_driver_stm32f_data *) ifp->driver_data;
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 80130fe:	69fb      	ldr	r3, [r7, #28]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d002      	beq.n	801310a <mg_tcpip_driver_stm32f_init+0x1a>
 8013104:	69fb      	ldr	r3, [r7, #28]
 8013106:	791b      	ldrb	r3, [r3, #4]
 8013108:	e000      	b.n	801310c <mg_tcpip_driver_stm32f_init+0x1c>
 801310a:	2300      	movs	r3, #0
 801310c:	76fb      	strb	r3, [r7, #27]
  s_ifp = ifp;
 801310e:	4a6d      	ldr	r2, [pc, #436]	@ (80132c4 <mg_tcpip_driver_stm32f_init+0x1d4>)
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	6013      	str	r3, [r2, #0]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8013114:	2300      	movs	r3, #0
 8013116:	627b      	str	r3, [r7, #36]	@ 0x24
 8013118:	e032      	b.n	8013180 <mg_tcpip_driver_stm32f_init+0x90>
    s_rxdesc[i][0] = MG_BIT(31);                         // Own
 801311a:	4a6b      	ldr	r2, [pc, #428]	@ (80132c8 <mg_tcpip_driver_stm32f_init+0x1d8>)
 801311c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801311e:	011b      	lsls	r3, r3, #4
 8013120:	4413      	add	r3, r2
 8013122:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8013126:	601a      	str	r2, [r3, #0]
    s_rxdesc[i][1] = sizeof(s_rxbuf[i]) | MG_BIT(14);    // 2nd address chained
 8013128:	4a67      	ldr	r2, [pc, #412]	@ (80132c8 <mg_tcpip_driver_stm32f_init+0x1d8>)
 801312a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801312c:	011b      	lsls	r3, r3, #4
 801312e:	4413      	add	r3, r2
 8013130:	3304      	adds	r3, #4
 8013132:	f244 6204 	movw	r2, #17924	@ 0x4604
 8013136:	601a      	str	r2, [r3, #0]
    s_rxdesc[i][2] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 8013138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801313a:	f240 6204 	movw	r2, #1540	@ 0x604
 801313e:	fb02 f303 	mul.w	r3, r2, r3
 8013142:	4a62      	ldr	r2, [pc, #392]	@ (80132cc <mg_tcpip_driver_stm32f_init+0x1dc>)
 8013144:	4413      	add	r3, r2
 8013146:	4619      	mov	r1, r3
 8013148:	4a5f      	ldr	r2, [pc, #380]	@ (80132c8 <mg_tcpip_driver_stm32f_init+0x1d8>)
 801314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801314c:	011b      	lsls	r3, r3, #4
 801314e:	4413      	add	r3, r2
 8013150:	3308      	adds	r3, #8
 8013152:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] =
        (uint32_t) (uintptr_t) s_rxdesc[(i + 1) % ETH_DESC_CNT];  // Chain
 8013154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013156:	3301      	adds	r3, #1
 8013158:	425a      	negs	r2, r3
 801315a:	f003 0303 	and.w	r3, r3, #3
 801315e:	f002 0203 	and.w	r2, r2, #3
 8013162:	bf58      	it	pl
 8013164:	4253      	negpl	r3, r2
 8013166:	011b      	lsls	r3, r3, #4
 8013168:	4a57      	ldr	r2, [pc, #348]	@ (80132c8 <mg_tcpip_driver_stm32f_init+0x1d8>)
 801316a:	4413      	add	r3, r2
 801316c:	4619      	mov	r1, r3
    s_rxdesc[i][3] =
 801316e:	4a56      	ldr	r2, [pc, #344]	@ (80132c8 <mg_tcpip_driver_stm32f_init+0x1d8>)
 8013170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013172:	011b      	lsls	r3, r3, #4
 8013174:	4413      	add	r3, r2
 8013176:	330c      	adds	r3, #12
 8013178:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 801317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801317c:	3301      	adds	r3, #1
 801317e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013182:	2b03      	cmp	r3, #3
 8013184:	ddc9      	ble.n	801311a <mg_tcpip_driver_stm32f_init+0x2a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8013186:	2300      	movs	r3, #0
 8013188:	623b      	str	r3, [r7, #32]
 801318a:	e023      	b.n	80131d4 <mg_tcpip_driver_stm32f_init+0xe4>
    s_txdesc[i][2] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 801318c:	6a3b      	ldr	r3, [r7, #32]
 801318e:	f240 6204 	movw	r2, #1540	@ 0x604
 8013192:	fb02 f303 	mul.w	r3, r2, r3
 8013196:	4a4e      	ldr	r2, [pc, #312]	@ (80132d0 <mg_tcpip_driver_stm32f_init+0x1e0>)
 8013198:	4413      	add	r3, r2
 801319a:	4619      	mov	r1, r3
 801319c:	4a4d      	ldr	r2, [pc, #308]	@ (80132d4 <mg_tcpip_driver_stm32f_init+0x1e4>)
 801319e:	6a3b      	ldr	r3, [r7, #32]
 80131a0:	011b      	lsls	r3, r3, #4
 80131a2:	4413      	add	r3, r2
 80131a4:	3308      	adds	r3, #8
 80131a6:	6019      	str	r1, [r3, #0]
    s_txdesc[i][3] =
        (uint32_t) (uintptr_t) s_txdesc[(i + 1) % ETH_DESC_CNT];  // Chain
 80131a8:	6a3b      	ldr	r3, [r7, #32]
 80131aa:	3301      	adds	r3, #1
 80131ac:	425a      	negs	r2, r3
 80131ae:	f003 0303 	and.w	r3, r3, #3
 80131b2:	f002 0203 	and.w	r2, r2, #3
 80131b6:	bf58      	it	pl
 80131b8:	4253      	negpl	r3, r2
 80131ba:	011b      	lsls	r3, r3, #4
 80131bc:	4a45      	ldr	r2, [pc, #276]	@ (80132d4 <mg_tcpip_driver_stm32f_init+0x1e4>)
 80131be:	4413      	add	r3, r2
 80131c0:	4619      	mov	r1, r3
    s_txdesc[i][3] =
 80131c2:	4a44      	ldr	r2, [pc, #272]	@ (80132d4 <mg_tcpip_driver_stm32f_init+0x1e4>)
 80131c4:	6a3b      	ldr	r3, [r7, #32]
 80131c6:	011b      	lsls	r3, r3, #4
 80131c8:	4413      	add	r3, r2
 80131ca:	330c      	adds	r3, #12
 80131cc:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 80131ce:	6a3b      	ldr	r3, [r7, #32]
 80131d0:	3301      	adds	r3, #1
 80131d2:	623b      	str	r3, [r7, #32]
 80131d4:	6a3b      	ldr	r3, [r7, #32]
 80131d6:	2b03      	cmp	r3, #3
 80131d8:	ddd8      	ble.n	801318c <mg_tcpip_driver_stm32f_init+0x9c>
  }

  ETH->DMABMR |= MG_BIT(0);                         // Software reset
 80131da:	4b3f      	ldr	r3, [pc, #252]	@ (80132d8 <mg_tcpip_driver_stm32f_init+0x1e8>)
 80131dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	4a3d      	ldr	r2, [pc, #244]	@ (80132d8 <mg_tcpip_driver_stm32f_init+0x1e8>)
 80131e4:	f043 0301 	orr.w	r3, r3, #1
 80131e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80131ec:	6013      	str	r3, [r2, #0]
  while ((ETH->DMABMR & MG_BIT(0)) != 0) (void) 0;  // Wait until done
 80131ee:	bf00      	nop
 80131f0:	4b39      	ldr	r3, [pc, #228]	@ (80132d8 <mg_tcpip_driver_stm32f_init+0x1e8>)
 80131f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	f003 0301 	and.w	r3, r3, #1
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d1f7      	bne.n	80131f0 <mg_tcpip_driver_stm32f_init+0x100>

  // Set MDC clock divider. If user told us the value, use it. Otherwise, guess
  int cr = (d == NULL || d->mdc_cr < 0) ? guess_mdc_cr() : d->mdc_cr;
 8013200:	69fb      	ldr	r3, [r7, #28]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d003      	beq.n	801320e <mg_tcpip_driver_stm32f_init+0x11e>
 8013206:	69fb      	ldr	r3, [r7, #28]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	2b00      	cmp	r3, #0
 801320c:	da03      	bge.n	8013216 <mg_tcpip_driver_stm32f_init+0x126>
 801320e:	f7ff feef 	bl	8012ff0 <guess_mdc_cr>
 8013212:	4603      	mov	r3, r0
 8013214:	e001      	b.n	801321a <mg_tcpip_driver_stm32f_init+0x12a>
 8013216:	69fb      	ldr	r3, [r7, #28]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	617b      	str	r3, [r7, #20]
  ETH->MACMIIAR = ((uint32_t) cr & 7) << 2;
 801321c:	697b      	ldr	r3, [r7, #20]
 801321e:	009b      	lsls	r3, r3, #2
 8013220:	4a2d      	ldr	r2, [pc, #180]	@ (80132d8 <mg_tcpip_driver_stm32f_init+0x1e8>)
 8013222:	f003 031c 	and.w	r3, r3, #28
 8013226:	6113      	str	r3, [r2, #16]

  // NOTE(cpq): we do not use extended descriptor bit 7, and do not use
  // hardware checksum. Therefore, descriptor size is 4, not 8
  // ETH->DMABMR = MG_BIT(13) | MG_BIT(16) | MG_BIT(22) | MG_BIT(23) |
  // MG_BIT(25);
  ETH->MACIMR = MG_BIT(3) | MG_BIT(9);  // Mask timestamp & PMT IT
 8013228:	4b2b      	ldr	r3, [pc, #172]	@ (80132d8 <mg_tcpip_driver_stm32f_init+0x1e8>)
 801322a:	f44f 7202 	mov.w	r2, #520	@ 0x208
 801322e:	63da      	str	r2, [r3, #60]	@ 0x3c
  ETH->MACFCR = MG_BIT(7);              // Disable zero quarta pause
 8013230:	4b29      	ldr	r3, [pc, #164]	@ (80132d8 <mg_tcpip_driver_stm32f_init+0x1e8>)
 8013232:	2280      	movs	r2, #128	@ 0x80
 8013234:	619a      	str	r2, [r3, #24]
  // ETH->MACFFR = MG_BIT(31);                            // Receive all
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 8013236:	4a29      	ldr	r2, [pc, #164]	@ (80132dc <mg_tcpip_driver_stm32f_init+0x1ec>)
 8013238:	f107 030c 	add.w	r3, r7, #12
 801323c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013240:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_phy_init(&phy, phy_addr, MG_PHY_CLOCKS_MAC);
 8013244:	7ef9      	ldrb	r1, [r7, #27]
 8013246:	f107 030c 	add.w	r3, r7, #12
 801324a:	2202      	movs	r2, #2
 801324c:	4618      	mov	r0, r3
 801324e:	f7ff fc6f 	bl	8012b30 <mg_phy_init>
  ETH->DMARDLAR = (uint32_t) (uintptr_t) s_rxdesc;  // RX descriptors
 8013252:	4a21      	ldr	r2, [pc, #132]	@ (80132d8 <mg_tcpip_driver_stm32f_init+0x1e8>)
 8013254:	4b1c      	ldr	r3, [pc, #112]	@ (80132c8 <mg_tcpip_driver_stm32f_init+0x1d8>)
 8013256:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801325a:	60d3      	str	r3, [r2, #12]
  ETH->DMATDLAR = (uint32_t) (uintptr_t) s_txdesc;  // RX descriptors
 801325c:	4a1e      	ldr	r2, [pc, #120]	@ (80132d8 <mg_tcpip_driver_stm32f_init+0x1e8>)
 801325e:	4b1d      	ldr	r3, [pc, #116]	@ (80132d4 <mg_tcpip_driver_stm32f_init+0x1e4>)
 8013260:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013264:	6113      	str	r3, [r2, #16]
  ETH->DMAIER = MG_BIT(6) | MG_BIT(16);             // RIE, NISE
 8013266:	4b1c      	ldr	r3, [pc, #112]	@ (80132d8 <mg_tcpip_driver_stm32f_init+0x1e8>)
 8013268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801326c:	461a      	mov	r2, r3
 801326e:	4b1c      	ldr	r3, [pc, #112]	@ (80132e0 <mg_tcpip_driver_stm32f_init+0x1f0>)
 8013270:	61d3      	str	r3, [r2, #28]
  ETH->MACCR =
 8013272:	4b19      	ldr	r3, [pc, #100]	@ (80132d8 <mg_tcpip_driver_stm32f_init+0x1e8>)
 8013274:	f644 020c 	movw	r2, #18444	@ 0x480c
 8013278:	601a      	str	r2, [r3, #0]
      MG_BIT(2) | MG_BIT(3) | MG_BIT(11) | MG_BIT(14);  // RE, TE, Duplex, Fast
  ETH->DMAOMR =
 801327a:	4b17      	ldr	r3, [pc, #92]	@ (80132d8 <mg_tcpip_driver_stm32f_init+0x1e8>)
 801327c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013280:	461a      	mov	r2, r3
 8013282:	4b18      	ldr	r3, [pc, #96]	@ (80132e4 <mg_tcpip_driver_stm32f_init+0x1f4>)
 8013284:	6193      	str	r3, [r2, #24]
      MG_BIT(1) | MG_BIT(13) | MG_BIT(21) | MG_BIT(25);  // SR, ST, TSF, RSF

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	795b      	ldrb	r3, [r3, #5]
 801328a:	021b      	lsls	r3, r3, #8
 801328c:	687a      	ldr	r2, [r7, #4]
 801328e:	7912      	ldrb	r2, [r2, #4]
 8013290:	4611      	mov	r1, r2
 8013292:	4a11      	ldr	r2, [pc, #68]	@ (80132d8 <mg_tcpip_driver_stm32f_init+0x1e8>)
 8013294:	430b      	orrs	r3, r1
 8013296:	6413      	str	r3, [r2, #64]	@ 0x40
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	78db      	ldrb	r3, [r3, #3]
 801329c:	061a      	lsls	r2, r3, #24
                 ((uint32_t) ifp->mac[2] << 16) |
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	789b      	ldrb	r3, [r3, #2]
 80132a2:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80132a4:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	785b      	ldrb	r3, [r3, #1]
 80132aa:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 80132ac:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 80132ae:	687a      	ldr	r2, [r7, #4]
 80132b0:	7812      	ldrb	r2, [r2, #0]
 80132b2:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80132b4:	4a08      	ldr	r2, [pc, #32]	@ (80132d8 <mg_tcpip_driver_stm32f_init+0x1e8>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 80132b6:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80132b8:	6453      	str	r3, [r2, #68]	@ 0x44
  return true;
 80132ba:	2301      	movs	r3, #1
}
 80132bc:	4618      	mov	r0, r3
 80132be:	3728      	adds	r7, #40	@ 0x28
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd80      	pop	{r7, pc}
 80132c4:	20014ba8 	.word	0x20014ba8
 80132c8:	20011b04 	.word	0x20011b04
 80132cc:	20011b84 	.word	0x20011b84
 80132d0:	20013394 	.word	0x20013394
 80132d4:	20011b44 	.word	0x20011b44
 80132d8:	40028000 	.word	0x40028000
 80132dc:	08030968 	.word	0x08030968
 80132e0:	00010040 	.word	0x00010040
 80132e4:	02202002 	.word	0x02202002

080132e8 <mg_tcpip_driver_stm32f_tx>:

static size_t mg_tcpip_driver_stm32f_tx(const void *buf, size_t len,
                                        struct mg_tcpip_if *ifp) {
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b084      	sub	sp, #16
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	60f8      	str	r0, [r7, #12]
 80132f0:	60b9      	str	r1, [r7, #8]
 80132f2:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 80132f4:	68bb      	ldr	r3, [r7, #8]
 80132f6:	f240 6204 	movw	r2, #1540	@ 0x604
 80132fa:	4293      	cmp	r3, r2
 80132fc:	d912      	bls.n	8013324 <mg_tcpip_driver_stm32f_tx+0x3c>
    MG_ERROR(("Frame too big, %ld", (long) len));
 80132fe:	4b3e      	ldr	r3, [pc, #248]	@ (80133f8 <mg_tcpip_driver_stm32f_tx+0x110>)
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	2b00      	cmp	r3, #0
 8013304:	dd0b      	ble.n	801331e <mg_tcpip_driver_stm32f_tx+0x36>
 8013306:	4b3d      	ldr	r3, [pc, #244]	@ (80133fc <mg_tcpip_driver_stm32f_tx+0x114>)
 8013308:	f643 72c3 	movw	r2, #16323	@ 0x3fc3
 801330c:	493c      	ldr	r1, [pc, #240]	@ (8013400 <mg_tcpip_driver_stm32f_tx+0x118>)
 801330e:	2001      	movs	r0, #1
 8013310:	f7f8 fe70 	bl	800bff4 <mg_log_prefix>
 8013314:	68bb      	ldr	r3, [r7, #8]
 8013316:	4619      	mov	r1, r3
 8013318:	483a      	ldr	r0, [pc, #232]	@ (8013404 <mg_tcpip_driver_stm32f_tx+0x11c>)
 801331a:	f7f8 febb 	bl	800c094 <mg_log>
    len = 0;  // Frame is too big
 801331e:	2300      	movs	r3, #0
 8013320:	60bb      	str	r3, [r7, #8]
 8013322:	e056      	b.n	80133d2 <mg_tcpip_driver_stm32f_tx+0xea>
  } else if ((s_txdesc[s_txno][0] & MG_BIT(31))) {
 8013324:	4b38      	ldr	r3, [pc, #224]	@ (8013408 <mg_tcpip_driver_stm32f_tx+0x120>)
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	4a38      	ldr	r2, [pc, #224]	@ (801340c <mg_tcpip_driver_stm32f_tx+0x124>)
 801332a:	011b      	lsls	r3, r3, #4
 801332c:	4413      	add	r3, r2
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	2b00      	cmp	r3, #0
 8013332:	da15      	bge.n	8013360 <mg_tcpip_driver_stm32f_tx+0x78>
    ifp->nerr++;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013338:	1c5a      	adds	r2, r3, #1
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	671a      	str	r2, [r3, #112]	@ 0x70
    MG_ERROR(("No free descriptors"));
 801333e:	4b2e      	ldr	r3, [pc, #184]	@ (80133f8 <mg_tcpip_driver_stm32f_tx+0x110>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	2b00      	cmp	r3, #0
 8013344:	dd09      	ble.n	801335a <mg_tcpip_driver_stm32f_tx+0x72>
 8013346:	4b2d      	ldr	r3, [pc, #180]	@ (80133fc <mg_tcpip_driver_stm32f_tx+0x114>)
 8013348:	f643 72c7 	movw	r2, #16327	@ 0x3fc7
 801334c:	492c      	ldr	r1, [pc, #176]	@ (8013400 <mg_tcpip_driver_stm32f_tx+0x118>)
 801334e:	2001      	movs	r0, #1
 8013350:	f7f8 fe50 	bl	800bff4 <mg_log_prefix>
 8013354:	482e      	ldr	r0, [pc, #184]	@ (8013410 <mg_tcpip_driver_stm32f_tx+0x128>)
 8013356:	f7f8 fe9d 	bl	800c094 <mg_log>
    // printf("D0 %lx SR %lx\n", (long) s_txdesc[0][0], (long) ETH->DMASR);
    len = 0;  // All descriptors are busy, fail
 801335a:	2300      	movs	r3, #0
 801335c:	60bb      	str	r3, [r7, #8]
 801335e:	e038      	b.n	80133d2 <mg_tcpip_driver_stm32f_tx+0xea>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);                           // Copy data
 8013360:	4b29      	ldr	r3, [pc, #164]	@ (8013408 <mg_tcpip_driver_stm32f_tx+0x120>)
 8013362:	781b      	ldrb	r3, [r3, #0]
 8013364:	461a      	mov	r2, r3
 8013366:	f240 6304 	movw	r3, #1540	@ 0x604
 801336a:	fb02 f303 	mul.w	r3, r2, r3
 801336e:	4a29      	ldr	r2, [pc, #164]	@ (8013414 <mg_tcpip_driver_stm32f_tx+0x12c>)
 8013370:	4413      	add	r3, r2
 8013372:	68ba      	ldr	r2, [r7, #8]
 8013374:	68f9      	ldr	r1, [r7, #12]
 8013376:	4618      	mov	r0, r3
 8013378:	f019 f8fd 	bl	802c576 <memcpy>
    s_txdesc[s_txno][1] = (uint32_t) len;                        // Set data len
 801337c:	4b22      	ldr	r3, [pc, #136]	@ (8013408 <mg_tcpip_driver_stm32f_tx+0x120>)
 801337e:	781b      	ldrb	r3, [r3, #0]
 8013380:	4a22      	ldr	r2, [pc, #136]	@ (801340c <mg_tcpip_driver_stm32f_tx+0x124>)
 8013382:	011b      	lsls	r3, r3, #4
 8013384:	4413      	add	r3, r2
 8013386:	3304      	adds	r3, #4
 8013388:	68ba      	ldr	r2, [r7, #8]
 801338a:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][0] = MG_BIT(20) | MG_BIT(28) | MG_BIT(29);  // Chain,FS,LS
 801338c:	4b1e      	ldr	r3, [pc, #120]	@ (8013408 <mg_tcpip_driver_stm32f_tx+0x120>)
 801338e:	781b      	ldrb	r3, [r3, #0]
 8013390:	4a1e      	ldr	r2, [pc, #120]	@ (801340c <mg_tcpip_driver_stm32f_tx+0x124>)
 8013392:	011b      	lsls	r3, r3, #4
 8013394:	4413      	add	r3, r2
 8013396:	4a20      	ldr	r2, [pc, #128]	@ (8013418 <mg_tcpip_driver_stm32f_tx+0x130>)
 8013398:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][0] |= MG_BIT(31);  // Set OWN bit - let DMA take over
 801339a:	4b1b      	ldr	r3, [pc, #108]	@ (8013408 <mg_tcpip_driver_stm32f_tx+0x120>)
 801339c:	781b      	ldrb	r3, [r3, #0]
 801339e:	4a1b      	ldr	r2, [pc, #108]	@ (801340c <mg_tcpip_driver_stm32f_tx+0x124>)
 80133a0:	011b      	lsls	r3, r3, #4
 80133a2:	4413      	add	r3, r2
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	4a18      	ldr	r2, [pc, #96]	@ (8013408 <mg_tcpip_driver_stm32f_tx+0x120>)
 80133a8:	7812      	ldrb	r2, [r2, #0]
 80133aa:	4610      	mov	r0, r2
 80133ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80133b0:	4916      	ldr	r1, [pc, #88]	@ (801340c <mg_tcpip_driver_stm32f_tx+0x124>)
 80133b2:	0103      	lsls	r3, r0, #4
 80133b4:	440b      	add	r3, r1
 80133b6:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 80133b8:	4b13      	ldr	r3, [pc, #76]	@ (8013408 <mg_tcpip_driver_stm32f_tx+0x120>)
 80133ba:	781b      	ldrb	r3, [r3, #0]
 80133bc:	3301      	adds	r3, #1
 80133be:	b2da      	uxtb	r2, r3
 80133c0:	4b11      	ldr	r3, [pc, #68]	@ (8013408 <mg_tcpip_driver_stm32f_tx+0x120>)
 80133c2:	701a      	strb	r2, [r3, #0]
 80133c4:	4b10      	ldr	r3, [pc, #64]	@ (8013408 <mg_tcpip_driver_stm32f_tx+0x120>)
 80133c6:	781b      	ldrb	r3, [r3, #0]
 80133c8:	2b03      	cmp	r3, #3
 80133ca:	d902      	bls.n	80133d2 <mg_tcpip_driver_stm32f_tx+0xea>
 80133cc:	4b0e      	ldr	r3, [pc, #56]	@ (8013408 <mg_tcpip_driver_stm32f_tx+0x120>)
 80133ce:	2200      	movs	r2, #0
 80133d0:	701a      	strb	r2, [r3, #0]
  }
  MG_DSB();                            // ensure descriptors have been written
 80133d2:	f3bf 8f4f 	dsb	sy
  ETH->DMASR = MG_BIT(2) | MG_BIT(5);  // Clear any prior TBUS/TUS
 80133d6:	4b11      	ldr	r3, [pc, #68]	@ (801341c <mg_tcpip_driver_stm32f_tx+0x134>)
 80133d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80133dc:	461a      	mov	r2, r3
 80133de:	2324      	movs	r3, #36	@ 0x24
 80133e0:	6153      	str	r3, [r2, #20]
  ETH->DMATPDR = 0;                    // and resume
 80133e2:	4b0e      	ldr	r3, [pc, #56]	@ (801341c <mg_tcpip_driver_stm32f_tx+0x134>)
 80133e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80133e8:	461a      	mov	r2, r3
 80133ea:	2300      	movs	r3, #0
 80133ec:	6053      	str	r3, [r2, #4]
  return len;
 80133ee:	68bb      	ldr	r3, [r7, #8]
}
 80133f0:	4618      	mov	r0, r3
 80133f2:	3710      	adds	r7, #16
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bd80      	pop	{r7, pc}
 80133f8:	20000244 	.word	0x20000244
 80133fc:	080328a8 	.word	0x080328a8
 8013400:	0802efcc 	.word	0x0802efcc
 8013404:	08030970 	.word	0x08030970
 8013408:	20014ba4 	.word	0x20014ba4
 801340c:	20011b44 	.word	0x20011b44
 8013410:	08030984 	.word	0x08030984
 8013414:	20013394 	.word	0x20013394
 8013418:	30100000 	.word	0x30100000
 801341c:	40028000 	.word	0x40028000

08013420 <mg_tcpip_driver_stm32f_up>:

static bool mg_tcpip_driver_stm32f_up(struct mg_tcpip_if *ifp) {
 8013420:	b580      	push	{r7, lr}
 8013422:	b088      	sub	sp, #32
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32f_data *d =
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801342c:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32f_data *) ifp->driver_data;
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 801342e:	69bb      	ldr	r3, [r7, #24]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d002      	beq.n	801343a <mg_tcpip_driver_stm32f_up+0x1a>
 8013434:	69bb      	ldr	r3, [r7, #24]
 8013436:	791b      	ldrb	r3, [r3, #4]
 8013438:	e000      	b.n	801343c <mg_tcpip_driver_stm32f_up+0x1c>
 801343a:	2300      	movs	r3, #0
 801343c:	75fb      	strb	r3, [r7, #23]
  uint8_t speed = MG_PHY_SPEED_10M;
 801343e:	2300      	movs	r3, #0
 8013440:	757b      	strb	r3, [r7, #21]
  bool up = false, full_duplex = false;
 8013442:	2300      	movs	r3, #0
 8013444:	75bb      	strb	r3, [r7, #22]
 8013446:	2300      	movs	r3, #0
 8013448:	753b      	strb	r3, [r7, #20]
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 801344a:	4a2b      	ldr	r2, [pc, #172]	@ (80134f8 <mg_tcpip_driver_stm32f_up+0xd8>)
 801344c:	f107 030c 	add.w	r3, r7, #12
 8013450:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013454:	e883 0003 	stmia.w	r3, {r0, r1}
  up = mg_phy_up(&phy, phy_addr, &full_duplex, &speed);
 8013458:	f107 0315 	add.w	r3, r7, #21
 801345c:	f107 0214 	add.w	r2, r7, #20
 8013460:	7df9      	ldrb	r1, [r7, #23]
 8013462:	f107 000c 	add.w	r0, r7, #12
 8013466:	f7ff fbdd 	bl	8012c24 <mg_phy_up>
 801346a:	4603      	mov	r3, r0
 801346c:	75bb      	strb	r3, [r7, #22]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8013474:	2b00      	cmp	r3, #0
 8013476:	d13a      	bne.n	80134ee <mg_tcpip_driver_stm32f_up+0xce>
 8013478:	7dbb      	ldrb	r3, [r7, #22]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d037      	beq.n	80134ee <mg_tcpip_driver_stm32f_up+0xce>
    // tmp = reg with flags set to the most likely situation: 100M full-duplex
    // if(link is slow or half) set flags otherwise
    // reg = tmp
    uint32_t maccr = ETH->MACCR | MG_BIT(14) | MG_BIT(11);  // 100M, Full-duplex
 801347e:	4b1f      	ldr	r3, [pc, #124]	@ (80134fc <mg_tcpip_driver_stm32f_up+0xdc>)
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	f443 4390 	orr.w	r3, r3, #18432	@ 0x4800
 8013486:	61fb      	str	r3, [r7, #28]
    if (speed == MG_PHY_SPEED_10M) maccr &= ~MG_BIT(14);    // 10M
 8013488:	7d7b      	ldrb	r3, [r7, #21]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d103      	bne.n	8013496 <mg_tcpip_driver_stm32f_up+0x76>
 801348e:	69fb      	ldr	r3, [r7, #28]
 8013490:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8013494:	61fb      	str	r3, [r7, #28]
    if (full_duplex == false) maccr &= ~MG_BIT(11);         // Half-duplex
 8013496:	7d3b      	ldrb	r3, [r7, #20]
 8013498:	f083 0301 	eor.w	r3, r3, #1
 801349c:	b2db      	uxtb	r3, r3
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d003      	beq.n	80134aa <mg_tcpip_driver_stm32f_up+0x8a>
 80134a2:	69fb      	ldr	r3, [r7, #28]
 80134a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80134a8:	61fb      	str	r3, [r7, #28]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 80134aa:	4a14      	ldr	r2, [pc, #80]	@ (80134fc <mg_tcpip_driver_stm32f_up+0xdc>)
 80134ac:	69fb      	ldr	r3, [r7, #28]
 80134ae:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & MG_BIT(14) ? 100 : 10,
 80134b0:	4b13      	ldr	r3, [pc, #76]	@ (8013500 <mg_tcpip_driver_stm32f_up+0xe0>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	2b02      	cmp	r3, #2
 80134b6:	dd1a      	ble.n	80134ee <mg_tcpip_driver_stm32f_up+0xce>
 80134b8:	4b12      	ldr	r3, [pc, #72]	@ (8013504 <mg_tcpip_driver_stm32f_up+0xe4>)
 80134ba:	f643 72e7 	movw	r2, #16359	@ 0x3fe7
 80134be:	4912      	ldr	r1, [pc, #72]	@ (8013508 <mg_tcpip_driver_stm32f_up+0xe8>)
 80134c0:	2003      	movs	r0, #3
 80134c2:	f7f8 fd97 	bl	800bff4 <mg_log_prefix>
 80134c6:	69fb      	ldr	r3, [r7, #28]
 80134c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d001      	beq.n	80134d4 <mg_tcpip_driver_stm32f_up+0xb4>
 80134d0:	2164      	movs	r1, #100	@ 0x64
 80134d2:	e000      	b.n	80134d6 <mg_tcpip_driver_stm32f_up+0xb6>
 80134d4:	210a      	movs	r1, #10
 80134d6:	69fb      	ldr	r3, [r7, #28]
 80134d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d001      	beq.n	80134e4 <mg_tcpip_driver_stm32f_up+0xc4>
 80134e0:	4b0a      	ldr	r3, [pc, #40]	@ (801350c <mg_tcpip_driver_stm32f_up+0xec>)
 80134e2:	e000      	b.n	80134e6 <mg_tcpip_driver_stm32f_up+0xc6>
 80134e4:	4b0a      	ldr	r3, [pc, #40]	@ (8013510 <mg_tcpip_driver_stm32f_up+0xf0>)
 80134e6:	461a      	mov	r2, r3
 80134e8:	480a      	ldr	r0, [pc, #40]	@ (8013514 <mg_tcpip_driver_stm32f_up+0xf4>)
 80134ea:	f7f8 fdd3 	bl	800c094 <mg_log>
              maccr & MG_BIT(11) ? "full" : "half"));
  }
  return up;
 80134ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80134f0:	4618      	mov	r0, r3
 80134f2:	3720      	adds	r7, #32
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bd80      	pop	{r7, pc}
 80134f8:	08030968 	.word	0x08030968
 80134fc:	40028000 	.word	0x40028000
 8013500:	20000244 	.word	0x20000244
 8013504:	080328c4 	.word	0x080328c4
 8013508:	0802efcc 	.word	0x0802efcc
 801350c:	08030998 	.word	0x08030998
 8013510:	080309a0 	.word	0x080309a0
 8013514:	080309a8 	.word	0x080309a8

08013518 <ETH_IRQHandler>:

#ifdef __riscv
__attribute__((interrupt()))  // For RISCV CH32V307, which share the same MAC
#endif
void ETH_IRQHandler(void);
void ETH_IRQHandler(void) {
 8013518:	b580      	push	{r7, lr}
 801351a:	b082      	sub	sp, #8
 801351c:	af00      	add	r7, sp, #0
  if (ETH->DMASR & MG_BIT(6)) {           // Frame received, loop
 801351e:	4b3d      	ldr	r3, [pc, #244]	@ (8013614 <ETH_IRQHandler+0xfc>)
 8013520:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013524:	695b      	ldr	r3, [r3, #20]
 8013526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801352a:	2b00      	cmp	r3, #0
 801352c:	d061      	beq.n	80135f2 <ETH_IRQHandler+0xda>
    ETH->DMASR = MG_BIT(16) | MG_BIT(6);  // Clear flag
 801352e:	4b39      	ldr	r3, [pc, #228]	@ (8013614 <ETH_IRQHandler+0xfc>)
 8013530:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013534:	461a      	mov	r2, r3
 8013536:	4b38      	ldr	r3, [pc, #224]	@ (8013618 <ETH_IRQHandler+0x100>)
 8013538:	6153      	str	r3, [r2, #20]
    for (uint32_t i = 0; i < 10; i++) {   // read as they arrive but not forever
 801353a:	2300      	movs	r3, #0
 801353c:	607b      	str	r3, [r7, #4]
 801353e:	e053      	b.n	80135e8 <ETH_IRQHandler+0xd0>
      if (s_rxdesc[s_rxno][0] & MG_BIT(31)) break;  // exit when done
 8013540:	4b36      	ldr	r3, [pc, #216]	@ (801361c <ETH_IRQHandler+0x104>)
 8013542:	781b      	ldrb	r3, [r3, #0]
 8013544:	4a36      	ldr	r2, [pc, #216]	@ (8013620 <ETH_IRQHandler+0x108>)
 8013546:	011b      	lsls	r3, r3, #4
 8013548:	4413      	add	r3, r2
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	2b00      	cmp	r3, #0
 801354e:	db4f      	blt.n	80135f0 <ETH_IRQHandler+0xd8>
      if (((s_rxdesc[s_rxno][0] & (MG_BIT(8) | MG_BIT(9))) ==
 8013550:	4b32      	ldr	r3, [pc, #200]	@ (801361c <ETH_IRQHandler+0x104>)
 8013552:	781b      	ldrb	r3, [r3, #0]
 8013554:	4a32      	ldr	r2, [pc, #200]	@ (8013620 <ETH_IRQHandler+0x108>)
 8013556:	011b      	lsls	r3, r3, #4
 8013558:	4413      	add	r3, r2
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013560:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013564:	d128      	bne.n	80135b8 <ETH_IRQHandler+0xa0>
           (MG_BIT(8) | MG_BIT(9))) &&
          !(s_rxdesc[s_rxno][0] & MG_BIT(15))) {  // skip partial/errored frames
 8013566:	4b2d      	ldr	r3, [pc, #180]	@ (801361c <ETH_IRQHandler+0x104>)
 8013568:	781b      	ldrb	r3, [r3, #0]
 801356a:	4a2d      	ldr	r2, [pc, #180]	@ (8013620 <ETH_IRQHandler+0x108>)
 801356c:	011b      	lsls	r3, r3, #4
 801356e:	4413      	add	r3, r2
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
           (MG_BIT(8) | MG_BIT(9))) &&
 8013576:	2b00      	cmp	r3, #0
 8013578:	d11e      	bne.n	80135b8 <ETH_IRQHandler+0xa0>
        uint32_t len = ((s_rxdesc[s_rxno][0] >> 16) & (MG_BIT(14) - 1));
 801357a:	4b28      	ldr	r3, [pc, #160]	@ (801361c <ETH_IRQHandler+0x104>)
 801357c:	781b      	ldrb	r3, [r3, #0]
 801357e:	4a28      	ldr	r2, [pc, #160]	@ (8013620 <ETH_IRQHandler+0x108>)
 8013580:	011b      	lsls	r3, r3, #4
 8013582:	4413      	add	r3, r2
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	0c1b      	lsrs	r3, r3, #16
 8013588:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801358c:	603b      	str	r3, [r7, #0]
        //  printf("%lx %lu %lx %.8lx\n", s_rxno, len, s_rxdesc[s_rxno][0],
        //  ETH->DMASR);
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 801358e:	4b23      	ldr	r3, [pc, #140]	@ (801361c <ETH_IRQHandler+0x104>)
 8013590:	781b      	ldrb	r3, [r3, #0]
 8013592:	461a      	mov	r2, r3
 8013594:	f240 6304 	movw	r3, #1540	@ 0x604
 8013598:	fb02 f303 	mul.w	r3, r2, r3
 801359c:	4a21      	ldr	r2, [pc, #132]	@ (8013624 <ETH_IRQHandler+0x10c>)
 801359e:	1898      	adds	r0, r3, r2
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	2b04      	cmp	r3, #4
 80135a4:	d902      	bls.n	80135ac <ETH_IRQHandler+0x94>
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	3b04      	subs	r3, #4
 80135aa:	e000      	b.n	80135ae <ETH_IRQHandler+0x96>
 80135ac:	683b      	ldr	r3, [r7, #0]
 80135ae:	4a1e      	ldr	r2, [pc, #120]	@ (8013628 <ETH_IRQHandler+0x110>)
 80135b0:	6812      	ldr	r2, [r2, #0]
 80135b2:	4619      	mov	r1, r3
 80135b4:	f7fd f842 	bl	801063c <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][0] = MG_BIT(31);
 80135b8:	4b18      	ldr	r3, [pc, #96]	@ (801361c <ETH_IRQHandler+0x104>)
 80135ba:	781b      	ldrb	r3, [r3, #0]
 80135bc:	4a18      	ldr	r2, [pc, #96]	@ (8013620 <ETH_IRQHandler+0x108>)
 80135be:	011b      	lsls	r3, r3, #4
 80135c0:	4413      	add	r3, r2
 80135c2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80135c6:	601a      	str	r2, [r3, #0]
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 80135c8:	4b14      	ldr	r3, [pc, #80]	@ (801361c <ETH_IRQHandler+0x104>)
 80135ca:	781b      	ldrb	r3, [r3, #0]
 80135cc:	3301      	adds	r3, #1
 80135ce:	b2da      	uxtb	r2, r3
 80135d0:	4b12      	ldr	r3, [pc, #72]	@ (801361c <ETH_IRQHandler+0x104>)
 80135d2:	701a      	strb	r2, [r3, #0]
 80135d4:	4b11      	ldr	r3, [pc, #68]	@ (801361c <ETH_IRQHandler+0x104>)
 80135d6:	781b      	ldrb	r3, [r3, #0]
 80135d8:	2b03      	cmp	r3, #3
 80135da:	d902      	bls.n	80135e2 <ETH_IRQHandler+0xca>
 80135dc:	4b0f      	ldr	r3, [pc, #60]	@ (801361c <ETH_IRQHandler+0x104>)
 80135de:	2200      	movs	r2, #0
 80135e0:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {   // read as they arrive but not forever
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	3301      	adds	r3, #1
 80135e6:	607b      	str	r3, [r7, #4]
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	2b09      	cmp	r3, #9
 80135ec:	d9a8      	bls.n	8013540 <ETH_IRQHandler+0x28>
 80135ee:	e000      	b.n	80135f2 <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][0] & MG_BIT(31)) break;  // exit when done
 80135f0:	bf00      	nop
    }
  }
  // Cleanup flags
  ETH->DMASR = MG_BIT(16)    // NIS, normal interrupt summary
 80135f2:	4b08      	ldr	r3, [pc, #32]	@ (8013614 <ETH_IRQHandler+0xfc>)
 80135f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80135f8:	461a      	mov	r2, r3
 80135fa:	4b0c      	ldr	r3, [pc, #48]	@ (801362c <ETH_IRQHandler+0x114>)
 80135fc:	6153      	str	r3, [r2, #20]
               | MG_BIT(7);  // Clear possible RBUS while processing
  ETH->DMARPDR = 0;          // and resume RX
 80135fe:	4b05      	ldr	r3, [pc, #20]	@ (8013614 <ETH_IRQHandler+0xfc>)
 8013600:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013604:	461a      	mov	r2, r3
 8013606:	2300      	movs	r3, #0
 8013608:	6093      	str	r3, [r2, #8]
}
 801360a:	bf00      	nop
 801360c:	3708      	adds	r7, #8
 801360e:	46bd      	mov	sp, r7
 8013610:	bd80      	pop	{r7, pc}
 8013612:	bf00      	nop
 8013614:	40028000 	.word	0x40028000
 8013618:	00010040 	.word	0x00010040
 801361c:	20014ba5 	.word	0x20014ba5
 8013620:	20011b04 	.word	0x20011b04
 8013624:	20011b84 	.word	0x20011b84
 8013628:	20014ba8 	.word	0x20014ba8
 801362c:	00010080 	.word	0x00010080

08013630 <button_init>:
  * @param  active_level: pressed GPIO level.
  * @param  button_id: the button id.
  * @retval None
  */
void button_init(struct Button* handle, uint8_t(*pin_level)(uint8_t), uint8_t active_level, uint8_t button_id)
{
 8013630:	b580      	push	{r7, lr}
 8013632:	b084      	sub	sp, #16
 8013634:	af00      	add	r7, sp, #0
 8013636:	60f8      	str	r0, [r7, #12]
 8013638:	60b9      	str	r1, [r7, #8]
 801363a:	4611      	mov	r1, r2
 801363c:	461a      	mov	r2, r3
 801363e:	460b      	mov	r3, r1
 8013640:	71fb      	strb	r3, [r7, #7]
 8013642:	4613      	mov	r3, r2
 8013644:	71bb      	strb	r3, [r7, #6]
	memset(handle, 0, sizeof(struct Button));
 8013646:	222c      	movs	r2, #44	@ 0x2c
 8013648:	2100      	movs	r1, #0
 801364a:	68f8      	ldr	r0, [r7, #12]
 801364c:	f018 fa5e 	bl	802bb0c <memset>
	handle->event = (uint8_t)NONE_PRESS;
 8013650:	68fa      	ldr	r2, [r7, #12]
 8013652:	7893      	ldrb	r3, [r2, #2]
 8013654:	2108      	movs	r1, #8
 8013656:	f361 1307 	bfi	r3, r1, #4, #4
 801365a:	7093      	strb	r3, [r2, #2]
	handle->hal_button_Level = pin_level;
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	68ba      	ldr	r2, [r7, #8]
 8013660:	609a      	str	r2, [r3, #8]
	handle->button_level = handle->hal_button_Level(button_id);
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	689b      	ldr	r3, [r3, #8]
 8013666:	79ba      	ldrb	r2, [r7, #6]
 8013668:	4610      	mov	r0, r2
 801366a:	4798      	blx	r3
 801366c:	4603      	mov	r3, r0
 801366e:	f003 0301 	and.w	r3, r3, #1
 8013672:	b2d9      	uxtb	r1, r3
 8013674:	68fa      	ldr	r2, [r7, #12]
 8013676:	78d3      	ldrb	r3, [r2, #3]
 8013678:	f361 13c7 	bfi	r3, r1, #7, #1
 801367c:	70d3      	strb	r3, [r2, #3]
	handle->active_level = active_level;
 801367e:	79fb      	ldrb	r3, [r7, #7]
 8013680:	f003 0301 	and.w	r3, r3, #1
 8013684:	b2d9      	uxtb	r1, r3
 8013686:	68fa      	ldr	r2, [r7, #12]
 8013688:	78d3      	ldrb	r3, [r2, #3]
 801368a:	f361 1386 	bfi	r3, r1, #6, #1
 801368e:	70d3      	strb	r3, [r2, #3]
	handle->button_id = button_id;
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	79ba      	ldrb	r2, [r7, #6]
 8013694:	711a      	strb	r2, [r3, #4]
}
 8013696:	bf00      	nop
 8013698:	3710      	adds	r7, #16
 801369a:	46bd      	mov	sp, r7
 801369c:	bd80      	pop	{r7, pc}

0801369e <button_attach>:
  * @param  event: trigger event type.
  * @param  cb: callback function.
  * @retval None
  */
void button_attach(struct Button* handle, PressEvent event, BtnCallback cb)
{
 801369e:	b480      	push	{r7}
 80136a0:	b085      	sub	sp, #20
 80136a2:	af00      	add	r7, sp, #0
 80136a4:	60f8      	str	r0, [r7, #12]
 80136a6:	460b      	mov	r3, r1
 80136a8:	607a      	str	r2, [r7, #4]
 80136aa:	72fb      	strb	r3, [r7, #11]
	handle->cb[event] = cb;
 80136ac:	7afb      	ldrb	r3, [r7, #11]
 80136ae:	68fa      	ldr	r2, [r7, #12]
 80136b0:	3302      	adds	r3, #2
 80136b2:	009b      	lsls	r3, r3, #2
 80136b4:	4413      	add	r3, r2
 80136b6:	687a      	ldr	r2, [r7, #4]
 80136b8:	605a      	str	r2, [r3, #4]
}
 80136ba:	bf00      	nop
 80136bc:	3714      	adds	r7, #20
 80136be:	46bd      	mov	sp, r7
 80136c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c4:	4770      	bx	lr

080136c6 <get_button_event>:
  * @brief  Inquire the button event happen.
  * @param  handle: the button handle struct.
  * @retval button event.
  */
PressEvent get_button_event(struct Button* handle)
{
 80136c6:	b480      	push	{r7}
 80136c8:	b083      	sub	sp, #12
 80136ca:	af00      	add	r7, sp, #0
 80136cc:	6078      	str	r0, [r7, #4]
	return (PressEvent)(handle->event);
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	789b      	ldrb	r3, [r3, #2]
 80136d2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80136d6:	b2db      	uxtb	r3, r3
}
 80136d8:	4618      	mov	r0, r3
 80136da:	370c      	adds	r7, #12
 80136dc:	46bd      	mov	sp, r7
 80136de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e2:	4770      	bx	lr

080136e4 <button_handler>:
  * @brief  Button driver core function, driver state machine.
  * @param  handle: the button handle struct.
  * @retval None
  */
static void button_handler(struct Button* handle)
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b084      	sub	sp, #16
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
	uint8_t read_gpio_level = handle->hal_button_Level(handle->button_id);
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	689b      	ldr	r3, [r3, #8]
 80136f0:	687a      	ldr	r2, [r7, #4]
 80136f2:	7912      	ldrb	r2, [r2, #4]
 80136f4:	4610      	mov	r0, r2
 80136f6:	4798      	blx	r3
 80136f8:	4603      	mov	r3, r0
 80136fa:	73fb      	strb	r3, [r7, #15]

	//ticks counter working..
	if((handle->state) > 0) handle->ticks++;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	78db      	ldrb	r3, [r3, #3]
 8013700:	f003 0307 	and.w	r3, r3, #7
 8013704:	b2db      	uxtb	r3, r3
 8013706:	2b00      	cmp	r3, #0
 8013708:	d005      	beq.n	8013716 <button_handler+0x32>
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	881b      	ldrh	r3, [r3, #0]
 801370e:	3301      	adds	r3, #1
 8013710:	b29a      	uxth	r2, r3
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	801a      	strh	r2, [r3, #0]

	/*------------button debounce handle---------------*/
	if(read_gpio_level != handle->button_level) { //not equal to prev one
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	78db      	ldrb	r3, [r3, #3]
 801371a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801371e:	b2db      	uxtb	r3, r3
 8013720:	461a      	mov	r2, r3
 8013722:	7bfb      	ldrb	r3, [r7, #15]
 8013724:	4293      	cmp	r3, r2
 8013726:	d023      	beq.n	8013770 <button_handler+0x8c>
		//continue read 3 times same new level change
		if(++(handle->debounce_cnt) >= DEBOUNCE_TICKS) {
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	78db      	ldrb	r3, [r3, #3]
 801372c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8013730:	b2db      	uxtb	r3, r3
 8013732:	3301      	adds	r3, #1
 8013734:	f003 0307 	and.w	r3, r3, #7
 8013738:	b2d9      	uxtb	r1, r3
 801373a:	687a      	ldr	r2, [r7, #4]
 801373c:	78d3      	ldrb	r3, [r2, #3]
 801373e:	f361 03c5 	bfi	r3, r1, #3, #3
 8013742:	70d3      	strb	r3, [r2, #3]
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	78db      	ldrb	r3, [r3, #3]
 8013748:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 801374c:	b2db      	uxtb	r3, r3
 801374e:	2b02      	cmp	r3, #2
 8013750:	d913      	bls.n	801377a <button_handler+0x96>
			handle->button_level = read_gpio_level;
 8013752:	7bfb      	ldrb	r3, [r7, #15]
 8013754:	f003 0301 	and.w	r3, r3, #1
 8013758:	b2d9      	uxtb	r1, r3
 801375a:	687a      	ldr	r2, [r7, #4]
 801375c:	78d3      	ldrb	r3, [r2, #3]
 801375e:	f361 13c7 	bfi	r3, r1, #7, #1
 8013762:	70d3      	strb	r3, [r2, #3]
			handle->debounce_cnt = 0;
 8013764:	687a      	ldr	r2, [r7, #4]
 8013766:	78d3      	ldrb	r3, [r2, #3]
 8013768:	f36f 03c5 	bfc	r3, #3, #3
 801376c:	70d3      	strb	r3, [r2, #3]
 801376e:	e004      	b.n	801377a <button_handler+0x96>
		}
	} else { //level not change ,counter reset.
		handle->debounce_cnt = 0;
 8013770:	687a      	ldr	r2, [r7, #4]
 8013772:	78d3      	ldrb	r3, [r2, #3]
 8013774:	f36f 03c5 	bfc	r3, #3, #3
 8013778:	70d3      	strb	r3, [r2, #3]
	}

	/*-----------------State machine-------------------*/
	switch (handle->state) {
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	78db      	ldrb	r3, [r3, #3]
 801377e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013782:	b2db      	uxtb	r3, r3
 8013784:	2b05      	cmp	r3, #5
 8013786:	f200 815b 	bhi.w	8013a40 <button_handler+0x35c>
 801378a:	a201      	add	r2, pc, #4	@ (adr r2, 8013790 <button_handler+0xac>)
 801378c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013790:	080137a9 	.word	0x080137a9
 8013794:	08013809 	.word	0x08013809
 8013798:	08013885 	.word	0x08013885
 801379c:	08013971 	.word	0x08013971
 80137a0:	08013a41 	.word	0x08013a41
 80137a4:	080139e3 	.word	0x080139e3
	case 0:
		if(handle->button_level == handle->active_level) {	//start press down
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	78db      	ldrb	r3, [r3, #3]
 80137ac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80137b0:	b2da      	uxtb	r2, r3
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	78db      	ldrb	r3, [r3, #3]
 80137b6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80137ba:	b2db      	uxtb	r3, r3
 80137bc:	429a      	cmp	r2, r3
 80137be:	d11c      	bne.n	80137fa <button_handler+0x116>
			handle->event = (uint8_t)PRESS_DOWN;
 80137c0:	687a      	ldr	r2, [r7, #4]
 80137c2:	7893      	ldrb	r3, [r2, #2]
 80137c4:	f36f 1307 	bfc	r3, #4, #4
 80137c8:	7093      	strb	r3, [r2, #2]
			EVENT_CB(PRESS_DOWN);
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	68db      	ldr	r3, [r3, #12]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d003      	beq.n	80137da <button_handler+0xf6>
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	68db      	ldr	r3, [r3, #12]
 80137d6:	6878      	ldr	r0, [r7, #4]
 80137d8:	4798      	blx	r3
			handle->ticks = 0;
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	2200      	movs	r2, #0
 80137de:	801a      	strh	r2, [r3, #0]
			handle->repeat = 1;
 80137e0:	687a      	ldr	r2, [r7, #4]
 80137e2:	7893      	ldrb	r3, [r2, #2]
 80137e4:	2101      	movs	r1, #1
 80137e6:	f361 0303 	bfi	r3, r1, #0, #4
 80137ea:	7093      	strb	r3, [r2, #2]
			handle->state = 1;
 80137ec:	687a      	ldr	r2, [r7, #4]
 80137ee:	78d3      	ldrb	r3, [r2, #3]
 80137f0:	2101      	movs	r1, #1
 80137f2:	f361 0302 	bfi	r3, r1, #0, #3
 80137f6:	70d3      	strb	r3, [r2, #3]
		} else {
			handle->event = (uint8_t)NONE_PRESS;
		}
		break;
 80137f8:	e12f      	b.n	8013a5a <button_handler+0x376>
			handle->event = (uint8_t)NONE_PRESS;
 80137fa:	687a      	ldr	r2, [r7, #4]
 80137fc:	7893      	ldrb	r3, [r2, #2]
 80137fe:	2108      	movs	r1, #8
 8013800:	f361 1307 	bfi	r3, r1, #4, #4
 8013804:	7093      	strb	r3, [r2, #2]
		break;
 8013806:	e128      	b.n	8013a5a <button_handler+0x376>

	case 1:
		if(handle->button_level != handle->active_level) { //released press up
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	78db      	ldrb	r3, [r3, #3]
 801380c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8013810:	b2da      	uxtb	r2, r3
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	78db      	ldrb	r3, [r3, #3]
 8013816:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801381a:	b2db      	uxtb	r3, r3
 801381c:	429a      	cmp	r2, r3
 801381e:	d017      	beq.n	8013850 <button_handler+0x16c>
			handle->event = (uint8_t)PRESS_UP;
 8013820:	687a      	ldr	r2, [r7, #4]
 8013822:	7893      	ldrb	r3, [r2, #2]
 8013824:	2101      	movs	r1, #1
 8013826:	f361 1307 	bfi	r3, r1, #4, #4
 801382a:	7093      	strb	r3, [r2, #2]
			EVENT_CB(PRESS_UP);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	691b      	ldr	r3, [r3, #16]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d003      	beq.n	801383c <button_handler+0x158>
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	691b      	ldr	r3, [r3, #16]
 8013838:	6878      	ldr	r0, [r7, #4]
 801383a:	4798      	blx	r3
			handle->ticks = 0;
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	2200      	movs	r2, #0
 8013840:	801a      	strh	r2, [r3, #0]
			handle->state = 2;
 8013842:	687a      	ldr	r2, [r7, #4]
 8013844:	78d3      	ldrb	r3, [r2, #3]
 8013846:	2102      	movs	r1, #2
 8013848:	f361 0302 	bfi	r3, r1, #0, #3
 801384c:	70d3      	strb	r3, [r2, #3]
		} else if(handle->ticks > LONG_TICKS) {
			handle->event = (uint8_t)LONG_PRESS_START;
			EVENT_CB(LONG_PRESS_START);
			handle->state = 5;
		}
		break;
 801384e:	e0fd      	b.n	8013a4c <button_handler+0x368>
		} else if(handle->ticks > LONG_TICKS) {
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	881b      	ldrh	r3, [r3, #0]
 8013854:	2ba0      	cmp	r3, #160	@ 0xa0
 8013856:	f240 80f9 	bls.w	8013a4c <button_handler+0x368>
			handle->event = (uint8_t)LONG_PRESS_START;
 801385a:	687a      	ldr	r2, [r7, #4]
 801385c:	7893      	ldrb	r3, [r2, #2]
 801385e:	2105      	movs	r1, #5
 8013860:	f361 1307 	bfi	r3, r1, #4, #4
 8013864:	7093      	strb	r3, [r2, #2]
			EVENT_CB(LONG_PRESS_START);
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	6a1b      	ldr	r3, [r3, #32]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d003      	beq.n	8013876 <button_handler+0x192>
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	6a1b      	ldr	r3, [r3, #32]
 8013872:	6878      	ldr	r0, [r7, #4]
 8013874:	4798      	blx	r3
			handle->state = 5;
 8013876:	687a      	ldr	r2, [r7, #4]
 8013878:	78d3      	ldrb	r3, [r2, #3]
 801387a:	2105      	movs	r1, #5
 801387c:	f361 0302 	bfi	r3, r1, #0, #3
 8013880:	70d3      	strb	r3, [r2, #3]
		break;
 8013882:	e0e3      	b.n	8013a4c <button_handler+0x368>

	case 2:
		if(handle->button_level == handle->active_level) { //press down again
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	78db      	ldrb	r3, [r3, #3]
 8013888:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801388c:	b2da      	uxtb	r2, r3
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	78db      	ldrb	r3, [r3, #3]
 8013892:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8013896:	b2db      	uxtb	r3, r3
 8013898:	429a      	cmp	r2, r3
 801389a:	d133      	bne.n	8013904 <button_handler+0x220>
			handle->event = (uint8_t)PRESS_DOWN;
 801389c:	687a      	ldr	r2, [r7, #4]
 801389e:	7893      	ldrb	r3, [r2, #2]
 80138a0:	f36f 1307 	bfc	r3, #4, #4
 80138a4:	7093      	strb	r3, [r2, #2]
			EVENT_CB(PRESS_DOWN);
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	68db      	ldr	r3, [r3, #12]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d003      	beq.n	80138b6 <button_handler+0x1d2>
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	68db      	ldr	r3, [r3, #12]
 80138b2:	6878      	ldr	r0, [r7, #4]
 80138b4:	4798      	blx	r3
			if(handle->repeat != PRESS_REPEAT_MAX_NUM) {
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	789b      	ldrb	r3, [r3, #2]
 80138ba:	f003 030f 	and.w	r3, r3, #15
 80138be:	b2db      	uxtb	r3, r3
 80138c0:	2b0f      	cmp	r3, #15
 80138c2:	d00d      	beq.n	80138e0 <button_handler+0x1fc>
				handle->repeat++;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	789b      	ldrb	r3, [r3, #2]
 80138c8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80138cc:	b2db      	uxtb	r3, r3
 80138ce:	3301      	adds	r3, #1
 80138d0:	f003 030f 	and.w	r3, r3, #15
 80138d4:	b2d9      	uxtb	r1, r3
 80138d6:	687a      	ldr	r2, [r7, #4]
 80138d8:	7893      	ldrb	r3, [r2, #2]
 80138da:	f361 0303 	bfi	r3, r1, #0, #4
 80138de:	7093      	strb	r3, [r2, #2]
			}
			EVENT_CB(PRESS_REPEAT); // repeat hit
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	695b      	ldr	r3, [r3, #20]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d003      	beq.n	80138f0 <button_handler+0x20c>
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	695b      	ldr	r3, [r3, #20]
 80138ec:	6878      	ldr	r0, [r7, #4]
 80138ee:	4798      	blx	r3
			handle->ticks = 0;
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	2200      	movs	r2, #0
 80138f4:	801a      	strh	r2, [r3, #0]
			handle->state = 3;
 80138f6:	687a      	ldr	r2, [r7, #4]
 80138f8:	78d3      	ldrb	r3, [r2, #3]
 80138fa:	2103      	movs	r1, #3
 80138fc:	f361 0302 	bfi	r3, r1, #0, #3
 8013900:	70d3      	strb	r3, [r2, #3]
				handle->event = (uint8_t)DOUBLE_CLICK;
				EVENT_CB(DOUBLE_CLICK); // repeat hit
			}
			handle->state = 0;
		}
		break;
 8013902:	e0a5      	b.n	8013a50 <button_handler+0x36c>
		} else if(handle->ticks > SHORT_TICKS) { //released timeout
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	881b      	ldrh	r3, [r3, #0]
 8013908:	2b3c      	cmp	r3, #60	@ 0x3c
 801390a:	f240 80a1 	bls.w	8013a50 <button_handler+0x36c>
			if(handle->repeat == 1) {
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	789b      	ldrb	r3, [r3, #2]
 8013912:	f003 030f 	and.w	r3, r3, #15
 8013916:	b2db      	uxtb	r3, r3
 8013918:	2b01      	cmp	r3, #1
 801391a:	d10e      	bne.n	801393a <button_handler+0x256>
				handle->event = (uint8_t)SINGLE_CLICK;
 801391c:	687a      	ldr	r2, [r7, #4]
 801391e:	7893      	ldrb	r3, [r2, #2]
 8013920:	2103      	movs	r1, #3
 8013922:	f361 1307 	bfi	r3, r1, #4, #4
 8013926:	7093      	strb	r3, [r2, #2]
				EVENT_CB(SINGLE_CLICK);
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	699b      	ldr	r3, [r3, #24]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d019      	beq.n	8013964 <button_handler+0x280>
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	699b      	ldr	r3, [r3, #24]
 8013934:	6878      	ldr	r0, [r7, #4]
 8013936:	4798      	blx	r3
 8013938:	e014      	b.n	8013964 <button_handler+0x280>
			} else if(handle->repeat == 2) {
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	789b      	ldrb	r3, [r3, #2]
 801393e:	f003 030f 	and.w	r3, r3, #15
 8013942:	b2db      	uxtb	r3, r3
 8013944:	2b02      	cmp	r3, #2
 8013946:	d10d      	bne.n	8013964 <button_handler+0x280>
				handle->event = (uint8_t)DOUBLE_CLICK;
 8013948:	687a      	ldr	r2, [r7, #4]
 801394a:	7893      	ldrb	r3, [r2, #2]
 801394c:	2104      	movs	r1, #4
 801394e:	f361 1307 	bfi	r3, r1, #4, #4
 8013952:	7093      	strb	r3, [r2, #2]
				EVENT_CB(DOUBLE_CLICK); // repeat hit
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	69db      	ldr	r3, [r3, #28]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d003      	beq.n	8013964 <button_handler+0x280>
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	69db      	ldr	r3, [r3, #28]
 8013960:	6878      	ldr	r0, [r7, #4]
 8013962:	4798      	blx	r3
			handle->state = 0;
 8013964:	687a      	ldr	r2, [r7, #4]
 8013966:	78d3      	ldrb	r3, [r2, #3]
 8013968:	f36f 0302 	bfc	r3, #0, #3
 801396c:	70d3      	strb	r3, [r2, #3]
		break;
 801396e:	e06f      	b.n	8013a50 <button_handler+0x36c>

	case 3:
		if(handle->button_level != handle->active_level) { //released press up
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	78db      	ldrb	r3, [r3, #3]
 8013974:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8013978:	b2da      	uxtb	r2, r3
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	78db      	ldrb	r3, [r3, #3]
 801397e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8013982:	b2db      	uxtb	r3, r3
 8013984:	429a      	cmp	r2, r3
 8013986:	d021      	beq.n	80139cc <button_handler+0x2e8>
			handle->event = (uint8_t)PRESS_UP;
 8013988:	687a      	ldr	r2, [r7, #4]
 801398a:	7893      	ldrb	r3, [r2, #2]
 801398c:	2101      	movs	r1, #1
 801398e:	f361 1307 	bfi	r3, r1, #4, #4
 8013992:	7093      	strb	r3, [r2, #2]
			EVENT_CB(PRESS_UP);
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	691b      	ldr	r3, [r3, #16]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d003      	beq.n	80139a4 <button_handler+0x2c0>
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	691b      	ldr	r3, [r3, #16]
 80139a0:	6878      	ldr	r0, [r7, #4]
 80139a2:	4798      	blx	r3
			if(handle->ticks < SHORT_TICKS) {
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	881b      	ldrh	r3, [r3, #0]
 80139a8:	2b3b      	cmp	r3, #59	@ 0x3b
 80139aa:	d809      	bhi.n	80139c0 <button_handler+0x2dc>
				handle->ticks = 0;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	2200      	movs	r2, #0
 80139b0:	801a      	strh	r2, [r3, #0]
				handle->state = 2; //repeat press
 80139b2:	687a      	ldr	r2, [r7, #4]
 80139b4:	78d3      	ldrb	r3, [r2, #3]
 80139b6:	2102      	movs	r1, #2
 80139b8:	f361 0302 	bfi	r3, r1, #0, #3
 80139bc:	70d3      	strb	r3, [r2, #3]
				handle->state = 0;
			}
		} else if(handle->ticks > SHORT_TICKS) { // SHORT_TICKS < press down hold time < LONG_TICKS
			handle->state = 1;
		}
		break;
 80139be:	e049      	b.n	8013a54 <button_handler+0x370>
				handle->state = 0;
 80139c0:	687a      	ldr	r2, [r7, #4]
 80139c2:	78d3      	ldrb	r3, [r2, #3]
 80139c4:	f36f 0302 	bfc	r3, #0, #3
 80139c8:	70d3      	strb	r3, [r2, #3]
		break;
 80139ca:	e043      	b.n	8013a54 <button_handler+0x370>
		} else if(handle->ticks > SHORT_TICKS) { // SHORT_TICKS < press down hold time < LONG_TICKS
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	881b      	ldrh	r3, [r3, #0]
 80139d0:	2b3c      	cmp	r3, #60	@ 0x3c
 80139d2:	d93f      	bls.n	8013a54 <button_handler+0x370>
			handle->state = 1;
 80139d4:	687a      	ldr	r2, [r7, #4]
 80139d6:	78d3      	ldrb	r3, [r2, #3]
 80139d8:	2101      	movs	r1, #1
 80139da:	f361 0302 	bfi	r3, r1, #0, #3
 80139de:	70d3      	strb	r3, [r2, #3]
		break;
 80139e0:	e038      	b.n	8013a54 <button_handler+0x370>

	case 5:
		if(handle->button_level == handle->active_level) {
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	78db      	ldrb	r3, [r3, #3]
 80139e6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80139ea:	b2da      	uxtb	r2, r3
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	78db      	ldrb	r3, [r3, #3]
 80139f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80139f4:	b2db      	uxtb	r3, r3
 80139f6:	429a      	cmp	r2, r3
 80139f8:	d10e      	bne.n	8013a18 <button_handler+0x334>
			//continue hold trigger
			handle->event = (uint8_t)LONG_PRESS_HOLD;
 80139fa:	687a      	ldr	r2, [r7, #4]
 80139fc:	7893      	ldrb	r3, [r2, #2]
 80139fe:	2106      	movs	r1, #6
 8013a00:	f361 1307 	bfi	r3, r1, #4, #4
 8013a04:	7093      	strb	r3, [r2, #2]
			EVENT_CB(LONG_PRESS_HOLD);
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d024      	beq.n	8013a58 <button_handler+0x374>
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a12:	6878      	ldr	r0, [r7, #4]
 8013a14:	4798      	blx	r3
		} else { //released
			handle->event = (uint8_t)PRESS_UP;
			EVENT_CB(PRESS_UP);
			handle->state = 0; //reset
		}
		break;
 8013a16:	e01f      	b.n	8013a58 <button_handler+0x374>
			handle->event = (uint8_t)PRESS_UP;
 8013a18:	687a      	ldr	r2, [r7, #4]
 8013a1a:	7893      	ldrb	r3, [r2, #2]
 8013a1c:	2101      	movs	r1, #1
 8013a1e:	f361 1307 	bfi	r3, r1, #4, #4
 8013a22:	7093      	strb	r3, [r2, #2]
			EVENT_CB(PRESS_UP);
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	691b      	ldr	r3, [r3, #16]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d003      	beq.n	8013a34 <button_handler+0x350>
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	691b      	ldr	r3, [r3, #16]
 8013a30:	6878      	ldr	r0, [r7, #4]
 8013a32:	4798      	blx	r3
			handle->state = 0; //reset
 8013a34:	687a      	ldr	r2, [r7, #4]
 8013a36:	78d3      	ldrb	r3, [r2, #3]
 8013a38:	f36f 0302 	bfc	r3, #0, #3
 8013a3c:	70d3      	strb	r3, [r2, #3]
		break;
 8013a3e:	e00b      	b.n	8013a58 <button_handler+0x374>
	default:
		handle->state = 0; //reset
 8013a40:	687a      	ldr	r2, [r7, #4]
 8013a42:	78d3      	ldrb	r3, [r2, #3]
 8013a44:	f36f 0302 	bfc	r3, #0, #3
 8013a48:	70d3      	strb	r3, [r2, #3]
		break;
 8013a4a:	e006      	b.n	8013a5a <button_handler+0x376>
		break;
 8013a4c:	bf00      	nop
 8013a4e:	e004      	b.n	8013a5a <button_handler+0x376>
		break;
 8013a50:	bf00      	nop
 8013a52:	e002      	b.n	8013a5a <button_handler+0x376>
		break;
 8013a54:	bf00      	nop
 8013a56:	e000      	b.n	8013a5a <button_handler+0x376>
		break;
 8013a58:	bf00      	nop
	}
}
 8013a5a:	bf00      	nop
 8013a5c:	3710      	adds	r7, #16
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	bd80      	pop	{r7, pc}
 8013a62:	bf00      	nop

08013a64 <button_start>:
  * @brief  Start the button work, add the handle into work list.
  * @param  handle: target handle struct.
  * @retval 0: succeed. -1: already exist.
  */
int button_start(struct Button* handle)
{
 8013a64:	b480      	push	{r7}
 8013a66:	b085      	sub	sp, #20
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	6078      	str	r0, [r7, #4]
	struct Button* target = head_handle;
 8013a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8013aac <button_start+0x48>)
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	60fb      	str	r3, [r7, #12]
	while(target) {
 8013a72:	e009      	b.n	8013a88 <button_start+0x24>
		if(target == handle) return -1;	//already exist.
 8013a74:	68fa      	ldr	r2, [r7, #12]
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	429a      	cmp	r2, r3
 8013a7a:	d102      	bne.n	8013a82 <button_start+0x1e>
 8013a7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013a80:	e00d      	b.n	8013a9e <button_start+0x3a>
		target = target->next;
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a86:	60fb      	str	r3, [r7, #12]
	while(target) {
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d1f2      	bne.n	8013a74 <button_start+0x10>
	}
	handle->next = head_handle;
 8013a8e:	4b07      	ldr	r3, [pc, #28]	@ (8013aac <button_start+0x48>)
 8013a90:	681a      	ldr	r2, [r3, #0]
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	629a      	str	r2, [r3, #40]	@ 0x28
	head_handle = handle;
 8013a96:	4a05      	ldr	r2, [pc, #20]	@ (8013aac <button_start+0x48>)
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	6013      	str	r3, [r2, #0]
	return 0;
 8013a9c:	2300      	movs	r3, #0
}
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	3714      	adds	r7, #20
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa8:	4770      	bx	lr
 8013aaa:	bf00      	nop
 8013aac:	20014c30 	.word	0x20014c30

08013ab0 <button_ticks>:
//		button_handler(&buttons[i]);
//	}
//	return 0;
//}

void button_ticks(struct Button *buttons) {
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b082      	sub	sp, #8
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
			button_handler(buttons);
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f7ff fe13 	bl	80136e4 <button_handler>
	//return 0;
}
 8013abe:	bf00      	nop
 8013ac0:	3708      	adds	r7, #8
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	bd80      	pop	{r7, pc}
	...

08013ac8 <mg_now>:
    "Content-Type: application/json\r\n"
    "Cache-Control: no-cache\r\n";
uint64_t s_boot_timestamp = 0;  // Updated by SNTP

// This is for newlib and TLS (mbedTLS)
uint64_t mg_now(void) {
 8013ac8:	b5b0      	push	{r4, r5, r7, lr}
 8013aca:	af00      	add	r7, sp, #0
  return mg_millis() + s_boot_timestamp;
 8013acc:	f7ef fe84 	bl	80037d8 <mg_millis>
 8013ad0:	4b05      	ldr	r3, [pc, #20]	@ (8013ae8 <mg_now+0x20>)
 8013ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ad6:	1884      	adds	r4, r0, r2
 8013ad8:	eb41 0503 	adc.w	r5, r1, r3
 8013adc:	4622      	mov	r2, r4
 8013ade:	462b      	mov	r3, r5
}
 8013ae0:	4610      	mov	r0, r2
 8013ae2:	4619      	mov	r1, r3
 8013ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8013ae6:	bf00      	nop
 8013ae8:	20014c40 	.word	0x20014c40

08013aec <ui_event_next>:

int ui_event_next(int no, struct ui_event *e) {
 8013aec:	b590      	push	{r4, r7, lr}
 8013aee:	b083      	sub	sp, #12
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
 8013af4:	6039      	str	r1, [r7, #0]
  if (no < 0 || no >= MAX_EVENTS_NO) return 0;
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	db03      	blt.n	8013b04 <ui_event_next+0x18>
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8013b02:	db01      	blt.n	8013b08 <ui_event_next+0x1c>
 8013b04:	2300      	movs	r3, #0
 8013b06:	e04b      	b.n	8013ba0 <ui_event_next+0xb4>

  srand((unsigned) no);
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	f016 fe80 	bl	802a810 <srand>
  e->type = (uint8_t) rand() % 4;
 8013b10:	f016 feac 	bl	802a86c <rand>
 8013b14:	4603      	mov	r3, r0
 8013b16:	b2db      	uxtb	r3, r3
 8013b18:	f003 0303 	and.w	r3, r3, #3
 8013b1c:	b2da      	uxtb	r2, r3
 8013b1e:	683b      	ldr	r3, [r7, #0]
 8013b20:	701a      	strb	r2, [r3, #0]
  e->prio = (uint8_t) rand() % 3;
 8013b22:	f016 fea3 	bl	802a86c <rand>
 8013b26:	4603      	mov	r3, r0
 8013b28:	b2da      	uxtb	r2, r3
 8013b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8013ba8 <ui_event_next+0xbc>)
 8013b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8013b30:	0859      	lsrs	r1, r3, #1
 8013b32:	460b      	mov	r3, r1
 8013b34:	005b      	lsls	r3, r3, #1
 8013b36:	440b      	add	r3, r1
 8013b38:	1ad3      	subs	r3, r2, r3
 8013b3a:	b2da      	uxtb	r2, r3
 8013b3c:	683b      	ldr	r3, [r7, #0]
 8013b3e:	705a      	strb	r2, [r3, #1]
  e->timestamp =
      (unsigned long) ((int64_t) mg_now() - 86400 * 1000 /* one day back */ +
 8013b40:	f7ff ffc2 	bl	8013ac8 <mg_now>
 8013b44:	4602      	mov	r2, r0
 8013b46:	460b      	mov	r3, r1
                       no * 300 * 1000 /* 5 mins between alerts */ +
 8013b48:	4614      	mov	r4, r2
                       1000 * (rand() % 300) /* randomize event time */) /
 8013b4a:	f016 fe8f 	bl	802a86c <rand>
 8013b4e:	4602      	mov	r2, r0
 8013b50:	4b16      	ldr	r3, [pc, #88]	@ (8013bac <ui_event_next+0xc0>)
 8013b52:	fb83 1302 	smull	r1, r3, r3, r2
 8013b56:	1159      	asrs	r1, r3, #5
 8013b58:	17d3      	asrs	r3, r2, #31
 8013b5a:	1acb      	subs	r3, r1, r3
 8013b5c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8013b60:	fb01 f303 	mul.w	r3, r1, r3
 8013b64:	1ad3      	subs	r3, r2, r3
 8013b66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8013b6a:	fb02 f303 	mul.w	r3, r2, r3
                       no * 300 * 1000 /* 5 mins between alerts */ +
 8013b6e:	4619      	mov	r1, r3
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	4a0f      	ldr	r2, [pc, #60]	@ (8013bb0 <ui_event_next+0xc4>)
 8013b74:	fb02 f303 	mul.w	r3, r2, r3
 8013b78:	440b      	add	r3, r1
 8013b7a:	18e2      	adds	r2, r4, r3
      (unsigned long) ((int64_t) mg_now() - 86400 * 1000 /* one day back */ +
 8013b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8013bb4 <ui_event_next+0xc8>)
 8013b7e:	4413      	add	r3, r2
                       1000 * (rand() % 300) /* randomize event time */) /
 8013b80:	4a0d      	ldr	r2, [pc, #52]	@ (8013bb8 <ui_event_next+0xcc>)
 8013b82:	fba2 2303 	umull	r2, r3, r2, r3
 8013b86:	099a      	lsrs	r2, r3, #6
  e->timestamp =
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	605a      	str	r2, [r3, #4]
      1000UL;

  mg_snprintf(e->text, MAX_EVENT_TEXT_SIZE, "event#%d", no);
 8013b8c:	683b      	ldr	r3, [r7, #0]
 8013b8e:	f103 0008 	add.w	r0, r3, #8
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	4a09      	ldr	r2, [pc, #36]	@ (8013bbc <ui_event_next+0xd0>)
 8013b96:	210a      	movs	r1, #10
 8013b98:	f7fd faaa 	bl	80110f0 <mg_snprintf>
  return no + 1;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	3301      	adds	r3, #1
}
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	370c      	adds	r7, #12
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bd90      	pop	{r4, r7, pc}
 8013ba8:	aaaaaaab 	.word	0xaaaaaaab
 8013bac:	1b4e81b5 	.word	0x1b4e81b5
 8013bb0:	000493e0 	.word	0x000493e0
 8013bb4:	fad9a400 	.word	0xfad9a400
 8013bb8:	10624dd3 	.word	0x10624dd3
 8013bbc:	08030a24 	.word	0x08030a24

08013bc0 <sfn>:

// SNTP connection event handler. When we get a response from an SNTP server,
// adjust s_boot_timestamp. We'll get a valid time from that point on
static void sfn(struct mg_connection *c, int ev, void *ev_data) {
 8013bc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8013bc4:	b088      	sub	sp, #32
 8013bc6:	af00      	add	r7, sp, #0
 8013bc8:	60f8      	str	r0, [r7, #12]
 8013bca:	60b9      	str	r1, [r7, #8]
 8013bcc:	607a      	str	r2, [r7, #4]
  uint64_t *expiration_time = (uint64_t *) c->data;
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	3388      	adds	r3, #136	@ 0x88
 8013bd2:	61fb      	str	r3, [r7, #28]
  if (ev == MG_EV_OPEN) {
 8013bd4:	68bb      	ldr	r3, [r7, #8]
 8013bd6:	2b01      	cmp	r3, #1
 8013bd8:	d10d      	bne.n	8013bf6 <sfn+0x36>
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 8013bda:	f7ef fdfd 	bl	80037d8 <mg_millis>
 8013bde:	4602      	mov	r2, r0
 8013be0:	460b      	mov	r3, r1
 8013be2:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8013be6:	eb12 0801 	adds.w	r8, r2, r1
 8013bea:	f143 0900 	adc.w	r9, r3, #0
 8013bee:	69fb      	ldr	r3, [r7, #28]
 8013bf0:	e9c3 8900 	strd	r8, r9, [r3]
    c->is_closing = 1;
    MG_INFO(("SNTP 1"));
  } else if (ev == MG_EV_POLL) {
    if (mg_millis() > *expiration_time) c->is_closing = 1;
  }
}
 8013bf4:	e038      	b.n	8013c68 <sfn+0xa8>
  } else if (ev == MG_EV_SNTP_TIME) {
 8013bf6:	68bb      	ldr	r3, [r7, #8]
 8013bf8:	2b12      	cmp	r3, #18
 8013bfa:	d123      	bne.n	8013c44 <sfn+0x84>
    uint64_t t = *(uint64_t *) ev_data;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c02:	e9c7 2304 	strd	r2, r3, [r7, #16]
    s_boot_timestamp = t - mg_millis();
 8013c06:	f7ef fde7 	bl	80037d8 <mg_millis>
 8013c0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013c0e:	1a14      	subs	r4, r2, r0
 8013c10:	eb63 0501 	sbc.w	r5, r3, r1
 8013c14:	4b17      	ldr	r3, [pc, #92]	@ (8013c74 <sfn+0xb4>)
 8013c16:	e9c3 4500 	strd	r4, r5, [r3]
    c->is_closing = 1;
 8013c1a:	68fa      	ldr	r2, [r7, #12]
 8013c1c:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8013c20:	f043 0320 	orr.w	r3, r3, #32
 8013c24:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    MG_INFO(("SNTP 1"));
 8013c28:	4b13      	ldr	r3, [pc, #76]	@ (8013c78 <sfn+0xb8>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	2b01      	cmp	r3, #1
 8013c2e:	dd1b      	ble.n	8013c68 <sfn+0xa8>
 8013c30:	4b12      	ldr	r3, [pc, #72]	@ (8013c7c <sfn+0xbc>)
 8013c32:	2246      	movs	r2, #70	@ 0x46
 8013c34:	4912      	ldr	r1, [pc, #72]	@ (8013c80 <sfn+0xc0>)
 8013c36:	2002      	movs	r0, #2
 8013c38:	f7f8 f9dc 	bl	800bff4 <mg_log_prefix>
 8013c3c:	4811      	ldr	r0, [pc, #68]	@ (8013c84 <sfn+0xc4>)
 8013c3e:	f7f8 fa29 	bl	800c094 <mg_log>
}
 8013c42:	e011      	b.n	8013c68 <sfn+0xa8>
  } else if (ev == MG_EV_POLL) {
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	2b02      	cmp	r3, #2
 8013c48:	d10e      	bne.n	8013c68 <sfn+0xa8>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 8013c4a:	f7ef fdc5 	bl	80037d8 <mg_millis>
 8013c4e:	69fb      	ldr	r3, [r7, #28]
 8013c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c54:	4282      	cmp	r2, r0
 8013c56:	418b      	sbcs	r3, r1
 8013c58:	d206      	bcs.n	8013c68 <sfn+0xa8>
 8013c5a:	68fa      	ldr	r2, [r7, #12]
 8013c5c:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8013c60:	f043 0320 	orr.w	r3, r3, #32
 8013c64:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8013c68:	bf00      	nop
 8013c6a:	3720      	adds	r7, #32
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8013c72:	bf00      	nop
 8013c74:	20014c40 	.word	0x20014c40
 8013c78:	20000244 	.word	0x20000244
 8013c7c:	080328e0 	.word	0x080328e0
 8013c80:	08030a30 	.word	0x08030a30
 8013c84:	08030a44 	.word	0x08030a44

08013c88 <timer_sntp_fn>:

static void timer_sntp_fn(void *param) {  // SNTP timer function. Sync up time
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b082      	sub	sp, #8
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
  mg_sntp_connect(param, "udp://time.google.com:123", sfn, NULL);
 8013c90:	2300      	movs	r3, #0
 8013c92:	4a04      	ldr	r2, [pc, #16]	@ (8013ca4 <timer_sntp_fn+0x1c>)
 8013c94:	4904      	ldr	r1, [pc, #16]	@ (8013ca8 <timer_sntp_fn+0x20>)
 8013c96:	6878      	ldr	r0, [r7, #4]
 8013c98:	f7fd ffd8 	bl	8011c4c <mg_sntp_connect>
}
 8013c9c:	bf00      	nop
 8013c9e:	3708      	adds	r7, #8
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}
 8013ca4:	08013bc1 	.word	0x08013bc1
 8013ca8:	08030a4c 	.word	0x08030a4c

08013cac <authenticate>:

// Parse HTTP requests, return authenticated user or NULL
static struct user *authenticate(struct mg_http_message *hm) {
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b0a6      	sub	sp, #152	@ 0x98
 8013cb0:	af02      	add	r7, sp, #8
 8013cb2:	6078      	str	r0, [r7, #4]
      {"user1", "user1", "user1_token"},
      {"user2", "user2", "user2_token"},
      {NULL, NULL, NULL},
  };
  char user[64], pass[64];
  struct user *u, *result = NULL;
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  mg_http_creds(hm, user, sizeof(user), pass, sizeof(pass));
 8013cba:	f107 0308 	add.w	r3, r7, #8
 8013cbe:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8013cc2:	2240      	movs	r2, #64	@ 0x40
 8013cc4:	9200      	str	r2, [sp, #0]
 8013cc6:	2240      	movs	r2, #64	@ 0x40
 8013cc8:	6878      	ldr	r0, [r7, #4]
 8013cca:	f7f6 fc19 	bl	800a500 <mg_http_creds>
  MG_VERBOSE(("user [%s] pass [%s]", user, pass));
 8013cce:	4b3b      	ldr	r3, [pc, #236]	@ (8013dbc <authenticate+0x110>)
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	2b03      	cmp	r3, #3
 8013cd4:	dd0d      	ble.n	8013cf2 <authenticate+0x46>
 8013cd6:	4b3a      	ldr	r3, [pc, #232]	@ (8013dc0 <authenticate+0x114>)
 8013cd8:	225e      	movs	r2, #94	@ 0x5e
 8013cda:	493a      	ldr	r1, [pc, #232]	@ (8013dc4 <authenticate+0x118>)
 8013cdc:	2004      	movs	r0, #4
 8013cde:	f7f8 f989 	bl	800bff4 <mg_log_prefix>
 8013ce2:	f107 0208 	add.w	r2, r7, #8
 8013ce6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8013cea:	4619      	mov	r1, r3
 8013cec:	4836      	ldr	r0, [pc, #216]	@ (8013dc8 <authenticate+0x11c>)
 8013cee:	f7f8 f9d1 	bl	800c094 <mg_log>

  if (user[0] != '\0' && pass[0] != '\0') {
 8013cf2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d031      	beq.n	8013d5e <authenticate+0xb2>
 8013cfa:	7a3b      	ldrb	r3, [r7, #8]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d02e      	beq.n	8013d5e <authenticate+0xb2>
    // Both user and password is set, search by user/password
    for (u = users; result == NULL && u->name != NULL; u++)
 8013d00:	4b32      	ldr	r3, [pc, #200]	@ (8013dcc <authenticate+0x120>)
 8013d02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8013d06:	e020      	b.n	8013d4a <authenticate+0x9e>
      if (strcmp(user, u->name) == 0 && strcmp(pass, u->pass) == 0) result = u;
 8013d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013d0c:	681a      	ldr	r2, [r3, #0]
 8013d0e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8013d12:	4611      	mov	r1, r2
 8013d14:	4618      	mov	r0, r3
 8013d16:	f7ec fa93 	bl	8000240 <strcmp>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d10f      	bne.n	8013d40 <authenticate+0x94>
 8013d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013d24:	685a      	ldr	r2, [r3, #4]
 8013d26:	f107 0308 	add.w	r3, r7, #8
 8013d2a:	4611      	mov	r1, r2
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	f7ec fa87 	bl	8000240 <strcmp>
 8013d32:	4603      	mov	r3, r0
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d103      	bne.n	8013d40 <authenticate+0x94>
 8013d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013d3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    for (u = users; result == NULL && u->name != NULL; u++)
 8013d40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013d44:	330c      	adds	r3, #12
 8013d46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8013d4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d12c      	bne.n	8013dac <authenticate+0x100>
 8013d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d1d5      	bne.n	8013d08 <authenticate+0x5c>
  if (user[0] != '\0' && pass[0] != '\0') {
 8013d5c:	e026      	b.n	8013dac <authenticate+0x100>
  } else if (user[0] == '\0') {
 8013d5e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d123      	bne.n	8013dae <authenticate+0x102>
    // Only password is set, search by token
    for (u = users; result == NULL && u->name != NULL; u++)
 8013d66:	4b19      	ldr	r3, [pc, #100]	@ (8013dcc <authenticate+0x120>)
 8013d68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8013d6c:	e014      	b.n	8013d98 <authenticate+0xec>
      if (strcmp(pass, u->access_token) == 0) result = u;
 8013d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013d72:	689a      	ldr	r2, [r3, #8]
 8013d74:	f107 0308 	add.w	r3, r7, #8
 8013d78:	4611      	mov	r1, r2
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	f7ec fa60 	bl	8000240 <strcmp>
 8013d80:	4603      	mov	r3, r0
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d103      	bne.n	8013d8e <authenticate+0xe2>
 8013d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013d8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    for (u = users; result == NULL && u->name != NULL; u++)
 8013d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013d92:	330c      	adds	r3, #12
 8013d94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8013d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d106      	bne.n	8013dae <authenticate+0x102>
 8013da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d1e1      	bne.n	8013d6e <authenticate+0xc2>
 8013daa:	e000      	b.n	8013dae <authenticate+0x102>
  if (user[0] != '\0' && pass[0] != '\0') {
 8013dac:	bf00      	nop
  }
  return result;
 8013dae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8013db2:	4618      	mov	r0, r3
 8013db4:	3790      	adds	r7, #144	@ 0x90
 8013db6:	46bd      	mov	sp, r7
 8013db8:	bd80      	pop	{r7, pc}
 8013dba:	bf00      	nop
 8013dbc:	20000244 	.word	0x20000244
 8013dc0:	080328e4 	.word	0x080328e4
 8013dc4:	08030a30 	.word	0x08030a30
 8013dc8:	08030a68 	.word	0x08030a68
 8013dcc:	2000027c 	.word	0x2000027c

08013dd0 <handle_login>:

static void handle_login(struct mg_connection *c, struct user *u) {
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b0c8      	sub	sp, #288	@ 0x120
 8013dd4:	af06      	add	r7, sp, #24
 8013dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013dda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8013dde:	6018      	str	r0, [r3, #0]
 8013de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013de4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013de8:	6019      	str	r1, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
 8013dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013dee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	689a      	ldr	r2, [r3, #8]
              "Set-Cookie: access_token=%s; Path=/; "
              "%sHttpOnly; SameSite=Lax; Max-Age=%d\r\n",
              u->access_token, c->is_tls ? "Secure; " : "", 3600 * 24);
 8013df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013dfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8013e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013e08:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d001      	beq.n	8013e12 <handle_login+0x42>
 8013e0e:	4b17      	ldr	r3, [pc, #92]	@ (8013e6c <handle_login+0x9c>)
 8013e10:	e000      	b.n	8013e14 <handle_login+0x44>
 8013e12:	4b17      	ldr	r3, [pc, #92]	@ (8013e70 <handle_login+0xa0>)
 8013e14:	f107 0008 	add.w	r0, r7, #8
 8013e18:	4916      	ldr	r1, [pc, #88]	@ (8013e74 <handle_login+0xa4>)
 8013e1a:	9101      	str	r1, [sp, #4]
 8013e1c:	9300      	str	r3, [sp, #0]
 8013e1e:	4613      	mov	r3, r2
 8013e20:	4a15      	ldr	r2, [pc, #84]	@ (8013e78 <handle_login+0xa8>)
 8013e22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8013e26:	f7fd f963 	bl	80110f0 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m}", MG_ESC("user"), MG_ESC(u->name));
 8013e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013e2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	f107 0208 	add.w	r2, r7, #8
 8013e3a:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8013e3e:	f5a1 7082 	sub.w	r0, r1, #260	@ 0x104
 8013e42:	9305      	str	r3, [sp, #20]
 8013e44:	2300      	movs	r3, #0
 8013e46:	9304      	str	r3, [sp, #16]
 8013e48:	4b0c      	ldr	r3, [pc, #48]	@ (8013e7c <handle_login+0xac>)
 8013e4a:	9303      	str	r3, [sp, #12]
 8013e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8013e80 <handle_login+0xb0>)
 8013e4e:	9302      	str	r3, [sp, #8]
 8013e50:	2300      	movs	r3, #0
 8013e52:	9301      	str	r3, [sp, #4]
 8013e54:	4b09      	ldr	r3, [pc, #36]	@ (8013e7c <handle_login+0xac>)
 8013e56:	9300      	str	r3, [sp, #0]
 8013e58:	4b0a      	ldr	r3, [pc, #40]	@ (8013e84 <handle_login+0xb4>)
 8013e5a:	21c8      	movs	r1, #200	@ 0xc8
 8013e5c:	6800      	ldr	r0, [r0, #0]
 8013e5e:	f7f5 fc09 	bl	8009674 <mg_http_reply>
}
 8013e62:	bf00      	nop
 8013e64:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}
 8013e6c:	08030a7c 	.word	0x08030a7c
 8013e70:	08030a88 	.word	0x08030a88
 8013e74:	00015180 	.word	0x00015180
 8013e78:	08030a8c 	.word	0x08030a8c
 8013e7c:	08011491 	.word	0x08011491
 8013e80:	08030ae0 	.word	0x08030ae0
 8013e84:	08030ad8 	.word	0x08030ad8

08013e88 <handle_logout>:

static void handle_logout(struct mg_connection *c) {
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b0c2      	sub	sp, #264	@ 0x108
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013e92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8013e96:	6018      	str	r0, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=; Path=/; "
              "Expires=Thu, 01 Jan 1970 00:00:00 UTC; "
              "%sHttpOnly; Max-Age=0; \r\n",
              c->is_tls ? "Secure; " : "");
 8013e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013e9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8013ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013eaa:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d001      	beq.n	8013eb4 <handle_logout+0x2c>
 8013eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8013ee4 <handle_logout+0x5c>)
 8013eb2:	e000      	b.n	8013eb6 <handle_logout+0x2e>
 8013eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8013ee8 <handle_logout+0x60>)
 8013eb6:	f107 0008 	add.w	r0, r7, #8
 8013eba:	4a0c      	ldr	r2, [pc, #48]	@ (8013eec <handle_logout+0x64>)
 8013ebc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8013ec0:	f7fd f916 	bl	80110f0 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "true\n");
 8013ec4:	f107 0208 	add.w	r2, r7, #8
 8013ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013ecc:	f5a3 7082 	sub.w	r0, r3, #260	@ 0x104
 8013ed0:	4b07      	ldr	r3, [pc, #28]	@ (8013ef0 <handle_logout+0x68>)
 8013ed2:	21c8      	movs	r1, #200	@ 0xc8
 8013ed4:	6800      	ldr	r0, [r0, #0]
 8013ed6:	f7f5 fbcd 	bl	8009674 <mg_http_reply>
}
 8013eda:	bf00      	nop
 8013edc:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	bd80      	pop	{r7, pc}
 8013ee4:	08030a7c 	.word	0x08030a7c
 8013ee8:	08030a88 	.word	0x08030a88
 8013eec:	08030ae8 	.word	0x08030ae8
 8013ef0:	08030b4c 	.word	0x08030b4c

08013ef4 <handle_debug>:

static void handle_debug(struct mg_connection *c, struct mg_http_message *hm) {
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b086      	sub	sp, #24
 8013ef8:	af02      	add	r7, sp, #8
 8013efa:	6078      	str	r0, [r7, #4]
 8013efc:	6039      	str	r1, [r7, #0]
  int level = mg_json_get_long(hm->body, "$.level", MG_LL_DEBUG);
 8013efe:	6839      	ldr	r1, [r7, #0]
 8013f00:	2303      	movs	r3, #3
 8013f02:	4a0b      	ldr	r2, [pc, #44]	@ (8013f30 <handle_debug+0x3c>)
 8013f04:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8013f08:	c903      	ldmia	r1, {r0, r1}
 8013f0a:	f7f8 f821 	bl	800bf50 <mg_json_get_long>
 8013f0e:	60f8      	str	r0, [r7, #12]
  mg_log_set(level);
 8013f10:	4a08      	ldr	r2, [pc, #32]	@ (8013f34 <handle_debug+0x40>)
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	6013      	str	r3, [r2, #0]
  mg_http_reply(c, 200, "", "Debug level set to %d\n", level);
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	9300      	str	r3, [sp, #0]
 8013f1a:	4b07      	ldr	r3, [pc, #28]	@ (8013f38 <handle_debug+0x44>)
 8013f1c:	4a07      	ldr	r2, [pc, #28]	@ (8013f3c <handle_debug+0x48>)
 8013f1e:	21c8      	movs	r1, #200	@ 0xc8
 8013f20:	6878      	ldr	r0, [r7, #4]
 8013f22:	f7f5 fba7 	bl	8009674 <mg_http_reply>
}
 8013f26:	bf00      	nop
 8013f28:	3710      	adds	r7, #16
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	bd80      	pop	{r7, pc}
 8013f2e:	bf00      	nop
 8013f30:	08030b54 	.word	0x08030b54
 8013f34:	20000244 	.word	0x20000244
 8013f38:	08030b5c 	.word	0x08030b5c
 8013f3c:	08030a88 	.word	0x08030a88

08013f40 <print_int_arr>:

static size_t print_int_arr(void (*out)(char, void *), void *ptr, va_list *ap) {
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b08a      	sub	sp, #40	@ 0x28
 8013f44:	af02      	add	r7, sp, #8
 8013f46:	60f8      	str	r0, [r7, #12]
 8013f48:	60b9      	str	r1, [r7, #8]
 8013f4a:	607a      	str	r2, [r7, #4]
  size_t i, len = 0, num = va_arg(*ap, size_t);  // Number of items in the array
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	61bb      	str	r3, [r7, #24]
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	1d19      	adds	r1, r3, #4
 8013f56:	687a      	ldr	r2, [r7, #4]
 8013f58:	6011      	str	r1, [r2, #0]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	617b      	str	r3, [r7, #20]
  int *arr = va_arg(*ap, int *);              // Array ptr
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	1d19      	adds	r1, r3, #4
 8013f64:	687a      	ldr	r2, [r7, #4]
 8013f66:	6011      	str	r1, [r2, #0]
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	613b      	str	r3, [r7, #16]
  for (i = 0; i < num; i++) {
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	61fb      	str	r3, [r7, #28]
 8013f70:	e018      	b.n	8013fa4 <print_int_arr+0x64>
    len += mg_xprintf(out, ptr, "%s%d", i == 0 ? "" : ",", arr[i]);
 8013f72:	69fb      	ldr	r3, [r7, #28]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d101      	bne.n	8013f7c <print_int_arr+0x3c>
 8013f78:	490f      	ldr	r1, [pc, #60]	@ (8013fb8 <print_int_arr+0x78>)
 8013f7a:	e000      	b.n	8013f7e <print_int_arr+0x3e>
 8013f7c:	490f      	ldr	r1, [pc, #60]	@ (8013fbc <print_int_arr+0x7c>)
 8013f7e:	69fb      	ldr	r3, [r7, #28]
 8013f80:	009b      	lsls	r3, r3, #2
 8013f82:	693a      	ldr	r2, [r7, #16]
 8013f84:	4413      	add	r3, r2
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	9300      	str	r3, [sp, #0]
 8013f8a:	460b      	mov	r3, r1
 8013f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8013fc0 <print_int_arr+0x80>)
 8013f8e:	68b9      	ldr	r1, [r7, #8]
 8013f90:	68f8      	ldr	r0, [r7, #12]
 8013f92:	f7f3 faee 	bl	8007572 <mg_xprintf>
 8013f96:	4602      	mov	r2, r0
 8013f98:	69bb      	ldr	r3, [r7, #24]
 8013f9a:	4413      	add	r3, r2
 8013f9c:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < num; i++) {
 8013f9e:	69fb      	ldr	r3, [r7, #28]
 8013fa0:	3301      	adds	r3, #1
 8013fa2:	61fb      	str	r3, [r7, #28]
 8013fa4:	69fa      	ldr	r2, [r7, #28]
 8013fa6:	697b      	ldr	r3, [r7, #20]
 8013fa8:	429a      	cmp	r2, r3
 8013faa:	d3e2      	bcc.n	8013f72 <print_int_arr+0x32>
  }
  return len;
 8013fac:	69bb      	ldr	r3, [r7, #24]
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	3720      	adds	r7, #32
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}
 8013fb6:	bf00      	nop
 8013fb8:	08030a88 	.word	0x08030a88
 8013fbc:	08030b74 	.word	0x08030b74
 8013fc0:	08030b78 	.word	0x08030b78

08013fc4 <handle_stats_get>:

static void handle_stats_get(struct mg_connection *c) {
 8013fc4:	b5b0      	push	{r4, r5, r7, lr}
 8013fc6:	b09e      	sub	sp, #120	@ 0x78
 8013fc8:	af0e      	add	r7, sp, #56	@ 0x38
 8013fca:	6078      	str	r0, [r7, #4]
  int points[] = {21, 22, 22, 19, 18, 20, 23, 23, 22, 22, 22, 23, 22};
 8013fcc:	4b19      	ldr	r3, [pc, #100]	@ (8014034 <handle_stats_get+0x70>)
 8013fce:	f107 040c 	add.w	r4, r7, #12
 8013fd2:	461d      	mov	r5, r3
 8013fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fe0:	682b      	ldr	r3, [r5, #0]
 8013fe2:	6023      	str	r3, [r4, #0]
  mg_http_reply(c, 200, s_json_header, "{%m:%d,%m:%d,%m:[%M]}\n",
 8013fe4:	4b14      	ldr	r3, [pc, #80]	@ (8014038 <handle_stats_get+0x74>)
 8013fe6:	681a      	ldr	r2, [r3, #0]
 8013fe8:	f107 030c 	add.w	r3, r7, #12
 8013fec:	930d      	str	r3, [sp, #52]	@ 0x34
 8013fee:	230d      	movs	r3, #13
 8013ff0:	930c      	str	r3, [sp, #48]	@ 0x30
 8013ff2:	4b12      	ldr	r3, [pc, #72]	@ (801403c <handle_stats_get+0x78>)
 8013ff4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013ff6:	4b12      	ldr	r3, [pc, #72]	@ (8014040 <handle_stats_get+0x7c>)
 8013ff8:	930a      	str	r3, [sp, #40]	@ 0x28
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ffe:	4b11      	ldr	r3, [pc, #68]	@ (8014044 <handle_stats_get+0x80>)
 8014000:	9308      	str	r3, [sp, #32]
 8014002:	2343      	movs	r3, #67	@ 0x43
 8014004:	9307      	str	r3, [sp, #28]
 8014006:	4b10      	ldr	r3, [pc, #64]	@ (8014048 <handle_stats_get+0x84>)
 8014008:	9306      	str	r3, [sp, #24]
 801400a:	2300      	movs	r3, #0
 801400c:	9305      	str	r3, [sp, #20]
 801400e:	4b0d      	ldr	r3, [pc, #52]	@ (8014044 <handle_stats_get+0x80>)
 8014010:	9304      	str	r3, [sp, #16]
 8014012:	2315      	movs	r3, #21
 8014014:	9303      	str	r3, [sp, #12]
 8014016:	4b0d      	ldr	r3, [pc, #52]	@ (801404c <handle_stats_get+0x88>)
 8014018:	9302      	str	r3, [sp, #8]
 801401a:	2300      	movs	r3, #0
 801401c:	9301      	str	r3, [sp, #4]
 801401e:	4b09      	ldr	r3, [pc, #36]	@ (8014044 <handle_stats_get+0x80>)
 8014020:	9300      	str	r3, [sp, #0]
 8014022:	4b0b      	ldr	r3, [pc, #44]	@ (8014050 <handle_stats_get+0x8c>)
 8014024:	21c8      	movs	r1, #200	@ 0xc8
 8014026:	6878      	ldr	r0, [r7, #4]
 8014028:	f7f5 fb24 	bl	8009674 <mg_http_reply>
                MG_ESC("temperature"), 21,  //
                MG_ESC("humidity"), 67,     //
                MG_ESC("points"), print_int_arr,
                sizeof(points) / sizeof(points[0]), points);
}
 801402c:	bf00      	nop
 801402e:	3740      	adds	r7, #64	@ 0x40
 8014030:	46bd      	mov	sp, r7
 8014032:	bdb0      	pop	{r4, r5, r7, pc}
 8014034:	08030bb8 	.word	0x08030bb8
 8014038:	20000278 	.word	0x20000278
 801403c:	08013f41 	.word	0x08013f41
 8014040:	08030b98 	.word	0x08030b98
 8014044:	08011491 	.word	0x08011491
 8014048:	08030ba0 	.word	0x08030ba0
 801404c:	08030bac 	.word	0x08030bac
 8014050:	08030b80 	.word	0x08030b80

08014054 <print_events>:

static size_t print_events(void (*out)(char, void *), void *ptr, va_list *ap) {
 8014054:	b590      	push	{r4, r7, lr}
 8014056:	b0a1      	sub	sp, #132	@ 0x84
 8014058:	af12      	add	r7, sp, #72	@ 0x48
 801405a:	60f8      	str	r0, [r7, #12]
 801405c:	60b9      	str	r1, [r7, #8]
 801405e:	607a      	str	r2, [r7, #4]
  size_t len = 0;
 8014060:	2300      	movs	r3, #0
 8014062:	637b      	str	r3, [r7, #52]	@ 0x34
  struct ui_event ev;
  int pageno = va_arg(*ap, int);
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	1d19      	adds	r1, r3, #4
 801406a:	687a      	ldr	r2, [r7, #4]
 801406c:	6011      	str	r1, [r2, #0]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int no = (pageno - 1) * EVENTS_PER_PAGE;
 8014072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014074:	1e5a      	subs	r2, r3, #1
 8014076:	4613      	mov	r3, r2
 8014078:	009b      	lsls	r3, r3, #2
 801407a:	4413      	add	r3, r2
 801407c:	009b      	lsls	r3, r3, #2
 801407e:	633b      	str	r3, [r7, #48]	@ 0x30
  int end = no + EVENTS_PER_PAGE;
 8014080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014082:	3314      	adds	r3, #20
 8014084:	62bb      	str	r3, [r7, #40]	@ 0x28

  while ((no = ui_event_next(no, &ev)) != 0 && no <= end) {
 8014086:	e037      	b.n	80140f8 <print_events+0xa4>
    len += mg_xprintf(out, ptr, "%s{%m:%lu,%m:%d,%m:%d,%m:%m}\n",  //
 8014088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801408a:	2b00      	cmp	r3, #0
 801408c:	d101      	bne.n	8014092 <print_events+0x3e>
 801408e:	4924      	ldr	r1, [pc, #144]	@ (8014120 <print_events+0xcc>)
 8014090:	e000      	b.n	8014094 <print_events+0x40>
 8014092:	4924      	ldr	r1, [pc, #144]	@ (8014124 <print_events+0xd0>)
 8014094:	69bb      	ldr	r3, [r7, #24]
                      len == 0 ? "" : ",",                         //
                      MG_ESC("time"), ev.timestamp,                //
                      MG_ESC("type"), ev.type,                     //
 8014096:	7d3a      	ldrb	r2, [r7, #20]
    len += mg_xprintf(out, ptr, "%s{%m:%lu,%m:%d,%m:%d,%m:%m}\n",  //
 8014098:	4610      	mov	r0, r2
                      MG_ESC("prio"), ev.prio,                     //
 801409a:	7d7a      	ldrb	r2, [r7, #21]
    len += mg_xprintf(out, ptr, "%s{%m:%lu,%m:%d,%m:%d,%m:%m}\n",  //
 801409c:	4614      	mov	r4, r2
 801409e:	f107 0214 	add.w	r2, r7, #20
 80140a2:	3208      	adds	r2, #8
 80140a4:	9211      	str	r2, [sp, #68]	@ 0x44
 80140a6:	2200      	movs	r2, #0
 80140a8:	9210      	str	r2, [sp, #64]	@ 0x40
 80140aa:	4a1f      	ldr	r2, [pc, #124]	@ (8014128 <print_events+0xd4>)
 80140ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 80140ae:	4a1f      	ldr	r2, [pc, #124]	@ (801412c <print_events+0xd8>)
 80140b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80140b2:	2200      	movs	r2, #0
 80140b4:	920d      	str	r2, [sp, #52]	@ 0x34
 80140b6:	4a1c      	ldr	r2, [pc, #112]	@ (8014128 <print_events+0xd4>)
 80140b8:	920c      	str	r2, [sp, #48]	@ 0x30
 80140ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 80140bc:	4a1c      	ldr	r2, [pc, #112]	@ (8014130 <print_events+0xdc>)
 80140be:	920a      	str	r2, [sp, #40]	@ 0x28
 80140c0:	2200      	movs	r2, #0
 80140c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80140c4:	4a18      	ldr	r2, [pc, #96]	@ (8014128 <print_events+0xd4>)
 80140c6:	9208      	str	r2, [sp, #32]
 80140c8:	9007      	str	r0, [sp, #28]
 80140ca:	4a1a      	ldr	r2, [pc, #104]	@ (8014134 <print_events+0xe0>)
 80140cc:	9206      	str	r2, [sp, #24]
 80140ce:	2200      	movs	r2, #0
 80140d0:	9205      	str	r2, [sp, #20]
 80140d2:	4a15      	ldr	r2, [pc, #84]	@ (8014128 <print_events+0xd4>)
 80140d4:	9204      	str	r2, [sp, #16]
 80140d6:	9303      	str	r3, [sp, #12]
 80140d8:	4b17      	ldr	r3, [pc, #92]	@ (8014138 <print_events+0xe4>)
 80140da:	9302      	str	r3, [sp, #8]
 80140dc:	2300      	movs	r3, #0
 80140de:	9301      	str	r3, [sp, #4]
 80140e0:	4b11      	ldr	r3, [pc, #68]	@ (8014128 <print_events+0xd4>)
 80140e2:	9300      	str	r3, [sp, #0]
 80140e4:	460b      	mov	r3, r1
 80140e6:	4a15      	ldr	r2, [pc, #84]	@ (801413c <print_events+0xe8>)
 80140e8:	68b9      	ldr	r1, [r7, #8]
 80140ea:	68f8      	ldr	r0, [r7, #12]
 80140ec:	f7f3 fa41 	bl	8007572 <mg_xprintf>
 80140f0:	4602      	mov	r2, r0
 80140f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80140f4:	4413      	add	r3, r2
 80140f6:	637b      	str	r3, [r7, #52]	@ 0x34
  while ((no = ui_event_next(no, &ev)) != 0 && no <= end) {
 80140f8:	f107 0314 	add.w	r3, r7, #20
 80140fc:	4619      	mov	r1, r3
 80140fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014100:	f7ff fcf4 	bl	8013aec <ui_event_next>
 8014104:	6338      	str	r0, [r7, #48]	@ 0x30
 8014106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014108:	2b00      	cmp	r3, #0
 801410a:	d003      	beq.n	8014114 <print_events+0xc0>
 801410c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801410e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014110:	429a      	cmp	r2, r3
 8014112:	ddb9      	ble.n	8014088 <print_events+0x34>
                      MG_ESC("text"), MG_ESC(ev.text));
  }

  return len;
 8014114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8014116:	4618      	mov	r0, r3
 8014118:	373c      	adds	r7, #60	@ 0x3c
 801411a:	46bd      	mov	sp, r7
 801411c:	bd90      	pop	{r4, r7, pc}
 801411e:	bf00      	nop
 8014120:	08030a88 	.word	0x08030a88
 8014124:	08030b74 	.word	0x08030b74
 8014128:	08011491 	.word	0x08011491
 801412c:	08030c0c 	.word	0x08030c0c
 8014130:	08030c14 	.word	0x08030c14
 8014134:	08030c1c 	.word	0x08030c1c
 8014138:	08030c24 	.word	0x08030c24
 801413c:	08030bec 	.word	0x08030bec

08014140 <handle_events_get>:

static void handle_events_get(struct mg_connection *c,
                              struct mg_http_message *hm) {
 8014140:	b580      	push	{r7, lr}
 8014142:	b08e      	sub	sp, #56	@ 0x38
 8014144:	af0a      	add	r7, sp, #40	@ 0x28
 8014146:	6078      	str	r0, [r7, #4]
 8014148:	6039      	str	r1, [r7, #0]
  int pageno = mg_json_get_long(hm->body, "$.page", 1);
 801414a:	6839      	ldr	r1, [r7, #0]
 801414c:	2301      	movs	r3, #1
 801414e:	4a12      	ldr	r2, [pc, #72]	@ (8014198 <handle_events_get+0x58>)
 8014150:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8014154:	c903      	ldmia	r1, {r0, r1}
 8014156:	f7f7 fefb 	bl	800bf50 <mg_json_get_long>
 801415a:	60f8      	str	r0, [r7, #12]
  mg_http_reply(c, 200, s_json_header, "{%m:[%M], %m:%d}\n", MG_ESC("arr"),
 801415c:	4b0f      	ldr	r3, [pc, #60]	@ (801419c <handle_events_get+0x5c>)
 801415e:	681a      	ldr	r2, [r3, #0]
 8014160:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014164:	9308      	str	r3, [sp, #32]
 8014166:	4b0e      	ldr	r3, [pc, #56]	@ (80141a0 <handle_events_get+0x60>)
 8014168:	9307      	str	r3, [sp, #28]
 801416a:	2300      	movs	r3, #0
 801416c:	9306      	str	r3, [sp, #24]
 801416e:	4b0d      	ldr	r3, [pc, #52]	@ (80141a4 <handle_events_get+0x64>)
 8014170:	9305      	str	r3, [sp, #20]
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	9304      	str	r3, [sp, #16]
 8014176:	4b0c      	ldr	r3, [pc, #48]	@ (80141a8 <handle_events_get+0x68>)
 8014178:	9303      	str	r3, [sp, #12]
 801417a:	4b0c      	ldr	r3, [pc, #48]	@ (80141ac <handle_events_get+0x6c>)
 801417c:	9302      	str	r3, [sp, #8]
 801417e:	2300      	movs	r3, #0
 8014180:	9301      	str	r3, [sp, #4]
 8014182:	4b08      	ldr	r3, [pc, #32]	@ (80141a4 <handle_events_get+0x64>)
 8014184:	9300      	str	r3, [sp, #0]
 8014186:	4b0a      	ldr	r3, [pc, #40]	@ (80141b0 <handle_events_get+0x70>)
 8014188:	21c8      	movs	r1, #200	@ 0xc8
 801418a:	6878      	ldr	r0, [r7, #4]
 801418c:	f7f5 fa72 	bl	8009674 <mg_http_reply>
                print_events, pageno, MG_ESC("totalCount"), MAX_EVENTS_NO);
}
 8014190:	bf00      	nop
 8014192:	3710      	adds	r7, #16
 8014194:	46bd      	mov	sp, r7
 8014196:	bd80      	pop	{r7, pc}
 8014198:	08030c2c 	.word	0x08030c2c
 801419c:	20000278 	.word	0x20000278
 80141a0:	08030c48 	.word	0x08030c48
 80141a4:	08011491 	.word	0x08011491
 80141a8:	08014055 	.word	0x08014055
 80141ac:	08030c54 	.word	0x08030c54
 80141b0:	08030c34 	.word	0x08030c34

080141b4 <handle_settings_set>:

static void handle_settings_set(struct mg_connection *c, struct mg_str body) {
 80141b4:	b590      	push	{r4, r7, lr}
 80141b6:	b095      	sub	sp, #84	@ 0x54
 80141b8:	af0a      	add	r7, sp, #40	@ 0x28
 80141ba:	60f8      	str	r0, [r7, #12]
 80141bc:	1d3b      	adds	r3, r7, #4
 80141be:	e883 0006 	stmia.w	r3, {r1, r2}
  struct settings settings;
  char *s = mg_json_get_str(body, "$.device_name");
 80141c2:	4a37      	ldr	r2, [pc, #220]	@ (80142a0 <handle_settings_set+0xec>)
 80141c4:	1d3b      	adds	r3, r7, #4
 80141c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80141ca:	f7f7 fe73 	bl	800beb4 <mg_json_get_str>
 80141ce:	6278      	str	r0, [r7, #36]	@ 0x24
  bool ok = true;
 80141d0:	2301      	movs	r3, #1
 80141d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  memset(&settings, 0, sizeof(settings));
 80141d6:	f107 0310 	add.w	r3, r7, #16
 80141da:	2210      	movs	r2, #16
 80141dc:	2100      	movs	r1, #0
 80141de:	4618      	mov	r0, r3
 80141e0:	f017 fc94 	bl	802bb0c <memset>
  mg_json_get_bool(body, "$.log_enabled", &settings.log_enabled);
 80141e4:	f107 0310 	add.w	r3, r7, #16
 80141e8:	4a2e      	ldr	r2, [pc, #184]	@ (80142a4 <handle_settings_set+0xf0>)
 80141ea:	1d39      	adds	r1, r7, #4
 80141ec:	c903      	ldmia	r1, {r0, r1}
 80141ee:	f7f7 fd96 	bl	800bd1e <mg_json_get_bool>
  settings.log_level = mg_json_get_long(body, "$.log_level", 0);
 80141f2:	2300      	movs	r3, #0
 80141f4:	4a2c      	ldr	r2, [pc, #176]	@ (80142a8 <handle_settings_set+0xf4>)
 80141f6:	1d39      	adds	r1, r7, #4
 80141f8:	c903      	ldmia	r1, {r0, r1}
 80141fa:	f7f7 fea9 	bl	800bf50 <mg_json_get_long>
 80141fe:	4603      	mov	r3, r0
 8014200:	617b      	str	r3, [r7, #20]
  settings.brightness = mg_json_get_long(body, "$.brightness", 0);
 8014202:	2300      	movs	r3, #0
 8014204:	4a29      	ldr	r2, [pc, #164]	@ (80142ac <handle_settings_set+0xf8>)
 8014206:	1d39      	adds	r1, r7, #4
 8014208:	c903      	ldmia	r1, {r0, r1}
 801420a:	f7f7 fea1 	bl	800bf50 <mg_json_get_long>
 801420e:	4603      	mov	r3, r0
 8014210:	61bb      	str	r3, [r7, #24]
  if (s && strlen(s) < MAX_DEVICE_NAME) {
 8014212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014214:	2b00      	cmp	r3, #0
 8014216:	d00c      	beq.n	8014232 <handle_settings_set+0x7e>
 8014218:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801421a:	f7ec f871 	bl	8000300 <strlen>
 801421e:	4603      	mov	r3, r0
 8014220:	2b27      	cmp	r3, #39	@ 0x27
 8014222:	d806      	bhi.n	8014232 <handle_settings_set+0x7e>
    free(settings.device_name);
 8014224:	69fb      	ldr	r3, [r7, #28]
 8014226:	4618      	mov	r0, r3
 8014228:	f016 fa3c 	bl	802a6a4 <free>
    settings.device_name = s;
 801422c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801422e:	61fb      	str	r3, [r7, #28]
 8014230:	e002      	b.n	8014238 <handle_settings_set+0x84>
  } else {
    free(s);
 8014232:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014234:	f016 fa36 	bl	802a6a4 <free>
  }
  s_settings = settings; // Save to the device flash
 8014238:	4b1d      	ldr	r3, [pc, #116]	@ (80142b0 <handle_settings_set+0xfc>)
 801423a:	461c      	mov	r4, r3
 801423c:	f107 0310 	add.w	r3, r7, #16
 8014240:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014242:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mg_http_reply(c, 200, s_json_header,
 8014246:	4b1b      	ldr	r3, [pc, #108]	@ (80142b4 <handle_settings_set+0x100>)
 8014248:	6819      	ldr	r1, [r3, #0]
 801424a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801424e:	2b00      	cmp	r3, #0
 8014250:	d001      	beq.n	8014256 <handle_settings_set+0xa2>
 8014252:	4b19      	ldr	r3, [pc, #100]	@ (80142b8 <handle_settings_set+0x104>)
 8014254:	e000      	b.n	8014258 <handle_settings_set+0xa4>
 8014256:	4b19      	ldr	r3, [pc, #100]	@ (80142bc <handle_settings_set+0x108>)
 8014258:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 801425c:	2a00      	cmp	r2, #0
 801425e:	d001      	beq.n	8014264 <handle_settings_set+0xb0>
 8014260:	4a17      	ldr	r2, [pc, #92]	@ (80142c0 <handle_settings_set+0x10c>)
 8014262:	e000      	b.n	8014266 <handle_settings_set+0xb2>
 8014264:	4a17      	ldr	r2, [pc, #92]	@ (80142c4 <handle_settings_set+0x110>)
 8014266:	9209      	str	r2, [sp, #36]	@ 0x24
 8014268:	2200      	movs	r2, #0
 801426a:	9208      	str	r2, [sp, #32]
 801426c:	4a16      	ldr	r2, [pc, #88]	@ (80142c8 <handle_settings_set+0x114>)
 801426e:	9207      	str	r2, [sp, #28]
 8014270:	4a16      	ldr	r2, [pc, #88]	@ (80142cc <handle_settings_set+0x118>)
 8014272:	9206      	str	r2, [sp, #24]
 8014274:	2200      	movs	r2, #0
 8014276:	9205      	str	r2, [sp, #20]
 8014278:	4a13      	ldr	r2, [pc, #76]	@ (80142c8 <handle_settings_set+0x114>)
 801427a:	9204      	str	r2, [sp, #16]
 801427c:	9303      	str	r3, [sp, #12]
 801427e:	4b14      	ldr	r3, [pc, #80]	@ (80142d0 <handle_settings_set+0x11c>)
 8014280:	9302      	str	r3, [sp, #8]
 8014282:	2300      	movs	r3, #0
 8014284:	9301      	str	r3, [sp, #4]
 8014286:	4b10      	ldr	r3, [pc, #64]	@ (80142c8 <handle_settings_set+0x114>)
 8014288:	9300      	str	r3, [sp, #0]
 801428a:	4b12      	ldr	r3, [pc, #72]	@ (80142d4 <handle_settings_set+0x120>)
 801428c:	460a      	mov	r2, r1
 801428e:	21c8      	movs	r1, #200	@ 0xc8
 8014290:	68f8      	ldr	r0, [r7, #12]
 8014292:	f7f5 f9ef 	bl	8009674 <mg_http_reply>
                "{%m:%s,%m:%m}",                          //
                MG_ESC("status"), ok ? "true" : "false",  //
                MG_ESC("message"), MG_ESC(ok ? "Success" : "Failed"));
}
 8014296:	bf00      	nop
 8014298:	372c      	adds	r7, #44	@ 0x2c
 801429a:	46bd      	mov	sp, r7
 801429c:	bd90      	pop	{r4, r7, pc}
 801429e:	bf00      	nop
 80142a0:	08030c58 	.word	0x08030c58
 80142a4:	08030c68 	.word	0x08030c68
 80142a8:	08030c78 	.word	0x08030c78
 80142ac:	08030c84 	.word	0x08030c84
 80142b0:	20000268 	.word	0x20000268
 80142b4:	20000278 	.word	0x20000278
 80142b8:	08030c94 	.word	0x08030c94
 80142bc:	08030c9c 	.word	0x08030c9c
 80142c0:	08030ca4 	.word	0x08030ca4
 80142c4:	08030cac 	.word	0x08030cac
 80142c8:	08011491 	.word	0x08011491
 80142cc:	08030cc4 	.word	0x08030cc4
 80142d0:	08030ccc 	.word	0x08030ccc
 80142d4:	08030cb4 	.word	0x08030cb4

080142d8 <handle_settings_get>:

static void handle_settings_get(struct mg_connection *c) {
 80142d8:	b590      	push	{r4, r7, lr}
 80142da:	b095      	sub	sp, #84	@ 0x54
 80142dc:	af12      	add	r7, sp, #72	@ 0x48
 80142de:	6078      	str	r0, [r7, #4]
  mg_http_reply(c, 200, s_json_header, "{%m:%s,%m:%hhu,%m:%hhu,%m:%m}\n",  //
 80142e0:	4b1c      	ldr	r3, [pc, #112]	@ (8014354 <handle_settings_get+0x7c>)
 80142e2:	681c      	ldr	r4, [r3, #0]
                MG_ESC("log_enabled"),
                s_settings.log_enabled ? "true" : "false",    //
 80142e4:	4b1c      	ldr	r3, [pc, #112]	@ (8014358 <handle_settings_get+0x80>)
 80142e6:	781b      	ldrb	r3, [r3, #0]
  mg_http_reply(c, 200, s_json_header, "{%m:%s,%m:%hhu,%m:%hhu,%m:%m}\n",  //
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d001      	beq.n	80142f0 <handle_settings_get+0x18>
 80142ec:	4b1b      	ldr	r3, [pc, #108]	@ (801435c <handle_settings_get+0x84>)
 80142ee:	e000      	b.n	80142f2 <handle_settings_get+0x1a>
 80142f0:	4b1b      	ldr	r3, [pc, #108]	@ (8014360 <handle_settings_get+0x88>)
 80142f2:	4a19      	ldr	r2, [pc, #100]	@ (8014358 <handle_settings_get+0x80>)
 80142f4:	6852      	ldr	r2, [r2, #4]
 80142f6:	4918      	ldr	r1, [pc, #96]	@ (8014358 <handle_settings_get+0x80>)
 80142f8:	6889      	ldr	r1, [r1, #8]
 80142fa:	4817      	ldr	r0, [pc, #92]	@ (8014358 <handle_settings_get+0x80>)
 80142fc:	68c0      	ldr	r0, [r0, #12]
 80142fe:	9011      	str	r0, [sp, #68]	@ 0x44
 8014300:	2000      	movs	r0, #0
 8014302:	9010      	str	r0, [sp, #64]	@ 0x40
 8014304:	4817      	ldr	r0, [pc, #92]	@ (8014364 <handle_settings_get+0x8c>)
 8014306:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014308:	4817      	ldr	r0, [pc, #92]	@ (8014368 <handle_settings_get+0x90>)
 801430a:	900e      	str	r0, [sp, #56]	@ 0x38
 801430c:	2000      	movs	r0, #0
 801430e:	900d      	str	r0, [sp, #52]	@ 0x34
 8014310:	4814      	ldr	r0, [pc, #80]	@ (8014364 <handle_settings_get+0x8c>)
 8014312:	900c      	str	r0, [sp, #48]	@ 0x30
 8014314:	910b      	str	r1, [sp, #44]	@ 0x2c
 8014316:	4915      	ldr	r1, [pc, #84]	@ (801436c <handle_settings_get+0x94>)
 8014318:	910a      	str	r1, [sp, #40]	@ 0x28
 801431a:	2100      	movs	r1, #0
 801431c:	9109      	str	r1, [sp, #36]	@ 0x24
 801431e:	4911      	ldr	r1, [pc, #68]	@ (8014364 <handle_settings_get+0x8c>)
 8014320:	9108      	str	r1, [sp, #32]
 8014322:	9207      	str	r2, [sp, #28]
 8014324:	4a12      	ldr	r2, [pc, #72]	@ (8014370 <handle_settings_get+0x98>)
 8014326:	9206      	str	r2, [sp, #24]
 8014328:	2200      	movs	r2, #0
 801432a:	9205      	str	r2, [sp, #20]
 801432c:	4a0d      	ldr	r2, [pc, #52]	@ (8014364 <handle_settings_get+0x8c>)
 801432e:	9204      	str	r2, [sp, #16]
 8014330:	9303      	str	r3, [sp, #12]
 8014332:	4b10      	ldr	r3, [pc, #64]	@ (8014374 <handle_settings_get+0x9c>)
 8014334:	9302      	str	r3, [sp, #8]
 8014336:	2300      	movs	r3, #0
 8014338:	9301      	str	r3, [sp, #4]
 801433a:	4b0a      	ldr	r3, [pc, #40]	@ (8014364 <handle_settings_get+0x8c>)
 801433c:	9300      	str	r3, [sp, #0]
 801433e:	4b0e      	ldr	r3, [pc, #56]	@ (8014378 <handle_settings_get+0xa0>)
 8014340:	4622      	mov	r2, r4
 8014342:	21c8      	movs	r1, #200	@ 0xc8
 8014344:	6878      	ldr	r0, [r7, #4]
 8014346:	f7f5 f995 	bl	8009674 <mg_http_reply>
                MG_ESC("log_level"), s_settings.log_level,    //
                MG_ESC("brightness"), s_settings.brightness,  //
                MG_ESC("device_name"), MG_ESC(s_settings.device_name));
}
 801434a:	bf00      	nop
 801434c:	370c      	adds	r7, #12
 801434e:	46bd      	mov	sp, r7
 8014350:	bd90      	pop	{r4, r7, pc}
 8014352:	bf00      	nop
 8014354:	20000278 	.word	0x20000278
 8014358:	20000268 	.word	0x20000268
 801435c:	08030c94 	.word	0x08030c94
 8014360:	08030c9c 	.word	0x08030c9c
 8014364:	08011491 	.word	0x08011491
 8014368:	08030cf4 	.word	0x08030cf4
 801436c:	08030d00 	.word	0x08030d00
 8014370:	08030d0c 	.word	0x08030d0c
 8014374:	08030d18 	.word	0x08030d18
 8014378:	08030cd4 	.word	0x08030cd4

0801437c <handle_firmware_upload>:

static void handle_firmware_upload(struct mg_connection *c,
                                   struct mg_http_message *hm) {
 801437c:	b580      	push	{r7, lr}
 801437e:	b0a8      	sub	sp, #160	@ 0xa0
 8014380:	af04      	add	r7, sp, #16
 8014382:	6078      	str	r0, [r7, #4]
 8014384:	6039      	str	r1, [r7, #0]
  char name[64], offset[20], total[20];
  struct mg_str data = hm->body;
 8014386:	683a      	ldr	r2, [r7, #0]
 8014388:	f107 0308 	add.w	r3, r7, #8
 801438c:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8014390:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014394:	e883 0003 	stmia.w	r3, {r0, r1}
  long ofs = -1, tot = -1;
 8014398:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801439c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80143a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80143a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  name[0] = offset[0] = '\0';
 80143a8:	2300      	movs	r3, #0
 80143aa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80143ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80143b2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  mg_http_get_var(&hm->query, "name", name, sizeof(name));
 80143b6:	683b      	ldr	r3, [r7, #0]
 80143b8:	f103 0010 	add.w	r0, r3, #16
 80143bc:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80143c0:	2340      	movs	r3, #64	@ 0x40
 80143c2:	4963      	ldr	r1, [pc, #396]	@ (8014550 <handle_firmware_upload+0x1d4>)
 80143c4:	f7f3 fff8 	bl	80083b8 <mg_http_get_var>
  mg_http_get_var(&hm->query, "offset", offset, sizeof(offset));
 80143c8:	683b      	ldr	r3, [r7, #0]
 80143ca:	f103 0010 	add.w	r0, r3, #16
 80143ce:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80143d2:	2314      	movs	r3, #20
 80143d4:	495f      	ldr	r1, [pc, #380]	@ (8014554 <handle_firmware_upload+0x1d8>)
 80143d6:	f7f3 ffef 	bl	80083b8 <mg_http_get_var>
  mg_http_get_var(&hm->query, "total", total, sizeof(total));
 80143da:	683b      	ldr	r3, [r7, #0]
 80143dc:	f103 0010 	add.w	r0, r3, #16
 80143e0:	f107 0210 	add.w	r2, r7, #16
 80143e4:	2314      	movs	r3, #20
 80143e6:	495c      	ldr	r1, [pc, #368]	@ (8014558 <handle_firmware_upload+0x1dc>)
 80143e8:	f7f3 ffe6 	bl	80083b8 <mg_http_get_var>
  MG_INFO(("File %s, offset %s, len %lu", name, offset, data.len));
 80143ec:	4b5b      	ldr	r3, [pc, #364]	@ (801455c <handle_firmware_upload+0x1e0>)
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	2b01      	cmp	r3, #1
 80143f2:	dd0d      	ble.n	8014410 <handle_firmware_upload+0x94>
 80143f4:	4b5a      	ldr	r3, [pc, #360]	@ (8014560 <handle_firmware_upload+0x1e4>)
 80143f6:	22d8      	movs	r2, #216	@ 0xd8
 80143f8:	495a      	ldr	r1, [pc, #360]	@ (8014564 <handle_firmware_upload+0x1e8>)
 80143fa:	2002      	movs	r0, #2
 80143fc:	f7f7 fdfa 	bl	800bff4 <mg_log_prefix>
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8014406:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 801440a:	4857      	ldr	r0, [pc, #348]	@ (8014568 <handle_firmware_upload+0x1ec>)
 801440c:	f7f7 fe42 	bl	800c094 <mg_log>
  if ((ofs = mg_json_get_long(mg_str(offset), "$", -1)) < 0 ||
 8014410:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8014414:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8014418:	4611      	mov	r1, r2
 801441a:	4618      	mov	r0, r3
 801441c:	f7fd fc50 	bl	8011cc0 <mg_str_s>
 8014420:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014424:	4a51      	ldr	r2, [pc, #324]	@ (801456c <handle_firmware_upload+0x1f0>)
 8014426:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 801442a:	c903      	ldmia	r1, {r0, r1}
 801442c:	f7f7 fd90 	bl	800bf50 <mg_json_get_long>
 8014430:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8014434:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014438:	2b00      	cmp	r3, #0
 801443a:	db15      	blt.n	8014468 <handle_firmware_upload+0xec>
      (tot = mg_json_get_long(mg_str(total), "$", -1)) < 0) {
 801443c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8014440:	f107 0210 	add.w	r2, r7, #16
 8014444:	4611      	mov	r1, r2
 8014446:	4618      	mov	r0, r3
 8014448:	f7fd fc3a 	bl	8011cc0 <mg_str_s>
 801444c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014450:	4a46      	ldr	r2, [pc, #280]	@ (801456c <handle_firmware_upload+0x1f0>)
 8014452:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8014456:	c903      	ldmia	r1, {r0, r1}
 8014458:	f7f7 fd7a 	bl	800bf50 <mg_json_get_long>
 801445c:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
  if ((ofs = mg_json_get_long(mg_str(offset), "$", -1)) < 0 ||
 8014460:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014464:	2b00      	cmp	r3, #0
 8014466:	da07      	bge.n	8014478 <handle_firmware_upload+0xfc>
    mg_http_reply(c, 500, "", "offset and total not set\n");
 8014468:	4b41      	ldr	r3, [pc, #260]	@ (8014570 <handle_firmware_upload+0x1f4>)
 801446a:	4a42      	ldr	r2, [pc, #264]	@ (8014574 <handle_firmware_upload+0x1f8>)
 801446c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8014470:	6878      	ldr	r0, [r7, #4]
 8014472:	f7f5 f8ff 	bl	8009674 <mg_http_reply>
 8014476:	e067      	b.n	8014548 <handle_firmware_upload+0x1cc>
  } else if (ofs == 0 && mg_ota_begin((size_t) tot) == false) {
 8014478:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801447c:	2b00      	cmp	r3, #0
 801447e:	d115      	bne.n	80144ac <handle_firmware_upload+0x130>
 8014480:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014484:	4618      	mov	r0, r3
 8014486:	f7fc fd47 	bl	8010f18 <mg_ota_begin>
 801448a:	4603      	mov	r3, r0
 801448c:	f083 0301 	eor.w	r3, r3, #1
 8014490:	b2db      	uxtb	r3, r3
 8014492:	2b00      	cmp	r3, #0
 8014494:	d00a      	beq.n	80144ac <handle_firmware_upload+0x130>
    mg_http_reply(c, 500, "", "mg_ota_begin(%ld) failed\n", tot);
 8014496:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801449a:	9300      	str	r3, [sp, #0]
 801449c:	4b36      	ldr	r3, [pc, #216]	@ (8014578 <handle_firmware_upload+0x1fc>)
 801449e:	4a35      	ldr	r2, [pc, #212]	@ (8014574 <handle_firmware_upload+0x1f8>)
 80144a0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80144a4:	6878      	ldr	r0, [r7, #4]
 80144a6:	f7f5 f8e5 	bl	8009674 <mg_http_reply>
 80144aa:	e04d      	b.n	8014548 <handle_firmware_upload+0x1cc>
  } else if (data.len > 0 && mg_ota_write(data.buf, data.len) == false) {
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d01a      	beq.n	80144e8 <handle_firmware_upload+0x16c>
 80144b2:	68bb      	ldr	r3, [r7, #8]
 80144b4:	68fa      	ldr	r2, [r7, #12]
 80144b6:	4611      	mov	r1, r2
 80144b8:	4618      	mov	r0, r3
 80144ba:	f7fc fd38 	bl	8010f2e <mg_ota_write>
 80144be:	4603      	mov	r3, r0
 80144c0:	f083 0301 	eor.w	r3, r3, #1
 80144c4:	b2db      	uxtb	r3, r3
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d00e      	beq.n	80144e8 <handle_firmware_upload+0x16c>
    mg_http_reply(c, 500, "", "mg_ota_write(%lu) @%ld failed\n", data.len, ofs);
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80144d0:	9201      	str	r2, [sp, #4]
 80144d2:	9300      	str	r3, [sp, #0]
 80144d4:	4b29      	ldr	r3, [pc, #164]	@ (801457c <handle_firmware_upload+0x200>)
 80144d6:	4a27      	ldr	r2, [pc, #156]	@ (8014574 <handle_firmware_upload+0x1f8>)
 80144d8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80144dc:	6878      	ldr	r0, [r7, #4]
 80144de:	f7f5 f8c9 	bl	8009674 <mg_http_reply>
    mg_ota_end();
 80144e2:	f7fc fd30 	bl	8010f46 <mg_ota_end>
 80144e6:	e02f      	b.n	8014548 <handle_firmware_upload+0x1cc>
  } else if (data.len == 0 && mg_ota_end() == false) {
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d112      	bne.n	8014514 <handle_firmware_upload+0x198>
 80144ee:	f7fc fd2a 	bl	8010f46 <mg_ota_end>
 80144f2:	4603      	mov	r3, r0
 80144f4:	f083 0301 	eor.w	r3, r3, #1
 80144f8:	b2db      	uxtb	r3, r3
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d00a      	beq.n	8014514 <handle_firmware_upload+0x198>
    mg_http_reply(c, 500, "", "mg_ota_end() failed\n", tot);
 80144fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014502:	9300      	str	r3, [sp, #0]
 8014504:	4b1e      	ldr	r3, [pc, #120]	@ (8014580 <handle_firmware_upload+0x204>)
 8014506:	4a1b      	ldr	r2, [pc, #108]	@ (8014574 <handle_firmware_upload+0x1f8>)
 8014508:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 801450c:	6878      	ldr	r0, [r7, #4]
 801450e:	f7f5 f8b1 	bl	8009674 <mg_http_reply>
 8014512:	e019      	b.n	8014548 <handle_firmware_upload+0x1cc>
  } else {
    mg_http_reply(c, 200, s_json_header, "true\n");
 8014514:	4b1b      	ldr	r3, [pc, #108]	@ (8014584 <handle_firmware_upload+0x208>)
 8014516:	681a      	ldr	r2, [r3, #0]
 8014518:	4b1b      	ldr	r3, [pc, #108]	@ (8014588 <handle_firmware_upload+0x20c>)
 801451a:	21c8      	movs	r1, #200	@ 0xc8
 801451c:	6878      	ldr	r0, [r7, #4]
 801451e:	f7f5 f8a9 	bl	8009674 <mg_http_reply>
    if (data.len == 0) {
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d10f      	bne.n	8014548 <handle_firmware_upload+0x1cc>
      // Successful mg_ota_end() called, schedule device reboot
      mg_timer_add(c->mgr, 500, 0, (void (*)(void *)) mg_device_reset, NULL);
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	6859      	ldr	r1, [r3, #4]
 801452c:	2300      	movs	r3, #0
 801452e:	9302      	str	r3, [sp, #8]
 8014530:	4b16      	ldr	r3, [pc, #88]	@ (801458c <handle_firmware_upload+0x210>)
 8014532:	9301      	str	r3, [sp, #4]
 8014534:	2300      	movs	r3, #0
 8014536:	9300      	str	r3, [sp, #0]
 8014538:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 801453c:	f04f 0300 	mov.w	r3, #0
 8014540:	4608      	mov	r0, r1
 8014542:	f7f9 fb35 	bl	800dbb0 <mg_timer_add>
    }
  }
}
 8014546:	e7ff      	b.n	8014548 <handle_firmware_upload+0x1cc>
 8014548:	bf00      	nop
 801454a:	3790      	adds	r7, #144	@ 0x90
 801454c:	46bd      	mov	sp, r7
 801454e:	bd80      	pop	{r7, pc}
 8014550:	08030d24 	.word	0x08030d24
 8014554:	08030d2c 	.word	0x08030d2c
 8014558:	08030d34 	.word	0x08030d34
 801455c:	20000244 	.word	0x20000244
 8014560:	080328f4 	.word	0x080328f4
 8014564:	08030a30 	.word	0x08030a30
 8014568:	08030d3c 	.word	0x08030d3c
 801456c:	08030d58 	.word	0x08030d58
 8014570:	08030d5c 	.word	0x08030d5c
 8014574:	08030a88 	.word	0x08030a88
 8014578:	08030d78 	.word	0x08030d78
 801457c:	08030d94 	.word	0x08030d94
 8014580:	08030db4 	.word	0x08030db4
 8014584:	20000278 	.word	0x20000278
 8014588:	08030b4c 	.word	0x08030b4c
 801458c:	0800607d 	.word	0x0800607d

08014590 <handle_firmware_commit>:

static void handle_firmware_commit(struct mg_connection *c) {
 8014590:	b590      	push	{r4, r7, lr}
 8014592:	b085      	sub	sp, #20
 8014594:	af02      	add	r7, sp, #8
 8014596:	6078      	str	r0, [r7, #4]
  mg_http_reply(c, 200, s_json_header, "%s\n",
 8014598:	4b0a      	ldr	r3, [pc, #40]	@ (80145c4 <handle_firmware_commit+0x34>)
 801459a:	681c      	ldr	r4, [r3, #0]
                mg_ota_commit() ? "true" : "false");
 801459c:	f7fc fcdb 	bl	8010f56 <mg_ota_commit>
 80145a0:	4603      	mov	r3, r0
  mg_http_reply(c, 200, s_json_header, "%s\n",
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d001      	beq.n	80145aa <handle_firmware_commit+0x1a>
 80145a6:	4b08      	ldr	r3, [pc, #32]	@ (80145c8 <handle_firmware_commit+0x38>)
 80145a8:	e000      	b.n	80145ac <handle_firmware_commit+0x1c>
 80145aa:	4b08      	ldr	r3, [pc, #32]	@ (80145cc <handle_firmware_commit+0x3c>)
 80145ac:	9300      	str	r3, [sp, #0]
 80145ae:	4b08      	ldr	r3, [pc, #32]	@ (80145d0 <handle_firmware_commit+0x40>)
 80145b0:	4622      	mov	r2, r4
 80145b2:	21c8      	movs	r1, #200	@ 0xc8
 80145b4:	6878      	ldr	r0, [r7, #4]
 80145b6:	f7f5 f85d 	bl	8009674 <mg_http_reply>
}
 80145ba:	bf00      	nop
 80145bc:	370c      	adds	r7, #12
 80145be:	46bd      	mov	sp, r7
 80145c0:	bd90      	pop	{r4, r7, pc}
 80145c2:	bf00      	nop
 80145c4:	20000278 	.word	0x20000278
 80145c8:	08030c94 	.word	0x08030c94
 80145cc:	08030c9c 	.word	0x08030c9c
 80145d0:	08030dcc 	.word	0x08030dcc

080145d4 <handle_firmware_rollback>:

static void handle_firmware_rollback(struct mg_connection *c) {
 80145d4:	b590      	push	{r4, r7, lr}
 80145d6:	b085      	sub	sp, #20
 80145d8:	af02      	add	r7, sp, #8
 80145da:	6078      	str	r0, [r7, #4]
  mg_http_reply(c, 200, s_json_header, "%s\n",
 80145dc:	4b0a      	ldr	r3, [pc, #40]	@ (8014608 <handle_firmware_rollback+0x34>)
 80145de:	681c      	ldr	r4, [r3, #0]
                mg_ota_rollback() ? "true" : "false");
 80145e0:	f7fc fcc1 	bl	8010f66 <mg_ota_rollback>
 80145e4:	4603      	mov	r3, r0
  mg_http_reply(c, 200, s_json_header, "%s\n",
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d001      	beq.n	80145ee <handle_firmware_rollback+0x1a>
 80145ea:	4b08      	ldr	r3, [pc, #32]	@ (801460c <handle_firmware_rollback+0x38>)
 80145ec:	e000      	b.n	80145f0 <handle_firmware_rollback+0x1c>
 80145ee:	4b08      	ldr	r3, [pc, #32]	@ (8014610 <handle_firmware_rollback+0x3c>)
 80145f0:	9300      	str	r3, [sp, #0]
 80145f2:	4b08      	ldr	r3, [pc, #32]	@ (8014614 <handle_firmware_rollback+0x40>)
 80145f4:	4622      	mov	r2, r4
 80145f6:	21c8      	movs	r1, #200	@ 0xc8
 80145f8:	6878      	ldr	r0, [r7, #4]
 80145fa:	f7f5 f83b 	bl	8009674 <mg_http_reply>
}
 80145fe:	bf00      	nop
 8014600:	370c      	adds	r7, #12
 8014602:	46bd      	mov	sp, r7
 8014604:	bd90      	pop	{r4, r7, pc}
 8014606:	bf00      	nop
 8014608:	20000278 	.word	0x20000278
 801460c:	08030c94 	.word	0x08030c94
 8014610:	08030c9c 	.word	0x08030c9c
 8014614:	08030dcc 	.word	0x08030dcc

08014618 <print_status>:

static size_t print_status(void (*out)(char, void *), void *ptr, va_list *ap) {
 8014618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801461a:	b099      	sub	sp, #100	@ 0x64
 801461c:	af12      	add	r7, sp, #72	@ 0x48
 801461e:	60f8      	str	r0, [r7, #12]
 8014620:	60b9      	str	r1, [r7, #8]
 8014622:	607a      	str	r2, [r7, #4]
  int fw = va_arg(*ap, int);
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	1d19      	adds	r1, r3, #4
 801462a:	687a      	ldr	r2, [r7, #4]
 801462c:	6011      	str	r1, [r2, #0]
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, ptr, "{%m:%d,%m:%c%lx%c,%m:%u,%m:%u}\n",
 8014632:	6978      	ldr	r0, [r7, #20]
 8014634:	f7fc fc9f 	bl	8010f76 <mg_ota_status>
 8014638:	4604      	mov	r4, r0
 801463a:	6978      	ldr	r0, [r7, #20]
 801463c:	f7fc fca6 	bl	8010f8c <mg_ota_crc32>
 8014640:	4605      	mov	r5, r0
 8014642:	6978      	ldr	r0, [r7, #20]
 8014644:	f7fc fcb8 	bl	8010fb8 <mg_ota_size>
 8014648:	4606      	mov	r6, r0
 801464a:	6978      	ldr	r0, [r7, #20]
 801464c:	f7fc fca9 	bl	8010fa2 <mg_ota_timestamp>
 8014650:	4603      	mov	r3, r0
 8014652:	9310      	str	r3, [sp, #64]	@ 0x40
 8014654:	4b13      	ldr	r3, [pc, #76]	@ (80146a4 <print_status+0x8c>)
 8014656:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014658:	2300      	movs	r3, #0
 801465a:	930e      	str	r3, [sp, #56]	@ 0x38
 801465c:	4b12      	ldr	r3, [pc, #72]	@ (80146a8 <print_status+0x90>)
 801465e:	930d      	str	r3, [sp, #52]	@ 0x34
 8014660:	960c      	str	r6, [sp, #48]	@ 0x30
 8014662:	4b12      	ldr	r3, [pc, #72]	@ (80146ac <print_status+0x94>)
 8014664:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014666:	2300      	movs	r3, #0
 8014668:	930a      	str	r3, [sp, #40]	@ 0x28
 801466a:	4b0f      	ldr	r3, [pc, #60]	@ (80146a8 <print_status+0x90>)
 801466c:	9309      	str	r3, [sp, #36]	@ 0x24
 801466e:	2322      	movs	r3, #34	@ 0x22
 8014670:	9308      	str	r3, [sp, #32]
 8014672:	9507      	str	r5, [sp, #28]
 8014674:	2322      	movs	r3, #34	@ 0x22
 8014676:	9306      	str	r3, [sp, #24]
 8014678:	4b0d      	ldr	r3, [pc, #52]	@ (80146b0 <print_status+0x98>)
 801467a:	9305      	str	r3, [sp, #20]
 801467c:	2300      	movs	r3, #0
 801467e:	9304      	str	r3, [sp, #16]
 8014680:	4b09      	ldr	r3, [pc, #36]	@ (80146a8 <print_status+0x90>)
 8014682:	9303      	str	r3, [sp, #12]
 8014684:	9402      	str	r4, [sp, #8]
 8014686:	4b0b      	ldr	r3, [pc, #44]	@ (80146b4 <print_status+0x9c>)
 8014688:	9301      	str	r3, [sp, #4]
 801468a:	2300      	movs	r3, #0
 801468c:	9300      	str	r3, [sp, #0]
 801468e:	4b06      	ldr	r3, [pc, #24]	@ (80146a8 <print_status+0x90>)
 8014690:	4a09      	ldr	r2, [pc, #36]	@ (80146b8 <print_status+0xa0>)
 8014692:	68b9      	ldr	r1, [r7, #8]
 8014694:	68f8      	ldr	r0, [r7, #12]
 8014696:	f7f2 ff6c 	bl	8007572 <mg_xprintf>
 801469a:	4603      	mov	r3, r0
                    MG_ESC("status"), mg_ota_status(fw), MG_ESC("crc32"), '"',
                    mg_ota_crc32(fw), '"', MG_ESC("size"), mg_ota_size(fw),
                    MG_ESC("timestamp"), mg_ota_timestamp(fw));
}
 801469c:	4618      	mov	r0, r3
 801469e:	371c      	adds	r7, #28
 80146a0:	46bd      	mov	sp, r7
 80146a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146a4:	08030df0 	.word	0x08030df0
 80146a8:	08011491 	.word	0x08011491
 80146ac:	08030dfc 	.word	0x08030dfc
 80146b0:	08030e04 	.word	0x08030e04
 80146b4:	08030ccc 	.word	0x08030ccc
 80146b8:	08030dd0 	.word	0x08030dd0

080146bc <handle_firmware_status>:

static void handle_firmware_status(struct mg_connection *c) {
 80146bc:	b580      	push	{r7, lr}
 80146be:	b086      	sub	sp, #24
 80146c0:	af04      	add	r7, sp, #16
 80146c2:	6078      	str	r0, [r7, #4]
  mg_http_reply(c, 200, s_json_header, "[%M,%M]\n", print_status,
 80146c4:	4b09      	ldr	r3, [pc, #36]	@ (80146ec <handle_firmware_status+0x30>)
 80146c6:	681a      	ldr	r2, [r3, #0]
 80146c8:	2301      	movs	r3, #1
 80146ca:	9303      	str	r3, [sp, #12]
 80146cc:	4b08      	ldr	r3, [pc, #32]	@ (80146f0 <handle_firmware_status+0x34>)
 80146ce:	9302      	str	r3, [sp, #8]
 80146d0:	2300      	movs	r3, #0
 80146d2:	9301      	str	r3, [sp, #4]
 80146d4:	4b06      	ldr	r3, [pc, #24]	@ (80146f0 <handle_firmware_status+0x34>)
 80146d6:	9300      	str	r3, [sp, #0]
 80146d8:	4b06      	ldr	r3, [pc, #24]	@ (80146f4 <handle_firmware_status+0x38>)
 80146da:	21c8      	movs	r1, #200	@ 0xc8
 80146dc:	6878      	ldr	r0, [r7, #4]
 80146de:	f7f4 ffc9 	bl	8009674 <mg_http_reply>
                MG_FIRMWARE_CURRENT, print_status, MG_FIRMWARE_PREVIOUS);
}
 80146e2:	bf00      	nop
 80146e4:	3708      	adds	r7, #8
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd80      	pop	{r7, pc}
 80146ea:	bf00      	nop
 80146ec:	20000278 	.word	0x20000278
 80146f0:	08014619 	.word	0x08014619
 80146f4:	08030e0c 	.word	0x08030e0c

080146f8 <handle_device_reset>:

static void handle_device_reset(struct mg_connection *c) {
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b086      	sub	sp, #24
 80146fc:	af04      	add	r7, sp, #16
 80146fe:	6078      	str	r0, [r7, #4]
  mg_http_reply(c, 200, s_json_header, "true\n");
 8014700:	4b0c      	ldr	r3, [pc, #48]	@ (8014734 <handle_device_reset+0x3c>)
 8014702:	681a      	ldr	r2, [r3, #0]
 8014704:	4b0c      	ldr	r3, [pc, #48]	@ (8014738 <handle_device_reset+0x40>)
 8014706:	21c8      	movs	r1, #200	@ 0xc8
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	f7f4 ffb3 	bl	8009674 <mg_http_reply>
  mg_timer_add(c->mgr, 500, 0, (void (*)(void *)) mg_device_reset, NULL);
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	6859      	ldr	r1, [r3, #4]
 8014712:	2300      	movs	r3, #0
 8014714:	9302      	str	r3, [sp, #8]
 8014716:	4b09      	ldr	r3, [pc, #36]	@ (801473c <handle_device_reset+0x44>)
 8014718:	9301      	str	r3, [sp, #4]
 801471a:	2300      	movs	r3, #0
 801471c:	9300      	str	r3, [sp, #0]
 801471e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8014722:	f04f 0300 	mov.w	r3, #0
 8014726:	4608      	mov	r0, r1
 8014728:	f7f9 fa42 	bl	800dbb0 <mg_timer_add>
}
 801472c:	bf00      	nop
 801472e:	3708      	adds	r7, #8
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}
 8014734:	20000278 	.word	0x20000278
 8014738:	08030b4c 	.word	0x08030b4c
 801473c:	0800607d 	.word	0x0800607d

08014740 <handle_device_eraselast>:

static void handle_device_eraselast(struct mg_connection *c) {
 8014740:	b580      	push	{r7, lr}
 8014742:	b086      	sub	sp, #24
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
  size_t ss = mg_flash_sector_size(), size = mg_flash_size();
 8014748:	f7f1 fc7d 	bl	8006046 <mg_flash_sector_size>
 801474c:	6138      	str	r0, [r7, #16]
 801474e:	f7f1 fc72 	bl	8006036 <mg_flash_size>
 8014752:	60f8      	str	r0, [r7, #12]
  char *base = (char *) mg_flash_start(), *last = base + size - ss;
 8014754:	f7f1 fc67 	bl	8006026 <mg_flash_start>
 8014758:	60b8      	str	r0, [r7, #8]
 801475a:	68fa      	ldr	r2, [r7, #12]
 801475c:	693b      	ldr	r3, [r7, #16]
 801475e:	1ad3      	subs	r3, r2, r3
 8014760:	68ba      	ldr	r2, [r7, #8]
 8014762:	4413      	add	r3, r2
 8014764:	617b      	str	r3, [r7, #20]
  if (mg_flash_bank() == 2) last -= size / 2;
 8014766:	f7f1 fc76 	bl	8006056 <mg_flash_bank>
 801476a:	4603      	mov	r3, r0
 801476c:	2b02      	cmp	r3, #2
 801476e:	d105      	bne.n	801477c <handle_device_eraselast+0x3c>
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	085b      	lsrs	r3, r3, #1
 8014774:	425b      	negs	r3, r3
 8014776:	697a      	ldr	r2, [r7, #20]
 8014778:	4413      	add	r3, r2
 801477a:	617b      	str	r3, [r7, #20]
  mg_flash_erase(last);
 801477c:	6978      	ldr	r0, [r7, #20]
 801477e:	f7f1 fc72 	bl	8006066 <mg_flash_erase>
  mg_http_reply(c, 200, s_json_header, "true\n");
 8014782:	4b05      	ldr	r3, [pc, #20]	@ (8014798 <handle_device_eraselast+0x58>)
 8014784:	681a      	ldr	r2, [r3, #0]
 8014786:	4b05      	ldr	r3, [pc, #20]	@ (801479c <handle_device_eraselast+0x5c>)
 8014788:	21c8      	movs	r1, #200	@ 0xc8
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f7f4 ff72 	bl	8009674 <mg_http_reply>
}
 8014790:	bf00      	nop
 8014792:	3718      	adds	r7, #24
 8014794:	46bd      	mov	sp, r7
 8014796:	bd80      	pop	{r7, pc}
 8014798:	20000278 	.word	0x20000278
 801479c:	08030b4c 	.word	0x08030b4c

080147a0 <fn>:

// HTTP request handler function
static void fn(struct mg_connection *c, int ev, void *ev_data) {
 80147a0:	b5b0      	push	{r4, r5, r7, lr}
 80147a2:	b0b8      	sub	sp, #224	@ 0xe0
 80147a4:	af04      	add	r7, sp, #16
 80147a6:	6178      	str	r0, [r7, #20]
 80147a8:	6139      	str	r1, [r7, #16]
 80147aa:	60fa      	str	r2, [r7, #12]
  if (ev == MG_EV_ACCEPT) {
 80147ac:	693b      	ldr	r3, [r7, #16]
 80147ae:	2b05      	cmp	r3, #5
 80147b0:	d12a      	bne.n	8014808 <fn+0x68>
    if (c->fn_data != NULL) {  // TLS listener!
 80147b2:	697b      	ldr	r3, [r7, #20]
 80147b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	f000 81f6 	beq.w	8014ba8 <fn+0x408>
      struct mg_tls_opts opts = {0};
 80147bc:	f107 031c 	add.w	r3, r7, #28
 80147c0:	2224      	movs	r2, #36	@ 0x24
 80147c2:	2100      	movs	r1, #0
 80147c4:	4618      	mov	r0, r3
 80147c6:	f017 f9a1 	bl	802bb0c <memset>
      opts.cert = mg_unpacked("/certs/server_cert.pem");
 80147ca:	463b      	mov	r3, r7
 80147cc:	49bc      	ldr	r1, [pc, #752]	@ (8014ac0 <fn+0x320>)
 80147ce:	4618      	mov	r0, r3
 80147d0:	f7f3 facb 	bl	8007d6a <mg_unpacked>
 80147d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80147d8:	463a      	mov	r2, r7
 80147da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80147de:	e883 0003 	stmia.w	r3, {r0, r1}
      opts.key = mg_unpacked("/certs/server_key.pem");
 80147e2:	463b      	mov	r3, r7
 80147e4:	49b7      	ldr	r1, [pc, #732]	@ (8014ac4 <fn+0x324>)
 80147e6:	4618      	mov	r0, r3
 80147e8:	f7f3 fabf 	bl	8007d6a <mg_unpacked>
 80147ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80147f0:	463a      	mov	r2, r7
 80147f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80147f6:	e883 0003 	stmia.w	r3, {r0, r1}
      mg_tls_init(c, &opts);
 80147fa:	f107 031c 	add.w	r3, r7, #28
 80147fe:	4619      	mov	r1, r3
 8014800:	6978      	ldr	r0, [r7, #20]
 8014802:	f7fd ff0b 	bl	801261c <mg_tls_init>
    }
    MG_DEBUG(("%lu %.*s %.*s -> %.*s", c->id, (int) hm->method.len,
              hm->method.buf, (int) hm->uri.len, hm->uri.buf, (int) 3,
              &c->send.buf[9]));
  }
}
 8014806:	e1cf      	b.n	8014ba8 <fn+0x408>
  } else if (ev == MG_EV_HTTP_MSG) {
 8014808:	693b      	ldr	r3, [r7, #16]
 801480a:	2b0b      	cmp	r3, #11
 801480c:	f040 81cc 	bne.w	8014ba8 <fn+0x408>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    struct user *u = authenticate(hm);
 8014816:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 801481a:	f7ff fa47 	bl	8013cac <authenticate>
 801481e:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if (mg_match(hm->uri, mg_str("/api/#"), NULL) && u == NULL) {
 8014822:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8014826:	49a8      	ldr	r1, [pc, #672]	@ (8014ac8 <fn+0x328>)
 8014828:	4618      	mov	r0, r3
 801482a:	f7fd fa49 	bl	8011cc0 <mg_str_s>
 801482e:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8014832:	2300      	movs	r3, #0
 8014834:	9300      	str	r3, [sp, #0]
 8014836:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801483a:	cb0c      	ldmia	r3, {r2, r3}
 801483c:	3108      	adds	r1, #8
 801483e:	c903      	ldmia	r1, {r0, r1}
 8014840:	f7fd fbae 	bl	8011fa0 <mg_match>
 8014844:	4603      	mov	r3, r0
 8014846:	2b00      	cmp	r3, #0
 8014848:	d00b      	beq.n	8014862 <fn+0xc2>
 801484a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801484e:	2b00      	cmp	r3, #0
 8014850:	d107      	bne.n	8014862 <fn+0xc2>
      mg_http_reply(c, 403, "", "Not Authorised\n");
 8014852:	4b9e      	ldr	r3, [pc, #632]	@ (8014acc <fn+0x32c>)
 8014854:	4a9e      	ldr	r2, [pc, #632]	@ (8014ad0 <fn+0x330>)
 8014856:	f240 1193 	movw	r1, #403	@ 0x193
 801485a:	6978      	ldr	r0, [r7, #20]
 801485c:	f7f4 ff0a 	bl	8009674 <mg_http_reply>
 8014860:	e17a      	b.n	8014b58 <fn+0x3b8>
    } else if (mg_match(hm->uri, mg_str("/api/login"), NULL)) {
 8014862:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8014866:	499b      	ldr	r1, [pc, #620]	@ (8014ad4 <fn+0x334>)
 8014868:	4618      	mov	r0, r3
 801486a:	f7fd fa29 	bl	8011cc0 <mg_str_s>
 801486e:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8014872:	2300      	movs	r3, #0
 8014874:	9300      	str	r3, [sp, #0]
 8014876:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801487a:	cb0c      	ldmia	r3, {r2, r3}
 801487c:	3108      	adds	r1, #8
 801487e:	c903      	ldmia	r1, {r0, r1}
 8014880:	f7fd fb8e 	bl	8011fa0 <mg_match>
 8014884:	4603      	mov	r3, r0
 8014886:	2b00      	cmp	r3, #0
 8014888:	d005      	beq.n	8014896 <fn+0xf6>
      handle_login(c, u);
 801488a:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 801488e:	6978      	ldr	r0, [r7, #20]
 8014890:	f7ff fa9e 	bl	8013dd0 <handle_login>
 8014894:	e160      	b.n	8014b58 <fn+0x3b8>
    } else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
 8014896:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801489a:	498f      	ldr	r1, [pc, #572]	@ (8014ad8 <fn+0x338>)
 801489c:	4618      	mov	r0, r3
 801489e:	f7fd fa0f 	bl	8011cc0 <mg_str_s>
 80148a2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 80148a6:	2300      	movs	r3, #0
 80148a8:	9300      	str	r3, [sp, #0]
 80148aa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80148ae:	cb0c      	ldmia	r3, {r2, r3}
 80148b0:	3108      	adds	r1, #8
 80148b2:	c903      	ldmia	r1, {r0, r1}
 80148b4:	f7fd fb74 	bl	8011fa0 <mg_match>
 80148b8:	4603      	mov	r3, r0
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d003      	beq.n	80148c6 <fn+0x126>
      handle_logout(c);
 80148be:	6978      	ldr	r0, [r7, #20]
 80148c0:	f7ff fae2 	bl	8013e88 <handle_logout>
 80148c4:	e148      	b.n	8014b58 <fn+0x3b8>
    } else if (mg_match(hm->uri, mg_str("/api/debug"), NULL)) {
 80148c6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80148ca:	4984      	ldr	r1, [pc, #528]	@ (8014adc <fn+0x33c>)
 80148cc:	4618      	mov	r0, r3
 80148ce:	f7fd f9f7 	bl	8011cc0 <mg_str_s>
 80148d2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 80148d6:	2300      	movs	r3, #0
 80148d8:	9300      	str	r3, [sp, #0]
 80148da:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80148de:	cb0c      	ldmia	r3, {r2, r3}
 80148e0:	3108      	adds	r1, #8
 80148e2:	c903      	ldmia	r1, {r0, r1}
 80148e4:	f7fd fb5c 	bl	8011fa0 <mg_match>
 80148e8:	4603      	mov	r3, r0
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d005      	beq.n	80148fa <fn+0x15a>
      handle_debug(c, hm);
 80148ee:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 80148f2:	6978      	ldr	r0, [r7, #20]
 80148f4:	f7ff fafe 	bl	8013ef4 <handle_debug>
 80148f8:	e12e      	b.n	8014b58 <fn+0x3b8>
    } else if (mg_match(hm->uri, mg_str("/api/stats/get"), NULL)) {
 80148fa:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80148fe:	4978      	ldr	r1, [pc, #480]	@ (8014ae0 <fn+0x340>)
 8014900:	4618      	mov	r0, r3
 8014902:	f7fd f9dd 	bl	8011cc0 <mg_str_s>
 8014906:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 801490a:	2300      	movs	r3, #0
 801490c:	9300      	str	r3, [sp, #0]
 801490e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8014912:	cb0c      	ldmia	r3, {r2, r3}
 8014914:	3108      	adds	r1, #8
 8014916:	c903      	ldmia	r1, {r0, r1}
 8014918:	f7fd fb42 	bl	8011fa0 <mg_match>
 801491c:	4603      	mov	r3, r0
 801491e:	2b00      	cmp	r3, #0
 8014920:	d003      	beq.n	801492a <fn+0x18a>
      handle_stats_get(c);
 8014922:	6978      	ldr	r0, [r7, #20]
 8014924:	f7ff fb4e 	bl	8013fc4 <handle_stats_get>
 8014928:	e116      	b.n	8014b58 <fn+0x3b8>
    } else if (mg_match(hm->uri, mg_str("/api/events/get"), NULL)) {
 801492a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801492e:	496d      	ldr	r1, [pc, #436]	@ (8014ae4 <fn+0x344>)
 8014930:	4618      	mov	r0, r3
 8014932:	f7fd f9c5 	bl	8011cc0 <mg_str_s>
 8014936:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 801493a:	2300      	movs	r3, #0
 801493c:	9300      	str	r3, [sp, #0]
 801493e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8014942:	cb0c      	ldmia	r3, {r2, r3}
 8014944:	3108      	adds	r1, #8
 8014946:	c903      	ldmia	r1, {r0, r1}
 8014948:	f7fd fb2a 	bl	8011fa0 <mg_match>
 801494c:	4603      	mov	r3, r0
 801494e:	2b00      	cmp	r3, #0
 8014950:	d005      	beq.n	801495e <fn+0x1be>
      handle_events_get(c, hm);
 8014952:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8014956:	6978      	ldr	r0, [r7, #20]
 8014958:	f7ff fbf2 	bl	8014140 <handle_events_get>
 801495c:	e0fc      	b.n	8014b58 <fn+0x3b8>
    } else if (mg_match(hm->uri, mg_str("/api/settings/get"), NULL)) {
 801495e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8014962:	4961      	ldr	r1, [pc, #388]	@ (8014ae8 <fn+0x348>)
 8014964:	4618      	mov	r0, r3
 8014966:	f7fd f9ab 	bl	8011cc0 <mg_str_s>
 801496a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 801496e:	2300      	movs	r3, #0
 8014970:	9300      	str	r3, [sp, #0]
 8014972:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8014976:	cb0c      	ldmia	r3, {r2, r3}
 8014978:	3108      	adds	r1, #8
 801497a:	c903      	ldmia	r1, {r0, r1}
 801497c:	f7fd fb10 	bl	8011fa0 <mg_match>
 8014980:	4603      	mov	r3, r0
 8014982:	2b00      	cmp	r3, #0
 8014984:	d003      	beq.n	801498e <fn+0x1ee>
      handle_settings_get(c);
 8014986:	6978      	ldr	r0, [r7, #20]
 8014988:	f7ff fca6 	bl	80142d8 <handle_settings_get>
 801498c:	e0e4      	b.n	8014b58 <fn+0x3b8>
    } else if (mg_match(hm->uri, mg_str("/api/settings/set"), NULL)) {
 801498e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8014992:	4956      	ldr	r1, [pc, #344]	@ (8014aec <fn+0x34c>)
 8014994:	4618      	mov	r0, r3
 8014996:	f7fd f993 	bl	8011cc0 <mg_str_s>
 801499a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 801499e:	2300      	movs	r3, #0
 80149a0:	9300      	str	r3, [sp, #0]
 80149a2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80149a6:	cb0c      	ldmia	r3, {r2, r3}
 80149a8:	3108      	adds	r1, #8
 80149aa:	c903      	ldmia	r1, {r0, r1}
 80149ac:	f7fd faf8 	bl	8011fa0 <mg_match>
 80149b0:	4603      	mov	r3, r0
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d009      	beq.n	80149ca <fn+0x22a>
      handle_settings_set(c, hm->body);
 80149b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80149ba:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80149be:	e893 0006 	ldmia.w	r3, {r1, r2}
 80149c2:	6978      	ldr	r0, [r7, #20]
 80149c4:	f7ff fbf6 	bl	80141b4 <handle_settings_set>
 80149c8:	e0c6      	b.n	8014b58 <fn+0x3b8>
    } else if (mg_match(hm->uri, mg_str("/api/firmware/upload"), NULL)) {
 80149ca:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80149ce:	4948      	ldr	r1, [pc, #288]	@ (8014af0 <fn+0x350>)
 80149d0:	4618      	mov	r0, r3
 80149d2:	f7fd f975 	bl	8011cc0 <mg_str_s>
 80149d6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 80149da:	2300      	movs	r3, #0
 80149dc:	9300      	str	r3, [sp, #0]
 80149de:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80149e2:	cb0c      	ldmia	r3, {r2, r3}
 80149e4:	3108      	adds	r1, #8
 80149e6:	c903      	ldmia	r1, {r0, r1}
 80149e8:	f7fd fada 	bl	8011fa0 <mg_match>
 80149ec:	4603      	mov	r3, r0
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d005      	beq.n	80149fe <fn+0x25e>
      handle_firmware_upload(c, hm);
 80149f2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 80149f6:	6978      	ldr	r0, [r7, #20]
 80149f8:	f7ff fcc0 	bl	801437c <handle_firmware_upload>
 80149fc:	e0ac      	b.n	8014b58 <fn+0x3b8>
    } else if (mg_match(hm->uri, mg_str("/api/firmware/commit"), NULL)) {
 80149fe:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8014a02:	493c      	ldr	r1, [pc, #240]	@ (8014af4 <fn+0x354>)
 8014a04:	4618      	mov	r0, r3
 8014a06:	f7fd f95b 	bl	8011cc0 <mg_str_s>
 8014a0a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8014a0e:	2300      	movs	r3, #0
 8014a10:	9300      	str	r3, [sp, #0]
 8014a12:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8014a16:	cb0c      	ldmia	r3, {r2, r3}
 8014a18:	3108      	adds	r1, #8
 8014a1a:	c903      	ldmia	r1, {r0, r1}
 8014a1c:	f7fd fac0 	bl	8011fa0 <mg_match>
 8014a20:	4603      	mov	r3, r0
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d003      	beq.n	8014a2e <fn+0x28e>
      handle_firmware_commit(c);
 8014a26:	6978      	ldr	r0, [r7, #20]
 8014a28:	f7ff fdb2 	bl	8014590 <handle_firmware_commit>
 8014a2c:	e094      	b.n	8014b58 <fn+0x3b8>
    } else if (mg_match(hm->uri, mg_str("/api/firmware/rollback"), NULL)) {
 8014a2e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8014a32:	4931      	ldr	r1, [pc, #196]	@ (8014af8 <fn+0x358>)
 8014a34:	4618      	mov	r0, r3
 8014a36:	f7fd f943 	bl	8011cc0 <mg_str_s>
 8014a3a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8014a3e:	2300      	movs	r3, #0
 8014a40:	9300      	str	r3, [sp, #0]
 8014a42:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8014a46:	cb0c      	ldmia	r3, {r2, r3}
 8014a48:	3108      	adds	r1, #8
 8014a4a:	c903      	ldmia	r1, {r0, r1}
 8014a4c:	f7fd faa8 	bl	8011fa0 <mg_match>
 8014a50:	4603      	mov	r3, r0
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d003      	beq.n	8014a5e <fn+0x2be>
      handle_firmware_rollback(c);
 8014a56:	6978      	ldr	r0, [r7, #20]
 8014a58:	f7ff fdbc 	bl	80145d4 <handle_firmware_rollback>
 8014a5c:	e07c      	b.n	8014b58 <fn+0x3b8>
    } else if (mg_match(hm->uri, mg_str("/api/firmware/status"), NULL)) {
 8014a5e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8014a62:	4926      	ldr	r1, [pc, #152]	@ (8014afc <fn+0x35c>)
 8014a64:	4618      	mov	r0, r3
 8014a66:	f7fd f92b 	bl	8011cc0 <mg_str_s>
 8014a6a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8014a6e:	2300      	movs	r3, #0
 8014a70:	9300      	str	r3, [sp, #0]
 8014a72:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8014a76:	cb0c      	ldmia	r3, {r2, r3}
 8014a78:	3108      	adds	r1, #8
 8014a7a:	c903      	ldmia	r1, {r0, r1}
 8014a7c:	f7fd fa90 	bl	8011fa0 <mg_match>
 8014a80:	4603      	mov	r3, r0
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d003      	beq.n	8014a8e <fn+0x2ee>
      handle_firmware_status(c);
 8014a86:	6978      	ldr	r0, [r7, #20]
 8014a88:	f7ff fe18 	bl	80146bc <handle_firmware_status>
 8014a8c:	e064      	b.n	8014b58 <fn+0x3b8>
    } else if (mg_match(hm->uri, mg_str("/api/device/reset"), NULL)) {
 8014a8e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8014a92:	491b      	ldr	r1, [pc, #108]	@ (8014b00 <fn+0x360>)
 8014a94:	4618      	mov	r0, r3
 8014a96:	f7fd f913 	bl	8011cc0 <mg_str_s>
 8014a9a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	9300      	str	r3, [sp, #0]
 8014aa2:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8014aa6:	cb0c      	ldmia	r3, {r2, r3}
 8014aa8:	3108      	adds	r1, #8
 8014aaa:	c903      	ldmia	r1, {r0, r1}
 8014aac:	f7fd fa78 	bl	8011fa0 <mg_match>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d026      	beq.n	8014b04 <fn+0x364>
      handle_device_reset(c);
 8014ab6:	6978      	ldr	r0, [r7, #20]
 8014ab8:	f7ff fe1e 	bl	80146f8 <handle_device_reset>
 8014abc:	e04c      	b.n	8014b58 <fn+0x3b8>
 8014abe:	bf00      	nop
 8014ac0:	08030e18 	.word	0x08030e18
 8014ac4:	08030e30 	.word	0x08030e30
 8014ac8:	08030e48 	.word	0x08030e48
 8014acc:	08030e50 	.word	0x08030e50
 8014ad0:	08030a88 	.word	0x08030a88
 8014ad4:	08030e60 	.word	0x08030e60
 8014ad8:	08030e6c 	.word	0x08030e6c
 8014adc:	08030e78 	.word	0x08030e78
 8014ae0:	08030e84 	.word	0x08030e84
 8014ae4:	08030e94 	.word	0x08030e94
 8014ae8:	08030ea4 	.word	0x08030ea4
 8014aec:	08030eb8 	.word	0x08030eb8
 8014af0:	08030ecc 	.word	0x08030ecc
 8014af4:	08030ee4 	.word	0x08030ee4
 8014af8:	08030efc 	.word	0x08030efc
 8014afc:	08030f14 	.word	0x08030f14
 8014b00:	08030f2c 	.word	0x08030f2c
    } else if (mg_match(hm->uri, mg_str("/api/device/eraselast"), NULL)) {
 8014b04:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8014b08:	4929      	ldr	r1, [pc, #164]	@ (8014bb0 <fn+0x410>)
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	f7fd f8d8 	bl	8011cc0 <mg_str_s>
 8014b10:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8014b14:	2300      	movs	r3, #0
 8014b16:	9300      	str	r3, [sp, #0]
 8014b18:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8014b1c:	cb0c      	ldmia	r3, {r2, r3}
 8014b1e:	3108      	adds	r1, #8
 8014b20:	c903      	ldmia	r1, {r0, r1}
 8014b22:	f7fd fa3d 	bl	8011fa0 <mg_match>
 8014b26:	4603      	mov	r3, r0
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d003      	beq.n	8014b34 <fn+0x394>
      handle_device_eraselast(c);
 8014b2c:	6978      	ldr	r0, [r7, #20]
 8014b2e:	f7ff fe07 	bl	8014740 <handle_device_eraselast>
 8014b32:	e011      	b.n	8014b58 <fn+0x3b8>
      memset(&opts, 0, sizeof(opts));
 8014b34:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8014b38:	2218      	movs	r2, #24
 8014b3a:	2100      	movs	r1, #0
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	f016 ffe5 	bl	802bb0c <memset>
      opts.root_dir = "/web_root";  // On embedded, use packed files
 8014b42:	4b1c      	ldr	r3, [pc, #112]	@ (8014bb4 <fn+0x414>)
 8014b44:	643b      	str	r3, [r7, #64]	@ 0x40
      opts.fs = &mg_fs_packed;
 8014b46:	4b1c      	ldr	r3, [pc, #112]	@ (8014bb8 <fn+0x418>)
 8014b48:	657b      	str	r3, [r7, #84]	@ 0x54
      mg_http_serve_dir(c, ev_data, &opts);
 8014b4a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8014b4e:	461a      	mov	r2, r3
 8014b50:	68f9      	ldr	r1, [r7, #12]
 8014b52:	6978      	ldr	r0, [r7, #20]
 8014b54:	f7f5 fc78 	bl	800a448 <mg_http_serve_dir>
    MG_DEBUG(("%lu %.*s %.*s -> %.*s", c->id, (int) hm->method.len,
 8014b58:	4b18      	ldr	r3, [pc, #96]	@ (8014bbc <fn+0x41c>)
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	2b02      	cmp	r3, #2
 8014b5e:	dd23      	ble.n	8014ba8 <fn+0x408>
 8014b60:	4b17      	ldr	r3, [pc, #92]	@ (8014bc0 <fn+0x420>)
 8014b62:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8014b66:	4917      	ldr	r1, [pc, #92]	@ (8014bc4 <fn+0x424>)
 8014b68:	2003      	movs	r0, #3
 8014b6a:	f7f7 fa43 	bl	800bff4 <mg_log_prefix>
 8014b6e:	697b      	ldr	r3, [r7, #20]
 8014b70:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8014b72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8014b76:	685b      	ldr	r3, [r3, #4]
 8014b78:	461d      	mov	r5, r3
 8014b7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8014b7e:	6818      	ldr	r0, [r3, #0]
 8014b80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8014b84:	68db      	ldr	r3, [r3, #12]
 8014b86:	461c      	mov	r4, r3
 8014b88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8014b8c:	689b      	ldr	r3, [r3, #8]
 8014b8e:	697a      	ldr	r2, [r7, #20]
 8014b90:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8014b92:	3209      	adds	r2, #9
 8014b94:	9203      	str	r2, [sp, #12]
 8014b96:	2203      	movs	r2, #3
 8014b98:	9202      	str	r2, [sp, #8]
 8014b9a:	9301      	str	r3, [sp, #4]
 8014b9c:	9400      	str	r4, [sp, #0]
 8014b9e:	4603      	mov	r3, r0
 8014ba0:	462a      	mov	r2, r5
 8014ba2:	4809      	ldr	r0, [pc, #36]	@ (8014bc8 <fn+0x428>)
 8014ba4:	f7f7 fa76 	bl	800c094 <mg_log>
}
 8014ba8:	bf00      	nop
 8014baa:	37d0      	adds	r7, #208	@ 0xd0
 8014bac:	46bd      	mov	sp, r7
 8014bae:	bdb0      	pop	{r4, r5, r7, pc}
 8014bb0:	08030f40 	.word	0x08030f40
 8014bb4:	08030f58 	.word	0x08030f58
 8014bb8:	2000000c 	.word	0x2000000c
 8014bbc:	20000244 	.word	0x20000244
 8014bc0:	0803290c 	.word	0x0803290c
 8014bc4:	08030a30 	.word	0x08030a30
 8014bc8:	08030f64 	.word	0x08030f64

08014bcc <fn_mqtt>:

// MQTT



static void fn_mqtt(struct mg_connection *c, int ev, void *ev_data, void *fn_data) {
 8014bcc:	b590      	push	{r4, r7, lr}
 8014bce:	b0af      	sub	sp, #188	@ 0xbc
 8014bd0:	af02      	add	r7, sp, #8
 8014bd2:	60f8      	str	r0, [r7, #12]
 8014bd4:	60b9      	str	r1, [r7, #8]
 8014bd6:	607a      	str	r2, [r7, #4]
 8014bd8:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_OPEN) {
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	2b01      	cmp	r3, #1
 8014bde:	d112      	bne.n	8014c06 <fn_mqtt+0x3a>
    MG_INFO(("%lu CREATED", c->id));
 8014be0:	4b8b      	ldr	r3, [pc, #556]	@ (8014e10 <fn_mqtt+0x244>)
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	2b01      	cmp	r3, #1
 8014be6:	f340 810e 	ble.w	8014e06 <fn_mqtt+0x23a>
 8014bea:	4b8a      	ldr	r3, [pc, #552]	@ (8014e14 <fn_mqtt+0x248>)
 8014bec:	f240 1251 	movw	r2, #337	@ 0x151
 8014bf0:	4989      	ldr	r1, [pc, #548]	@ (8014e18 <fn_mqtt+0x24c>)
 8014bf2:	2002      	movs	r0, #2
 8014bf4:	f7f7 f9fe 	bl	800bff4 <mg_log_prefix>
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014bfc:	4619      	mov	r1, r3
 8014bfe:	4887      	ldr	r0, [pc, #540]	@ (8014e1c <fn_mqtt+0x250>)
 8014c00:	f7f7 fa48 	bl	800c094 <mg_log>
  } else if (ev == MG_EV_CLOSE) {
    MG_INFO(("%lu CLOSED", c->id));
    s_conn = NULL;  // Mark that we're closed
  }
  (void) fn_data;
}
 8014c04:	e0ff      	b.n	8014e06 <fn_mqtt+0x23a>
  } else if (ev == MG_EV_ERROR) {
 8014c06:	68bb      	ldr	r3, [r7, #8]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d113      	bne.n	8014c34 <fn_mqtt+0x68>
    MG_ERROR(("%lu ERROR %s", c->id, (char *) ev_data));
 8014c0c:	4b80      	ldr	r3, [pc, #512]	@ (8014e10 <fn_mqtt+0x244>)
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	f340 80f8 	ble.w	8014e06 <fn_mqtt+0x23a>
 8014c16:	4b7f      	ldr	r3, [pc, #508]	@ (8014e14 <fn_mqtt+0x248>)
 8014c18:	f240 1255 	movw	r2, #341	@ 0x155
 8014c1c:	497e      	ldr	r1, [pc, #504]	@ (8014e18 <fn_mqtt+0x24c>)
 8014c1e:	2001      	movs	r0, #1
 8014c20:	f7f7 f9e8 	bl	800bff4 <mg_log_prefix>
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014c28:	687a      	ldr	r2, [r7, #4]
 8014c2a:	4619      	mov	r1, r3
 8014c2c:	487c      	ldr	r0, [pc, #496]	@ (8014e20 <fn_mqtt+0x254>)
 8014c2e:	f7f7 fa31 	bl	800c094 <mg_log>
}
 8014c32:	e0e8      	b.n	8014e06 <fn_mqtt+0x23a>
  } else if (ev == MG_EV_CONNECT) {
 8014c34:	68bb      	ldr	r3, [r7, #8]
 8014c36:	2b04      	cmp	r3, #4
 8014c38:	d105      	bne.n	8014c46 <fn_mqtt+0x7a>
    if (mg_url_is_ssl(s_url)) {
 8014c3a:	4b7a      	ldr	r3, [pc, #488]	@ (8014e24 <fn_mqtt+0x258>)
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f7fd fd58 	bl	80126f4 <mg_url_is_ssl>
}
 8014c44:	e0df      	b.n	8014e06 <fn_mqtt+0x23a>
  } else if (ev == MG_EV_MQTT_OPEN) {// MQTT connect is successful
 8014c46:	68bb      	ldr	r3, [r7, #8]
 8014c48:	2b11      	cmp	r3, #17
 8014c4a:	f040 809c 	bne.w	8014d86 <fn_mqtt+0x1ba>
    struct mg_str subt = mg_str(s_sub_topic);
 8014c4e:	4b76      	ldr	r3, [pc, #472]	@ (8014e28 <fn_mqtt+0x25c>)
 8014c50:	681a      	ldr	r2, [r3, #0]
 8014c52:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8014c56:	4611      	mov	r1, r2
 8014c58:	4618      	mov	r0, r3
 8014c5a:	f7fd f831 	bl	8011cc0 <mg_str_s>
    struct mg_str pubt = mg_str(s_pub_topic), data = mg_str("Hello from stm32!");
 8014c5e:	4b73      	ldr	r3, [pc, #460]	@ (8014e2c <fn_mqtt+0x260>)
 8014c60:	681a      	ldr	r2, [r3, #0]
 8014c62:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8014c66:	4611      	mov	r1, r2
 8014c68:	4618      	mov	r0, r3
 8014c6a:	f7fd f829 	bl	8011cc0 <mg_str_s>
 8014c6e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8014c72:	496f      	ldr	r1, [pc, #444]	@ (8014e30 <fn_mqtt+0x264>)
 8014c74:	4618      	mov	r0, r3
 8014c76:	f7fd f823 	bl	8011cc0 <mg_str_s>
    MG_INFO(("%lu CONNECTED to %s", c->id, s_url));
 8014c7a:	4b65      	ldr	r3, [pc, #404]	@ (8014e10 <fn_mqtt+0x244>)
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	2b01      	cmp	r3, #1
 8014c80:	dd0e      	ble.n	8014ca0 <fn_mqtt+0xd4>
 8014c82:	4b64      	ldr	r3, [pc, #400]	@ (8014e14 <fn_mqtt+0x248>)
 8014c84:	f240 125f 	movw	r2, #351	@ 0x15f
 8014c88:	4963      	ldr	r1, [pc, #396]	@ (8014e18 <fn_mqtt+0x24c>)
 8014c8a:	2002      	movs	r0, #2
 8014c8c:	f7f7 f9b2 	bl	800bff4 <mg_log_prefix>
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014c94:	4a63      	ldr	r2, [pc, #396]	@ (8014e24 <fn_mqtt+0x258>)
 8014c96:	6812      	ldr	r2, [r2, #0]
 8014c98:	4619      	mov	r1, r3
 8014c9a:	4866      	ldr	r0, [pc, #408]	@ (8014e34 <fn_mqtt+0x268>)
 8014c9c:	f7f7 f9fa 	bl	800c094 <mg_log>
    memset(&sub_opts, 0, sizeof(sub_opts));
 8014ca0:	f107 0314 	add.w	r3, r7, #20
 8014ca4:	2240      	movs	r2, #64	@ 0x40
 8014ca6:	2100      	movs	r1, #0
 8014ca8:	4618      	mov	r0, r3
 8014caa:	f016 ff2f 	bl	802bb0c <memset>
    sub_opts.topic = subt;
 8014cae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8014cb2:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8014cb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014cba:	e883 0003 	stmia.w	r3, {r0, r1}
    sub_opts.qos = s_qos;
 8014cbe:	4b5e      	ldr	r3, [pc, #376]	@ (8014e38 <fn_mqtt+0x26c>)
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	b2db      	uxtb	r3, r3
 8014cc4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    mg_mqtt_sub(c, &sub_opts);
 8014cc8:	f107 0314 	add.w	r3, r7, #20
 8014ccc:	4619      	mov	r1, r3
 8014cce:	68f8      	ldr	r0, [r7, #12]
 8014cd0:	f7f7 fff6 	bl	800ccc0 <mg_mqtt_sub>
    MG_INFO(("%lu SUBSCRIBED to %.*s", c->id, (int) subt.len, subt.buf));
 8014cd4:	4b4e      	ldr	r3, [pc, #312]	@ (8014e10 <fn_mqtt+0x244>)
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	2b01      	cmp	r3, #1
 8014cda:	dd10      	ble.n	8014cfe <fn_mqtt+0x132>
 8014cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8014e14 <fn_mqtt+0x248>)
 8014cde:	f240 1265 	movw	r2, #357	@ 0x165
 8014ce2:	494d      	ldr	r1, [pc, #308]	@ (8014e18 <fn_mqtt+0x24c>)
 8014ce4:	2002      	movs	r0, #2
 8014ce6:	f7f7 f985 	bl	800bff4 <mg_log_prefix>
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8014cee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8014cf2:	461a      	mov	r2, r3
 8014cf4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014cf8:	4850      	ldr	r0, [pc, #320]	@ (8014e3c <fn_mqtt+0x270>)
 8014cfa:	f7f7 f9cb 	bl	800c094 <mg_log>
    memset(&pub_opts, 0, sizeof(pub_opts));
 8014cfe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8014d02:	2240      	movs	r2, #64	@ 0x40
 8014d04:	2100      	movs	r1, #0
 8014d06:	4618      	mov	r0, r3
 8014d08:	f016 ff00 	bl	802bb0c <memset>
    pub_opts.topic = pubt;
 8014d0c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8014d10:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 8014d14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014d18:	e883 0003 	stmia.w	r3, {r0, r1}
    pub_opts.message = data;
 8014d1c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8014d20:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8014d24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014d28:	e883 0003 	stmia.w	r3, {r0, r1}
    pub_opts.qos = s_qos, pub_opts.retain = false;
 8014d2c:	4b42      	ldr	r3, [pc, #264]	@ (8014e38 <fn_mqtt+0x26c>)
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	b2db      	uxtb	r3, r3
 8014d32:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 8014d36:	2300      	movs	r3, #0
 8014d38:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
    mg_mqtt_pub(c, &pub_opts);
 8014d3c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8014d40:	4619      	mov	r1, r3
 8014d42:	68f8      	ldr	r0, [r7, #12]
 8014d44:	f7f7 feee 	bl	800cb24 <mg_mqtt_pub>
   MG_INFO(("%lu PUBLISHED %.*s -> %.*s", c->id, (int) data.len, data.buf, (int) pubt.len, pubt.buf));
 8014d48:	4b31      	ldr	r3, [pc, #196]	@ (8014e10 <fn_mqtt+0x244>)
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	2b01      	cmp	r3, #1
 8014d4e:	dd5a      	ble.n	8014e06 <fn_mqtt+0x23a>
 8014d50:	4b30      	ldr	r3, [pc, #192]	@ (8014e14 <fn_mqtt+0x248>)
 8014d52:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8014d56:	4930      	ldr	r1, [pc, #192]	@ (8014e18 <fn_mqtt+0x24c>)
 8014d58:	2002      	movs	r0, #2
 8014d5a:	f7f7 f94b 	bl	800bff4 <mg_log_prefix>
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8014d62:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014d66:	461c      	mov	r4, r3
 8014d68:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8014d6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014d70:	4618      	mov	r0, r3
 8014d72:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8014d76:	9301      	str	r3, [sp, #4]
 8014d78:	9000      	str	r0, [sp, #0]
 8014d7a:	4613      	mov	r3, r2
 8014d7c:	4622      	mov	r2, r4
 8014d7e:	4830      	ldr	r0, [pc, #192]	@ (8014e40 <fn_mqtt+0x274>)
 8014d80:	f7f7 f988 	bl	800c094 <mg_log>
}
 8014d84:	e03f      	b.n	8014e06 <fn_mqtt+0x23a>
  } else if (ev == MG_EV_MQTT_MSG) {
 8014d86:	68bb      	ldr	r3, [r7, #8]
 8014d88:	2b10      	cmp	r3, #16
 8014d8a:	d125      	bne.n	8014dd8 <fn_mqtt+0x20c>
    struct mg_mqtt_message *mm = (struct mg_mqtt_message *) ev_data;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   MG_INFO(("%lu RECEIVED %.*s <- %.*s", c->id, (int) mm->data.len, mm->data.buf, (int) mm->topic.len, mm->topic.buf));
 8014d92:	4b1f      	ldr	r3, [pc, #124]	@ (8014e10 <fn_mqtt+0x244>)
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	2b01      	cmp	r3, #1
 8014d98:	dd35      	ble.n	8014e06 <fn_mqtt+0x23a>
 8014d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8014e14 <fn_mqtt+0x248>)
 8014d9c:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8014da0:	491d      	ldr	r1, [pc, #116]	@ (8014e18 <fn_mqtt+0x24c>)
 8014da2:	2002      	movs	r0, #2
 8014da4:	f7f7 f926 	bl	800bff4 <mg_log_prefix>
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8014dac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014db0:	68db      	ldr	r3, [r3, #12]
 8014db2:	461c      	mov	r4, r3
 8014db4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014db8:	689a      	ldr	r2, [r3, #8]
 8014dba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014dbe:	685b      	ldr	r3, [r3, #4]
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	9301      	str	r3, [sp, #4]
 8014dca:	9000      	str	r0, [sp, #0]
 8014dcc:	4613      	mov	r3, r2
 8014dce:	4622      	mov	r2, r4
 8014dd0:	481c      	ldr	r0, [pc, #112]	@ (8014e44 <fn_mqtt+0x278>)
 8014dd2:	f7f7 f95f 	bl	800c094 <mg_log>
}
 8014dd6:	e016      	b.n	8014e06 <fn_mqtt+0x23a>
  } else if (ev == MG_EV_CLOSE) {
 8014dd8:	68bb      	ldr	r3, [r7, #8]
 8014dda:	2b09      	cmp	r3, #9
 8014ddc:	d113      	bne.n	8014e06 <fn_mqtt+0x23a>
    MG_INFO(("%lu CLOSED", c->id));
 8014dde:	4b0c      	ldr	r3, [pc, #48]	@ (8014e10 <fn_mqtt+0x244>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	2b01      	cmp	r3, #1
 8014de4:	dd0c      	ble.n	8014e00 <fn_mqtt+0x234>
 8014de6:	4b0b      	ldr	r3, [pc, #44]	@ (8014e14 <fn_mqtt+0x248>)
 8014de8:	f44f 72b9 	mov.w	r2, #370	@ 0x172
 8014dec:	490a      	ldr	r1, [pc, #40]	@ (8014e18 <fn_mqtt+0x24c>)
 8014dee:	2002      	movs	r0, #2
 8014df0:	f7f7 f900 	bl	800bff4 <mg_log_prefix>
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014df8:	4619      	mov	r1, r3
 8014dfa:	4813      	ldr	r0, [pc, #76]	@ (8014e48 <fn_mqtt+0x27c>)
 8014dfc:	f7f7 f94a 	bl	800c094 <mg_log>
    s_conn = NULL;  // Mark that we're closed
 8014e00:	4b12      	ldr	r3, [pc, #72]	@ (8014e4c <fn_mqtt+0x280>)
 8014e02:	2200      	movs	r2, #0
 8014e04:	601a      	str	r2, [r3, #0]
}
 8014e06:	bf00      	nop
 8014e08:	37b4      	adds	r7, #180	@ 0xb4
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	bd90      	pop	{r4, r7, pc}
 8014e0e:	bf00      	nop
 8014e10:	20000244 	.word	0x20000244
 8014e14:	08032910 	.word	0x08032910
 8014e18:	08030a30 	.word	0x08030a30
 8014e1c:	08030f7c 	.word	0x08030f7c
 8014e20:	08030f88 	.word	0x08030f88
 8014e24:	2000025c 	.word	0x2000025c
 8014e28:	20000260 	.word	0x20000260
 8014e2c:	20000264 	.word	0x20000264
 8014e30:	08030f98 	.word	0x08030f98
 8014e34:	08030fac 	.word	0x08030fac
 8014e38:	20014c38 	.word	0x20014c38
 8014e3c:	08030fc0 	.word	0x08030fc0
 8014e40:	08030fd8 	.word	0x08030fd8
 8014e44:	08030ff4 	.word	0x08030ff4
 8014e48:	08031010 	.word	0x08031010
 8014e4c:	20014c34 	.word	0x20014c34

08014e50 <timer_fn_mqtt>:

// Timer function - recreate client connection if it is closed
static void timer_fn_mqtt(void *arg) {
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b096      	sub	sp, #88	@ 0x58
 8014e54:	af02      	add	r7, sp, #8
 8014e56:	6078      	str	r0, [r7, #4]
  struct mg_mgr *mgr = (struct mg_mgr *) arg;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  struct mg_mqtt_opts opts = {.clean = true,
 8014e5c:	f107 030c 	add.w	r3, r7, #12
 8014e60:	2240      	movs	r2, #64	@ 0x40
 8014e62:	2100      	movs	r1, #0
 8014e64:	4618      	mov	r0, r3
 8014e66:	f016 fe51 	bl	802bb0c <memset>
                              .qos = s_qos,
                              .topic = mg_str(s_pub_topic),
 8014e6a:	4b17      	ldr	r3, [pc, #92]	@ (8014ec8 <timer_fn_mqtt+0x78>)
 8014e6c:	681a      	ldr	r2, [r3, #0]
 8014e6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014e72:	4611      	mov	r1, r2
 8014e74:	4618      	mov	r0, r3
 8014e76:	f7fc ff23 	bl	8011cc0 <mg_str_s>
                              .version = 4,
                              .message = mg_str("bye")};
 8014e7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8014e7e:	4913      	ldr	r1, [pc, #76]	@ (8014ecc <timer_fn_mqtt+0x7c>)
 8014e80:	4618      	mov	r0, r3
 8014e82:	f7fc ff1d 	bl	8011cc0 <mg_str_s>
  struct mg_mqtt_opts opts = {.clean = true,
 8014e86:	4b12      	ldr	r3, [pc, #72]	@ (8014ed0 <timer_fn_mqtt+0x80>)
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	b2db      	uxtb	r3, r3
 8014e8c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8014e90:	2304      	movs	r3, #4
 8014e92:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8014e96:	2301      	movs	r3, #1
 8014e98:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (s_conn == NULL) s_conn = mg_mqtt_connect(mgr, s_url, &opts, (mg_event_handler_t) fn_mqtt, NULL);
 8014e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8014ed4 <timer_fn_mqtt+0x84>)
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d10c      	bne.n	8014ebe <timer_fn_mqtt+0x6e>
 8014ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8014ed8 <timer_fn_mqtt+0x88>)
 8014ea6:	6819      	ldr	r1, [r3, #0]
 8014ea8:	f107 020c 	add.w	r2, r7, #12
 8014eac:	2300      	movs	r3, #0
 8014eae:	9300      	str	r3, [sp, #0]
 8014eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8014edc <timer_fn_mqtt+0x8c>)
 8014eb2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8014eb4:	f7f8 f9de 	bl	800d274 <mg_mqtt_connect>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	4a06      	ldr	r2, [pc, #24]	@ (8014ed4 <timer_fn_mqtt+0x84>)
 8014ebc:	6013      	str	r3, [r2, #0]
}
 8014ebe:	bf00      	nop
 8014ec0:	3750      	adds	r7, #80	@ 0x50
 8014ec2:	46bd      	mov	sp, r7
 8014ec4:	bd80      	pop	{r7, pc}
 8014ec6:	bf00      	nop
 8014ec8:	20000264 	.word	0x20000264
 8014ecc:	0803101c 	.word	0x0803101c
 8014ed0:	20014c38 	.word	0x20014c38
 8014ed4:	20014c34 	.word	0x20014c34
 8014ed8:	2000025c 	.word	0x2000025c
 8014edc:	08014bcd 	.word	0x08014bcd

08014ee0 <web_init>:

void web_init(struct mg_mgr *mgr) {
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b08a      	sub	sp, #40	@ 0x28
 8014ee4:	af04      	add	r7, sp, #16
 8014ee6:	6078      	str	r0, [r7, #4]
  s_settings.device_name = strdup("My Device");
 8014ee8:	f107 0308 	add.w	r3, r7, #8
 8014eec:	491b      	ldr	r1, [pc, #108]	@ (8014f5c <web_init+0x7c>)
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f7fc fee6 	bl	8011cc0 <mg_str_s>
 8014ef4:	f107 0010 	add.w	r0, r7, #16
 8014ef8:	f107 0308 	add.w	r3, r7, #8
 8014efc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8014f00:	f7fc ffa0 	bl	8011e44 <mg_strdup>
 8014f04:	693b      	ldr	r3, [r7, #16]
 8014f06:	4a16      	ldr	r2, [pc, #88]	@ (8014f60 <web_init+0x80>)
 8014f08:	60d3      	str	r3, [r2, #12]
  mg_http_listen(mgr, HTTP_URL, fn, NULL);
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	4a15      	ldr	r2, [pc, #84]	@ (8014f64 <web_init+0x84>)
 8014f0e:	4916      	ldr	r1, [pc, #88]	@ (8014f68 <web_init+0x88>)
 8014f10:	6878      	ldr	r0, [r7, #4]
 8014f12:	f7f6 f841 	bl	800af98 <mg_http_listen>
  mg_http_listen(mgr, HTTPS_URL, fn, (void *) 1);
 8014f16:	2301      	movs	r3, #1
 8014f18:	4a12      	ldr	r2, [pc, #72]	@ (8014f64 <web_init+0x84>)
 8014f1a:	4914      	ldr	r1, [pc, #80]	@ (8014f6c <web_init+0x8c>)
 8014f1c:	6878      	ldr	r0, [r7, #4]
 8014f1e:	f7f6 f83b 	bl	800af98 <mg_http_listen>
  mg_timer_add(mgr, 3600 * 1000, MG_TIMER_RUN_NOW | MG_TIMER_REPEAT, timer_sntp_fn, mgr);
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	9302      	str	r3, [sp, #8]
 8014f26:	4b12      	ldr	r3, [pc, #72]	@ (8014f70 <web_init+0x90>)
 8014f28:	9301      	str	r3, [sp, #4]
 8014f2a:	2303      	movs	r3, #3
 8014f2c:	9300      	str	r3, [sp, #0]
 8014f2e:	4a11      	ldr	r2, [pc, #68]	@ (8014f74 <web_init+0x94>)
 8014f30:	f04f 0300 	mov.w	r3, #0
 8014f34:	6878      	ldr	r0, [r7, #4]
 8014f36:	f7f8 fe3b 	bl	800dbb0 <mg_timer_add>
  mg_timer_add(mgr, 1000, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, timer_fn_mqtt, mgr);
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	9302      	str	r3, [sp, #8]
 8014f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8014f78 <web_init+0x98>)
 8014f40:	9301      	str	r3, [sp, #4]
 8014f42:	2303      	movs	r3, #3
 8014f44:	9300      	str	r3, [sp, #0]
 8014f46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014f4a:	f04f 0300 	mov.w	r3, #0
 8014f4e:	6878      	ldr	r0, [r7, #4]
 8014f50:	f7f8 fe2e 	bl	800dbb0 <mg_timer_add>
}
 8014f54:	bf00      	nop
 8014f56:	3718      	adds	r7, #24
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	bd80      	pop	{r7, pc}
 8014f5c:	08031020 	.word	0x08031020
 8014f60:	20000268 	.word	0x20000268
 8014f64:	080147a1 	.word	0x080147a1
 8014f68:	0803102c 	.word	0x0803102c
 8014f6c:	08031040 	.word	0x08031040
 8014f70:	08013c89 	.word	0x08013c89
 8014f74:	0036ee80 	.word	0x0036ee80
 8014f78:	08014e51 	.word	0x08014e51

08014f7c <ONEWIRE_DELAY>:
#include "stdio.h"/* для printf */
#include "FreeRTOS.h"
#include "task.h"

void ONEWIRE_DELAY(uint16_t time_us)
{
 8014f7c:	b480      	push	{r7}
 8014f7e:	b083      	sub	sp, #12
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	4603      	mov	r3, r0
 8014f84:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8014f86:	4b09      	ldr	r3, [pc, #36]	@ (8014fac <ONEWIRE_DELAY+0x30>)
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	625a      	str	r2, [r3, #36]	@ 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8014f8e:	bf00      	nop
 8014f90:	4b06      	ldr	r3, [pc, #24]	@ (8014fac <ONEWIRE_DELAY+0x30>)
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014f96:	88fb      	ldrh	r3, [r7, #6]
 8014f98:	429a      	cmp	r2, r3
 8014f9a:	d9f9      	bls.n	8014f90 <ONEWIRE_DELAY+0x14>
}
 8014f9c:	bf00      	nop
 8014f9e:	bf00      	nop
 8014fa0:	370c      	adds	r7, #12
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa8:	4770      	bx	lr
 8014faa:	bf00      	nop
 8014fac:	20011848 	.word	0x20011848

08014fb0 <ONEWIRE_LOW>:
void ONEWIRE_LOW(OneWire_t *gp)
{
 8014fb0:	b480      	push	{r7}
 8014fb2:	b083      	sub	sp, #12
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	889b      	ldrh	r3, [r3, #4]
 8014fbc:	461a      	mov	r2, r3
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	0412      	lsls	r2, r2, #16
 8014fc4:	619a      	str	r2, [r3, #24]
}	
 8014fc6:	bf00      	nop
 8014fc8:	370c      	adds	r7, #12
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd0:	4770      	bx	lr

08014fd2 <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8014fd2:	b480      	push	{r7}
 8014fd4:	b083      	sub	sp, #12
 8014fd6:	af00      	add	r7, sp, #0
 8014fd8:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	889a      	ldrh	r2, [r3, #4]
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	619a      	str	r2, [r3, #24]
}	
 8014fe4:	bf00      	nop
 8014fe6:	370c      	adds	r7, #12
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fee:	4770      	bx	lr

08014ff0 <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b088      	sub	sp, #32
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8015000:	2302      	movs	r3, #2
 8015002:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;	
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	889b      	ldrh	r3, [r3, #4]
 8015008:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	f107 020c 	add.w	r2, r7, #12
 8015012:	4611      	mov	r1, r2
 8015014:	4618      	mov	r0, r3
 8015016:	f003 ff37 	bl	8018e88 <HAL_GPIO_Init>
}	
 801501a:	bf00      	nop
 801501c:	3720      	adds	r7, #32
 801501e:	46bd      	mov	sp, r7
 8015020:	bd80      	pop	{r7, pc}

08015022 <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8015022:	b580      	push	{r7, lr}
 8015024:	b088      	sub	sp, #32
 8015026:	af00      	add	r7, sp, #0
 8015028:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 801502a:	2311      	movs	r3, #17
 801502c:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 801502e:	2300      	movs	r3, #0
 8015030:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8015032:	2302      	movs	r3, #2
 8015034:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	889b      	ldrh	r3, [r3, #4]
 801503a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	f107 020c 	add.w	r2, r7, #12
 8015044:	4611      	mov	r1, r2
 8015046:	4618      	mov	r0, r3
 8015048:	f003 ff1e 	bl	8018e88 <HAL_GPIO_Init>

}
 801504c:	bf00      	nop
 801504e:	3720      	adds	r7, #32
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}

08015054 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) 
{	
 8015054:	b580      	push	{r7, lr}
 8015056:	b084      	sub	sp, #16
 8015058:	af00      	add	r7, sp, #0
 801505a:	60f8      	str	r0, [r7, #12]
 801505c:	60b9      	str	r1, [r7, #8]
 801505e:	4613      	mov	r3, r2
 8015060:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
 8015062:	4812      	ldr	r0, [pc, #72]	@ (80150ac <OneWire_Init+0x58>)
 8015064:	f007 fd94 	bl	801cb90 <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	68ba      	ldr	r2, [r7, #8]
 801506c:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	88fa      	ldrh	r2, [r7, #6]
 8015072:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8015074:	68f8      	ldr	r0, [r7, #12]
 8015076:	f7ff ffd4 	bl	8015022 <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 801507a:	68f8      	ldr	r0, [r7, #12]
 801507c:	f7ff ffa9 	bl	8014fd2 <ONEWIRE_HIGH>
	OneWireDelay(1000);
 8015080:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8015084:	f011 f9b6 	bl	80263f4 <osDelay>
	ONEWIRE_LOW(OneWireStruct);
 8015088:	68f8      	ldr	r0, [r7, #12]
 801508a:	f7ff ff91 	bl	8014fb0 <ONEWIRE_LOW>
	OneWireDelay(1000);
 801508e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8015092:	f011 f9af 	bl	80263f4 <osDelay>
	ONEWIRE_HIGH(OneWireStruct);
 8015096:	68f8      	ldr	r0, [r7, #12]
 8015098:	f7ff ff9b 	bl	8014fd2 <ONEWIRE_HIGH>
	OneWireDelay(2000);
 801509c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80150a0:	f011 f9a8 	bl	80263f4 <osDelay>
}
 80150a4:	bf00      	nop
 80150a6:	3710      	adds	r7, #16
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd80      	pop	{r7, pc}
 80150ac:	20011848 	.word	0x20011848

080150b0 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b084      	sub	sp, #16
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 80150b8:	6878      	ldr	r0, [r7, #4]
 80150ba:	f7ff ff79 	bl	8014fb0 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 80150be:	6878      	ldr	r0, [r7, #4]
 80150c0:	f7ff ffaf 	bl	8015022 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 80150c4:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 80150c8:	f7ff ff58 	bl	8014f7c <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 80150cc:	2014      	movs	r0, #20
 80150ce:	f7ff ff55 	bl	8014f7c <ONEWIRE_DELAY>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 80150d2:	6878      	ldr	r0, [r7, #4]
 80150d4:	f7ff ff8c 	bl	8014ff0 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 80150d8:	2046      	movs	r0, #70	@ 0x46
 80150da:	f7ff ff4f 	bl	8014f7c <ONEWIRE_DELAY>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	681a      	ldr	r2, [r3, #0]
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	889b      	ldrh	r3, [r3, #4]
 80150e6:	4619      	mov	r1, r3
 80150e8:	4610      	mov	r0, r2
 80150ea:	f004 f985 	bl	80193f8 <HAL_GPIO_ReadPin>
 80150ee:	4603      	mov	r3, r0
 80150f0:	73fb      	strb	r3, [r7, #15]
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 80150f2:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 80150f6:	f7ff ff41 	bl	8014f7c <ONEWIRE_DELAY>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 80150fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80150fc:	4618      	mov	r0, r3
 80150fe:	3710      	adds	r7, #16
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}

08015104 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b082      	sub	sp, #8
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
 801510c:	460b      	mov	r3, r1
 801510e:	70fb      	strb	r3, [r7, #3]
	portENTER_CRITICAL(); // Входим в критическую секцию
 8015110:	f014 fbe4 	bl	80298dc <vPortEnterCritical>
	if (bit) 
 8015114:	78fb      	ldrb	r3, [r7, #3]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d012      	beq.n	8015140 <OneWire_WriteBit+0x3c>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 801511a:	6878      	ldr	r0, [r7, #4]
 801511c:	f7ff ff48 	bl	8014fb0 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8015120:	6878      	ldr	r0, [r7, #4]
 8015122:	f7ff ff7e 	bl	8015022 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 8015126:	200a      	movs	r0, #10
 8015128:	f7ff ff28 	bl	8014f7c <ONEWIRE_DELAY>
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 801512c:	6878      	ldr	r0, [r7, #4]
 801512e:	f7ff ff5f 	bl	8014ff0 <ONEWIRE_INPUT>
		
		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 8015132:	2037      	movs	r0, #55	@ 0x37
 8015134:	f7ff ff22 	bl	8014f7c <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8015138:	6878      	ldr	r0, [r7, #4]
 801513a:	f7ff ff59 	bl	8014ff0 <ONEWIRE_INPUT>
 801513e:	e011      	b.n	8015164 <OneWire_WriteBit+0x60>
	} 
	else 
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 8015140:	6878      	ldr	r0, [r7, #4]
 8015142:	f7ff ff35 	bl	8014fb0 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8015146:	6878      	ldr	r0, [r7, #4]
 8015148:	f7ff ff6b 	bl	8015022 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(65);
 801514c:	2041      	movs	r0, #65	@ 0x41
 801514e:	f7ff ff15 	bl	8014f7c <ONEWIRE_DELAY>
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8015152:	6878      	ldr	r0, [r7, #4]
 8015154:	f7ff ff4c 	bl	8014ff0 <ONEWIRE_INPUT>
		
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
 8015158:	2005      	movs	r0, #5
 801515a:	f7ff ff0f 	bl	8014f7c <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 801515e:	6878      	ldr	r0, [r7, #4]
 8015160:	f7ff ff46 	bl	8014ff0 <ONEWIRE_INPUT>
	}
	portEXIT_CRITICAL(); // Выходим из критической секции
 8015164:	f014 fbf0 	bl	8029948 <vPortExitCritical>
}
 8015168:	bf00      	nop
 801516a:	3708      	adds	r7, #8
 801516c:	46bd      	mov	sp, r7
 801516e:	bd80      	pop	{r7, pc}

08015170 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct) 
{
 8015170:	b580      	push	{r7, lr}
 8015172:	b084      	sub	sp, #16
 8015174:	af00      	add	r7, sp, #0
 8015176:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8015178:	2300      	movs	r3, #0
 801517a:	73fb      	strb	r3, [r7, #15]
	portENTER_CRITICAL(); // Входим в критическую секцию
 801517c:	f014 fbae 	bl	80298dc <vPortEnterCritical>
	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8015180:	6878      	ldr	r0, [r7, #4]
 8015182:	f7ff ff15 	bl	8014fb0 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8015186:	6878      	ldr	r0, [r7, #4]
 8015188:	f7ff ff4b 	bl	8015022 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(2);
 801518c:	2002      	movs	r0, #2
 801518e:	f7ff fef5 	bl	8014f7c <ONEWIRE_DELAY>
	
	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8015192:	6878      	ldr	r0, [r7, #4]
 8015194:	f7ff ff2c 	bl	8014ff0 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(10);
 8015198:	200a      	movs	r0, #10
 801519a:	f7ff feef 	bl	8014f7c <ONEWIRE_DELAY>
	
	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	681a      	ldr	r2, [r3, #0]
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	889b      	ldrh	r3, [r3, #4]
 80151a6:	4619      	mov	r1, r3
 80151a8:	4610      	mov	r0, r2
 80151aa:	f004 f925 	bl	80193f8 <HAL_GPIO_ReadPin>
 80151ae:	4603      	mov	r3, r0
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d001      	beq.n	80151b8 <OneWire_ReadBit+0x48>
		/* Bit is HIGH */
		bit = 1;
 80151b4:	2301      	movs	r3, #1
 80151b6:	73fb      	strb	r3, [r7, #15]
	}
	
	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
 80151b8:	2032      	movs	r0, #50	@ 0x32
 80151ba:	f7ff fedf 	bl	8014f7c <ONEWIRE_DELAY>
	portEXIT_CRITICAL(); // Выходим из критической секции
 80151be:	f014 fbc3 	bl	8029948 <vPortExitCritical>
	/* Return bit value */
	return bit;
 80151c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80151c4:	4618      	mov	r0, r3
 80151c6:	3710      	adds	r7, #16
 80151c8:	46bd      	mov	sp, r7
 80151ca:	bd80      	pop	{r7, pc}

080151cc <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b084      	sub	sp, #16
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	6078      	str	r0, [r7, #4]
 80151d4:	460b      	mov	r3, r1
 80151d6:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 80151d8:	2308      	movs	r3, #8
 80151da:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 80151dc:	e00a      	b.n	80151f4 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 80151de:	78fb      	ldrb	r3, [r7, #3]
 80151e0:	f003 0301 	and.w	r3, r3, #1
 80151e4:	b2db      	uxtb	r3, r3
 80151e6:	4619      	mov	r1, r3
 80151e8:	6878      	ldr	r0, [r7, #4]
 80151ea:	f7ff ff8b 	bl	8015104 <OneWire_WriteBit>
		byte >>= 1;
 80151ee:	78fb      	ldrb	r3, [r7, #3]
 80151f0:	085b      	lsrs	r3, r3, #1
 80151f2:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 80151f4:	7bfb      	ldrb	r3, [r7, #15]
 80151f6:	1e5a      	subs	r2, r3, #1
 80151f8:	73fa      	strb	r2, [r7, #15]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d1ef      	bne.n	80151de <OneWire_WriteByte+0x12>
	}
}
 80151fe:	bf00      	nop
 8015200:	bf00      	nop
 8015202:	3710      	adds	r7, #16
 8015204:	46bd      	mov	sp, r7
 8015206:	bd80      	pop	{r7, pc}

08015208 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8015208:	b580      	push	{r7, lr}
 801520a:	b084      	sub	sp, #16
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8015210:	2308      	movs	r3, #8
 8015212:	73fb      	strb	r3, [r7, #15]
 8015214:	2300      	movs	r3, #0
 8015216:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8015218:	e00d      	b.n	8015236 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 801521a:	7bbb      	ldrb	r3, [r7, #14]
 801521c:	085b      	lsrs	r3, r3, #1
 801521e:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8015220:	6878      	ldr	r0, [r7, #4]
 8015222:	f7ff ffa5 	bl	8015170 <OneWire_ReadBit>
 8015226:	4603      	mov	r3, r0
 8015228:	01db      	lsls	r3, r3, #7
 801522a:	b25a      	sxtb	r2, r3
 801522c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015230:	4313      	orrs	r3, r2
 8015232:	b25b      	sxtb	r3, r3
 8015234:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8015236:	7bfb      	ldrb	r3, [r7, #15]
 8015238:	1e5a      	subs	r2, r3, #1
 801523a:	73fa      	strb	r2, [r7, #15]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d1ec      	bne.n	801521a <OneWire_ReadByte+0x12>
	}
	
	return byte;
 8015240:	7bbb      	ldrb	r3, [r7, #14]
}
 8015242:	4618      	mov	r0, r3
 8015244:	3710      	adds	r7, #16
 8015246:	46bd      	mov	sp, r7
 8015248:	bd80      	pop	{r7, pc}

0801524a <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 801524a:	b580      	push	{r7, lr}
 801524c:	b082      	sub	sp, #8
 801524e:	af00      	add	r7, sp, #0
 8015250:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 8015252:	6878      	ldr	r0, [r7, #4]
 8015254:	f000 f816 	bl	8015284 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8015258:	21f0      	movs	r1, #240	@ 0xf0
 801525a:	6878      	ldr	r0, [r7, #4]
 801525c:	f000 f825 	bl	80152aa <OneWire_Search>
 8015260:	4603      	mov	r3, r0
}
 8015262:	4618      	mov	r0, r3
 8015264:	3708      	adds	r7, #8
 8015266:	46bd      	mov	sp, r7
 8015268:	bd80      	pop	{r7, pc}

0801526a <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 801526a:	b580      	push	{r7, lr}
 801526c:	b082      	sub	sp, #8
 801526e:	af00      	add	r7, sp, #0
 8015270:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8015272:	21f0      	movs	r1, #240	@ 0xf0
 8015274:	6878      	ldr	r0, [r7, #4]
 8015276:	f000 f818 	bl	80152aa <OneWire_Search>
 801527a:	4603      	mov	r3, r0
}
 801527c:	4618      	mov	r0, r3
 801527e:	3708      	adds	r7, #8
 8015280:	46bd      	mov	sp, r7
 8015282:	bd80      	pop	{r7, pc}

08015284 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8015284:	b480      	push	{r7}
 8015286:	b083      	sub	sp, #12
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	2200      	movs	r2, #0
 8015290:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	2200      	movs	r2, #0
 8015296:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	2200      	movs	r2, #0
 801529c:	71da      	strb	r2, [r3, #7]
}
 801529e:	bf00      	nop
 80152a0:	370c      	adds	r7, #12
 80152a2:	46bd      	mov	sp, r7
 80152a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a8:	4770      	bx	lr

080152aa <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 80152aa:	b580      	push	{r7, lr}
 80152ac:	b084      	sub	sp, #16
 80152ae:	af00      	add	r7, sp, #0
 80152b0:	6078      	str	r0, [r7, #4]
 80152b2:	460b      	mov	r3, r1
 80152b4:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 80152b6:	2301      	movs	r3, #1
 80152b8:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 80152ba:	2300      	movs	r3, #0
 80152bc:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 80152be:	2300      	movs	r3, #0
 80152c0:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 80152c2:	2301      	movs	r3, #1
 80152c4:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 80152c6:	2300      	movs	r3, #0
 80152c8:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	7a1b      	ldrb	r3, [r3, #8]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	f040 809a 	bne.w	8015408 <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct)) 
 80152d4:	6878      	ldr	r0, [r7, #4]
 80152d6:	f7ff feeb 	bl	80150b0 <OneWire_Reset>
 80152da:	4603      	mov	r3, r0
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d00a      	beq.n	80152f6 <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	2200      	movs	r2, #0
 80152e4:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	2200      	movs	r2, #0
 80152ea:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	2200      	movs	r2, #0
 80152f0:	71da      	strb	r2, [r3, #7]
			return 0;
 80152f2:	2300      	movs	r3, #0
 80152f4:	e09b      	b.n	801542e <OneWire_Search+0x184>
		}

		// issue the search command 
		OneWire_WriteByte(OneWireStruct, command);  
 80152f6:	78fb      	ldrb	r3, [r7, #3]
 80152f8:	4619      	mov	r1, r3
 80152fa:	6878      	ldr	r0, [r7, #4]
 80152fc:	f7ff ff66 	bl	80151cc <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 8015300:	6878      	ldr	r0, [r7, #4]
 8015302:	f7ff ff35 	bl	8015170 <OneWire_ReadBit>
 8015306:	4603      	mov	r3, r0
 8015308:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 801530a:	6878      	ldr	r0, [r7, #4]
 801530c:	f7ff ff30 	bl	8015170 <OneWire_ReadBit>
 8015310:	4603      	mov	r3, r0
 8015312:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8015314:	7a7b      	ldrb	r3, [r7, #9]
 8015316:	2b01      	cmp	r3, #1
 8015318:	d102      	bne.n	8015320 <OneWire_Search+0x76>
 801531a:	7a3b      	ldrb	r3, [r7, #8]
 801531c:	2b01      	cmp	r3, #1
 801531e:	d064      	beq.n	80153ea <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 8015320:	7a7a      	ldrb	r2, [r7, #9]
 8015322:	7a3b      	ldrb	r3, [r7, #8]
 8015324:	429a      	cmp	r2, r3
 8015326:	d002      	beq.n	801532e <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 8015328:	7a7b      	ldrb	r3, [r7, #9]
 801532a:	72bb      	strb	r3, [r7, #10]
 801532c:	e026      	b.n	801537c <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	799b      	ldrb	r3, [r3, #6]
 8015332:	7bfa      	ldrb	r2, [r7, #15]
 8015334:	429a      	cmp	r2, r3
 8015336:	d20d      	bcs.n	8015354 <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8015338:	7b7b      	ldrb	r3, [r7, #13]
 801533a:	687a      	ldr	r2, [r7, #4]
 801533c:	4413      	add	r3, r2
 801533e:	7a5a      	ldrb	r2, [r3, #9]
 8015340:	7afb      	ldrb	r3, [r7, #11]
 8015342:	4013      	ands	r3, r2
 8015344:	b2db      	uxtb	r3, r3
 8015346:	2b00      	cmp	r3, #0
 8015348:	bf14      	ite	ne
 801534a:	2301      	movne	r3, #1
 801534c:	2300      	moveq	r3, #0
 801534e:	b2db      	uxtb	r3, r3
 8015350:	72bb      	strb	r3, [r7, #10]
 8015352:	e008      	b.n	8015366 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	799b      	ldrb	r3, [r3, #6]
 8015358:	7bfa      	ldrb	r2, [r7, #15]
 801535a:	429a      	cmp	r2, r3
 801535c:	bf0c      	ite	eq
 801535e:	2301      	moveq	r3, #1
 8015360:	2300      	movne	r3, #0
 8015362:	b2db      	uxtb	r3, r3
 8015364:	72bb      	strb	r3, [r7, #10]
					}
					
					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8015366:	7abb      	ldrb	r3, [r7, #10]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d107      	bne.n	801537c <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 801536c:	7bfb      	ldrb	r3, [r7, #15]
 801536e:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 8015370:	7bbb      	ldrb	r3, [r7, #14]
 8015372:	2b08      	cmp	r3, #8
 8015374:	d802      	bhi.n	801537c <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	7bba      	ldrb	r2, [r7, #14]
 801537a:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 801537c:	7abb      	ldrb	r3, [r7, #10]
 801537e:	2b01      	cmp	r3, #1
 8015380:	d10c      	bne.n	801539c <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8015382:	7b7b      	ldrb	r3, [r7, #13]
 8015384:	687a      	ldr	r2, [r7, #4]
 8015386:	4413      	add	r3, r2
 8015388:	7a59      	ldrb	r1, [r3, #9]
 801538a:	7b7b      	ldrb	r3, [r7, #13]
 801538c:	7afa      	ldrb	r2, [r7, #11]
 801538e:	430a      	orrs	r2, r1
 8015390:	b2d1      	uxtb	r1, r2
 8015392:	687a      	ldr	r2, [r7, #4]
 8015394:	4413      	add	r3, r2
 8015396:	460a      	mov	r2, r1
 8015398:	725a      	strb	r2, [r3, #9]
 801539a:	e010      	b.n	80153be <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 801539c:	7b7b      	ldrb	r3, [r7, #13]
 801539e:	687a      	ldr	r2, [r7, #4]
 80153a0:	4413      	add	r3, r2
 80153a2:	7a5b      	ldrb	r3, [r3, #9]
 80153a4:	b25a      	sxtb	r2, r3
 80153a6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80153aa:	43db      	mvns	r3, r3
 80153ac:	b25b      	sxtb	r3, r3
 80153ae:	4013      	ands	r3, r2
 80153b0:	b25a      	sxtb	r2, r3
 80153b2:	7b7b      	ldrb	r3, [r7, #13]
 80153b4:	b2d1      	uxtb	r1, r2
 80153b6:	687a      	ldr	r2, [r7, #4]
 80153b8:	4413      	add	r3, r2
 80153ba:	460a      	mov	r2, r1
 80153bc:	725a      	strb	r2, [r3, #9]
				}
				
				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 80153be:	7abb      	ldrb	r3, [r7, #10]
 80153c0:	4619      	mov	r1, r3
 80153c2:	6878      	ldr	r0, [r7, #4]
 80153c4:	f7ff fe9e 	bl	8015104 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 80153c8:	7bfb      	ldrb	r3, [r7, #15]
 80153ca:	3301      	adds	r3, #1
 80153cc:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 80153ce:	7afb      	ldrb	r3, [r7, #11]
 80153d0:	005b      	lsls	r3, r3, #1
 80153d2:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 80153d4:	7afb      	ldrb	r3, [r7, #11]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d104      	bne.n	80153e4 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 80153da:	7b7b      	ldrb	r3, [r7, #13]
 80153dc:	3301      	adds	r3, #1
 80153de:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 80153e0:	2301      	movs	r3, #1
 80153e2:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80153e4:	7b7b      	ldrb	r3, [r7, #13]
 80153e6:	2b07      	cmp	r3, #7
 80153e8:	d98a      	bls.n	8015300 <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 80153ea:	7bfb      	ldrb	r3, [r7, #15]
 80153ec:	2b40      	cmp	r3, #64	@ 0x40
 80153ee:	d90b      	bls.n	8015408 <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	7bba      	ldrb	r2, [r7, #14]
 80153f4:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	799b      	ldrb	r3, [r3, #6]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d102      	bne.n	8015404 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	2201      	movs	r2, #1
 8015402:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 8015404:	2301      	movs	r3, #1
 8015406:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8015408:	7b3b      	ldrb	r3, [r7, #12]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d003      	beq.n	8015416 <OneWire_Search+0x16c>
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	7a5b      	ldrb	r3, [r3, #9]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d10a      	bne.n	801542c <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	2200      	movs	r2, #0
 801541a:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	2200      	movs	r2, #0
 8015420:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	2200      	movs	r2, #0
 8015426:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8015428:	2300      	movs	r3, #0
 801542a:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 801542c:	7b3b      	ldrb	r3, [r7, #12]
}
 801542e:	4618      	mov	r0, r3
 8015430:	3710      	adds	r7, #16
 8015432:	46bd      	mov	sp, r7
 8015434:	bd80      	pop	{r7, pc}

08015436 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 8015436:	b580      	push	{r7, lr}
 8015438:	b084      	sub	sp, #16
 801543a:	af00      	add	r7, sp, #0
 801543c:	6078      	str	r0, [r7, #4]
 801543e:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8015440:	2155      	movs	r1, #85	@ 0x55
 8015442:	6878      	ldr	r0, [r7, #4]
 8015444:	f7ff fec2 	bl	80151cc <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++) {
 8015448:	2300      	movs	r3, #0
 801544a:	73fb      	strb	r3, [r7, #15]
 801544c:	e00a      	b.n	8015464 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 801544e:	7bfb      	ldrb	r3, [r7, #15]
 8015450:	683a      	ldr	r2, [r7, #0]
 8015452:	4413      	add	r3, r2
 8015454:	781b      	ldrb	r3, [r3, #0]
 8015456:	4619      	mov	r1, r3
 8015458:	6878      	ldr	r0, [r7, #4]
 801545a:	f7ff feb7 	bl	80151cc <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 801545e:	7bfb      	ldrb	r3, [r7, #15]
 8015460:	3301      	adds	r3, #1
 8015462:	73fb      	strb	r3, [r7, #15]
 8015464:	7bfb      	ldrb	r3, [r7, #15]
 8015466:	2b07      	cmp	r3, #7
 8015468:	d9f1      	bls.n	801544e <OneWire_SelectWithPointer+0x18>
	}	
}
 801546a:	bf00      	nop
 801546c:	bf00      	nop
 801546e:	3710      	adds	r7, #16
 8015470:	46bd      	mov	sp, r7
 8015472:	bd80      	pop	{r7, pc}

08015474 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8015474:	b580      	push	{r7, lr}
 8015476:	b084      	sub	sp, #16
 8015478:	af00      	add	r7, sp, #0
 801547a:	6078      	str	r0, [r7, #4]
 801547c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 801547e:	2300      	movs	r3, #0
 8015480:	73fb      	strb	r3, [r7, #15]
 8015482:	e01b      	b.n	80154bc <OneWire_GetFullROM+0x48>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8015484:	7bfa      	ldrb	r2, [r7, #15]
 8015486:	7bfb      	ldrb	r3, [r7, #15]
 8015488:	6839      	ldr	r1, [r7, #0]
 801548a:	440b      	add	r3, r1
 801548c:	6879      	ldr	r1, [r7, #4]
 801548e:	440a      	add	r2, r1
 8015490:	7a52      	ldrb	r2, [r2, #9]
 8015492:	701a      	strb	r2, [r3, #0]


		printf("%02X ", OneWireStruct->ROM_NO[i]);
 8015494:	7bfb      	ldrb	r3, [r7, #15]
 8015496:	687a      	ldr	r2, [r7, #4]
 8015498:	4413      	add	r3, r2
 801549a:	7a5b      	ldrb	r3, [r3, #9]
 801549c:	4619      	mov	r1, r3
 801549e:	480b      	ldr	r0, [pc, #44]	@ (80154cc <OneWire_GetFullROM+0x58>)
 80154a0:	f016 f96e 	bl	802b780 <iprintf>
	    if ((i + 1) % 8 == 0) {
 80154a4:	7bfb      	ldrb	r3, [r7, #15]
 80154a6:	3301      	adds	r3, #1
 80154a8:	f003 0307 	and.w	r3, r3, #7
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d102      	bne.n	80154b6 <OneWire_GetFullROM+0x42>
	      printf("\n");
 80154b0:	200a      	movs	r0, #10
 80154b2:	f016 f977 	bl	802b7a4 <putchar>
	for (i = 0; i < 8; i++) {
 80154b6:	7bfb      	ldrb	r3, [r7, #15]
 80154b8:	3301      	adds	r3, #1
 80154ba:	73fb      	strb	r3, [r7, #15]
 80154bc:	7bfb      	ldrb	r3, [r7, #15]
 80154be:	2b07      	cmp	r3, #7
 80154c0:	d9e0      	bls.n	8015484 <OneWire_GetFullROM+0x10>
	    }
	}
}
 80154c2:	bf00      	nop
 80154c4:	bf00      	nop
 80154c6:	3710      	adds	r7, #16
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd80      	pop	{r7, pc}
 80154cc:	08031094 	.word	0x08031094

080154d0 <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 80154d0:	b480      	push	{r7}
 80154d2:	b085      	sub	sp, #20
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
 80154d8:	460b      	mov	r3, r1
 80154da:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 80154dc:	2300      	movs	r3, #0
 80154de:	73fb      	strb	r3, [r7, #15]
	
	while (len--) {
 80154e0:	e022      	b.n	8015528 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	1c5a      	adds	r2, r3, #1
 80154e6:	607a      	str	r2, [r7, #4]
 80154e8:	781b      	ldrb	r3, [r3, #0]
 80154ea:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 80154ec:	2308      	movs	r3, #8
 80154ee:	737b      	strb	r3, [r7, #13]
 80154f0:	e017      	b.n	8015522 <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 80154f2:	7bfa      	ldrb	r2, [r7, #15]
 80154f4:	7bbb      	ldrb	r3, [r7, #14]
 80154f6:	4053      	eors	r3, r2
 80154f8:	b2db      	uxtb	r3, r3
 80154fa:	f003 0301 	and.w	r3, r3, #1
 80154fe:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8015500:	7bfb      	ldrb	r3, [r7, #15]
 8015502:	085b      	lsrs	r3, r3, #1
 8015504:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8015506:	7b3b      	ldrb	r3, [r7, #12]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d004      	beq.n	8015516 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 801550c:	7bfb      	ldrb	r3, [r7, #15]
 801550e:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8015512:	43db      	mvns	r3, r3
 8015514:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8015516:	7bbb      	ldrb	r3, [r7, #14]
 8015518:	085b      	lsrs	r3, r3, #1
 801551a:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 801551c:	7b7b      	ldrb	r3, [r7, #13]
 801551e:	3b01      	subs	r3, #1
 8015520:	737b      	strb	r3, [r7, #13]
 8015522:	7b7b      	ldrb	r3, [r7, #13]
 8015524:	2b00      	cmp	r3, #0
 8015526:	d1e4      	bne.n	80154f2 <OneWire_CRC8+0x22>
	while (len--) {
 8015528:	78fb      	ldrb	r3, [r7, #3]
 801552a:	1e5a      	subs	r2, r3, #1
 801552c:	70fa      	strb	r2, [r7, #3]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d1d7      	bne.n	80154e2 <OneWire_CRC8+0x12>
		}
	}
	
	/* Return calculated CRC */
	return crc;
 8015532:	7bfb      	ldrb	r3, [r7, #15]
}
 8015534:	4618      	mov	r0, r3
 8015536:	3714      	adds	r7, #20
 8015538:	46bd      	mov	sp, r7
 801553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553e:	4770      	bx	lr

08015540 <scmp>:
  {"/web_root/main.css.gz", v5, sizeof(v5), 1715251262},
  {"/web_root/main.js.gz", v6, sizeof(v6), 1715251262},
  {NULL, NULL, 0, 0}
};

static int scmp(const char *a, const char *b) {
 8015540:	b480      	push	{r7}
 8015542:	b083      	sub	sp, #12
 8015544:	af00      	add	r7, sp, #0
 8015546:	6078      	str	r0, [r7, #4]
 8015548:	6039      	str	r1, [r7, #0]
  while (*a && (*a == *b)) a++, b++;
 801554a:	e005      	b.n	8015558 <scmp+0x18>
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	3301      	adds	r3, #1
 8015550:	607b      	str	r3, [r7, #4]
 8015552:	683b      	ldr	r3, [r7, #0]
 8015554:	3301      	adds	r3, #1
 8015556:	603b      	str	r3, [r7, #0]
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	781b      	ldrb	r3, [r3, #0]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d005      	beq.n	801556c <scmp+0x2c>
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	781a      	ldrb	r2, [r3, #0]
 8015564:	683b      	ldr	r3, [r7, #0]
 8015566:	781b      	ldrb	r3, [r3, #0]
 8015568:	429a      	cmp	r2, r3
 801556a:	d0ef      	beq.n	801554c <scmp+0xc>
  return *(const unsigned char *) a - *(const unsigned char *) b;
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	781b      	ldrb	r3, [r3, #0]
 8015570:	461a      	mov	r2, r3
 8015572:	683b      	ldr	r3, [r7, #0]
 8015574:	781b      	ldrb	r3, [r3, #0]
 8015576:	1ad3      	subs	r3, r2, r3
}
 8015578:	4618      	mov	r0, r3
 801557a:	370c      	adds	r7, #12
 801557c:	46bd      	mov	sp, r7
 801557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015582:	4770      	bx	lr

08015584 <mg_unlist>:
const char *mg_unlist(size_t no) {
 8015584:	b480      	push	{r7}
 8015586:	b083      	sub	sp, #12
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
  return packed_files[no].name;
 801558c:	4906      	ldr	r1, [pc, #24]	@ (80155a8 <mg_unlist+0x24>)
 801558e:	687a      	ldr	r2, [r7, #4]
 8015590:	4613      	mov	r3, r2
 8015592:	005b      	lsls	r3, r3, #1
 8015594:	4413      	add	r3, r2
 8015596:	00db      	lsls	r3, r3, #3
 8015598:	440b      	add	r3, r1
 801559a:	681b      	ldr	r3, [r3, #0]
}
 801559c:	4618      	mov	r0, r3
 801559e:	370c      	adds	r7, #12
 80155a0:	46bd      	mov	sp, r7
 80155a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a6:	4770      	bx	lr
 80155a8:	0803a1f8 	.word	0x0803a1f8

080155ac <mg_unpack>:
const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b086      	sub	sp, #24
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	60f8      	str	r0, [r7, #12]
 80155b4:	60b9      	str	r1, [r7, #8]
 80155b6:	607a      	str	r2, [r7, #4]
  const struct packed_file *p;
  for (p = packed_files; p->name != NULL; p++) {
 80155b8:	4b16      	ldr	r3, [pc, #88]	@ (8015614 <mg_unpack+0x68>)
 80155ba:	617b      	str	r3, [r7, #20]
 80155bc:	e020      	b.n	8015600 <mg_unpack+0x54>
    if (scmp(p->name, name) != 0) continue;
 80155be:	697b      	ldr	r3, [r7, #20]
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	68f9      	ldr	r1, [r7, #12]
 80155c4:	4618      	mov	r0, r3
 80155c6:	f7ff ffbb 	bl	8015540 <scmp>
 80155ca:	4603      	mov	r3, r0
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d113      	bne.n	80155f8 <mg_unpack+0x4c>
    if (size != NULL) *size = p->size - 1;
 80155d0:	68bb      	ldr	r3, [r7, #8]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d004      	beq.n	80155e0 <mg_unpack+0x34>
 80155d6:	697b      	ldr	r3, [r7, #20]
 80155d8:	689b      	ldr	r3, [r3, #8]
 80155da:	1e5a      	subs	r2, r3, #1
 80155dc:	68bb      	ldr	r3, [r7, #8]
 80155de:	601a      	str	r2, [r3, #0]
    if (mtime != NULL) *mtime = p->mtime;
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d005      	beq.n	80155f2 <mg_unpack+0x46>
 80155e6:	697b      	ldr	r3, [r7, #20]
 80155e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80155ec:	6879      	ldr	r1, [r7, #4]
 80155ee:	e9c1 2300 	strd	r2, r3, [r1]
    return (const char *) p->data;
 80155f2:	697b      	ldr	r3, [r7, #20]
 80155f4:	685b      	ldr	r3, [r3, #4]
 80155f6:	e008      	b.n	801560a <mg_unpack+0x5e>
    if (scmp(p->name, name) != 0) continue;
 80155f8:	bf00      	nop
  for (p = packed_files; p->name != NULL; p++) {
 80155fa:	697b      	ldr	r3, [r7, #20]
 80155fc:	3318      	adds	r3, #24
 80155fe:	617b      	str	r3, [r7, #20]
 8015600:	697b      	ldr	r3, [r7, #20]
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d1da      	bne.n	80155be <mg_unpack+0x12>
  }
  return NULL;
 8015608:	2300      	movs	r3, #0
}
 801560a:	4618      	mov	r0, r3
 801560c:	3718      	adds	r7, #24
 801560e:	46bd      	mov	sp, r7
 8015610:	bd80      	pop	{r7, pc}
 8015612:	bf00      	nop
 8015614:	0803a1f8 	.word	0x0803a1f8

08015618 <SetSetingsConfig>:
//    }
//}
/**************************************************************************/

// Когда форму сохраняем
void SetSetingsConfig() {
 8015618:	b580      	push	{r7, lr}
 801561a:	b084      	sub	sp, #16
 801561c:	af00      	add	r7, sp, #0
	cJSON *root_obj = NULL;
 801561e:	2300      	movs	r3, #0
 8015620:	60fb      	str	r3, [r7, #12]
	char *out_str = NULL;
 8015622:	2300      	movs	r3, #0
 8015624:	60bb      	str	r3, [r7, #8]
	FRESULT fresult;
	UINT Byteswritten; // File read/write count

	if (f_open(&USBHFile, (const TCHAR*) "setings.ini", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
 8015626:	220a      	movs	r2, #10
 8015628:	49c4      	ldr	r1, [pc, #784]	@ (801593c <SetSetingsConfig+0x324>)
 801562a:	48c5      	ldr	r0, [pc, #788]	@ (8015940 <SetSetingsConfig+0x328>)
 801562c:	f00f ff10 	bl	8025450 <f_open>
 8015630:	4603      	mov	r3, r0
 8015632:	2b00      	cmp	r3, #0
 8015634:	f040 82a9 	bne.w	8015b8a <SetSetingsConfig+0x572>

		root_obj = cJSON_CreateObject();
 8015638:	f7ed fad2 	bl	8002be0 <cJSON_CreateObject>
 801563c:	60f8      	str	r0, [r7, #12]
		cJSON_AddStringToObject(root_obj, "adm_name", SetSettings.adm_name);
 801563e:	4ac1      	ldr	r2, [pc, #772]	@ (8015944 <SetSetingsConfig+0x32c>)
 8015640:	49c1      	ldr	r1, [pc, #772]	@ (8015948 <SetSetingsConfig+0x330>)
 8015642:	68f8      	ldr	r0, [r7, #12]
 8015644:	f7ed fa26 	bl	8002a94 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "adm_pswd", SetSettings.adm_pswd);
 8015648:	4ac0      	ldr	r2, [pc, #768]	@ (801594c <SetSetingsConfig+0x334>)
 801564a:	49c1      	ldr	r1, [pc, #772]	@ (8015950 <SetSetingsConfig+0x338>)
 801564c:	68f8      	ldr	r0, [r7, #12]
 801564e:	f7ed fa21 	bl	8002a94 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "token", SetSettings.token);
 8015652:	4ac0      	ldr	r2, [pc, #768]	@ (8015954 <SetSetingsConfig+0x33c>)
 8015654:	49c0      	ldr	r1, [pc, #768]	@ (8015958 <SetSetingsConfig+0x340>)
 8015656:	68f8      	ldr	r0, [r7, #12]
 8015658:	f7ed fa1c 	bl	8002a94 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "lang", SetSettings.lang);
 801565c:	4abf      	ldr	r2, [pc, #764]	@ (801595c <SetSetingsConfig+0x344>)
 801565e:	49c0      	ldr	r1, [pc, #768]	@ (8015960 <SetSetingsConfig+0x348>)
 8015660:	68f8      	ldr	r0, [r7, #12]
 8015662:	f7ed fa17 	bl	8002a94 <cJSON_AddStringToObject>
		cJSON_AddNumberToObject(root_obj, "timezone", SetSettings.timezone);
 8015666:	4bb7      	ldr	r3, [pc, #732]	@ (8015944 <SetSetingsConfig+0x32c>)
 8015668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801566a:	ee07 3a90 	vmov	s15, r3
 801566e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015672:	eeb0 0b47 	vmov.f64	d0, d7
 8015676:	49bb      	ldr	r1, [pc, #748]	@ (8015964 <SetSetingsConfig+0x34c>)
 8015678:	68f8      	ldr	r0, [r7, #12]
 801567a:	f7ed f9e7 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "lon_de", SetSettings.lon_de);
 801567e:	4bb1      	ldr	r3, [pc, #708]	@ (8015944 <SetSetingsConfig+0x32c>)
 8015680:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8015684:	eeb0 0b47 	vmov.f64	d0, d7
 8015688:	49b7      	ldr	r1, [pc, #732]	@ (8015968 <SetSetingsConfig+0x350>)
 801568a:	68f8      	ldr	r0, [r7, #12]
 801568c:	f7ed f9de 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "lat_de", SetSettings.lat_de);
 8015690:	4bac      	ldr	r3, [pc, #688]	@ (8015944 <SetSetingsConfig+0x32c>)
 8015692:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 8015696:	eeb0 0b47 	vmov.f64	d0, d7
 801569a:	49b4      	ldr	r1, [pc, #720]	@ (801596c <SetSetingsConfig+0x354>)
 801569c:	68f8      	ldr	r0, [r7, #12]
 801569e:	f7ed f9d5 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip1_sntp0", SetSettings.ip1_sntp0);
 80156a2:	4ba8      	ldr	r3, [pc, #672]	@ (8015944 <SetSetingsConfig+0x32c>)
 80156a4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80156a8:	ee07 3a90 	vmov	s15, r3
 80156ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80156b0:	eeb0 0b47 	vmov.f64	d0, d7
 80156b4:	49ae      	ldr	r1, [pc, #696]	@ (8015970 <SetSetingsConfig+0x358>)
 80156b6:	68f8      	ldr	r0, [r7, #12]
 80156b8:	f7ed f9c8 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip1_sntp1", SetSettings.ip1_sntp1);
 80156bc:	4ba1      	ldr	r3, [pc, #644]	@ (8015944 <SetSetingsConfig+0x32c>)
 80156be:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 80156c2:	ee07 3a90 	vmov	s15, r3
 80156c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80156ca:	eeb0 0b47 	vmov.f64	d0, d7
 80156ce:	49a9      	ldr	r1, [pc, #676]	@ (8015974 <SetSetingsConfig+0x35c>)
 80156d0:	68f8      	ldr	r0, [r7, #12]
 80156d2:	f7ed f9bb 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip1_sntp2", SetSettings.ip1_sntp2);
 80156d6:	4b9b      	ldr	r3, [pc, #620]	@ (8015944 <SetSetingsConfig+0x32c>)
 80156d8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 80156dc:	ee07 3a90 	vmov	s15, r3
 80156e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80156e4:	eeb0 0b47 	vmov.f64	d0, d7
 80156e8:	49a3      	ldr	r1, [pc, #652]	@ (8015978 <SetSetingsConfig+0x360>)
 80156ea:	68f8      	ldr	r0, [r7, #12]
 80156ec:	f7ed f9ae 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip1_sntp3", SetSettings.ip1_sntp3);
 80156f0:	4b94      	ldr	r3, [pc, #592]	@ (8015944 <SetSetingsConfig+0x32c>)
 80156f2:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 80156f6:	ee07 3a90 	vmov	s15, r3
 80156fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80156fe:	eeb0 0b47 	vmov.f64	d0, d7
 8015702:	499e      	ldr	r1, [pc, #632]	@ (801597c <SetSetingsConfig+0x364>)
 8015704:	68f8      	ldr	r0, [r7, #12]
 8015706:	f7ed f9a1 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip2_sntp0", SetSettings.ip2_sntp0);
 801570a:	4b8e      	ldr	r3, [pc, #568]	@ (8015944 <SetSetingsConfig+0x32c>)
 801570c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 8015710:	ee07 3a90 	vmov	s15, r3
 8015714:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015718:	eeb0 0b47 	vmov.f64	d0, d7
 801571c:	4998      	ldr	r1, [pc, #608]	@ (8015980 <SetSetingsConfig+0x368>)
 801571e:	68f8      	ldr	r0, [r7, #12]
 8015720:	f7ed f994 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip2_sntp1", SetSettings.ip2_sntp1);
 8015724:	4b87      	ldr	r3, [pc, #540]	@ (8015944 <SetSetingsConfig+0x32c>)
 8015726:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 801572a:	ee07 3a90 	vmov	s15, r3
 801572e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015732:	eeb0 0b47 	vmov.f64	d0, d7
 8015736:	4993      	ldr	r1, [pc, #588]	@ (8015984 <SetSetingsConfig+0x36c>)
 8015738:	68f8      	ldr	r0, [r7, #12]
 801573a:	f7ed f987 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip2_sntp2", SetSettings.ip2_sntp2);
 801573e:	4b81      	ldr	r3, [pc, #516]	@ (8015944 <SetSetingsConfig+0x32c>)
 8015740:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 8015744:	ee07 3a90 	vmov	s15, r3
 8015748:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801574c:	eeb0 0b47 	vmov.f64	d0, d7
 8015750:	498d      	ldr	r1, [pc, #564]	@ (8015988 <SetSetingsConfig+0x370>)
 8015752:	68f8      	ldr	r0, [r7, #12]
 8015754:	f7ed f97a 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip2_sntp3", SetSettings.ip2_sntp3);
 8015758:	4b7a      	ldr	r3, [pc, #488]	@ (8015944 <SetSetingsConfig+0x32c>)
 801575a:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	@ 0x4e
 801575e:	ee07 3a90 	vmov	s15, r3
 8015762:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015766:	eeb0 0b47 	vmov.f64	d0, d7
 801576a:	4988      	ldr	r1, [pc, #544]	@ (801598c <SetSetingsConfig+0x374>)
 801576c:	68f8      	ldr	r0, [r7, #12]
 801576e:	f7ed f96d 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip3_sntp0", SetSettings.ip3_sntp0);
 8015772:	4b74      	ldr	r3, [pc, #464]	@ (8015944 <SetSetingsConfig+0x32c>)
 8015774:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 8015778:	ee07 3a90 	vmov	s15, r3
 801577c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015780:	eeb0 0b47 	vmov.f64	d0, d7
 8015784:	4982      	ldr	r1, [pc, #520]	@ (8015990 <SetSetingsConfig+0x378>)
 8015786:	68f8      	ldr	r0, [r7, #12]
 8015788:	f7ed f960 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip3_sntp1", SetSettings.ip3_sntp1);
 801578c:	4b6d      	ldr	r3, [pc, #436]	@ (8015944 <SetSetingsConfig+0x32c>)
 801578e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	@ 0x52
 8015792:	ee07 3a90 	vmov	s15, r3
 8015796:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801579a:	eeb0 0b47 	vmov.f64	d0, d7
 801579e:	497d      	ldr	r1, [pc, #500]	@ (8015994 <SetSetingsConfig+0x37c>)
 80157a0:	68f8      	ldr	r0, [r7, #12]
 80157a2:	f7ed f953 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip3_sntp2", SetSettings.ip3_sntp2);
 80157a6:	4b67      	ldr	r3, [pc, #412]	@ (8015944 <SetSetingsConfig+0x32c>)
 80157a8:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	@ 0x54
 80157ac:	ee07 3a90 	vmov	s15, r3
 80157b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80157b4:	eeb0 0b47 	vmov.f64	d0, d7
 80157b8:	4977      	ldr	r1, [pc, #476]	@ (8015998 <SetSetingsConfig+0x380>)
 80157ba:	68f8      	ldr	r0, [r7, #12]
 80157bc:	f7ed f946 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip3_sntp3", SetSettings.ip3_sntp3);
 80157c0:	4b60      	ldr	r3, [pc, #384]	@ (8015944 <SetSetingsConfig+0x32c>)
 80157c2:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	@ 0x56
 80157c6:	ee07 3a90 	vmov	s15, r3
 80157ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80157ce:	eeb0 0b47 	vmov.f64	d0, d7
 80157d2:	4972      	ldr	r1, [pc, #456]	@ (801599c <SetSetingsConfig+0x384>)
 80157d4:	68f8      	ldr	r0, [r7, #12]
 80157d6:	f7ed f939 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "check_mqtt", SetSettings.check_mqtt);
 80157da:	4b5a      	ldr	r3, [pc, #360]	@ (8015944 <SetSetingsConfig+0x32c>)
 80157dc:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	@ 0x58
 80157e0:	ee07 3a90 	vmov	s15, r3
 80157e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80157e8:	eeb0 0b47 	vmov.f64	d0, d7
 80157ec:	496c      	ldr	r1, [pc, #432]	@ (80159a0 <SetSetingsConfig+0x388>)
 80157ee:	68f8      	ldr	r0, [r7, #12]
 80157f0:	f7ed f92c 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "mqtt_prt", SetSettings.mqtt_prt);
 80157f4:	4b53      	ldr	r3, [pc, #332]	@ (8015944 <SetSetingsConfig+0x32c>)
 80157f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80157f8:	ee07 3a90 	vmov	s15, r3
 80157fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015800:	eeb0 0b47 	vmov.f64	d0, d7
 8015804:	4967      	ldr	r1, [pc, #412]	@ (80159a4 <SetSetingsConfig+0x38c>)
 8015806:	68f8      	ldr	r0, [r7, #12]
 8015808:	f7ed f920 	bl	8002a4c <cJSON_AddNumberToObject>
		//cJSON_AddNumberToObject(root_obj, "mqtt_qos", SetSettings.mqtt_qos);  // (QOS)
		cJSON_AddStringToObject(root_obj, "mqtt_clt", SetSettings.mqtt_clt);
 801580c:	4a66      	ldr	r2, [pc, #408]	@ (80159a8 <SetSetingsConfig+0x390>)
 801580e:	4967      	ldr	r1, [pc, #412]	@ (80159ac <SetSetingsConfig+0x394>)
 8015810:	68f8      	ldr	r0, [r7, #12]
 8015812:	f7ed f93f 	bl	8002a94 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "mqtt_usr", SetSettings.mqtt_usr);
 8015816:	4a66      	ldr	r2, [pc, #408]	@ (80159b0 <SetSetingsConfig+0x398>)
 8015818:	4966      	ldr	r1, [pc, #408]	@ (80159b4 <SetSetingsConfig+0x39c>)
 801581a:	68f8      	ldr	r0, [r7, #12]
 801581c:	f7ed f93a 	bl	8002a94 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "mqtt_pswd", SetSettings.mqtt_pswd);
 8015820:	4a65      	ldr	r2, [pc, #404]	@ (80159b8 <SetSetingsConfig+0x3a0>)
 8015822:	4966      	ldr	r1, [pc, #408]	@ (80159bc <SetSetingsConfig+0x3a4>)
 8015824:	68f8      	ldr	r0, [r7, #12]
 8015826:	f7ed f935 	bl	8002a94 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "mqtt_tpc", SetSettings.mqtt_tpc);
 801582a:	4a65      	ldr	r2, [pc, #404]	@ (80159c0 <SetSetingsConfig+0x3a8>)
 801582c:	4965      	ldr	r1, [pc, #404]	@ (80159c4 <SetSetingsConfig+0x3ac>)
 801582e:	68f8      	ldr	r0, [r7, #12]
 8015830:	f7ed f930 	bl	8002a94 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "mqtt_ftpc", SetSettings.mqtt_ftpc);
 8015834:	4a64      	ldr	r2, [pc, #400]	@ (80159c8 <SetSetingsConfig+0x3b0>)
 8015836:	4965      	ldr	r1, [pc, #404]	@ (80159cc <SetSetingsConfig+0x3b4>)
 8015838:	68f8      	ldr	r0, [r7, #12]
 801583a:	f7ed f92b 	bl	8002a94 <cJSON_AddStringToObject>
		cJSON_AddNumberToObject(root_obj, "mqtt_hst0", SetSettings.mqtt_hst0);
 801583e:	4b41      	ldr	r3, [pc, #260]	@ (8015944 <SetSetingsConfig+0x32c>)
 8015840:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	@ 0xa2
 8015844:	ee07 3a90 	vmov	s15, r3
 8015848:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801584c:	eeb0 0b47 	vmov.f64	d0, d7
 8015850:	495f      	ldr	r1, [pc, #380]	@ (80159d0 <SetSetingsConfig+0x3b8>)
 8015852:	68f8      	ldr	r0, [r7, #12]
 8015854:	f7ed f8fa 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "mqtt_hst1", SetSettings.mqtt_hst1);
 8015858:	4b3a      	ldr	r3, [pc, #232]	@ (8015944 <SetSetingsConfig+0x32c>)
 801585a:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	@ 0xa4
 801585e:	ee07 3a90 	vmov	s15, r3
 8015862:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015866:	eeb0 0b47 	vmov.f64	d0, d7
 801586a:	495a      	ldr	r1, [pc, #360]	@ (80159d4 <SetSetingsConfig+0x3bc>)
 801586c:	68f8      	ldr	r0, [r7, #12]
 801586e:	f7ed f8ed 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "mqtt_hst2", SetSettings.mqtt_hst2);
 8015872:	4b34      	ldr	r3, [pc, #208]	@ (8015944 <SetSetingsConfig+0x32c>)
 8015874:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	@ 0xa6
 8015878:	ee07 3a90 	vmov	s15, r3
 801587c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015880:	eeb0 0b47 	vmov.f64	d0, d7
 8015884:	4954      	ldr	r1, [pc, #336]	@ (80159d8 <SetSetingsConfig+0x3c0>)
 8015886:	68f8      	ldr	r0, [r7, #12]
 8015888:	f7ed f8e0 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "mqtt_hst3", SetSettings.mqtt_hst3);
 801588c:	4b2d      	ldr	r3, [pc, #180]	@ (8015944 <SetSetingsConfig+0x32c>)
 801588e:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	@ 0xa8
 8015892:	ee07 3a90 	vmov	s15, r3
 8015896:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801589a:	eeb0 0b47 	vmov.f64	d0, d7
 801589e:	494f      	ldr	r1, [pc, #316]	@ (80159dc <SetSetingsConfig+0x3c4>)
 80158a0:	68f8      	ldr	r0, [r7, #12]
 80158a2:	f7ed f8d3 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "check_ip", SetSettings.check_ip);
 80158a6:	4b27      	ldr	r3, [pc, #156]	@ (8015944 <SetSetingsConfig+0x32c>)
 80158a8:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	@ 0xaa
 80158ac:	ee07 3a90 	vmov	s15, r3
 80158b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80158b4:	eeb0 0b47 	vmov.f64	d0, d7
 80158b8:	4949      	ldr	r1, [pc, #292]	@ (80159e0 <SetSetingsConfig+0x3c8>)
 80158ba:	68f8      	ldr	r0, [r7, #12]
 80158bc:	f7ed f8c6 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip_addr0", SetSettings.ip_addr0);
 80158c0:	4b20      	ldr	r3, [pc, #128]	@ (8015944 <SetSetingsConfig+0x32c>)
 80158c2:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 80158c6:	ee07 3a90 	vmov	s15, r3
 80158ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80158ce:	eeb0 0b47 	vmov.f64	d0, d7
 80158d2:	4944      	ldr	r1, [pc, #272]	@ (80159e4 <SetSetingsConfig+0x3cc>)
 80158d4:	68f8      	ldr	r0, [r7, #12]
 80158d6:	f7ed f8b9 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip_addr1", SetSettings.ip_addr1);
 80158da:	4b1a      	ldr	r3, [pc, #104]	@ (8015944 <SetSetingsConfig+0x32c>)
 80158dc:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	@ 0xae
 80158e0:	ee07 3a90 	vmov	s15, r3
 80158e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80158e8:	eeb0 0b47 	vmov.f64	d0, d7
 80158ec:	493e      	ldr	r1, [pc, #248]	@ (80159e8 <SetSetingsConfig+0x3d0>)
 80158ee:	68f8      	ldr	r0, [r7, #12]
 80158f0:	f7ed f8ac 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip_addr2", SetSettings.ip_addr2);
 80158f4:	4b13      	ldr	r3, [pc, #76]	@ (8015944 <SetSetingsConfig+0x32c>)
 80158f6:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	@ 0xb0
 80158fa:	ee07 3a90 	vmov	s15, r3
 80158fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015902:	eeb0 0b47 	vmov.f64	d0, d7
 8015906:	4939      	ldr	r1, [pc, #228]	@ (80159ec <SetSetingsConfig+0x3d4>)
 8015908:	68f8      	ldr	r0, [r7, #12]
 801590a:	f7ed f89f 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip_addr3", SetSettings.ip_addr3);
 801590e:	4b0d      	ldr	r3, [pc, #52]	@ (8015944 <SetSetingsConfig+0x32c>)
 8015910:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	@ 0xb2
 8015914:	ee07 3a90 	vmov	s15, r3
 8015918:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801591c:	eeb0 0b47 	vmov.f64	d0, d7
 8015920:	4933      	ldr	r1, [pc, #204]	@ (80159f0 <SetSetingsConfig+0x3d8>)
 8015922:	68f8      	ldr	r0, [r7, #12]
 8015924:	f7ed f892 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "sb_mask0", SetSettings.sb_mask0);
 8015928:	4b06      	ldr	r3, [pc, #24]	@ (8015944 <SetSetingsConfig+0x32c>)
 801592a:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 801592e:	ee07 3a90 	vmov	s15, r3
 8015932:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015936:	eeb0 0b47 	vmov.f64	d0, d7
 801593a:	e05b      	b.n	80159f4 <SetSetingsConfig+0x3dc>
 801593c:	08031148 	.word	0x08031148
 8015940:	2001c07c 	.word	0x2001c07c
 8015944:	2000de80 	.word	0x2000de80
 8015948:	08031154 	.word	0x08031154
 801594c:	2000de8a 	.word	0x2000de8a
 8015950:	08031160 	.word	0x08031160
 8015954:	2000de99 	.word	0x2000de99
 8015958:	0803116c 	.word	0x0803116c
 801595c:	2000dea4 	.word	0x2000dea4
 8015960:	08031174 	.word	0x08031174
 8015964:	0803117c 	.word	0x0803117c
 8015968:	08031188 	.word	0x08031188
 801596c:	08031190 	.word	0x08031190
 8015970:	08031198 	.word	0x08031198
 8015974:	080311a4 	.word	0x080311a4
 8015978:	080311b0 	.word	0x080311b0
 801597c:	080311bc 	.word	0x080311bc
 8015980:	080311c8 	.word	0x080311c8
 8015984:	080311d4 	.word	0x080311d4
 8015988:	080311e0 	.word	0x080311e0
 801598c:	080311ec 	.word	0x080311ec
 8015990:	080311f8 	.word	0x080311f8
 8015994:	08031204 	.word	0x08031204
 8015998:	08031210 	.word	0x08031210
 801599c:	0803121c 	.word	0x0803121c
 80159a0:	08031228 	.word	0x08031228
 80159a4:	08031234 	.word	0x08031234
 80159a8:	2000dee0 	.word	0x2000dee0
 80159ac:	08031240 	.word	0x08031240
 80159b0:	2000deea 	.word	0x2000deea
 80159b4:	0803124c 	.word	0x0803124c
 80159b8:	2000def4 	.word	0x2000def4
 80159bc:	08031258 	.word	0x08031258
 80159c0:	2000df03 	.word	0x2000df03
 80159c4:	08031264 	.word	0x08031264
 80159c8:	2000df12 	.word	0x2000df12
 80159cc:	08031270 	.word	0x08031270
 80159d0:	0803127c 	.word	0x0803127c
 80159d4:	08031288 	.word	0x08031288
 80159d8:	08031294 	.word	0x08031294
 80159dc:	080312a0 	.word	0x080312a0
 80159e0:	080312ac 	.word	0x080312ac
 80159e4:	080312b8 	.word	0x080312b8
 80159e8:	080312c4 	.word	0x080312c4
 80159ec:	080312d0 	.word	0x080312d0
 80159f0:	080312dc 	.word	0x080312dc
 80159f4:	4967      	ldr	r1, [pc, #412]	@ (8015b94 <SetSetingsConfig+0x57c>)
 80159f6:	68f8      	ldr	r0, [r7, #12]
 80159f8:	f7ed f828 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "sb_mask1", SetSettings.sb_mask1);
 80159fc:	4b66      	ldr	r3, [pc, #408]	@ (8015b98 <SetSetingsConfig+0x580>)
 80159fe:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8015a02:	ee07 3a90 	vmov	s15, r3
 8015a06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015a0a:	eeb0 0b47 	vmov.f64	d0, d7
 8015a0e:	4963      	ldr	r1, [pc, #396]	@ (8015b9c <SetSetingsConfig+0x584>)
 8015a10:	68f8      	ldr	r0, [r7, #12]
 8015a12:	f7ed f81b 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "sb_mask2", SetSettings.sb_mask2);
 8015a16:	4b60      	ldr	r3, [pc, #384]	@ (8015b98 <SetSetingsConfig+0x580>)
 8015a18:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8015a1c:	ee07 3a90 	vmov	s15, r3
 8015a20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015a24:	eeb0 0b47 	vmov.f64	d0, d7
 8015a28:	495d      	ldr	r1, [pc, #372]	@ (8015ba0 <SetSetingsConfig+0x588>)
 8015a2a:	68f8      	ldr	r0, [r7, #12]
 8015a2c:	f7ed f80e 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "sb_mask3", SetSettings.sb_mask3);
 8015a30:	4b59      	ldr	r3, [pc, #356]	@ (8015b98 <SetSetingsConfig+0x580>)
 8015a32:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 8015a36:	ee07 3a90 	vmov	s15, r3
 8015a3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015a3e:	eeb0 0b47 	vmov.f64	d0, d7
 8015a42:	4958      	ldr	r1, [pc, #352]	@ (8015ba4 <SetSetingsConfig+0x58c>)
 8015a44:	68f8      	ldr	r0, [r7, #12]
 8015a46:	f7ed f801 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "gateway0", SetSettings.gateway0);
 8015a4a:	4b53      	ldr	r3, [pc, #332]	@ (8015b98 <SetSetingsConfig+0x580>)
 8015a4c:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
 8015a50:	ee07 3a90 	vmov	s15, r3
 8015a54:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015a58:	eeb0 0b47 	vmov.f64	d0, d7
 8015a5c:	4952      	ldr	r1, [pc, #328]	@ (8015ba8 <SetSetingsConfig+0x590>)
 8015a5e:	68f8      	ldr	r0, [r7, #12]
 8015a60:	f7ec fff4 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "gateway1", SetSettings.gateway1);
 8015a64:	4b4c      	ldr	r3, [pc, #304]	@ (8015b98 <SetSetingsConfig+0x580>)
 8015a66:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
 8015a6a:	ee07 3a90 	vmov	s15, r3
 8015a6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015a72:	eeb0 0b47 	vmov.f64	d0, d7
 8015a76:	494d      	ldr	r1, [pc, #308]	@ (8015bac <SetSetingsConfig+0x594>)
 8015a78:	68f8      	ldr	r0, [r7, #12]
 8015a7a:	f7ec ffe7 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "gateway2", SetSettings.gateway2);
 8015a7e:	4b46      	ldr	r3, [pc, #280]	@ (8015b98 <SetSetingsConfig+0x580>)
 8015a80:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 8015a84:	ee07 3a90 	vmov	s15, r3
 8015a88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015a8c:	eeb0 0b47 	vmov.f64	d0, d7
 8015a90:	4947      	ldr	r1, [pc, #284]	@ (8015bb0 <SetSetingsConfig+0x598>)
 8015a92:	68f8      	ldr	r0, [r7, #12]
 8015a94:	f7ec ffda 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "gateway3", SetSettings.gateway3);
 8015a98:	4b3f      	ldr	r3, [pc, #252]	@ (8015b98 <SetSetingsConfig+0x580>)
 8015a9a:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	@ 0xc2
 8015a9e:	ee07 3a90 	vmov	s15, r3
 8015aa2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015aa6:	eeb0 0b47 	vmov.f64	d0, d7
 8015aaa:	4942      	ldr	r1, [pc, #264]	@ (8015bb4 <SetSetingsConfig+0x59c>)
 8015aac:	68f8      	ldr	r0, [r7, #12]
 8015aae:	f7ec ffcd 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr0", SetSettings.macaddr0);
 8015ab2:	4b39      	ldr	r3, [pc, #228]	@ (8015b98 <SetSetingsConfig+0x580>)
 8015ab4:	f893 30c4 	ldrb.w	r3, [r3, #196]	@ 0xc4
 8015ab8:	ee07 3a90 	vmov	s15, r3
 8015abc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015ac0:	eeb0 0b47 	vmov.f64	d0, d7
 8015ac4:	493c      	ldr	r1, [pc, #240]	@ (8015bb8 <SetSetingsConfig+0x5a0>)
 8015ac6:	68f8      	ldr	r0, [r7, #12]
 8015ac8:	f7ec ffc0 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr1", SetSettings.macaddr1);
 8015acc:	4b32      	ldr	r3, [pc, #200]	@ (8015b98 <SetSetingsConfig+0x580>)
 8015ace:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8015ad2:	ee07 3a90 	vmov	s15, r3
 8015ad6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015ada:	eeb0 0b47 	vmov.f64	d0, d7
 8015ade:	4937      	ldr	r1, [pc, #220]	@ (8015bbc <SetSetingsConfig+0x5a4>)
 8015ae0:	68f8      	ldr	r0, [r7, #12]
 8015ae2:	f7ec ffb3 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr2", SetSettings.macaddr2);
 8015ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8015b98 <SetSetingsConfig+0x580>)
 8015ae8:	f893 30c6 	ldrb.w	r3, [r3, #198]	@ 0xc6
 8015aec:	ee07 3a90 	vmov	s15, r3
 8015af0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015af4:	eeb0 0b47 	vmov.f64	d0, d7
 8015af8:	4931      	ldr	r1, [pc, #196]	@ (8015bc0 <SetSetingsConfig+0x5a8>)
 8015afa:	68f8      	ldr	r0, [r7, #12]
 8015afc:	f7ec ffa6 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr3", SetSettings.macaddr3);
 8015b00:	4b25      	ldr	r3, [pc, #148]	@ (8015b98 <SetSetingsConfig+0x580>)
 8015b02:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 8015b06:	ee07 3a90 	vmov	s15, r3
 8015b0a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015b0e:	eeb0 0b47 	vmov.f64	d0, d7
 8015b12:	492c      	ldr	r1, [pc, #176]	@ (8015bc4 <SetSetingsConfig+0x5ac>)
 8015b14:	68f8      	ldr	r0, [r7, #12]
 8015b16:	f7ec ff99 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr4", SetSettings.macaddr4);
 8015b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8015b98 <SetSetingsConfig+0x580>)
 8015b1c:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8015b20:	ee07 3a90 	vmov	s15, r3
 8015b24:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015b28:	eeb0 0b47 	vmov.f64	d0, d7
 8015b2c:	4926      	ldr	r1, [pc, #152]	@ (8015bc8 <SetSetingsConfig+0x5b0>)
 8015b2e:	68f8      	ldr	r0, [r7, #12]
 8015b30:	f7ec ff8c 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr5", SetSettings.macaddr5);
 8015b34:	4b18      	ldr	r3, [pc, #96]	@ (8015b98 <SetSetingsConfig+0x580>)
 8015b36:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8015b3a:	ee07 3a90 	vmov	s15, r3
 8015b3e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015b42:	eeb0 0b47 	vmov.f64	d0, d7
 8015b46:	4921      	ldr	r1, [pc, #132]	@ (8015bcc <SetSetingsConfig+0x5b4>)
 8015b48:	68f8      	ldr	r0, [r7, #12]
 8015b4a:	f7ec ff7f 	bl	8002a4c <cJSON_AddNumberToObject>

		out_str = cJSON_PrintUnformatted(root_obj);
 8015b4e:	68f8      	ldr	r0, [r7, #12]
 8015b50:	f7ec f8d0 	bl	8001cf4 <cJSON_PrintUnformatted>
 8015b54:	60b8      	str	r0, [r7, #8]
		fresult = f_write(&USBHFile, (const void*) out_str, strlen(out_str), &Byteswritten);
 8015b56:	68b8      	ldr	r0, [r7, #8]
 8015b58:	f7ea fbd2 	bl	8000300 <strlen>
 8015b5c:	4602      	mov	r2, r0
 8015b5e:	463b      	mov	r3, r7
 8015b60:	68b9      	ldr	r1, [r7, #8]
 8015b62:	481b      	ldr	r0, [pc, #108]	@ (8015bd0 <SetSetingsConfig+0x5b8>)
 8015b64:	f00f ffd1 	bl	8025b0a <f_write>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	71fb      	strb	r3, [r7, #7]
		free(out_str);
 8015b6c:	68b8      	ldr	r0, [r7, #8]
 8015b6e:	f014 fd99 	bl	802a6a4 <free>

		if(fresult == FR_OK){

		}

		cJSON_Delete(root_obj);
 8015b72:	68f8      	ldr	r0, [r7, #12]
 8015b74:	f7eb f832 	bl	8000bdc <cJSON_Delete>
		memset(fsbuffer, '\0', sizeof(fsbuffer));
 8015b78:	f246 329c 	movw	r2, #25500	@ 0x639c
 8015b7c:	2100      	movs	r1, #0
 8015b7e:	4815      	ldr	r0, [pc, #84]	@ (8015bd4 <SetSetingsConfig+0x5bc>)
 8015b80:	f015 ffc4 	bl	802bb0c <memset>
		f_close(&USBHFile);
 8015b84:	4812      	ldr	r0, [pc, #72]	@ (8015bd0 <SetSetingsConfig+0x5b8>)
 8015b86:	f010 fa0c 	bl	8025fa2 <f_close>
	}
}
 8015b8a:	bf00      	nop
 8015b8c:	3710      	adds	r7, #16
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	bd80      	pop	{r7, pc}
 8015b92:	bf00      	nop
 8015b94:	080312e8 	.word	0x080312e8
 8015b98:	2000de80 	.word	0x2000de80
 8015b9c:	080312f4 	.word	0x080312f4
 8015ba0:	08031300 	.word	0x08031300
 8015ba4:	0803130c 	.word	0x0803130c
 8015ba8:	08031318 	.word	0x08031318
 8015bac:	08031324 	.word	0x08031324
 8015bb0:	08031330 	.word	0x08031330
 8015bb4:	0803133c 	.word	0x0803133c
 8015bb8:	08031348 	.word	0x08031348
 8015bbc:	08031354 	.word	0x08031354
 8015bc0:	08031360 	.word	0x08031360
 8015bc4:	0803136c 	.word	0x0803136c
 8015bc8:	08031378 	.word	0x08031378
 8015bcc:	08031384 	.word	0x08031384
 8015bd0:	2001c07c 	.word	0x2001c07c
 8015bd4:	20014c48 	.word	0x20014c48

08015bd8 <StartSetingsConfig>:

// Первый запуск
void StartSetingsConfig() {
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b084      	sub	sp, #16
 8015bdc:	af00      	add	r7, sp, #0
	cJSON *root_obj = NULL;
 8015bde:	2300      	movs	r3, #0
 8015be0:	60fb      	str	r3, [r7, #12]
	char *out_str = NULL;
 8015be2:	2300      	movs	r3, #0
 8015be4:	60bb      	str	r3, [r7, #8]
	FRESULT fresult;
	UINT Byteswritten; // File read/write count

	if (f_open(&USBHFile, (const TCHAR*) "setings.ini", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
 8015be6:	220a      	movs	r2, #10
 8015be8:	49bb      	ldr	r1, [pc, #748]	@ (8015ed8 <StartSetingsConfig+0x300>)
 8015bea:	48bc      	ldr	r0, [pc, #752]	@ (8015edc <StartSetingsConfig+0x304>)
 8015bec:	f00f fc30 	bl	8025450 <f_open>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	f040 8229 	bne.w	801604a <StartSetingsConfig+0x472>
		printf("f_open! create setings.ini \r\n");
 8015bf8:	48b9      	ldr	r0, [pc, #740]	@ (8015ee0 <StartSetingsConfig+0x308>)
 8015bfa:	f015 fe31 	bl	802b860 <puts>
		root_obj = cJSON_CreateObject();
 8015bfe:	f7ec ffef 	bl	8002be0 <cJSON_CreateObject>
 8015c02:	60f8      	str	r0, [r7, #12]

		cJSON_AddStringToObject(root_obj, "adm_name", ADM_NAME);
 8015c04:	4ab7      	ldr	r2, [pc, #732]	@ (8015ee4 <StartSetingsConfig+0x30c>)
 8015c06:	49b8      	ldr	r1, [pc, #736]	@ (8015ee8 <StartSetingsConfig+0x310>)
 8015c08:	68f8      	ldr	r0, [r7, #12]
 8015c0a:	f7ec ff43 	bl	8002a94 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "adm_pswd", ADM_PASS); // Пароль для авторизации
 8015c0e:	4ab7      	ldr	r2, [pc, #732]	@ (8015eec <StartSetingsConfig+0x314>)
 8015c10:	49b7      	ldr	r1, [pc, #732]	@ (8015ef0 <StartSetingsConfig+0x318>)
 8015c12:	68f8      	ldr	r0, [r7, #12]
 8015c14:	f7ec ff3e 	bl	8002a94 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "token", "");
 8015c18:	4ab6      	ldr	r2, [pc, #728]	@ (8015ef4 <StartSetingsConfig+0x31c>)
 8015c1a:	49b7      	ldr	r1, [pc, #732]	@ (8015ef8 <StartSetingsConfig+0x320>)
 8015c1c:	68f8      	ldr	r0, [r7, #12]
 8015c1e:	f7ec ff39 	bl	8002a94 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "lang", LANG); //
 8015c22:	4ab6      	ldr	r2, [pc, #728]	@ (8015efc <StartSetingsConfig+0x324>)
 8015c24:	49b6      	ldr	r1, [pc, #728]	@ (8015f00 <StartSetingsConfig+0x328>)
 8015c26:	68f8      	ldr	r0, [r7, #12]
 8015c28:	f7ec ff34 	bl	8002a94 <cJSON_AddStringToObject>
		cJSON_AddNumberToObject(root_obj, "timezone", 0); // UTC
 8015c2c:	ed9f 0b9e 	vldr	d0, [pc, #632]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015c30:	49b4      	ldr	r1, [pc, #720]	@ (8015f04 <StartSetingsConfig+0x32c>)
 8015c32:	68f8      	ldr	r0, [r7, #12]
 8015c34:	f7ec ff0a 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "lon_de", 0); // Longitude / Долгота
 8015c38:	ed9f 0b9b 	vldr	d0, [pc, #620]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015c3c:	49b2      	ldr	r1, [pc, #712]	@ (8015f08 <StartSetingsConfig+0x330>)
 8015c3e:	68f8      	ldr	r0, [r7, #12]
 8015c40:	f7ec ff04 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "lat_de", 0); // Latitude / Широта
 8015c44:	ed9f 0b98 	vldr	d0, [pc, #608]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015c48:	49b0      	ldr	r1, [pc, #704]	@ (8015f0c <StartSetingsConfig+0x334>)
 8015c4a:	68f8      	ldr	r0, [r7, #12]
 8015c4c:	f7ec fefe 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip1_sntp0", 0); // SMTP Server primary
 8015c50:	ed9f 0b95 	vldr	d0, [pc, #596]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015c54:	49ae      	ldr	r1, [pc, #696]	@ (8015f10 <StartSetingsConfig+0x338>)
 8015c56:	68f8      	ldr	r0, [r7, #12]
 8015c58:	f7ec fef8 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip1_sntp1", 0); // SMTP Server primary
 8015c5c:	ed9f 0b92 	vldr	d0, [pc, #584]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015c60:	49ac      	ldr	r1, [pc, #688]	@ (8015f14 <StartSetingsConfig+0x33c>)
 8015c62:	68f8      	ldr	r0, [r7, #12]
 8015c64:	f7ec fef2 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip1_sntp2", 0); // SMTP Server primary
 8015c68:	ed9f 0b8f 	vldr	d0, [pc, #572]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015c6c:	49aa      	ldr	r1, [pc, #680]	@ (8015f18 <StartSetingsConfig+0x340>)
 8015c6e:	68f8      	ldr	r0, [r7, #12]
 8015c70:	f7ec feec 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip1_sntp3", 0); // SMTP Server primary
 8015c74:	ed9f 0b8c 	vldr	d0, [pc, #560]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015c78:	49a8      	ldr	r1, [pc, #672]	@ (8015f1c <StartSetingsConfig+0x344>)
 8015c7a:	68f8      	ldr	r0, [r7, #12]
 8015c7c:	f7ec fee6 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip2_sntp0", 0); // SMTP Server secondary
 8015c80:	ed9f 0b89 	vldr	d0, [pc, #548]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015c84:	49a6      	ldr	r1, [pc, #664]	@ (8015f20 <StartSetingsConfig+0x348>)
 8015c86:	68f8      	ldr	r0, [r7, #12]
 8015c88:	f7ec fee0 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip2_sntp1", 0); // SMTP Server secondary
 8015c8c:	ed9f 0b86 	vldr	d0, [pc, #536]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015c90:	49a4      	ldr	r1, [pc, #656]	@ (8015f24 <StartSetingsConfig+0x34c>)
 8015c92:	68f8      	ldr	r0, [r7, #12]
 8015c94:	f7ec feda 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip2_sntp2", 0); // SMTP Server secondary
 8015c98:	ed9f 0b83 	vldr	d0, [pc, #524]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015c9c:	49a2      	ldr	r1, [pc, #648]	@ (8015f28 <StartSetingsConfig+0x350>)
 8015c9e:	68f8      	ldr	r0, [r7, #12]
 8015ca0:	f7ec fed4 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip2_sntp3", 0); // SMTP Server secondary
 8015ca4:	ed9f 0b80 	vldr	d0, [pc, #512]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015ca8:	49a0      	ldr	r1, [pc, #640]	@ (8015f2c <StartSetingsConfig+0x354>)
 8015caa:	68f8      	ldr	r0, [r7, #12]
 8015cac:	f7ec fece 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip3_sntp0", 0); // SMTP Server teriary
 8015cb0:	ed9f 0b7d 	vldr	d0, [pc, #500]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015cb4:	499e      	ldr	r1, [pc, #632]	@ (8015f30 <StartSetingsConfig+0x358>)
 8015cb6:	68f8      	ldr	r0, [r7, #12]
 8015cb8:	f7ec fec8 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip3_sntp1", 0); // SMTP Server teriary
 8015cbc:	ed9f 0b7a 	vldr	d0, [pc, #488]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015cc0:	499c      	ldr	r1, [pc, #624]	@ (8015f34 <StartSetingsConfig+0x35c>)
 8015cc2:	68f8      	ldr	r0, [r7, #12]
 8015cc4:	f7ec fec2 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip3_sntp2", 0); // SMTP Server teriary
 8015cc8:	ed9f 0b77 	vldr	d0, [pc, #476]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015ccc:	499a      	ldr	r1, [pc, #616]	@ (8015f38 <StartSetingsConfig+0x360>)
 8015cce:	68f8      	ldr	r0, [r7, #12]
 8015cd0:	f7ec febc 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip3_sntp3", 0); // SMTP Server teriary
 8015cd4:	ed9f 0b74 	vldr	d0, [pc, #464]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015cd8:	4998      	ldr	r1, [pc, #608]	@ (8015f3c <StartSetingsConfig+0x364>)
 8015cda:	68f8      	ldr	r0, [r7, #12]
 8015cdc:	f7ec feb6 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "check_mqtt", 0); // check MQTT on/off
 8015ce0:	ed9f 0b71 	vldr	d0, [pc, #452]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015ce4:	4996      	ldr	r1, [pc, #600]	@ (8015f40 <StartSetingsConfig+0x368>)
 8015ce6:	68f8      	ldr	r0, [r7, #12]
 8015ce8:	f7ec feb0 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "mqtt_prt", MQTT_PRT); // Your MQTT broker port (default port is set to 1883)
 8015cec:	ed9f 0b70 	vldr	d0, [pc, #448]	@ 8015eb0 <StartSetingsConfig+0x2d8>
 8015cf0:	4994      	ldr	r1, [pc, #592]	@ (8015f44 <StartSetingsConfig+0x36c>)
 8015cf2:	68f8      	ldr	r0, [r7, #12]
 8015cf4:	f7ec feaa 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "mqtt_qos", MQTT_QOS); // Your MQTT QOS (default QOS is set to 0)
 8015cf8:	ed9f 0b6b 	vldr	d0, [pc, #428]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015cfc:	4992      	ldr	r1, [pc, #584]	@ (8015f48 <StartSetingsConfig+0x370>)
 8015cfe:	68f8      	ldr	r0, [r7, #12]
 8015d00:	f7ec fea4 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddStringToObject(root_obj, "mqtt_clt", ""); // Device's unique identifier.
 8015d04:	4a7b      	ldr	r2, [pc, #492]	@ (8015ef4 <StartSetingsConfig+0x31c>)
 8015d06:	4991      	ldr	r1, [pc, #580]	@ (8015f4c <StartSetingsConfig+0x374>)
 8015d08:	68f8      	ldr	r0, [r7, #12]
 8015d0a:	f7ec fec3 	bl	8002a94 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "mqtt_usr", ""); // MQTT Имя пользователя для авторизации
 8015d0e:	4a79      	ldr	r2, [pc, #484]	@ (8015ef4 <StartSetingsConfig+0x31c>)
 8015d10:	498f      	ldr	r1, [pc, #572]	@ (8015f50 <StartSetingsConfig+0x378>)
 8015d12:	68f8      	ldr	r0, [r7, #12]
 8015d14:	f7ec febe 	bl	8002a94 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "mqtt_pswd", ""); // MQTT Пароль для авторизации
 8015d18:	4a76      	ldr	r2, [pc, #472]	@ (8015ef4 <StartSetingsConfig+0x31c>)
 8015d1a:	498e      	ldr	r1, [pc, #568]	@ (8015f54 <StartSetingsConfig+0x37c>)
 8015d1c:	68f8      	ldr	r0, [r7, #12]
 8015d1e:	f7ec feb9 	bl	8002a94 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "mqtt_tpc", ""); // Unique identifying topic for your device (kitchen-light) It is recommended to use a single word for the topic.
 8015d22:	4a74      	ldr	r2, [pc, #464]	@ (8015ef4 <StartSetingsConfig+0x31c>)
 8015d24:	498c      	ldr	r1, [pc, #560]	@ (8015f58 <StartSetingsConfig+0x380>)
 8015d26:	68f8      	ldr	r0, [r7, #12]
 8015d28:	f7ec feb4 	bl	8002a94 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "mqtt_ftpc", ""); // Полный топик for example lights/%prefix%/%topic%/
 8015d2c:	4a71      	ldr	r2, [pc, #452]	@ (8015ef4 <StartSetingsConfig+0x31c>)
 8015d2e:	498b      	ldr	r1, [pc, #556]	@ (8015f5c <StartSetingsConfig+0x384>)
 8015d30:	68f8      	ldr	r0, [r7, #12]
 8015d32:	f7ec feaf 	bl	8002a94 <cJSON_AddStringToObject>
		cJSON_AddNumberToObject(root_obj, "mqtt_hst0", 0); // Your MQTT broker address or IP
 8015d36:	ed9f 0b5c 	vldr	d0, [pc, #368]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015d3a:	4989      	ldr	r1, [pc, #548]	@ (8015f60 <StartSetingsConfig+0x388>)
 8015d3c:	68f8      	ldr	r0, [r7, #12]
 8015d3e:	f7ec fe85 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "mqtt_hst1", 0); // Your MQTT broker address or IP
 8015d42:	ed9f 0b59 	vldr	d0, [pc, #356]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015d46:	4987      	ldr	r1, [pc, #540]	@ (8015f64 <StartSetingsConfig+0x38c>)
 8015d48:	68f8      	ldr	r0, [r7, #12]
 8015d4a:	f7ec fe7f 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "mqtt_hst2", 0); // Your MQTT broker address or IP
 8015d4e:	ed9f 0b56 	vldr	d0, [pc, #344]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015d52:	4985      	ldr	r1, [pc, #532]	@ (8015f68 <StartSetingsConfig+0x390>)
 8015d54:	68f8      	ldr	r0, [r7, #12]
 8015d56:	f7ec fe79 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "mqtt_hst3", 0); // Your MQTT broker address or IP
 8015d5a:	ed9f 0b53 	vldr	d0, [pc, #332]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015d5e:	4983      	ldr	r1, [pc, #524]	@ (8015f6c <StartSetingsConfig+0x394>)
 8015d60:	68f8      	ldr	r0, [r7, #12]
 8015d62:	f7ec fe73 	bl	8002a4c <cJSON_AddNumberToObject>
		// Настройки IP адреса
		cJSON_AddNumberToObject(root_obj, "check_ip", 0); // check DHCP on/off
 8015d66:	ed9f 0b50 	vldr	d0, [pc, #320]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015d6a:	4981      	ldr	r1, [pc, #516]	@ (8015f70 <StartSetingsConfig+0x398>)
 8015d6c:	68f8      	ldr	r0, [r7, #12]
 8015d6e:	f7ec fe6d 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip_addr0", IP_ADDR0); // IP адрес
 8015d72:	ed9f 0b51 	vldr	d0, [pc, #324]	@ 8015eb8 <StartSetingsConfig+0x2e0>
 8015d76:	497f      	ldr	r1, [pc, #508]	@ (8015f74 <StartSetingsConfig+0x39c>)
 8015d78:	68f8      	ldr	r0, [r7, #12]
 8015d7a:	f7ec fe67 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip_addr1", IP_ADDR1); // IP адрес
 8015d7e:	ed9f 0b50 	vldr	d0, [pc, #320]	@ 8015ec0 <StartSetingsConfig+0x2e8>
 8015d82:	497d      	ldr	r1, [pc, #500]	@ (8015f78 <StartSetingsConfig+0x3a0>)
 8015d84:	68f8      	ldr	r0, [r7, #12]
 8015d86:	f7ec fe61 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip_addr2", IP_ADDR2); // IP адрес
 8015d8a:	eeb3 0b02 	vmov.f64	d0, #50	@ 0x41900000  18.0
 8015d8e:	497b      	ldr	r1, [pc, #492]	@ (8015f7c <StartSetingsConfig+0x3a4>)
 8015d90:	68f8      	ldr	r0, [r7, #12]
 8015d92:	f7ec fe5b 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip_addr3", IP_ADDR3); // IP адрес
 8015d96:	ed9f 0b4c 	vldr	d0, [pc, #304]	@ 8015ec8 <StartSetingsConfig+0x2f0>
 8015d9a:	4979      	ldr	r1, [pc, #484]	@ (8015f80 <StartSetingsConfig+0x3a8>)
 8015d9c:	68f8      	ldr	r0, [r7, #12]
 8015d9e:	f7ec fe55 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "sb_mask0", SB_MASK0);	// Маска сети
 8015da2:	ed9f 0b4b 	vldr	d0, [pc, #300]	@ 8015ed0 <StartSetingsConfig+0x2f8>
 8015da6:	4977      	ldr	r1, [pc, #476]	@ (8015f84 <StartSetingsConfig+0x3ac>)
 8015da8:	68f8      	ldr	r0, [r7, #12]
 8015daa:	f7ec fe4f 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "sb_mask1", SB_MASK1);	// Маска сети
 8015dae:	ed9f 0b48 	vldr	d0, [pc, #288]	@ 8015ed0 <StartSetingsConfig+0x2f8>
 8015db2:	4975      	ldr	r1, [pc, #468]	@ (8015f88 <StartSetingsConfig+0x3b0>)
 8015db4:	68f8      	ldr	r0, [r7, #12]
 8015db6:	f7ec fe49 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "sb_mask2", SB_MASK2);	// Маска сети
 8015dba:	ed9f 0b45 	vldr	d0, [pc, #276]	@ 8015ed0 <StartSetingsConfig+0x2f8>
 8015dbe:	4973      	ldr	r1, [pc, #460]	@ (8015f8c <StartSetingsConfig+0x3b4>)
 8015dc0:	68f8      	ldr	r0, [r7, #12]
 8015dc2:	f7ec fe43 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "sb_mask3", SB_MASK3);	// Маска сети
 8015dc6:	ed9f 0b38 	vldr	d0, [pc, #224]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015dca:	4971      	ldr	r1, [pc, #452]	@ (8015f90 <StartSetingsConfig+0x3b8>)
 8015dcc:	68f8      	ldr	r0, [r7, #12]
 8015dce:	f7ec fe3d 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "gateway0", GATEWAY0); // Шлюз
 8015dd2:	ed9f 0b39 	vldr	d0, [pc, #228]	@ 8015eb8 <StartSetingsConfig+0x2e0>
 8015dd6:	496f      	ldr	r1, [pc, #444]	@ (8015f94 <StartSetingsConfig+0x3bc>)
 8015dd8:	68f8      	ldr	r0, [r7, #12]
 8015dda:	f7ec fe37 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "gateway1", GATEWAY1); // Шлюз
 8015dde:	ed9f 0b38 	vldr	d0, [pc, #224]	@ 8015ec0 <StartSetingsConfig+0x2e8>
 8015de2:	496d      	ldr	r1, [pc, #436]	@ (8015f98 <StartSetingsConfig+0x3c0>)
 8015de4:	68f8      	ldr	r0, [r7, #12]
 8015de6:	f7ec fe31 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "gateway2", GATEWAY2); // Шлюз
 8015dea:	eeb3 0b02 	vmov.f64	d0, #50	@ 0x41900000  18.0
 8015dee:	496b      	ldr	r1, [pc, #428]	@ (8015f9c <StartSetingsConfig+0x3c4>)
 8015df0:	68f8      	ldr	r0, [r7, #12]
 8015df2:	f7ec fe2b 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "gateway3", GATEWAY3); // Шлюз
 8015df6:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8015dfa:	4969      	ldr	r1, [pc, #420]	@ (8015fa0 <StartSetingsConfig+0x3c8>)
 8015dfc:	68f8      	ldr	r0, [r7, #12]
 8015dfe:	f7ec fe25 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr0", 0); // MAC address
 8015e02:	ed9f 0b29 	vldr	d0, [pc, #164]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015e06:	4967      	ldr	r1, [pc, #412]	@ (8015fa4 <StartSetingsConfig+0x3cc>)
 8015e08:	68f8      	ldr	r0, [r7, #12]
 8015e0a:	f7ec fe1f 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr1", 0); // MAC address
 8015e0e:	ed9f 0b26 	vldr	d0, [pc, #152]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015e12:	4965      	ldr	r1, [pc, #404]	@ (8015fa8 <StartSetingsConfig+0x3d0>)
 8015e14:	68f8      	ldr	r0, [r7, #12]
 8015e16:	f7ec fe19 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr2", 0); // MAC address
 8015e1a:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015e1e:	4963      	ldr	r1, [pc, #396]	@ (8015fac <StartSetingsConfig+0x3d4>)
 8015e20:	68f8      	ldr	r0, [r7, #12]
 8015e22:	f7ec fe13 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr3", 0); // MAC address
 8015e26:	ed9f 0b20 	vldr	d0, [pc, #128]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015e2a:	4961      	ldr	r1, [pc, #388]	@ (8015fb0 <StartSetingsConfig+0x3d8>)
 8015e2c:	68f8      	ldr	r0, [r7, #12]
 8015e2e:	f7ec fe0d 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr4", 0); // MAC address
 8015e32:	ed9f 0b1d 	vldr	d0, [pc, #116]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015e36:	495f      	ldr	r1, [pc, #380]	@ (8015fb4 <StartSetingsConfig+0x3dc>)
 8015e38:	68f8      	ldr	r0, [r7, #12]
 8015e3a:	f7ec fe07 	bl	8002a4c <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr5", 0); // MAC address
 8015e3e:	ed9f 0b1a 	vldr	d0, [pc, #104]	@ 8015ea8 <StartSetingsConfig+0x2d0>
 8015e42:	495d      	ldr	r1, [pc, #372]	@ (8015fb8 <StartSetingsConfig+0x3e0>)
 8015e44:	68f8      	ldr	r0, [r7, #12]
 8015e46:	f7ec fe01 	bl	8002a4c <cJSON_AddNumberToObject>

		out_str = cJSON_PrintUnformatted(root_obj);
 8015e4a:	68f8      	ldr	r0, [r7, #12]
 8015e4c:	f7eb ff52 	bl	8001cf4 <cJSON_PrintUnformatted>
 8015e50:	60b8      	str	r0, [r7, #8]
		fresult = f_write(&USBHFile, (const void*) out_str, strlen(out_str), &Byteswritten);
 8015e52:	68b8      	ldr	r0, [r7, #8]
 8015e54:	f7ea fa54 	bl	8000300 <strlen>
 8015e58:	4602      	mov	r2, r0
 8015e5a:	463b      	mov	r3, r7
 8015e5c:	68b9      	ldr	r1, [r7, #8]
 8015e5e:	481f      	ldr	r0, [pc, #124]	@ (8015edc <StartSetingsConfig+0x304>)
 8015e60:	f00f fe53 	bl	8025b0a <f_write>
 8015e64:	4603      	mov	r3, r0
 8015e66:	71fb      	strb	r3, [r7, #7]
		free(out_str);
 8015e68:	68b8      	ldr	r0, [r7, #8]
 8015e6a:	f014 fc1b 	bl	802a6a4 <free>

		if(fresult == FR_OK){

		}

		printf("f_open! setings.ini \r\n");
 8015e6e:	4853      	ldr	r0, [pc, #332]	@ (8015fbc <StartSetingsConfig+0x3e4>)
 8015e70:	f015 fcf6 	bl	802b860 <puts>

		cJSON_Delete(root_obj);
 8015e74:	68f8      	ldr	r0, [r7, #12]
 8015e76:	f7ea feb1 	bl	8000bdc <cJSON_Delete>
		memset(fsbuffer, '\0', sizeof(fsbuffer));
 8015e7a:	f246 329c 	movw	r2, #25500	@ 0x639c
 8015e7e:	2100      	movs	r1, #0
 8015e80:	484f      	ldr	r0, [pc, #316]	@ (8015fc0 <StartSetingsConfig+0x3e8>)
 8015e82:	f015 fe43 	bl	802bb0c <memset>
		f_close(&USBHFile);
 8015e86:	4815      	ldr	r0, [pc, #84]	@ (8015edc <StartSetingsConfig+0x304>)
 8015e88:	f010 f88b 	bl	8025fa2 <f_close>

		strcpy(SetSettings.lang, LANG);
 8015e8c:	4b4d      	ldr	r3, [pc, #308]	@ (8015fc4 <StartSetingsConfig+0x3ec>)
 8015e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8015efc <StartSetingsConfig+0x324>)
 8015e90:	3324      	adds	r3, #36	@ 0x24
 8015e92:	6812      	ldr	r2, [r2, #0]
 8015e94:	4611      	mov	r1, r2
 8015e96:	8019      	strh	r1, [r3, #0]
 8015e98:	3302      	adds	r3, #2
 8015e9a:	0c12      	lsrs	r2, r2, #16
 8015e9c:	701a      	strb	r2, [r3, #0]
		strcpy(SetSettings.adm_name, ADM_NAME);
 8015e9e:	4b49      	ldr	r3, [pc, #292]	@ (8015fc4 <StartSetingsConfig+0x3ec>)
 8015ea0:	4a10      	ldr	r2, [pc, #64]	@ (8015ee4 <StartSetingsConfig+0x30c>)
 8015ea2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015ea6:	e08f      	b.n	8015fc8 <StartSetingsConfig+0x3f0>
	...
 8015eb4:	409d6c00 	.word	0x409d6c00
 8015eb8:	00000000 	.word	0x00000000
 8015ebc:	40680000 	.word	0x40680000
 8015ec0:	00000000 	.word	0x00000000
 8015ec4:	40650000 	.word	0x40650000
 8015ec8:	00000000 	.word	0x00000000
 8015ecc:	40560000 	.word	0x40560000
 8015ed0:	00000000 	.word	0x00000000
 8015ed4:	406fe000 	.word	0x406fe000
 8015ed8:	08031148 	.word	0x08031148
 8015edc:	2001c07c 	.word	0x2001c07c
 8015ee0:	08031390 	.word	0x08031390
 8015ee4:	080313b0 	.word	0x080313b0
 8015ee8:	08031154 	.word	0x08031154
 8015eec:	080313b8 	.word	0x080313b8
 8015ef0:	08031160 	.word	0x08031160
 8015ef4:	080313c4 	.word	0x080313c4
 8015ef8:	0803116c 	.word	0x0803116c
 8015efc:	080313c8 	.word	0x080313c8
 8015f00:	08031174 	.word	0x08031174
 8015f04:	0803117c 	.word	0x0803117c
 8015f08:	08031188 	.word	0x08031188
 8015f0c:	08031190 	.word	0x08031190
 8015f10:	08031198 	.word	0x08031198
 8015f14:	080311a4 	.word	0x080311a4
 8015f18:	080311b0 	.word	0x080311b0
 8015f1c:	080311bc 	.word	0x080311bc
 8015f20:	080311c8 	.word	0x080311c8
 8015f24:	080311d4 	.word	0x080311d4
 8015f28:	080311e0 	.word	0x080311e0
 8015f2c:	080311ec 	.word	0x080311ec
 8015f30:	080311f8 	.word	0x080311f8
 8015f34:	08031204 	.word	0x08031204
 8015f38:	08031210 	.word	0x08031210
 8015f3c:	0803121c 	.word	0x0803121c
 8015f40:	08031228 	.word	0x08031228
 8015f44:	08031234 	.word	0x08031234
 8015f48:	080313cc 	.word	0x080313cc
 8015f4c:	08031240 	.word	0x08031240
 8015f50:	0803124c 	.word	0x0803124c
 8015f54:	08031258 	.word	0x08031258
 8015f58:	08031264 	.word	0x08031264
 8015f5c:	08031270 	.word	0x08031270
 8015f60:	0803127c 	.word	0x0803127c
 8015f64:	08031288 	.word	0x08031288
 8015f68:	08031294 	.word	0x08031294
 8015f6c:	080312a0 	.word	0x080312a0
 8015f70:	080312ac 	.word	0x080312ac
 8015f74:	080312b8 	.word	0x080312b8
 8015f78:	080312c4 	.word	0x080312c4
 8015f7c:	080312d0 	.word	0x080312d0
 8015f80:	080312dc 	.word	0x080312dc
 8015f84:	080312e8 	.word	0x080312e8
 8015f88:	080312f4 	.word	0x080312f4
 8015f8c:	08031300 	.word	0x08031300
 8015f90:	0803130c 	.word	0x0803130c
 8015f94:	08031318 	.word	0x08031318
 8015f98:	08031324 	.word	0x08031324
 8015f9c:	08031330 	.word	0x08031330
 8015fa0:	0803133c 	.word	0x0803133c
 8015fa4:	08031348 	.word	0x08031348
 8015fa8:	08031354 	.word	0x08031354
 8015fac:	08031360 	.word	0x08031360
 8015fb0:	0803136c 	.word	0x0803136c
 8015fb4:	08031378 	.word	0x08031378
 8015fb8:	08031384 	.word	0x08031384
 8015fbc:	080313d8 	.word	0x080313d8
 8015fc0:	20014c48 	.word	0x20014c48
 8015fc4:	2000de80 	.word	0x2000de80
 8015fc8:	6018      	str	r0, [r3, #0]
 8015fca:	3304      	adds	r3, #4
 8015fcc:	8019      	strh	r1, [r3, #0]
		strcpy(SetSettings.adm_pswd, ADM_PASS);
 8015fce:	4a21      	ldr	r2, [pc, #132]	@ (8016054 <StartSetingsConfig+0x47c>)
 8015fd0:	4b21      	ldr	r3, [pc, #132]	@ (8016058 <StartSetingsConfig+0x480>)
 8015fd2:	cb03      	ldmia	r3!, {r0, r1}
 8015fd4:	6010      	str	r0, [r2, #0]
 8015fd6:	6051      	str	r1, [r2, #4]
 8015fd8:	781b      	ldrb	r3, [r3, #0]
 8015fda:	7213      	strb	r3, [r2, #8]
		SetSettings.ip_addr0 = IP_ADDR0;
 8015fdc:	4b1f      	ldr	r3, [pc, #124]	@ (801605c <StartSetingsConfig+0x484>)
 8015fde:	22c0      	movs	r2, #192	@ 0xc0
 8015fe0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		SetSettings.ip_addr1 = IP_ADDR1;
 8015fe4:	4b1d      	ldr	r3, [pc, #116]	@ (801605c <StartSetingsConfig+0x484>)
 8015fe6:	22a8      	movs	r2, #168	@ 0xa8
 8015fe8:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
		SetSettings.ip_addr2 = IP_ADDR2;
 8015fec:	4b1b      	ldr	r3, [pc, #108]	@ (801605c <StartSetingsConfig+0x484>)
 8015fee:	2212      	movs	r2, #18
 8015ff0:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
		SetSettings.ip_addr3 = IP_ADDR3;
 8015ff4:	4b19      	ldr	r3, [pc, #100]	@ (801605c <StartSetingsConfig+0x484>)
 8015ff6:	2258      	movs	r2, #88	@ 0x58
 8015ff8:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
		SetSettings.sb_mask0 = SB_MASK0;
 8015ffc:	4b17      	ldr	r3, [pc, #92]	@ (801605c <StartSetingsConfig+0x484>)
 8015ffe:	22ff      	movs	r2, #255	@ 0xff
 8016000:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
		SetSettings.sb_mask1 = SB_MASK1;
 8016004:	4b15      	ldr	r3, [pc, #84]	@ (801605c <StartSetingsConfig+0x484>)
 8016006:	22ff      	movs	r2, #255	@ 0xff
 8016008:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
		SetSettings.sb_mask2 = SB_MASK2;
 801600c:	4b13      	ldr	r3, [pc, #76]	@ (801605c <StartSetingsConfig+0x484>)
 801600e:	22ff      	movs	r2, #255	@ 0xff
 8016010:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
		SetSettings.sb_mask3 = SB_MASK3;
 8016014:	4b11      	ldr	r3, [pc, #68]	@ (801605c <StartSetingsConfig+0x484>)
 8016016:	2200      	movs	r2, #0
 8016018:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
		SetSettings.gateway0 = GATEWAY0;
 801601c:	4b0f      	ldr	r3, [pc, #60]	@ (801605c <StartSetingsConfig+0x484>)
 801601e:	22c0      	movs	r2, #192	@ 0xc0
 8016020:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
		SetSettings.gateway1 = GATEWAY1;
 8016024:	4b0d      	ldr	r3, [pc, #52]	@ (801605c <StartSetingsConfig+0x484>)
 8016026:	22a8      	movs	r2, #168	@ 0xa8
 8016028:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
		SetSettings.gateway2 = GATEWAY2;
 801602c:	4b0b      	ldr	r3, [pc, #44]	@ (801605c <StartSetingsConfig+0x484>)
 801602e:	2212      	movs	r2, #18
 8016030:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
		SetSettings.gateway3 = GATEWAY3;
 8016034:	4b09      	ldr	r3, [pc, #36]	@ (801605c <StartSetingsConfig+0x484>)
 8016036:	2201      	movs	r2, #1
 8016038:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
		SetSettings.mqtt_prt = MQTT_PRT;
 801603c:	4b07      	ldr	r3, [pc, #28]	@ (801605c <StartSetingsConfig+0x484>)
 801603e:	f240 725b 	movw	r2, #1883	@ 0x75b
 8016042:	65da      	str	r2, [r3, #92]	@ 0x5c
		SetSettings.mqtt_prt = MQTT_QOS;
 8016044:	4b05      	ldr	r3, [pc, #20]	@ (801605c <StartSetingsConfig+0x484>)
 8016046:	2200      	movs	r2, #0
 8016048:	65da      	str	r2, [r3, #92]	@ 0x5c

	}
}
 801604a:	bf00      	nop
 801604c:	3710      	adds	r7, #16
 801604e:	46bd      	mov	sp, r7
 8016050:	bd80      	pop	{r7, pc}
 8016052:	bf00      	nop
 8016054:	2000de8a 	.word	0x2000de8a
 8016058:	080313b8 	.word	0x080313b8
 801605c:	2000de80 	.word	0x2000de80

08016060 <GetSetingsConfig>:

// если файл существует, открываем его и перезаписываем
void GetSetingsConfig() {
 8016060:	b580      	push	{r7, lr}
 8016062:	f5ad 6d85 	sub.w	sp, sp, #1064	@ 0x428
 8016066:	af00      	add	r7, sp, #0
	FILINFO finfo;
	FRESULT fresult = f_stat("setings.ini", &finfo);
 8016068:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801606c:	4619      	mov	r1, r3
 801606e:	48c2      	ldr	r0, [pc, #776]	@ (8016378 <GetSetingsConfig+0x318>)
 8016070:	f00f ffc6 	bl	8026000 <f_stat>
 8016074:	4603      	mov	r3, r0
 8016076:	f887 3427 	strb.w	r3, [r7, #1063]	@ 0x427

	if (fresult == FR_OK) {
 801607a:	f897 3427 	ldrb.w	r3, [r7, #1063]	@ 0x427
 801607e:	2b00      	cmp	r3, #0
 8016080:	f040 829f 	bne.w	80165c2 <GetSetingsConfig+0x562>
		if (f_open(&USBHFile, (const TCHAR*) "setings.ini", FA_READ) == FR_OK) {
 8016084:	2201      	movs	r2, #1
 8016086:	49bc      	ldr	r1, [pc, #752]	@ (8016378 <GetSetingsConfig+0x318>)
 8016088:	48bc      	ldr	r0, [pc, #752]	@ (801637c <GetSetingsConfig+0x31c>)
 801608a:	f00f f9e1 	bl	8025450 <f_open>
 801608e:	4603      	mov	r3, r0
 8016090:	2b00      	cmp	r3, #0
 8016092:	f040 8296 	bne.w	80165c2 <GetSetingsConfig+0x562>
			char fsbuffer[1024];
			UINT Byteswritten = 0;
 8016096:	2300      	movs	r3, #0
 8016098:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
			fresult = f_read(&USBHFile, fsbuffer, sizeof(fsbuffer), &Byteswritten);
 801609c:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 80160a0:	1d39      	adds	r1, r7, #4
 80160a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80160a6:	48b5      	ldr	r0, [pc, #724]	@ (801637c <GetSetingsConfig+0x31c>)
 80160a8:	f00f fba1 	bl	80257ee <f_read>
 80160ac:	4603      	mov	r3, r0
 80160ae:	f887 3427 	strb.w	r3, [r7, #1063]	@ 0x427

			cJSON *root_obj = cJSON_Parse(fsbuffer);
 80160b2:	1d3b      	adds	r3, r7, #4
 80160b4:	4618      	mov	r0, r3
 80160b6:	f7eb fd8b 	bl	8001bd0 <cJSON_Parse>
 80160ba:	f8c7 0420 	str.w	r0, [r7, #1056]	@ 0x420

			strcpy(SetSettings.adm_name, cJSON_GetObjectItem(root_obj, "adm_name")->valuestring);
 80160be:	49b0      	ldr	r1, [pc, #704]	@ (8016380 <GetSetingsConfig+0x320>)
 80160c0:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 80160c4:	f7ec fbfd 	bl	80028c2 <cJSON_GetObjectItem>
 80160c8:	4603      	mov	r3, r0
 80160ca:	691b      	ldr	r3, [r3, #16]
 80160cc:	4619      	mov	r1, r3
 80160ce:	48ad      	ldr	r0, [pc, #692]	@ (8016384 <GetSetingsConfig+0x324>)
 80160d0:	f016 fa49 	bl	802c566 <strcpy>
			strcpy(SetSettings.adm_pswd, cJSON_GetObjectItem(root_obj, "adm_pswd")->valuestring);
 80160d4:	49ac      	ldr	r1, [pc, #688]	@ (8016388 <GetSetingsConfig+0x328>)
 80160d6:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 80160da:	f7ec fbf2 	bl	80028c2 <cJSON_GetObjectItem>
 80160de:	4603      	mov	r3, r0
 80160e0:	691b      	ldr	r3, [r3, #16]
 80160e2:	4619      	mov	r1, r3
 80160e4:	48a9      	ldr	r0, [pc, #676]	@ (801638c <GetSetingsConfig+0x32c>)
 80160e6:	f016 fa3e 	bl	802c566 <strcpy>
			strcpy(SetSettings.token, cJSON_GetObjectItem(root_obj, "token")->valuestring);
 80160ea:	49a9      	ldr	r1, [pc, #676]	@ (8016390 <GetSetingsConfig+0x330>)
 80160ec:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 80160f0:	f7ec fbe7 	bl	80028c2 <cJSON_GetObjectItem>
 80160f4:	4603      	mov	r3, r0
 80160f6:	691b      	ldr	r3, [r3, #16]
 80160f8:	4619      	mov	r1, r3
 80160fa:	48a6      	ldr	r0, [pc, #664]	@ (8016394 <GetSetingsConfig+0x334>)
 80160fc:	f016 fa33 	bl	802c566 <strcpy>
			strcpy(SetSettings.lang, cJSON_GetObjectItem(root_obj, "lang")->valuestring);
 8016100:	49a5      	ldr	r1, [pc, #660]	@ (8016398 <GetSetingsConfig+0x338>)
 8016102:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 8016106:	f7ec fbdc 	bl	80028c2 <cJSON_GetObjectItem>
 801610a:	4603      	mov	r3, r0
 801610c:	691b      	ldr	r3, [r3, #16]
 801610e:	4619      	mov	r1, r3
 8016110:	48a2      	ldr	r0, [pc, #648]	@ (801639c <GetSetingsConfig+0x33c>)
 8016112:	f016 fa28 	bl	802c566 <strcpy>
			SetSettings.timezone = cJSON_GetObjectItem(root_obj, "timezone")->valueint;
 8016116:	49a2      	ldr	r1, [pc, #648]	@ (80163a0 <GetSetingsConfig+0x340>)
 8016118:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 801611c:	f7ec fbd1 	bl	80028c2 <cJSON_GetObjectItem>
 8016120:	4603      	mov	r3, r0
 8016122:	695b      	ldr	r3, [r3, #20]
 8016124:	4a97      	ldr	r2, [pc, #604]	@ (8016384 <GetSetingsConfig+0x324>)
 8016126:	6293      	str	r3, [r2, #40]	@ 0x28
			SetSettings.lon_de = cJSON_GetObjectItem(root_obj, "lon_de")->valueint;
 8016128:	499e      	ldr	r1, [pc, #632]	@ (80163a4 <GetSetingsConfig+0x344>)
 801612a:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 801612e:	f7ec fbc8 	bl	80028c2 <cJSON_GetObjectItem>
 8016132:	4603      	mov	r3, r0
 8016134:	695b      	ldr	r3, [r3, #20]
 8016136:	ee07 3a90 	vmov	s15, r3
 801613a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801613e:	4b91      	ldr	r3, [pc, #580]	@ (8016384 <GetSetingsConfig+0x324>)
 8016140:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
			SetSettings.lat_de = cJSON_GetObjectItem(root_obj, "lat_de")->valueint;
 8016144:	4998      	ldr	r1, [pc, #608]	@ (80163a8 <GetSetingsConfig+0x348>)
 8016146:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 801614a:	f7ec fbba 	bl	80028c2 <cJSON_GetObjectItem>
 801614e:	4603      	mov	r3, r0
 8016150:	695b      	ldr	r3, [r3, #20]
 8016152:	ee07 3a90 	vmov	s15, r3
 8016156:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801615a:	4b8a      	ldr	r3, [pc, #552]	@ (8016384 <GetSetingsConfig+0x324>)
 801615c:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
			SetSettings.ip1_sntp0 = cJSON_GetObjectItem(root_obj, "ip1_sntp0")->valueint;
 8016160:	4992      	ldr	r1, [pc, #584]	@ (80163ac <GetSetingsConfig+0x34c>)
 8016162:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 8016166:	f7ec fbac 	bl	80028c2 <cJSON_GetObjectItem>
 801616a:	4603      	mov	r3, r0
 801616c:	695b      	ldr	r3, [r3, #20]
 801616e:	b21a      	sxth	r2, r3
 8016170:	4b84      	ldr	r3, [pc, #528]	@ (8016384 <GetSetingsConfig+0x324>)
 8016172:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
			SetSettings.ip1_sntp1 = cJSON_GetObjectItem(root_obj, "ip1_sntp1")->valueint;
 8016176:	498e      	ldr	r1, [pc, #568]	@ (80163b0 <GetSetingsConfig+0x350>)
 8016178:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 801617c:	f7ec fba1 	bl	80028c2 <cJSON_GetObjectItem>
 8016180:	4603      	mov	r3, r0
 8016182:	695b      	ldr	r3, [r3, #20]
 8016184:	b21a      	sxth	r2, r3
 8016186:	4b7f      	ldr	r3, [pc, #508]	@ (8016384 <GetSetingsConfig+0x324>)
 8016188:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
			SetSettings.ip1_sntp2 = cJSON_GetObjectItem(root_obj, "ip1_sntp2")->valueint;
 801618c:	4989      	ldr	r1, [pc, #548]	@ (80163b4 <GetSetingsConfig+0x354>)
 801618e:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 8016192:	f7ec fb96 	bl	80028c2 <cJSON_GetObjectItem>
 8016196:	4603      	mov	r3, r0
 8016198:	695b      	ldr	r3, [r3, #20]
 801619a:	b21a      	sxth	r2, r3
 801619c:	4b79      	ldr	r3, [pc, #484]	@ (8016384 <GetSetingsConfig+0x324>)
 801619e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
			SetSettings.ip1_sntp3 = cJSON_GetObjectItem(root_obj, "ip1_sntp3")->valueint;
 80161a2:	4985      	ldr	r1, [pc, #532]	@ (80163b8 <GetSetingsConfig+0x358>)
 80161a4:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 80161a8:	f7ec fb8b 	bl	80028c2 <cJSON_GetObjectItem>
 80161ac:	4603      	mov	r3, r0
 80161ae:	695b      	ldr	r3, [r3, #20]
 80161b0:	b21a      	sxth	r2, r3
 80161b2:	4b74      	ldr	r3, [pc, #464]	@ (8016384 <GetSetingsConfig+0x324>)
 80161b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
			SetSettings.ip2_sntp0 = cJSON_GetObjectItem(root_obj, "ip2_sntp0")->valueint;
 80161b8:	4980      	ldr	r1, [pc, #512]	@ (80163bc <GetSetingsConfig+0x35c>)
 80161ba:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 80161be:	f7ec fb80 	bl	80028c2 <cJSON_GetObjectItem>
 80161c2:	4603      	mov	r3, r0
 80161c4:	695b      	ldr	r3, [r3, #20]
 80161c6:	b21a      	sxth	r2, r3
 80161c8:	4b6e      	ldr	r3, [pc, #440]	@ (8016384 <GetSetingsConfig+0x324>)
 80161ca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
			SetSettings.ip2_sntp1 = cJSON_GetObjectItem(root_obj, "ip2_sntp1")->valueint;
 80161ce:	497c      	ldr	r1, [pc, #496]	@ (80163c0 <GetSetingsConfig+0x360>)
 80161d0:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 80161d4:	f7ec fb75 	bl	80028c2 <cJSON_GetObjectItem>
 80161d8:	4603      	mov	r3, r0
 80161da:	695b      	ldr	r3, [r3, #20]
 80161dc:	b21a      	sxth	r2, r3
 80161de:	4b69      	ldr	r3, [pc, #420]	@ (8016384 <GetSetingsConfig+0x324>)
 80161e0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
			SetSettings.ip2_sntp2 = cJSON_GetObjectItem(root_obj, "ip2_sntp2")->valueint;
 80161e4:	4977      	ldr	r1, [pc, #476]	@ (80163c4 <GetSetingsConfig+0x364>)
 80161e6:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 80161ea:	f7ec fb6a 	bl	80028c2 <cJSON_GetObjectItem>
 80161ee:	4603      	mov	r3, r0
 80161f0:	695b      	ldr	r3, [r3, #20]
 80161f2:	b21a      	sxth	r2, r3
 80161f4:	4b63      	ldr	r3, [pc, #396]	@ (8016384 <GetSetingsConfig+0x324>)
 80161f6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
			SetSettings.ip2_sntp3 = cJSON_GetObjectItem(root_obj, "ip2_sntp3")->valueint;
 80161fa:	4973      	ldr	r1, [pc, #460]	@ (80163c8 <GetSetingsConfig+0x368>)
 80161fc:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 8016200:	f7ec fb5f 	bl	80028c2 <cJSON_GetObjectItem>
 8016204:	4603      	mov	r3, r0
 8016206:	695b      	ldr	r3, [r3, #20]
 8016208:	b21a      	sxth	r2, r3
 801620a:	4b5e      	ldr	r3, [pc, #376]	@ (8016384 <GetSetingsConfig+0x324>)
 801620c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
			SetSettings.ip3_sntp0 = cJSON_GetObjectItem(root_obj, "ip3_sntp0")->valueint;
 8016210:	496e      	ldr	r1, [pc, #440]	@ (80163cc <GetSetingsConfig+0x36c>)
 8016212:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 8016216:	f7ec fb54 	bl	80028c2 <cJSON_GetObjectItem>
 801621a:	4603      	mov	r3, r0
 801621c:	695b      	ldr	r3, [r3, #20]
 801621e:	b21a      	sxth	r2, r3
 8016220:	4b58      	ldr	r3, [pc, #352]	@ (8016384 <GetSetingsConfig+0x324>)
 8016222:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
			SetSettings.ip3_sntp1 = cJSON_GetObjectItem(root_obj, "ip3_sntp1")->valueint;
 8016226:	496a      	ldr	r1, [pc, #424]	@ (80163d0 <GetSetingsConfig+0x370>)
 8016228:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 801622c:	f7ec fb49 	bl	80028c2 <cJSON_GetObjectItem>
 8016230:	4603      	mov	r3, r0
 8016232:	695b      	ldr	r3, [r3, #20]
 8016234:	b21a      	sxth	r2, r3
 8016236:	4b53      	ldr	r3, [pc, #332]	@ (8016384 <GetSetingsConfig+0x324>)
 8016238:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
			SetSettings.ip3_sntp2 = cJSON_GetObjectItem(root_obj, "ip3_sntp2")->valueint;
 801623c:	4965      	ldr	r1, [pc, #404]	@ (80163d4 <GetSetingsConfig+0x374>)
 801623e:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 8016242:	f7ec fb3e 	bl	80028c2 <cJSON_GetObjectItem>
 8016246:	4603      	mov	r3, r0
 8016248:	695b      	ldr	r3, [r3, #20]
 801624a:	b21a      	sxth	r2, r3
 801624c:	4b4d      	ldr	r3, [pc, #308]	@ (8016384 <GetSetingsConfig+0x324>)
 801624e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
			SetSettings.ip3_sntp3 = cJSON_GetObjectItem(root_obj, "ip3_sntp3")->valueint;
 8016252:	4961      	ldr	r1, [pc, #388]	@ (80163d8 <GetSetingsConfig+0x378>)
 8016254:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 8016258:	f7ec fb33 	bl	80028c2 <cJSON_GetObjectItem>
 801625c:	4603      	mov	r3, r0
 801625e:	695b      	ldr	r3, [r3, #20]
 8016260:	b21a      	sxth	r2, r3
 8016262:	4b48      	ldr	r3, [pc, #288]	@ (8016384 <GetSetingsConfig+0x324>)
 8016264:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
			// Настройки MQTT
			SetSettings.check_mqtt = cJSON_GetObjectItem(root_obj, "check_mqtt")->valueint;
 8016268:	495c      	ldr	r1, [pc, #368]	@ (80163dc <GetSetingsConfig+0x37c>)
 801626a:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 801626e:	f7ec fb28 	bl	80028c2 <cJSON_GetObjectItem>
 8016272:	4603      	mov	r3, r0
 8016274:	695b      	ldr	r3, [r3, #20]
 8016276:	b21a      	sxth	r2, r3
 8016278:	4b42      	ldr	r3, [pc, #264]	@ (8016384 <GetSetingsConfig+0x324>)
 801627a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
			SetSettings.mqtt_prt = cJSON_GetObjectItem(root_obj, "mqtt_prt")->valueint;
 801627e:	4958      	ldr	r1, [pc, #352]	@ (80163e0 <GetSetingsConfig+0x380>)
 8016280:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 8016284:	f7ec fb1d 	bl	80028c2 <cJSON_GetObjectItem>
 8016288:	4603      	mov	r3, r0
 801628a:	695b      	ldr	r3, [r3, #20]
 801628c:	4a3d      	ldr	r2, [pc, #244]	@ (8016384 <GetSetingsConfig+0x324>)
 801628e:	65d3      	str	r3, [r2, #92]	@ 0x5c
			//SetSettings.mqtt_qos = cJSON_GetObjectItem(root_obj, "mqtt_qos")->valueint;
			strcpy(SetSettings.mqtt_clt, cJSON_GetObjectItem(root_obj, "mqtt_clt")->valuestring);
 8016290:	4954      	ldr	r1, [pc, #336]	@ (80163e4 <GetSetingsConfig+0x384>)
 8016292:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 8016296:	f7ec fb14 	bl	80028c2 <cJSON_GetObjectItem>
 801629a:	4603      	mov	r3, r0
 801629c:	691b      	ldr	r3, [r3, #16]
 801629e:	4619      	mov	r1, r3
 80162a0:	4851      	ldr	r0, [pc, #324]	@ (80163e8 <GetSetingsConfig+0x388>)
 80162a2:	f016 f960 	bl	802c566 <strcpy>
			strcpy(SetSettings.mqtt_usr, cJSON_GetObjectItem(root_obj, "mqtt_usr")->valuestring);
 80162a6:	4951      	ldr	r1, [pc, #324]	@ (80163ec <GetSetingsConfig+0x38c>)
 80162a8:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 80162ac:	f7ec fb09 	bl	80028c2 <cJSON_GetObjectItem>
 80162b0:	4603      	mov	r3, r0
 80162b2:	691b      	ldr	r3, [r3, #16]
 80162b4:	4619      	mov	r1, r3
 80162b6:	484e      	ldr	r0, [pc, #312]	@ (80163f0 <GetSetingsConfig+0x390>)
 80162b8:	f016 f955 	bl	802c566 <strcpy>
			strcpy(SetSettings.mqtt_pswd, cJSON_GetObjectItem(root_obj, "mqtt_pswd")->valuestring);
 80162bc:	494d      	ldr	r1, [pc, #308]	@ (80163f4 <GetSetingsConfig+0x394>)
 80162be:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 80162c2:	f7ec fafe 	bl	80028c2 <cJSON_GetObjectItem>
 80162c6:	4603      	mov	r3, r0
 80162c8:	691b      	ldr	r3, [r3, #16]
 80162ca:	4619      	mov	r1, r3
 80162cc:	484a      	ldr	r0, [pc, #296]	@ (80163f8 <GetSetingsConfig+0x398>)
 80162ce:	f016 f94a 	bl	802c566 <strcpy>
			strcpy(SetSettings.mqtt_tpc, cJSON_GetObjectItem(root_obj, "mqtt_tpc")->valuestring);
 80162d2:	494a      	ldr	r1, [pc, #296]	@ (80163fc <GetSetingsConfig+0x39c>)
 80162d4:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 80162d8:	f7ec faf3 	bl	80028c2 <cJSON_GetObjectItem>
 80162dc:	4603      	mov	r3, r0
 80162de:	691b      	ldr	r3, [r3, #16]
 80162e0:	4619      	mov	r1, r3
 80162e2:	4847      	ldr	r0, [pc, #284]	@ (8016400 <GetSetingsConfig+0x3a0>)
 80162e4:	f016 f93f 	bl	802c566 <strcpy>
			strcpy(SetSettings.mqtt_ftpc, cJSON_GetObjectItem(root_obj, "mqtt_ftpc")->valuestring);
 80162e8:	4946      	ldr	r1, [pc, #280]	@ (8016404 <GetSetingsConfig+0x3a4>)
 80162ea:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 80162ee:	f7ec fae8 	bl	80028c2 <cJSON_GetObjectItem>
 80162f2:	4603      	mov	r3, r0
 80162f4:	691b      	ldr	r3, [r3, #16]
 80162f6:	4619      	mov	r1, r3
 80162f8:	4843      	ldr	r0, [pc, #268]	@ (8016408 <GetSetingsConfig+0x3a8>)
 80162fa:	f016 f934 	bl	802c566 <strcpy>
			SetSettings.mqtt_hst0 = cJSON_GetObjectItem(root_obj, "mqtt_hst0")->valueint;
 80162fe:	4943      	ldr	r1, [pc, #268]	@ (801640c <GetSetingsConfig+0x3ac>)
 8016300:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 8016304:	f7ec fadd 	bl	80028c2 <cJSON_GetObjectItem>
 8016308:	4603      	mov	r3, r0
 801630a:	695b      	ldr	r3, [r3, #20]
 801630c:	b21a      	sxth	r2, r3
 801630e:	4b1d      	ldr	r3, [pc, #116]	@ (8016384 <GetSetingsConfig+0x324>)
 8016310:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
			SetSettings.mqtt_hst1 = cJSON_GetObjectItem(root_obj, "mqtt_hst1")->valueint;
 8016314:	493e      	ldr	r1, [pc, #248]	@ (8016410 <GetSetingsConfig+0x3b0>)
 8016316:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 801631a:	f7ec fad2 	bl	80028c2 <cJSON_GetObjectItem>
 801631e:	4603      	mov	r3, r0
 8016320:	695b      	ldr	r3, [r3, #20]
 8016322:	b21a      	sxth	r2, r3
 8016324:	4b17      	ldr	r3, [pc, #92]	@ (8016384 <GetSetingsConfig+0x324>)
 8016326:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
			SetSettings.mqtt_hst2 = cJSON_GetObjectItem(root_obj, "mqtt_hst2")->valueint;
 801632a:	493a      	ldr	r1, [pc, #232]	@ (8016414 <GetSetingsConfig+0x3b4>)
 801632c:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 8016330:	f7ec fac7 	bl	80028c2 <cJSON_GetObjectItem>
 8016334:	4603      	mov	r3, r0
 8016336:	695b      	ldr	r3, [r3, #20]
 8016338:	b21a      	sxth	r2, r3
 801633a:	4b12      	ldr	r3, [pc, #72]	@ (8016384 <GetSetingsConfig+0x324>)
 801633c:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
			SetSettings.mqtt_hst3 = cJSON_GetObjectItem(root_obj, "mqtt_hst3")->valueint;
 8016340:	4935      	ldr	r1, [pc, #212]	@ (8016418 <GetSetingsConfig+0x3b8>)
 8016342:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 8016346:	f7ec fabc 	bl	80028c2 <cJSON_GetObjectItem>
 801634a:	4603      	mov	r3, r0
 801634c:	695b      	ldr	r3, [r3, #20]
 801634e:	b21a      	sxth	r2, r3
 8016350:	4b0c      	ldr	r3, [pc, #48]	@ (8016384 <GetSetingsConfig+0x324>)
 8016352:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8

			// Настройки IP адреса
			SetSettings.check_ip = cJSON_GetObjectItem(root_obj, "check_ip")->valueint;
 8016356:	4931      	ldr	r1, [pc, #196]	@ (801641c <GetSetingsConfig+0x3bc>)
 8016358:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 801635c:	f7ec fab1 	bl	80028c2 <cJSON_GetObjectItem>
 8016360:	4603      	mov	r3, r0
 8016362:	695b      	ldr	r3, [r3, #20]
 8016364:	b21a      	sxth	r2, r3
 8016366:	4b07      	ldr	r3, [pc, #28]	@ (8016384 <GetSetingsConfig+0x324>)
 8016368:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
			SetSettings.ip_addr0 = cJSON_GetObjectItem(root_obj, "ip_addr0")->valueint;
 801636c:	492c      	ldr	r1, [pc, #176]	@ (8016420 <GetSetingsConfig+0x3c0>)
 801636e:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 8016372:	f7ec faa6 	bl	80028c2 <cJSON_GetObjectItem>
 8016376:	e055      	b.n	8016424 <GetSetingsConfig+0x3c4>
 8016378:	08031148 	.word	0x08031148
 801637c:	2001c07c 	.word	0x2001c07c
 8016380:	08031154 	.word	0x08031154
 8016384:	2000de80 	.word	0x2000de80
 8016388:	08031160 	.word	0x08031160
 801638c:	2000de8a 	.word	0x2000de8a
 8016390:	0803116c 	.word	0x0803116c
 8016394:	2000de99 	.word	0x2000de99
 8016398:	08031174 	.word	0x08031174
 801639c:	2000dea4 	.word	0x2000dea4
 80163a0:	0803117c 	.word	0x0803117c
 80163a4:	08031188 	.word	0x08031188
 80163a8:	08031190 	.word	0x08031190
 80163ac:	08031198 	.word	0x08031198
 80163b0:	080311a4 	.word	0x080311a4
 80163b4:	080311b0 	.word	0x080311b0
 80163b8:	080311bc 	.word	0x080311bc
 80163bc:	080311c8 	.word	0x080311c8
 80163c0:	080311d4 	.word	0x080311d4
 80163c4:	080311e0 	.word	0x080311e0
 80163c8:	080311ec 	.word	0x080311ec
 80163cc:	080311f8 	.word	0x080311f8
 80163d0:	08031204 	.word	0x08031204
 80163d4:	08031210 	.word	0x08031210
 80163d8:	0803121c 	.word	0x0803121c
 80163dc:	08031228 	.word	0x08031228
 80163e0:	08031234 	.word	0x08031234
 80163e4:	08031240 	.word	0x08031240
 80163e8:	2000dee0 	.word	0x2000dee0
 80163ec:	0803124c 	.word	0x0803124c
 80163f0:	2000deea 	.word	0x2000deea
 80163f4:	08031258 	.word	0x08031258
 80163f8:	2000def4 	.word	0x2000def4
 80163fc:	08031264 	.word	0x08031264
 8016400:	2000df03 	.word	0x2000df03
 8016404:	08031270 	.word	0x08031270
 8016408:	2000df12 	.word	0x2000df12
 801640c:	0803127c 	.word	0x0803127c
 8016410:	08031288 	.word	0x08031288
 8016414:	08031294 	.word	0x08031294
 8016418:	080312a0 	.word	0x080312a0
 801641c:	080312ac 	.word	0x080312ac
 8016420:	080312b8 	.word	0x080312b8
 8016424:	4603      	mov	r3, r0
 8016426:	695b      	ldr	r3, [r3, #20]
 8016428:	b21a      	sxth	r2, r3
 801642a:	4b68      	ldr	r3, [pc, #416]	@ (80165cc <GetSetingsConfig+0x56c>)
 801642c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			SetSettings.ip_addr1 = cJSON_GetObjectItem(root_obj, "ip_addr1")->valueint;
 8016430:	4967      	ldr	r1, [pc, #412]	@ (80165d0 <GetSetingsConfig+0x570>)
 8016432:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 8016436:	f7ec fa44 	bl	80028c2 <cJSON_GetObjectItem>
 801643a:	4603      	mov	r3, r0
 801643c:	695b      	ldr	r3, [r3, #20]
 801643e:	b21a      	sxth	r2, r3
 8016440:	4b62      	ldr	r3, [pc, #392]	@ (80165cc <GetSetingsConfig+0x56c>)
 8016442:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
			SetSettings.ip_addr2 = cJSON_GetObjectItem(root_obj, "ip_addr2")->valueint;
 8016446:	4963      	ldr	r1, [pc, #396]	@ (80165d4 <GetSetingsConfig+0x574>)
 8016448:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 801644c:	f7ec fa39 	bl	80028c2 <cJSON_GetObjectItem>
 8016450:	4603      	mov	r3, r0
 8016452:	695b      	ldr	r3, [r3, #20]
 8016454:	b21a      	sxth	r2, r3
 8016456:	4b5d      	ldr	r3, [pc, #372]	@ (80165cc <GetSetingsConfig+0x56c>)
 8016458:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
			SetSettings.ip_addr3 = cJSON_GetObjectItem(root_obj, "ip_addr3")->valueint;
 801645c:	495e      	ldr	r1, [pc, #376]	@ (80165d8 <GetSetingsConfig+0x578>)
 801645e:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 8016462:	f7ec fa2e 	bl	80028c2 <cJSON_GetObjectItem>
 8016466:	4603      	mov	r3, r0
 8016468:	695b      	ldr	r3, [r3, #20]
 801646a:	b21a      	sxth	r2, r3
 801646c:	4b57      	ldr	r3, [pc, #348]	@ (80165cc <GetSetingsConfig+0x56c>)
 801646e:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
			SetSettings.sb_mask0 = cJSON_GetObjectItem(root_obj, "sb_mask0")->valueint;
 8016472:	495a      	ldr	r1, [pc, #360]	@ (80165dc <GetSetingsConfig+0x57c>)
 8016474:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 8016478:	f7ec fa23 	bl	80028c2 <cJSON_GetObjectItem>
 801647c:	4603      	mov	r3, r0
 801647e:	695b      	ldr	r3, [r3, #20]
 8016480:	b21a      	sxth	r2, r3
 8016482:	4b52      	ldr	r3, [pc, #328]	@ (80165cc <GetSetingsConfig+0x56c>)
 8016484:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
			SetSettings.sb_mask1 = cJSON_GetObjectItem(root_obj, "sb_mask1")->valueint;
 8016488:	4955      	ldr	r1, [pc, #340]	@ (80165e0 <GetSetingsConfig+0x580>)
 801648a:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 801648e:	f7ec fa18 	bl	80028c2 <cJSON_GetObjectItem>
 8016492:	4603      	mov	r3, r0
 8016494:	695b      	ldr	r3, [r3, #20]
 8016496:	b21a      	sxth	r2, r3
 8016498:	4b4c      	ldr	r3, [pc, #304]	@ (80165cc <GetSetingsConfig+0x56c>)
 801649a:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
			SetSettings.sb_mask2 = cJSON_GetObjectItem(root_obj, "sb_mask2")->valueint;
 801649e:	4951      	ldr	r1, [pc, #324]	@ (80165e4 <GetSetingsConfig+0x584>)
 80164a0:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 80164a4:	f7ec fa0d 	bl	80028c2 <cJSON_GetObjectItem>
 80164a8:	4603      	mov	r3, r0
 80164aa:	695b      	ldr	r3, [r3, #20]
 80164ac:	b21a      	sxth	r2, r3
 80164ae:	4b47      	ldr	r3, [pc, #284]	@ (80165cc <GetSetingsConfig+0x56c>)
 80164b0:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
			SetSettings.sb_mask3 = cJSON_GetObjectItem(root_obj, "sb_mask3")->valueint;
 80164b4:	494c      	ldr	r1, [pc, #304]	@ (80165e8 <GetSetingsConfig+0x588>)
 80164b6:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 80164ba:	f7ec fa02 	bl	80028c2 <cJSON_GetObjectItem>
 80164be:	4603      	mov	r3, r0
 80164c0:	695b      	ldr	r3, [r3, #20]
 80164c2:	b21a      	sxth	r2, r3
 80164c4:	4b41      	ldr	r3, [pc, #260]	@ (80165cc <GetSetingsConfig+0x56c>)
 80164c6:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
			SetSettings.gateway0 = cJSON_GetObjectItem(root_obj, "gateway0")->valueint;
 80164ca:	4948      	ldr	r1, [pc, #288]	@ (80165ec <GetSetingsConfig+0x58c>)
 80164cc:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 80164d0:	f7ec f9f7 	bl	80028c2 <cJSON_GetObjectItem>
 80164d4:	4603      	mov	r3, r0
 80164d6:	695b      	ldr	r3, [r3, #20]
 80164d8:	b21a      	sxth	r2, r3
 80164da:	4b3c      	ldr	r3, [pc, #240]	@ (80165cc <GetSetingsConfig+0x56c>)
 80164dc:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
			SetSettings.gateway1 = cJSON_GetObjectItem(root_obj, "gateway1")->valueint;
 80164e0:	4943      	ldr	r1, [pc, #268]	@ (80165f0 <GetSetingsConfig+0x590>)
 80164e2:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 80164e6:	f7ec f9ec 	bl	80028c2 <cJSON_GetObjectItem>
 80164ea:	4603      	mov	r3, r0
 80164ec:	695b      	ldr	r3, [r3, #20]
 80164ee:	b21a      	sxth	r2, r3
 80164f0:	4b36      	ldr	r3, [pc, #216]	@ (80165cc <GetSetingsConfig+0x56c>)
 80164f2:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
			SetSettings.gateway2 = cJSON_GetObjectItem(root_obj, "gateway2")->valueint;
 80164f6:	493f      	ldr	r1, [pc, #252]	@ (80165f4 <GetSetingsConfig+0x594>)
 80164f8:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 80164fc:	f7ec f9e1 	bl	80028c2 <cJSON_GetObjectItem>
 8016500:	4603      	mov	r3, r0
 8016502:	695b      	ldr	r3, [r3, #20]
 8016504:	b21a      	sxth	r2, r3
 8016506:	4b31      	ldr	r3, [pc, #196]	@ (80165cc <GetSetingsConfig+0x56c>)
 8016508:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
			SetSettings.gateway3 = cJSON_GetObjectItem(root_obj, "gateway3")->valueint;
 801650c:	493a      	ldr	r1, [pc, #232]	@ (80165f8 <GetSetingsConfig+0x598>)
 801650e:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 8016512:	f7ec f9d6 	bl	80028c2 <cJSON_GetObjectItem>
 8016516:	4603      	mov	r3, r0
 8016518:	695b      	ldr	r3, [r3, #20]
 801651a:	b21a      	sxth	r2, r3
 801651c:	4b2b      	ldr	r3, [pc, #172]	@ (80165cc <GetSetingsConfig+0x56c>)
 801651e:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
			SetSettings.macaddr0 = cJSON_GetObjectItem(root_obj, "macaddr0")->valueint;
 8016522:	4936      	ldr	r1, [pc, #216]	@ (80165fc <GetSetingsConfig+0x59c>)
 8016524:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 8016528:	f7ec f9cb 	bl	80028c2 <cJSON_GetObjectItem>
 801652c:	4603      	mov	r3, r0
 801652e:	695b      	ldr	r3, [r3, #20]
 8016530:	b2da      	uxtb	r2, r3
 8016532:	4b26      	ldr	r3, [pc, #152]	@ (80165cc <GetSetingsConfig+0x56c>)
 8016534:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
			SetSettings.macaddr1 = cJSON_GetObjectItem(root_obj, "macaddr1")->valueint;
 8016538:	4931      	ldr	r1, [pc, #196]	@ (8016600 <GetSetingsConfig+0x5a0>)
 801653a:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 801653e:	f7ec f9c0 	bl	80028c2 <cJSON_GetObjectItem>
 8016542:	4603      	mov	r3, r0
 8016544:	695b      	ldr	r3, [r3, #20]
 8016546:	b2da      	uxtb	r2, r3
 8016548:	4b20      	ldr	r3, [pc, #128]	@ (80165cc <GetSetingsConfig+0x56c>)
 801654a:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
			SetSettings.macaddr2 = cJSON_GetObjectItem(root_obj, "macaddr2")->valueint;
 801654e:	492d      	ldr	r1, [pc, #180]	@ (8016604 <GetSetingsConfig+0x5a4>)
 8016550:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 8016554:	f7ec f9b5 	bl	80028c2 <cJSON_GetObjectItem>
 8016558:	4603      	mov	r3, r0
 801655a:	695b      	ldr	r3, [r3, #20]
 801655c:	b2da      	uxtb	r2, r3
 801655e:	4b1b      	ldr	r3, [pc, #108]	@ (80165cc <GetSetingsConfig+0x56c>)
 8016560:	f883 20c6 	strb.w	r2, [r3, #198]	@ 0xc6
			SetSettings.macaddr3 = cJSON_GetObjectItem(root_obj, "macaddr3")->valueint;
 8016564:	4928      	ldr	r1, [pc, #160]	@ (8016608 <GetSetingsConfig+0x5a8>)
 8016566:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 801656a:	f7ec f9aa 	bl	80028c2 <cJSON_GetObjectItem>
 801656e:	4603      	mov	r3, r0
 8016570:	695b      	ldr	r3, [r3, #20]
 8016572:	b2da      	uxtb	r2, r3
 8016574:	4b15      	ldr	r3, [pc, #84]	@ (80165cc <GetSetingsConfig+0x56c>)
 8016576:	f883 20c7 	strb.w	r2, [r3, #199]	@ 0xc7
			SetSettings.macaddr4 = cJSON_GetObjectItem(root_obj, "macaddr4")->valueint;
 801657a:	4924      	ldr	r1, [pc, #144]	@ (801660c <GetSetingsConfig+0x5ac>)
 801657c:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 8016580:	f7ec f99f 	bl	80028c2 <cJSON_GetObjectItem>
 8016584:	4603      	mov	r3, r0
 8016586:	695b      	ldr	r3, [r3, #20]
 8016588:	b2da      	uxtb	r2, r3
 801658a:	4b10      	ldr	r3, [pc, #64]	@ (80165cc <GetSetingsConfig+0x56c>)
 801658c:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
			SetSettings.macaddr5 = cJSON_GetObjectItem(root_obj, "macaddr5")->valueint;
 8016590:	491f      	ldr	r1, [pc, #124]	@ (8016610 <GetSetingsConfig+0x5b0>)
 8016592:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 8016596:	f7ec f994 	bl	80028c2 <cJSON_GetObjectItem>
 801659a:	4603      	mov	r3, r0
 801659c:	695b      	ldr	r3, [r3, #20]
 801659e:	b2da      	uxtb	r2, r3
 80165a0:	4b0a      	ldr	r3, [pc, #40]	@ (80165cc <GetSetingsConfig+0x56c>)
 80165a2:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9

			cJSON_Delete(root_obj);
 80165a6:	f8d7 0420 	ldr.w	r0, [r7, #1056]	@ 0x420
 80165aa:	f7ea fb17 	bl	8000bdc <cJSON_Delete>
			memset(fsbuffer, '\0', sizeof(fsbuffer));
 80165ae:	1d3b      	adds	r3, r7, #4
 80165b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80165b4:	2100      	movs	r1, #0
 80165b6:	4618      	mov	r0, r3
 80165b8:	f015 faa8 	bl	802bb0c <memset>
			f_close(&USBHFile);
 80165bc:	4815      	ldr	r0, [pc, #84]	@ (8016614 <GetSetingsConfig+0x5b4>)
 80165be:	f00f fcf0 	bl	8025fa2 <f_close>
		}
	}
}
 80165c2:	bf00      	nop
 80165c4:	f507 6785 	add.w	r7, r7, #1064	@ 0x428
 80165c8:	46bd      	mov	sp, r7
 80165ca:	bd80      	pop	{r7, pc}
 80165cc:	2000de80 	.word	0x2000de80
 80165d0:	080312c4 	.word	0x080312c4
 80165d4:	080312d0 	.word	0x080312d0
 80165d8:	080312dc 	.word	0x080312dc
 80165dc:	080312e8 	.word	0x080312e8
 80165e0:	080312f4 	.word	0x080312f4
 80165e4:	08031300 	.word	0x08031300
 80165e8:	0803130c 	.word	0x0803130c
 80165ec:	08031318 	.word	0x08031318
 80165f0:	08031324 	.word	0x08031324
 80165f4:	08031330 	.word	0x08031330
 80165f8:	0803133c 	.word	0x0803133c
 80165fc:	08031348 	.word	0x08031348
 8016600:	08031354 	.word	0x08031354
 8016604:	08031360 	.word	0x08031360
 8016608:	0803136c 	.word	0x0803136c
 801660c:	08031378 	.word	0x08031378
 8016610:	08031384 	.word	0x08031384
 8016614:	2001c07c 	.word	0x2001c07c

08016618 <GetCronConfig>:
// если файл существует, открываем для чтения.
void GetCronConfig() {
 8016618:	b590      	push	{r4, r7, lr}
 801661a:	b08d      	sub	sp, #52	@ 0x34
 801661c:	af00      	add	r7, sp, #0
	FILINFO finfo;
	cJSON *root_obj = NULL;
 801661e:	2300      	movs	r3, #0
 8016620:	62bb      	str	r3, [r7, #40]	@ 0x28
	FRESULT fresult;
	UINT Byteswritten; // File read/write count

	fresult = f_stat("cron.ini", &finfo);
 8016622:	f107 0308 	add.w	r3, r7, #8
 8016626:	4619      	mov	r1, r3
 8016628:	4846      	ldr	r0, [pc, #280]	@ (8016744 <GetCronConfig+0x12c>)
 801662a:	f00f fce9 	bl	8026000 <f_stat>
 801662e:	4603      	mov	r3, r0
 8016630:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (fresult == FR_OK) {
 8016634:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016638:	2b00      	cmp	r3, #0
 801663a:	d17e      	bne.n	801673a <GetCronConfig+0x122>
		// если файл существует, открываем его
		if (f_open(&USBHFile, (const TCHAR*) "cron.ini", FA_READ) == FR_OK) {
 801663c:	2201      	movs	r2, #1
 801663e:	4941      	ldr	r1, [pc, #260]	@ (8016744 <GetCronConfig+0x12c>)
 8016640:	4841      	ldr	r0, [pc, #260]	@ (8016748 <GetCronConfig+0x130>)
 8016642:	f00e ff05 	bl	8025450 <f_open>
 8016646:	4603      	mov	r3, r0
 8016648:	2b00      	cmp	r3, #0
 801664a:	d176      	bne.n	801673a <GetCronConfig+0x122>

			fresult = f_read(&USBHFile, fsbuffer, sizeof(fsbuffer), &Byteswritten);
 801664c:	1d3b      	adds	r3, r7, #4
 801664e:	f246 329c 	movw	r2, #25500	@ 0x639c
 8016652:	493e      	ldr	r1, [pc, #248]	@ (801674c <GetCronConfig+0x134>)
 8016654:	483c      	ldr	r0, [pc, #240]	@ (8016748 <GetCronConfig+0x130>)
 8016656:	f00f f8ca 	bl	80257ee <f_read>
 801665a:	4603      	mov	r3, r0
 801665c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			printf("CRON file EXISTS! \r\n");
 8016660:	483b      	ldr	r0, [pc, #236]	@ (8016750 <GetCronConfig+0x138>)
 8016662:	f015 f8fd 	bl	802b860 <puts>
			root_obj = cJSON_Parse(fsbuffer);
 8016666:	4839      	ldr	r0, [pc, #228]	@ (801674c <GetCronConfig+0x134>)
 8016668:	f7eb fab2 	bl	8001bd0 <cJSON_Parse>
 801666c:	62b8      	str	r0, [r7, #40]	@ 0x28

			for (int i = 0; i < cJSON_GetArraySize(root_obj); i++) {
 801666e:	2300      	movs	r3, #0
 8016670:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016672:	e04f      	b.n	8016714 <GetCronConfig+0xfc>
				cJSON *cron_item = cJSON_GetArrayItem(root_obj, i);
 8016674:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016676:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016678:	f7ec f8c7 	bl	800280a <cJSON_GetArrayItem>
 801667c:	6238      	str	r0, [r7, #32]

				strcpy(dbCrontxt[i].cron, cJSON_GetObjectItem(cron_item, "cron")->valuestring);
 801667e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016680:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 8016684:	fb02 f303 	mul.w	r3, r2, r3
 8016688:	4a32      	ldr	r2, [pc, #200]	@ (8016754 <GetCronConfig+0x13c>)
 801668a:	189c      	adds	r4, r3, r2
 801668c:	4932      	ldr	r1, [pc, #200]	@ (8016758 <GetCronConfig+0x140>)
 801668e:	6a38      	ldr	r0, [r7, #32]
 8016690:	f7ec f917 	bl	80028c2 <cJSON_GetObjectItem>
 8016694:	4603      	mov	r3, r0
 8016696:	691b      	ldr	r3, [r3, #16]
 8016698:	4619      	mov	r1, r3
 801669a:	4620      	mov	r0, r4
 801669c:	f015 ff63 	bl	802c566 <strcpy>
				strcpy(dbCrontxt[i].activ, cJSON_GetObjectItem(cron_item, "activ")->valuestring);
 80166a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166a2:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 80166a6:	fb02 f303 	mul.w	r3, r2, r3
 80166aa:	3320      	adds	r3, #32
 80166ac:	4a29      	ldr	r2, [pc, #164]	@ (8016754 <GetCronConfig+0x13c>)
 80166ae:	4413      	add	r3, r2
 80166b0:	1cdc      	adds	r4, r3, #3
 80166b2:	492a      	ldr	r1, [pc, #168]	@ (801675c <GetCronConfig+0x144>)
 80166b4:	6a38      	ldr	r0, [r7, #32]
 80166b6:	f7ec f904 	bl	80028c2 <cJSON_GetObjectItem>
 80166ba:	4603      	mov	r3, r0
 80166bc:	691b      	ldr	r3, [r3, #16]
 80166be:	4619      	mov	r1, r3
 80166c0:	4620      	mov	r0, r4
 80166c2:	f015 ff50 	bl	802c566 <strcpy>
				dbCrontxt[i].ptime = cJSON_GetObjectItem(cron_item, "ptime")->valueint;
 80166c6:	4926      	ldr	r1, [pc, #152]	@ (8016760 <GetCronConfig+0x148>)
 80166c8:	6a38      	ldr	r0, [r7, #32]
 80166ca:	f7ec f8fa 	bl	80028c2 <cJSON_GetObjectItem>
 80166ce:	4603      	mov	r3, r0
 80166d0:	695b      	ldr	r3, [r3, #20]
 80166d2:	4618      	mov	r0, r3
 80166d4:	4a1f      	ldr	r2, [pc, #124]	@ (8016754 <GetCronConfig+0x13c>)
 80166d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166d8:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80166dc:	fb01 f303 	mul.w	r3, r1, r3
 80166e0:	4413      	add	r3, r2
 80166e2:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80166e6:	6018      	str	r0, [r3, #0]
				strcpy(dbCrontxt[i].info, cJSON_GetObjectItem(cron_item, "info")->valuestring);
 80166e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166ea:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 80166ee:	fb02 f303 	mul.w	r3, r2, r3
 80166f2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80166f6:	4a17      	ldr	r2, [pc, #92]	@ (8016754 <GetCronConfig+0x13c>)
 80166f8:	189c      	adds	r4, r3, r2
 80166fa:	491a      	ldr	r1, [pc, #104]	@ (8016764 <GetCronConfig+0x14c>)
 80166fc:	6a38      	ldr	r0, [r7, #32]
 80166fe:	f7ec f8e0 	bl	80028c2 <cJSON_GetObjectItem>
 8016702:	4603      	mov	r3, r0
 8016704:	691b      	ldr	r3, [r3, #16]
 8016706:	4619      	mov	r1, r3
 8016708:	4620      	mov	r0, r4
 801670a:	f015 ff2c 	bl	802c566 <strcpy>
			for (int i = 0; i < cJSON_GetArraySize(root_obj); i++) {
 801670e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016710:	3301      	adds	r3, #1
 8016712:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016714:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016716:	f7ec f834 	bl	8002782 <cJSON_GetArraySize>
 801671a:	4602      	mov	r2, r0
 801671c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801671e:	4293      	cmp	r3, r2
 8016720:	dba8      	blt.n	8016674 <GetCronConfig+0x5c>

				//SetSettings.check_mqtt = cJSON_GetObjectItem(root_obj, "check_mqtt")->valueint;

			}
			cJSON_Delete(root_obj);
 8016722:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016724:	f7ea fa5a 	bl	8000bdc <cJSON_Delete>
			memset(fsbuffer, '\0', sizeof(fsbuffer));
 8016728:	f246 329c 	movw	r2, #25500	@ 0x639c
 801672c:	2100      	movs	r1, #0
 801672e:	4807      	ldr	r0, [pc, #28]	@ (801674c <GetCronConfig+0x134>)
 8016730:	f015 f9ec 	bl	802bb0c <memset>
			f_close(&USBHFile);
 8016734:	4804      	ldr	r0, [pc, #16]	@ (8016748 <GetCronConfig+0x130>)
 8016736:	f00f fc34 	bl	8025fa2 <f_close>
		}
	}
}
 801673a:	bf00      	nop
 801673c:	3734      	adds	r7, #52	@ 0x34
 801673e:	46bd      	mov	sp, r7
 8016740:	bd90      	pop	{r4, r7, pc}
 8016742:	bf00      	nop
 8016744:	080313f0 	.word	0x080313f0
 8016748:	2001c07c 	.word	0x2001c07c
 801674c:	20014c48 	.word	0x20014c48
 8016750:	080313fc 	.word	0x080313fc
 8016754:	2000df50 	.word	0x2000df50
 8016758:	08031410 	.word	0x08031410
 801675c:	08031418 	.word	0x08031418
 8016760:	08031420 	.word	0x08031420
 8016764:	08031428 	.word	0x08031428

08016768 <SetCronConfig>:

// Если файл не существует, создаем его и записываем данные
void SetCronConfig() {
 8016768:	b580      	push	{r7, lr}
 801676a:	b08c      	sub	sp, #48	@ 0x30
 801676c:	af00      	add	r7, sp, #0
	FILINFO finfo;
	cJSON *root_obj = NULL;
 801676e:	2300      	movs	r3, #0
 8016770:	62bb      	str	r3, [r7, #40]	@ 0x28
	cJSON *fld = NULL;
 8016772:	2300      	movs	r3, #0
 8016774:	627b      	str	r3, [r7, #36]	@ 0x24
	UINT Byteswritten; // File read/write count
	FRESULT fresult;

	fresult = f_stat("cron.ini", &finfo);
 8016776:	1d3b      	adds	r3, r7, #4
 8016778:	4619      	mov	r1, r3
 801677a:	4841      	ldr	r0, [pc, #260]	@ (8016880 <SetCronConfig+0x118>)
 801677c:	f00f fc40 	bl	8026000 <f_stat>
 8016780:	4603      	mov	r3, r0
 8016782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	char *out_str = NULL;
 8016786:	2300      	movs	r3, #0
 8016788:	61fb      	str	r3, [r7, #28]
	int i = 0;
 801678a:	2300      	movs	r3, #0
 801678c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (f_open(&USBHFile, (const TCHAR*) "cron.ini",
 801678e:	220a      	movs	r2, #10
 8016790:	493b      	ldr	r1, [pc, #236]	@ (8016880 <SetCronConfig+0x118>)
 8016792:	483c      	ldr	r0, [pc, #240]	@ (8016884 <SetCronConfig+0x11c>)
 8016794:	f00e fe5c 	bl	8025450 <f_open>
 8016798:	4603      	mov	r3, r0
 801679a:	2b00      	cmp	r3, #0
 801679c:	d168      	bne.n	8016870 <SetCronConfig+0x108>
	FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
		// Запись JSON в файл
		printf("Write CRON in to file. \r\n");
 801679e:	483a      	ldr	r0, [pc, #232]	@ (8016888 <SetCronConfig+0x120>)
 80167a0:	f015 f85e 	bl	802b860 <puts>

		root_obj = cJSON_CreateArray();
 80167a4:	f7ec fa08 	bl	8002bb8 <cJSON_CreateArray>
 80167a8:	62b8      	str	r0, [r7, #40]	@ 0x28
		fld = cJSON_CreateObject();
 80167aa:	f7ec fa19 	bl	8002be0 <cJSON_CreateObject>
 80167ae:	6278      	str	r0, [r7, #36]	@ 0x24

		for (i = 0; i < MAXSIZE; i++) {
 80167b0:	2300      	movs	r3, #0
 80167b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80167b4:	e037      	b.n	8016826 <SetCronConfig+0xbe>
			cJSON_AddItemToArray(root_obj, fld = cJSON_CreateObject());
 80167b6:	f7ec fa13 	bl	8002be0 <cJSON_CreateObject>
 80167ba:	6278      	str	r0, [r7, #36]	@ 0x24
 80167bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80167be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80167c0:	f7ec f8d5 	bl	800296e <cJSON_AddItemToArray>

			cJSON_AddStringToObject(fld, "cron", dbCrontxt[i].cron);
 80167c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167c6:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 80167ca:	fb02 f303 	mul.w	r3, r2, r3
 80167ce:	4a2f      	ldr	r2, [pc, #188]	@ (801688c <SetCronConfig+0x124>)
 80167d0:	4413      	add	r3, r2
 80167d2:	461a      	mov	r2, r3
 80167d4:	492e      	ldr	r1, [pc, #184]	@ (8016890 <SetCronConfig+0x128>)
 80167d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80167d8:	f7ec f95c 	bl	8002a94 <cJSON_AddStringToObject>
			cJSON_AddStringToObject(fld, "activ", dbCrontxt[i].activ);
 80167dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167de:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 80167e2:	fb02 f303 	mul.w	r3, r2, r3
 80167e6:	3320      	adds	r3, #32
 80167e8:	4a28      	ldr	r2, [pc, #160]	@ (801688c <SetCronConfig+0x124>)
 80167ea:	4413      	add	r3, r2
 80167ec:	3303      	adds	r3, #3
 80167ee:	461a      	mov	r2, r3
 80167f0:	4928      	ldr	r1, [pc, #160]	@ (8016894 <SetCronConfig+0x12c>)
 80167f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80167f4:	f7ec f94e 	bl	8002a94 <cJSON_AddStringToObject>
			cJSON_AddNumberToObject(fld, "ptime", 0); //????????????????????????????????
 80167f8:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8016878 <SetCronConfig+0x110>
 80167fc:	4926      	ldr	r1, [pc, #152]	@ (8016898 <SetCronConfig+0x130>)
 80167fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016800:	f7ec f924 	bl	8002a4c <cJSON_AddNumberToObject>
			cJSON_AddStringToObject(fld, "info", dbCrontxt[i].info);
 8016804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016806:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 801680a:	fb02 f303 	mul.w	r3, r2, r3
 801680e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8016812:	4a1e      	ldr	r2, [pc, #120]	@ (801688c <SetCronConfig+0x124>)
 8016814:	4413      	add	r3, r2
 8016816:	461a      	mov	r2, r3
 8016818:	4920      	ldr	r1, [pc, #128]	@ (801689c <SetCronConfig+0x134>)
 801681a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801681c:	f7ec f93a 	bl	8002a94 <cJSON_AddStringToObject>
		for (i = 0; i < MAXSIZE; i++) {
 8016820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016822:	3301      	adds	r3, #1
 8016824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016828:	2b09      	cmp	r3, #9
 801682a:	ddc4      	ble.n	80167b6 <SetCronConfig+0x4e>

		}
		out_str = cJSON_PrintUnformatted(root_obj);
 801682c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801682e:	f7eb fa61 	bl	8001cf4 <cJSON_PrintUnformatted>
 8016832:	61f8      	str	r0, [r7, #28]
		fresult = f_write(&USBHFile, (const void*) out_str, strlen(out_str), &Byteswritten);
 8016834:	69f8      	ldr	r0, [r7, #28]
 8016836:	f7e9 fd63 	bl	8000300 <strlen>
 801683a:	4602      	mov	r2, r0
 801683c:	463b      	mov	r3, r7
 801683e:	69f9      	ldr	r1, [r7, #28]
 8016840:	4810      	ldr	r0, [pc, #64]	@ (8016884 <SetCronConfig+0x11c>)
 8016842:	f00f f962 	bl	8025b0a <f_write>
 8016846:	4603      	mov	r3, r0
 8016848:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		free(out_str);
 801684c:	69f8      	ldr	r0, [r7, #28]
 801684e:	f013 ff29 	bl	802a6a4 <free>

		if(fresult == FR_OK){

		}
		printf("f_open! cron.ini \r\n");
 8016852:	4813      	ldr	r0, [pc, #76]	@ (80168a0 <SetCronConfig+0x138>)
 8016854:	f015 f804 	bl	802b860 <puts>

		cJSON_Delete(root_obj);
 8016858:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801685a:	f7ea f9bf 	bl	8000bdc <cJSON_Delete>
		memset(fsbuffer, '\0', sizeof(fsbuffer));
 801685e:	f246 329c 	movw	r2, #25500	@ 0x639c
 8016862:	2100      	movs	r1, #0
 8016864:	480f      	ldr	r0, [pc, #60]	@ (80168a4 <SetCronConfig+0x13c>)
 8016866:	f015 f951 	bl	802bb0c <memset>
		f_close(&USBHFile);
 801686a:	4806      	ldr	r0, [pc, #24]	@ (8016884 <SetCronConfig+0x11c>)
 801686c:	f00f fb99 	bl	8025fa2 <f_close>
	}



}
 8016870:	bf00      	nop
 8016872:	3730      	adds	r7, #48	@ 0x30
 8016874:	46bd      	mov	sp, r7
 8016876:	bd80      	pop	{r7, pc}
	...
 8016880:	080313f0 	.word	0x080313f0
 8016884:	2001c07c 	.word	0x2001c07c
 8016888:	08031430 	.word	0x08031430
 801688c:	2000df50 	.word	0x2000df50
 8016890:	08031410 	.word	0x08031410
 8016894:	08031418 	.word	0x08031418
 8016898:	08031420 	.word	0x08031420
 801689c:	08031428 	.word	0x08031428
 80168a0:	0803144c 	.word	0x0803144c
 80168a4:	20014c48 	.word	0x20014c48

080168a8 <GetPinConfig>:
// если файл "pins.ini" существует, открываем для чтения.
void GetPinConfig() {
 80168a8:	b590      	push	{r4, r7, lr}
 80168aa:	b08d      	sub	sp, #52	@ 0x34
 80168ac:	af00      	add	r7, sp, #0

	FILINFO finfo;
	cJSON *root_obj = NULL;
 80168ae:	2300      	movs	r3, #0
 80168b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	FRESULT fresult;
	UINT Byteswritten; // File read/write count

	fresult = f_stat("pins.ini", &finfo);
 80168b2:	1d3b      	adds	r3, r7, #4
 80168b4:	4619      	mov	r1, r3
 80168b6:	4814      	ldr	r0, [pc, #80]	@ (8016908 <GetPinConfig+0x60>)
 80168b8:	f00f fba2 	bl	8026000 <f_stat>
 80168bc:	4603      	mov	r3, r0
 80168be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (fresult == FR_OK) {
 80168c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	f040 8208 	bne.w	8016cdc <GetPinConfig+0x434>
		// если файл существует, открываем его
		if (f_open(&USBHFile, (const TCHAR*) "pins.ini", FA_READ) == FR_OK) {
 80168cc:	2201      	movs	r2, #1
 80168ce:	490e      	ldr	r1, [pc, #56]	@ (8016908 <GetPinConfig+0x60>)
 80168d0:	480e      	ldr	r0, [pc, #56]	@ (801690c <GetPinConfig+0x64>)
 80168d2:	f00e fdbd 	bl	8025450 <f_open>
 80168d6:	4603      	mov	r3, r0
 80168d8:	2b00      	cmp	r3, #0
 80168da:	f040 81ff 	bne.w	8016cdc <GetPinConfig+0x434>

			fresult = f_read(&USBHFile, fsbuffer, sizeof(fsbuffer), &Byteswritten);
 80168de:	463b      	mov	r3, r7
 80168e0:	f246 329c 	movw	r2, #25500	@ 0x639c
 80168e4:	490a      	ldr	r1, [pc, #40]	@ (8016910 <GetPinConfig+0x68>)
 80168e6:	4809      	ldr	r0, [pc, #36]	@ (801690c <GetPinConfig+0x64>)
 80168e8:	f00e ff81 	bl	80257ee <f_read>
 80168ec:	4603      	mov	r3, r0
 80168ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			printf("PINS file EXISTS! \r\n");
 80168f2:	4808      	ldr	r0, [pc, #32]	@ (8016914 <GetPinConfig+0x6c>)
 80168f4:	f014 ffb4 	bl	802b860 <puts>
			root_obj = cJSON_Parse(fsbuffer);
 80168f8:	4805      	ldr	r0, [pc, #20]	@ (8016910 <GetPinConfig+0x68>)
 80168fa:	f7eb f969 	bl	8001bd0 <cJSON_Parse>
 80168fe:	62b8      	str	r0, [r7, #40]	@ 0x28

			for (int i = 0; i < cJSON_GetArraySize(root_obj); i++) {
 8016900:	2300      	movs	r3, #0
 8016902:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016904:	e1d6      	b.n	8016cb4 <GetPinConfig+0x40c>
 8016906:	bf00      	nop
 8016908:	08031460 	.word	0x08031460
 801690c:	2001c07c 	.word	0x2001c07c
 8016910:	20014c48 	.word	0x20014c48
 8016914:	0803146c 	.word	0x0803146c
				cJSON *pins_item = cJSON_GetArrayItem(root_obj, i);
 8016918:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801691a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801691c:	f7eb ff75 	bl	800280a <cJSON_GetArrayItem>
 8016920:	6238      	str	r0, [r7, #32]

				cJSON *topin = cJSON_GetObjectItem(pins_item, "topin");
 8016922:	49bd      	ldr	r1, [pc, #756]	@ (8016c18 <GetPinConfig+0x370>)
 8016924:	6a38      	ldr	r0, [r7, #32]
 8016926:	f7eb ffcc 	bl	80028c2 <cJSON_GetObjectItem>
 801692a:	61f8      	str	r0, [r7, #28]
				PinsConf[i].topin = topin->valueint;
 801692c:	69fb      	ldr	r3, [r7, #28]
 801692e:	695b      	ldr	r3, [r3, #20]
 8016930:	b2d8      	uxtb	r0, r3
 8016932:	4aba      	ldr	r2, [pc, #744]	@ (8016c1c <GetPinConfig+0x374>)
 8016934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016936:	f44f 7118 	mov.w	r1, #608	@ 0x260
 801693a:	fb01 f303 	mul.w	r3, r1, r3
 801693e:	4413      	add	r3, r2
 8016940:	4602      	mov	r2, r0
 8016942:	701a      	strb	r2, [r3, #0]

				PinsConf[i].pwm = cJSON_GetObjectItem(pins_item, "pwm")->valueint;
 8016944:	49b6      	ldr	r1, [pc, #728]	@ (8016c20 <GetPinConfig+0x378>)
 8016946:	6a38      	ldr	r0, [r7, #32]
 8016948:	f7eb ffbb 	bl	80028c2 <cJSON_GetObjectItem>
 801694c:	4603      	mov	r3, r0
 801694e:	695a      	ldr	r2, [r3, #20]
 8016950:	49b2      	ldr	r1, [pc, #712]	@ (8016c1c <GetPinConfig+0x374>)
 8016952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016954:	f44f 7018 	mov.w	r0, #608	@ 0x260
 8016958:	fb00 f303 	mul.w	r3, r0, r3
 801695c:	440b      	add	r3, r1
 801695e:	3304      	adds	r3, #4
 8016960:	601a      	str	r2, [r3, #0]
				PinsConf[i].on = cJSON_GetObjectItem(pins_item, "on")->valueint;
 8016962:	49b0      	ldr	r1, [pc, #704]	@ (8016c24 <GetPinConfig+0x37c>)
 8016964:	6a38      	ldr	r0, [r7, #32]
 8016966:	f7eb ffac 	bl	80028c2 <cJSON_GetObjectItem>
 801696a:	4603      	mov	r3, r0
 801696c:	695b      	ldr	r3, [r3, #20]
 801696e:	b2d8      	uxtb	r0, r3
 8016970:	4aaa      	ldr	r2, [pc, #680]	@ (8016c1c <GetPinConfig+0x374>)
 8016972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016974:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016978:	fb01 f303 	mul.w	r3, r1, r3
 801697c:	4413      	add	r3, r2
 801697e:	3308      	adds	r3, #8
 8016980:	4602      	mov	r2, r0
 8016982:	701a      	strb	r2, [r3, #0]
				PinsConf[i].istate = cJSON_GetObjectItem(pins_item, "istate")->valueint;
 8016984:	49a8      	ldr	r1, [pc, #672]	@ (8016c28 <GetPinConfig+0x380>)
 8016986:	6a38      	ldr	r0, [r7, #32]
 8016988:	f7eb ff9b 	bl	80028c2 <cJSON_GetObjectItem>
 801698c:	4603      	mov	r3, r0
 801698e:	695b      	ldr	r3, [r3, #20]
 8016990:	b2d8      	uxtb	r0, r3
 8016992:	4aa2      	ldr	r2, [pc, #648]	@ (8016c1c <GetPinConfig+0x374>)
 8016994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016996:	f44f 7118 	mov.w	r1, #608	@ 0x260
 801699a:	fb01 f303 	mul.w	r3, r1, r3
 801699e:	4413      	add	r3, r2
 80169a0:	3309      	adds	r3, #9
 80169a2:	4602      	mov	r2, r0
 80169a4:	701a      	strb	r2, [r3, #0]
				PinsConf[i].dvalue = cJSON_GetObjectItem(pins_item, "dvalue")->valueint;
 80169a6:	49a1      	ldr	r1, [pc, #644]	@ (8016c2c <GetPinConfig+0x384>)
 80169a8:	6a38      	ldr	r0, [r7, #32]
 80169aa:	f7eb ff8a 	bl	80028c2 <cJSON_GetObjectItem>
 80169ae:	4603      	mov	r3, r0
 80169b0:	695a      	ldr	r2, [r3, #20]
 80169b2:	499a      	ldr	r1, [pc, #616]	@ (8016c1c <GetPinConfig+0x374>)
 80169b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169b6:	f44f 7018 	mov.w	r0, #608	@ 0x260
 80169ba:	fb00 f303 	mul.w	r3, r0, r3
 80169be:	440b      	add	r3, r1
 80169c0:	330c      	adds	r3, #12
 80169c2:	601a      	str	r2, [r3, #0]
				PinsConf[i].ponr = cJSON_GetObjectItem(pins_item, "ponr")->valueint;
 80169c4:	499a      	ldr	r1, [pc, #616]	@ (8016c30 <GetPinConfig+0x388>)
 80169c6:	6a38      	ldr	r0, [r7, #32]
 80169c8:	f7eb ff7b 	bl	80028c2 <cJSON_GetObjectItem>
 80169cc:	4603      	mov	r3, r0
 80169ce:	695b      	ldr	r3, [r3, #20]
 80169d0:	b2d8      	uxtb	r0, r3
 80169d2:	4a92      	ldr	r2, [pc, #584]	@ (8016c1c <GetPinConfig+0x374>)
 80169d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169d6:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80169da:	fb01 f303 	mul.w	r3, r1, r3
 80169de:	4413      	add	r3, r2
 80169e0:	3310      	adds	r3, #16
 80169e2:	4602      	mov	r2, r0
 80169e4:	701a      	strb	r2, [r3, #0]
				PinsConf[i].ptype = cJSON_GetObjectItem(pins_item, "ptype")->valueint;
 80169e6:	4993      	ldr	r1, [pc, #588]	@ (8016c34 <GetPinConfig+0x38c>)
 80169e8:	6a38      	ldr	r0, [r7, #32]
 80169ea:	f7eb ff6a 	bl	80028c2 <cJSON_GetObjectItem>
 80169ee:	4603      	mov	r3, r0
 80169f0:	695b      	ldr	r3, [r3, #20]
 80169f2:	b2d8      	uxtb	r0, r3
 80169f4:	4a89      	ldr	r2, [pc, #548]	@ (8016c1c <GetPinConfig+0x374>)
 80169f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169f8:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80169fc:	fb01 f303 	mul.w	r3, r1, r3
 8016a00:	4413      	add	r3, r2
 8016a02:	3311      	adds	r3, #17
 8016a04:	4602      	mov	r2, r0
 8016a06:	701a      	strb	r2, [r3, #0]
				PinsConf[i].encoderb = cJSON_GetObjectItem(pins_item, "encoderb")->valueint;
 8016a08:	498b      	ldr	r1, [pc, #556]	@ (8016c38 <GetPinConfig+0x390>)
 8016a0a:	6a38      	ldr	r0, [r7, #32]
 8016a0c:	f7eb ff59 	bl	80028c2 <cJSON_GetObjectItem>
 8016a10:	4603      	mov	r3, r0
 8016a12:	695b      	ldr	r3, [r3, #20]
 8016a14:	b2d8      	uxtb	r0, r3
 8016a16:	4a81      	ldr	r2, [pc, #516]	@ (8016c1c <GetPinConfig+0x374>)
 8016a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a1a:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016a1e:	fb01 f303 	mul.w	r3, r1, r3
 8016a22:	4413      	add	r3, r2
 8016a24:	f203 2311 	addw	r3, r3, #529	@ 0x211
 8016a28:	4602      	mov	r2, r0
 8016a2a:	701a      	strb	r2, [r3, #0]
				PinsConf[i].hinter = cJSON_GetObjectItem(pins_item, "hinter")->valueint;
 8016a2c:	4983      	ldr	r1, [pc, #524]	@ (8016c3c <GetPinConfig+0x394>)
 8016a2e:	6a38      	ldr	r0, [r7, #32]
 8016a30:	f7eb ff47 	bl	80028c2 <cJSON_GetObjectItem>
 8016a34:	4603      	mov	r3, r0
 8016a36:	695b      	ldr	r3, [r3, #20]
 8016a38:	b2d8      	uxtb	r0, r3
 8016a3a:	4a78      	ldr	r2, [pc, #480]	@ (8016c1c <GetPinConfig+0x374>)
 8016a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a3e:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016a42:	fb01 f303 	mul.w	r3, r1, r3
 8016a46:	4413      	add	r3, r2
 8016a48:	f203 2312 	addw	r3, r3, #530	@ 0x212
 8016a4c:	4602      	mov	r2, r0
 8016a4e:	701a      	strb	r2, [r3, #0]
				PinsConf[i].repeat = cJSON_GetObjectItem(pins_item, "repeat")->valueint;
 8016a50:	497b      	ldr	r1, [pc, #492]	@ (8016c40 <GetPinConfig+0x398>)
 8016a52:	6a38      	ldr	r0, [r7, #32]
 8016a54:	f7eb ff35 	bl	80028c2 <cJSON_GetObjectItem>
 8016a58:	4603      	mov	r3, r0
 8016a5a:	695b      	ldr	r3, [r3, #20]
 8016a5c:	b2d8      	uxtb	r0, r3
 8016a5e:	4a6f      	ldr	r2, [pc, #444]	@ (8016c1c <GetPinConfig+0x374>)
 8016a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a62:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016a66:	fb01 f303 	mul.w	r3, r1, r3
 8016a6a:	4413      	add	r3, r2
 8016a6c:	f203 2313 	addw	r3, r3, #531	@ 0x213
 8016a70:	4602      	mov	r2, r0
 8016a72:	701a      	strb	r2, [r3, #0]
				PinsConf[i].rinter = cJSON_GetObjectItem(pins_item, "rinter")->valueint;
 8016a74:	4973      	ldr	r1, [pc, #460]	@ (8016c44 <GetPinConfig+0x39c>)
 8016a76:	6a38      	ldr	r0, [r7, #32]
 8016a78:	f7eb ff23 	bl	80028c2 <cJSON_GetObjectItem>
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	695b      	ldr	r3, [r3, #20]
 8016a80:	b2d8      	uxtb	r0, r3
 8016a82:	4a66      	ldr	r2, [pc, #408]	@ (8016c1c <GetPinConfig+0x374>)
 8016a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a86:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016a8a:	fb01 f303 	mul.w	r3, r1, r3
 8016a8e:	4413      	add	r3, r2
 8016a90:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8016a94:	4602      	mov	r2, r0
 8016a96:	701a      	strb	r2, [r3, #0]
				PinsConf[i].dcinter = cJSON_GetObjectItem(pins_item, "dcinter")->valueint;
 8016a98:	496b      	ldr	r1, [pc, #428]	@ (8016c48 <GetPinConfig+0x3a0>)
 8016a9a:	6a38      	ldr	r0, [r7, #32]
 8016a9c:	f7eb ff11 	bl	80028c2 <cJSON_GetObjectItem>
 8016aa0:	4603      	mov	r3, r0
 8016aa2:	695b      	ldr	r3, [r3, #20]
 8016aa4:	b2d8      	uxtb	r0, r3
 8016aa6:	4a5d      	ldr	r2, [pc, #372]	@ (8016c1c <GetPinConfig+0x374>)
 8016aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016aaa:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016aae:	fb01 f303 	mul.w	r3, r1, r3
 8016ab2:	4413      	add	r3, r2
 8016ab4:	f203 2315 	addw	r3, r3, #533	@ 0x215
 8016ab8:	4602      	mov	r2, r0
 8016aba:	701a      	strb	r2, [r3, #0]

				PinsConf[i].sclick = cJSON_GetObjectItem(pins_item, "sclick")->valueint;
 8016abc:	4963      	ldr	r1, [pc, #396]	@ (8016c4c <GetPinConfig+0x3a4>)
 8016abe:	6a38      	ldr	r0, [r7, #32]
 8016ac0:	f7eb feff 	bl	80028c2 <cJSON_GetObjectItem>
 8016ac4:	4603      	mov	r3, r0
 8016ac6:	695b      	ldr	r3, [r3, #20]
 8016ac8:	b2d8      	uxtb	r0, r3
 8016aca:	4a54      	ldr	r2, [pc, #336]	@ (8016c1c <GetPinConfig+0x374>)
 8016acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ace:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016ad2:	fb01 f303 	mul.w	r3, r1, r3
 8016ad6:	4413      	add	r3, r2
 8016ad8:	3312      	adds	r3, #18
 8016ada:	4602      	mov	r2, r0
 8016adc:	701a      	strb	r2, [r3, #0]
				strcpy(PinsConf[i].dclick,cJSON_GetObjectItem(pins_item, "dclick")->valuestring);
 8016ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ae0:	f44f 7218 	mov.w	r2, #608	@ 0x260
 8016ae4:	fb02 f303 	mul.w	r3, r2, r3
 8016ae8:	3310      	adds	r3, #16
 8016aea:	4a4c      	ldr	r2, [pc, #304]	@ (8016c1c <GetPinConfig+0x374>)
 8016aec:	4413      	add	r3, r2
 8016aee:	1cdc      	adds	r4, r3, #3
 8016af0:	4957      	ldr	r1, [pc, #348]	@ (8016c50 <GetPinConfig+0x3a8>)
 8016af2:	6a38      	ldr	r0, [r7, #32]
 8016af4:	f7eb fee5 	bl	80028c2 <cJSON_GetObjectItem>
 8016af8:	4603      	mov	r3, r0
 8016afa:	691b      	ldr	r3, [r3, #16]
 8016afc:	4619      	mov	r1, r3
 8016afe:	4620      	mov	r0, r4
 8016b00:	f015 fd31 	bl	802c566 <strcpy>
				strcpy(PinsConf[i].lpress,cJSON_GetObjectItem(pins_item, "lpress")->valuestring);
 8016b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b06:	f44f 7218 	mov.w	r2, #608	@ 0x260
 8016b0a:	fb02 f303 	mul.w	r3, r2, r3
 8016b0e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8016b12:	4a42      	ldr	r2, [pc, #264]	@ (8016c1c <GetPinConfig+0x374>)
 8016b14:	4413      	add	r3, r2
 8016b16:	1c9c      	adds	r4, r3, #2
 8016b18:	494e      	ldr	r1, [pc, #312]	@ (8016c54 <GetPinConfig+0x3ac>)
 8016b1a:	6a38      	ldr	r0, [r7, #32]
 8016b1c:	f7eb fed1 	bl	80028c2 <cJSON_GetObjectItem>
 8016b20:	4603      	mov	r3, r0
 8016b22:	691b      	ldr	r3, [r3, #16]
 8016b24:	4619      	mov	r1, r3
 8016b26:	4620      	mov	r0, r4
 8016b28:	f015 fd1d 	bl	802c566 <strcpy>

				PinsConf[i].pclick = cJSON_GetObjectItem(pins_item, "pclick")->valueint;
 8016b2c:	494a      	ldr	r1, [pc, #296]	@ (8016c58 <GetPinConfig+0x3b0>)
 8016b2e:	6a38      	ldr	r0, [r7, #32]
 8016b30:	f7eb fec7 	bl	80028c2 <cJSON_GetObjectItem>
 8016b34:	4603      	mov	r3, r0
 8016b36:	695b      	ldr	r3, [r3, #20]
 8016b38:	b2d8      	uxtb	r0, r3
 8016b3a:	4a38      	ldr	r2, [pc, #224]	@ (8016c1c <GetPinConfig+0x374>)
 8016b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b3e:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016b42:	fb01 f303 	mul.w	r3, r1, r3
 8016b46:	4413      	add	r3, r2
 8016b48:	f203 2316 	addw	r3, r3, #534	@ 0x216
 8016b4c:	4602      	mov	r2, r0
 8016b4e:	701a      	strb	r2, [r3, #0]
				strcpy(PinsConf[i].info, cJSON_GetObjectItem(pins_item, "info")->valuestring);
 8016b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b52:	f44f 7218 	mov.w	r2, #608	@ 0x260
 8016b56:	fb02 f303 	mul.w	r3, r2, r3
 8016b5a:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8016b5e:	4a2f      	ldr	r2, [pc, #188]	@ (8016c1c <GetPinConfig+0x374>)
 8016b60:	4413      	add	r3, r2
 8016b62:	1ddc      	adds	r4, r3, #7
 8016b64:	493d      	ldr	r1, [pc, #244]	@ (8016c5c <GetPinConfig+0x3b4>)
 8016b66:	6a38      	ldr	r0, [r7, #32]
 8016b68:	f7eb feab 	bl	80028c2 <cJSON_GetObjectItem>
 8016b6c:	4603      	mov	r3, r0
 8016b6e:	691b      	ldr	r3, [r3, #16]
 8016b70:	4619      	mov	r1, r3
 8016b72:	4620      	mov	r0, r4
 8016b74:	f015 fcf7 	bl	802c566 <strcpy>
				PinsConf[i].onoff = cJSON_GetObjectItem(pins_item, "onoff")->valueint;
 8016b78:	4939      	ldr	r1, [pc, #228]	@ (8016c60 <GetPinConfig+0x3b8>)
 8016b7a:	6a38      	ldr	r0, [r7, #32]
 8016b7c:	f7eb fea1 	bl	80028c2 <cJSON_GetObjectItem>
 8016b80:	4603      	mov	r3, r0
 8016b82:	695b      	ldr	r3, [r3, #20]
 8016b84:	b2d8      	uxtb	r0, r3
 8016b86:	4a25      	ldr	r2, [pc, #148]	@ (8016c1c <GetPinConfig+0x374>)
 8016b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b8a:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016b8e:	fb01 f303 	mul.w	r3, r1, r3
 8016b92:	4413      	add	r3, r2
 8016b94:	f203 2335 	addw	r3, r3, #565	@ 0x235
 8016b98:	4602      	mov	r2, r0
 8016b9a:	701a      	strb	r2, [r3, #0]
				PinsConf[i].event = cJSON_GetObjectItem(pins_item, "event")->valueint;
 8016b9c:	4931      	ldr	r1, [pc, #196]	@ (8016c64 <GetPinConfig+0x3bc>)
 8016b9e:	6a38      	ldr	r0, [r7, #32]
 8016ba0:	f7eb fe8f 	bl	80028c2 <cJSON_GetObjectItem>
 8016ba4:	4603      	mov	r3, r0
 8016ba6:	695b      	ldr	r3, [r3, #20]
 8016ba8:	b2d8      	uxtb	r0, r3
 8016baa:	4a1c      	ldr	r2, [pc, #112]	@ (8016c1c <GetPinConfig+0x374>)
 8016bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016bae:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016bb2:	fb01 f303 	mul.w	r3, r1, r3
 8016bb6:	4413      	add	r3, r2
 8016bb8:	f203 2336 	addw	r3, r3, #566	@ 0x236
 8016bbc:	4602      	mov	r2, r0
 8016bbe:	701a      	strb	r2, [r3, #0]
				PinsConf[i].act = cJSON_GetObjectItem(pins_item, "act")->valueint;
 8016bc0:	4929      	ldr	r1, [pc, #164]	@ (8016c68 <GetPinConfig+0x3c0>)
 8016bc2:	6a38      	ldr	r0, [r7, #32]
 8016bc4:	f7eb fe7d 	bl	80028c2 <cJSON_GetObjectItem>
 8016bc8:	4603      	mov	r3, r0
 8016bca:	695b      	ldr	r3, [r3, #20]
 8016bcc:	b2d8      	uxtb	r0, r3
 8016bce:	4a13      	ldr	r2, [pc, #76]	@ (8016c1c <GetPinConfig+0x374>)
 8016bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016bd2:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016bd6:	fb01 f303 	mul.w	r3, r1, r3
 8016bda:	4413      	add	r3, r2
 8016bdc:	f203 2337 	addw	r3, r3, #567	@ 0x237
 8016be0:	4602      	mov	r2, r0
 8016be2:	701a      	strb	r2, [r3, #0]
				PinsConf[i].parametr = cJSON_GetObjectItem(pins_item, "parametr")->valueint;
 8016be4:	4921      	ldr	r1, [pc, #132]	@ (8016c6c <GetPinConfig+0x3c4>)
 8016be6:	6a38      	ldr	r0, [r7, #32]
 8016be8:	f7eb fe6b 	bl	80028c2 <cJSON_GetObjectItem>
 8016bec:	4603      	mov	r3, r0
 8016bee:	695b      	ldr	r3, [r3, #20]
 8016bf0:	b218      	sxth	r0, r3
 8016bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8016c1c <GetPinConfig+0x374>)
 8016bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016bf6:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016bfa:	fb01 f303 	mul.w	r3, r1, r3
 8016bfe:	4413      	add	r3, r2
 8016c00:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8016c04:	4602      	mov	r2, r0
 8016c06:	801a      	strh	r2, [r3, #0]
				PinsConf[i].timeout = cJSON_GetObjectItem(pins_item, "timeout")->valueint;
 8016c08:	4919      	ldr	r1, [pc, #100]	@ (8016c70 <GetPinConfig+0x3c8>)
 8016c0a:	6a38      	ldr	r0, [r7, #32]
 8016c0c:	f7eb fe59 	bl	80028c2 <cJSON_GetObjectItem>
 8016c10:	4603      	mov	r3, r0
 8016c12:	695a      	ldr	r2, [r3, #20]
 8016c14:	e02e      	b.n	8016c74 <GetPinConfig+0x3cc>
 8016c16:	bf00      	nop
 8016c18:	08031480 	.word	0x08031480
 8016c1c:	2000066c 	.word	0x2000066c
 8016c20:	08031488 	.word	0x08031488
 8016c24:	0803148c 	.word	0x0803148c
 8016c28:	08031490 	.word	0x08031490
 8016c2c:	08031498 	.word	0x08031498
 8016c30:	080314a0 	.word	0x080314a0
 8016c34:	080314a8 	.word	0x080314a8
 8016c38:	080314b0 	.word	0x080314b0
 8016c3c:	080314bc 	.word	0x080314bc
 8016c40:	080314c4 	.word	0x080314c4
 8016c44:	080314cc 	.word	0x080314cc
 8016c48:	080314d4 	.word	0x080314d4
 8016c4c:	080314dc 	.word	0x080314dc
 8016c50:	080314e4 	.word	0x080314e4
 8016c54:	080314ec 	.word	0x080314ec
 8016c58:	080314f4 	.word	0x080314f4
 8016c5c:	08031428 	.word	0x08031428
 8016c60:	080314fc 	.word	0x080314fc
 8016c64:	08031504 	.word	0x08031504
 8016c68:	0803150c 	.word	0x0803150c
 8016c6c:	08031510 	.word	0x08031510
 8016c70:	0803151c 	.word	0x0803151c
 8016c74:	491b      	ldr	r1, [pc, #108]	@ (8016ce4 <GetPinConfig+0x43c>)
 8016c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c78:	f44f 7018 	mov.w	r0, #608	@ 0x260
 8016c7c:	fb00 f303 	mul.w	r3, r0, r3
 8016c80:	440b      	add	r3, r1
 8016c82:	f503 730f 	add.w	r3, r3, #572	@ 0x23c
 8016c86:	601a      	str	r2, [r3, #0]
				strcpy(PinsConf[i].condit, cJSON_GetObjectItem(pins_item, "condit")->valuestring);
 8016c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c8a:	f44f 7218 	mov.w	r2, #608	@ 0x260
 8016c8e:	fb02 f303 	mul.w	r3, r2, r3
 8016c92:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8016c96:	4a13      	ldr	r2, [pc, #76]	@ (8016ce4 <GetPinConfig+0x43c>)
 8016c98:	189c      	adds	r4, r3, r2
 8016c9a:	4913      	ldr	r1, [pc, #76]	@ (8016ce8 <GetPinConfig+0x440>)
 8016c9c:	6a38      	ldr	r0, [r7, #32]
 8016c9e:	f7eb fe10 	bl	80028c2 <cJSON_GetObjectItem>
 8016ca2:	4603      	mov	r3, r0
 8016ca4:	691b      	ldr	r3, [r3, #16]
 8016ca6:	4619      	mov	r1, r3
 8016ca8:	4620      	mov	r0, r4
 8016caa:	f015 fc5c 	bl	802c566 <strcpy>
			for (int i = 0; i < cJSON_GetArraySize(root_obj); i++) {
 8016cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cb0:	3301      	adds	r3, #1
 8016cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016cb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016cb6:	f7eb fd64 	bl	8002782 <cJSON_GetArraySize>
 8016cba:	4602      	mov	r2, r0
 8016cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cbe:	4293      	cmp	r3, r2
 8016cc0:	f6ff ae2a 	blt.w	8016918 <GetPinConfig+0x70>
			}

			cJSON_Delete(root_obj);
 8016cc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016cc6:	f7e9 ff89 	bl	8000bdc <cJSON_Delete>
			memset(fsbuffer, '\0', sizeof(fsbuffer));
 8016cca:	f246 329c 	movw	r2, #25500	@ 0x639c
 8016cce:	2100      	movs	r1, #0
 8016cd0:	4806      	ldr	r0, [pc, #24]	@ (8016cec <GetPinConfig+0x444>)
 8016cd2:	f014 ff1b 	bl	802bb0c <memset>
			f_close(&USBHFile);
 8016cd6:	4806      	ldr	r0, [pc, #24]	@ (8016cf0 <GetPinConfig+0x448>)
 8016cd8:	f00f f963 	bl	8025fa2 <f_close>
		}
	}

}
 8016cdc:	bf00      	nop
 8016cde:	3734      	adds	r7, #52	@ 0x34
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	bd90      	pop	{r4, r7, pc}
 8016ce4:	2000066c 	.word	0x2000066c
 8016ce8:	08031524 	.word	0x08031524
 8016cec:	20014c48 	.word	0x20014c48
 8016cf0:	2001c07c 	.word	0x2001c07c

08016cf4 <SetPinConfig>:

// Если файл "pins.ini" не существует, создаем его и записываем данные
void SetPinConfig() {
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	b086      	sub	sp, #24
 8016cf8:	af00      	add	r7, sp, #0
//	FILINFO finfo;
	cJSON *root_obj = NULL;
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	613b      	str	r3, [r7, #16]
	cJSON *fld = NULL;
 8016cfe:	2300      	movs	r3, #0
 8016d00:	60fb      	str	r3, [r7, #12]
	UINT Byteswritten; // File read/write count
	FRESULT fresult;
	char *out_str = NULL;
 8016d02:	2300      	movs	r3, #0
 8016d04:	60bb      	str	r3, [r7, #8]
	int i = 0;
 8016d06:	2300      	movs	r3, #0
 8016d08:	617b      	str	r3, [r7, #20]
	if (f_open(&USBHFile, (const TCHAR*) "pins.ini",FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
 8016d0a:	220a      	movs	r2, #10
 8016d0c:	4908      	ldr	r1, [pc, #32]	@ (8016d30 <SetPinConfig+0x3c>)
 8016d0e:	4809      	ldr	r0, [pc, #36]	@ (8016d34 <SetPinConfig+0x40>)
 8016d10:	f00e fb9e 	bl	8025450 <f_open>
 8016d14:	4603      	mov	r3, r0
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	f040 8216 	bne.w	8017148 <SetPinConfig+0x454>
		// Запись JSON в файл

		root_obj = cJSON_CreateArray();
 8016d1c:	f7eb ff4c 	bl	8002bb8 <cJSON_CreateArray>
 8016d20:	6138      	str	r0, [r7, #16]
		fld = cJSON_CreateObject();
 8016d22:	f7eb ff5d 	bl	8002be0 <cJSON_CreateObject>
 8016d26:	60f8      	str	r0, [r7, #12]

		for (i = 0; i < NUMPIN; i++)
 8016d28:	2300      	movs	r3, #0
 8016d2a:	617b      	str	r3, [r7, #20]
 8016d2c:	e1ea      	b.n	8017104 <SetPinConfig+0x410>
 8016d2e:	bf00      	nop
 8016d30:	08031460 	.word	0x08031460
 8016d34:	2001c07c 	.word	0x2001c07c
		{
			cJSON_AddItemToArray(root_obj, fld = cJSON_CreateObject());
 8016d38:	f7eb ff52 	bl	8002be0 <cJSON_CreateObject>
 8016d3c:	60f8      	str	r0, [r7, #12]
 8016d3e:	68f9      	ldr	r1, [r7, #12]
 8016d40:	6938      	ldr	r0, [r7, #16]
 8016d42:	f7eb fe14 	bl	800296e <cJSON_AddItemToArray>

			cJSON_AddNumberToObject(fld, "topin", PinsConf[i].topin);
 8016d46:	4acb      	ldr	r2, [pc, #812]	@ (8017074 <SetPinConfig+0x380>)
 8016d48:	697b      	ldr	r3, [r7, #20]
 8016d4a:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016d4e:	fb01 f303 	mul.w	r3, r1, r3
 8016d52:	4413      	add	r3, r2
 8016d54:	781b      	ldrb	r3, [r3, #0]
 8016d56:	ee07 3a90 	vmov	s15, r3
 8016d5a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016d5e:	eeb0 0b47 	vmov.f64	d0, d7
 8016d62:	49c5      	ldr	r1, [pc, #788]	@ (8017078 <SetPinConfig+0x384>)
 8016d64:	68f8      	ldr	r0, [r7, #12]
 8016d66:	f7eb fe71 	bl	8002a4c <cJSON_AddNumberToObject>
			cJSON_AddNumberToObject(fld, "pwm", PinsConf[i].pwm);
 8016d6a:	4ac2      	ldr	r2, [pc, #776]	@ (8017074 <SetPinConfig+0x380>)
 8016d6c:	697b      	ldr	r3, [r7, #20]
 8016d6e:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016d72:	fb01 f303 	mul.w	r3, r1, r3
 8016d76:	4413      	add	r3, r2
 8016d78:	3304      	adds	r3, #4
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	ee07 3a90 	vmov	s15, r3
 8016d80:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016d84:	eeb0 0b47 	vmov.f64	d0, d7
 8016d88:	49bc      	ldr	r1, [pc, #752]	@ (801707c <SetPinConfig+0x388>)
 8016d8a:	68f8      	ldr	r0, [r7, #12]
 8016d8c:	f7eb fe5e 	bl	8002a4c <cJSON_AddNumberToObject>
			cJSON_AddNumberToObject(fld, "on", PinsConf[i].on);
 8016d90:	4ab8      	ldr	r2, [pc, #736]	@ (8017074 <SetPinConfig+0x380>)
 8016d92:	697b      	ldr	r3, [r7, #20]
 8016d94:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016d98:	fb01 f303 	mul.w	r3, r1, r3
 8016d9c:	4413      	add	r3, r2
 8016d9e:	3308      	adds	r3, #8
 8016da0:	781b      	ldrb	r3, [r3, #0]
 8016da2:	ee07 3a90 	vmov	s15, r3
 8016da6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016daa:	eeb0 0b47 	vmov.f64	d0, d7
 8016dae:	49b4      	ldr	r1, [pc, #720]	@ (8017080 <SetPinConfig+0x38c>)
 8016db0:	68f8      	ldr	r0, [r7, #12]
 8016db2:	f7eb fe4b 	bl	8002a4c <cJSON_AddNumberToObject>
			cJSON_AddNumberToObject(fld, "istate", PinsConf[i].istate);
 8016db6:	4aaf      	ldr	r2, [pc, #700]	@ (8017074 <SetPinConfig+0x380>)
 8016db8:	697b      	ldr	r3, [r7, #20]
 8016dba:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016dbe:	fb01 f303 	mul.w	r3, r1, r3
 8016dc2:	4413      	add	r3, r2
 8016dc4:	3309      	adds	r3, #9
 8016dc6:	781b      	ldrb	r3, [r3, #0]
 8016dc8:	ee07 3a90 	vmov	s15, r3
 8016dcc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016dd0:	eeb0 0b47 	vmov.f64	d0, d7
 8016dd4:	49ab      	ldr	r1, [pc, #684]	@ (8017084 <SetPinConfig+0x390>)
 8016dd6:	68f8      	ldr	r0, [r7, #12]
 8016dd8:	f7eb fe38 	bl	8002a4c <cJSON_AddNumberToObject>
			cJSON_AddNumberToObject(fld, "dvalue", PinsConf[i].dvalue);
 8016ddc:	4aa5      	ldr	r2, [pc, #660]	@ (8017074 <SetPinConfig+0x380>)
 8016dde:	697b      	ldr	r3, [r7, #20]
 8016de0:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016de4:	fb01 f303 	mul.w	r3, r1, r3
 8016de8:	4413      	add	r3, r2
 8016dea:	330c      	adds	r3, #12
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	ee07 3a90 	vmov	s15, r3
 8016df2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016df6:	eeb0 0b47 	vmov.f64	d0, d7
 8016dfa:	49a3      	ldr	r1, [pc, #652]	@ (8017088 <SetPinConfig+0x394>)
 8016dfc:	68f8      	ldr	r0, [r7, #12]
 8016dfe:	f7eb fe25 	bl	8002a4c <cJSON_AddNumberToObject>
			cJSON_AddNumberToObject(fld, "ponr", PinsConf[i].ponr);
 8016e02:	4a9c      	ldr	r2, [pc, #624]	@ (8017074 <SetPinConfig+0x380>)
 8016e04:	697b      	ldr	r3, [r7, #20]
 8016e06:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016e0a:	fb01 f303 	mul.w	r3, r1, r3
 8016e0e:	4413      	add	r3, r2
 8016e10:	3310      	adds	r3, #16
 8016e12:	781b      	ldrb	r3, [r3, #0]
 8016e14:	ee07 3a90 	vmov	s15, r3
 8016e18:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016e1c:	eeb0 0b47 	vmov.f64	d0, d7
 8016e20:	499a      	ldr	r1, [pc, #616]	@ (801708c <SetPinConfig+0x398>)
 8016e22:	68f8      	ldr	r0, [r7, #12]
 8016e24:	f7eb fe12 	bl	8002a4c <cJSON_AddNumberToObject>
			cJSON_AddNumberToObject(fld, "ptype", PinsConf[i].ptype);
 8016e28:	4a92      	ldr	r2, [pc, #584]	@ (8017074 <SetPinConfig+0x380>)
 8016e2a:	697b      	ldr	r3, [r7, #20]
 8016e2c:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016e30:	fb01 f303 	mul.w	r3, r1, r3
 8016e34:	4413      	add	r3, r2
 8016e36:	3311      	adds	r3, #17
 8016e38:	781b      	ldrb	r3, [r3, #0]
 8016e3a:	ee07 3a90 	vmov	s15, r3
 8016e3e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016e42:	eeb0 0b47 	vmov.f64	d0, d7
 8016e46:	4992      	ldr	r1, [pc, #584]	@ (8017090 <SetPinConfig+0x39c>)
 8016e48:	68f8      	ldr	r0, [r7, #12]
 8016e4a:	f7eb fdff 	bl	8002a4c <cJSON_AddNumberToObject>
			cJSON_AddNumberToObject(fld, "encoderb", PinsConf[i].encoderb);
 8016e4e:	4a89      	ldr	r2, [pc, #548]	@ (8017074 <SetPinConfig+0x380>)
 8016e50:	697b      	ldr	r3, [r7, #20]
 8016e52:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016e56:	fb01 f303 	mul.w	r3, r1, r3
 8016e5a:	4413      	add	r3, r2
 8016e5c:	f203 2311 	addw	r3, r3, #529	@ 0x211
 8016e60:	781b      	ldrb	r3, [r3, #0]
 8016e62:	ee07 3a90 	vmov	s15, r3
 8016e66:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016e6a:	eeb0 0b47 	vmov.f64	d0, d7
 8016e6e:	4989      	ldr	r1, [pc, #548]	@ (8017094 <SetPinConfig+0x3a0>)
 8016e70:	68f8      	ldr	r0, [r7, #12]
 8016e72:	f7eb fdeb 	bl	8002a4c <cJSON_AddNumberToObject>
			cJSON_AddNumberToObject(fld, "hinter", PinsConf[i].hinter);
 8016e76:	4a7f      	ldr	r2, [pc, #508]	@ (8017074 <SetPinConfig+0x380>)
 8016e78:	697b      	ldr	r3, [r7, #20]
 8016e7a:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016e7e:	fb01 f303 	mul.w	r3, r1, r3
 8016e82:	4413      	add	r3, r2
 8016e84:	f203 2312 	addw	r3, r3, #530	@ 0x212
 8016e88:	781b      	ldrb	r3, [r3, #0]
 8016e8a:	ee07 3a90 	vmov	s15, r3
 8016e8e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016e92:	eeb0 0b47 	vmov.f64	d0, d7
 8016e96:	4980      	ldr	r1, [pc, #512]	@ (8017098 <SetPinConfig+0x3a4>)
 8016e98:	68f8      	ldr	r0, [r7, #12]
 8016e9a:	f7eb fdd7 	bl	8002a4c <cJSON_AddNumberToObject>
			cJSON_AddNumberToObject(fld, "repeat", PinsConf[i].repeat);
 8016e9e:	4a75      	ldr	r2, [pc, #468]	@ (8017074 <SetPinConfig+0x380>)
 8016ea0:	697b      	ldr	r3, [r7, #20]
 8016ea2:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016ea6:	fb01 f303 	mul.w	r3, r1, r3
 8016eaa:	4413      	add	r3, r2
 8016eac:	f203 2313 	addw	r3, r3, #531	@ 0x213
 8016eb0:	781b      	ldrb	r3, [r3, #0]
 8016eb2:	ee07 3a90 	vmov	s15, r3
 8016eb6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016eba:	eeb0 0b47 	vmov.f64	d0, d7
 8016ebe:	4977      	ldr	r1, [pc, #476]	@ (801709c <SetPinConfig+0x3a8>)
 8016ec0:	68f8      	ldr	r0, [r7, #12]
 8016ec2:	f7eb fdc3 	bl	8002a4c <cJSON_AddNumberToObject>
			cJSON_AddNumberToObject(fld, "rinter", PinsConf[i].rinter);
 8016ec6:	4a6b      	ldr	r2, [pc, #428]	@ (8017074 <SetPinConfig+0x380>)
 8016ec8:	697b      	ldr	r3, [r7, #20]
 8016eca:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016ece:	fb01 f303 	mul.w	r3, r1, r3
 8016ed2:	4413      	add	r3, r2
 8016ed4:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8016ed8:	781b      	ldrb	r3, [r3, #0]
 8016eda:	ee07 3a90 	vmov	s15, r3
 8016ede:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016ee2:	eeb0 0b47 	vmov.f64	d0, d7
 8016ee6:	496e      	ldr	r1, [pc, #440]	@ (80170a0 <SetPinConfig+0x3ac>)
 8016ee8:	68f8      	ldr	r0, [r7, #12]
 8016eea:	f7eb fdaf 	bl	8002a4c <cJSON_AddNumberToObject>
			cJSON_AddNumberToObject(fld, "dcinter", PinsConf[i].dcinter);
 8016eee:	4a61      	ldr	r2, [pc, #388]	@ (8017074 <SetPinConfig+0x380>)
 8016ef0:	697b      	ldr	r3, [r7, #20]
 8016ef2:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016ef6:	fb01 f303 	mul.w	r3, r1, r3
 8016efa:	4413      	add	r3, r2
 8016efc:	f203 2315 	addw	r3, r3, #533	@ 0x215
 8016f00:	781b      	ldrb	r3, [r3, #0]
 8016f02:	ee07 3a90 	vmov	s15, r3
 8016f06:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016f0a:	eeb0 0b47 	vmov.f64	d0, d7
 8016f0e:	4965      	ldr	r1, [pc, #404]	@ (80170a4 <SetPinConfig+0x3b0>)
 8016f10:	68f8      	ldr	r0, [r7, #12]
 8016f12:	f7eb fd9b 	bl	8002a4c <cJSON_AddNumberToObject>
			cJSON_AddNumberToObject(fld, "pclick", PinsConf[i].pclick);
 8016f16:	4a57      	ldr	r2, [pc, #348]	@ (8017074 <SetPinConfig+0x380>)
 8016f18:	697b      	ldr	r3, [r7, #20]
 8016f1a:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016f1e:	fb01 f303 	mul.w	r3, r1, r3
 8016f22:	4413      	add	r3, r2
 8016f24:	f203 2316 	addw	r3, r3, #534	@ 0x216
 8016f28:	781b      	ldrb	r3, [r3, #0]
 8016f2a:	ee07 3a90 	vmov	s15, r3
 8016f2e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016f32:	eeb0 0b47 	vmov.f64	d0, d7
 8016f36:	495c      	ldr	r1, [pc, #368]	@ (80170a8 <SetPinConfig+0x3b4>)
 8016f38:	68f8      	ldr	r0, [r7, #12]
 8016f3a:	f7eb fd87 	bl	8002a4c <cJSON_AddNumberToObject>

			cJSON_AddNumberToObject(fld, "sclick", PinsConf[i].sclick);
 8016f3e:	4a4d      	ldr	r2, [pc, #308]	@ (8017074 <SetPinConfig+0x380>)
 8016f40:	697b      	ldr	r3, [r7, #20]
 8016f42:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016f46:	fb01 f303 	mul.w	r3, r1, r3
 8016f4a:	4413      	add	r3, r2
 8016f4c:	3312      	adds	r3, #18
 8016f4e:	781b      	ldrb	r3, [r3, #0]
 8016f50:	ee07 3a90 	vmov	s15, r3
 8016f54:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016f58:	eeb0 0b47 	vmov.f64	d0, d7
 8016f5c:	4953      	ldr	r1, [pc, #332]	@ (80170ac <SetPinConfig+0x3b8>)
 8016f5e:	68f8      	ldr	r0, [r7, #12]
 8016f60:	f7eb fd74 	bl	8002a4c <cJSON_AddNumberToObject>
			cJSON_AddStringToObject(fld, "dclick", PinsConf[i].dclick);
 8016f64:	697b      	ldr	r3, [r7, #20]
 8016f66:	f44f 7218 	mov.w	r2, #608	@ 0x260
 8016f6a:	fb02 f303 	mul.w	r3, r2, r3
 8016f6e:	3310      	adds	r3, #16
 8016f70:	4a40      	ldr	r2, [pc, #256]	@ (8017074 <SetPinConfig+0x380>)
 8016f72:	4413      	add	r3, r2
 8016f74:	3303      	adds	r3, #3
 8016f76:	461a      	mov	r2, r3
 8016f78:	494d      	ldr	r1, [pc, #308]	@ (80170b0 <SetPinConfig+0x3bc>)
 8016f7a:	68f8      	ldr	r0, [r7, #12]
 8016f7c:	f7eb fd8a 	bl	8002a94 <cJSON_AddStringToObject>
			cJSON_AddStringToObject(fld, "lpress", PinsConf[i].lpress);
 8016f80:	697b      	ldr	r3, [r7, #20]
 8016f82:	f44f 7218 	mov.w	r2, #608	@ 0x260
 8016f86:	fb02 f303 	mul.w	r3, r2, r3
 8016f8a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8016f8e:	4a39      	ldr	r2, [pc, #228]	@ (8017074 <SetPinConfig+0x380>)
 8016f90:	4413      	add	r3, r2
 8016f92:	3302      	adds	r3, #2
 8016f94:	461a      	mov	r2, r3
 8016f96:	4947      	ldr	r1, [pc, #284]	@ (80170b4 <SetPinConfig+0x3c0>)
 8016f98:	68f8      	ldr	r0, [r7, #12]
 8016f9a:	f7eb fd7b 	bl	8002a94 <cJSON_AddStringToObject>

			cJSON_AddStringToObject(fld, "info", PinsConf[i].info);
 8016f9e:	697b      	ldr	r3, [r7, #20]
 8016fa0:	f44f 7218 	mov.w	r2, #608	@ 0x260
 8016fa4:	fb02 f303 	mul.w	r3, r2, r3
 8016fa8:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8016fac:	4a31      	ldr	r2, [pc, #196]	@ (8017074 <SetPinConfig+0x380>)
 8016fae:	4413      	add	r3, r2
 8016fb0:	3307      	adds	r3, #7
 8016fb2:	461a      	mov	r2, r3
 8016fb4:	4940      	ldr	r1, [pc, #256]	@ (80170b8 <SetPinConfig+0x3c4>)
 8016fb6:	68f8      	ldr	r0, [r7, #12]
 8016fb8:	f7eb fd6c 	bl	8002a94 <cJSON_AddStringToObject>
			cJSON_AddNumberToObject(fld, "onoff", PinsConf[i].onoff);
 8016fbc:	4a2d      	ldr	r2, [pc, #180]	@ (8017074 <SetPinConfig+0x380>)
 8016fbe:	697b      	ldr	r3, [r7, #20]
 8016fc0:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016fc4:	fb01 f303 	mul.w	r3, r1, r3
 8016fc8:	4413      	add	r3, r2
 8016fca:	f203 2335 	addw	r3, r3, #565	@ 0x235
 8016fce:	781b      	ldrb	r3, [r3, #0]
 8016fd0:	ee07 3a90 	vmov	s15, r3
 8016fd4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016fd8:	eeb0 0b47 	vmov.f64	d0, d7
 8016fdc:	4937      	ldr	r1, [pc, #220]	@ (80170bc <SetPinConfig+0x3c8>)
 8016fde:	68f8      	ldr	r0, [r7, #12]
 8016fe0:	f7eb fd34 	bl	8002a4c <cJSON_AddNumberToObject>
			cJSON_AddNumberToObject(fld, "event", PinsConf[i].event);
 8016fe4:	4a23      	ldr	r2, [pc, #140]	@ (8017074 <SetPinConfig+0x380>)
 8016fe6:	697b      	ldr	r3, [r7, #20]
 8016fe8:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8016fec:	fb01 f303 	mul.w	r3, r1, r3
 8016ff0:	4413      	add	r3, r2
 8016ff2:	f203 2336 	addw	r3, r3, #566	@ 0x236
 8016ff6:	781b      	ldrb	r3, [r3, #0]
 8016ff8:	ee07 3a90 	vmov	s15, r3
 8016ffc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017000:	eeb0 0b47 	vmov.f64	d0, d7
 8017004:	492e      	ldr	r1, [pc, #184]	@ (80170c0 <SetPinConfig+0x3cc>)
 8017006:	68f8      	ldr	r0, [r7, #12]
 8017008:	f7eb fd20 	bl	8002a4c <cJSON_AddNumberToObject>
			cJSON_AddNumberToObject(fld, "act", PinsConf[i].act);
 801700c:	4a19      	ldr	r2, [pc, #100]	@ (8017074 <SetPinConfig+0x380>)
 801700e:	697b      	ldr	r3, [r7, #20]
 8017010:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8017014:	fb01 f303 	mul.w	r3, r1, r3
 8017018:	4413      	add	r3, r2
 801701a:	f203 2337 	addw	r3, r3, #567	@ 0x237
 801701e:	781b      	ldrb	r3, [r3, #0]
 8017020:	ee07 3a90 	vmov	s15, r3
 8017024:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017028:	eeb0 0b47 	vmov.f64	d0, d7
 801702c:	4925      	ldr	r1, [pc, #148]	@ (80170c4 <SetPinConfig+0x3d0>)
 801702e:	68f8      	ldr	r0, [r7, #12]
 8017030:	f7eb fd0c 	bl	8002a4c <cJSON_AddNumberToObject>
			cJSON_AddNumberToObject(fld, "parametr", PinsConf[i].parametr);
 8017034:	4a0f      	ldr	r2, [pc, #60]	@ (8017074 <SetPinConfig+0x380>)
 8017036:	697b      	ldr	r3, [r7, #20]
 8017038:	f44f 7118 	mov.w	r1, #608	@ 0x260
 801703c:	fb01 f303 	mul.w	r3, r1, r3
 8017040:	4413      	add	r3, r2
 8017042:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8017046:	f9b3 3000 	ldrsh.w	r3, [r3]
 801704a:	ee07 3a90 	vmov	s15, r3
 801704e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017052:	eeb0 0b47 	vmov.f64	d0, d7
 8017056:	491c      	ldr	r1, [pc, #112]	@ (80170c8 <SetPinConfig+0x3d4>)
 8017058:	68f8      	ldr	r0, [r7, #12]
 801705a:	f7eb fcf7 	bl	8002a4c <cJSON_AddNumberToObject>
			cJSON_AddNumberToObject(fld, "timeout", PinsConf[i].timeout);
 801705e:	4a05      	ldr	r2, [pc, #20]	@ (8017074 <SetPinConfig+0x380>)
 8017060:	697b      	ldr	r3, [r7, #20]
 8017062:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8017066:	fb01 f303 	mul.w	r3, r1, r3
 801706a:	4413      	add	r3, r2
 801706c:	f503 730f 	add.w	r3, r3, #572	@ 0x23c
 8017070:	e02c      	b.n	80170cc <SetPinConfig+0x3d8>
 8017072:	bf00      	nop
 8017074:	2000066c 	.word	0x2000066c
 8017078:	08031480 	.word	0x08031480
 801707c:	08031488 	.word	0x08031488
 8017080:	0803148c 	.word	0x0803148c
 8017084:	08031490 	.word	0x08031490
 8017088:	08031498 	.word	0x08031498
 801708c:	080314a0 	.word	0x080314a0
 8017090:	080314a8 	.word	0x080314a8
 8017094:	080314b0 	.word	0x080314b0
 8017098:	080314bc 	.word	0x080314bc
 801709c:	080314c4 	.word	0x080314c4
 80170a0:	080314cc 	.word	0x080314cc
 80170a4:	080314d4 	.word	0x080314d4
 80170a8:	080314f4 	.word	0x080314f4
 80170ac:	080314dc 	.word	0x080314dc
 80170b0:	080314e4 	.word	0x080314e4
 80170b4:	080314ec 	.word	0x080314ec
 80170b8:	08031428 	.word	0x08031428
 80170bc:	080314fc 	.word	0x080314fc
 80170c0:	08031504 	.word	0x08031504
 80170c4:	0803150c 	.word	0x0803150c
 80170c8:	08031510 	.word	0x08031510
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	ee07 3a90 	vmov	s15, r3
 80170d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80170d6:	eeb0 0b47 	vmov.f64	d0, d7
 80170da:	491d      	ldr	r1, [pc, #116]	@ (8017150 <SetPinConfig+0x45c>)
 80170dc:	68f8      	ldr	r0, [r7, #12]
 80170de:	f7eb fcb5 	bl	8002a4c <cJSON_AddNumberToObject>
			cJSON_AddStringToObject(fld, "condit", PinsConf[i].condit);
 80170e2:	697b      	ldr	r3, [r7, #20]
 80170e4:	f44f 7218 	mov.w	r2, #608	@ 0x260
 80170e8:	fb02 f303 	mul.w	r3, r2, r3
 80170ec:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80170f0:	4a18      	ldr	r2, [pc, #96]	@ (8017154 <SetPinConfig+0x460>)
 80170f2:	4413      	add	r3, r2
 80170f4:	461a      	mov	r2, r3
 80170f6:	4918      	ldr	r1, [pc, #96]	@ (8017158 <SetPinConfig+0x464>)
 80170f8:	68f8      	ldr	r0, [r7, #12]
 80170fa:	f7eb fccb 	bl	8002a94 <cJSON_AddStringToObject>
		for (i = 0; i < NUMPIN; i++)
 80170fe:	697b      	ldr	r3, [r7, #20]
 8017100:	3301      	adds	r3, #1
 8017102:	617b      	str	r3, [r7, #20]
 8017104:	697b      	ldr	r3, [r7, #20]
 8017106:	2b58      	cmp	r3, #88	@ 0x58
 8017108:	f77f ae16 	ble.w	8016d38 <SetPinConfig+0x44>
		}
		out_str = cJSON_PrintUnformatted(root_obj);
 801710c:	6938      	ldr	r0, [r7, #16]
 801710e:	f7ea fdf1 	bl	8001cf4 <cJSON_PrintUnformatted>
 8017112:	60b8      	str	r0, [r7, #8]
		fresult = f_write(&USBHFile, (const void*) out_str, strlen(out_str), &Byteswritten);
 8017114:	68b8      	ldr	r0, [r7, #8]
 8017116:	f7e9 f8f3 	bl	8000300 <strlen>
 801711a:	4602      	mov	r2, r0
 801711c:	463b      	mov	r3, r7
 801711e:	68b9      	ldr	r1, [r7, #8]
 8017120:	480e      	ldr	r0, [pc, #56]	@ (801715c <SetPinConfig+0x468>)
 8017122:	f00e fcf2 	bl	8025b0a <f_write>
 8017126:	4603      	mov	r3, r0
 8017128:	71fb      	strb	r3, [r7, #7]
		free(out_str);
 801712a:	68b8      	ldr	r0, [r7, #8]
 801712c:	f013 faba 	bl	802a6a4 <free>

		if(fresult == FR_OK){

		}
		cJSON_Delete(root_obj);
 8017130:	6938      	ldr	r0, [r7, #16]
 8017132:	f7e9 fd53 	bl	8000bdc <cJSON_Delete>
		memset(fsbuffer, '\0', sizeof(fsbuffer));
 8017136:	f246 329c 	movw	r2, #25500	@ 0x639c
 801713a:	2100      	movs	r1, #0
 801713c:	4808      	ldr	r0, [pc, #32]	@ (8017160 <SetPinConfig+0x46c>)
 801713e:	f014 fce5 	bl	802bb0c <memset>
		f_close(&USBHFile);
 8017142:	4806      	ldr	r0, [pc, #24]	@ (801715c <SetPinConfig+0x468>)
 8017144:	f00e ff2d 	bl	8025fa2 <f_close>
	}
}
 8017148:	bf00      	nop
 801714a:	3718      	adds	r7, #24
 801714c:	46bd      	mov	sp, r7
 801714e:	bd80      	pop	{r7, pc}
 8017150:	0803151c 	.word	0x0803151c
 8017154:	2000066c 	.word	0x2000066c
 8017158:	08031524 	.word	0x08031524
 801715c:	2001c07c 	.word	0x2001c07c
 8017160:	20014c48 	.word	0x20014c48

08017164 <GetPinToPin>:


void GetPinToPin() {
 8017164:	b580      	push	{r7, lr}
 8017166:	b08c      	sub	sp, #48	@ 0x30
 8017168:	af00      	add	r7, sp, #0
	FILINFO finfo;
	cJSON *root_obj = NULL;
 801716a:	2300      	movs	r3, #0
 801716c:	62bb      	str	r3, [r7, #40]	@ 0x28
	FRESULT fresult;
	UINT Byteswritten; // File read/write count

	fresult = f_stat("pintopin.ini", &finfo);
 801716e:	f107 0308 	add.w	r3, r7, #8
 8017172:	4619      	mov	r1, r3
 8017174:	4836      	ldr	r0, [pc, #216]	@ (8017250 <GetPinToPin+0xec>)
 8017176:	f00e ff43 	bl	8026000 <f_stat>
 801717a:	4603      	mov	r3, r0
 801717c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (fresult == FR_OK) {
 8017180:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017184:	2b00      	cmp	r3, #0
 8017186:	d15f      	bne.n	8017248 <GetPinToPin+0xe4>
		// если файл существует, открываем его
		if (f_open(&USBHFile, (const TCHAR*) "pintopin.ini", FA_READ) == FR_OK) {
 8017188:	2201      	movs	r2, #1
 801718a:	4931      	ldr	r1, [pc, #196]	@ (8017250 <GetPinToPin+0xec>)
 801718c:	4831      	ldr	r0, [pc, #196]	@ (8017254 <GetPinToPin+0xf0>)
 801718e:	f00e f95f 	bl	8025450 <f_open>
 8017192:	4603      	mov	r3, r0
 8017194:	2b00      	cmp	r3, #0
 8017196:	d157      	bne.n	8017248 <GetPinToPin+0xe4>

			fresult = f_read(&USBHFile, fsbuffer, sizeof(fsbuffer), &Byteswritten);
 8017198:	1d3b      	adds	r3, r7, #4
 801719a:	f246 329c 	movw	r2, #25500	@ 0x639c
 801719e:	492e      	ldr	r1, [pc, #184]	@ (8017258 <GetPinToPin+0xf4>)
 80171a0:	482c      	ldr	r0, [pc, #176]	@ (8017254 <GetPinToPin+0xf0>)
 80171a2:	f00e fb24 	bl	80257ee <f_read>
 80171a6:	4603      	mov	r3, r0
 80171a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			root_obj = cJSON_Parse(fsbuffer);
 80171ac:	482a      	ldr	r0, [pc, #168]	@ (8017258 <GetPinToPin+0xf4>)
 80171ae:	f7ea fd0f 	bl	8001bd0 <cJSON_Parse>
 80171b2:	62b8      	str	r0, [r7, #40]	@ 0x28

			for (int i = 0; i < cJSON_GetArraySize(root_obj); i++) {
 80171b4:	2300      	movs	r3, #0
 80171b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80171b8:	e033      	b.n	8017222 <GetPinToPin+0xbe>
				cJSON *pins_item = cJSON_GetArrayItem(root_obj, i);
 80171ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80171bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80171be:	f7eb fb24 	bl	800280a <cJSON_GetArrayItem>
 80171c2:	6238      	str	r0, [r7, #32]

				PinsLinks[i].idin = cJSON_GetObjectItem(pins_item, "idin")->valueint;
 80171c4:	4925      	ldr	r1, [pc, #148]	@ (801725c <GetPinToPin+0xf8>)
 80171c6:	6a38      	ldr	r0, [r7, #32]
 80171c8:	f7eb fb7b 	bl	80028c2 <cJSON_GetObjectItem>
 80171cc:	4603      	mov	r3, r0
 80171ce:	6959      	ldr	r1, [r3, #20]
 80171d0:	4823      	ldr	r0, [pc, #140]	@ (8017260 <GetPinToPin+0xfc>)
 80171d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80171d4:	4613      	mov	r3, r2
 80171d6:	005b      	lsls	r3, r3, #1
 80171d8:	4413      	add	r3, r2
 80171da:	009b      	lsls	r3, r3, #2
 80171dc:	4403      	add	r3, r0
 80171de:	6019      	str	r1, [r3, #0]
				PinsLinks[i].idout = cJSON_GetObjectItem(pins_item, "idout")->valueint;
 80171e0:	4920      	ldr	r1, [pc, #128]	@ (8017264 <GetPinToPin+0x100>)
 80171e2:	6a38      	ldr	r0, [r7, #32]
 80171e4:	f7eb fb6d 	bl	80028c2 <cJSON_GetObjectItem>
 80171e8:	4603      	mov	r3, r0
 80171ea:	6959      	ldr	r1, [r3, #20]
 80171ec:	481c      	ldr	r0, [pc, #112]	@ (8017260 <GetPinToPin+0xfc>)
 80171ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80171f0:	4613      	mov	r3, r2
 80171f2:	005b      	lsls	r3, r3, #1
 80171f4:	4413      	add	r3, r2
 80171f6:	009b      	lsls	r3, r3, #2
 80171f8:	4403      	add	r3, r0
 80171fa:	3304      	adds	r3, #4
 80171fc:	6019      	str	r1, [r3, #0]
				PinsLinks[i].flag = cJSON_GetObjectItem(pins_item, "flag")->valueint;
 80171fe:	491a      	ldr	r1, [pc, #104]	@ (8017268 <GetPinToPin+0x104>)
 8017200:	6a38      	ldr	r0, [r7, #32]
 8017202:	f7eb fb5e 	bl	80028c2 <cJSON_GetObjectItem>
 8017206:	4603      	mov	r3, r0
 8017208:	6959      	ldr	r1, [r3, #20]
 801720a:	4815      	ldr	r0, [pc, #84]	@ (8017260 <GetPinToPin+0xfc>)
 801720c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801720e:	4613      	mov	r3, r2
 8017210:	005b      	lsls	r3, r3, #1
 8017212:	4413      	add	r3, r2
 8017214:	009b      	lsls	r3, r3, #2
 8017216:	4403      	add	r3, r0
 8017218:	3308      	adds	r3, #8
 801721a:	6019      	str	r1, [r3, #0]
			for (int i = 0; i < cJSON_GetArraySize(root_obj); i++) {
 801721c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801721e:	3301      	adds	r3, #1
 8017220:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017222:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017224:	f7eb faad 	bl	8002782 <cJSON_GetArraySize>
 8017228:	4602      	mov	r2, r0
 801722a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801722c:	4293      	cmp	r3, r2
 801722e:	dbc4      	blt.n	80171ba <GetPinToPin+0x56>

			}

			cJSON_Delete(root_obj);
 8017230:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017232:	f7e9 fcd3 	bl	8000bdc <cJSON_Delete>
			memset(fsbuffer, '\0', sizeof(fsbuffer));
 8017236:	f246 329c 	movw	r2, #25500	@ 0x639c
 801723a:	2100      	movs	r1, #0
 801723c:	4806      	ldr	r0, [pc, #24]	@ (8017258 <GetPinToPin+0xf4>)
 801723e:	f014 fc65 	bl	802bb0c <memset>
			f_close(&USBHFile);
 8017242:	4804      	ldr	r0, [pc, #16]	@ (8017254 <GetPinToPin+0xf0>)
 8017244:	f00e fead 	bl	8025fa2 <f_close>
		}
	}


}
 8017248:	bf00      	nop
 801724a:	3730      	adds	r7, #48	@ 0x30
 801724c:	46bd      	mov	sp, r7
 801724e:	bd80      	pop	{r7, pc}
 8017250:	0803152c 	.word	0x0803152c
 8017254:	2001c07c 	.word	0x2001c07c
 8017258:	20014c48 	.word	0x20014c48
 801725c:	0803153c 	.word	0x0803153c
 8017260:	2000d9cc 	.word	0x2000d9cc
 8017264:	08031544 	.word	0x08031544
 8017268:	0803154c 	.word	0x0803154c

0801726c <SetPinToPin>:

// Если файл "pintopin.ini" не существует, создаем его и записываем данные
void SetPinToPin() {
 801726c:	b580      	push	{r7, lr}
 801726e:	b086      	sub	sp, #24
 8017270:	af00      	add	r7, sp, #0
	cJSON *root_obj = NULL;
 8017272:	2300      	movs	r3, #0
 8017274:	613b      	str	r3, [r7, #16]
	cJSON *fld = NULL;
 8017276:	2300      	movs	r3, #0
 8017278:	60fb      	str	r3, [r7, #12]
	UINT Byteswritten; // File read/write count
	FRESULT fresult;
	char *out_str = NULL;
 801727a:	2300      	movs	r3, #0
 801727c:	60bb      	str	r3, [r7, #8]
	int i = 0;
 801727e:	2300      	movs	r3, #0
 8017280:	617b      	str	r3, [r7, #20]
	if (f_open(&USBHFile, (const TCHAR*) "pintopin.ini",FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
 8017282:	220a      	movs	r2, #10
 8017284:	493b      	ldr	r1, [pc, #236]	@ (8017374 <SetPinToPin+0x108>)
 8017286:	483c      	ldr	r0, [pc, #240]	@ (8017378 <SetPinToPin+0x10c>)
 8017288:	f00e f8e2 	bl	8025450 <f_open>
 801728c:	4603      	mov	r3, r0
 801728e:	2b00      	cmp	r3, #0
 8017290:	d16b      	bne.n	801736a <SetPinToPin+0xfe>
		// Запись JSON в файл

		root_obj = cJSON_CreateArray();
 8017292:	f7eb fc91 	bl	8002bb8 <cJSON_CreateArray>
 8017296:	6138      	str	r0, [r7, #16]
		fld = cJSON_CreateObject();
 8017298:	f7eb fca2 	bl	8002be0 <cJSON_CreateObject>
 801729c:	60f8      	str	r0, [r7, #12]
		for (i = 0; i < NUMPINLINKS; i++)
 801729e:	2300      	movs	r3, #0
 80172a0:	617b      	str	r3, [r7, #20]
 80172a2:	e041      	b.n	8017328 <SetPinToPin+0xbc>
		{
			cJSON_AddItemToArray(root_obj, fld = cJSON_CreateObject());
 80172a4:	f7eb fc9c 	bl	8002be0 <cJSON_CreateObject>
 80172a8:	60f8      	str	r0, [r7, #12]
 80172aa:	68f9      	ldr	r1, [r7, #12]
 80172ac:	6938      	ldr	r0, [r7, #16]
 80172ae:	f7eb fb5e 	bl	800296e <cJSON_AddItemToArray>

			cJSON_AddNumberToObject(fld, "idin", PinsLinks[i].idin);
 80172b2:	4932      	ldr	r1, [pc, #200]	@ (801737c <SetPinToPin+0x110>)
 80172b4:	697a      	ldr	r2, [r7, #20]
 80172b6:	4613      	mov	r3, r2
 80172b8:	005b      	lsls	r3, r3, #1
 80172ba:	4413      	add	r3, r2
 80172bc:	009b      	lsls	r3, r3, #2
 80172be:	440b      	add	r3, r1
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	ee07 3a90 	vmov	s15, r3
 80172c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80172ca:	eeb0 0b47 	vmov.f64	d0, d7
 80172ce:	492c      	ldr	r1, [pc, #176]	@ (8017380 <SetPinToPin+0x114>)
 80172d0:	68f8      	ldr	r0, [r7, #12]
 80172d2:	f7eb fbbb 	bl	8002a4c <cJSON_AddNumberToObject>
			cJSON_AddNumberToObject(fld, "idout", PinsLinks[i].idout);
 80172d6:	4929      	ldr	r1, [pc, #164]	@ (801737c <SetPinToPin+0x110>)
 80172d8:	697a      	ldr	r2, [r7, #20]
 80172da:	4613      	mov	r3, r2
 80172dc:	005b      	lsls	r3, r3, #1
 80172de:	4413      	add	r3, r2
 80172e0:	009b      	lsls	r3, r3, #2
 80172e2:	440b      	add	r3, r1
 80172e4:	3304      	adds	r3, #4
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	ee07 3a90 	vmov	s15, r3
 80172ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80172f0:	eeb0 0b47 	vmov.f64	d0, d7
 80172f4:	4923      	ldr	r1, [pc, #140]	@ (8017384 <SetPinToPin+0x118>)
 80172f6:	68f8      	ldr	r0, [r7, #12]
 80172f8:	f7eb fba8 	bl	8002a4c <cJSON_AddNumberToObject>
			cJSON_AddNumberToObject(fld, "flag", PinsLinks[i].flag);
 80172fc:	491f      	ldr	r1, [pc, #124]	@ (801737c <SetPinToPin+0x110>)
 80172fe:	697a      	ldr	r2, [r7, #20]
 8017300:	4613      	mov	r3, r2
 8017302:	005b      	lsls	r3, r3, #1
 8017304:	4413      	add	r3, r2
 8017306:	009b      	lsls	r3, r3, #2
 8017308:	440b      	add	r3, r1
 801730a:	3308      	adds	r3, #8
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	ee07 3a90 	vmov	s15, r3
 8017312:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017316:	eeb0 0b47 	vmov.f64	d0, d7
 801731a:	491b      	ldr	r1, [pc, #108]	@ (8017388 <SetPinToPin+0x11c>)
 801731c:	68f8      	ldr	r0, [r7, #12]
 801731e:	f7eb fb95 	bl	8002a4c <cJSON_AddNumberToObject>
		for (i = 0; i < NUMPINLINKS; i++)
 8017322:	697b      	ldr	r3, [r7, #20]
 8017324:	3301      	adds	r3, #1
 8017326:	617b      	str	r3, [r7, #20]
 8017328:	697b      	ldr	r3, [r7, #20]
 801732a:	2b63      	cmp	r3, #99	@ 0x63
 801732c:	ddba      	ble.n	80172a4 <SetPinToPin+0x38>

		}
		out_str = cJSON_PrintUnformatted(root_obj);
 801732e:	6938      	ldr	r0, [r7, #16]
 8017330:	f7ea fce0 	bl	8001cf4 <cJSON_PrintUnformatted>
 8017334:	60b8      	str	r0, [r7, #8]
		fresult = f_write(&USBHFile, (const void*) out_str, strlen(out_str), &Byteswritten);
 8017336:	68b8      	ldr	r0, [r7, #8]
 8017338:	f7e8 ffe2 	bl	8000300 <strlen>
 801733c:	4602      	mov	r2, r0
 801733e:	463b      	mov	r3, r7
 8017340:	68b9      	ldr	r1, [r7, #8]
 8017342:	480d      	ldr	r0, [pc, #52]	@ (8017378 <SetPinToPin+0x10c>)
 8017344:	f00e fbe1 	bl	8025b0a <f_write>
 8017348:	4603      	mov	r3, r0
 801734a:	71fb      	strb	r3, [r7, #7]
		free(out_str);
 801734c:	68b8      	ldr	r0, [r7, #8]
 801734e:	f013 f9a9 	bl	802a6a4 <free>

		if(fresult == FR_OK){

		}
		cJSON_Delete(root_obj);
 8017352:	6938      	ldr	r0, [r7, #16]
 8017354:	f7e9 fc42 	bl	8000bdc <cJSON_Delete>
		memset(fsbuffer, '\0', sizeof(fsbuffer));
 8017358:	f246 329c 	movw	r2, #25500	@ 0x639c
 801735c:	2100      	movs	r1, #0
 801735e:	480b      	ldr	r0, [pc, #44]	@ (801738c <SetPinToPin+0x120>)
 8017360:	f014 fbd4 	bl	802bb0c <memset>
		f_close(&USBHFile);
 8017364:	4804      	ldr	r0, [pc, #16]	@ (8017378 <SetPinToPin+0x10c>)
 8017366:	f00e fe1c 	bl	8025fa2 <f_close>
	}

}
 801736a:	bf00      	nop
 801736c:	3718      	adds	r7, #24
 801736e:	46bd      	mov	sp, r7
 8017370:	bd80      	pop	{r7, pc}
 8017372:	bf00      	nop
 8017374:	0803152c 	.word	0x0803152c
 8017378:	2001c07c 	.word	0x2001c07c
 801737c:	2000d9cc 	.word	0x2000d9cc
 8017380:	0803153c 	.word	0x0803153c
 8017384:	08031544 	.word	0x08031544
 8017388:	0803154c 	.word	0x0803154c
 801738c:	20014c48 	.word	0x20014c48

08017390 <InitPin>:




void InitPin() {
 8017390:	b580      	push	{r7, lr}
 8017392:	b0a8      	sub	sp, #160	@ 0xa0
 8017394:	af00      	add	r7, sp, #0
	int i = 0;
 8017396:	2300      	movs	r3, #0
 8017398:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801739c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80173a0:	2200      	movs	r2, #0
 80173a2:	601a      	str	r2, [r3, #0]
 80173a4:	605a      	str	r2, [r3, #4]
 80173a6:	609a      	str	r2, [r3, #8]
 80173a8:	60da      	str	r2, [r3, #12]
 80173aa:	611a      	str	r2, [r3, #16]

    for (i = 0; i < NUMPIN; i++){
 80173ac:	2300      	movs	r3, #0
 80173ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80173b2:	e3c9      	b.n	8017b48 <InitPin+0x7b8>
    	// для Multi button
    	PinsConf[i].act = 0;
 80173b4:	4abe      	ldr	r2, [pc, #760]	@ (80176b0 <InitPin+0x320>)
 80173b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80173ba:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80173be:	fb01 f303 	mul.w	r3, r1, r3
 80173c2:	4413      	add	r3, r2
 80173c4:	f203 2337 	addw	r3, r3, #567	@ 0x237
 80173c8:	2200      	movs	r2, #0
 80173ca:	701a      	strb	r2, [r3, #0]

    	// initialization OUTPUT
    	if(PinsConf[i].topin == 2){
 80173cc:	4ab8      	ldr	r2, [pc, #736]	@ (80176b0 <InitPin+0x320>)
 80173ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80173d2:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80173d6:	fb01 f303 	mul.w	r3, r1, r3
 80173da:	4413      	add	r3, r2
 80173dc:	781b      	ldrb	r3, [r3, #0]
 80173de:	2b02      	cmp	r3, #2
 80173e0:	d139      	bne.n	8017456 <InitPin+0xc6>

    		// проверяем тактирование порта
			//checkPortClockStatus(PinsInfo[i].port, __HAL_RCC_GPIOA_IS_CLK_ENABLED());

    		//сбрасываем биты для данного пина
    		HAL_GPIO_DeInit(PinsInfo[i].gpio_name, PinsInfo[i].hal_pin);
 80173e2:	49b4      	ldr	r1, [pc, #720]	@ (80176b4 <InitPin+0x324>)
 80173e4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80173e8:	4613      	mov	r3, r2
 80173ea:	009b      	lsls	r3, r3, #2
 80173ec:	4413      	add	r3, r2
 80173ee:	00db      	lsls	r3, r3, #3
 80173f0:	440b      	add	r3, r1
 80173f2:	3310      	adds	r3, #16
 80173f4:	6818      	ldr	r0, [r3, #0]
 80173f6:	49af      	ldr	r1, [pc, #700]	@ (80176b4 <InitPin+0x324>)
 80173f8:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80173fc:	4613      	mov	r3, r2
 80173fe:	009b      	lsls	r3, r3, #2
 8017400:	4413      	add	r3, r2
 8017402:	00db      	lsls	r3, r3, #3
 8017404:	440b      	add	r3, r1
 8017406:	330c      	adds	r3, #12
 8017408:	881b      	ldrh	r3, [r3, #0]
 801740a:	4619      	mov	r1, r3
 801740c:	f001 fee8 	bl	80191e0 <HAL_GPIO_DeInit>

			// инициализация пина OUTPUT
    		GPIO_InitStruct.Pin = PinsInfo[i].hal_pin; // вывод
 8017410:	49a8      	ldr	r1, [pc, #672]	@ (80176b4 <InitPin+0x324>)
 8017412:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8017416:	4613      	mov	r3, r2
 8017418:	009b      	lsls	r3, r3, #2
 801741a:	4413      	add	r3, r2
 801741c:	00db      	lsls	r3, r3, #3
 801741e:	440b      	add	r3, r1
 8017420:	330c      	adds	r3, #12
 8017422:	881b      	ldrh	r3, [r3, #0]
 8017424:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // режим – выход
 8017428:	2301      	movs	r3, #1
 801742a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW ; //
 801742e:	2300      	movs	r3, #0
 8017430:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    		HAL_GPIO_Init(PinsInfo[i].gpio_name, &GPIO_InitStruct);
 8017434:	499f      	ldr	r1, [pc, #636]	@ (80176b4 <InitPin+0x324>)
 8017436:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801743a:	4613      	mov	r3, r2
 801743c:	009b      	lsls	r3, r3, #2
 801743e:	4413      	add	r3, r2
 8017440:	00db      	lsls	r3, r3, #3
 8017442:	440b      	add	r3, r1
 8017444:	3310      	adds	r3, #16
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801744c:	4611      	mov	r1, r2
 801744e:	4618      	mov	r0, r3
 8017450:	f001 fd1a 	bl	8018e88 <HAL_GPIO_Init>
 8017454:	e373      	b.n	8017b3e <InitPin+0x7ae>
    	}
        // initialization Encoder
        else if(PinsConf[i].topin == 8 || PinsConf[i].topin == 9){
 8017456:	4a96      	ldr	r2, [pc, #600]	@ (80176b0 <InitPin+0x320>)
 8017458:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801745c:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8017460:	fb01 f303 	mul.w	r3, r1, r3
 8017464:	4413      	add	r3, r2
 8017466:	781b      	ldrb	r3, [r3, #0]
 8017468:	2b08      	cmp	r3, #8
 801746a:	d00a      	beq.n	8017482 <InitPin+0xf2>
 801746c:	4a90      	ldr	r2, [pc, #576]	@ (80176b0 <InitPin+0x320>)
 801746e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017472:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8017476:	fb01 f303 	mul.w	r3, r1, r3
 801747a:	4413      	add	r3, r2
 801747c:	781b      	ldrb	r3, [r3, #0]
 801747e:	2b09      	cmp	r3, #9
 8017480:	d139      	bne.n	80174f6 <InitPin+0x166>
            //сбрасываем биты для данного пина
            HAL_GPIO_DeInit(PinsInfo[i].gpio_name, PinsInfo[i].hal_pin);
 8017482:	498c      	ldr	r1, [pc, #560]	@ (80176b4 <InitPin+0x324>)
 8017484:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8017488:	4613      	mov	r3, r2
 801748a:	009b      	lsls	r3, r3, #2
 801748c:	4413      	add	r3, r2
 801748e:	00db      	lsls	r3, r3, #3
 8017490:	440b      	add	r3, r1
 8017492:	3310      	adds	r3, #16
 8017494:	6818      	ldr	r0, [r3, #0]
 8017496:	4987      	ldr	r1, [pc, #540]	@ (80176b4 <InitPin+0x324>)
 8017498:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801749c:	4613      	mov	r3, r2
 801749e:	009b      	lsls	r3, r3, #2
 80174a0:	4413      	add	r3, r2
 80174a2:	00db      	lsls	r3, r3, #3
 80174a4:	440b      	add	r3, r1
 80174a6:	330c      	adds	r3, #12
 80174a8:	881b      	ldrh	r3, [r3, #0]
 80174aa:	4619      	mov	r1, r3
 80174ac:	f001 fe98 	bl	80191e0 <HAL_GPIO_DeInit>

            GPIO_InitStruct.Pin = PinsInfo[i].hal_pin; // вход
 80174b0:	4980      	ldr	r1, [pc, #512]	@ (80176b4 <InitPin+0x324>)
 80174b2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80174b6:	4613      	mov	r3, r2
 80174b8:	009b      	lsls	r3, r3, #2
 80174ba:	4413      	add	r3, r2
 80174bc:	00db      	lsls	r3, r3, #3
 80174be:	440b      	add	r3, r1
 80174c0:	330c      	adds	r3, #12
 80174c2:	881b      	ldrh	r3, [r3, #0]
 80174c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // устанавливаем режим работы порта на вход
 80174c8:	2300      	movs	r3, #0
 80174ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            GPIO_InitStruct.Pull = GPIO_NOPULL;
 80174ce:	2300      	movs	r3, #0
 80174d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            HAL_GPIO_Init(PinsInfo[i].gpio_name, &GPIO_InitStruct); // инициализируем
 80174d4:	4977      	ldr	r1, [pc, #476]	@ (80176b4 <InitPin+0x324>)
 80174d6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80174da:	4613      	mov	r3, r2
 80174dc:	009b      	lsls	r3, r3, #2
 80174de:	4413      	add	r3, r2
 80174e0:	00db      	lsls	r3, r3, #3
 80174e2:	440b      	add	r3, r1
 80174e4:	3310      	adds	r3, #16
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80174ec:	4611      	mov	r1, r2
 80174ee:	4618      	mov	r0, r3
 80174f0:	f001 fcca 	bl	8018e88 <HAL_GPIO_Init>
 80174f4:	e323      	b.n	8017b3e <InitPin+0x7ae>
        }
    	// initialization INPUT
    	else if(PinsConf[i].topin == 1 || PinsConf[i].topin == 3){
 80174f6:	4a6e      	ldr	r2, [pc, #440]	@ (80176b0 <InitPin+0x320>)
 80174f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80174fc:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8017500:	fb01 f303 	mul.w	r3, r1, r3
 8017504:	4413      	add	r3, r2
 8017506:	781b      	ldrb	r3, [r3, #0]
 8017508:	2b01      	cmp	r3, #1
 801750a:	d00a      	beq.n	8017522 <InitPin+0x192>
 801750c:	4a68      	ldr	r2, [pc, #416]	@ (80176b0 <InitPin+0x320>)
 801750e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017512:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8017516:	fb01 f303 	mul.w	r3, r1, r3
 801751a:	4413      	add	r3, r2
 801751c:	781b      	ldrb	r3, [r3, #0]
 801751e:	2b03      	cmp	r3, #3
 8017520:	d16c      	bne.n	80175fc <InitPin+0x26c>

    		// проверяем тактирование порта
			//checkPortClockStatus(PinsInfo[i].port, __HAL_RCC_GPIOA_IS_CLK_ENABLED());

            // сбрасываем биты для данного пина
            HAL_GPIO_DeInit(PinsInfo[i].gpio_name, PinsInfo[i].hal_pin);
 8017522:	4964      	ldr	r1, [pc, #400]	@ (80176b4 <InitPin+0x324>)
 8017524:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8017528:	4613      	mov	r3, r2
 801752a:	009b      	lsls	r3, r3, #2
 801752c:	4413      	add	r3, r2
 801752e:	00db      	lsls	r3, r3, #3
 8017530:	440b      	add	r3, r1
 8017532:	3310      	adds	r3, #16
 8017534:	6818      	ldr	r0, [r3, #0]
 8017536:	495f      	ldr	r1, [pc, #380]	@ (80176b4 <InitPin+0x324>)
 8017538:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801753c:	4613      	mov	r3, r2
 801753e:	009b      	lsls	r3, r3, #2
 8017540:	4413      	add	r3, r2
 8017542:	00db      	lsls	r3, r3, #3
 8017544:	440b      	add	r3, r1
 8017546:	330c      	adds	r3, #12
 8017548:	881b      	ldrh	r3, [r3, #0]
 801754a:	4619      	mov	r1, r3
 801754c:	f001 fe48 	bl	80191e0 <HAL_GPIO_DeInit>


			// инициализация пина  INPUT
    	    GPIO_InitStruct.Pin = PinsInfo[i].hal_pin; // вход
 8017550:	4958      	ldr	r1, [pc, #352]	@ (80176b4 <InitPin+0x324>)
 8017552:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8017556:	4613      	mov	r3, r2
 8017558:	009b      	lsls	r3, r3, #2
 801755a:	4413      	add	r3, r2
 801755c:	00db      	lsls	r3, r3, #3
 801755e:	440b      	add	r3, r1
 8017560:	330c      	adds	r3, #12
 8017562:	881b      	ldrh	r3, [r3, #0]
 8017564:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    	    GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // устанавливаем режим работы порта на вход
 8017568:	2300      	movs	r3, #0
 801756a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    	    if (PinsConf[i].ptype == 1) {
 801756e:	4a50      	ldr	r2, [pc, #320]	@ (80176b0 <InitPin+0x320>)
 8017570:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017574:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8017578:	fb01 f303 	mul.w	r3, r1, r3
 801757c:	4413      	add	r3, r2
 801757e:	3311      	adds	r3, #17
 8017580:	781b      	ldrb	r3, [r3, #0]
 8017582:	2b01      	cmp	r3, #1
 8017584:	d103      	bne.n	801758e <InitPin+0x1fe>
    	    	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017586:	2301      	movs	r3, #1
 8017588:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801758c:	e022      	b.n	80175d4 <InitPin+0x244>
    	    }
    	    else if (PinsConf[i].ptype == 2) {
 801758e:	4a48      	ldr	r2, [pc, #288]	@ (80176b0 <InitPin+0x320>)
 8017590:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017594:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8017598:	fb01 f303 	mul.w	r3, r1, r3
 801759c:	4413      	add	r3, r2
 801759e:	3311      	adds	r3, #17
 80175a0:	781b      	ldrb	r3, [r3, #0]
 80175a2:	2b02      	cmp	r3, #2
 80175a4:	d103      	bne.n	80175ae <InitPin+0x21e>
    	    	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80175a6:	2302      	movs	r3, #2
 80175a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80175ac:	e012      	b.n	80175d4 <InitPin+0x244>
    	    }
    	    else if (PinsConf[i].ptype == 0) {
 80175ae:	4a40      	ldr	r2, [pc, #256]	@ (80176b0 <InitPin+0x320>)
 80175b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80175b4:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80175b8:	fb01 f303 	mul.w	r3, r1, r3
 80175bc:	4413      	add	r3, r2
 80175be:	3311      	adds	r3, #17
 80175c0:	781b      	ldrb	r3, [r3, #0]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d103      	bne.n	80175ce <InitPin+0x23e>
    	    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80175c6:	2300      	movs	r3, #0
 80175c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80175cc:	e002      	b.n	80175d4 <InitPin+0x244>
    	    } else {
    	    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80175ce:	2300      	movs	r3, #0
 80175d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    	    }


    	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; // устанавливаем максимальную скорость порта
 80175d4:	2302      	movs	r3, #2
 80175d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    	    HAL_GPIO_Init(PinsInfo[i].gpio_name, &GPIO_InitStruct); // инициализируем порт B
 80175da:	4936      	ldr	r1, [pc, #216]	@ (80176b4 <InitPin+0x324>)
 80175dc:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80175e0:	4613      	mov	r3, r2
 80175e2:	009b      	lsls	r3, r3, #2
 80175e4:	4413      	add	r3, r2
 80175e6:	00db      	lsls	r3, r3, #3
 80175e8:	440b      	add	r3, r1
 80175ea:	3310      	adds	r3, #16
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80175f2:	4611      	mov	r1, r2
 80175f4:	4618      	mov	r0, r3
 80175f6:	f001 fc47 	bl	8018e88 <HAL_GPIO_Init>
 80175fa:	e2a0      	b.n	8017b3e <InitPin+0x7ae>
    	}
    	// initialization INPUT
    	else if(PinsConf[i].topin == 5){
 80175fc:	4a2c      	ldr	r2, [pc, #176]	@ (80176b0 <InitPin+0x320>)
 80175fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017602:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8017606:	fb01 f303 	mul.w	r3, r1, r3
 801760a:	4413      	add	r3, r2
 801760c:	781b      	ldrb	r3, [r3, #0]
 801760e:	2b05      	cmp	r3, #5
 8017610:	f040 8295 	bne.w	8017b3e <InitPin+0x7ae>

    		     //__HAL_RCC_TIM1_CLK_ENABLE();

    		     if(PinsInfo[i].tim == TIM1){
 8017614:	4927      	ldr	r1, [pc, #156]	@ (80176b4 <InitPin+0x324>)
 8017616:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801761a:	4613      	mov	r3, r2
 801761c:	009b      	lsls	r3, r3, #2
 801761e:	4413      	add	r3, r2
 8017620:	00db      	lsls	r3, r3, #3
 8017622:	440b      	add	r3, r1
 8017624:	331c      	adds	r3, #28
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	4a23      	ldr	r2, [pc, #140]	@ (80176b8 <InitPin+0x328>)
 801762a:	4293      	cmp	r3, r2
 801762c:	d10c      	bne.n	8017648 <InitPin+0x2b8>
    		    	__HAL_RCC_TIM1_CLK_ENABLE();
 801762e:	4b23      	ldr	r3, [pc, #140]	@ (80176bc <InitPin+0x32c>)
 8017630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017632:	4a22      	ldr	r2, [pc, #136]	@ (80176bc <InitPin+0x32c>)
 8017634:	f043 0301 	orr.w	r3, r3, #1
 8017638:	6453      	str	r3, [r2, #68]	@ 0x44
 801763a:	4b20      	ldr	r3, [pc, #128]	@ (80176bc <InitPin+0x32c>)
 801763c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801763e:	f003 0301 	and.w	r3, r3, #1
 8017642:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017644:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017646:	e156      	b.n	80178f6 <InitPin+0x566>
    		     } else if(PinsInfo[i].tim == TIM2){
 8017648:	491a      	ldr	r1, [pc, #104]	@ (80176b4 <InitPin+0x324>)
 801764a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801764e:	4613      	mov	r3, r2
 8017650:	009b      	lsls	r3, r3, #2
 8017652:	4413      	add	r3, r2
 8017654:	00db      	lsls	r3, r3, #3
 8017656:	440b      	add	r3, r1
 8017658:	331c      	adds	r3, #28
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017660:	d10c      	bne.n	801767c <InitPin+0x2ec>
    		    	 __HAL_RCC_TIM2_CLK_ENABLE();
 8017662:	4b16      	ldr	r3, [pc, #88]	@ (80176bc <InitPin+0x32c>)
 8017664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017666:	4a15      	ldr	r2, [pc, #84]	@ (80176bc <InitPin+0x32c>)
 8017668:	f043 0301 	orr.w	r3, r3, #1
 801766c:	6413      	str	r3, [r2, #64]	@ 0x40
 801766e:	4b13      	ldr	r3, [pc, #76]	@ (80176bc <InitPin+0x32c>)
 8017670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017672:	f003 0301 	and.w	r3, r3, #1
 8017676:	65bb      	str	r3, [r7, #88]	@ 0x58
 8017678:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801767a:	e13c      	b.n	80178f6 <InitPin+0x566>
    		     } else if(PinsInfo[i].tim == TIM3){
 801767c:	490d      	ldr	r1, [pc, #52]	@ (80176b4 <InitPin+0x324>)
 801767e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8017682:	4613      	mov	r3, r2
 8017684:	009b      	lsls	r3, r3, #2
 8017686:	4413      	add	r3, r2
 8017688:	00db      	lsls	r3, r3, #3
 801768a:	440b      	add	r3, r1
 801768c:	331c      	adds	r3, #28
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	4a0b      	ldr	r2, [pc, #44]	@ (80176c0 <InitPin+0x330>)
 8017692:	4293      	cmp	r3, r2
 8017694:	d116      	bne.n	80176c4 <InitPin+0x334>
    		    	 __HAL_RCC_TIM3_CLK_ENABLE();
 8017696:	4b09      	ldr	r3, [pc, #36]	@ (80176bc <InitPin+0x32c>)
 8017698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801769a:	4a08      	ldr	r2, [pc, #32]	@ (80176bc <InitPin+0x32c>)
 801769c:	f043 0302 	orr.w	r3, r3, #2
 80176a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80176a2:	4b06      	ldr	r3, [pc, #24]	@ (80176bc <InitPin+0x32c>)
 80176a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80176a6:	f003 0302 	and.w	r3, r3, #2
 80176aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80176ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80176ae:	e122      	b.n	80178f6 <InitPin+0x566>
 80176b0:	2000066c 	.word	0x2000066c
 80176b4:	08031670 	.word	0x08031670
 80176b8:	40010000 	.word	0x40010000
 80176bc:	40023800 	.word	0x40023800
 80176c0:	40000400 	.word	0x40000400
    		     } else if(PinsInfo[i].tim == TIM4){
 80176c4:	4974      	ldr	r1, [pc, #464]	@ (8017898 <InitPin+0x508>)
 80176c6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80176ca:	4613      	mov	r3, r2
 80176cc:	009b      	lsls	r3, r3, #2
 80176ce:	4413      	add	r3, r2
 80176d0:	00db      	lsls	r3, r3, #3
 80176d2:	440b      	add	r3, r1
 80176d4:	331c      	adds	r3, #28
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	4a70      	ldr	r2, [pc, #448]	@ (801789c <InitPin+0x50c>)
 80176da:	4293      	cmp	r3, r2
 80176dc:	d10c      	bne.n	80176f8 <InitPin+0x368>
    		    	 __HAL_RCC_TIM4_CLK_ENABLE();
 80176de:	4b70      	ldr	r3, [pc, #448]	@ (80178a0 <InitPin+0x510>)
 80176e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80176e2:	4a6f      	ldr	r2, [pc, #444]	@ (80178a0 <InitPin+0x510>)
 80176e4:	f043 0304 	orr.w	r3, r3, #4
 80176e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80176ea:	4b6d      	ldr	r3, [pc, #436]	@ (80178a0 <InitPin+0x510>)
 80176ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80176ee:	f003 0304 	and.w	r3, r3, #4
 80176f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80176f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80176f6:	e0fe      	b.n	80178f6 <InitPin+0x566>
    		     } else if(PinsInfo[i].tim == TIM5){
 80176f8:	4967      	ldr	r1, [pc, #412]	@ (8017898 <InitPin+0x508>)
 80176fa:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80176fe:	4613      	mov	r3, r2
 8017700:	009b      	lsls	r3, r3, #2
 8017702:	4413      	add	r3, r2
 8017704:	00db      	lsls	r3, r3, #3
 8017706:	440b      	add	r3, r1
 8017708:	331c      	adds	r3, #28
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	4a65      	ldr	r2, [pc, #404]	@ (80178a4 <InitPin+0x514>)
 801770e:	4293      	cmp	r3, r2
 8017710:	d10c      	bne.n	801772c <InitPin+0x39c>
    		    	 __HAL_RCC_TIM5_CLK_ENABLE();
 8017712:	4b63      	ldr	r3, [pc, #396]	@ (80178a0 <InitPin+0x510>)
 8017714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017716:	4a62      	ldr	r2, [pc, #392]	@ (80178a0 <InitPin+0x510>)
 8017718:	f043 0308 	orr.w	r3, r3, #8
 801771c:	6413      	str	r3, [r2, #64]	@ 0x40
 801771e:	4b60      	ldr	r3, [pc, #384]	@ (80178a0 <InitPin+0x510>)
 8017720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017722:	f003 0308 	and.w	r3, r3, #8
 8017726:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801772a:	e0e4      	b.n	80178f6 <InitPin+0x566>
    		     } else if(PinsInfo[i].tim == TIM7){
 801772c:	495a      	ldr	r1, [pc, #360]	@ (8017898 <InitPin+0x508>)
 801772e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8017732:	4613      	mov	r3, r2
 8017734:	009b      	lsls	r3, r3, #2
 8017736:	4413      	add	r3, r2
 8017738:	00db      	lsls	r3, r3, #3
 801773a:	440b      	add	r3, r1
 801773c:	331c      	adds	r3, #28
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	4a59      	ldr	r2, [pc, #356]	@ (80178a8 <InitPin+0x518>)
 8017742:	4293      	cmp	r3, r2
 8017744:	d10c      	bne.n	8017760 <InitPin+0x3d0>
    		    	 __HAL_RCC_TIM7_CLK_ENABLE();
 8017746:	4b56      	ldr	r3, [pc, #344]	@ (80178a0 <InitPin+0x510>)
 8017748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801774a:	4a55      	ldr	r2, [pc, #340]	@ (80178a0 <InitPin+0x510>)
 801774c:	f043 0320 	orr.w	r3, r3, #32
 8017750:	6413      	str	r3, [r2, #64]	@ 0x40
 8017752:	4b53      	ldr	r3, [pc, #332]	@ (80178a0 <InitPin+0x510>)
 8017754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017756:	f003 0320 	and.w	r3, r3, #32
 801775a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801775c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801775e:	e0ca      	b.n	80178f6 <InitPin+0x566>
    		     } else if(PinsInfo[i].tim == TIM8){
 8017760:	494d      	ldr	r1, [pc, #308]	@ (8017898 <InitPin+0x508>)
 8017762:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8017766:	4613      	mov	r3, r2
 8017768:	009b      	lsls	r3, r3, #2
 801776a:	4413      	add	r3, r2
 801776c:	00db      	lsls	r3, r3, #3
 801776e:	440b      	add	r3, r1
 8017770:	331c      	adds	r3, #28
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	4a4d      	ldr	r2, [pc, #308]	@ (80178ac <InitPin+0x51c>)
 8017776:	4293      	cmp	r3, r2
 8017778:	d10c      	bne.n	8017794 <InitPin+0x404>
    		    	 __HAL_RCC_TIM8_CLK_ENABLE();
 801777a:	4b49      	ldr	r3, [pc, #292]	@ (80178a0 <InitPin+0x510>)
 801777c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801777e:	4a48      	ldr	r2, [pc, #288]	@ (80178a0 <InitPin+0x510>)
 8017780:	f043 0302 	orr.w	r3, r3, #2
 8017784:	6453      	str	r3, [r2, #68]	@ 0x44
 8017786:	4b46      	ldr	r3, [pc, #280]	@ (80178a0 <InitPin+0x510>)
 8017788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801778a:	f003 0302 	and.w	r3, r3, #2
 801778e:	647b      	str	r3, [r7, #68]	@ 0x44
 8017790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017792:	e0b0      	b.n	80178f6 <InitPin+0x566>
    		     } else if(PinsInfo[i].tim == TIM9){
 8017794:	4940      	ldr	r1, [pc, #256]	@ (8017898 <InitPin+0x508>)
 8017796:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801779a:	4613      	mov	r3, r2
 801779c:	009b      	lsls	r3, r3, #2
 801779e:	4413      	add	r3, r2
 80177a0:	00db      	lsls	r3, r3, #3
 80177a2:	440b      	add	r3, r1
 80177a4:	331c      	adds	r3, #28
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	4a41      	ldr	r2, [pc, #260]	@ (80178b0 <InitPin+0x520>)
 80177aa:	4293      	cmp	r3, r2
 80177ac:	d10c      	bne.n	80177c8 <InitPin+0x438>
    		    	 __HAL_RCC_TIM9_CLK_ENABLE();
 80177ae:	4b3c      	ldr	r3, [pc, #240]	@ (80178a0 <InitPin+0x510>)
 80177b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80177b2:	4a3b      	ldr	r2, [pc, #236]	@ (80178a0 <InitPin+0x510>)
 80177b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80177b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80177ba:	4b39      	ldr	r3, [pc, #228]	@ (80178a0 <InitPin+0x510>)
 80177bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80177be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80177c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80177c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80177c6:	e096      	b.n	80178f6 <InitPin+0x566>
    		     } else if(PinsInfo[i].tim == TIM10){
 80177c8:	4933      	ldr	r1, [pc, #204]	@ (8017898 <InitPin+0x508>)
 80177ca:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80177ce:	4613      	mov	r3, r2
 80177d0:	009b      	lsls	r3, r3, #2
 80177d2:	4413      	add	r3, r2
 80177d4:	00db      	lsls	r3, r3, #3
 80177d6:	440b      	add	r3, r1
 80177d8:	331c      	adds	r3, #28
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	4a35      	ldr	r2, [pc, #212]	@ (80178b4 <InitPin+0x524>)
 80177de:	4293      	cmp	r3, r2
 80177e0:	d10c      	bne.n	80177fc <InitPin+0x46c>
    		    	 __HAL_RCC_TIM10_CLK_ENABLE();
 80177e2:	4b2f      	ldr	r3, [pc, #188]	@ (80178a0 <InitPin+0x510>)
 80177e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80177e6:	4a2e      	ldr	r2, [pc, #184]	@ (80178a0 <InitPin+0x510>)
 80177e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80177ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80177ee:	4b2c      	ldr	r3, [pc, #176]	@ (80178a0 <InitPin+0x510>)
 80177f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80177f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80177f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80177f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80177fa:	e07c      	b.n	80178f6 <InitPin+0x566>
    		     } else if(PinsInfo[i].tim == TIM11){
 80177fc:	4926      	ldr	r1, [pc, #152]	@ (8017898 <InitPin+0x508>)
 80177fe:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8017802:	4613      	mov	r3, r2
 8017804:	009b      	lsls	r3, r3, #2
 8017806:	4413      	add	r3, r2
 8017808:	00db      	lsls	r3, r3, #3
 801780a:	440b      	add	r3, r1
 801780c:	331c      	adds	r3, #28
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	4a29      	ldr	r2, [pc, #164]	@ (80178b8 <InitPin+0x528>)
 8017812:	4293      	cmp	r3, r2
 8017814:	d10c      	bne.n	8017830 <InitPin+0x4a0>
    		    	 __HAL_RCC_TIM11_CLK_ENABLE();
 8017816:	4b22      	ldr	r3, [pc, #136]	@ (80178a0 <InitPin+0x510>)
 8017818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801781a:	4a21      	ldr	r2, [pc, #132]	@ (80178a0 <InitPin+0x510>)
 801781c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8017820:	6453      	str	r3, [r2, #68]	@ 0x44
 8017822:	4b1f      	ldr	r3, [pc, #124]	@ (80178a0 <InitPin+0x510>)
 8017824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017826:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801782a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801782c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801782e:	e062      	b.n	80178f6 <InitPin+0x566>
    		     } else if(PinsInfo[i].tim == TIM12){
 8017830:	4919      	ldr	r1, [pc, #100]	@ (8017898 <InitPin+0x508>)
 8017832:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8017836:	4613      	mov	r3, r2
 8017838:	009b      	lsls	r3, r3, #2
 801783a:	4413      	add	r3, r2
 801783c:	00db      	lsls	r3, r3, #3
 801783e:	440b      	add	r3, r1
 8017840:	331c      	adds	r3, #28
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	4a1d      	ldr	r2, [pc, #116]	@ (80178bc <InitPin+0x52c>)
 8017846:	4293      	cmp	r3, r2
 8017848:	d10c      	bne.n	8017864 <InitPin+0x4d4>
    		    	 __HAL_RCC_TIM12_CLK_ENABLE();
 801784a:	4b15      	ldr	r3, [pc, #84]	@ (80178a0 <InitPin+0x510>)
 801784c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801784e:	4a14      	ldr	r2, [pc, #80]	@ (80178a0 <InitPin+0x510>)
 8017850:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017854:	6413      	str	r3, [r2, #64]	@ 0x40
 8017856:	4b12      	ldr	r3, [pc, #72]	@ (80178a0 <InitPin+0x510>)
 8017858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801785a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801785e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017862:	e048      	b.n	80178f6 <InitPin+0x566>
    		     } else if(PinsInfo[i].tim == TIM13){
 8017864:	490c      	ldr	r1, [pc, #48]	@ (8017898 <InitPin+0x508>)
 8017866:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801786a:	4613      	mov	r3, r2
 801786c:	009b      	lsls	r3, r3, #2
 801786e:	4413      	add	r3, r2
 8017870:	00db      	lsls	r3, r3, #3
 8017872:	440b      	add	r3, r1
 8017874:	331c      	adds	r3, #28
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	4a11      	ldr	r2, [pc, #68]	@ (80178c0 <InitPin+0x530>)
 801787a:	4293      	cmp	r3, r2
 801787c:	d122      	bne.n	80178c4 <InitPin+0x534>
    		    	 __HAL_RCC_TIM13_CLK_ENABLE();
 801787e:	4b08      	ldr	r3, [pc, #32]	@ (80178a0 <InitPin+0x510>)
 8017880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017882:	4a07      	ldr	r2, [pc, #28]	@ (80178a0 <InitPin+0x510>)
 8017884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017888:	6413      	str	r3, [r2, #64]	@ 0x40
 801788a:	4b05      	ldr	r3, [pc, #20]	@ (80178a0 <InitPin+0x510>)
 801788c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801788e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017892:	633b      	str	r3, [r7, #48]	@ 0x30
 8017894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017896:	e02e      	b.n	80178f6 <InitPin+0x566>
 8017898:	08031670 	.word	0x08031670
 801789c:	40000800 	.word	0x40000800
 80178a0:	40023800 	.word	0x40023800
 80178a4:	40000c00 	.word	0x40000c00
 80178a8:	40001400 	.word	0x40001400
 80178ac:	40010400 	.word	0x40010400
 80178b0:	40014000 	.word	0x40014000
 80178b4:	40014400 	.word	0x40014400
 80178b8:	40014800 	.word	0x40014800
 80178bc:	40001800 	.word	0x40001800
 80178c0:	40001c00 	.word	0x40001c00
    		     } else if(PinsInfo[i].tim == TIM14){
 80178c4:	49a5      	ldr	r1, [pc, #660]	@ (8017b5c <InitPin+0x7cc>)
 80178c6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80178ca:	4613      	mov	r3, r2
 80178cc:	009b      	lsls	r3, r3, #2
 80178ce:	4413      	add	r3, r2
 80178d0:	00db      	lsls	r3, r3, #3
 80178d2:	440b      	add	r3, r1
 80178d4:	331c      	adds	r3, #28
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	4aa1      	ldr	r2, [pc, #644]	@ (8017b60 <InitPin+0x7d0>)
 80178da:	4293      	cmp	r3, r2
 80178dc:	d10b      	bne.n	80178f6 <InitPin+0x566>
    		    	 __HAL_RCC_TIM14_CLK_ENABLE();
 80178de:	4ba1      	ldr	r3, [pc, #644]	@ (8017b64 <InitPin+0x7d4>)
 80178e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80178e2:	4aa0      	ldr	r2, [pc, #640]	@ (8017b64 <InitPin+0x7d4>)
 80178e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80178e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80178ea:	4b9e      	ldr	r3, [pc, #632]	@ (8017b64 <InitPin+0x7d4>)
 80178ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80178ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80178f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80178f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    		     }
    		   //RCC->APB2ENR |= (1 << 0);
    		//
    		//
    		      TIM_MasterConfigTypeDef sMasterConfig = {0};
 80178f6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80178fa:	2200      	movs	r2, #0
 80178fc:	601a      	str	r2, [r3, #0]
 80178fe:	605a      	str	r2, [r3, #4]
 8017900:	609a      	str	r2, [r3, #8]
    		      TIM_OC_InitTypeDef sConfigOC = {0};
 8017902:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8017906:	2200      	movs	r2, #0
 8017908:	601a      	str	r2, [r3, #0]
 801790a:	605a      	str	r2, [r3, #4]
 801790c:	609a      	str	r2, [r3, #8]
 801790e:	60da      	str	r2, [r3, #12]
 8017910:	611a      	str	r2, [r3, #16]
 8017912:	615a      	str	r2, [r3, #20]
 8017914:	619a      	str	r2, [r3, #24]
    		      TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8017916:	463b      	mov	r3, r7
 8017918:	222c      	movs	r2, #44	@ 0x2c
 801791a:	2100      	movs	r1, #0
 801791c:	4618      	mov	r0, r3
 801791e:	f014 f8f5 	bl	802bb0c <memset>

    		      /* USER CODE BEGIN TIM1_Init 1 */

    		      /* USER CODE END TIM1_Init 1 */
    		      htim[i].Instance = PinsInfo[i].tim;
 8017922:	498e      	ldr	r1, [pc, #568]	@ (8017b5c <InitPin+0x7cc>)
 8017924:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8017928:	4613      	mov	r3, r2
 801792a:	009b      	lsls	r3, r3, #2
 801792c:	4413      	add	r3, r2
 801792e:	00db      	lsls	r3, r3, #3
 8017930:	440b      	add	r3, r1
 8017932:	331c      	adds	r3, #28
 8017934:	681a      	ldr	r2, [r3, #0]
 8017936:	498c      	ldr	r1, [pc, #560]	@ (8017b68 <InitPin+0x7d8>)
 8017938:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801793c:	204c      	movs	r0, #76	@ 0x4c
 801793e:	fb00 f303 	mul.w	r3, r0, r3
 8017942:	440b      	add	r3, r1
 8017944:	601a      	str	r2, [r3, #0]
    		      htim[i].Init.Prescaler = 216-1;
 8017946:	4a88      	ldr	r2, [pc, #544]	@ (8017b68 <InitPin+0x7d8>)
 8017948:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801794c:	214c      	movs	r1, #76	@ 0x4c
 801794e:	fb01 f303 	mul.w	r3, r1, r3
 8017952:	4413      	add	r3, r2
 8017954:	3304      	adds	r3, #4
 8017956:	22d7      	movs	r2, #215	@ 0xd7
 8017958:	601a      	str	r2, [r3, #0]
    		      htim[i].Init.CounterMode = TIM_COUNTERMODE_UP;
 801795a:	4a83      	ldr	r2, [pc, #524]	@ (8017b68 <InitPin+0x7d8>)
 801795c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017960:	214c      	movs	r1, #76	@ 0x4c
 8017962:	fb01 f303 	mul.w	r3, r1, r3
 8017966:	4413      	add	r3, r2
 8017968:	3308      	adds	r3, #8
 801796a:	2200      	movs	r2, #0
 801796c:	601a      	str	r2, [r3, #0]
    		      htim[i].Init.Period = 100-1;
 801796e:	4a7e      	ldr	r2, [pc, #504]	@ (8017b68 <InitPin+0x7d8>)
 8017970:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017974:	214c      	movs	r1, #76	@ 0x4c
 8017976:	fb01 f303 	mul.w	r3, r1, r3
 801797a:	4413      	add	r3, r2
 801797c:	330c      	adds	r3, #12
 801797e:	2263      	movs	r2, #99	@ 0x63
 8017980:	601a      	str	r2, [r3, #0]
    		      htim[i].Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017982:	4a79      	ldr	r2, [pc, #484]	@ (8017b68 <InitPin+0x7d8>)
 8017984:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017988:	214c      	movs	r1, #76	@ 0x4c
 801798a:	fb01 f303 	mul.w	r3, r1, r3
 801798e:	4413      	add	r3, r2
 8017990:	3310      	adds	r3, #16
 8017992:	2200      	movs	r2, #0
 8017994:	601a      	str	r2, [r3, #0]
    		      htim[i].Init.RepetitionCounter = 0;
 8017996:	4a74      	ldr	r2, [pc, #464]	@ (8017b68 <InitPin+0x7d8>)
 8017998:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801799c:	214c      	movs	r1, #76	@ 0x4c
 801799e:	fb01 f303 	mul.w	r3, r1, r3
 80179a2:	4413      	add	r3, r2
 80179a4:	3314      	adds	r3, #20
 80179a6:	2200      	movs	r2, #0
 80179a8:	601a      	str	r2, [r3, #0]
    		      htim[i].Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80179aa:	4a6f      	ldr	r2, [pc, #444]	@ (8017b68 <InitPin+0x7d8>)
 80179ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80179b0:	214c      	movs	r1, #76	@ 0x4c
 80179b2:	fb01 f303 	mul.w	r3, r1, r3
 80179b6:	4413      	add	r3, r2
 80179b8:	3318      	adds	r3, #24
 80179ba:	2200      	movs	r2, #0
 80179bc:	601a      	str	r2, [r3, #0]
    		      if (HAL_TIM_PWM_Init(&htim[i]) != HAL_OK)
 80179be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80179c2:	224c      	movs	r2, #76	@ 0x4c
 80179c4:	fb02 f303 	mul.w	r3, r2, r3
 80179c8:	4a67      	ldr	r2, [pc, #412]	@ (8017b68 <InitPin+0x7d8>)
 80179ca:	4413      	add	r3, r2
 80179cc:	4618      	mov	r0, r3
 80179ce:	f005 f9c7 	bl	801cd60 <HAL_TIM_PWM_Init>
 80179d2:	4603      	mov	r3, r0
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d001      	beq.n	80179dc <InitPin+0x64c>
    		      {
    		        Error_Handler();
 80179d8:	f7ee fa4a 	bl	8005e70 <Error_Handler>
    		      }
    		      sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80179dc:	2300      	movs	r3, #0
 80179de:	67fb      	str	r3, [r7, #124]	@ 0x7c
    		      sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80179e0:	2300      	movs	r3, #0
 80179e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    		      sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80179e6:	2300      	movs	r3, #0
 80179e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    		      if (HAL_TIMEx_MasterConfigSynchronization(&htim[i], &sMasterConfig) != HAL_OK)
 80179ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80179f0:	224c      	movs	r2, #76	@ 0x4c
 80179f2:	fb02 f303 	mul.w	r3, r2, r3
 80179f6:	4a5c      	ldr	r2, [pc, #368]	@ (8017b68 <InitPin+0x7d8>)
 80179f8:	4413      	add	r3, r2
 80179fa:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80179fe:	4611      	mov	r1, r2
 8017a00:	4618      	mov	r0, r3
 8017a02:	f006 fa25 	bl	801de50 <HAL_TIMEx_MasterConfigSynchronization>
 8017a06:	4603      	mov	r3, r0
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d001      	beq.n	8017a10 <InitPin+0x680>
    		      {
    		        Error_Handler();
 8017a0c:	f7ee fa30 	bl	8005e70 <Error_Handler>
    		      }
    		      sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8017a10:	2360      	movs	r3, #96	@ 0x60
 8017a12:	663b      	str	r3, [r7, #96]	@ 0x60
    		      sConfigOC.Pulse = 0;
 8017a14:	2300      	movs	r3, #0
 8017a16:	667b      	str	r3, [r7, #100]	@ 0x64
    		      sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8017a18:	2300      	movs	r3, #0
 8017a1a:	66bb      	str	r3, [r7, #104]	@ 0x68
    		      sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8017a1c:	2300      	movs	r3, #0
 8017a1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    		      sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8017a20:	2300      	movs	r3, #0
 8017a22:	673b      	str	r3, [r7, #112]	@ 0x70
    		      sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8017a24:	2300      	movs	r3, #0
 8017a26:	677b      	str	r3, [r7, #116]	@ 0x74
    		      sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8017a28:	2300      	movs	r3, #0
 8017a2a:	67bb      	str	r3, [r7, #120]	@ 0x78
    		      if (HAL_TIM_PWM_ConfigChannel(&htim[i], &sConfigOC, PinsInfo[i].tim_channel) != HAL_OK)
 8017a2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017a30:	224c      	movs	r2, #76	@ 0x4c
 8017a32:	fb02 f303 	mul.w	r3, r2, r3
 8017a36:	4a4c      	ldr	r2, [pc, #304]	@ (8017b68 <InitPin+0x7d8>)
 8017a38:	1898      	adds	r0, r3, r2
 8017a3a:	4948      	ldr	r1, [pc, #288]	@ (8017b5c <InitPin+0x7cc>)
 8017a3c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8017a40:	4613      	mov	r3, r2
 8017a42:	009b      	lsls	r3, r3, #2
 8017a44:	4413      	add	r3, r2
 8017a46:	00db      	lsls	r3, r3, #3
 8017a48:	440b      	add	r3, r1
 8017a4a:	3320      	adds	r3, #32
 8017a4c:	681a      	ldr	r2, [r3, #0]
 8017a4e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8017a52:	4619      	mov	r1, r3
 8017a54:	f005 fbe8 	bl	801d228 <HAL_TIM_PWM_ConfigChannel>
 8017a58:	4603      	mov	r3, r0
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d001      	beq.n	8017a62 <InitPin+0x6d2>
    		      {
    		        Error_Handler();
 8017a5e:	f7ee fa07 	bl	8005e70 <Error_Handler>
    		      }
    		      sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8017a62:	2300      	movs	r3, #0
 8017a64:	603b      	str	r3, [r7, #0]
    		      sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8017a66:	2300      	movs	r3, #0
 8017a68:	607b      	str	r3, [r7, #4]
    		      sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8017a6a:	2300      	movs	r3, #0
 8017a6c:	60bb      	str	r3, [r7, #8]
    		      sBreakDeadTimeConfig.DeadTime = 0;
 8017a6e:	2300      	movs	r3, #0
 8017a70:	60fb      	str	r3, [r7, #12]
    		      sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8017a72:	2300      	movs	r3, #0
 8017a74:	613b      	str	r3, [r7, #16]
    		      sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8017a76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8017a7a:	617b      	str	r3, [r7, #20]
    		      sBreakDeadTimeConfig.BreakFilter = 0;
 8017a7c:	2300      	movs	r3, #0
 8017a7e:	61bb      	str	r3, [r7, #24]
    		      sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8017a80:	2300      	movs	r3, #0
 8017a82:	61fb      	str	r3, [r7, #28]
    		      sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8017a84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8017a88:	623b      	str	r3, [r7, #32]
    		      sBreakDeadTimeConfig.Break2Filter = 0;
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    		      sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8017a8e:	2300      	movs	r3, #0
 8017a90:	62bb      	str	r3, [r7, #40]	@ 0x28
    		      if (HAL_TIMEx_ConfigBreakDeadTime(&htim[i], &sBreakDeadTimeConfig) != HAL_OK)
 8017a92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017a96:	224c      	movs	r2, #76	@ 0x4c
 8017a98:	fb02 f303 	mul.w	r3, r2, r3
 8017a9c:	4a32      	ldr	r2, [pc, #200]	@ (8017b68 <InitPin+0x7d8>)
 8017a9e:	4413      	add	r3, r2
 8017aa0:	463a      	mov	r2, r7
 8017aa2:	4611      	mov	r1, r2
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	f006 fa61 	bl	801df6c <HAL_TIMEx_ConfigBreakDeadTime>
 8017aaa:	4603      	mov	r3, r0
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d001      	beq.n	8017ab4 <InitPin+0x724>
    		      {
    		        Error_Handler();
 8017ab0:	f7ee f9de 	bl	8005e70 <Error_Handler>
    		      }
    		      /* USER CODE BEGIN TIM1_Init 2 */

    		      /* USER CODE END TIM1_Init 2 */
    		      GPIO_InitStruct.Pin = PinsInfo[i].hal_pin;
 8017ab4:	4929      	ldr	r1, [pc, #164]	@ (8017b5c <InitPin+0x7cc>)
 8017ab6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8017aba:	4613      	mov	r3, r2
 8017abc:	009b      	lsls	r3, r3, #2
 8017abe:	4413      	add	r3, r2
 8017ac0:	00db      	lsls	r3, r3, #3
 8017ac2:	440b      	add	r3, r1
 8017ac4:	330c      	adds	r3, #12
 8017ac6:	881b      	ldrh	r3, [r3, #0]
 8017ac8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    		      //GPIO_InitStruct.Pin = GPIO_PIN_9;
    		      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017acc:	2302      	movs	r3, #2
 8017ace:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    		      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    		      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017ad8:	2300      	movs	r3, #0
 8017ada:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    		      GPIO_InitStruct.Alternate = PinsInfo[i].af;
 8017ade:	491f      	ldr	r1, [pc, #124]	@ (8017b5c <InitPin+0x7cc>)
 8017ae0:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8017ae4:	4613      	mov	r3, r2
 8017ae6:	009b      	lsls	r3, r3, #2
 8017ae8:	4413      	add	r3, r2
 8017aea:	00db      	lsls	r3, r3, #3
 8017aec:	440b      	add	r3, r1
 8017aee:	3324      	adds	r3, #36	@ 0x24
 8017af0:	881b      	ldrh	r3, [r3, #0]
 8017af2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    		      //HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
    		      HAL_GPIO_Init(PinsInfo[i].gpio_name, &GPIO_InitStruct);
 8017af6:	4919      	ldr	r1, [pc, #100]	@ (8017b5c <InitPin+0x7cc>)
 8017af8:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8017afc:	4613      	mov	r3, r2
 8017afe:	009b      	lsls	r3, r3, #2
 8017b00:	4413      	add	r3, r2
 8017b02:	00db      	lsls	r3, r3, #3
 8017b04:	440b      	add	r3, r1
 8017b06:	3310      	adds	r3, #16
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8017b0e:	4611      	mov	r1, r2
 8017b10:	4618      	mov	r0, r3
 8017b12:	f001 f9b9 	bl	8018e88 <HAL_GPIO_Init>

    		      //HAL_TIM_MspPostInit(&htim[i]);

    		      HAL_TIM_PWM_Start(&htim[i], PinsInfo[i].tim_channel);
 8017b16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017b1a:	224c      	movs	r2, #76	@ 0x4c
 8017b1c:	fb02 f303 	mul.w	r3, r2, r3
 8017b20:	4a11      	ldr	r2, [pc, #68]	@ (8017b68 <InitPin+0x7d8>)
 8017b22:	1898      	adds	r0, r3, r2
 8017b24:	490d      	ldr	r1, [pc, #52]	@ (8017b5c <InitPin+0x7cc>)
 8017b26:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8017b2a:	4613      	mov	r3, r2
 8017b2c:	009b      	lsls	r3, r3, #2
 8017b2e:	4413      	add	r3, r2
 8017b30:	00db      	lsls	r3, r3, #3
 8017b32:	440b      	add	r3, r1
 8017b34:	3320      	adds	r3, #32
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	4619      	mov	r1, r3
 8017b3a:	f005 f973 	bl	801ce24 <HAL_TIM_PWM_Start>
    for (i = 0; i < NUMPIN; i++){
 8017b3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017b42:	3301      	adds	r3, #1
 8017b44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8017b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017b4c:	2b58      	cmp	r3, #88	@ 0x58
 8017b4e:	f77f ac31 	ble.w	80173b4 <InitPin+0x24>

    	}
    }
}
 8017b52:	bf00      	nop
 8017b54:	bf00      	nop
 8017b56:	37a0      	adds	r7, #160	@ 0xa0
 8017b58:	46bd      	mov	sp, r7
 8017b5a:	bd80      	pop	{r7, pc}
 8017b5c:	08031670 	.word	0x08031670
 8017b60:	40002000 	.word	0x40002000
 8017b64:	40023800 	.word	0x40023800
 8017b68:	2000ed90 	.word	0x2000ed90

08017b6c <InitMultibutton>:


void InitMultibutton(void) {
 8017b6c:	b580      	push	{r7, lr}
 8017b6e:	b082      	sub	sp, #8
 8017b70:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < NUMPIN; i++){
 8017b72:	2300      	movs	r3, #0
 8017b74:	71fb      	strb	r3, [r7, #7]
 8017b76:	e1af      	b.n	8017ed8 <InitMultibutton+0x36c>


		// Инциализация кнопки PULLDOWN
		if (PinsConf[i].ptype == 2) {
 8017b78:	79fb      	ldrb	r3, [r7, #7]
 8017b7a:	4aa0      	ldr	r2, [pc, #640]	@ (8017dfc <InitMultibutton+0x290>)
 8017b7c:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8017b80:	fb01 f303 	mul.w	r3, r1, r3
 8017b84:	4413      	add	r3, r2
 8017b86:	3311      	adds	r3, #17
 8017b88:	781b      	ldrb	r3, [r3, #0]
 8017b8a:	2b02      	cmp	r3, #2
 8017b8c:	f040 80c5 	bne.w	8017d1a <InitMultibutton+0x1ae>

			button_init(&button[i], read_button_level, 1, i);
 8017b90:	79fb      	ldrb	r3, [r7, #7]
 8017b92:	222c      	movs	r2, #44	@ 0x2c
 8017b94:	fb02 f303 	mul.w	r3, r2, r3
 8017b98:	4a99      	ldr	r2, [pc, #612]	@ (8017e00 <InitMultibutton+0x294>)
 8017b9a:	1898      	adds	r0, r3, r2
 8017b9c:	79fb      	ldrb	r3, [r7, #7]
 8017b9e:	2201      	movs	r2, #1
 8017ba0:	4998      	ldr	r1, [pc, #608]	@ (8017e04 <InitMultibutton+0x298>)
 8017ba2:	f7fb fd45 	bl	8013630 <button_init>

			if(PinsConf[i].sclick == 2){
 8017ba6:	79fb      	ldrb	r3, [r7, #7]
 8017ba8:	4a94      	ldr	r2, [pc, #592]	@ (8017dfc <InitMultibutton+0x290>)
 8017baa:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8017bae:	fb01 f303 	mul.w	r3, r1, r3
 8017bb2:	4413      	add	r3, r2
 8017bb4:	3312      	adds	r3, #18
 8017bb6:	781b      	ldrb	r3, [r3, #0]
 8017bb8:	2b02      	cmp	r3, #2
 8017bba:	d14d      	bne.n	8017c58 <InitMultibutton+0xec>
				// PWM кнопка

				button_attach(&button[i], PRESS_DOWN, (BtnCallback) pwm_event_handler);
 8017bbc:	79fb      	ldrb	r3, [r7, #7]
 8017bbe:	222c      	movs	r2, #44	@ 0x2c
 8017bc0:	fb02 f303 	mul.w	r3, r2, r3
 8017bc4:	4a8e      	ldr	r2, [pc, #568]	@ (8017e00 <InitMultibutton+0x294>)
 8017bc6:	4413      	add	r3, r2
 8017bc8:	4a8f      	ldr	r2, [pc, #572]	@ (8017e08 <InitMultibutton+0x29c>)
 8017bca:	2100      	movs	r1, #0
 8017bcc:	4618      	mov	r0, r3
 8017bce:	f7fb fd66 	bl	801369e <button_attach>
				button_attach(&button[i], PRESS_UP, (BtnCallback) pwm_event_handler);
 8017bd2:	79fb      	ldrb	r3, [r7, #7]
 8017bd4:	222c      	movs	r2, #44	@ 0x2c
 8017bd6:	fb02 f303 	mul.w	r3, r2, r3
 8017bda:	4a89      	ldr	r2, [pc, #548]	@ (8017e00 <InitMultibutton+0x294>)
 8017bdc:	4413      	add	r3, r2
 8017bde:	4a8a      	ldr	r2, [pc, #552]	@ (8017e08 <InitMultibutton+0x29c>)
 8017be0:	2101      	movs	r1, #1
 8017be2:	4618      	mov	r0, r3
 8017be4:	f7fb fd5b 	bl	801369e <button_attach>
				button_attach(&button[i], LONG_PRESS_START, (BtnCallback) pwm_event_handler);
 8017be8:	79fb      	ldrb	r3, [r7, #7]
 8017bea:	222c      	movs	r2, #44	@ 0x2c
 8017bec:	fb02 f303 	mul.w	r3, r2, r3
 8017bf0:	4a83      	ldr	r2, [pc, #524]	@ (8017e00 <InitMultibutton+0x294>)
 8017bf2:	4413      	add	r3, r2
 8017bf4:	4a84      	ldr	r2, [pc, #528]	@ (8017e08 <InitMultibutton+0x29c>)
 8017bf6:	2105      	movs	r1, #5
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	f7fb fd50 	bl	801369e <button_attach>
				button_attach(&button[i], LONG_PRESS_HOLD, (BtnCallback) pwm_event_handler);
 8017bfe:	79fb      	ldrb	r3, [r7, #7]
 8017c00:	222c      	movs	r2, #44	@ 0x2c
 8017c02:	fb02 f303 	mul.w	r3, r2, r3
 8017c06:	4a7e      	ldr	r2, [pc, #504]	@ (8017e00 <InitMultibutton+0x294>)
 8017c08:	4413      	add	r3, r2
 8017c0a:	4a7f      	ldr	r2, [pc, #508]	@ (8017e08 <InitMultibutton+0x29c>)
 8017c0c:	2106      	movs	r1, #6
 8017c0e:	4618      	mov	r0, r3
 8017c10:	f7fb fd45 	bl	801369e <button_attach>
				button_attach(&button[i], SINGLE_CLICK, (BtnCallback) pwm_event_handler);
 8017c14:	79fb      	ldrb	r3, [r7, #7]
 8017c16:	222c      	movs	r2, #44	@ 0x2c
 8017c18:	fb02 f303 	mul.w	r3, r2, r3
 8017c1c:	4a78      	ldr	r2, [pc, #480]	@ (8017e00 <InitMultibutton+0x294>)
 8017c1e:	4413      	add	r3, r2
 8017c20:	4a79      	ldr	r2, [pc, #484]	@ (8017e08 <InitMultibutton+0x29c>)
 8017c22:	2103      	movs	r1, #3
 8017c24:	4618      	mov	r0, r3
 8017c26:	f7fb fd3a 	bl	801369e <button_attach>
				button_attach(&button[i], DOUBLE_CLICK, (BtnCallback) pwm_event_handler);
 8017c2a:	79fb      	ldrb	r3, [r7, #7]
 8017c2c:	222c      	movs	r2, #44	@ 0x2c
 8017c2e:	fb02 f303 	mul.w	r3, r2, r3
 8017c32:	4a73      	ldr	r2, [pc, #460]	@ (8017e00 <InitMultibutton+0x294>)
 8017c34:	4413      	add	r3, r2
 8017c36:	4a74      	ldr	r2, [pc, #464]	@ (8017e08 <InitMultibutton+0x29c>)
 8017c38:	2104      	movs	r1, #4
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	f7fb fd2f 	bl	801369e <button_attach>
				button_attach(&button[i], PRESS_REPEAT, (BtnCallback) pwm_event_handler);
 8017c40:	79fb      	ldrb	r3, [r7, #7]
 8017c42:	222c      	movs	r2, #44	@ 0x2c
 8017c44:	fb02 f303 	mul.w	r3, r2, r3
 8017c48:	4a6d      	ldr	r2, [pc, #436]	@ (8017e00 <InitMultibutton+0x294>)
 8017c4a:	4413      	add	r3, r2
 8017c4c:	4a6e      	ldr	r2, [pc, #440]	@ (8017e08 <InitMultibutton+0x29c>)
 8017c4e:	2102      	movs	r1, #2
 8017c50:	4618      	mov	r0, r3
 8017c52:	f7fb fd24 	bl	801369e <button_attach>
 8017c56:	e04c      	b.n	8017cf2 <InitMultibutton+0x186>
			} else {
				// просто кнопка
				button_attach(&button[i], PRESS_DOWN, (BtnCallback) button_event_handler);
 8017c58:	79fb      	ldrb	r3, [r7, #7]
 8017c5a:	222c      	movs	r2, #44	@ 0x2c
 8017c5c:	fb02 f303 	mul.w	r3, r2, r3
 8017c60:	4a67      	ldr	r2, [pc, #412]	@ (8017e00 <InitMultibutton+0x294>)
 8017c62:	4413      	add	r3, r2
 8017c64:	4a69      	ldr	r2, [pc, #420]	@ (8017e0c <InitMultibutton+0x2a0>)
 8017c66:	2100      	movs	r1, #0
 8017c68:	4618      	mov	r0, r3
 8017c6a:	f7fb fd18 	bl	801369e <button_attach>
				button_attach(&button[i], PRESS_UP, (BtnCallback) button_event_handler);
 8017c6e:	79fb      	ldrb	r3, [r7, #7]
 8017c70:	222c      	movs	r2, #44	@ 0x2c
 8017c72:	fb02 f303 	mul.w	r3, r2, r3
 8017c76:	4a62      	ldr	r2, [pc, #392]	@ (8017e00 <InitMultibutton+0x294>)
 8017c78:	4413      	add	r3, r2
 8017c7a:	4a64      	ldr	r2, [pc, #400]	@ (8017e0c <InitMultibutton+0x2a0>)
 8017c7c:	2101      	movs	r1, #1
 8017c7e:	4618      	mov	r0, r3
 8017c80:	f7fb fd0d 	bl	801369e <button_attach>
				button_attach(&button[i], LONG_PRESS_START, (BtnCallback) button_event_handler);
 8017c84:	79fb      	ldrb	r3, [r7, #7]
 8017c86:	222c      	movs	r2, #44	@ 0x2c
 8017c88:	fb02 f303 	mul.w	r3, r2, r3
 8017c8c:	4a5c      	ldr	r2, [pc, #368]	@ (8017e00 <InitMultibutton+0x294>)
 8017c8e:	4413      	add	r3, r2
 8017c90:	4a5e      	ldr	r2, [pc, #376]	@ (8017e0c <InitMultibutton+0x2a0>)
 8017c92:	2105      	movs	r1, #5
 8017c94:	4618      	mov	r0, r3
 8017c96:	f7fb fd02 	bl	801369e <button_attach>
				button_attach(&button[i], LONG_PRESS_HOLD, (BtnCallback) button_event_handler);
 8017c9a:	79fb      	ldrb	r3, [r7, #7]
 8017c9c:	222c      	movs	r2, #44	@ 0x2c
 8017c9e:	fb02 f303 	mul.w	r3, r2, r3
 8017ca2:	4a57      	ldr	r2, [pc, #348]	@ (8017e00 <InitMultibutton+0x294>)
 8017ca4:	4413      	add	r3, r2
 8017ca6:	4a59      	ldr	r2, [pc, #356]	@ (8017e0c <InitMultibutton+0x2a0>)
 8017ca8:	2106      	movs	r1, #6
 8017caa:	4618      	mov	r0, r3
 8017cac:	f7fb fcf7 	bl	801369e <button_attach>
				button_attach(&button[i], SINGLE_CLICK, (BtnCallback) button_event_handler);
 8017cb0:	79fb      	ldrb	r3, [r7, #7]
 8017cb2:	222c      	movs	r2, #44	@ 0x2c
 8017cb4:	fb02 f303 	mul.w	r3, r2, r3
 8017cb8:	4a51      	ldr	r2, [pc, #324]	@ (8017e00 <InitMultibutton+0x294>)
 8017cba:	4413      	add	r3, r2
 8017cbc:	4a53      	ldr	r2, [pc, #332]	@ (8017e0c <InitMultibutton+0x2a0>)
 8017cbe:	2103      	movs	r1, #3
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	f7fb fcec 	bl	801369e <button_attach>
				button_attach(&button[i], DOUBLE_CLICK, (BtnCallback) button_event_handler);
 8017cc6:	79fb      	ldrb	r3, [r7, #7]
 8017cc8:	222c      	movs	r2, #44	@ 0x2c
 8017cca:	fb02 f303 	mul.w	r3, r2, r3
 8017cce:	4a4c      	ldr	r2, [pc, #304]	@ (8017e00 <InitMultibutton+0x294>)
 8017cd0:	4413      	add	r3, r2
 8017cd2:	4a4e      	ldr	r2, [pc, #312]	@ (8017e0c <InitMultibutton+0x2a0>)
 8017cd4:	2104      	movs	r1, #4
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	f7fb fce1 	bl	801369e <button_attach>
				button_attach(&button[i], PRESS_REPEAT, (BtnCallback) button_event_handler);
 8017cdc:	79fb      	ldrb	r3, [r7, #7]
 8017cde:	222c      	movs	r2, #44	@ 0x2c
 8017ce0:	fb02 f303 	mul.w	r3, r2, r3
 8017ce4:	4a46      	ldr	r2, [pc, #280]	@ (8017e00 <InitMultibutton+0x294>)
 8017ce6:	4413      	add	r3, r2
 8017ce8:	4a48      	ldr	r2, [pc, #288]	@ (8017e0c <InitMultibutton+0x2a0>)
 8017cea:	2102      	movs	r1, #2
 8017cec:	4618      	mov	r0, r3
 8017cee:	f7fb fcd6 	bl	801369e <button_attach>
			}

			button_start(&button[i]);
 8017cf2:	79fb      	ldrb	r3, [r7, #7]
 8017cf4:	222c      	movs	r2, #44	@ 0x2c
 8017cf6:	fb02 f303 	mul.w	r3, r2, r3
 8017cfa:	4a41      	ldr	r2, [pc, #260]	@ (8017e00 <InitMultibutton+0x294>)
 8017cfc:	4413      	add	r3, r2
 8017cfe:	4618      	mov	r0, r3
 8017d00:	f7fb feb0 	bl	8013a64 <button_start>

			// инициализация Multibutton flag
			PinsConf[i].act = 1;
 8017d04:	79fb      	ldrb	r3, [r7, #7]
 8017d06:	4a3d      	ldr	r2, [pc, #244]	@ (8017dfc <InitMultibutton+0x290>)
 8017d08:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8017d0c:	fb01 f303 	mul.w	r3, r1, r3
 8017d10:	4413      	add	r3, r2
 8017d12:	f203 2337 	addw	r3, r3, #567	@ 0x237
 8017d16:	2201      	movs	r2, #1
 8017d18:	701a      	strb	r2, [r3, #0]

		}

		// Инциализация кнопки PULLUP
		if (PinsConf[i].ptype == 1) {
 8017d1a:	79fb      	ldrb	r3, [r7, #7]
 8017d1c:	4a37      	ldr	r2, [pc, #220]	@ (8017dfc <InitMultibutton+0x290>)
 8017d1e:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8017d22:	fb01 f303 	mul.w	r3, r1, r3
 8017d26:	4413      	add	r3, r2
 8017d28:	3311      	adds	r3, #17
 8017d2a:	781b      	ldrb	r3, [r3, #0]
 8017d2c:	2b01      	cmp	r3, #1
 8017d2e:	f040 80d0 	bne.w	8017ed2 <InitMultibutton+0x366>
			button_init(&button[i], read_button_level, 0, i);
 8017d32:	79fb      	ldrb	r3, [r7, #7]
 8017d34:	222c      	movs	r2, #44	@ 0x2c
 8017d36:	fb02 f303 	mul.w	r3, r2, r3
 8017d3a:	4a31      	ldr	r2, [pc, #196]	@ (8017e00 <InitMultibutton+0x294>)
 8017d3c:	1898      	adds	r0, r3, r2
 8017d3e:	79fb      	ldrb	r3, [r7, #7]
 8017d40:	2200      	movs	r2, #0
 8017d42:	4930      	ldr	r1, [pc, #192]	@ (8017e04 <InitMultibutton+0x298>)
 8017d44:	f7fb fc74 	bl	8013630 <button_init>
			// PWM кнопка
			if(PinsConf[i].sclick == 2){
 8017d48:	79fb      	ldrb	r3, [r7, #7]
 8017d4a:	4a2c      	ldr	r2, [pc, #176]	@ (8017dfc <InitMultibutton+0x290>)
 8017d4c:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8017d50:	fb01 f303 	mul.w	r3, r1, r3
 8017d54:	4413      	add	r3, r2
 8017d56:	3312      	adds	r3, #18
 8017d58:	781b      	ldrb	r3, [r3, #0]
 8017d5a:	2b02      	cmp	r3, #2
 8017d5c:	d158      	bne.n	8017e10 <InitMultibutton+0x2a4>
				button_attach(&button[i], PRESS_DOWN, (BtnCallback) pwm_event_handler);
 8017d5e:	79fb      	ldrb	r3, [r7, #7]
 8017d60:	222c      	movs	r2, #44	@ 0x2c
 8017d62:	fb02 f303 	mul.w	r3, r2, r3
 8017d66:	4a26      	ldr	r2, [pc, #152]	@ (8017e00 <InitMultibutton+0x294>)
 8017d68:	4413      	add	r3, r2
 8017d6a:	4a27      	ldr	r2, [pc, #156]	@ (8017e08 <InitMultibutton+0x29c>)
 8017d6c:	2100      	movs	r1, #0
 8017d6e:	4618      	mov	r0, r3
 8017d70:	f7fb fc95 	bl	801369e <button_attach>
				button_attach(&button[i], PRESS_UP, (BtnCallback) pwm_event_handler);
 8017d74:	79fb      	ldrb	r3, [r7, #7]
 8017d76:	222c      	movs	r2, #44	@ 0x2c
 8017d78:	fb02 f303 	mul.w	r3, r2, r3
 8017d7c:	4a20      	ldr	r2, [pc, #128]	@ (8017e00 <InitMultibutton+0x294>)
 8017d7e:	4413      	add	r3, r2
 8017d80:	4a21      	ldr	r2, [pc, #132]	@ (8017e08 <InitMultibutton+0x29c>)
 8017d82:	2101      	movs	r1, #1
 8017d84:	4618      	mov	r0, r3
 8017d86:	f7fb fc8a 	bl	801369e <button_attach>
				button_attach(&button[i], LONG_PRESS_START, (BtnCallback) pwm_event_handler);
 8017d8a:	79fb      	ldrb	r3, [r7, #7]
 8017d8c:	222c      	movs	r2, #44	@ 0x2c
 8017d8e:	fb02 f303 	mul.w	r3, r2, r3
 8017d92:	4a1b      	ldr	r2, [pc, #108]	@ (8017e00 <InitMultibutton+0x294>)
 8017d94:	4413      	add	r3, r2
 8017d96:	4a1c      	ldr	r2, [pc, #112]	@ (8017e08 <InitMultibutton+0x29c>)
 8017d98:	2105      	movs	r1, #5
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	f7fb fc7f 	bl	801369e <button_attach>
				button_attach(&button[i], LONG_PRESS_HOLD, (BtnCallback) pwm_event_handler);
 8017da0:	79fb      	ldrb	r3, [r7, #7]
 8017da2:	222c      	movs	r2, #44	@ 0x2c
 8017da4:	fb02 f303 	mul.w	r3, r2, r3
 8017da8:	4a15      	ldr	r2, [pc, #84]	@ (8017e00 <InitMultibutton+0x294>)
 8017daa:	4413      	add	r3, r2
 8017dac:	4a16      	ldr	r2, [pc, #88]	@ (8017e08 <InitMultibutton+0x29c>)
 8017dae:	2106      	movs	r1, #6
 8017db0:	4618      	mov	r0, r3
 8017db2:	f7fb fc74 	bl	801369e <button_attach>
				button_attach(&button[i], SINGLE_CLICK, (BtnCallback) pwm_event_handler);
 8017db6:	79fb      	ldrb	r3, [r7, #7]
 8017db8:	222c      	movs	r2, #44	@ 0x2c
 8017dba:	fb02 f303 	mul.w	r3, r2, r3
 8017dbe:	4a10      	ldr	r2, [pc, #64]	@ (8017e00 <InitMultibutton+0x294>)
 8017dc0:	4413      	add	r3, r2
 8017dc2:	4a11      	ldr	r2, [pc, #68]	@ (8017e08 <InitMultibutton+0x29c>)
 8017dc4:	2103      	movs	r1, #3
 8017dc6:	4618      	mov	r0, r3
 8017dc8:	f7fb fc69 	bl	801369e <button_attach>
				button_attach(&button[i], DOUBLE_CLICK, (BtnCallback) pwm_event_handler);
 8017dcc:	79fb      	ldrb	r3, [r7, #7]
 8017dce:	222c      	movs	r2, #44	@ 0x2c
 8017dd0:	fb02 f303 	mul.w	r3, r2, r3
 8017dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8017e00 <InitMultibutton+0x294>)
 8017dd6:	4413      	add	r3, r2
 8017dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8017e08 <InitMultibutton+0x29c>)
 8017dda:	2104      	movs	r1, #4
 8017ddc:	4618      	mov	r0, r3
 8017dde:	f7fb fc5e 	bl	801369e <button_attach>
				button_attach(&button[i], PRESS_REPEAT, (BtnCallback) pwm_event_handler);
 8017de2:	79fb      	ldrb	r3, [r7, #7]
 8017de4:	222c      	movs	r2, #44	@ 0x2c
 8017de6:	fb02 f303 	mul.w	r3, r2, r3
 8017dea:	4a05      	ldr	r2, [pc, #20]	@ (8017e00 <InitMultibutton+0x294>)
 8017dec:	4413      	add	r3, r2
 8017dee:	4a06      	ldr	r2, [pc, #24]	@ (8017e08 <InitMultibutton+0x29c>)
 8017df0:	2102      	movs	r1, #2
 8017df2:	4618      	mov	r0, r3
 8017df4:	f7fb fc53 	bl	801369e <button_attach>
 8017df8:	e057      	b.n	8017eaa <InitMultibutton+0x33e>
 8017dfa:	bf00      	nop
 8017dfc:	2000066c 	.word	0x2000066c
 8017e00:	20010804 	.word	0x20010804
 8017e04:	080042f5 	.word	0x080042f5
 8017e08:	080039e1 	.word	0x080039e1
 8017e0c:	080037f5 	.word	0x080037f5
			} else {
				// просто кнопка
				button_attach(&button[i], PRESS_DOWN, (BtnCallback) button_event_handler);
 8017e10:	79fb      	ldrb	r3, [r7, #7]
 8017e12:	222c      	movs	r2, #44	@ 0x2c
 8017e14:	fb02 f303 	mul.w	r3, r2, r3
 8017e18:	4a34      	ldr	r2, [pc, #208]	@ (8017eec <InitMultibutton+0x380>)
 8017e1a:	4413      	add	r3, r2
 8017e1c:	4a34      	ldr	r2, [pc, #208]	@ (8017ef0 <InitMultibutton+0x384>)
 8017e1e:	2100      	movs	r1, #0
 8017e20:	4618      	mov	r0, r3
 8017e22:	f7fb fc3c 	bl	801369e <button_attach>
				button_attach(&button[i], PRESS_UP, (BtnCallback) button_event_handler);
 8017e26:	79fb      	ldrb	r3, [r7, #7]
 8017e28:	222c      	movs	r2, #44	@ 0x2c
 8017e2a:	fb02 f303 	mul.w	r3, r2, r3
 8017e2e:	4a2f      	ldr	r2, [pc, #188]	@ (8017eec <InitMultibutton+0x380>)
 8017e30:	4413      	add	r3, r2
 8017e32:	4a2f      	ldr	r2, [pc, #188]	@ (8017ef0 <InitMultibutton+0x384>)
 8017e34:	2101      	movs	r1, #1
 8017e36:	4618      	mov	r0, r3
 8017e38:	f7fb fc31 	bl	801369e <button_attach>
				button_attach(&button[i], LONG_PRESS_START, (BtnCallback) button_event_handler);
 8017e3c:	79fb      	ldrb	r3, [r7, #7]
 8017e3e:	222c      	movs	r2, #44	@ 0x2c
 8017e40:	fb02 f303 	mul.w	r3, r2, r3
 8017e44:	4a29      	ldr	r2, [pc, #164]	@ (8017eec <InitMultibutton+0x380>)
 8017e46:	4413      	add	r3, r2
 8017e48:	4a29      	ldr	r2, [pc, #164]	@ (8017ef0 <InitMultibutton+0x384>)
 8017e4a:	2105      	movs	r1, #5
 8017e4c:	4618      	mov	r0, r3
 8017e4e:	f7fb fc26 	bl	801369e <button_attach>
				button_attach(&button[i], LONG_PRESS_HOLD, (BtnCallback) button_event_handler);
 8017e52:	79fb      	ldrb	r3, [r7, #7]
 8017e54:	222c      	movs	r2, #44	@ 0x2c
 8017e56:	fb02 f303 	mul.w	r3, r2, r3
 8017e5a:	4a24      	ldr	r2, [pc, #144]	@ (8017eec <InitMultibutton+0x380>)
 8017e5c:	4413      	add	r3, r2
 8017e5e:	4a24      	ldr	r2, [pc, #144]	@ (8017ef0 <InitMultibutton+0x384>)
 8017e60:	2106      	movs	r1, #6
 8017e62:	4618      	mov	r0, r3
 8017e64:	f7fb fc1b 	bl	801369e <button_attach>
				button_attach(&button[i], SINGLE_CLICK, (BtnCallback) button_event_handler);
 8017e68:	79fb      	ldrb	r3, [r7, #7]
 8017e6a:	222c      	movs	r2, #44	@ 0x2c
 8017e6c:	fb02 f303 	mul.w	r3, r2, r3
 8017e70:	4a1e      	ldr	r2, [pc, #120]	@ (8017eec <InitMultibutton+0x380>)
 8017e72:	4413      	add	r3, r2
 8017e74:	4a1e      	ldr	r2, [pc, #120]	@ (8017ef0 <InitMultibutton+0x384>)
 8017e76:	2103      	movs	r1, #3
 8017e78:	4618      	mov	r0, r3
 8017e7a:	f7fb fc10 	bl	801369e <button_attach>
				button_attach(&button[i], DOUBLE_CLICK, (BtnCallback) button_event_handler);
 8017e7e:	79fb      	ldrb	r3, [r7, #7]
 8017e80:	222c      	movs	r2, #44	@ 0x2c
 8017e82:	fb02 f303 	mul.w	r3, r2, r3
 8017e86:	4a19      	ldr	r2, [pc, #100]	@ (8017eec <InitMultibutton+0x380>)
 8017e88:	4413      	add	r3, r2
 8017e8a:	4a19      	ldr	r2, [pc, #100]	@ (8017ef0 <InitMultibutton+0x384>)
 8017e8c:	2104      	movs	r1, #4
 8017e8e:	4618      	mov	r0, r3
 8017e90:	f7fb fc05 	bl	801369e <button_attach>
				button_attach(&button[i], PRESS_REPEAT, (BtnCallback) button_event_handler);
 8017e94:	79fb      	ldrb	r3, [r7, #7]
 8017e96:	222c      	movs	r2, #44	@ 0x2c
 8017e98:	fb02 f303 	mul.w	r3, r2, r3
 8017e9c:	4a13      	ldr	r2, [pc, #76]	@ (8017eec <InitMultibutton+0x380>)
 8017e9e:	4413      	add	r3, r2
 8017ea0:	4a13      	ldr	r2, [pc, #76]	@ (8017ef0 <InitMultibutton+0x384>)
 8017ea2:	2102      	movs	r1, #2
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	f7fb fbfa 	bl	801369e <button_attach>
			}

			button_start(&button[i]);
 8017eaa:	79fb      	ldrb	r3, [r7, #7]
 8017eac:	222c      	movs	r2, #44	@ 0x2c
 8017eae:	fb02 f303 	mul.w	r3, r2, r3
 8017eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8017eec <InitMultibutton+0x380>)
 8017eb4:	4413      	add	r3, r2
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	f7fb fdd4 	bl	8013a64 <button_start>

			// инициализация Multibutton flag
			PinsConf[i].act = 1;
 8017ebc:	79fb      	ldrb	r3, [r7, #7]
 8017ebe:	4a0d      	ldr	r2, [pc, #52]	@ (8017ef4 <InitMultibutton+0x388>)
 8017ec0:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8017ec4:	fb01 f303 	mul.w	r3, r1, r3
 8017ec8:	4413      	add	r3, r2
 8017eca:	f203 2337 	addw	r3, r3, #567	@ 0x237
 8017ece:	2201      	movs	r2, #1
 8017ed0:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUMPIN; i++){
 8017ed2:	79fb      	ldrb	r3, [r7, #7]
 8017ed4:	3301      	adds	r3, #1
 8017ed6:	71fb      	strb	r3, [r7, #7]
 8017ed8:	79fb      	ldrb	r3, [r7, #7]
 8017eda:	2b58      	cmp	r3, #88	@ 0x58
 8017edc:	f67f ae4c 	bls.w	8017b78 <InitMultibutton+0xc>
		}


	}
}
 8017ee0:	bf00      	nop
 8017ee2:	bf00      	nop
 8017ee4:	3708      	adds	r7, #8
 8017ee6:	46bd      	mov	sp, r7
 8017ee8:	bd80      	pop	{r7, pc}
 8017eea:	bf00      	nop
 8017eec:	20010804 	.word	0x20010804
 8017ef0:	080037f5 	.word	0x080037f5
 8017ef4:	2000066c 	.word	0x2000066c

08017ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	b082      	sub	sp, #8
 8017efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8017efe:	4b11      	ldr	r3, [pc, #68]	@ (8017f44 <HAL_MspInit+0x4c>)
 8017f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017f02:	4a10      	ldr	r2, [pc, #64]	@ (8017f44 <HAL_MspInit+0x4c>)
 8017f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8017f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8017f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8017f44 <HAL_MspInit+0x4c>)
 8017f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017f12:	607b      	str	r3, [r7, #4]
 8017f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017f16:	4b0b      	ldr	r3, [pc, #44]	@ (8017f44 <HAL_MspInit+0x4c>)
 8017f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8017f44 <HAL_MspInit+0x4c>)
 8017f1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8017f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8017f22:	4b08      	ldr	r3, [pc, #32]	@ (8017f44 <HAL_MspInit+0x4c>)
 8017f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8017f2a:	603b      	str	r3, [r7, #0]
 8017f2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8017f2e:	2200      	movs	r2, #0
 8017f30:	210f      	movs	r1, #15
 8017f32:	f06f 0001 	mvn.w	r0, #1
 8017f36:	f000 fc2f 	bl	8018798 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8017f3a:	bf00      	nop
 8017f3c:	3708      	adds	r7, #8
 8017f3e:	46bd      	mov	sp, r7
 8017f40:	bd80      	pop	{r7, pc}
 8017f42:	bf00      	nop
 8017f44:	40023800 	.word	0x40023800

08017f48 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8017f48:	b580      	push	{r7, lr}
 8017f4a:	b08e      	sub	sp, #56	@ 0x38
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017f50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017f54:	2200      	movs	r2, #0
 8017f56:	601a      	str	r2, [r3, #0]
 8017f58:	605a      	str	r2, [r3, #4]
 8017f5a:	609a      	str	r2, [r3, #8]
 8017f5c:	60da      	str	r2, [r3, #12]
 8017f5e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	4a52      	ldr	r2, [pc, #328]	@ (80180b0 <HAL_ETH_MspInit+0x168>)
 8017f66:	4293      	cmp	r3, r2
 8017f68:	f040 809e 	bne.w	80180a8 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8017f6c:	4b51      	ldr	r3, [pc, #324]	@ (80180b4 <HAL_ETH_MspInit+0x16c>)
 8017f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017f70:	4a50      	ldr	r2, [pc, #320]	@ (80180b4 <HAL_ETH_MspInit+0x16c>)
 8017f72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8017f76:	6313      	str	r3, [r2, #48]	@ 0x30
 8017f78:	4b4e      	ldr	r3, [pc, #312]	@ (80180b4 <HAL_ETH_MspInit+0x16c>)
 8017f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017f80:	623b      	str	r3, [r7, #32]
 8017f82:	6a3b      	ldr	r3, [r7, #32]
 8017f84:	4b4b      	ldr	r3, [pc, #300]	@ (80180b4 <HAL_ETH_MspInit+0x16c>)
 8017f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017f88:	4a4a      	ldr	r2, [pc, #296]	@ (80180b4 <HAL_ETH_MspInit+0x16c>)
 8017f8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8017f8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8017f90:	4b48      	ldr	r3, [pc, #288]	@ (80180b4 <HAL_ETH_MspInit+0x16c>)
 8017f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017f94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8017f98:	61fb      	str	r3, [r7, #28]
 8017f9a:	69fb      	ldr	r3, [r7, #28]
 8017f9c:	4b45      	ldr	r3, [pc, #276]	@ (80180b4 <HAL_ETH_MspInit+0x16c>)
 8017f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017fa0:	4a44      	ldr	r2, [pc, #272]	@ (80180b4 <HAL_ETH_MspInit+0x16c>)
 8017fa2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8017fa6:	6313      	str	r3, [r2, #48]	@ 0x30
 8017fa8:	4b42      	ldr	r3, [pc, #264]	@ (80180b4 <HAL_ETH_MspInit+0x16c>)
 8017faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017fac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017fb0:	61bb      	str	r3, [r7, #24]
 8017fb2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8017fb4:	4b3f      	ldr	r3, [pc, #252]	@ (80180b4 <HAL_ETH_MspInit+0x16c>)
 8017fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017fb8:	4a3e      	ldr	r2, [pc, #248]	@ (80180b4 <HAL_ETH_MspInit+0x16c>)
 8017fba:	f043 0304 	orr.w	r3, r3, #4
 8017fbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8017fc0:	4b3c      	ldr	r3, [pc, #240]	@ (80180b4 <HAL_ETH_MspInit+0x16c>)
 8017fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017fc4:	f003 0304 	and.w	r3, r3, #4
 8017fc8:	617b      	str	r3, [r7, #20]
 8017fca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017fcc:	4b39      	ldr	r3, [pc, #228]	@ (80180b4 <HAL_ETH_MspInit+0x16c>)
 8017fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017fd0:	4a38      	ldr	r2, [pc, #224]	@ (80180b4 <HAL_ETH_MspInit+0x16c>)
 8017fd2:	f043 0301 	orr.w	r3, r3, #1
 8017fd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8017fd8:	4b36      	ldr	r3, [pc, #216]	@ (80180b4 <HAL_ETH_MspInit+0x16c>)
 8017fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017fdc:	f003 0301 	and.w	r3, r3, #1
 8017fe0:	613b      	str	r3, [r7, #16]
 8017fe2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017fe4:	4b33      	ldr	r3, [pc, #204]	@ (80180b4 <HAL_ETH_MspInit+0x16c>)
 8017fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017fe8:	4a32      	ldr	r2, [pc, #200]	@ (80180b4 <HAL_ETH_MspInit+0x16c>)
 8017fea:	f043 0302 	orr.w	r3, r3, #2
 8017fee:	6313      	str	r3, [r2, #48]	@ 0x30
 8017ff0:	4b30      	ldr	r3, [pc, #192]	@ (80180b4 <HAL_ETH_MspInit+0x16c>)
 8017ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017ff4:	f003 0302 	and.w	r3, r3, #2
 8017ff8:	60fb      	str	r3, [r7, #12]
 8017ffa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8017ffc:	4b2d      	ldr	r3, [pc, #180]	@ (80180b4 <HAL_ETH_MspInit+0x16c>)
 8017ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018000:	4a2c      	ldr	r2, [pc, #176]	@ (80180b4 <HAL_ETH_MspInit+0x16c>)
 8018002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018006:	6313      	str	r3, [r2, #48]	@ 0x30
 8018008:	4b2a      	ldr	r3, [pc, #168]	@ (80180b4 <HAL_ETH_MspInit+0x16c>)
 801800a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801800c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018010:	60bb      	str	r3, [r7, #8]
 8018012:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8018014:	2332      	movs	r3, #50	@ 0x32
 8018016:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018018:	2302      	movs	r3, #2
 801801a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801801c:	2300      	movs	r3, #0
 801801e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018020:	2303      	movs	r3, #3
 8018022:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8018024:	230b      	movs	r3, #11
 8018026:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8018028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801802c:	4619      	mov	r1, r3
 801802e:	4822      	ldr	r0, [pc, #136]	@ (80180b8 <HAL_ETH_MspInit+0x170>)
 8018030:	f000 ff2a 	bl	8018e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8018034:	2386      	movs	r3, #134	@ 0x86
 8018036:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018038:	2302      	movs	r3, #2
 801803a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801803c:	2300      	movs	r3, #0
 801803e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018040:	2303      	movs	r3, #3
 8018042:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8018044:	230b      	movs	r3, #11
 8018046:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018048:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801804c:	4619      	mov	r1, r3
 801804e:	481b      	ldr	r0, [pc, #108]	@ (80180bc <HAL_ETH_MspInit+0x174>)
 8018050:	f000 ff1a 	bl	8018e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8018054:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8018058:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801805a:	2302      	movs	r3, #2
 801805c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801805e:	2300      	movs	r3, #0
 8018060:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018062:	2303      	movs	r3, #3
 8018064:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8018066:	230b      	movs	r3, #11
 8018068:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 801806a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801806e:	4619      	mov	r1, r3
 8018070:	4813      	ldr	r0, [pc, #76]	@ (80180c0 <HAL_ETH_MspInit+0x178>)
 8018072:	f000 ff09 	bl	8018e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8018076:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 801807a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801807c:	2302      	movs	r3, #2
 801807e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018080:	2300      	movs	r3, #0
 8018082:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018084:	2303      	movs	r3, #3
 8018086:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8018088:	230b      	movs	r3, #11
 801808a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801808c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018090:	4619      	mov	r1, r3
 8018092:	480c      	ldr	r0, [pc, #48]	@ (80180c4 <HAL_ETH_MspInit+0x17c>)
 8018094:	f000 fef8 	bl	8018e88 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8018098:	2200      	movs	r2, #0
 801809a:	2105      	movs	r1, #5
 801809c:	203d      	movs	r0, #61	@ 0x3d
 801809e:	f000 fb7b 	bl	8018798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80180a2:	203d      	movs	r0, #61	@ 0x3d
 80180a4:	f000 fb94 	bl	80187d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80180a8:	bf00      	nop
 80180aa:	3738      	adds	r7, #56	@ 0x38
 80180ac:	46bd      	mov	sp, r7
 80180ae:	bd80      	pop	{r7, pc}
 80180b0:	40028000 	.word	0x40028000
 80180b4:	40023800 	.word	0x40023800
 80180b8:	40020800 	.word	0x40020800
 80180bc:	40020000 	.word	0x40020000
 80180c0:	40020400 	.word	0x40020400
 80180c4:	40021800 	.word	0x40021800

080180c8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80180c8:	b580      	push	{r7, lr}
 80180ca:	b0a8      	sub	sp, #160	@ 0xa0
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80180d0:	f107 0310 	add.w	r3, r7, #16
 80180d4:	2290      	movs	r2, #144	@ 0x90
 80180d6:	2100      	movs	r1, #0
 80180d8:	4618      	mov	r0, r3
 80180da:	f013 fd17 	bl	802bb0c <memset>
  if(hrng->Instance==RNG)
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	4a11      	ldr	r2, [pc, #68]	@ (8018128 <HAL_RNG_MspInit+0x60>)
 80180e4:	4293      	cmp	r3, r2
 80180e6:	d11b      	bne.n	8018120 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80180e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80180ec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80180ee:	2300      	movs	r3, #0
 80180f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80180f4:	f107 0310 	add.w	r3, r7, #16
 80180f8:	4618      	mov	r0, r3
 80180fa:	f004 f849 	bl	801c190 <HAL_RCCEx_PeriphCLKConfig>
 80180fe:	4603      	mov	r3, r0
 8018100:	2b00      	cmp	r3, #0
 8018102:	d001      	beq.n	8018108 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8018104:	f7ed feb4 	bl	8005e70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8018108:	4b08      	ldr	r3, [pc, #32]	@ (801812c <HAL_RNG_MspInit+0x64>)
 801810a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801810c:	4a07      	ldr	r2, [pc, #28]	@ (801812c <HAL_RNG_MspInit+0x64>)
 801810e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018112:	6353      	str	r3, [r2, #52]	@ 0x34
 8018114:	4b05      	ldr	r3, [pc, #20]	@ (801812c <HAL_RNG_MspInit+0x64>)
 8018116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801811c:	60fb      	str	r3, [r7, #12]
 801811e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8018120:	bf00      	nop
 8018122:	37a0      	adds	r7, #160	@ 0xa0
 8018124:	46bd      	mov	sp, r7
 8018126:	bd80      	pop	{r7, pc}
 8018128:	50060800 	.word	0x50060800
 801812c:	40023800 	.word	0x40023800

08018130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8018130:	b480      	push	{r7}
 8018132:	b085      	sub	sp, #20
 8018134:	af00      	add	r7, sp, #0
 8018136:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	4a0a      	ldr	r2, [pc, #40]	@ (8018168 <HAL_TIM_Base_MspInit+0x38>)
 801813e:	4293      	cmp	r3, r2
 8018140:	d10b      	bne.n	801815a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8018142:	4b0a      	ldr	r3, [pc, #40]	@ (801816c <HAL_TIM_Base_MspInit+0x3c>)
 8018144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018146:	4a09      	ldr	r2, [pc, #36]	@ (801816c <HAL_TIM_Base_MspInit+0x3c>)
 8018148:	f043 0301 	orr.w	r3, r3, #1
 801814c:	6453      	str	r3, [r2, #68]	@ 0x44
 801814e:	4b07      	ldr	r3, [pc, #28]	@ (801816c <HAL_TIM_Base_MspInit+0x3c>)
 8018150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018152:	f003 0301 	and.w	r3, r3, #1
 8018156:	60fb      	str	r3, [r7, #12]
 8018158:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 801815a:	bf00      	nop
 801815c:	3714      	adds	r7, #20
 801815e:	46bd      	mov	sp, r7
 8018160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018164:	4770      	bx	lr
 8018166:	bf00      	nop
 8018168:	40010000 	.word	0x40010000
 801816c:	40023800 	.word	0x40023800

08018170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8018170:	b580      	push	{r7, lr}
 8018172:	b0ae      	sub	sp, #184	@ 0xb8
 8018174:	af00      	add	r7, sp, #0
 8018176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018178:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801817c:	2200      	movs	r2, #0
 801817e:	601a      	str	r2, [r3, #0]
 8018180:	605a      	str	r2, [r3, #4]
 8018182:	609a      	str	r2, [r3, #8]
 8018184:	60da      	str	r2, [r3, #12]
 8018186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8018188:	f107 0314 	add.w	r3, r7, #20
 801818c:	2290      	movs	r2, #144	@ 0x90
 801818e:	2100      	movs	r1, #0
 8018190:	4618      	mov	r0, r3
 8018192:	f013 fcbb 	bl	802bb0c <memset>
  if(huart->Instance==USART3)
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	4a22      	ldr	r2, [pc, #136]	@ (8018224 <HAL_UART_MspInit+0xb4>)
 801819c:	4293      	cmp	r3, r2
 801819e:	d13c      	bne.n	801821a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80181a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80181a4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80181a6:	2300      	movs	r3, #0
 80181a8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80181aa:	f107 0314 	add.w	r3, r7, #20
 80181ae:	4618      	mov	r0, r3
 80181b0:	f003 ffee 	bl	801c190 <HAL_RCCEx_PeriphCLKConfig>
 80181b4:	4603      	mov	r3, r0
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d001      	beq.n	80181be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80181ba:	f7ed fe59 	bl	8005e70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80181be:	4b1a      	ldr	r3, [pc, #104]	@ (8018228 <HAL_UART_MspInit+0xb8>)
 80181c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80181c2:	4a19      	ldr	r2, [pc, #100]	@ (8018228 <HAL_UART_MspInit+0xb8>)
 80181c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80181c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80181ca:	4b17      	ldr	r3, [pc, #92]	@ (8018228 <HAL_UART_MspInit+0xb8>)
 80181cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80181ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80181d2:	613b      	str	r3, [r7, #16]
 80181d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80181d6:	4b14      	ldr	r3, [pc, #80]	@ (8018228 <HAL_UART_MspInit+0xb8>)
 80181d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80181da:	4a13      	ldr	r2, [pc, #76]	@ (8018228 <HAL_UART_MspInit+0xb8>)
 80181dc:	f043 0308 	orr.w	r3, r3, #8
 80181e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80181e2:	4b11      	ldr	r3, [pc, #68]	@ (8018228 <HAL_UART_MspInit+0xb8>)
 80181e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80181e6:	f003 0308 	and.w	r3, r3, #8
 80181ea:	60fb      	str	r3, [r7, #12]
 80181ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80181ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80181f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80181f6:	2302      	movs	r3, #2
 80181f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80181fc:	2300      	movs	r3, #0
 80181fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018202:	2303      	movs	r3, #3
 8018204:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8018208:	2307      	movs	r3, #7
 801820a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801820e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8018212:	4619      	mov	r1, r3
 8018214:	4805      	ldr	r0, [pc, #20]	@ (801822c <HAL_UART_MspInit+0xbc>)
 8018216:	f000 fe37 	bl	8018e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 801821a:	bf00      	nop
 801821c:	37b8      	adds	r7, #184	@ 0xb8
 801821e:	46bd      	mov	sp, r7
 8018220:	bd80      	pop	{r7, pc}
 8018222:	bf00      	nop
 8018224:	40004800 	.word	0x40004800
 8018228:	40023800 	.word	0x40023800
 801822c:	40020c00 	.word	0x40020c00

08018230 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8018230:	b580      	push	{r7, lr}
 8018232:	b08e      	sub	sp, #56	@ 0x38
 8018234:	af00      	add	r7, sp, #0
 8018236:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8018238:	2300      	movs	r3, #0
 801823a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 801823c:	2300      	movs	r3, #0
 801823e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8018240:	4b33      	ldr	r3, [pc, #204]	@ (8018310 <HAL_InitTick+0xe0>)
 8018242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018244:	4a32      	ldr	r2, [pc, #200]	@ (8018310 <HAL_InitTick+0xe0>)
 8018246:	f043 0310 	orr.w	r3, r3, #16
 801824a:	6413      	str	r3, [r2, #64]	@ 0x40
 801824c:	4b30      	ldr	r3, [pc, #192]	@ (8018310 <HAL_InitTick+0xe0>)
 801824e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018250:	f003 0310 	and.w	r3, r3, #16
 8018254:	60fb      	str	r3, [r7, #12]
 8018256:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8018258:	f107 0210 	add.w	r2, r7, #16
 801825c:	f107 0314 	add.w	r3, r7, #20
 8018260:	4611      	mov	r1, r2
 8018262:	4618      	mov	r0, r3
 8018264:	f003 ff62 	bl	801c12c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8018268:	6a3b      	ldr	r3, [r7, #32]
 801826a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 801826c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801826e:	2b00      	cmp	r3, #0
 8018270:	d103      	bne.n	801827a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8018272:	f003 ff33 	bl	801c0dc <HAL_RCC_GetPCLK1Freq>
 8018276:	6378      	str	r0, [r7, #52]	@ 0x34
 8018278:	e004      	b.n	8018284 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 801827a:	f003 ff2f 	bl	801c0dc <HAL_RCC_GetPCLK1Freq>
 801827e:	4603      	mov	r3, r0
 8018280:	005b      	lsls	r3, r3, #1
 8018282:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8018284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018286:	4a23      	ldr	r2, [pc, #140]	@ (8018314 <HAL_InitTick+0xe4>)
 8018288:	fba2 2303 	umull	r2, r3, r2, r3
 801828c:	0c9b      	lsrs	r3, r3, #18
 801828e:	3b01      	subs	r3, #1
 8018290:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8018292:	4b21      	ldr	r3, [pc, #132]	@ (8018318 <HAL_InitTick+0xe8>)
 8018294:	4a21      	ldr	r2, [pc, #132]	@ (801831c <HAL_InitTick+0xec>)
 8018296:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8018298:	4b1f      	ldr	r3, [pc, #124]	@ (8018318 <HAL_InitTick+0xe8>)
 801829a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 801829e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80182a0:	4a1d      	ldr	r2, [pc, #116]	@ (8018318 <HAL_InitTick+0xe8>)
 80182a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80182a4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80182a6:	4b1c      	ldr	r3, [pc, #112]	@ (8018318 <HAL_InitTick+0xe8>)
 80182a8:	2200      	movs	r2, #0
 80182aa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80182ac:	4b1a      	ldr	r3, [pc, #104]	@ (8018318 <HAL_InitTick+0xe8>)
 80182ae:	2200      	movs	r2, #0
 80182b0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80182b2:	4b19      	ldr	r3, [pc, #100]	@ (8018318 <HAL_InitTick+0xe8>)
 80182b4:	2200      	movs	r2, #0
 80182b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80182b8:	4817      	ldr	r0, [pc, #92]	@ (8018318 <HAL_InitTick+0xe8>)
 80182ba:	f004 fc11 	bl	801cae0 <HAL_TIM_Base_Init>
 80182be:	4603      	mov	r3, r0
 80182c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80182c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d11b      	bne.n	8018304 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80182cc:	4812      	ldr	r0, [pc, #72]	@ (8018318 <HAL_InitTick+0xe8>)
 80182ce:	f004 fccf 	bl	801cc70 <HAL_TIM_Base_Start_IT>
 80182d2:	4603      	mov	r3, r0
 80182d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80182d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d111      	bne.n	8018304 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80182e0:	2036      	movs	r0, #54	@ 0x36
 80182e2:	f000 fa75 	bl	80187d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	2b0f      	cmp	r3, #15
 80182ea:	d808      	bhi.n	80182fe <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80182ec:	2200      	movs	r2, #0
 80182ee:	6879      	ldr	r1, [r7, #4]
 80182f0:	2036      	movs	r0, #54	@ 0x36
 80182f2:	f000 fa51 	bl	8018798 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80182f6:	4a0a      	ldr	r2, [pc, #40]	@ (8018320 <HAL_InitTick+0xf0>)
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	6013      	str	r3, [r2, #0]
 80182fc:	e002      	b.n	8018304 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80182fe:	2301      	movs	r3, #1
 8018300:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8018304:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8018308:	4618      	mov	r0, r3
 801830a:	3738      	adds	r7, #56	@ 0x38
 801830c:	46bd      	mov	sp, r7
 801830e:	bd80      	pop	{r7, pc}
 8018310:	40023800 	.word	0x40023800
 8018314:	431bde83 	.word	0x431bde83
 8018318:	2001afe4 	.word	0x2001afe4
 801831c:	40001000 	.word	0x40001000
 8018320:	200002b4 	.word	0x200002b4

08018324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8018324:	b480      	push	{r7}
 8018326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8018328:	bf00      	nop
 801832a:	e7fd      	b.n	8018328 <NMI_Handler+0x4>

0801832c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801832c:	b480      	push	{r7}
 801832e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8018330:	bf00      	nop
 8018332:	e7fd      	b.n	8018330 <HardFault_Handler+0x4>

08018334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8018334:	b480      	push	{r7}
 8018336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8018338:	bf00      	nop
 801833a:	e7fd      	b.n	8018338 <MemManage_Handler+0x4>

0801833c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801833c:	b480      	push	{r7}
 801833e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8018340:	bf00      	nop
 8018342:	e7fd      	b.n	8018340 <BusFault_Handler+0x4>

08018344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8018344:	b480      	push	{r7}
 8018346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8018348:	bf00      	nop
 801834a:	e7fd      	b.n	8018348 <UsageFault_Handler+0x4>

0801834c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801834c:	b480      	push	{r7}
 801834e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8018350:	bf00      	nop
 8018352:	46bd      	mov	sp, r7
 8018354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018358:	4770      	bx	lr
	...

0801835c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 801835c:	b580      	push	{r7, lr}
 801835e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8018360:	4802      	ldr	r0, [pc, #8]	@ (801836c <TIM6_DAC_IRQHandler+0x10>)
 8018362:	f004 fe59 	bl	801d018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8018366:	bf00      	nop
 8018368:	bd80      	pop	{r7, pc}
 801836a:	bf00      	nop
 801836c:	2001afe4 	.word	0x2001afe4

08018370 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8018370:	b580      	push	{r7, lr}
 8018372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8018374:	4802      	ldr	r0, [pc, #8]	@ (8018380 <OTG_FS_IRQHandler+0x10>)
 8018376:	f001 fb6b 	bl	8019a50 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801837a:	bf00      	nop
 801837c:	bd80      	pop	{r7, pc}
 801837e:	bf00      	nop
 8018380:	2002e2cc 	.word	0x2002e2cc

08018384 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8018384:	b480      	push	{r7}
 8018386:	af00      	add	r7, sp, #0
  return 1;
 8018388:	2301      	movs	r3, #1
}
 801838a:	4618      	mov	r0, r3
 801838c:	46bd      	mov	sp, r7
 801838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018392:	4770      	bx	lr

08018394 <_kill>:

int _kill(int pid, int sig)
{
 8018394:	b580      	push	{r7, lr}
 8018396:	b082      	sub	sp, #8
 8018398:	af00      	add	r7, sp, #0
 801839a:	6078      	str	r0, [r7, #4]
 801839c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 801839e:	f014 f8b3 	bl	802c508 <__errno>
 80183a2:	4603      	mov	r3, r0
 80183a4:	2216      	movs	r2, #22
 80183a6:	601a      	str	r2, [r3, #0]
  return -1;
 80183a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80183ac:	4618      	mov	r0, r3
 80183ae:	3708      	adds	r7, #8
 80183b0:	46bd      	mov	sp, r7
 80183b2:	bd80      	pop	{r7, pc}

080183b4 <_exit>:

void _exit (int status)
{
 80183b4:	b580      	push	{r7, lr}
 80183b6:	b082      	sub	sp, #8
 80183b8:	af00      	add	r7, sp, #0
 80183ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80183bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80183c0:	6878      	ldr	r0, [r7, #4]
 80183c2:	f7ff ffe7 	bl	8018394 <_kill>
  while (1) {}    /* Make sure we hang here */
 80183c6:	bf00      	nop
 80183c8:	e7fd      	b.n	80183c6 <_exit+0x12>

080183ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80183ca:	b580      	push	{r7, lr}
 80183cc:	b086      	sub	sp, #24
 80183ce:	af00      	add	r7, sp, #0
 80183d0:	60f8      	str	r0, [r7, #12]
 80183d2:	60b9      	str	r1, [r7, #8]
 80183d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80183d6:	2300      	movs	r3, #0
 80183d8:	617b      	str	r3, [r7, #20]
 80183da:	e00a      	b.n	80183f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80183dc:	f3af 8000 	nop.w
 80183e0:	4601      	mov	r1, r0
 80183e2:	68bb      	ldr	r3, [r7, #8]
 80183e4:	1c5a      	adds	r2, r3, #1
 80183e6:	60ba      	str	r2, [r7, #8]
 80183e8:	b2ca      	uxtb	r2, r1
 80183ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80183ec:	697b      	ldr	r3, [r7, #20]
 80183ee:	3301      	adds	r3, #1
 80183f0:	617b      	str	r3, [r7, #20]
 80183f2:	697a      	ldr	r2, [r7, #20]
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	429a      	cmp	r2, r3
 80183f8:	dbf0      	blt.n	80183dc <_read+0x12>
  }

  return len;
 80183fa:	687b      	ldr	r3, [r7, #4]
}
 80183fc:	4618      	mov	r0, r3
 80183fe:	3718      	adds	r7, #24
 8018400:	46bd      	mov	sp, r7
 8018402:	bd80      	pop	{r7, pc}

08018404 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8018404:	b580      	push	{r7, lr}
 8018406:	b086      	sub	sp, #24
 8018408:	af00      	add	r7, sp, #0
 801840a:	60f8      	str	r0, [r7, #12]
 801840c:	60b9      	str	r1, [r7, #8]
 801840e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8018410:	2300      	movs	r3, #0
 8018412:	617b      	str	r3, [r7, #20]
 8018414:	e009      	b.n	801842a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8018416:	68bb      	ldr	r3, [r7, #8]
 8018418:	1c5a      	adds	r2, r3, #1
 801841a:	60ba      	str	r2, [r7, #8]
 801841c:	781b      	ldrb	r3, [r3, #0]
 801841e:	4618      	mov	r0, r3
 8018420:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8018424:	697b      	ldr	r3, [r7, #20]
 8018426:	3301      	adds	r3, #1
 8018428:	617b      	str	r3, [r7, #20]
 801842a:	697a      	ldr	r2, [r7, #20]
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	429a      	cmp	r2, r3
 8018430:	dbf1      	blt.n	8018416 <_write+0x12>
  }
  return len;
 8018432:	687b      	ldr	r3, [r7, #4]
}
 8018434:	4618      	mov	r0, r3
 8018436:	3718      	adds	r7, #24
 8018438:	46bd      	mov	sp, r7
 801843a:	bd80      	pop	{r7, pc}

0801843c <_close>:

int _close(int file)
{
 801843c:	b480      	push	{r7}
 801843e:	b083      	sub	sp, #12
 8018440:	af00      	add	r7, sp, #0
 8018442:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8018444:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8018448:	4618      	mov	r0, r3
 801844a:	370c      	adds	r7, #12
 801844c:	46bd      	mov	sp, r7
 801844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018452:	4770      	bx	lr

08018454 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8018454:	b480      	push	{r7}
 8018456:	b083      	sub	sp, #12
 8018458:	af00      	add	r7, sp, #0
 801845a:	6078      	str	r0, [r7, #4]
 801845c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 801845e:	683b      	ldr	r3, [r7, #0]
 8018460:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8018464:	605a      	str	r2, [r3, #4]
  return 0;
 8018466:	2300      	movs	r3, #0
}
 8018468:	4618      	mov	r0, r3
 801846a:	370c      	adds	r7, #12
 801846c:	46bd      	mov	sp, r7
 801846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018472:	4770      	bx	lr

08018474 <_isatty>:

int _isatty(int file)
{
 8018474:	b480      	push	{r7}
 8018476:	b083      	sub	sp, #12
 8018478:	af00      	add	r7, sp, #0
 801847a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 801847c:	2301      	movs	r3, #1
}
 801847e:	4618      	mov	r0, r3
 8018480:	370c      	adds	r7, #12
 8018482:	46bd      	mov	sp, r7
 8018484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018488:	4770      	bx	lr

0801848a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801848a:	b480      	push	{r7}
 801848c:	b085      	sub	sp, #20
 801848e:	af00      	add	r7, sp, #0
 8018490:	60f8      	str	r0, [r7, #12]
 8018492:	60b9      	str	r1, [r7, #8]
 8018494:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8018496:	2300      	movs	r3, #0
}
 8018498:	4618      	mov	r0, r3
 801849a:	3714      	adds	r7, #20
 801849c:	46bd      	mov	sp, r7
 801849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184a2:	4770      	bx	lr

080184a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80184a4:	b580      	push	{r7, lr}
 80184a6:	b086      	sub	sp, #24
 80184a8:	af00      	add	r7, sp, #0
 80184aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80184ac:	4a14      	ldr	r2, [pc, #80]	@ (8018500 <_sbrk+0x5c>)
 80184ae:	4b15      	ldr	r3, [pc, #84]	@ (8018504 <_sbrk+0x60>)
 80184b0:	1ad3      	subs	r3, r2, r3
 80184b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80184b4:	697b      	ldr	r3, [r7, #20]
 80184b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80184b8:	4b13      	ldr	r3, [pc, #76]	@ (8018508 <_sbrk+0x64>)
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d102      	bne.n	80184c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80184c0:	4b11      	ldr	r3, [pc, #68]	@ (8018508 <_sbrk+0x64>)
 80184c2:	4a12      	ldr	r2, [pc, #72]	@ (801850c <_sbrk+0x68>)
 80184c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80184c6:	4b10      	ldr	r3, [pc, #64]	@ (8018508 <_sbrk+0x64>)
 80184c8:	681a      	ldr	r2, [r3, #0]
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	4413      	add	r3, r2
 80184ce:	693a      	ldr	r2, [r7, #16]
 80184d0:	429a      	cmp	r2, r3
 80184d2:	d207      	bcs.n	80184e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80184d4:	f014 f818 	bl	802c508 <__errno>
 80184d8:	4603      	mov	r3, r0
 80184da:	220c      	movs	r2, #12
 80184dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80184de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80184e2:	e009      	b.n	80184f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80184e4:	4b08      	ldr	r3, [pc, #32]	@ (8018508 <_sbrk+0x64>)
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80184ea:	4b07      	ldr	r3, [pc, #28]	@ (8018508 <_sbrk+0x64>)
 80184ec:	681a      	ldr	r2, [r3, #0]
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	4413      	add	r3, r2
 80184f2:	4a05      	ldr	r2, [pc, #20]	@ (8018508 <_sbrk+0x64>)
 80184f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80184f6:	68fb      	ldr	r3, [r7, #12]
}
 80184f8:	4618      	mov	r0, r3
 80184fa:	3718      	adds	r7, #24
 80184fc:	46bd      	mov	sp, r7
 80184fe:	bd80      	pop	{r7, pc}
 8018500:	20080000 	.word	0x20080000
 8018504:	00000400 	.word	0x00000400
 8018508:	2001b034 	.word	0x2001b034
 801850c:	2002e820 	.word	0x2002e820

08018510 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8018510:	b480      	push	{r7}
 8018512:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8018514:	4b06      	ldr	r3, [pc, #24]	@ (8018530 <SystemInit+0x20>)
 8018516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801851a:	4a05      	ldr	r2, [pc, #20]	@ (8018530 <SystemInit+0x20>)
 801851c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8018520:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8018524:	bf00      	nop
 8018526:	46bd      	mov	sp, r7
 8018528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801852c:	4770      	bx	lr
 801852e:	bf00      	nop
 8018530:	e000ed00 	.word	0xe000ed00

08018534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8018534:	f8df d034 	ldr.w	sp, [pc, #52]	@ 801856c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8018538:	f7ff ffea 	bl	8018510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801853c:	480c      	ldr	r0, [pc, #48]	@ (8018570 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801853e:	490d      	ldr	r1, [pc, #52]	@ (8018574 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8018540:	4a0d      	ldr	r2, [pc, #52]	@ (8018578 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8018542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8018544:	e002      	b.n	801854c <LoopCopyDataInit>

08018546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8018546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8018548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801854a:	3304      	adds	r3, #4

0801854c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801854c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801854e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8018550:	d3f9      	bcc.n	8018546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8018552:	4a0a      	ldr	r2, [pc, #40]	@ (801857c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8018554:	4c0a      	ldr	r4, [pc, #40]	@ (8018580 <LoopFillZerobss+0x22>)
  movs r3, #0
 8018556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8018558:	e001      	b.n	801855e <LoopFillZerobss>

0801855a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801855a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801855c:	3204      	adds	r2, #4

0801855e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801855e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8018560:	d3fb      	bcc.n	801855a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8018562:	f013 ffd7 	bl	802c514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8018566:	f7eb fee7 	bl	8004338 <main>
  bx  lr    
 801856a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801856c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8018570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8018574:	20000508 	.word	0x20000508
  ldr r2, =_sidata
 8018578:	0803a890 	.word	0x0803a890
  ldr r2, =_sbss
 801857c:	20000648 	.word	0x20000648
  ldr r4, =_ebss
 8018580:	2002e81c 	.word	0x2002e81c

08018584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8018584:	e7fe      	b.n	8018584 <ADC_IRQHandler>

08018586 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8018586:	b580      	push	{r7, lr}
 8018588:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801858a:	2003      	movs	r0, #3
 801858c:	f000 f8f9 	bl	8018782 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8018590:	200f      	movs	r0, #15
 8018592:	f7ff fe4d 	bl	8018230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8018596:	f7ff fcaf 	bl	8017ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801859a:	2300      	movs	r3, #0
}
 801859c:	4618      	mov	r0, r3
 801859e:	bd80      	pop	{r7, pc}

080185a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80185a0:	b480      	push	{r7}
 80185a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80185a4:	4b06      	ldr	r3, [pc, #24]	@ (80185c0 <HAL_IncTick+0x20>)
 80185a6:	781b      	ldrb	r3, [r3, #0]
 80185a8:	461a      	mov	r2, r3
 80185aa:	4b06      	ldr	r3, [pc, #24]	@ (80185c4 <HAL_IncTick+0x24>)
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	4413      	add	r3, r2
 80185b0:	4a04      	ldr	r2, [pc, #16]	@ (80185c4 <HAL_IncTick+0x24>)
 80185b2:	6013      	str	r3, [r2, #0]
}
 80185b4:	bf00      	nop
 80185b6:	46bd      	mov	sp, r7
 80185b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185bc:	4770      	bx	lr
 80185be:	bf00      	nop
 80185c0:	200002b8 	.word	0x200002b8
 80185c4:	2001b038 	.word	0x2001b038

080185c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80185c8:	b480      	push	{r7}
 80185ca:	af00      	add	r7, sp, #0
  return uwTick;
 80185cc:	4b03      	ldr	r3, [pc, #12]	@ (80185dc <HAL_GetTick+0x14>)
 80185ce:	681b      	ldr	r3, [r3, #0]
}
 80185d0:	4618      	mov	r0, r3
 80185d2:	46bd      	mov	sp, r7
 80185d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d8:	4770      	bx	lr
 80185da:	bf00      	nop
 80185dc:	2001b038 	.word	0x2001b038

080185e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80185e0:	b580      	push	{r7, lr}
 80185e2:	b084      	sub	sp, #16
 80185e4:	af00      	add	r7, sp, #0
 80185e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80185e8:	f7ff ffee 	bl	80185c8 <HAL_GetTick>
 80185ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80185f8:	d005      	beq.n	8018606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80185fa:	4b0a      	ldr	r3, [pc, #40]	@ (8018624 <HAL_Delay+0x44>)
 80185fc:	781b      	ldrb	r3, [r3, #0]
 80185fe:	461a      	mov	r2, r3
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	4413      	add	r3, r2
 8018604:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8018606:	bf00      	nop
 8018608:	f7ff ffde 	bl	80185c8 <HAL_GetTick>
 801860c:	4602      	mov	r2, r0
 801860e:	68bb      	ldr	r3, [r7, #8]
 8018610:	1ad3      	subs	r3, r2, r3
 8018612:	68fa      	ldr	r2, [r7, #12]
 8018614:	429a      	cmp	r2, r3
 8018616:	d8f7      	bhi.n	8018608 <HAL_Delay+0x28>
  {
  }
}
 8018618:	bf00      	nop
 801861a:	bf00      	nop
 801861c:	3710      	adds	r7, #16
 801861e:	46bd      	mov	sp, r7
 8018620:	bd80      	pop	{r7, pc}
 8018622:	bf00      	nop
 8018624:	200002b8 	.word	0x200002b8

08018628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018628:	b480      	push	{r7}
 801862a:	b085      	sub	sp, #20
 801862c:	af00      	add	r7, sp, #0
 801862e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	f003 0307 	and.w	r3, r3, #7
 8018636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8018638:	4b0b      	ldr	r3, [pc, #44]	@ (8018668 <__NVIC_SetPriorityGrouping+0x40>)
 801863a:	68db      	ldr	r3, [r3, #12]
 801863c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801863e:	68ba      	ldr	r2, [r7, #8]
 8018640:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8018644:	4013      	ands	r3, r2
 8018646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801864c:	68bb      	ldr	r3, [r7, #8]
 801864e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8018650:	4b06      	ldr	r3, [pc, #24]	@ (801866c <__NVIC_SetPriorityGrouping+0x44>)
 8018652:	4313      	orrs	r3, r2
 8018654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8018656:	4a04      	ldr	r2, [pc, #16]	@ (8018668 <__NVIC_SetPriorityGrouping+0x40>)
 8018658:	68bb      	ldr	r3, [r7, #8]
 801865a:	60d3      	str	r3, [r2, #12]
}
 801865c:	bf00      	nop
 801865e:	3714      	adds	r7, #20
 8018660:	46bd      	mov	sp, r7
 8018662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018666:	4770      	bx	lr
 8018668:	e000ed00 	.word	0xe000ed00
 801866c:	05fa0000 	.word	0x05fa0000

08018670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8018670:	b480      	push	{r7}
 8018672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8018674:	4b04      	ldr	r3, [pc, #16]	@ (8018688 <__NVIC_GetPriorityGrouping+0x18>)
 8018676:	68db      	ldr	r3, [r3, #12]
 8018678:	0a1b      	lsrs	r3, r3, #8
 801867a:	f003 0307 	and.w	r3, r3, #7
}
 801867e:	4618      	mov	r0, r3
 8018680:	46bd      	mov	sp, r7
 8018682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018686:	4770      	bx	lr
 8018688:	e000ed00 	.word	0xe000ed00

0801868c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801868c:	b480      	push	{r7}
 801868e:	b083      	sub	sp, #12
 8018690:	af00      	add	r7, sp, #0
 8018692:	4603      	mov	r3, r0
 8018694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801869a:	2b00      	cmp	r3, #0
 801869c:	db0b      	blt.n	80186b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801869e:	79fb      	ldrb	r3, [r7, #7]
 80186a0:	f003 021f 	and.w	r2, r3, #31
 80186a4:	4907      	ldr	r1, [pc, #28]	@ (80186c4 <__NVIC_EnableIRQ+0x38>)
 80186a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80186aa:	095b      	lsrs	r3, r3, #5
 80186ac:	2001      	movs	r0, #1
 80186ae:	fa00 f202 	lsl.w	r2, r0, r2
 80186b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80186b6:	bf00      	nop
 80186b8:	370c      	adds	r7, #12
 80186ba:	46bd      	mov	sp, r7
 80186bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186c0:	4770      	bx	lr
 80186c2:	bf00      	nop
 80186c4:	e000e100 	.word	0xe000e100

080186c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80186c8:	b480      	push	{r7}
 80186ca:	b083      	sub	sp, #12
 80186cc:	af00      	add	r7, sp, #0
 80186ce:	4603      	mov	r3, r0
 80186d0:	6039      	str	r1, [r7, #0]
 80186d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80186d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80186d8:	2b00      	cmp	r3, #0
 80186da:	db0a      	blt.n	80186f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80186dc:	683b      	ldr	r3, [r7, #0]
 80186de:	b2da      	uxtb	r2, r3
 80186e0:	490c      	ldr	r1, [pc, #48]	@ (8018714 <__NVIC_SetPriority+0x4c>)
 80186e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80186e6:	0112      	lsls	r2, r2, #4
 80186e8:	b2d2      	uxtb	r2, r2
 80186ea:	440b      	add	r3, r1
 80186ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80186f0:	e00a      	b.n	8018708 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80186f2:	683b      	ldr	r3, [r7, #0]
 80186f4:	b2da      	uxtb	r2, r3
 80186f6:	4908      	ldr	r1, [pc, #32]	@ (8018718 <__NVIC_SetPriority+0x50>)
 80186f8:	79fb      	ldrb	r3, [r7, #7]
 80186fa:	f003 030f 	and.w	r3, r3, #15
 80186fe:	3b04      	subs	r3, #4
 8018700:	0112      	lsls	r2, r2, #4
 8018702:	b2d2      	uxtb	r2, r2
 8018704:	440b      	add	r3, r1
 8018706:	761a      	strb	r2, [r3, #24]
}
 8018708:	bf00      	nop
 801870a:	370c      	adds	r7, #12
 801870c:	46bd      	mov	sp, r7
 801870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018712:	4770      	bx	lr
 8018714:	e000e100 	.word	0xe000e100
 8018718:	e000ed00 	.word	0xe000ed00

0801871c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801871c:	b480      	push	{r7}
 801871e:	b089      	sub	sp, #36	@ 0x24
 8018720:	af00      	add	r7, sp, #0
 8018722:	60f8      	str	r0, [r7, #12]
 8018724:	60b9      	str	r1, [r7, #8]
 8018726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	f003 0307 	and.w	r3, r3, #7
 801872e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8018730:	69fb      	ldr	r3, [r7, #28]
 8018732:	f1c3 0307 	rsb	r3, r3, #7
 8018736:	2b04      	cmp	r3, #4
 8018738:	bf28      	it	cs
 801873a:	2304      	movcs	r3, #4
 801873c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801873e:	69fb      	ldr	r3, [r7, #28]
 8018740:	3304      	adds	r3, #4
 8018742:	2b06      	cmp	r3, #6
 8018744:	d902      	bls.n	801874c <NVIC_EncodePriority+0x30>
 8018746:	69fb      	ldr	r3, [r7, #28]
 8018748:	3b03      	subs	r3, #3
 801874a:	e000      	b.n	801874e <NVIC_EncodePriority+0x32>
 801874c:	2300      	movs	r3, #0
 801874e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018750:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018754:	69bb      	ldr	r3, [r7, #24]
 8018756:	fa02 f303 	lsl.w	r3, r2, r3
 801875a:	43da      	mvns	r2, r3
 801875c:	68bb      	ldr	r3, [r7, #8]
 801875e:	401a      	ands	r2, r3
 8018760:	697b      	ldr	r3, [r7, #20]
 8018762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8018764:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8018768:	697b      	ldr	r3, [r7, #20]
 801876a:	fa01 f303 	lsl.w	r3, r1, r3
 801876e:	43d9      	mvns	r1, r3
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018774:	4313      	orrs	r3, r2
         );
}
 8018776:	4618      	mov	r0, r3
 8018778:	3724      	adds	r7, #36	@ 0x24
 801877a:	46bd      	mov	sp, r7
 801877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018780:	4770      	bx	lr

08018782 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018782:	b580      	push	{r7, lr}
 8018784:	b082      	sub	sp, #8
 8018786:	af00      	add	r7, sp, #0
 8018788:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801878a:	6878      	ldr	r0, [r7, #4]
 801878c:	f7ff ff4c 	bl	8018628 <__NVIC_SetPriorityGrouping>
}
 8018790:	bf00      	nop
 8018792:	3708      	adds	r7, #8
 8018794:	46bd      	mov	sp, r7
 8018796:	bd80      	pop	{r7, pc}

08018798 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8018798:	b580      	push	{r7, lr}
 801879a:	b086      	sub	sp, #24
 801879c:	af00      	add	r7, sp, #0
 801879e:	4603      	mov	r3, r0
 80187a0:	60b9      	str	r1, [r7, #8]
 80187a2:	607a      	str	r2, [r7, #4]
 80187a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80187a6:	2300      	movs	r3, #0
 80187a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80187aa:	f7ff ff61 	bl	8018670 <__NVIC_GetPriorityGrouping>
 80187ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80187b0:	687a      	ldr	r2, [r7, #4]
 80187b2:	68b9      	ldr	r1, [r7, #8]
 80187b4:	6978      	ldr	r0, [r7, #20]
 80187b6:	f7ff ffb1 	bl	801871c <NVIC_EncodePriority>
 80187ba:	4602      	mov	r2, r0
 80187bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80187c0:	4611      	mov	r1, r2
 80187c2:	4618      	mov	r0, r3
 80187c4:	f7ff ff80 	bl	80186c8 <__NVIC_SetPriority>
}
 80187c8:	bf00      	nop
 80187ca:	3718      	adds	r7, #24
 80187cc:	46bd      	mov	sp, r7
 80187ce:	bd80      	pop	{r7, pc}

080187d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80187d0:	b580      	push	{r7, lr}
 80187d2:	b082      	sub	sp, #8
 80187d4:	af00      	add	r7, sp, #0
 80187d6:	4603      	mov	r3, r0
 80187d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80187da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80187de:	4618      	mov	r0, r3
 80187e0:	f7ff ff54 	bl	801868c <__NVIC_EnableIRQ>
}
 80187e4:	bf00      	nop
 80187e6:	3708      	adds	r7, #8
 80187e8:	46bd      	mov	sp, r7
 80187ea:	bd80      	pop	{r7, pc}

080187ec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80187ec:	b580      	push	{r7, lr}
 80187ee:	b084      	sub	sp, #16
 80187f0:	af00      	add	r7, sp, #0
 80187f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d101      	bne.n	80187fe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80187fa:	2301      	movs	r3, #1
 80187fc:	e086      	b.n	801890c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8018804:	2b00      	cmp	r3, #0
 8018806:	d106      	bne.n	8018816 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	2223      	movs	r2, #35	@ 0x23
 801880c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8018810:	6878      	ldr	r0, [r7, #4]
 8018812:	f7ff fb99 	bl	8017f48 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8018816:	4b3f      	ldr	r3, [pc, #252]	@ (8018914 <HAL_ETH_Init+0x128>)
 8018818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801881a:	4a3e      	ldr	r2, [pc, #248]	@ (8018914 <HAL_ETH_Init+0x128>)
 801881c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8018820:	6453      	str	r3, [r2, #68]	@ 0x44
 8018822:	4b3c      	ldr	r3, [pc, #240]	@ (8018914 <HAL_ETH_Init+0x128>)
 8018824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801882a:	60bb      	str	r3, [r7, #8]
 801882c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 801882e:	4b3a      	ldr	r3, [pc, #232]	@ (8018918 <HAL_ETH_Init+0x12c>)
 8018830:	685b      	ldr	r3, [r3, #4]
 8018832:	4a39      	ldr	r2, [pc, #228]	@ (8018918 <HAL_ETH_Init+0x12c>)
 8018834:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8018838:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 801883a:	4b37      	ldr	r3, [pc, #220]	@ (8018918 <HAL_ETH_Init+0x12c>)
 801883c:	685a      	ldr	r2, [r3, #4]
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	689b      	ldr	r3, [r3, #8]
 8018842:	4935      	ldr	r1, [pc, #212]	@ (8018918 <HAL_ETH_Init+0x12c>)
 8018844:	4313      	orrs	r3, r2
 8018846:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8018848:	4b33      	ldr	r3, [pc, #204]	@ (8018918 <HAL_ETH_Init+0x12c>)
 801884a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	687a      	ldr	r2, [r7, #4]
 8018858:	6812      	ldr	r2, [r2, #0]
 801885a:	f043 0301 	orr.w	r3, r3, #1
 801885e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018862:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8018864:	f7ff feb0 	bl	80185c8 <HAL_GetTick>
 8018868:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 801886a:	e011      	b.n	8018890 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 801886c:	f7ff feac 	bl	80185c8 <HAL_GetTick>
 8018870:	4602      	mov	r2, r0
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	1ad3      	subs	r3, r2, r3
 8018876:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801887a:	d909      	bls.n	8018890 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	2204      	movs	r2, #4
 8018880:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	22e0      	movs	r2, #224	@ 0xe0
 8018888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 801888c:	2301      	movs	r3, #1
 801888e:	e03d      	b.n	801890c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	f003 0301 	and.w	r3, r3, #1
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d1e4      	bne.n	801886c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80188a2:	6878      	ldr	r0, [r7, #4]
 80188a4:	f000 f97a 	bl	8018b9c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80188a8:	6878      	ldr	r0, [r7, #4]
 80188aa:	f000 fa25 	bl	8018cf8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80188ae:	6878      	ldr	r0, [r7, #4]
 80188b0:	f000 fa7b 	bl	8018daa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	685b      	ldr	r3, [r3, #4]
 80188b8:	461a      	mov	r2, r3
 80188ba:	2100      	movs	r1, #0
 80188bc:	6878      	ldr	r0, [r7, #4]
 80188be:	f000 f9e3 	bl	8018c88 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80188d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	681a      	ldr	r2, [r3, #0]
 80188de:	4b0f      	ldr	r3, [pc, #60]	@ (801891c <HAL_ETH_Init+0x130>)
 80188e0:	430b      	orrs	r3, r1
 80188e2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80188f6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	2200      	movs	r2, #0
 80188fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	2210      	movs	r2, #16
 8018906:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801890a:	2300      	movs	r3, #0
}
 801890c:	4618      	mov	r0, r3
 801890e:	3710      	adds	r7, #16
 8018910:	46bd      	mov	sp, r7
 8018912:	bd80      	pop	{r7, pc}
 8018914:	40023800 	.word	0x40023800
 8018918:	40013800 	.word	0x40013800
 801891c:	00020060 	.word	0x00020060

08018920 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8018920:	b580      	push	{r7, lr}
 8018922:	b084      	sub	sp, #16
 8018924:	af00      	add	r7, sp, #0
 8018926:	6078      	str	r0, [r7, #4]
 8018928:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8018932:	68fa      	ldr	r2, [r7, #12]
 8018934:	4b53      	ldr	r3, [pc, #332]	@ (8018a84 <ETH_SetMACConfig+0x164>)
 8018936:	4013      	ands	r3, r2
 8018938:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 801893a:	683b      	ldr	r3, [r7, #0]
 801893c:	7b9b      	ldrb	r3, [r3, #14]
 801893e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8018940:	683a      	ldr	r2, [r7, #0]
 8018942:	7c12      	ldrb	r2, [r2, #16]
 8018944:	2a00      	cmp	r2, #0
 8018946:	d102      	bne.n	801894e <ETH_SetMACConfig+0x2e>
 8018948:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 801894c:	e000      	b.n	8018950 <ETH_SetMACConfig+0x30>
 801894e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8018950:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8018952:	683a      	ldr	r2, [r7, #0]
 8018954:	7c52      	ldrb	r2, [r2, #17]
 8018956:	2a00      	cmp	r2, #0
 8018958:	d102      	bne.n	8018960 <ETH_SetMACConfig+0x40>
 801895a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 801895e:	e000      	b.n	8018962 <ETH_SetMACConfig+0x42>
 8018960:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8018962:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8018964:	683b      	ldr	r3, [r7, #0]
 8018966:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8018968:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 801896a:	683b      	ldr	r3, [r7, #0]
 801896c:	7fdb      	ldrb	r3, [r3, #31]
 801896e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8018970:	431a      	orrs	r2, r3
                        macconf->Speed |
 8018972:	683b      	ldr	r3, [r7, #0]
 8018974:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8018976:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8018978:	683a      	ldr	r2, [r7, #0]
 801897a:	7f92      	ldrb	r2, [r2, #30]
 801897c:	2a00      	cmp	r2, #0
 801897e:	d102      	bne.n	8018986 <ETH_SetMACConfig+0x66>
 8018980:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8018984:	e000      	b.n	8018988 <ETH_SetMACConfig+0x68>
 8018986:	2200      	movs	r2, #0
                        macconf->Speed |
 8018988:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 801898a:	683b      	ldr	r3, [r7, #0]
 801898c:	7f1b      	ldrb	r3, [r3, #28]
 801898e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8018990:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8018992:	683b      	ldr	r3, [r7, #0]
 8018994:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8018996:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8018998:	683b      	ldr	r3, [r7, #0]
 801899a:	791b      	ldrb	r3, [r3, #4]
 801899c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 801899e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80189a0:	683a      	ldr	r2, [r7, #0]
 80189a2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80189a6:	2a00      	cmp	r2, #0
 80189a8:	d102      	bne.n	80189b0 <ETH_SetMACConfig+0x90>
 80189aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80189ae:	e000      	b.n	80189b2 <ETH_SetMACConfig+0x92>
 80189b0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80189b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80189b4:	683b      	ldr	r3, [r7, #0]
 80189b6:	7bdb      	ldrb	r3, [r3, #15]
 80189b8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80189ba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80189bc:	683b      	ldr	r3, [r7, #0]
 80189be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80189c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80189c2:	683b      	ldr	r3, [r7, #0]
 80189c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80189c8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80189ca:	4313      	orrs	r3, r2
 80189cc:	68fa      	ldr	r2, [r7, #12]
 80189ce:	4313      	orrs	r3, r2
 80189d0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	681b      	ldr	r3, [r3, #0]
 80189d6:	68fa      	ldr	r2, [r7, #12]
 80189d8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80189e2:	2001      	movs	r0, #1
 80189e4:	f7ff fdfc 	bl	80185e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	68fa      	ldr	r2, [r7, #12]
 80189ee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	699b      	ldr	r3, [r3, #24]
 80189f6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80189f8:	68fa      	ldr	r2, [r7, #12]
 80189fa:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80189fe:	4013      	ands	r3, r2
 8018a00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8018a02:	683b      	ldr	r3, [r7, #0]
 8018a04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018a06:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8018a08:	683a      	ldr	r2, [r7, #0]
 8018a0a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8018a0e:	2a00      	cmp	r2, #0
 8018a10:	d101      	bne.n	8018a16 <ETH_SetMACConfig+0xf6>
 8018a12:	2280      	movs	r2, #128	@ 0x80
 8018a14:	e000      	b.n	8018a18 <ETH_SetMACConfig+0xf8>
 8018a16:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8018a18:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8018a1a:	683b      	ldr	r3, [r7, #0]
 8018a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8018a1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8018a20:	683a      	ldr	r2, [r7, #0]
 8018a22:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8018a26:	2a01      	cmp	r2, #1
 8018a28:	d101      	bne.n	8018a2e <ETH_SetMACConfig+0x10e>
 8018a2a:	2208      	movs	r2, #8
 8018a2c:	e000      	b.n	8018a30 <ETH_SetMACConfig+0x110>
 8018a2e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8018a30:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8018a32:	683a      	ldr	r2, [r7, #0]
 8018a34:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8018a38:	2a01      	cmp	r2, #1
 8018a3a:	d101      	bne.n	8018a40 <ETH_SetMACConfig+0x120>
 8018a3c:	2204      	movs	r2, #4
 8018a3e:	e000      	b.n	8018a42 <ETH_SetMACConfig+0x122>
 8018a40:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8018a42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8018a44:	683a      	ldr	r2, [r7, #0]
 8018a46:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8018a4a:	2a01      	cmp	r2, #1
 8018a4c:	d101      	bne.n	8018a52 <ETH_SetMACConfig+0x132>
 8018a4e:	2202      	movs	r2, #2
 8018a50:	e000      	b.n	8018a54 <ETH_SetMACConfig+0x134>
 8018a52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8018a54:	4313      	orrs	r3, r2
 8018a56:	68fa      	ldr	r2, [r7, #12]
 8018a58:	4313      	orrs	r3, r2
 8018a5a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	68fa      	ldr	r2, [r7, #12]
 8018a62:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	699b      	ldr	r3, [r3, #24]
 8018a6a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8018a6c:	2001      	movs	r0, #1
 8018a6e:	f7ff fdb7 	bl	80185e0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	681b      	ldr	r3, [r3, #0]
 8018a76:	68fa      	ldr	r2, [r7, #12]
 8018a78:	619a      	str	r2, [r3, #24]
}
 8018a7a:	bf00      	nop
 8018a7c:	3710      	adds	r7, #16
 8018a7e:	46bd      	mov	sp, r7
 8018a80:	bd80      	pop	{r7, pc}
 8018a82:	bf00      	nop
 8018a84:	fd20810f 	.word	0xfd20810f

08018a88 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	b084      	sub	sp, #16
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	6078      	str	r0, [r7, #4]
 8018a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	681b      	ldr	r3, [r3, #0]
 8018a96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018a9a:	699b      	ldr	r3, [r3, #24]
 8018a9c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8018a9e:	68fa      	ldr	r2, [r7, #12]
 8018aa0:	4b3d      	ldr	r3, [pc, #244]	@ (8018b98 <ETH_SetDMAConfig+0x110>)
 8018aa2:	4013      	ands	r3, r2
 8018aa4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8018aa6:	683b      	ldr	r3, [r7, #0]
 8018aa8:	7b1b      	ldrb	r3, [r3, #12]
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d102      	bne.n	8018ab4 <ETH_SetDMAConfig+0x2c>
 8018aae:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8018ab2:	e000      	b.n	8018ab6 <ETH_SetDMAConfig+0x2e>
 8018ab4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8018ab6:	683b      	ldr	r3, [r7, #0]
 8018ab8:	7b5b      	ldrb	r3, [r3, #13]
 8018aba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8018abc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8018abe:	683a      	ldr	r2, [r7, #0]
 8018ac0:	7f52      	ldrb	r2, [r2, #29]
 8018ac2:	2a00      	cmp	r2, #0
 8018ac4:	d102      	bne.n	8018acc <ETH_SetDMAConfig+0x44>
 8018ac6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8018aca:	e000      	b.n	8018ace <ETH_SetDMAConfig+0x46>
 8018acc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8018ace:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8018ad0:	683b      	ldr	r3, [r7, #0]
 8018ad2:	7b9b      	ldrb	r3, [r3, #14]
 8018ad4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8018ad6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8018ad8:	683b      	ldr	r3, [r7, #0]
 8018ada:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8018adc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8018ade:	683b      	ldr	r3, [r7, #0]
 8018ae0:	7f1b      	ldrb	r3, [r3, #28]
 8018ae2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8018ae4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8018ae6:	683b      	ldr	r3, [r7, #0]
 8018ae8:	7f9b      	ldrb	r3, [r3, #30]
 8018aea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8018aec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8018aee:	683b      	ldr	r3, [r7, #0]
 8018af0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8018af2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8018af4:	683b      	ldr	r3, [r7, #0]
 8018af6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8018afa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8018afc:	4313      	orrs	r3, r2
 8018afe:	68fa      	ldr	r2, [r7, #12]
 8018b00:	4313      	orrs	r3, r2
 8018b02:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018b0c:	461a      	mov	r2, r3
 8018b0e:	68fb      	ldr	r3, [r7, #12]
 8018b10:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018b1a:	699b      	ldr	r3, [r3, #24]
 8018b1c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8018b1e:	2001      	movs	r0, #1
 8018b20:	f7ff fd5e 	bl	80185e0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018b2c:	461a      	mov	r2, r3
 8018b2e:	68fb      	ldr	r3, [r7, #12]
 8018b30:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8018b32:	683b      	ldr	r3, [r7, #0]
 8018b34:	791b      	ldrb	r3, [r3, #4]
 8018b36:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8018b38:	683b      	ldr	r3, [r7, #0]
 8018b3a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8018b3c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8018b3e:	683b      	ldr	r3, [r7, #0]
 8018b40:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8018b42:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8018b44:	683b      	ldr	r3, [r7, #0]
 8018b46:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8018b48:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8018b4a:	683b      	ldr	r3, [r7, #0]
 8018b4c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8018b50:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8018b52:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8018b54:	683b      	ldr	r3, [r7, #0]
 8018b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b58:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8018b5a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8018b5c:	683b      	ldr	r3, [r7, #0]
 8018b5e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8018b60:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8018b62:	687a      	ldr	r2, [r7, #4]
 8018b64:	6812      	ldr	r2, [r2, #0]
 8018b66:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8018b6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018b6e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8018b7c:	2001      	movs	r0, #1
 8018b7e:	f7ff fd2f 	bl	80185e0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018b8a:	461a      	mov	r2, r3
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	6013      	str	r3, [r2, #0]
}
 8018b90:	bf00      	nop
 8018b92:	3710      	adds	r7, #16
 8018b94:	46bd      	mov	sp, r7
 8018b96:	bd80      	pop	{r7, pc}
 8018b98:	f8de3f23 	.word	0xf8de3f23

08018b9c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b0a6      	sub	sp, #152	@ 0x98
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8018ba4:	2301      	movs	r3, #1
 8018ba6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8018baa:	2301      	movs	r3, #1
 8018bac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8018bb0:	2300      	movs	r3, #0
 8018bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8018bb4:	2300      	movs	r3, #0
 8018bb6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8018bba:	2301      	movs	r3, #1
 8018bbc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8018bc0:	2300      	movs	r3, #0
 8018bc2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8018bc6:	2301      	movs	r3, #1
 8018bc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8018bcc:	2301      	movs	r3, #1
 8018bce:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8018bd2:	2300      	movs	r3, #0
 8018bd4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8018bd8:	2300      	movs	r3, #0
 8018bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8018bde:	2300      	movs	r3, #0
 8018be0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8018be2:	2300      	movs	r3, #0
 8018be4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8018be8:	2300      	movs	r3, #0
 8018bea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8018bec:	2300      	movs	r3, #0
 8018bee:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8018bf2:	2300      	movs	r3, #0
 8018bf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8018bf8:	2300      	movs	r3, #0
 8018bfa:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8018bfe:	2300      	movs	r3, #0
 8018c00:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8018c04:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8018c08:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8018c0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8018c10:	2300      	movs	r3, #0
 8018c12:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8018c16:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018c1a:	4619      	mov	r1, r3
 8018c1c:	6878      	ldr	r0, [r7, #4]
 8018c1e:	f7ff fe7f 	bl	8018920 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8018c22:	2301      	movs	r3, #1
 8018c24:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8018c26:	2301      	movs	r3, #1
 8018c28:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8018c2a:	2301      	movs	r3, #1
 8018c2c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8018c30:	2301      	movs	r3, #1
 8018c32:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8018c34:	2300      	movs	r3, #0
 8018c36:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8018c38:	2300      	movs	r3, #0
 8018c3a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8018c3e:	2300      	movs	r3, #0
 8018c40:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8018c44:	2300      	movs	r3, #0
 8018c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8018c48:	2301      	movs	r3, #1
 8018c4a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8018c4e:	2301      	movs	r3, #1
 8018c50:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8018c52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8018c56:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8018c58:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8018c5c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8018c5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8018c62:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8018c64:	2301      	movs	r3, #1
 8018c66:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8018c6a:	2300      	movs	r3, #0
 8018c6c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8018c6e:	2300      	movs	r3, #0
 8018c70:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8018c72:	f107 0308 	add.w	r3, r7, #8
 8018c76:	4619      	mov	r1, r3
 8018c78:	6878      	ldr	r0, [r7, #4]
 8018c7a:	f7ff ff05 	bl	8018a88 <ETH_SetDMAConfig>
}
 8018c7e:	bf00      	nop
 8018c80:	3798      	adds	r7, #152	@ 0x98
 8018c82:	46bd      	mov	sp, r7
 8018c84:	bd80      	pop	{r7, pc}
	...

08018c88 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8018c88:	b480      	push	{r7}
 8018c8a:	b087      	sub	sp, #28
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	60f8      	str	r0, [r7, #12]
 8018c90:	60b9      	str	r1, [r7, #8]
 8018c92:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	3305      	adds	r3, #5
 8018c98:	781b      	ldrb	r3, [r3, #0]
 8018c9a:	021b      	lsls	r3, r3, #8
 8018c9c:	687a      	ldr	r2, [r7, #4]
 8018c9e:	3204      	adds	r2, #4
 8018ca0:	7812      	ldrb	r2, [r2, #0]
 8018ca2:	4313      	orrs	r3, r2
 8018ca4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8018ca6:	68ba      	ldr	r2, [r7, #8]
 8018ca8:	4b11      	ldr	r3, [pc, #68]	@ (8018cf0 <ETH_MACAddressConfig+0x68>)
 8018caa:	4413      	add	r3, r2
 8018cac:	461a      	mov	r2, r3
 8018cae:	697b      	ldr	r3, [r7, #20]
 8018cb0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	3303      	adds	r3, #3
 8018cb6:	781b      	ldrb	r3, [r3, #0]
 8018cb8:	061a      	lsls	r2, r3, #24
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	3302      	adds	r3, #2
 8018cbe:	781b      	ldrb	r3, [r3, #0]
 8018cc0:	041b      	lsls	r3, r3, #16
 8018cc2:	431a      	orrs	r2, r3
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	3301      	adds	r3, #1
 8018cc8:	781b      	ldrb	r3, [r3, #0]
 8018cca:	021b      	lsls	r3, r3, #8
 8018ccc:	4313      	orrs	r3, r2
 8018cce:	687a      	ldr	r2, [r7, #4]
 8018cd0:	7812      	ldrb	r2, [r2, #0]
 8018cd2:	4313      	orrs	r3, r2
 8018cd4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8018cd6:	68ba      	ldr	r2, [r7, #8]
 8018cd8:	4b06      	ldr	r3, [pc, #24]	@ (8018cf4 <ETH_MACAddressConfig+0x6c>)
 8018cda:	4413      	add	r3, r2
 8018cdc:	461a      	mov	r2, r3
 8018cde:	697b      	ldr	r3, [r7, #20]
 8018ce0:	6013      	str	r3, [r2, #0]
}
 8018ce2:	bf00      	nop
 8018ce4:	371c      	adds	r7, #28
 8018ce6:	46bd      	mov	sp, r7
 8018ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cec:	4770      	bx	lr
 8018cee:	bf00      	nop
 8018cf0:	40028040 	.word	0x40028040
 8018cf4:	40028044 	.word	0x40028044

08018cf8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8018cf8:	b480      	push	{r7}
 8018cfa:	b085      	sub	sp, #20
 8018cfc:	af00      	add	r7, sp, #0
 8018cfe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8018d00:	2300      	movs	r3, #0
 8018d02:	60fb      	str	r3, [r7, #12]
 8018d04:	e03e      	b.n	8018d84 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	68d9      	ldr	r1, [r3, #12]
 8018d0a:	68fa      	ldr	r2, [r7, #12]
 8018d0c:	4613      	mov	r3, r2
 8018d0e:	009b      	lsls	r3, r3, #2
 8018d10:	4413      	add	r3, r2
 8018d12:	00db      	lsls	r3, r3, #3
 8018d14:	440b      	add	r3, r1
 8018d16:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8018d18:	68bb      	ldr	r3, [r7, #8]
 8018d1a:	2200      	movs	r2, #0
 8018d1c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8018d1e:	68bb      	ldr	r3, [r7, #8]
 8018d20:	2200      	movs	r2, #0
 8018d22:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8018d24:	68bb      	ldr	r3, [r7, #8]
 8018d26:	2200      	movs	r2, #0
 8018d28:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8018d2a:	68bb      	ldr	r3, [r7, #8]
 8018d2c:	2200      	movs	r2, #0
 8018d2e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8018d30:	68b9      	ldr	r1, [r7, #8]
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	68fa      	ldr	r2, [r7, #12]
 8018d36:	3206      	adds	r2, #6
 8018d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8018d3c:	68bb      	ldr	r3, [r7, #8]
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8018d44:	68bb      	ldr	r3, [r7, #8]
 8018d46:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8018d48:	68fb      	ldr	r3, [r7, #12]
 8018d4a:	2b02      	cmp	r3, #2
 8018d4c:	d80c      	bhi.n	8018d68 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	68d9      	ldr	r1, [r3, #12]
 8018d52:	68fb      	ldr	r3, [r7, #12]
 8018d54:	1c5a      	adds	r2, r3, #1
 8018d56:	4613      	mov	r3, r2
 8018d58:	009b      	lsls	r3, r3, #2
 8018d5a:	4413      	add	r3, r2
 8018d5c:	00db      	lsls	r3, r3, #3
 8018d5e:	440b      	add	r3, r1
 8018d60:	461a      	mov	r2, r3
 8018d62:	68bb      	ldr	r3, [r7, #8]
 8018d64:	60da      	str	r2, [r3, #12]
 8018d66:	e004      	b.n	8018d72 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	68db      	ldr	r3, [r3, #12]
 8018d6c:	461a      	mov	r2, r3
 8018d6e:	68bb      	ldr	r3, [r7, #8]
 8018d70:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8018d72:	68bb      	ldr	r3, [r7, #8]
 8018d74:	681b      	ldr	r3, [r3, #0]
 8018d76:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8018d7a:	68bb      	ldr	r3, [r7, #8]
 8018d7c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8018d7e:	68fb      	ldr	r3, [r7, #12]
 8018d80:	3301      	adds	r3, #1
 8018d82:	60fb      	str	r3, [r7, #12]
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	2b03      	cmp	r3, #3
 8018d88:	d9bd      	bls.n	8018d06 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	2200      	movs	r2, #0
 8018d8e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	68da      	ldr	r2, [r3, #12]
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018d9c:	611a      	str	r2, [r3, #16]
}
 8018d9e:	bf00      	nop
 8018da0:	3714      	adds	r7, #20
 8018da2:	46bd      	mov	sp, r7
 8018da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da8:	4770      	bx	lr

08018daa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8018daa:	b480      	push	{r7}
 8018dac:	b085      	sub	sp, #20
 8018dae:	af00      	add	r7, sp, #0
 8018db0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8018db2:	2300      	movs	r3, #0
 8018db4:	60fb      	str	r3, [r7, #12]
 8018db6:	e048      	b.n	8018e4a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	6919      	ldr	r1, [r3, #16]
 8018dbc:	68fa      	ldr	r2, [r7, #12]
 8018dbe:	4613      	mov	r3, r2
 8018dc0:	009b      	lsls	r3, r3, #2
 8018dc2:	4413      	add	r3, r2
 8018dc4:	00db      	lsls	r3, r3, #3
 8018dc6:	440b      	add	r3, r1
 8018dc8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8018dca:	68bb      	ldr	r3, [r7, #8]
 8018dcc:	2200      	movs	r2, #0
 8018dce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8018dd0:	68bb      	ldr	r3, [r7, #8]
 8018dd2:	2200      	movs	r2, #0
 8018dd4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8018dd6:	68bb      	ldr	r3, [r7, #8]
 8018dd8:	2200      	movs	r2, #0
 8018dda:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8018ddc:	68bb      	ldr	r3, [r7, #8]
 8018dde:	2200      	movs	r2, #0
 8018de0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8018de2:	68bb      	ldr	r3, [r7, #8]
 8018de4:	2200      	movs	r2, #0
 8018de6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8018de8:	68bb      	ldr	r3, [r7, #8]
 8018dea:	2200      	movs	r2, #0
 8018dec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8018dee:	68bb      	ldr	r3, [r7, #8]
 8018df0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8018df4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	695b      	ldr	r3, [r3, #20]
 8018dfa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8018dfe:	68bb      	ldr	r3, [r7, #8]
 8018e00:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8018e02:	68bb      	ldr	r3, [r7, #8]
 8018e04:	685b      	ldr	r3, [r3, #4]
 8018e06:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8018e0a:	68bb      	ldr	r3, [r7, #8]
 8018e0c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8018e0e:	68b9      	ldr	r1, [r7, #8]
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	68fa      	ldr	r2, [r7, #12]
 8018e14:	3212      	adds	r2, #18
 8018e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8018e1a:	68fb      	ldr	r3, [r7, #12]
 8018e1c:	2b02      	cmp	r3, #2
 8018e1e:	d80c      	bhi.n	8018e3a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	6919      	ldr	r1, [r3, #16]
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	1c5a      	adds	r2, r3, #1
 8018e28:	4613      	mov	r3, r2
 8018e2a:	009b      	lsls	r3, r3, #2
 8018e2c:	4413      	add	r3, r2
 8018e2e:	00db      	lsls	r3, r3, #3
 8018e30:	440b      	add	r3, r1
 8018e32:	461a      	mov	r2, r3
 8018e34:	68bb      	ldr	r3, [r7, #8]
 8018e36:	60da      	str	r2, [r3, #12]
 8018e38:	e004      	b.n	8018e44 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	691b      	ldr	r3, [r3, #16]
 8018e3e:	461a      	mov	r2, r3
 8018e40:	68bb      	ldr	r3, [r7, #8]
 8018e42:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	3301      	adds	r3, #1
 8018e48:	60fb      	str	r3, [r7, #12]
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	2b03      	cmp	r3, #3
 8018e4e:	d9b3      	bls.n	8018db8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	2200      	movs	r2, #0
 8018e54:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	2200      	movs	r2, #0
 8018e5a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	2200      	movs	r2, #0
 8018e60:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	2200      	movs	r2, #0
 8018e66:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	2200      	movs	r2, #0
 8018e6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	691a      	ldr	r2, [r3, #16]
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018e7a:	60da      	str	r2, [r3, #12]
}
 8018e7c:	bf00      	nop
 8018e7e:	3714      	adds	r7, #20
 8018e80:	46bd      	mov	sp, r7
 8018e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e86:	4770      	bx	lr

08018e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8018e88:	b480      	push	{r7}
 8018e8a:	b089      	sub	sp, #36	@ 0x24
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
 8018e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8018e92:	2300      	movs	r3, #0
 8018e94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8018e96:	2300      	movs	r3, #0
 8018e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8018e9a:	2300      	movs	r3, #0
 8018e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8018e9e:	2300      	movs	r3, #0
 8018ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	61fb      	str	r3, [r7, #28]
 8018ea6:	e175      	b.n	8019194 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8018ea8:	2201      	movs	r2, #1
 8018eaa:	69fb      	ldr	r3, [r7, #28]
 8018eac:	fa02 f303 	lsl.w	r3, r2, r3
 8018eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8018eb2:	683b      	ldr	r3, [r7, #0]
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	697a      	ldr	r2, [r7, #20]
 8018eb8:	4013      	ands	r3, r2
 8018eba:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8018ebc:	693a      	ldr	r2, [r7, #16]
 8018ebe:	697b      	ldr	r3, [r7, #20]
 8018ec0:	429a      	cmp	r2, r3
 8018ec2:	f040 8164 	bne.w	801918e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8018ec6:	683b      	ldr	r3, [r7, #0]
 8018ec8:	685b      	ldr	r3, [r3, #4]
 8018eca:	f003 0303 	and.w	r3, r3, #3
 8018ece:	2b01      	cmp	r3, #1
 8018ed0:	d005      	beq.n	8018ede <HAL_GPIO_Init+0x56>
 8018ed2:	683b      	ldr	r3, [r7, #0]
 8018ed4:	685b      	ldr	r3, [r3, #4]
 8018ed6:	f003 0303 	and.w	r3, r3, #3
 8018eda:	2b02      	cmp	r3, #2
 8018edc:	d130      	bne.n	8018f40 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	689b      	ldr	r3, [r3, #8]
 8018ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8018ee4:	69fb      	ldr	r3, [r7, #28]
 8018ee6:	005b      	lsls	r3, r3, #1
 8018ee8:	2203      	movs	r2, #3
 8018eea:	fa02 f303 	lsl.w	r3, r2, r3
 8018eee:	43db      	mvns	r3, r3
 8018ef0:	69ba      	ldr	r2, [r7, #24]
 8018ef2:	4013      	ands	r3, r2
 8018ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8018ef6:	683b      	ldr	r3, [r7, #0]
 8018ef8:	68da      	ldr	r2, [r3, #12]
 8018efa:	69fb      	ldr	r3, [r7, #28]
 8018efc:	005b      	lsls	r3, r3, #1
 8018efe:	fa02 f303 	lsl.w	r3, r2, r3
 8018f02:	69ba      	ldr	r2, [r7, #24]
 8018f04:	4313      	orrs	r3, r2
 8018f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	69ba      	ldr	r2, [r7, #24]
 8018f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	685b      	ldr	r3, [r3, #4]
 8018f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8018f14:	2201      	movs	r2, #1
 8018f16:	69fb      	ldr	r3, [r7, #28]
 8018f18:	fa02 f303 	lsl.w	r3, r2, r3
 8018f1c:	43db      	mvns	r3, r3
 8018f1e:	69ba      	ldr	r2, [r7, #24]
 8018f20:	4013      	ands	r3, r2
 8018f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8018f24:	683b      	ldr	r3, [r7, #0]
 8018f26:	685b      	ldr	r3, [r3, #4]
 8018f28:	091b      	lsrs	r3, r3, #4
 8018f2a:	f003 0201 	and.w	r2, r3, #1
 8018f2e:	69fb      	ldr	r3, [r7, #28]
 8018f30:	fa02 f303 	lsl.w	r3, r2, r3
 8018f34:	69ba      	ldr	r2, [r7, #24]
 8018f36:	4313      	orrs	r3, r2
 8018f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	69ba      	ldr	r2, [r7, #24]
 8018f3e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8018f40:	683b      	ldr	r3, [r7, #0]
 8018f42:	685b      	ldr	r3, [r3, #4]
 8018f44:	f003 0303 	and.w	r3, r3, #3
 8018f48:	2b03      	cmp	r3, #3
 8018f4a:	d017      	beq.n	8018f7c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	68db      	ldr	r3, [r3, #12]
 8018f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8018f52:	69fb      	ldr	r3, [r7, #28]
 8018f54:	005b      	lsls	r3, r3, #1
 8018f56:	2203      	movs	r2, #3
 8018f58:	fa02 f303 	lsl.w	r3, r2, r3
 8018f5c:	43db      	mvns	r3, r3
 8018f5e:	69ba      	ldr	r2, [r7, #24]
 8018f60:	4013      	ands	r3, r2
 8018f62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8018f64:	683b      	ldr	r3, [r7, #0]
 8018f66:	689a      	ldr	r2, [r3, #8]
 8018f68:	69fb      	ldr	r3, [r7, #28]
 8018f6a:	005b      	lsls	r3, r3, #1
 8018f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8018f70:	69ba      	ldr	r2, [r7, #24]
 8018f72:	4313      	orrs	r3, r2
 8018f74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	69ba      	ldr	r2, [r7, #24]
 8018f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8018f7c:	683b      	ldr	r3, [r7, #0]
 8018f7e:	685b      	ldr	r3, [r3, #4]
 8018f80:	f003 0303 	and.w	r3, r3, #3
 8018f84:	2b02      	cmp	r3, #2
 8018f86:	d123      	bne.n	8018fd0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8018f88:	69fb      	ldr	r3, [r7, #28]
 8018f8a:	08da      	lsrs	r2, r3, #3
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	3208      	adds	r2, #8
 8018f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8018f96:	69fb      	ldr	r3, [r7, #28]
 8018f98:	f003 0307 	and.w	r3, r3, #7
 8018f9c:	009b      	lsls	r3, r3, #2
 8018f9e:	220f      	movs	r2, #15
 8018fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8018fa4:	43db      	mvns	r3, r3
 8018fa6:	69ba      	ldr	r2, [r7, #24]
 8018fa8:	4013      	ands	r3, r2
 8018faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8018fac:	683b      	ldr	r3, [r7, #0]
 8018fae:	691a      	ldr	r2, [r3, #16]
 8018fb0:	69fb      	ldr	r3, [r7, #28]
 8018fb2:	f003 0307 	and.w	r3, r3, #7
 8018fb6:	009b      	lsls	r3, r3, #2
 8018fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8018fbc:	69ba      	ldr	r2, [r7, #24]
 8018fbe:	4313      	orrs	r3, r2
 8018fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8018fc2:	69fb      	ldr	r3, [r7, #28]
 8018fc4:	08da      	lsrs	r2, r3, #3
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	3208      	adds	r2, #8
 8018fca:	69b9      	ldr	r1, [r7, #24]
 8018fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8018fd6:	69fb      	ldr	r3, [r7, #28]
 8018fd8:	005b      	lsls	r3, r3, #1
 8018fda:	2203      	movs	r2, #3
 8018fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8018fe0:	43db      	mvns	r3, r3
 8018fe2:	69ba      	ldr	r2, [r7, #24]
 8018fe4:	4013      	ands	r3, r2
 8018fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8018fe8:	683b      	ldr	r3, [r7, #0]
 8018fea:	685b      	ldr	r3, [r3, #4]
 8018fec:	f003 0203 	and.w	r2, r3, #3
 8018ff0:	69fb      	ldr	r3, [r7, #28]
 8018ff2:	005b      	lsls	r3, r3, #1
 8018ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8018ff8:	69ba      	ldr	r2, [r7, #24]
 8018ffa:	4313      	orrs	r3, r2
 8018ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	69ba      	ldr	r2, [r7, #24]
 8019002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8019004:	683b      	ldr	r3, [r7, #0]
 8019006:	685b      	ldr	r3, [r3, #4]
 8019008:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801900c:	2b00      	cmp	r3, #0
 801900e:	f000 80be 	beq.w	801918e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8019012:	4b66      	ldr	r3, [pc, #408]	@ (80191ac <HAL_GPIO_Init+0x324>)
 8019014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019016:	4a65      	ldr	r2, [pc, #404]	@ (80191ac <HAL_GPIO_Init+0x324>)
 8019018:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801901c:	6453      	str	r3, [r2, #68]	@ 0x44
 801901e:	4b63      	ldr	r3, [pc, #396]	@ (80191ac <HAL_GPIO_Init+0x324>)
 8019020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019022:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8019026:	60fb      	str	r3, [r7, #12]
 8019028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 801902a:	4a61      	ldr	r2, [pc, #388]	@ (80191b0 <HAL_GPIO_Init+0x328>)
 801902c:	69fb      	ldr	r3, [r7, #28]
 801902e:	089b      	lsrs	r3, r3, #2
 8019030:	3302      	adds	r3, #2
 8019032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019036:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8019038:	69fb      	ldr	r3, [r7, #28]
 801903a:	f003 0303 	and.w	r3, r3, #3
 801903e:	009b      	lsls	r3, r3, #2
 8019040:	220f      	movs	r2, #15
 8019042:	fa02 f303 	lsl.w	r3, r2, r3
 8019046:	43db      	mvns	r3, r3
 8019048:	69ba      	ldr	r2, [r7, #24]
 801904a:	4013      	ands	r3, r2
 801904c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	4a58      	ldr	r2, [pc, #352]	@ (80191b4 <HAL_GPIO_Init+0x32c>)
 8019052:	4293      	cmp	r3, r2
 8019054:	d037      	beq.n	80190c6 <HAL_GPIO_Init+0x23e>
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	4a57      	ldr	r2, [pc, #348]	@ (80191b8 <HAL_GPIO_Init+0x330>)
 801905a:	4293      	cmp	r3, r2
 801905c:	d031      	beq.n	80190c2 <HAL_GPIO_Init+0x23a>
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	4a56      	ldr	r2, [pc, #344]	@ (80191bc <HAL_GPIO_Init+0x334>)
 8019062:	4293      	cmp	r3, r2
 8019064:	d02b      	beq.n	80190be <HAL_GPIO_Init+0x236>
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	4a55      	ldr	r2, [pc, #340]	@ (80191c0 <HAL_GPIO_Init+0x338>)
 801906a:	4293      	cmp	r3, r2
 801906c:	d025      	beq.n	80190ba <HAL_GPIO_Init+0x232>
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	4a54      	ldr	r2, [pc, #336]	@ (80191c4 <HAL_GPIO_Init+0x33c>)
 8019072:	4293      	cmp	r3, r2
 8019074:	d01f      	beq.n	80190b6 <HAL_GPIO_Init+0x22e>
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	4a53      	ldr	r2, [pc, #332]	@ (80191c8 <HAL_GPIO_Init+0x340>)
 801907a:	4293      	cmp	r3, r2
 801907c:	d019      	beq.n	80190b2 <HAL_GPIO_Init+0x22a>
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	4a52      	ldr	r2, [pc, #328]	@ (80191cc <HAL_GPIO_Init+0x344>)
 8019082:	4293      	cmp	r3, r2
 8019084:	d013      	beq.n	80190ae <HAL_GPIO_Init+0x226>
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	4a51      	ldr	r2, [pc, #324]	@ (80191d0 <HAL_GPIO_Init+0x348>)
 801908a:	4293      	cmp	r3, r2
 801908c:	d00d      	beq.n	80190aa <HAL_GPIO_Init+0x222>
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	4a50      	ldr	r2, [pc, #320]	@ (80191d4 <HAL_GPIO_Init+0x34c>)
 8019092:	4293      	cmp	r3, r2
 8019094:	d007      	beq.n	80190a6 <HAL_GPIO_Init+0x21e>
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	4a4f      	ldr	r2, [pc, #316]	@ (80191d8 <HAL_GPIO_Init+0x350>)
 801909a:	4293      	cmp	r3, r2
 801909c:	d101      	bne.n	80190a2 <HAL_GPIO_Init+0x21a>
 801909e:	2309      	movs	r3, #9
 80190a0:	e012      	b.n	80190c8 <HAL_GPIO_Init+0x240>
 80190a2:	230a      	movs	r3, #10
 80190a4:	e010      	b.n	80190c8 <HAL_GPIO_Init+0x240>
 80190a6:	2308      	movs	r3, #8
 80190a8:	e00e      	b.n	80190c8 <HAL_GPIO_Init+0x240>
 80190aa:	2307      	movs	r3, #7
 80190ac:	e00c      	b.n	80190c8 <HAL_GPIO_Init+0x240>
 80190ae:	2306      	movs	r3, #6
 80190b0:	e00a      	b.n	80190c8 <HAL_GPIO_Init+0x240>
 80190b2:	2305      	movs	r3, #5
 80190b4:	e008      	b.n	80190c8 <HAL_GPIO_Init+0x240>
 80190b6:	2304      	movs	r3, #4
 80190b8:	e006      	b.n	80190c8 <HAL_GPIO_Init+0x240>
 80190ba:	2303      	movs	r3, #3
 80190bc:	e004      	b.n	80190c8 <HAL_GPIO_Init+0x240>
 80190be:	2302      	movs	r3, #2
 80190c0:	e002      	b.n	80190c8 <HAL_GPIO_Init+0x240>
 80190c2:	2301      	movs	r3, #1
 80190c4:	e000      	b.n	80190c8 <HAL_GPIO_Init+0x240>
 80190c6:	2300      	movs	r3, #0
 80190c8:	69fa      	ldr	r2, [r7, #28]
 80190ca:	f002 0203 	and.w	r2, r2, #3
 80190ce:	0092      	lsls	r2, r2, #2
 80190d0:	4093      	lsls	r3, r2
 80190d2:	69ba      	ldr	r2, [r7, #24]
 80190d4:	4313      	orrs	r3, r2
 80190d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80190d8:	4935      	ldr	r1, [pc, #212]	@ (80191b0 <HAL_GPIO_Init+0x328>)
 80190da:	69fb      	ldr	r3, [r7, #28]
 80190dc:	089b      	lsrs	r3, r3, #2
 80190de:	3302      	adds	r3, #2
 80190e0:	69ba      	ldr	r2, [r7, #24]
 80190e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80190e6:	4b3d      	ldr	r3, [pc, #244]	@ (80191dc <HAL_GPIO_Init+0x354>)
 80190e8:	689b      	ldr	r3, [r3, #8]
 80190ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80190ec:	693b      	ldr	r3, [r7, #16]
 80190ee:	43db      	mvns	r3, r3
 80190f0:	69ba      	ldr	r2, [r7, #24]
 80190f2:	4013      	ands	r3, r2
 80190f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80190f6:	683b      	ldr	r3, [r7, #0]
 80190f8:	685b      	ldr	r3, [r3, #4]
 80190fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d003      	beq.n	801910a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8019102:	69ba      	ldr	r2, [r7, #24]
 8019104:	693b      	ldr	r3, [r7, #16]
 8019106:	4313      	orrs	r3, r2
 8019108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801910a:	4a34      	ldr	r2, [pc, #208]	@ (80191dc <HAL_GPIO_Init+0x354>)
 801910c:	69bb      	ldr	r3, [r7, #24]
 801910e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8019110:	4b32      	ldr	r3, [pc, #200]	@ (80191dc <HAL_GPIO_Init+0x354>)
 8019112:	68db      	ldr	r3, [r3, #12]
 8019114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019116:	693b      	ldr	r3, [r7, #16]
 8019118:	43db      	mvns	r3, r3
 801911a:	69ba      	ldr	r2, [r7, #24]
 801911c:	4013      	ands	r3, r2
 801911e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8019120:	683b      	ldr	r3, [r7, #0]
 8019122:	685b      	ldr	r3, [r3, #4]
 8019124:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8019128:	2b00      	cmp	r3, #0
 801912a:	d003      	beq.n	8019134 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 801912c:	69ba      	ldr	r2, [r7, #24]
 801912e:	693b      	ldr	r3, [r7, #16]
 8019130:	4313      	orrs	r3, r2
 8019132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8019134:	4a29      	ldr	r2, [pc, #164]	@ (80191dc <HAL_GPIO_Init+0x354>)
 8019136:	69bb      	ldr	r3, [r7, #24]
 8019138:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801913a:	4b28      	ldr	r3, [pc, #160]	@ (80191dc <HAL_GPIO_Init+0x354>)
 801913c:	685b      	ldr	r3, [r3, #4]
 801913e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019140:	693b      	ldr	r3, [r7, #16]
 8019142:	43db      	mvns	r3, r3
 8019144:	69ba      	ldr	r2, [r7, #24]
 8019146:	4013      	ands	r3, r2
 8019148:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 801914a:	683b      	ldr	r3, [r7, #0]
 801914c:	685b      	ldr	r3, [r3, #4]
 801914e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8019152:	2b00      	cmp	r3, #0
 8019154:	d003      	beq.n	801915e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8019156:	69ba      	ldr	r2, [r7, #24]
 8019158:	693b      	ldr	r3, [r7, #16]
 801915a:	4313      	orrs	r3, r2
 801915c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801915e:	4a1f      	ldr	r2, [pc, #124]	@ (80191dc <HAL_GPIO_Init+0x354>)
 8019160:	69bb      	ldr	r3, [r7, #24]
 8019162:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8019164:	4b1d      	ldr	r3, [pc, #116]	@ (80191dc <HAL_GPIO_Init+0x354>)
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801916a:	693b      	ldr	r3, [r7, #16]
 801916c:	43db      	mvns	r3, r3
 801916e:	69ba      	ldr	r2, [r7, #24]
 8019170:	4013      	ands	r3, r2
 8019172:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8019174:	683b      	ldr	r3, [r7, #0]
 8019176:	685b      	ldr	r3, [r3, #4]
 8019178:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801917c:	2b00      	cmp	r3, #0
 801917e:	d003      	beq.n	8019188 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8019180:	69ba      	ldr	r2, [r7, #24]
 8019182:	693b      	ldr	r3, [r7, #16]
 8019184:	4313      	orrs	r3, r2
 8019186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8019188:	4a14      	ldr	r2, [pc, #80]	@ (80191dc <HAL_GPIO_Init+0x354>)
 801918a:	69bb      	ldr	r3, [r7, #24]
 801918c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 801918e:	69fb      	ldr	r3, [r7, #28]
 8019190:	3301      	adds	r3, #1
 8019192:	61fb      	str	r3, [r7, #28]
 8019194:	69fb      	ldr	r3, [r7, #28]
 8019196:	2b0f      	cmp	r3, #15
 8019198:	f67f ae86 	bls.w	8018ea8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 801919c:	bf00      	nop
 801919e:	bf00      	nop
 80191a0:	3724      	adds	r7, #36	@ 0x24
 80191a2:	46bd      	mov	sp, r7
 80191a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191a8:	4770      	bx	lr
 80191aa:	bf00      	nop
 80191ac:	40023800 	.word	0x40023800
 80191b0:	40013800 	.word	0x40013800
 80191b4:	40020000 	.word	0x40020000
 80191b8:	40020400 	.word	0x40020400
 80191bc:	40020800 	.word	0x40020800
 80191c0:	40020c00 	.word	0x40020c00
 80191c4:	40021000 	.word	0x40021000
 80191c8:	40021400 	.word	0x40021400
 80191cc:	40021800 	.word	0x40021800
 80191d0:	40021c00 	.word	0x40021c00
 80191d4:	40022000 	.word	0x40022000
 80191d8:	40022400 	.word	0x40022400
 80191dc:	40013c00 	.word	0x40013c00

080191e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80191e0:	b480      	push	{r7}
 80191e2:	b087      	sub	sp, #28
 80191e4:	af00      	add	r7, sp, #0
 80191e6:	6078      	str	r0, [r7, #4]
 80191e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80191ea:	2300      	movs	r3, #0
 80191ec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80191ee:	2300      	movs	r3, #0
 80191f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80191f2:	2300      	movs	r3, #0
 80191f4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80191f6:	2300      	movs	r3, #0
 80191f8:	617b      	str	r3, [r7, #20]
 80191fa:	e0d9      	b.n	80193b0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80191fc:	2201      	movs	r2, #1
 80191fe:	697b      	ldr	r3, [r7, #20]
 8019200:	fa02 f303 	lsl.w	r3, r2, r3
 8019204:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8019206:	683a      	ldr	r2, [r7, #0]
 8019208:	693b      	ldr	r3, [r7, #16]
 801920a:	4013      	ands	r3, r2
 801920c:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 801920e:	68fa      	ldr	r2, [r7, #12]
 8019210:	693b      	ldr	r3, [r7, #16]
 8019212:	429a      	cmp	r2, r3
 8019214:	f040 80c9 	bne.w	80193aa <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8019218:	4a6b      	ldr	r2, [pc, #428]	@ (80193c8 <HAL_GPIO_DeInit+0x1e8>)
 801921a:	697b      	ldr	r3, [r7, #20]
 801921c:	089b      	lsrs	r3, r3, #2
 801921e:	3302      	adds	r3, #2
 8019220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019224:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8019226:	697b      	ldr	r3, [r7, #20]
 8019228:	f003 0303 	and.w	r3, r3, #3
 801922c:	009b      	lsls	r3, r3, #2
 801922e:	220f      	movs	r2, #15
 8019230:	fa02 f303 	lsl.w	r3, r2, r3
 8019234:	68ba      	ldr	r2, [r7, #8]
 8019236:	4013      	ands	r3, r2
 8019238:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	4a63      	ldr	r2, [pc, #396]	@ (80193cc <HAL_GPIO_DeInit+0x1ec>)
 801923e:	4293      	cmp	r3, r2
 8019240:	d037      	beq.n	80192b2 <HAL_GPIO_DeInit+0xd2>
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	4a62      	ldr	r2, [pc, #392]	@ (80193d0 <HAL_GPIO_DeInit+0x1f0>)
 8019246:	4293      	cmp	r3, r2
 8019248:	d031      	beq.n	80192ae <HAL_GPIO_DeInit+0xce>
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	4a61      	ldr	r2, [pc, #388]	@ (80193d4 <HAL_GPIO_DeInit+0x1f4>)
 801924e:	4293      	cmp	r3, r2
 8019250:	d02b      	beq.n	80192aa <HAL_GPIO_DeInit+0xca>
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	4a60      	ldr	r2, [pc, #384]	@ (80193d8 <HAL_GPIO_DeInit+0x1f8>)
 8019256:	4293      	cmp	r3, r2
 8019258:	d025      	beq.n	80192a6 <HAL_GPIO_DeInit+0xc6>
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	4a5f      	ldr	r2, [pc, #380]	@ (80193dc <HAL_GPIO_DeInit+0x1fc>)
 801925e:	4293      	cmp	r3, r2
 8019260:	d01f      	beq.n	80192a2 <HAL_GPIO_DeInit+0xc2>
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	4a5e      	ldr	r2, [pc, #376]	@ (80193e0 <HAL_GPIO_DeInit+0x200>)
 8019266:	4293      	cmp	r3, r2
 8019268:	d019      	beq.n	801929e <HAL_GPIO_DeInit+0xbe>
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	4a5d      	ldr	r2, [pc, #372]	@ (80193e4 <HAL_GPIO_DeInit+0x204>)
 801926e:	4293      	cmp	r3, r2
 8019270:	d013      	beq.n	801929a <HAL_GPIO_DeInit+0xba>
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	4a5c      	ldr	r2, [pc, #368]	@ (80193e8 <HAL_GPIO_DeInit+0x208>)
 8019276:	4293      	cmp	r3, r2
 8019278:	d00d      	beq.n	8019296 <HAL_GPIO_DeInit+0xb6>
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	4a5b      	ldr	r2, [pc, #364]	@ (80193ec <HAL_GPIO_DeInit+0x20c>)
 801927e:	4293      	cmp	r3, r2
 8019280:	d007      	beq.n	8019292 <HAL_GPIO_DeInit+0xb2>
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	4a5a      	ldr	r2, [pc, #360]	@ (80193f0 <HAL_GPIO_DeInit+0x210>)
 8019286:	4293      	cmp	r3, r2
 8019288:	d101      	bne.n	801928e <HAL_GPIO_DeInit+0xae>
 801928a:	2309      	movs	r3, #9
 801928c:	e012      	b.n	80192b4 <HAL_GPIO_DeInit+0xd4>
 801928e:	230a      	movs	r3, #10
 8019290:	e010      	b.n	80192b4 <HAL_GPIO_DeInit+0xd4>
 8019292:	2308      	movs	r3, #8
 8019294:	e00e      	b.n	80192b4 <HAL_GPIO_DeInit+0xd4>
 8019296:	2307      	movs	r3, #7
 8019298:	e00c      	b.n	80192b4 <HAL_GPIO_DeInit+0xd4>
 801929a:	2306      	movs	r3, #6
 801929c:	e00a      	b.n	80192b4 <HAL_GPIO_DeInit+0xd4>
 801929e:	2305      	movs	r3, #5
 80192a0:	e008      	b.n	80192b4 <HAL_GPIO_DeInit+0xd4>
 80192a2:	2304      	movs	r3, #4
 80192a4:	e006      	b.n	80192b4 <HAL_GPIO_DeInit+0xd4>
 80192a6:	2303      	movs	r3, #3
 80192a8:	e004      	b.n	80192b4 <HAL_GPIO_DeInit+0xd4>
 80192aa:	2302      	movs	r3, #2
 80192ac:	e002      	b.n	80192b4 <HAL_GPIO_DeInit+0xd4>
 80192ae:	2301      	movs	r3, #1
 80192b0:	e000      	b.n	80192b4 <HAL_GPIO_DeInit+0xd4>
 80192b2:	2300      	movs	r3, #0
 80192b4:	697a      	ldr	r2, [r7, #20]
 80192b6:	f002 0203 	and.w	r2, r2, #3
 80192ba:	0092      	lsls	r2, r2, #2
 80192bc:	4093      	lsls	r3, r2
 80192be:	68ba      	ldr	r2, [r7, #8]
 80192c0:	429a      	cmp	r2, r3
 80192c2:	d132      	bne.n	801932a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80192c4:	4b4b      	ldr	r3, [pc, #300]	@ (80193f4 <HAL_GPIO_DeInit+0x214>)
 80192c6:	681a      	ldr	r2, [r3, #0]
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	43db      	mvns	r3, r3
 80192cc:	4949      	ldr	r1, [pc, #292]	@ (80193f4 <HAL_GPIO_DeInit+0x214>)
 80192ce:	4013      	ands	r3, r2
 80192d0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80192d2:	4b48      	ldr	r3, [pc, #288]	@ (80193f4 <HAL_GPIO_DeInit+0x214>)
 80192d4:	685a      	ldr	r2, [r3, #4]
 80192d6:	68fb      	ldr	r3, [r7, #12]
 80192d8:	43db      	mvns	r3, r3
 80192da:	4946      	ldr	r1, [pc, #280]	@ (80193f4 <HAL_GPIO_DeInit+0x214>)
 80192dc:	4013      	ands	r3, r2
 80192de:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80192e0:	4b44      	ldr	r3, [pc, #272]	@ (80193f4 <HAL_GPIO_DeInit+0x214>)
 80192e2:	68da      	ldr	r2, [r3, #12]
 80192e4:	68fb      	ldr	r3, [r7, #12]
 80192e6:	43db      	mvns	r3, r3
 80192e8:	4942      	ldr	r1, [pc, #264]	@ (80193f4 <HAL_GPIO_DeInit+0x214>)
 80192ea:	4013      	ands	r3, r2
 80192ec:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80192ee:	4b41      	ldr	r3, [pc, #260]	@ (80193f4 <HAL_GPIO_DeInit+0x214>)
 80192f0:	689a      	ldr	r2, [r3, #8]
 80192f2:	68fb      	ldr	r3, [r7, #12]
 80192f4:	43db      	mvns	r3, r3
 80192f6:	493f      	ldr	r1, [pc, #252]	@ (80193f4 <HAL_GPIO_DeInit+0x214>)
 80192f8:	4013      	ands	r3, r2
 80192fa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80192fc:	697b      	ldr	r3, [r7, #20]
 80192fe:	f003 0303 	and.w	r3, r3, #3
 8019302:	009b      	lsls	r3, r3, #2
 8019304:	220f      	movs	r2, #15
 8019306:	fa02 f303 	lsl.w	r3, r2, r3
 801930a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 801930c:	4a2e      	ldr	r2, [pc, #184]	@ (80193c8 <HAL_GPIO_DeInit+0x1e8>)
 801930e:	697b      	ldr	r3, [r7, #20]
 8019310:	089b      	lsrs	r3, r3, #2
 8019312:	3302      	adds	r3, #2
 8019314:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8019318:	68bb      	ldr	r3, [r7, #8]
 801931a:	43da      	mvns	r2, r3
 801931c:	482a      	ldr	r0, [pc, #168]	@ (80193c8 <HAL_GPIO_DeInit+0x1e8>)
 801931e:	697b      	ldr	r3, [r7, #20]
 8019320:	089b      	lsrs	r3, r3, #2
 8019322:	400a      	ands	r2, r1
 8019324:	3302      	adds	r3, #2
 8019326:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	681a      	ldr	r2, [r3, #0]
 801932e:	697b      	ldr	r3, [r7, #20]
 8019330:	005b      	lsls	r3, r3, #1
 8019332:	2103      	movs	r1, #3
 8019334:	fa01 f303 	lsl.w	r3, r1, r3
 8019338:	43db      	mvns	r3, r3
 801933a:	401a      	ands	r2, r3
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8019340:	697b      	ldr	r3, [r7, #20]
 8019342:	08da      	lsrs	r2, r3, #3
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	3208      	adds	r2, #8
 8019348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801934c:	697b      	ldr	r3, [r7, #20]
 801934e:	f003 0307 	and.w	r3, r3, #7
 8019352:	009b      	lsls	r3, r3, #2
 8019354:	220f      	movs	r2, #15
 8019356:	fa02 f303 	lsl.w	r3, r2, r3
 801935a:	43db      	mvns	r3, r3
 801935c:	697a      	ldr	r2, [r7, #20]
 801935e:	08d2      	lsrs	r2, r2, #3
 8019360:	4019      	ands	r1, r3
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	3208      	adds	r2, #8
 8019366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	68da      	ldr	r2, [r3, #12]
 801936e:	697b      	ldr	r3, [r7, #20]
 8019370:	005b      	lsls	r3, r3, #1
 8019372:	2103      	movs	r1, #3
 8019374:	fa01 f303 	lsl.w	r3, r1, r3
 8019378:	43db      	mvns	r3, r3
 801937a:	401a      	ands	r2, r3
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	685a      	ldr	r2, [r3, #4]
 8019384:	2101      	movs	r1, #1
 8019386:	697b      	ldr	r3, [r7, #20]
 8019388:	fa01 f303 	lsl.w	r3, r1, r3
 801938c:	43db      	mvns	r3, r3
 801938e:	401a      	ands	r2, r3
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	689a      	ldr	r2, [r3, #8]
 8019398:	697b      	ldr	r3, [r7, #20]
 801939a:	005b      	lsls	r3, r3, #1
 801939c:	2103      	movs	r1, #3
 801939e:	fa01 f303 	lsl.w	r3, r1, r3
 80193a2:	43db      	mvns	r3, r3
 80193a4:	401a      	ands	r2, r3
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 80193aa:	697b      	ldr	r3, [r7, #20]
 80193ac:	3301      	adds	r3, #1
 80193ae:	617b      	str	r3, [r7, #20]
 80193b0:	697b      	ldr	r3, [r7, #20]
 80193b2:	2b0f      	cmp	r3, #15
 80193b4:	f67f af22 	bls.w	80191fc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80193b8:	bf00      	nop
 80193ba:	bf00      	nop
 80193bc:	371c      	adds	r7, #28
 80193be:	46bd      	mov	sp, r7
 80193c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193c4:	4770      	bx	lr
 80193c6:	bf00      	nop
 80193c8:	40013800 	.word	0x40013800
 80193cc:	40020000 	.word	0x40020000
 80193d0:	40020400 	.word	0x40020400
 80193d4:	40020800 	.word	0x40020800
 80193d8:	40020c00 	.word	0x40020c00
 80193dc:	40021000 	.word	0x40021000
 80193e0:	40021400 	.word	0x40021400
 80193e4:	40021800 	.word	0x40021800
 80193e8:	40021c00 	.word	0x40021c00
 80193ec:	40022000 	.word	0x40022000
 80193f0:	40022400 	.word	0x40022400
 80193f4:	40013c00 	.word	0x40013c00

080193f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80193f8:	b480      	push	{r7}
 80193fa:	b085      	sub	sp, #20
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	6078      	str	r0, [r7, #4]
 8019400:	460b      	mov	r3, r1
 8019402:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	691a      	ldr	r2, [r3, #16]
 8019408:	887b      	ldrh	r3, [r7, #2]
 801940a:	4013      	ands	r3, r2
 801940c:	2b00      	cmp	r3, #0
 801940e:	d002      	beq.n	8019416 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8019410:	2301      	movs	r3, #1
 8019412:	73fb      	strb	r3, [r7, #15]
 8019414:	e001      	b.n	801941a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8019416:	2300      	movs	r3, #0
 8019418:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801941a:	7bfb      	ldrb	r3, [r7, #15]
}
 801941c:	4618      	mov	r0, r3
 801941e:	3714      	adds	r7, #20
 8019420:	46bd      	mov	sp, r7
 8019422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019426:	4770      	bx	lr

08019428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8019428:	b480      	push	{r7}
 801942a:	b083      	sub	sp, #12
 801942c:	af00      	add	r7, sp, #0
 801942e:	6078      	str	r0, [r7, #4]
 8019430:	460b      	mov	r3, r1
 8019432:	807b      	strh	r3, [r7, #2]
 8019434:	4613      	mov	r3, r2
 8019436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8019438:	787b      	ldrb	r3, [r7, #1]
 801943a:	2b00      	cmp	r3, #0
 801943c:	d003      	beq.n	8019446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801943e:	887a      	ldrh	r2, [r7, #2]
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8019444:	e003      	b.n	801944e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8019446:	887b      	ldrh	r3, [r7, #2]
 8019448:	041a      	lsls	r2, r3, #16
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	619a      	str	r2, [r3, #24]
}
 801944e:	bf00      	nop
 8019450:	370c      	adds	r7, #12
 8019452:	46bd      	mov	sp, r7
 8019454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019458:	4770      	bx	lr

0801945a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801945a:	b480      	push	{r7}
 801945c:	b085      	sub	sp, #20
 801945e:	af00      	add	r7, sp, #0
 8019460:	6078      	str	r0, [r7, #4]
 8019462:	460b      	mov	r3, r1
 8019464:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	695b      	ldr	r3, [r3, #20]
 801946a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801946c:	887a      	ldrh	r2, [r7, #2]
 801946e:	68fb      	ldr	r3, [r7, #12]
 8019470:	4013      	ands	r3, r2
 8019472:	041a      	lsls	r2, r3, #16
 8019474:	68fb      	ldr	r3, [r7, #12]
 8019476:	43d9      	mvns	r1, r3
 8019478:	887b      	ldrh	r3, [r7, #2]
 801947a:	400b      	ands	r3, r1
 801947c:	431a      	orrs	r2, r3
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	619a      	str	r2, [r3, #24]
}
 8019482:	bf00      	nop
 8019484:	3714      	adds	r7, #20
 8019486:	46bd      	mov	sp, r7
 8019488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801948c:	4770      	bx	lr

0801948e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 801948e:	b580      	push	{r7, lr}
 8019490:	b086      	sub	sp, #24
 8019492:	af02      	add	r7, sp, #8
 8019494:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	2b00      	cmp	r3, #0
 801949a:	d101      	bne.n	80194a0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 801949c:	2301      	movs	r3, #1
 801949e:	e059      	b.n	8019554 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80194ac:	b2db      	uxtb	r3, r3
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d106      	bne.n	80194c0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	2200      	movs	r2, #0
 80194b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80194ba:	6878      	ldr	r0, [r7, #4]
 80194bc:	f010 fda8 	bl	802a010 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	2203      	movs	r2, #3
 80194c4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80194c8:	68fb      	ldr	r3, [r7, #12]
 80194ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80194ce:	d102      	bne.n	80194d6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	2200      	movs	r2, #0
 80194d4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	4618      	mov	r0, r3
 80194dc:	f005 fb1b 	bl	801eb16 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	6818      	ldr	r0, [r3, #0]
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	7c1a      	ldrb	r2, [r3, #16]
 80194e8:	f88d 2000 	strb.w	r2, [sp]
 80194ec:	3304      	adds	r3, #4
 80194ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80194f0:	f005 faa6 	bl	801ea40 <USB_CoreInit>
 80194f4:	4603      	mov	r3, r0
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d005      	beq.n	8019506 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	2202      	movs	r2, #2
 80194fe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8019502:	2301      	movs	r3, #1
 8019504:	e026      	b.n	8019554 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	2101      	movs	r1, #1
 801950c:	4618      	mov	r0, r3
 801950e:	f005 fb13 	bl	801eb38 <USB_SetCurrentMode>
 8019512:	4603      	mov	r3, r0
 8019514:	2b00      	cmp	r3, #0
 8019516:	d005      	beq.n	8019524 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	2202      	movs	r2, #2
 801951c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8019520:	2301      	movs	r3, #1
 8019522:	e017      	b.n	8019554 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	6818      	ldr	r0, [r3, #0]
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	7c1a      	ldrb	r2, [r3, #16]
 801952c:	f88d 2000 	strb.w	r2, [sp]
 8019530:	3304      	adds	r3, #4
 8019532:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019534:	f005 fcb6 	bl	801eea4 <USB_HostInit>
 8019538:	4603      	mov	r3, r0
 801953a:	2b00      	cmp	r3, #0
 801953c:	d005      	beq.n	801954a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	2202      	movs	r2, #2
 8019542:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8019546:	2301      	movs	r3, #1
 8019548:	e004      	b.n	8019554 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	2201      	movs	r2, #1
 801954e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8019552:	2300      	movs	r3, #0
}
 8019554:	4618      	mov	r0, r3
 8019556:	3710      	adds	r7, #16
 8019558:	46bd      	mov	sp, r7
 801955a:	bd80      	pop	{r7, pc}

0801955c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801955c:	b590      	push	{r4, r7, lr}
 801955e:	b08b      	sub	sp, #44	@ 0x2c
 8019560:	af04      	add	r7, sp, #16
 8019562:	6078      	str	r0, [r7, #4]
 8019564:	4608      	mov	r0, r1
 8019566:	4611      	mov	r1, r2
 8019568:	461a      	mov	r2, r3
 801956a:	4603      	mov	r3, r0
 801956c:	70fb      	strb	r3, [r7, #3]
 801956e:	460b      	mov	r3, r1
 8019570:	70bb      	strb	r3, [r7, #2]
 8019572:	4613      	mov	r3, r2
 8019574:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8019576:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8019578:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8019580:	2b01      	cmp	r3, #1
 8019582:	d101      	bne.n	8019588 <HAL_HCD_HC_Init+0x2c>
 8019584:	2302      	movs	r3, #2
 8019586:	e09d      	b.n	80196c4 <HAL_HCD_HC_Init+0x168>
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	2201      	movs	r2, #1
 801958c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8019590:	78fa      	ldrb	r2, [r7, #3]
 8019592:	6879      	ldr	r1, [r7, #4]
 8019594:	4613      	mov	r3, r2
 8019596:	011b      	lsls	r3, r3, #4
 8019598:	1a9b      	subs	r3, r3, r2
 801959a:	009b      	lsls	r3, r3, #2
 801959c:	440b      	add	r3, r1
 801959e:	3319      	adds	r3, #25
 80195a0:	2200      	movs	r2, #0
 80195a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80195a4:	78fa      	ldrb	r2, [r7, #3]
 80195a6:	6879      	ldr	r1, [r7, #4]
 80195a8:	4613      	mov	r3, r2
 80195aa:	011b      	lsls	r3, r3, #4
 80195ac:	1a9b      	subs	r3, r3, r2
 80195ae:	009b      	lsls	r3, r3, #2
 80195b0:	440b      	add	r3, r1
 80195b2:	3314      	adds	r3, #20
 80195b4:	787a      	ldrb	r2, [r7, #1]
 80195b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80195b8:	78fa      	ldrb	r2, [r7, #3]
 80195ba:	6879      	ldr	r1, [r7, #4]
 80195bc:	4613      	mov	r3, r2
 80195be:	011b      	lsls	r3, r3, #4
 80195c0:	1a9b      	subs	r3, r3, r2
 80195c2:	009b      	lsls	r3, r3, #2
 80195c4:	440b      	add	r3, r1
 80195c6:	3315      	adds	r3, #21
 80195c8:	78fa      	ldrb	r2, [r7, #3]
 80195ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80195cc:	78fa      	ldrb	r2, [r7, #3]
 80195ce:	6879      	ldr	r1, [r7, #4]
 80195d0:	4613      	mov	r3, r2
 80195d2:	011b      	lsls	r3, r3, #4
 80195d4:	1a9b      	subs	r3, r3, r2
 80195d6:	009b      	lsls	r3, r3, #2
 80195d8:	440b      	add	r3, r1
 80195da:	3326      	adds	r3, #38	@ 0x26
 80195dc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80195e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80195e2:	78fa      	ldrb	r2, [r7, #3]
 80195e4:	78bb      	ldrb	r3, [r7, #2]
 80195e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80195ea:	b2d8      	uxtb	r0, r3
 80195ec:	6879      	ldr	r1, [r7, #4]
 80195ee:	4613      	mov	r3, r2
 80195f0:	011b      	lsls	r3, r3, #4
 80195f2:	1a9b      	subs	r3, r3, r2
 80195f4:	009b      	lsls	r3, r3, #2
 80195f6:	440b      	add	r3, r1
 80195f8:	3316      	adds	r3, #22
 80195fa:	4602      	mov	r2, r0
 80195fc:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80195fe:	78fb      	ldrb	r3, [r7, #3]
 8019600:	4619      	mov	r1, r3
 8019602:	6878      	ldr	r0, [r7, #4]
 8019604:	f000 fbc8 	bl	8019d98 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8019608:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801960c:	2b00      	cmp	r3, #0
 801960e:	da0a      	bge.n	8019626 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8019610:	78fa      	ldrb	r2, [r7, #3]
 8019612:	6879      	ldr	r1, [r7, #4]
 8019614:	4613      	mov	r3, r2
 8019616:	011b      	lsls	r3, r3, #4
 8019618:	1a9b      	subs	r3, r3, r2
 801961a:	009b      	lsls	r3, r3, #2
 801961c:	440b      	add	r3, r1
 801961e:	3317      	adds	r3, #23
 8019620:	2201      	movs	r2, #1
 8019622:	701a      	strb	r2, [r3, #0]
 8019624:	e009      	b.n	801963a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8019626:	78fa      	ldrb	r2, [r7, #3]
 8019628:	6879      	ldr	r1, [r7, #4]
 801962a:	4613      	mov	r3, r2
 801962c:	011b      	lsls	r3, r3, #4
 801962e:	1a9b      	subs	r3, r3, r2
 8019630:	009b      	lsls	r3, r3, #2
 8019632:	440b      	add	r3, r1
 8019634:	3317      	adds	r3, #23
 8019636:	2200      	movs	r2, #0
 8019638:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	681b      	ldr	r3, [r3, #0]
 801963e:	4618      	mov	r0, r3
 8019640:	f005 fd88 	bl	801f154 <USB_GetHostSpeed>
 8019644:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8019646:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801964a:	2b01      	cmp	r3, #1
 801964c:	d10b      	bne.n	8019666 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 801964e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019652:	2b01      	cmp	r3, #1
 8019654:	d107      	bne.n	8019666 <HAL_HCD_HC_Init+0x10a>
 8019656:	693b      	ldr	r3, [r7, #16]
 8019658:	2b00      	cmp	r3, #0
 801965a:	d104      	bne.n	8019666 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 801965c:	697b      	ldr	r3, [r7, #20]
 801965e:	2bbc      	cmp	r3, #188	@ 0xbc
 8019660:	d901      	bls.n	8019666 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8019662:	23bc      	movs	r3, #188	@ 0xbc
 8019664:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8019666:	78fa      	ldrb	r2, [r7, #3]
 8019668:	6879      	ldr	r1, [r7, #4]
 801966a:	4613      	mov	r3, r2
 801966c:	011b      	lsls	r3, r3, #4
 801966e:	1a9b      	subs	r3, r3, r2
 8019670:	009b      	lsls	r3, r3, #2
 8019672:	440b      	add	r3, r1
 8019674:	3318      	adds	r3, #24
 8019676:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801967a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 801967c:	78fa      	ldrb	r2, [r7, #3]
 801967e:	697b      	ldr	r3, [r7, #20]
 8019680:	b298      	uxth	r0, r3
 8019682:	6879      	ldr	r1, [r7, #4]
 8019684:	4613      	mov	r3, r2
 8019686:	011b      	lsls	r3, r3, #4
 8019688:	1a9b      	subs	r3, r3, r2
 801968a:	009b      	lsls	r3, r3, #2
 801968c:	440b      	add	r3, r1
 801968e:	3328      	adds	r3, #40	@ 0x28
 8019690:	4602      	mov	r2, r0
 8019692:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	6818      	ldr	r0, [r3, #0]
 8019698:	697b      	ldr	r3, [r7, #20]
 801969a:	b29b      	uxth	r3, r3
 801969c:	787c      	ldrb	r4, [r7, #1]
 801969e:	78ba      	ldrb	r2, [r7, #2]
 80196a0:	78f9      	ldrb	r1, [r7, #3]
 80196a2:	9302      	str	r3, [sp, #8]
 80196a4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80196a8:	9301      	str	r3, [sp, #4]
 80196aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80196ae:	9300      	str	r3, [sp, #0]
 80196b0:	4623      	mov	r3, r4
 80196b2:	f005 fd77 	bl	801f1a4 <USB_HC_Init>
 80196b6:	4603      	mov	r3, r0
 80196b8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	2200      	movs	r2, #0
 80196be:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80196c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80196c4:	4618      	mov	r0, r3
 80196c6:	371c      	adds	r7, #28
 80196c8:	46bd      	mov	sp, r7
 80196ca:	bd90      	pop	{r4, r7, pc}

080196cc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80196cc:	b580      	push	{r7, lr}
 80196ce:	b084      	sub	sp, #16
 80196d0:	af00      	add	r7, sp, #0
 80196d2:	6078      	str	r0, [r7, #4]
 80196d4:	460b      	mov	r3, r1
 80196d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80196d8:	2300      	movs	r3, #0
 80196da:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80196e2:	2b01      	cmp	r3, #1
 80196e4:	d101      	bne.n	80196ea <HAL_HCD_HC_Halt+0x1e>
 80196e6:	2302      	movs	r3, #2
 80196e8:	e00f      	b.n	801970a <HAL_HCD_HC_Halt+0x3e>
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	2201      	movs	r2, #1
 80196ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	681b      	ldr	r3, [r3, #0]
 80196f6:	78fa      	ldrb	r2, [r7, #3]
 80196f8:	4611      	mov	r1, r2
 80196fa:	4618      	mov	r0, r3
 80196fc:	f006 f909 	bl	801f912 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	2200      	movs	r2, #0
 8019704:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8019708:	7bfb      	ldrb	r3, [r7, #15]
}
 801970a:	4618      	mov	r0, r3
 801970c:	3710      	adds	r7, #16
 801970e:	46bd      	mov	sp, r7
 8019710:	bd80      	pop	{r7, pc}
	...

08019714 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8019714:	b580      	push	{r7, lr}
 8019716:	b082      	sub	sp, #8
 8019718:	af00      	add	r7, sp, #0
 801971a:	6078      	str	r0, [r7, #4]
 801971c:	4608      	mov	r0, r1
 801971e:	4611      	mov	r1, r2
 8019720:	461a      	mov	r2, r3
 8019722:	4603      	mov	r3, r0
 8019724:	70fb      	strb	r3, [r7, #3]
 8019726:	460b      	mov	r3, r1
 8019728:	70bb      	strb	r3, [r7, #2]
 801972a:	4613      	mov	r3, r2
 801972c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 801972e:	78fa      	ldrb	r2, [r7, #3]
 8019730:	6879      	ldr	r1, [r7, #4]
 8019732:	4613      	mov	r3, r2
 8019734:	011b      	lsls	r3, r3, #4
 8019736:	1a9b      	subs	r3, r3, r2
 8019738:	009b      	lsls	r3, r3, #2
 801973a:	440b      	add	r3, r1
 801973c:	3317      	adds	r3, #23
 801973e:	78ba      	ldrb	r2, [r7, #2]
 8019740:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8019742:	78fa      	ldrb	r2, [r7, #3]
 8019744:	6879      	ldr	r1, [r7, #4]
 8019746:	4613      	mov	r3, r2
 8019748:	011b      	lsls	r3, r3, #4
 801974a:	1a9b      	subs	r3, r3, r2
 801974c:	009b      	lsls	r3, r3, #2
 801974e:	440b      	add	r3, r1
 8019750:	3326      	adds	r3, #38	@ 0x26
 8019752:	787a      	ldrb	r2, [r7, #1]
 8019754:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8019756:	7c3b      	ldrb	r3, [r7, #16]
 8019758:	2b00      	cmp	r3, #0
 801975a:	d114      	bne.n	8019786 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 801975c:	78fa      	ldrb	r2, [r7, #3]
 801975e:	6879      	ldr	r1, [r7, #4]
 8019760:	4613      	mov	r3, r2
 8019762:	011b      	lsls	r3, r3, #4
 8019764:	1a9b      	subs	r3, r3, r2
 8019766:	009b      	lsls	r3, r3, #2
 8019768:	440b      	add	r3, r1
 801976a:	332a      	adds	r3, #42	@ 0x2a
 801976c:	2203      	movs	r2, #3
 801976e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8019770:	78fa      	ldrb	r2, [r7, #3]
 8019772:	6879      	ldr	r1, [r7, #4]
 8019774:	4613      	mov	r3, r2
 8019776:	011b      	lsls	r3, r3, #4
 8019778:	1a9b      	subs	r3, r3, r2
 801977a:	009b      	lsls	r3, r3, #2
 801977c:	440b      	add	r3, r1
 801977e:	3319      	adds	r3, #25
 8019780:	7f3a      	ldrb	r2, [r7, #28]
 8019782:	701a      	strb	r2, [r3, #0]
 8019784:	e009      	b.n	801979a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8019786:	78fa      	ldrb	r2, [r7, #3]
 8019788:	6879      	ldr	r1, [r7, #4]
 801978a:	4613      	mov	r3, r2
 801978c:	011b      	lsls	r3, r3, #4
 801978e:	1a9b      	subs	r3, r3, r2
 8019790:	009b      	lsls	r3, r3, #2
 8019792:	440b      	add	r3, r1
 8019794:	332a      	adds	r3, #42	@ 0x2a
 8019796:	2202      	movs	r2, #2
 8019798:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 801979a:	787b      	ldrb	r3, [r7, #1]
 801979c:	2b03      	cmp	r3, #3
 801979e:	f200 8102 	bhi.w	80199a6 <HAL_HCD_HC_SubmitRequest+0x292>
 80197a2:	a201      	add	r2, pc, #4	@ (adr r2, 80197a8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80197a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80197a8:	080197b9 	.word	0x080197b9
 80197ac:	08019991 	.word	0x08019991
 80197b0:	0801987d 	.word	0x0801987d
 80197b4:	08019907 	.word	0x08019907
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80197b8:	7c3b      	ldrb	r3, [r7, #16]
 80197ba:	2b01      	cmp	r3, #1
 80197bc:	f040 80f5 	bne.w	80199aa <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80197c0:	78bb      	ldrb	r3, [r7, #2]
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	d12d      	bne.n	8019822 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80197c6:	8b3b      	ldrh	r3, [r7, #24]
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d109      	bne.n	80197e0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80197cc:	78fa      	ldrb	r2, [r7, #3]
 80197ce:	6879      	ldr	r1, [r7, #4]
 80197d0:	4613      	mov	r3, r2
 80197d2:	011b      	lsls	r3, r3, #4
 80197d4:	1a9b      	subs	r3, r3, r2
 80197d6:	009b      	lsls	r3, r3, #2
 80197d8:	440b      	add	r3, r1
 80197da:	333d      	adds	r3, #61	@ 0x3d
 80197dc:	2201      	movs	r2, #1
 80197de:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80197e0:	78fa      	ldrb	r2, [r7, #3]
 80197e2:	6879      	ldr	r1, [r7, #4]
 80197e4:	4613      	mov	r3, r2
 80197e6:	011b      	lsls	r3, r3, #4
 80197e8:	1a9b      	subs	r3, r3, r2
 80197ea:	009b      	lsls	r3, r3, #2
 80197ec:	440b      	add	r3, r1
 80197ee:	333d      	adds	r3, #61	@ 0x3d
 80197f0:	781b      	ldrb	r3, [r3, #0]
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	d10a      	bne.n	801980c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80197f6:	78fa      	ldrb	r2, [r7, #3]
 80197f8:	6879      	ldr	r1, [r7, #4]
 80197fa:	4613      	mov	r3, r2
 80197fc:	011b      	lsls	r3, r3, #4
 80197fe:	1a9b      	subs	r3, r3, r2
 8019800:	009b      	lsls	r3, r3, #2
 8019802:	440b      	add	r3, r1
 8019804:	332a      	adds	r3, #42	@ 0x2a
 8019806:	2200      	movs	r2, #0
 8019808:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 801980a:	e0ce      	b.n	80199aa <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 801980c:	78fa      	ldrb	r2, [r7, #3]
 801980e:	6879      	ldr	r1, [r7, #4]
 8019810:	4613      	mov	r3, r2
 8019812:	011b      	lsls	r3, r3, #4
 8019814:	1a9b      	subs	r3, r3, r2
 8019816:	009b      	lsls	r3, r3, #2
 8019818:	440b      	add	r3, r1
 801981a:	332a      	adds	r3, #42	@ 0x2a
 801981c:	2202      	movs	r2, #2
 801981e:	701a      	strb	r2, [r3, #0]
      break;
 8019820:	e0c3      	b.n	80199aa <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8019822:	78fa      	ldrb	r2, [r7, #3]
 8019824:	6879      	ldr	r1, [r7, #4]
 8019826:	4613      	mov	r3, r2
 8019828:	011b      	lsls	r3, r3, #4
 801982a:	1a9b      	subs	r3, r3, r2
 801982c:	009b      	lsls	r3, r3, #2
 801982e:	440b      	add	r3, r1
 8019830:	331a      	adds	r3, #26
 8019832:	781b      	ldrb	r3, [r3, #0]
 8019834:	2b01      	cmp	r3, #1
 8019836:	f040 80b8 	bne.w	80199aa <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 801983a:	78fa      	ldrb	r2, [r7, #3]
 801983c:	6879      	ldr	r1, [r7, #4]
 801983e:	4613      	mov	r3, r2
 8019840:	011b      	lsls	r3, r3, #4
 8019842:	1a9b      	subs	r3, r3, r2
 8019844:	009b      	lsls	r3, r3, #2
 8019846:	440b      	add	r3, r1
 8019848:	333c      	adds	r3, #60	@ 0x3c
 801984a:	781b      	ldrb	r3, [r3, #0]
 801984c:	2b00      	cmp	r3, #0
 801984e:	d10a      	bne.n	8019866 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8019850:	78fa      	ldrb	r2, [r7, #3]
 8019852:	6879      	ldr	r1, [r7, #4]
 8019854:	4613      	mov	r3, r2
 8019856:	011b      	lsls	r3, r3, #4
 8019858:	1a9b      	subs	r3, r3, r2
 801985a:	009b      	lsls	r3, r3, #2
 801985c:	440b      	add	r3, r1
 801985e:	332a      	adds	r3, #42	@ 0x2a
 8019860:	2200      	movs	r2, #0
 8019862:	701a      	strb	r2, [r3, #0]
      break;
 8019864:	e0a1      	b.n	80199aa <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8019866:	78fa      	ldrb	r2, [r7, #3]
 8019868:	6879      	ldr	r1, [r7, #4]
 801986a:	4613      	mov	r3, r2
 801986c:	011b      	lsls	r3, r3, #4
 801986e:	1a9b      	subs	r3, r3, r2
 8019870:	009b      	lsls	r3, r3, #2
 8019872:	440b      	add	r3, r1
 8019874:	332a      	adds	r3, #42	@ 0x2a
 8019876:	2202      	movs	r2, #2
 8019878:	701a      	strb	r2, [r3, #0]
      break;
 801987a:	e096      	b.n	80199aa <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 801987c:	78bb      	ldrb	r3, [r7, #2]
 801987e:	2b00      	cmp	r3, #0
 8019880:	d120      	bne.n	80198c4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8019882:	78fa      	ldrb	r2, [r7, #3]
 8019884:	6879      	ldr	r1, [r7, #4]
 8019886:	4613      	mov	r3, r2
 8019888:	011b      	lsls	r3, r3, #4
 801988a:	1a9b      	subs	r3, r3, r2
 801988c:	009b      	lsls	r3, r3, #2
 801988e:	440b      	add	r3, r1
 8019890:	333d      	adds	r3, #61	@ 0x3d
 8019892:	781b      	ldrb	r3, [r3, #0]
 8019894:	2b00      	cmp	r3, #0
 8019896:	d10a      	bne.n	80198ae <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8019898:	78fa      	ldrb	r2, [r7, #3]
 801989a:	6879      	ldr	r1, [r7, #4]
 801989c:	4613      	mov	r3, r2
 801989e:	011b      	lsls	r3, r3, #4
 80198a0:	1a9b      	subs	r3, r3, r2
 80198a2:	009b      	lsls	r3, r3, #2
 80198a4:	440b      	add	r3, r1
 80198a6:	332a      	adds	r3, #42	@ 0x2a
 80198a8:	2200      	movs	r2, #0
 80198aa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80198ac:	e07e      	b.n	80199ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80198ae:	78fa      	ldrb	r2, [r7, #3]
 80198b0:	6879      	ldr	r1, [r7, #4]
 80198b2:	4613      	mov	r3, r2
 80198b4:	011b      	lsls	r3, r3, #4
 80198b6:	1a9b      	subs	r3, r3, r2
 80198b8:	009b      	lsls	r3, r3, #2
 80198ba:	440b      	add	r3, r1
 80198bc:	332a      	adds	r3, #42	@ 0x2a
 80198be:	2202      	movs	r2, #2
 80198c0:	701a      	strb	r2, [r3, #0]
      break;
 80198c2:	e073      	b.n	80199ac <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80198c4:	78fa      	ldrb	r2, [r7, #3]
 80198c6:	6879      	ldr	r1, [r7, #4]
 80198c8:	4613      	mov	r3, r2
 80198ca:	011b      	lsls	r3, r3, #4
 80198cc:	1a9b      	subs	r3, r3, r2
 80198ce:	009b      	lsls	r3, r3, #2
 80198d0:	440b      	add	r3, r1
 80198d2:	333c      	adds	r3, #60	@ 0x3c
 80198d4:	781b      	ldrb	r3, [r3, #0]
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d10a      	bne.n	80198f0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80198da:	78fa      	ldrb	r2, [r7, #3]
 80198dc:	6879      	ldr	r1, [r7, #4]
 80198de:	4613      	mov	r3, r2
 80198e0:	011b      	lsls	r3, r3, #4
 80198e2:	1a9b      	subs	r3, r3, r2
 80198e4:	009b      	lsls	r3, r3, #2
 80198e6:	440b      	add	r3, r1
 80198e8:	332a      	adds	r3, #42	@ 0x2a
 80198ea:	2200      	movs	r2, #0
 80198ec:	701a      	strb	r2, [r3, #0]
      break;
 80198ee:	e05d      	b.n	80199ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80198f0:	78fa      	ldrb	r2, [r7, #3]
 80198f2:	6879      	ldr	r1, [r7, #4]
 80198f4:	4613      	mov	r3, r2
 80198f6:	011b      	lsls	r3, r3, #4
 80198f8:	1a9b      	subs	r3, r3, r2
 80198fa:	009b      	lsls	r3, r3, #2
 80198fc:	440b      	add	r3, r1
 80198fe:	332a      	adds	r3, #42	@ 0x2a
 8019900:	2202      	movs	r2, #2
 8019902:	701a      	strb	r2, [r3, #0]
      break;
 8019904:	e052      	b.n	80199ac <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8019906:	78bb      	ldrb	r3, [r7, #2]
 8019908:	2b00      	cmp	r3, #0
 801990a:	d120      	bne.n	801994e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 801990c:	78fa      	ldrb	r2, [r7, #3]
 801990e:	6879      	ldr	r1, [r7, #4]
 8019910:	4613      	mov	r3, r2
 8019912:	011b      	lsls	r3, r3, #4
 8019914:	1a9b      	subs	r3, r3, r2
 8019916:	009b      	lsls	r3, r3, #2
 8019918:	440b      	add	r3, r1
 801991a:	333d      	adds	r3, #61	@ 0x3d
 801991c:	781b      	ldrb	r3, [r3, #0]
 801991e:	2b00      	cmp	r3, #0
 8019920:	d10a      	bne.n	8019938 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8019922:	78fa      	ldrb	r2, [r7, #3]
 8019924:	6879      	ldr	r1, [r7, #4]
 8019926:	4613      	mov	r3, r2
 8019928:	011b      	lsls	r3, r3, #4
 801992a:	1a9b      	subs	r3, r3, r2
 801992c:	009b      	lsls	r3, r3, #2
 801992e:	440b      	add	r3, r1
 8019930:	332a      	adds	r3, #42	@ 0x2a
 8019932:	2200      	movs	r2, #0
 8019934:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8019936:	e039      	b.n	80199ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8019938:	78fa      	ldrb	r2, [r7, #3]
 801993a:	6879      	ldr	r1, [r7, #4]
 801993c:	4613      	mov	r3, r2
 801993e:	011b      	lsls	r3, r3, #4
 8019940:	1a9b      	subs	r3, r3, r2
 8019942:	009b      	lsls	r3, r3, #2
 8019944:	440b      	add	r3, r1
 8019946:	332a      	adds	r3, #42	@ 0x2a
 8019948:	2202      	movs	r2, #2
 801994a:	701a      	strb	r2, [r3, #0]
      break;
 801994c:	e02e      	b.n	80199ac <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 801994e:	78fa      	ldrb	r2, [r7, #3]
 8019950:	6879      	ldr	r1, [r7, #4]
 8019952:	4613      	mov	r3, r2
 8019954:	011b      	lsls	r3, r3, #4
 8019956:	1a9b      	subs	r3, r3, r2
 8019958:	009b      	lsls	r3, r3, #2
 801995a:	440b      	add	r3, r1
 801995c:	333c      	adds	r3, #60	@ 0x3c
 801995e:	781b      	ldrb	r3, [r3, #0]
 8019960:	2b00      	cmp	r3, #0
 8019962:	d10a      	bne.n	801997a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8019964:	78fa      	ldrb	r2, [r7, #3]
 8019966:	6879      	ldr	r1, [r7, #4]
 8019968:	4613      	mov	r3, r2
 801996a:	011b      	lsls	r3, r3, #4
 801996c:	1a9b      	subs	r3, r3, r2
 801996e:	009b      	lsls	r3, r3, #2
 8019970:	440b      	add	r3, r1
 8019972:	332a      	adds	r3, #42	@ 0x2a
 8019974:	2200      	movs	r2, #0
 8019976:	701a      	strb	r2, [r3, #0]
      break;
 8019978:	e018      	b.n	80199ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 801997a:	78fa      	ldrb	r2, [r7, #3]
 801997c:	6879      	ldr	r1, [r7, #4]
 801997e:	4613      	mov	r3, r2
 8019980:	011b      	lsls	r3, r3, #4
 8019982:	1a9b      	subs	r3, r3, r2
 8019984:	009b      	lsls	r3, r3, #2
 8019986:	440b      	add	r3, r1
 8019988:	332a      	adds	r3, #42	@ 0x2a
 801998a:	2202      	movs	r2, #2
 801998c:	701a      	strb	r2, [r3, #0]
      break;
 801998e:	e00d      	b.n	80199ac <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8019990:	78fa      	ldrb	r2, [r7, #3]
 8019992:	6879      	ldr	r1, [r7, #4]
 8019994:	4613      	mov	r3, r2
 8019996:	011b      	lsls	r3, r3, #4
 8019998:	1a9b      	subs	r3, r3, r2
 801999a:	009b      	lsls	r3, r3, #2
 801999c:	440b      	add	r3, r1
 801999e:	332a      	adds	r3, #42	@ 0x2a
 80199a0:	2200      	movs	r2, #0
 80199a2:	701a      	strb	r2, [r3, #0]
      break;
 80199a4:	e002      	b.n	80199ac <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80199a6:	bf00      	nop
 80199a8:	e000      	b.n	80199ac <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80199aa:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80199ac:	78fa      	ldrb	r2, [r7, #3]
 80199ae:	6879      	ldr	r1, [r7, #4]
 80199b0:	4613      	mov	r3, r2
 80199b2:	011b      	lsls	r3, r3, #4
 80199b4:	1a9b      	subs	r3, r3, r2
 80199b6:	009b      	lsls	r3, r3, #2
 80199b8:	440b      	add	r3, r1
 80199ba:	332c      	adds	r3, #44	@ 0x2c
 80199bc:	697a      	ldr	r2, [r7, #20]
 80199be:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80199c0:	78fa      	ldrb	r2, [r7, #3]
 80199c2:	8b39      	ldrh	r1, [r7, #24]
 80199c4:	6878      	ldr	r0, [r7, #4]
 80199c6:	4613      	mov	r3, r2
 80199c8:	011b      	lsls	r3, r3, #4
 80199ca:	1a9b      	subs	r3, r3, r2
 80199cc:	009b      	lsls	r3, r3, #2
 80199ce:	4403      	add	r3, r0
 80199d0:	3334      	adds	r3, #52	@ 0x34
 80199d2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80199d4:	78fa      	ldrb	r2, [r7, #3]
 80199d6:	6879      	ldr	r1, [r7, #4]
 80199d8:	4613      	mov	r3, r2
 80199da:	011b      	lsls	r3, r3, #4
 80199dc:	1a9b      	subs	r3, r3, r2
 80199de:	009b      	lsls	r3, r3, #2
 80199e0:	440b      	add	r3, r1
 80199e2:	334c      	adds	r3, #76	@ 0x4c
 80199e4:	2200      	movs	r2, #0
 80199e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80199e8:	78fa      	ldrb	r2, [r7, #3]
 80199ea:	6879      	ldr	r1, [r7, #4]
 80199ec:	4613      	mov	r3, r2
 80199ee:	011b      	lsls	r3, r3, #4
 80199f0:	1a9b      	subs	r3, r3, r2
 80199f2:	009b      	lsls	r3, r3, #2
 80199f4:	440b      	add	r3, r1
 80199f6:	3338      	adds	r3, #56	@ 0x38
 80199f8:	2200      	movs	r2, #0
 80199fa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80199fc:	78fa      	ldrb	r2, [r7, #3]
 80199fe:	6879      	ldr	r1, [r7, #4]
 8019a00:	4613      	mov	r3, r2
 8019a02:	011b      	lsls	r3, r3, #4
 8019a04:	1a9b      	subs	r3, r3, r2
 8019a06:	009b      	lsls	r3, r3, #2
 8019a08:	440b      	add	r3, r1
 8019a0a:	3315      	adds	r3, #21
 8019a0c:	78fa      	ldrb	r2, [r7, #3]
 8019a0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8019a10:	78fa      	ldrb	r2, [r7, #3]
 8019a12:	6879      	ldr	r1, [r7, #4]
 8019a14:	4613      	mov	r3, r2
 8019a16:	011b      	lsls	r3, r3, #4
 8019a18:	1a9b      	subs	r3, r3, r2
 8019a1a:	009b      	lsls	r3, r3, #2
 8019a1c:	440b      	add	r3, r1
 8019a1e:	334d      	adds	r3, #77	@ 0x4d
 8019a20:	2200      	movs	r2, #0
 8019a22:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	6818      	ldr	r0, [r3, #0]
 8019a28:	78fa      	ldrb	r2, [r7, #3]
 8019a2a:	4613      	mov	r3, r2
 8019a2c:	011b      	lsls	r3, r3, #4
 8019a2e:	1a9b      	subs	r3, r3, r2
 8019a30:	009b      	lsls	r3, r3, #2
 8019a32:	3310      	adds	r3, #16
 8019a34:	687a      	ldr	r2, [r7, #4]
 8019a36:	4413      	add	r3, r2
 8019a38:	1d19      	adds	r1, r3, #4
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	799b      	ldrb	r3, [r3, #6]
 8019a3e:	461a      	mov	r2, r3
 8019a40:	f005 fcdc 	bl	801f3fc <USB_HC_StartXfer>
 8019a44:	4603      	mov	r3, r0
}
 8019a46:	4618      	mov	r0, r3
 8019a48:	3708      	adds	r7, #8
 8019a4a:	46bd      	mov	sp, r7
 8019a4c:	bd80      	pop	{r7, pc}
 8019a4e:	bf00      	nop

08019a50 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8019a50:	b580      	push	{r7, lr}
 8019a52:	b086      	sub	sp, #24
 8019a54:	af00      	add	r7, sp, #0
 8019a56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	681b      	ldr	r3, [r3, #0]
 8019a5c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019a5e:	693b      	ldr	r3, [r7, #16]
 8019a60:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	4618      	mov	r0, r3
 8019a68:	f005 f9dc 	bl	801ee24 <USB_GetMode>
 8019a6c:	4603      	mov	r3, r0
 8019a6e:	2b01      	cmp	r3, #1
 8019a70:	f040 80fb 	bne.w	8019c6a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	681b      	ldr	r3, [r3, #0]
 8019a78:	4618      	mov	r0, r3
 8019a7a:	f005 f99f 	bl	801edbc <USB_ReadInterrupts>
 8019a7e:	4603      	mov	r3, r0
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	f000 80f1 	beq.w	8019c68 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	4618      	mov	r0, r3
 8019a8c:	f005 f996 	bl	801edbc <USB_ReadInterrupts>
 8019a90:	4603      	mov	r3, r0
 8019a92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8019a96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8019a9a:	d104      	bne.n	8019aa6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8019aa4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	4618      	mov	r0, r3
 8019aac:	f005 f986 	bl	801edbc <USB_ReadInterrupts>
 8019ab0:	4603      	mov	r3, r0
 8019ab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8019ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8019aba:	d104      	bne.n	8019ac6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	681b      	ldr	r3, [r3, #0]
 8019ac0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8019ac4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	681b      	ldr	r3, [r3, #0]
 8019aca:	4618      	mov	r0, r3
 8019acc:	f005 f976 	bl	801edbc <USB_ReadInterrupts>
 8019ad0:	4603      	mov	r3, r0
 8019ad2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8019ad6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8019ada:	d104      	bne.n	8019ae6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8019ae4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	681b      	ldr	r3, [r3, #0]
 8019aea:	4618      	mov	r0, r3
 8019aec:	f005 f966 	bl	801edbc <USB_ReadInterrupts>
 8019af0:	4603      	mov	r3, r0
 8019af2:	f003 0302 	and.w	r3, r3, #2
 8019af6:	2b02      	cmp	r3, #2
 8019af8:	d103      	bne.n	8019b02 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	2202      	movs	r2, #2
 8019b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	4618      	mov	r0, r3
 8019b08:	f005 f958 	bl	801edbc <USB_ReadInterrupts>
 8019b0c:	4603      	mov	r3, r0
 8019b0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8019b12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019b16:	d120      	bne.n	8019b5a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8019b20:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8019b22:	68fb      	ldr	r3, [r7, #12]
 8019b24:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	f003 0301 	and.w	r3, r3, #1
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d113      	bne.n	8019b5a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8019b32:	2110      	movs	r1, #16
 8019b34:	6938      	ldr	r0, [r7, #16]
 8019b36:	f005 f84b 	bl	801ebd0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8019b3a:	6938      	ldr	r0, [r7, #16]
 8019b3c:	f005 f87a 	bl	801ec34 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	7a5b      	ldrb	r3, [r3, #9]
 8019b44:	2b02      	cmp	r3, #2
 8019b46:	d105      	bne.n	8019b54 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	681b      	ldr	r3, [r3, #0]
 8019b4c:	2101      	movs	r1, #1
 8019b4e:	4618      	mov	r0, r3
 8019b50:	f005 fa60 	bl	801f014 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8019b54:	6878      	ldr	r0, [r7, #4]
 8019b56:	f010 faf9 	bl	802a14c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	4618      	mov	r0, r3
 8019b60:	f005 f92c 	bl	801edbc <USB_ReadInterrupts>
 8019b64:	4603      	mov	r3, r0
 8019b66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8019b6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8019b6e:	d102      	bne.n	8019b76 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8019b70:	6878      	ldr	r0, [r7, #4]
 8019b72:	f001 fd33 	bl	801b5dc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	f005 f91e 	bl	801edbc <USB_ReadInterrupts>
 8019b80:	4603      	mov	r3, r0
 8019b82:	f003 0308 	and.w	r3, r3, #8
 8019b86:	2b08      	cmp	r3, #8
 8019b88:	d106      	bne.n	8019b98 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8019b8a:	6878      	ldr	r0, [r7, #4]
 8019b8c:	f010 fac2 	bl	802a114 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	681b      	ldr	r3, [r3, #0]
 8019b94:	2208      	movs	r2, #8
 8019b96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	4618      	mov	r0, r3
 8019b9e:	f005 f90d 	bl	801edbc <USB_ReadInterrupts>
 8019ba2:	4603      	mov	r3, r0
 8019ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8019ba8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8019bac:	d139      	bne.n	8019c22 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	681b      	ldr	r3, [r3, #0]
 8019bb2:	4618      	mov	r0, r3
 8019bb4:	f005 fe9c 	bl	801f8f0 <USB_HC_ReadInterrupt>
 8019bb8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8019bba:	2300      	movs	r3, #0
 8019bbc:	617b      	str	r3, [r7, #20]
 8019bbe:	e025      	b.n	8019c0c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8019bc0:	697b      	ldr	r3, [r7, #20]
 8019bc2:	f003 030f 	and.w	r3, r3, #15
 8019bc6:	68ba      	ldr	r2, [r7, #8]
 8019bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8019bcc:	f003 0301 	and.w	r3, r3, #1
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	d018      	beq.n	8019c06 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8019bd4:	697b      	ldr	r3, [r7, #20]
 8019bd6:	015a      	lsls	r2, r3, #5
 8019bd8:	68fb      	ldr	r3, [r7, #12]
 8019bda:	4413      	add	r3, r2
 8019bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8019be6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8019bea:	d106      	bne.n	8019bfa <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8019bec:	697b      	ldr	r3, [r7, #20]
 8019bee:	b2db      	uxtb	r3, r3
 8019bf0:	4619      	mov	r1, r3
 8019bf2:	6878      	ldr	r0, [r7, #4]
 8019bf4:	f000 f905 	bl	8019e02 <HCD_HC_IN_IRQHandler>
 8019bf8:	e005      	b.n	8019c06 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8019bfa:	697b      	ldr	r3, [r7, #20]
 8019bfc:	b2db      	uxtb	r3, r3
 8019bfe:	4619      	mov	r1, r3
 8019c00:	6878      	ldr	r0, [r7, #4]
 8019c02:	f000 ff67 	bl	801aad4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8019c06:	697b      	ldr	r3, [r7, #20]
 8019c08:	3301      	adds	r3, #1
 8019c0a:	617b      	str	r3, [r7, #20]
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	795b      	ldrb	r3, [r3, #5]
 8019c10:	461a      	mov	r2, r3
 8019c12:	697b      	ldr	r3, [r7, #20]
 8019c14:	4293      	cmp	r3, r2
 8019c16:	d3d3      	bcc.n	8019bc0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8019c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	681b      	ldr	r3, [r3, #0]
 8019c26:	4618      	mov	r0, r3
 8019c28:	f005 f8c8 	bl	801edbc <USB_ReadInterrupts>
 8019c2c:	4603      	mov	r3, r0
 8019c2e:	f003 0310 	and.w	r3, r3, #16
 8019c32:	2b10      	cmp	r3, #16
 8019c34:	d101      	bne.n	8019c3a <HAL_HCD_IRQHandler+0x1ea>
 8019c36:	2301      	movs	r3, #1
 8019c38:	e000      	b.n	8019c3c <HAL_HCD_IRQHandler+0x1ec>
 8019c3a:	2300      	movs	r3, #0
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d014      	beq.n	8019c6a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	699a      	ldr	r2, [r3, #24]
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	681b      	ldr	r3, [r3, #0]
 8019c4a:	f022 0210 	bic.w	r2, r2, #16
 8019c4e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8019c50:	6878      	ldr	r0, [r7, #4]
 8019c52:	f001 fbe4 	bl	801b41e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	699a      	ldr	r2, [r3, #24]
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	681b      	ldr	r3, [r3, #0]
 8019c60:	f042 0210 	orr.w	r2, r2, #16
 8019c64:	619a      	str	r2, [r3, #24]
 8019c66:	e000      	b.n	8019c6a <HAL_HCD_IRQHandler+0x21a>
      return;
 8019c68:	bf00      	nop
    }
  }
}
 8019c6a:	3718      	adds	r7, #24
 8019c6c:	46bd      	mov	sp, r7
 8019c6e:	bd80      	pop	{r7, pc}

08019c70 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8019c70:	b580      	push	{r7, lr}
 8019c72:	b082      	sub	sp, #8
 8019c74:	af00      	add	r7, sp, #0
 8019c76:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8019c7e:	2b01      	cmp	r3, #1
 8019c80:	d101      	bne.n	8019c86 <HAL_HCD_Start+0x16>
 8019c82:	2302      	movs	r3, #2
 8019c84:	e013      	b.n	8019cae <HAL_HCD_Start+0x3e>
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	2201      	movs	r2, #1
 8019c8a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	681b      	ldr	r3, [r3, #0]
 8019c92:	2101      	movs	r1, #1
 8019c94:	4618      	mov	r0, r3
 8019c96:	f005 fa24 	bl	801f0e2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	681b      	ldr	r3, [r3, #0]
 8019c9e:	4618      	mov	r0, r3
 8019ca0:	f004 ff28 	bl	801eaf4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	2200      	movs	r2, #0
 8019ca8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8019cac:	2300      	movs	r3, #0
}
 8019cae:	4618      	mov	r0, r3
 8019cb0:	3708      	adds	r7, #8
 8019cb2:	46bd      	mov	sp, r7
 8019cb4:	bd80      	pop	{r7, pc}

08019cb6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8019cb6:	b580      	push	{r7, lr}
 8019cb8:	b082      	sub	sp, #8
 8019cba:	af00      	add	r7, sp, #0
 8019cbc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8019cc4:	2b01      	cmp	r3, #1
 8019cc6:	d101      	bne.n	8019ccc <HAL_HCD_Stop+0x16>
 8019cc8:	2302      	movs	r3, #2
 8019cca:	e00d      	b.n	8019ce8 <HAL_HCD_Stop+0x32>
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	2201      	movs	r2, #1
 8019cd0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	4618      	mov	r0, r3
 8019cda:	f005 ff77 	bl	801fbcc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	2200      	movs	r2, #0
 8019ce2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8019ce6:	2300      	movs	r3, #0
}
 8019ce8:	4618      	mov	r0, r3
 8019cea:	3708      	adds	r7, #8
 8019cec:	46bd      	mov	sp, r7
 8019cee:	bd80      	pop	{r7, pc}

08019cf0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8019cf0:	b580      	push	{r7, lr}
 8019cf2:	b082      	sub	sp, #8
 8019cf4:	af00      	add	r7, sp, #0
 8019cf6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	4618      	mov	r0, r3
 8019cfe:	f005 f9c6 	bl	801f08e <USB_ResetPort>
 8019d02:	4603      	mov	r3, r0
}
 8019d04:	4618      	mov	r0, r3
 8019d06:	3708      	adds	r7, #8
 8019d08:	46bd      	mov	sp, r7
 8019d0a:	bd80      	pop	{r7, pc}

08019d0c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8019d0c:	b480      	push	{r7}
 8019d0e:	b083      	sub	sp, #12
 8019d10:	af00      	add	r7, sp, #0
 8019d12:	6078      	str	r0, [r7, #4]
 8019d14:	460b      	mov	r3, r1
 8019d16:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8019d18:	78fa      	ldrb	r2, [r7, #3]
 8019d1a:	6879      	ldr	r1, [r7, #4]
 8019d1c:	4613      	mov	r3, r2
 8019d1e:	011b      	lsls	r3, r3, #4
 8019d20:	1a9b      	subs	r3, r3, r2
 8019d22:	009b      	lsls	r3, r3, #2
 8019d24:	440b      	add	r3, r1
 8019d26:	334c      	adds	r3, #76	@ 0x4c
 8019d28:	781b      	ldrb	r3, [r3, #0]
}
 8019d2a:	4618      	mov	r0, r3
 8019d2c:	370c      	adds	r7, #12
 8019d2e:	46bd      	mov	sp, r7
 8019d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d34:	4770      	bx	lr

08019d36 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8019d36:	b480      	push	{r7}
 8019d38:	b083      	sub	sp, #12
 8019d3a:	af00      	add	r7, sp, #0
 8019d3c:	6078      	str	r0, [r7, #4]
 8019d3e:	460b      	mov	r3, r1
 8019d40:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8019d42:	78fa      	ldrb	r2, [r7, #3]
 8019d44:	6879      	ldr	r1, [r7, #4]
 8019d46:	4613      	mov	r3, r2
 8019d48:	011b      	lsls	r3, r3, #4
 8019d4a:	1a9b      	subs	r3, r3, r2
 8019d4c:	009b      	lsls	r3, r3, #2
 8019d4e:	440b      	add	r3, r1
 8019d50:	3338      	adds	r3, #56	@ 0x38
 8019d52:	681b      	ldr	r3, [r3, #0]
}
 8019d54:	4618      	mov	r0, r3
 8019d56:	370c      	adds	r7, #12
 8019d58:	46bd      	mov	sp, r7
 8019d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d5e:	4770      	bx	lr

08019d60 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8019d60:	b580      	push	{r7, lr}
 8019d62:	b082      	sub	sp, #8
 8019d64:	af00      	add	r7, sp, #0
 8019d66:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	4618      	mov	r0, r3
 8019d6e:	f005 fa08 	bl	801f182 <USB_GetCurrentFrame>
 8019d72:	4603      	mov	r3, r0
}
 8019d74:	4618      	mov	r0, r3
 8019d76:	3708      	adds	r7, #8
 8019d78:	46bd      	mov	sp, r7
 8019d7a:	bd80      	pop	{r7, pc}

08019d7c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8019d7c:	b580      	push	{r7, lr}
 8019d7e:	b082      	sub	sp, #8
 8019d80:	af00      	add	r7, sp, #0
 8019d82:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	4618      	mov	r0, r3
 8019d8a:	f005 f9e3 	bl	801f154 <USB_GetHostSpeed>
 8019d8e:	4603      	mov	r3, r0
}
 8019d90:	4618      	mov	r0, r3
 8019d92:	3708      	adds	r7, #8
 8019d94:	46bd      	mov	sp, r7
 8019d96:	bd80      	pop	{r7, pc}

08019d98 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8019d98:	b480      	push	{r7}
 8019d9a:	b083      	sub	sp, #12
 8019d9c:	af00      	add	r7, sp, #0
 8019d9e:	6078      	str	r0, [r7, #4]
 8019da0:	460b      	mov	r3, r1
 8019da2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8019da4:	78fa      	ldrb	r2, [r7, #3]
 8019da6:	6879      	ldr	r1, [r7, #4]
 8019da8:	4613      	mov	r3, r2
 8019daa:	011b      	lsls	r3, r3, #4
 8019dac:	1a9b      	subs	r3, r3, r2
 8019dae:	009b      	lsls	r3, r3, #2
 8019db0:	440b      	add	r3, r1
 8019db2:	331a      	adds	r3, #26
 8019db4:	2200      	movs	r2, #0
 8019db6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8019db8:	78fa      	ldrb	r2, [r7, #3]
 8019dba:	6879      	ldr	r1, [r7, #4]
 8019dbc:	4613      	mov	r3, r2
 8019dbe:	011b      	lsls	r3, r3, #4
 8019dc0:	1a9b      	subs	r3, r3, r2
 8019dc2:	009b      	lsls	r3, r3, #2
 8019dc4:	440b      	add	r3, r1
 8019dc6:	331b      	adds	r3, #27
 8019dc8:	2200      	movs	r2, #0
 8019dca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8019dcc:	78fa      	ldrb	r2, [r7, #3]
 8019dce:	6879      	ldr	r1, [r7, #4]
 8019dd0:	4613      	mov	r3, r2
 8019dd2:	011b      	lsls	r3, r3, #4
 8019dd4:	1a9b      	subs	r3, r3, r2
 8019dd6:	009b      	lsls	r3, r3, #2
 8019dd8:	440b      	add	r3, r1
 8019dda:	3325      	adds	r3, #37	@ 0x25
 8019ddc:	2200      	movs	r2, #0
 8019dde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8019de0:	78fa      	ldrb	r2, [r7, #3]
 8019de2:	6879      	ldr	r1, [r7, #4]
 8019de4:	4613      	mov	r3, r2
 8019de6:	011b      	lsls	r3, r3, #4
 8019de8:	1a9b      	subs	r3, r3, r2
 8019dea:	009b      	lsls	r3, r3, #2
 8019dec:	440b      	add	r3, r1
 8019dee:	3324      	adds	r3, #36	@ 0x24
 8019df0:	2200      	movs	r2, #0
 8019df2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8019df4:	2300      	movs	r3, #0
}
 8019df6:	4618      	mov	r0, r3
 8019df8:	370c      	adds	r7, #12
 8019dfa:	46bd      	mov	sp, r7
 8019dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e00:	4770      	bx	lr

08019e02 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8019e02:	b580      	push	{r7, lr}
 8019e04:	b086      	sub	sp, #24
 8019e06:	af00      	add	r7, sp, #0
 8019e08:	6078      	str	r0, [r7, #4]
 8019e0a:	460b      	mov	r3, r1
 8019e0c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	681b      	ldr	r3, [r3, #0]
 8019e12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019e14:	697b      	ldr	r3, [r7, #20]
 8019e16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	681b      	ldr	r3, [r3, #0]
 8019e1c:	78fa      	ldrb	r2, [r7, #3]
 8019e1e:	4611      	mov	r1, r2
 8019e20:	4618      	mov	r0, r3
 8019e22:	f004 ffde 	bl	801ede2 <USB_ReadChInterrupts>
 8019e26:	4603      	mov	r3, r0
 8019e28:	f003 0304 	and.w	r3, r3, #4
 8019e2c:	2b04      	cmp	r3, #4
 8019e2e:	d11a      	bne.n	8019e66 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8019e30:	78fb      	ldrb	r3, [r7, #3]
 8019e32:	015a      	lsls	r2, r3, #5
 8019e34:	693b      	ldr	r3, [r7, #16]
 8019e36:	4413      	add	r3, r2
 8019e38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8019e3c:	461a      	mov	r2, r3
 8019e3e:	2304      	movs	r3, #4
 8019e40:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8019e42:	78fa      	ldrb	r2, [r7, #3]
 8019e44:	6879      	ldr	r1, [r7, #4]
 8019e46:	4613      	mov	r3, r2
 8019e48:	011b      	lsls	r3, r3, #4
 8019e4a:	1a9b      	subs	r3, r3, r2
 8019e4c:	009b      	lsls	r3, r3, #2
 8019e4e:	440b      	add	r3, r1
 8019e50:	334d      	adds	r3, #77	@ 0x4d
 8019e52:	2207      	movs	r2, #7
 8019e54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	78fa      	ldrb	r2, [r7, #3]
 8019e5c:	4611      	mov	r1, r2
 8019e5e:	4618      	mov	r0, r3
 8019e60:	f005 fd57 	bl	801f912 <USB_HC_Halt>
 8019e64:	e09e      	b.n	8019fa4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	78fa      	ldrb	r2, [r7, #3]
 8019e6c:	4611      	mov	r1, r2
 8019e6e:	4618      	mov	r0, r3
 8019e70:	f004 ffb7 	bl	801ede2 <USB_ReadChInterrupts>
 8019e74:	4603      	mov	r3, r0
 8019e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019e7e:	d11b      	bne.n	8019eb8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8019e80:	78fb      	ldrb	r3, [r7, #3]
 8019e82:	015a      	lsls	r2, r3, #5
 8019e84:	693b      	ldr	r3, [r7, #16]
 8019e86:	4413      	add	r3, r2
 8019e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8019e8c:	461a      	mov	r2, r3
 8019e8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019e92:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8019e94:	78fa      	ldrb	r2, [r7, #3]
 8019e96:	6879      	ldr	r1, [r7, #4]
 8019e98:	4613      	mov	r3, r2
 8019e9a:	011b      	lsls	r3, r3, #4
 8019e9c:	1a9b      	subs	r3, r3, r2
 8019e9e:	009b      	lsls	r3, r3, #2
 8019ea0:	440b      	add	r3, r1
 8019ea2:	334d      	adds	r3, #77	@ 0x4d
 8019ea4:	2208      	movs	r2, #8
 8019ea6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	78fa      	ldrb	r2, [r7, #3]
 8019eae:	4611      	mov	r1, r2
 8019eb0:	4618      	mov	r0, r3
 8019eb2:	f005 fd2e 	bl	801f912 <USB_HC_Halt>
 8019eb6:	e075      	b.n	8019fa4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8019eb8:	687b      	ldr	r3, [r7, #4]
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	78fa      	ldrb	r2, [r7, #3]
 8019ebe:	4611      	mov	r1, r2
 8019ec0:	4618      	mov	r0, r3
 8019ec2:	f004 ff8e 	bl	801ede2 <USB_ReadChInterrupts>
 8019ec6:	4603      	mov	r3, r0
 8019ec8:	f003 0308 	and.w	r3, r3, #8
 8019ecc:	2b08      	cmp	r3, #8
 8019ece:	d11a      	bne.n	8019f06 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8019ed0:	78fb      	ldrb	r3, [r7, #3]
 8019ed2:	015a      	lsls	r2, r3, #5
 8019ed4:	693b      	ldr	r3, [r7, #16]
 8019ed6:	4413      	add	r3, r2
 8019ed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8019edc:	461a      	mov	r2, r3
 8019ede:	2308      	movs	r3, #8
 8019ee0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8019ee2:	78fa      	ldrb	r2, [r7, #3]
 8019ee4:	6879      	ldr	r1, [r7, #4]
 8019ee6:	4613      	mov	r3, r2
 8019ee8:	011b      	lsls	r3, r3, #4
 8019eea:	1a9b      	subs	r3, r3, r2
 8019eec:	009b      	lsls	r3, r3, #2
 8019eee:	440b      	add	r3, r1
 8019ef0:	334d      	adds	r3, #77	@ 0x4d
 8019ef2:	2206      	movs	r2, #6
 8019ef4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	78fa      	ldrb	r2, [r7, #3]
 8019efc:	4611      	mov	r1, r2
 8019efe:	4618      	mov	r0, r3
 8019f00:	f005 fd07 	bl	801f912 <USB_HC_Halt>
 8019f04:	e04e      	b.n	8019fa4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	681b      	ldr	r3, [r3, #0]
 8019f0a:	78fa      	ldrb	r2, [r7, #3]
 8019f0c:	4611      	mov	r1, r2
 8019f0e:	4618      	mov	r0, r3
 8019f10:	f004 ff67 	bl	801ede2 <USB_ReadChInterrupts>
 8019f14:	4603      	mov	r3, r0
 8019f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8019f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019f1e:	d11b      	bne.n	8019f58 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8019f20:	78fb      	ldrb	r3, [r7, #3]
 8019f22:	015a      	lsls	r2, r3, #5
 8019f24:	693b      	ldr	r3, [r7, #16]
 8019f26:	4413      	add	r3, r2
 8019f28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8019f2c:	461a      	mov	r2, r3
 8019f2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019f32:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8019f34:	78fa      	ldrb	r2, [r7, #3]
 8019f36:	6879      	ldr	r1, [r7, #4]
 8019f38:	4613      	mov	r3, r2
 8019f3a:	011b      	lsls	r3, r3, #4
 8019f3c:	1a9b      	subs	r3, r3, r2
 8019f3e:	009b      	lsls	r3, r3, #2
 8019f40:	440b      	add	r3, r1
 8019f42:	334d      	adds	r3, #77	@ 0x4d
 8019f44:	2209      	movs	r2, #9
 8019f46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	78fa      	ldrb	r2, [r7, #3]
 8019f4e:	4611      	mov	r1, r2
 8019f50:	4618      	mov	r0, r3
 8019f52:	f005 fcde 	bl	801f912 <USB_HC_Halt>
 8019f56:	e025      	b.n	8019fa4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	681b      	ldr	r3, [r3, #0]
 8019f5c:	78fa      	ldrb	r2, [r7, #3]
 8019f5e:	4611      	mov	r1, r2
 8019f60:	4618      	mov	r0, r3
 8019f62:	f004 ff3e 	bl	801ede2 <USB_ReadChInterrupts>
 8019f66:	4603      	mov	r3, r0
 8019f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019f6c:	2b80      	cmp	r3, #128	@ 0x80
 8019f6e:	d119      	bne.n	8019fa4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8019f70:	78fb      	ldrb	r3, [r7, #3]
 8019f72:	015a      	lsls	r2, r3, #5
 8019f74:	693b      	ldr	r3, [r7, #16]
 8019f76:	4413      	add	r3, r2
 8019f78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8019f7c:	461a      	mov	r2, r3
 8019f7e:	2380      	movs	r3, #128	@ 0x80
 8019f80:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8019f82:	78fa      	ldrb	r2, [r7, #3]
 8019f84:	6879      	ldr	r1, [r7, #4]
 8019f86:	4613      	mov	r3, r2
 8019f88:	011b      	lsls	r3, r3, #4
 8019f8a:	1a9b      	subs	r3, r3, r2
 8019f8c:	009b      	lsls	r3, r3, #2
 8019f8e:	440b      	add	r3, r1
 8019f90:	334d      	adds	r3, #77	@ 0x4d
 8019f92:	2207      	movs	r2, #7
 8019f94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	78fa      	ldrb	r2, [r7, #3]
 8019f9c:	4611      	mov	r1, r2
 8019f9e:	4618      	mov	r0, r3
 8019fa0:	f005 fcb7 	bl	801f912 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	78fa      	ldrb	r2, [r7, #3]
 8019faa:	4611      	mov	r1, r2
 8019fac:	4618      	mov	r0, r3
 8019fae:	f004 ff18 	bl	801ede2 <USB_ReadChInterrupts>
 8019fb2:	4603      	mov	r3, r0
 8019fb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8019fb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019fbc:	d112      	bne.n	8019fe4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	78fa      	ldrb	r2, [r7, #3]
 8019fc4:	4611      	mov	r1, r2
 8019fc6:	4618      	mov	r0, r3
 8019fc8:	f005 fca3 	bl	801f912 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8019fcc:	78fb      	ldrb	r3, [r7, #3]
 8019fce:	015a      	lsls	r2, r3, #5
 8019fd0:	693b      	ldr	r3, [r7, #16]
 8019fd2:	4413      	add	r3, r2
 8019fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8019fd8:	461a      	mov	r2, r3
 8019fda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8019fde:	6093      	str	r3, [r2, #8]
 8019fe0:	f000 bd75 	b.w	801aace <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	78fa      	ldrb	r2, [r7, #3]
 8019fea:	4611      	mov	r1, r2
 8019fec:	4618      	mov	r0, r3
 8019fee:	f004 fef8 	bl	801ede2 <USB_ReadChInterrupts>
 8019ff2:	4603      	mov	r3, r0
 8019ff4:	f003 0301 	and.w	r3, r3, #1
 8019ff8:	2b01      	cmp	r3, #1
 8019ffa:	f040 8128 	bne.w	801a24e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8019ffe:	78fb      	ldrb	r3, [r7, #3]
 801a000:	015a      	lsls	r2, r3, #5
 801a002:	693b      	ldr	r3, [r7, #16]
 801a004:	4413      	add	r3, r2
 801a006:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801a00a:	461a      	mov	r2, r3
 801a00c:	2320      	movs	r3, #32
 801a00e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 801a010:	78fa      	ldrb	r2, [r7, #3]
 801a012:	6879      	ldr	r1, [r7, #4]
 801a014:	4613      	mov	r3, r2
 801a016:	011b      	lsls	r3, r3, #4
 801a018:	1a9b      	subs	r3, r3, r2
 801a01a:	009b      	lsls	r3, r3, #2
 801a01c:	440b      	add	r3, r1
 801a01e:	331b      	adds	r3, #27
 801a020:	781b      	ldrb	r3, [r3, #0]
 801a022:	2b01      	cmp	r3, #1
 801a024:	d119      	bne.n	801a05a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 801a026:	78fa      	ldrb	r2, [r7, #3]
 801a028:	6879      	ldr	r1, [r7, #4]
 801a02a:	4613      	mov	r3, r2
 801a02c:	011b      	lsls	r3, r3, #4
 801a02e:	1a9b      	subs	r3, r3, r2
 801a030:	009b      	lsls	r3, r3, #2
 801a032:	440b      	add	r3, r1
 801a034:	331b      	adds	r3, #27
 801a036:	2200      	movs	r2, #0
 801a038:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 801a03a:	78fb      	ldrb	r3, [r7, #3]
 801a03c:	015a      	lsls	r2, r3, #5
 801a03e:	693b      	ldr	r3, [r7, #16]
 801a040:	4413      	add	r3, r2
 801a042:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801a046:	685b      	ldr	r3, [r3, #4]
 801a048:	78fa      	ldrb	r2, [r7, #3]
 801a04a:	0151      	lsls	r1, r2, #5
 801a04c:	693a      	ldr	r2, [r7, #16]
 801a04e:	440a      	add	r2, r1
 801a050:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801a054:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a058:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	799b      	ldrb	r3, [r3, #6]
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d01b      	beq.n	801a09a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 801a062:	78fa      	ldrb	r2, [r7, #3]
 801a064:	6879      	ldr	r1, [r7, #4]
 801a066:	4613      	mov	r3, r2
 801a068:	011b      	lsls	r3, r3, #4
 801a06a:	1a9b      	subs	r3, r3, r2
 801a06c:	009b      	lsls	r3, r3, #2
 801a06e:	440b      	add	r3, r1
 801a070:	3330      	adds	r3, #48	@ 0x30
 801a072:	6819      	ldr	r1, [r3, #0]
 801a074:	78fb      	ldrb	r3, [r7, #3]
 801a076:	015a      	lsls	r2, r3, #5
 801a078:	693b      	ldr	r3, [r7, #16]
 801a07a:	4413      	add	r3, r2
 801a07c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801a080:	691b      	ldr	r3, [r3, #16]
 801a082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a086:	78fa      	ldrb	r2, [r7, #3]
 801a088:	1ac9      	subs	r1, r1, r3
 801a08a:	6878      	ldr	r0, [r7, #4]
 801a08c:	4613      	mov	r3, r2
 801a08e:	011b      	lsls	r3, r3, #4
 801a090:	1a9b      	subs	r3, r3, r2
 801a092:	009b      	lsls	r3, r3, #2
 801a094:	4403      	add	r3, r0
 801a096:	3338      	adds	r3, #56	@ 0x38
 801a098:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 801a09a:	78fa      	ldrb	r2, [r7, #3]
 801a09c:	6879      	ldr	r1, [r7, #4]
 801a09e:	4613      	mov	r3, r2
 801a0a0:	011b      	lsls	r3, r3, #4
 801a0a2:	1a9b      	subs	r3, r3, r2
 801a0a4:	009b      	lsls	r3, r3, #2
 801a0a6:	440b      	add	r3, r1
 801a0a8:	334d      	adds	r3, #77	@ 0x4d
 801a0aa:	2201      	movs	r2, #1
 801a0ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 801a0ae:	78fa      	ldrb	r2, [r7, #3]
 801a0b0:	6879      	ldr	r1, [r7, #4]
 801a0b2:	4613      	mov	r3, r2
 801a0b4:	011b      	lsls	r3, r3, #4
 801a0b6:	1a9b      	subs	r3, r3, r2
 801a0b8:	009b      	lsls	r3, r3, #2
 801a0ba:	440b      	add	r3, r1
 801a0bc:	3344      	adds	r3, #68	@ 0x44
 801a0be:	2200      	movs	r2, #0
 801a0c0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 801a0c2:	78fb      	ldrb	r3, [r7, #3]
 801a0c4:	015a      	lsls	r2, r3, #5
 801a0c6:	693b      	ldr	r3, [r7, #16]
 801a0c8:	4413      	add	r3, r2
 801a0ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801a0ce:	461a      	mov	r2, r3
 801a0d0:	2301      	movs	r3, #1
 801a0d2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 801a0d4:	78fa      	ldrb	r2, [r7, #3]
 801a0d6:	6879      	ldr	r1, [r7, #4]
 801a0d8:	4613      	mov	r3, r2
 801a0da:	011b      	lsls	r3, r3, #4
 801a0dc:	1a9b      	subs	r3, r3, r2
 801a0de:	009b      	lsls	r3, r3, #2
 801a0e0:	440b      	add	r3, r1
 801a0e2:	3326      	adds	r3, #38	@ 0x26
 801a0e4:	781b      	ldrb	r3, [r3, #0]
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	d00a      	beq.n	801a100 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 801a0ea:	78fa      	ldrb	r2, [r7, #3]
 801a0ec:	6879      	ldr	r1, [r7, #4]
 801a0ee:	4613      	mov	r3, r2
 801a0f0:	011b      	lsls	r3, r3, #4
 801a0f2:	1a9b      	subs	r3, r3, r2
 801a0f4:	009b      	lsls	r3, r3, #2
 801a0f6:	440b      	add	r3, r1
 801a0f8:	3326      	adds	r3, #38	@ 0x26
 801a0fa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 801a0fc:	2b02      	cmp	r3, #2
 801a0fe:	d110      	bne.n	801a122 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	78fa      	ldrb	r2, [r7, #3]
 801a106:	4611      	mov	r1, r2
 801a108:	4618      	mov	r0, r3
 801a10a:	f005 fc02 	bl	801f912 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 801a10e:	78fb      	ldrb	r3, [r7, #3]
 801a110:	015a      	lsls	r2, r3, #5
 801a112:	693b      	ldr	r3, [r7, #16]
 801a114:	4413      	add	r3, r2
 801a116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801a11a:	461a      	mov	r2, r3
 801a11c:	2310      	movs	r3, #16
 801a11e:	6093      	str	r3, [r2, #8]
 801a120:	e03d      	b.n	801a19e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 801a122:	78fa      	ldrb	r2, [r7, #3]
 801a124:	6879      	ldr	r1, [r7, #4]
 801a126:	4613      	mov	r3, r2
 801a128:	011b      	lsls	r3, r3, #4
 801a12a:	1a9b      	subs	r3, r3, r2
 801a12c:	009b      	lsls	r3, r3, #2
 801a12e:	440b      	add	r3, r1
 801a130:	3326      	adds	r3, #38	@ 0x26
 801a132:	781b      	ldrb	r3, [r3, #0]
 801a134:	2b03      	cmp	r3, #3
 801a136:	d00a      	beq.n	801a14e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 801a138:	78fa      	ldrb	r2, [r7, #3]
 801a13a:	6879      	ldr	r1, [r7, #4]
 801a13c:	4613      	mov	r3, r2
 801a13e:	011b      	lsls	r3, r3, #4
 801a140:	1a9b      	subs	r3, r3, r2
 801a142:	009b      	lsls	r3, r3, #2
 801a144:	440b      	add	r3, r1
 801a146:	3326      	adds	r3, #38	@ 0x26
 801a148:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 801a14a:	2b01      	cmp	r3, #1
 801a14c:	d127      	bne.n	801a19e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 801a14e:	78fb      	ldrb	r3, [r7, #3]
 801a150:	015a      	lsls	r2, r3, #5
 801a152:	693b      	ldr	r3, [r7, #16]
 801a154:	4413      	add	r3, r2
 801a156:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	78fa      	ldrb	r2, [r7, #3]
 801a15e:	0151      	lsls	r1, r2, #5
 801a160:	693a      	ldr	r2, [r7, #16]
 801a162:	440a      	add	r2, r1
 801a164:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801a168:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801a16c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 801a16e:	78fa      	ldrb	r2, [r7, #3]
 801a170:	6879      	ldr	r1, [r7, #4]
 801a172:	4613      	mov	r3, r2
 801a174:	011b      	lsls	r3, r3, #4
 801a176:	1a9b      	subs	r3, r3, r2
 801a178:	009b      	lsls	r3, r3, #2
 801a17a:	440b      	add	r3, r1
 801a17c:	334c      	adds	r3, #76	@ 0x4c
 801a17e:	2201      	movs	r2, #1
 801a180:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 801a182:	78fa      	ldrb	r2, [r7, #3]
 801a184:	6879      	ldr	r1, [r7, #4]
 801a186:	4613      	mov	r3, r2
 801a188:	011b      	lsls	r3, r3, #4
 801a18a:	1a9b      	subs	r3, r3, r2
 801a18c:	009b      	lsls	r3, r3, #2
 801a18e:	440b      	add	r3, r1
 801a190:	334c      	adds	r3, #76	@ 0x4c
 801a192:	781a      	ldrb	r2, [r3, #0]
 801a194:	78fb      	ldrb	r3, [r7, #3]
 801a196:	4619      	mov	r1, r3
 801a198:	6878      	ldr	r0, [r7, #4]
 801a19a:	f00f ffe5 	bl	802a168 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	799b      	ldrb	r3, [r3, #6]
 801a1a2:	2b01      	cmp	r3, #1
 801a1a4:	d13b      	bne.n	801a21e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 801a1a6:	78fa      	ldrb	r2, [r7, #3]
 801a1a8:	6879      	ldr	r1, [r7, #4]
 801a1aa:	4613      	mov	r3, r2
 801a1ac:	011b      	lsls	r3, r3, #4
 801a1ae:	1a9b      	subs	r3, r3, r2
 801a1b0:	009b      	lsls	r3, r3, #2
 801a1b2:	440b      	add	r3, r1
 801a1b4:	3338      	adds	r3, #56	@ 0x38
 801a1b6:	6819      	ldr	r1, [r3, #0]
 801a1b8:	78fa      	ldrb	r2, [r7, #3]
 801a1ba:	6878      	ldr	r0, [r7, #4]
 801a1bc:	4613      	mov	r3, r2
 801a1be:	011b      	lsls	r3, r3, #4
 801a1c0:	1a9b      	subs	r3, r3, r2
 801a1c2:	009b      	lsls	r3, r3, #2
 801a1c4:	4403      	add	r3, r0
 801a1c6:	3328      	adds	r3, #40	@ 0x28
 801a1c8:	881b      	ldrh	r3, [r3, #0]
 801a1ca:	440b      	add	r3, r1
 801a1cc:	1e59      	subs	r1, r3, #1
 801a1ce:	78fa      	ldrb	r2, [r7, #3]
 801a1d0:	6878      	ldr	r0, [r7, #4]
 801a1d2:	4613      	mov	r3, r2
 801a1d4:	011b      	lsls	r3, r3, #4
 801a1d6:	1a9b      	subs	r3, r3, r2
 801a1d8:	009b      	lsls	r3, r3, #2
 801a1da:	4403      	add	r3, r0
 801a1dc:	3328      	adds	r3, #40	@ 0x28
 801a1de:	881b      	ldrh	r3, [r3, #0]
 801a1e0:	fbb1 f3f3 	udiv	r3, r1, r3
 801a1e4:	f003 0301 	and.w	r3, r3, #1
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	f000 8470 	beq.w	801aace <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 801a1ee:	78fa      	ldrb	r2, [r7, #3]
 801a1f0:	6879      	ldr	r1, [r7, #4]
 801a1f2:	4613      	mov	r3, r2
 801a1f4:	011b      	lsls	r3, r3, #4
 801a1f6:	1a9b      	subs	r3, r3, r2
 801a1f8:	009b      	lsls	r3, r3, #2
 801a1fa:	440b      	add	r3, r1
 801a1fc:	333c      	adds	r3, #60	@ 0x3c
 801a1fe:	781b      	ldrb	r3, [r3, #0]
 801a200:	78fa      	ldrb	r2, [r7, #3]
 801a202:	f083 0301 	eor.w	r3, r3, #1
 801a206:	b2d8      	uxtb	r0, r3
 801a208:	6879      	ldr	r1, [r7, #4]
 801a20a:	4613      	mov	r3, r2
 801a20c:	011b      	lsls	r3, r3, #4
 801a20e:	1a9b      	subs	r3, r3, r2
 801a210:	009b      	lsls	r3, r3, #2
 801a212:	440b      	add	r3, r1
 801a214:	333c      	adds	r3, #60	@ 0x3c
 801a216:	4602      	mov	r2, r0
 801a218:	701a      	strb	r2, [r3, #0]
 801a21a:	f000 bc58 	b.w	801aace <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 801a21e:	78fa      	ldrb	r2, [r7, #3]
 801a220:	6879      	ldr	r1, [r7, #4]
 801a222:	4613      	mov	r3, r2
 801a224:	011b      	lsls	r3, r3, #4
 801a226:	1a9b      	subs	r3, r3, r2
 801a228:	009b      	lsls	r3, r3, #2
 801a22a:	440b      	add	r3, r1
 801a22c:	333c      	adds	r3, #60	@ 0x3c
 801a22e:	781b      	ldrb	r3, [r3, #0]
 801a230:	78fa      	ldrb	r2, [r7, #3]
 801a232:	f083 0301 	eor.w	r3, r3, #1
 801a236:	b2d8      	uxtb	r0, r3
 801a238:	6879      	ldr	r1, [r7, #4]
 801a23a:	4613      	mov	r3, r2
 801a23c:	011b      	lsls	r3, r3, #4
 801a23e:	1a9b      	subs	r3, r3, r2
 801a240:	009b      	lsls	r3, r3, #2
 801a242:	440b      	add	r3, r1
 801a244:	333c      	adds	r3, #60	@ 0x3c
 801a246:	4602      	mov	r2, r0
 801a248:	701a      	strb	r2, [r3, #0]
 801a24a:	f000 bc40 	b.w	801aace <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	78fa      	ldrb	r2, [r7, #3]
 801a254:	4611      	mov	r1, r2
 801a256:	4618      	mov	r0, r3
 801a258:	f004 fdc3 	bl	801ede2 <USB_ReadChInterrupts>
 801a25c:	4603      	mov	r3, r0
 801a25e:	f003 0320 	and.w	r3, r3, #32
 801a262:	2b20      	cmp	r3, #32
 801a264:	d131      	bne.n	801a2ca <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 801a266:	78fb      	ldrb	r3, [r7, #3]
 801a268:	015a      	lsls	r2, r3, #5
 801a26a:	693b      	ldr	r3, [r7, #16]
 801a26c:	4413      	add	r3, r2
 801a26e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801a272:	461a      	mov	r2, r3
 801a274:	2320      	movs	r3, #32
 801a276:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 801a278:	78fa      	ldrb	r2, [r7, #3]
 801a27a:	6879      	ldr	r1, [r7, #4]
 801a27c:	4613      	mov	r3, r2
 801a27e:	011b      	lsls	r3, r3, #4
 801a280:	1a9b      	subs	r3, r3, r2
 801a282:	009b      	lsls	r3, r3, #2
 801a284:	440b      	add	r3, r1
 801a286:	331a      	adds	r3, #26
 801a288:	781b      	ldrb	r3, [r3, #0]
 801a28a:	2b01      	cmp	r3, #1
 801a28c:	f040 841f 	bne.w	801aace <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 801a290:	78fa      	ldrb	r2, [r7, #3]
 801a292:	6879      	ldr	r1, [r7, #4]
 801a294:	4613      	mov	r3, r2
 801a296:	011b      	lsls	r3, r3, #4
 801a298:	1a9b      	subs	r3, r3, r2
 801a29a:	009b      	lsls	r3, r3, #2
 801a29c:	440b      	add	r3, r1
 801a29e:	331b      	adds	r3, #27
 801a2a0:	2201      	movs	r2, #1
 801a2a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 801a2a4:	78fa      	ldrb	r2, [r7, #3]
 801a2a6:	6879      	ldr	r1, [r7, #4]
 801a2a8:	4613      	mov	r3, r2
 801a2aa:	011b      	lsls	r3, r3, #4
 801a2ac:	1a9b      	subs	r3, r3, r2
 801a2ae:	009b      	lsls	r3, r3, #2
 801a2b0:	440b      	add	r3, r1
 801a2b2:	334d      	adds	r3, #77	@ 0x4d
 801a2b4:	2203      	movs	r2, #3
 801a2b6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	681b      	ldr	r3, [r3, #0]
 801a2bc:	78fa      	ldrb	r2, [r7, #3]
 801a2be:	4611      	mov	r1, r2
 801a2c0:	4618      	mov	r0, r3
 801a2c2:	f005 fb26 	bl	801f912 <USB_HC_Halt>
 801a2c6:	f000 bc02 	b.w	801aace <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	78fa      	ldrb	r2, [r7, #3]
 801a2d0:	4611      	mov	r1, r2
 801a2d2:	4618      	mov	r0, r3
 801a2d4:	f004 fd85 	bl	801ede2 <USB_ReadChInterrupts>
 801a2d8:	4603      	mov	r3, r0
 801a2da:	f003 0302 	and.w	r3, r3, #2
 801a2de:	2b02      	cmp	r3, #2
 801a2e0:	f040 8305 	bne.w	801a8ee <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 801a2e4:	78fb      	ldrb	r3, [r7, #3]
 801a2e6:	015a      	lsls	r2, r3, #5
 801a2e8:	693b      	ldr	r3, [r7, #16]
 801a2ea:	4413      	add	r3, r2
 801a2ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801a2f0:	461a      	mov	r2, r3
 801a2f2:	2302      	movs	r3, #2
 801a2f4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 801a2f6:	78fa      	ldrb	r2, [r7, #3]
 801a2f8:	6879      	ldr	r1, [r7, #4]
 801a2fa:	4613      	mov	r3, r2
 801a2fc:	011b      	lsls	r3, r3, #4
 801a2fe:	1a9b      	subs	r3, r3, r2
 801a300:	009b      	lsls	r3, r3, #2
 801a302:	440b      	add	r3, r1
 801a304:	334d      	adds	r3, #77	@ 0x4d
 801a306:	781b      	ldrb	r3, [r3, #0]
 801a308:	2b01      	cmp	r3, #1
 801a30a:	d114      	bne.n	801a336 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 801a30c:	78fa      	ldrb	r2, [r7, #3]
 801a30e:	6879      	ldr	r1, [r7, #4]
 801a310:	4613      	mov	r3, r2
 801a312:	011b      	lsls	r3, r3, #4
 801a314:	1a9b      	subs	r3, r3, r2
 801a316:	009b      	lsls	r3, r3, #2
 801a318:	440b      	add	r3, r1
 801a31a:	334d      	adds	r3, #77	@ 0x4d
 801a31c:	2202      	movs	r2, #2
 801a31e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 801a320:	78fa      	ldrb	r2, [r7, #3]
 801a322:	6879      	ldr	r1, [r7, #4]
 801a324:	4613      	mov	r3, r2
 801a326:	011b      	lsls	r3, r3, #4
 801a328:	1a9b      	subs	r3, r3, r2
 801a32a:	009b      	lsls	r3, r3, #2
 801a32c:	440b      	add	r3, r1
 801a32e:	334c      	adds	r3, #76	@ 0x4c
 801a330:	2201      	movs	r2, #1
 801a332:	701a      	strb	r2, [r3, #0]
 801a334:	e2cc      	b.n	801a8d0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 801a336:	78fa      	ldrb	r2, [r7, #3]
 801a338:	6879      	ldr	r1, [r7, #4]
 801a33a:	4613      	mov	r3, r2
 801a33c:	011b      	lsls	r3, r3, #4
 801a33e:	1a9b      	subs	r3, r3, r2
 801a340:	009b      	lsls	r3, r3, #2
 801a342:	440b      	add	r3, r1
 801a344:	334d      	adds	r3, #77	@ 0x4d
 801a346:	781b      	ldrb	r3, [r3, #0]
 801a348:	2b06      	cmp	r3, #6
 801a34a:	d114      	bne.n	801a376 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 801a34c:	78fa      	ldrb	r2, [r7, #3]
 801a34e:	6879      	ldr	r1, [r7, #4]
 801a350:	4613      	mov	r3, r2
 801a352:	011b      	lsls	r3, r3, #4
 801a354:	1a9b      	subs	r3, r3, r2
 801a356:	009b      	lsls	r3, r3, #2
 801a358:	440b      	add	r3, r1
 801a35a:	334d      	adds	r3, #77	@ 0x4d
 801a35c:	2202      	movs	r2, #2
 801a35e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 801a360:	78fa      	ldrb	r2, [r7, #3]
 801a362:	6879      	ldr	r1, [r7, #4]
 801a364:	4613      	mov	r3, r2
 801a366:	011b      	lsls	r3, r3, #4
 801a368:	1a9b      	subs	r3, r3, r2
 801a36a:	009b      	lsls	r3, r3, #2
 801a36c:	440b      	add	r3, r1
 801a36e:	334c      	adds	r3, #76	@ 0x4c
 801a370:	2205      	movs	r2, #5
 801a372:	701a      	strb	r2, [r3, #0]
 801a374:	e2ac      	b.n	801a8d0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 801a376:	78fa      	ldrb	r2, [r7, #3]
 801a378:	6879      	ldr	r1, [r7, #4]
 801a37a:	4613      	mov	r3, r2
 801a37c:	011b      	lsls	r3, r3, #4
 801a37e:	1a9b      	subs	r3, r3, r2
 801a380:	009b      	lsls	r3, r3, #2
 801a382:	440b      	add	r3, r1
 801a384:	334d      	adds	r3, #77	@ 0x4d
 801a386:	781b      	ldrb	r3, [r3, #0]
 801a388:	2b07      	cmp	r3, #7
 801a38a:	d00b      	beq.n	801a3a4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 801a38c:	78fa      	ldrb	r2, [r7, #3]
 801a38e:	6879      	ldr	r1, [r7, #4]
 801a390:	4613      	mov	r3, r2
 801a392:	011b      	lsls	r3, r3, #4
 801a394:	1a9b      	subs	r3, r3, r2
 801a396:	009b      	lsls	r3, r3, #2
 801a398:	440b      	add	r3, r1
 801a39a:	334d      	adds	r3, #77	@ 0x4d
 801a39c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 801a39e:	2b09      	cmp	r3, #9
 801a3a0:	f040 80a6 	bne.w	801a4f0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 801a3a4:	78fa      	ldrb	r2, [r7, #3]
 801a3a6:	6879      	ldr	r1, [r7, #4]
 801a3a8:	4613      	mov	r3, r2
 801a3aa:	011b      	lsls	r3, r3, #4
 801a3ac:	1a9b      	subs	r3, r3, r2
 801a3ae:	009b      	lsls	r3, r3, #2
 801a3b0:	440b      	add	r3, r1
 801a3b2:	334d      	adds	r3, #77	@ 0x4d
 801a3b4:	2202      	movs	r2, #2
 801a3b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 801a3b8:	78fa      	ldrb	r2, [r7, #3]
 801a3ba:	6879      	ldr	r1, [r7, #4]
 801a3bc:	4613      	mov	r3, r2
 801a3be:	011b      	lsls	r3, r3, #4
 801a3c0:	1a9b      	subs	r3, r3, r2
 801a3c2:	009b      	lsls	r3, r3, #2
 801a3c4:	440b      	add	r3, r1
 801a3c6:	3344      	adds	r3, #68	@ 0x44
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	1c59      	adds	r1, r3, #1
 801a3cc:	6878      	ldr	r0, [r7, #4]
 801a3ce:	4613      	mov	r3, r2
 801a3d0:	011b      	lsls	r3, r3, #4
 801a3d2:	1a9b      	subs	r3, r3, r2
 801a3d4:	009b      	lsls	r3, r3, #2
 801a3d6:	4403      	add	r3, r0
 801a3d8:	3344      	adds	r3, #68	@ 0x44
 801a3da:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 801a3dc:	78fa      	ldrb	r2, [r7, #3]
 801a3de:	6879      	ldr	r1, [r7, #4]
 801a3e0:	4613      	mov	r3, r2
 801a3e2:	011b      	lsls	r3, r3, #4
 801a3e4:	1a9b      	subs	r3, r3, r2
 801a3e6:	009b      	lsls	r3, r3, #2
 801a3e8:	440b      	add	r3, r1
 801a3ea:	3344      	adds	r3, #68	@ 0x44
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	2b02      	cmp	r3, #2
 801a3f0:	d943      	bls.n	801a47a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 801a3f2:	78fa      	ldrb	r2, [r7, #3]
 801a3f4:	6879      	ldr	r1, [r7, #4]
 801a3f6:	4613      	mov	r3, r2
 801a3f8:	011b      	lsls	r3, r3, #4
 801a3fa:	1a9b      	subs	r3, r3, r2
 801a3fc:	009b      	lsls	r3, r3, #2
 801a3fe:	440b      	add	r3, r1
 801a400:	3344      	adds	r3, #68	@ 0x44
 801a402:	2200      	movs	r2, #0
 801a404:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 801a406:	78fa      	ldrb	r2, [r7, #3]
 801a408:	6879      	ldr	r1, [r7, #4]
 801a40a:	4613      	mov	r3, r2
 801a40c:	011b      	lsls	r3, r3, #4
 801a40e:	1a9b      	subs	r3, r3, r2
 801a410:	009b      	lsls	r3, r3, #2
 801a412:	440b      	add	r3, r1
 801a414:	331a      	adds	r3, #26
 801a416:	781b      	ldrb	r3, [r3, #0]
 801a418:	2b01      	cmp	r3, #1
 801a41a:	d123      	bne.n	801a464 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 801a41c:	78fa      	ldrb	r2, [r7, #3]
 801a41e:	6879      	ldr	r1, [r7, #4]
 801a420:	4613      	mov	r3, r2
 801a422:	011b      	lsls	r3, r3, #4
 801a424:	1a9b      	subs	r3, r3, r2
 801a426:	009b      	lsls	r3, r3, #2
 801a428:	440b      	add	r3, r1
 801a42a:	331b      	adds	r3, #27
 801a42c:	2200      	movs	r2, #0
 801a42e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 801a430:	78fa      	ldrb	r2, [r7, #3]
 801a432:	6879      	ldr	r1, [r7, #4]
 801a434:	4613      	mov	r3, r2
 801a436:	011b      	lsls	r3, r3, #4
 801a438:	1a9b      	subs	r3, r3, r2
 801a43a:	009b      	lsls	r3, r3, #2
 801a43c:	440b      	add	r3, r1
 801a43e:	331c      	adds	r3, #28
 801a440:	2200      	movs	r2, #0
 801a442:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 801a444:	78fb      	ldrb	r3, [r7, #3]
 801a446:	015a      	lsls	r2, r3, #5
 801a448:	693b      	ldr	r3, [r7, #16]
 801a44a:	4413      	add	r3, r2
 801a44c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801a450:	685b      	ldr	r3, [r3, #4]
 801a452:	78fa      	ldrb	r2, [r7, #3]
 801a454:	0151      	lsls	r1, r2, #5
 801a456:	693a      	ldr	r2, [r7, #16]
 801a458:	440a      	add	r2, r1
 801a45a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801a45e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a462:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 801a464:	78fa      	ldrb	r2, [r7, #3]
 801a466:	6879      	ldr	r1, [r7, #4]
 801a468:	4613      	mov	r3, r2
 801a46a:	011b      	lsls	r3, r3, #4
 801a46c:	1a9b      	subs	r3, r3, r2
 801a46e:	009b      	lsls	r3, r3, #2
 801a470:	440b      	add	r3, r1
 801a472:	334c      	adds	r3, #76	@ 0x4c
 801a474:	2204      	movs	r2, #4
 801a476:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 801a478:	e229      	b.n	801a8ce <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 801a47a:	78fa      	ldrb	r2, [r7, #3]
 801a47c:	6879      	ldr	r1, [r7, #4]
 801a47e:	4613      	mov	r3, r2
 801a480:	011b      	lsls	r3, r3, #4
 801a482:	1a9b      	subs	r3, r3, r2
 801a484:	009b      	lsls	r3, r3, #2
 801a486:	440b      	add	r3, r1
 801a488:	334c      	adds	r3, #76	@ 0x4c
 801a48a:	2202      	movs	r2, #2
 801a48c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 801a48e:	78fa      	ldrb	r2, [r7, #3]
 801a490:	6879      	ldr	r1, [r7, #4]
 801a492:	4613      	mov	r3, r2
 801a494:	011b      	lsls	r3, r3, #4
 801a496:	1a9b      	subs	r3, r3, r2
 801a498:	009b      	lsls	r3, r3, #2
 801a49a:	440b      	add	r3, r1
 801a49c:	3326      	adds	r3, #38	@ 0x26
 801a49e:	781b      	ldrb	r3, [r3, #0]
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d00b      	beq.n	801a4bc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 801a4a4:	78fa      	ldrb	r2, [r7, #3]
 801a4a6:	6879      	ldr	r1, [r7, #4]
 801a4a8:	4613      	mov	r3, r2
 801a4aa:	011b      	lsls	r3, r3, #4
 801a4ac:	1a9b      	subs	r3, r3, r2
 801a4ae:	009b      	lsls	r3, r3, #2
 801a4b0:	440b      	add	r3, r1
 801a4b2:	3326      	adds	r3, #38	@ 0x26
 801a4b4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 801a4b6:	2b02      	cmp	r3, #2
 801a4b8:	f040 8209 	bne.w	801a8ce <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 801a4bc:	78fb      	ldrb	r3, [r7, #3]
 801a4be:	015a      	lsls	r2, r3, #5
 801a4c0:	693b      	ldr	r3, [r7, #16]
 801a4c2:	4413      	add	r3, r2
 801a4c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801a4cc:	68fb      	ldr	r3, [r7, #12]
 801a4ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801a4d2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 801a4d4:	68fb      	ldr	r3, [r7, #12]
 801a4d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801a4da:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 801a4dc:	78fb      	ldrb	r3, [r7, #3]
 801a4de:	015a      	lsls	r2, r3, #5
 801a4e0:	693b      	ldr	r3, [r7, #16]
 801a4e2:	4413      	add	r3, r2
 801a4e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801a4e8:	461a      	mov	r2, r3
 801a4ea:	68fb      	ldr	r3, [r7, #12]
 801a4ec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 801a4ee:	e1ee      	b.n	801a8ce <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 801a4f0:	78fa      	ldrb	r2, [r7, #3]
 801a4f2:	6879      	ldr	r1, [r7, #4]
 801a4f4:	4613      	mov	r3, r2
 801a4f6:	011b      	lsls	r3, r3, #4
 801a4f8:	1a9b      	subs	r3, r3, r2
 801a4fa:	009b      	lsls	r3, r3, #2
 801a4fc:	440b      	add	r3, r1
 801a4fe:	334d      	adds	r3, #77	@ 0x4d
 801a500:	781b      	ldrb	r3, [r3, #0]
 801a502:	2b05      	cmp	r3, #5
 801a504:	f040 80c8 	bne.w	801a698 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 801a508:	78fa      	ldrb	r2, [r7, #3]
 801a50a:	6879      	ldr	r1, [r7, #4]
 801a50c:	4613      	mov	r3, r2
 801a50e:	011b      	lsls	r3, r3, #4
 801a510:	1a9b      	subs	r3, r3, r2
 801a512:	009b      	lsls	r3, r3, #2
 801a514:	440b      	add	r3, r1
 801a516:	334d      	adds	r3, #77	@ 0x4d
 801a518:	2202      	movs	r2, #2
 801a51a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 801a51c:	78fa      	ldrb	r2, [r7, #3]
 801a51e:	6879      	ldr	r1, [r7, #4]
 801a520:	4613      	mov	r3, r2
 801a522:	011b      	lsls	r3, r3, #4
 801a524:	1a9b      	subs	r3, r3, r2
 801a526:	009b      	lsls	r3, r3, #2
 801a528:	440b      	add	r3, r1
 801a52a:	331b      	adds	r3, #27
 801a52c:	781b      	ldrb	r3, [r3, #0]
 801a52e:	2b01      	cmp	r3, #1
 801a530:	f040 81ce 	bne.w	801a8d0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 801a534:	78fa      	ldrb	r2, [r7, #3]
 801a536:	6879      	ldr	r1, [r7, #4]
 801a538:	4613      	mov	r3, r2
 801a53a:	011b      	lsls	r3, r3, #4
 801a53c:	1a9b      	subs	r3, r3, r2
 801a53e:	009b      	lsls	r3, r3, #2
 801a540:	440b      	add	r3, r1
 801a542:	3326      	adds	r3, #38	@ 0x26
 801a544:	781b      	ldrb	r3, [r3, #0]
 801a546:	2b03      	cmp	r3, #3
 801a548:	d16b      	bne.n	801a622 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 801a54a:	78fa      	ldrb	r2, [r7, #3]
 801a54c:	6879      	ldr	r1, [r7, #4]
 801a54e:	4613      	mov	r3, r2
 801a550:	011b      	lsls	r3, r3, #4
 801a552:	1a9b      	subs	r3, r3, r2
 801a554:	009b      	lsls	r3, r3, #2
 801a556:	440b      	add	r3, r1
 801a558:	3348      	adds	r3, #72	@ 0x48
 801a55a:	681b      	ldr	r3, [r3, #0]
 801a55c:	1c59      	adds	r1, r3, #1
 801a55e:	6878      	ldr	r0, [r7, #4]
 801a560:	4613      	mov	r3, r2
 801a562:	011b      	lsls	r3, r3, #4
 801a564:	1a9b      	subs	r3, r3, r2
 801a566:	009b      	lsls	r3, r3, #2
 801a568:	4403      	add	r3, r0
 801a56a:	3348      	adds	r3, #72	@ 0x48
 801a56c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 801a56e:	78fa      	ldrb	r2, [r7, #3]
 801a570:	6879      	ldr	r1, [r7, #4]
 801a572:	4613      	mov	r3, r2
 801a574:	011b      	lsls	r3, r3, #4
 801a576:	1a9b      	subs	r3, r3, r2
 801a578:	009b      	lsls	r3, r3, #2
 801a57a:	440b      	add	r3, r1
 801a57c:	3348      	adds	r3, #72	@ 0x48
 801a57e:	681b      	ldr	r3, [r3, #0]
 801a580:	2b02      	cmp	r3, #2
 801a582:	d943      	bls.n	801a60c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 801a584:	78fa      	ldrb	r2, [r7, #3]
 801a586:	6879      	ldr	r1, [r7, #4]
 801a588:	4613      	mov	r3, r2
 801a58a:	011b      	lsls	r3, r3, #4
 801a58c:	1a9b      	subs	r3, r3, r2
 801a58e:	009b      	lsls	r3, r3, #2
 801a590:	440b      	add	r3, r1
 801a592:	3348      	adds	r3, #72	@ 0x48
 801a594:	2200      	movs	r2, #0
 801a596:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 801a598:	78fa      	ldrb	r2, [r7, #3]
 801a59a:	6879      	ldr	r1, [r7, #4]
 801a59c:	4613      	mov	r3, r2
 801a59e:	011b      	lsls	r3, r3, #4
 801a5a0:	1a9b      	subs	r3, r3, r2
 801a5a2:	009b      	lsls	r3, r3, #2
 801a5a4:	440b      	add	r3, r1
 801a5a6:	331b      	adds	r3, #27
 801a5a8:	2200      	movs	r2, #0
 801a5aa:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 801a5ac:	78fa      	ldrb	r2, [r7, #3]
 801a5ae:	6879      	ldr	r1, [r7, #4]
 801a5b0:	4613      	mov	r3, r2
 801a5b2:	011b      	lsls	r3, r3, #4
 801a5b4:	1a9b      	subs	r3, r3, r2
 801a5b6:	009b      	lsls	r3, r3, #2
 801a5b8:	440b      	add	r3, r1
 801a5ba:	3344      	adds	r3, #68	@ 0x44
 801a5bc:	681b      	ldr	r3, [r3, #0]
 801a5be:	2b02      	cmp	r3, #2
 801a5c0:	d809      	bhi.n	801a5d6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 801a5c2:	78fa      	ldrb	r2, [r7, #3]
 801a5c4:	6879      	ldr	r1, [r7, #4]
 801a5c6:	4613      	mov	r3, r2
 801a5c8:	011b      	lsls	r3, r3, #4
 801a5ca:	1a9b      	subs	r3, r3, r2
 801a5cc:	009b      	lsls	r3, r3, #2
 801a5ce:	440b      	add	r3, r1
 801a5d0:	331c      	adds	r3, #28
 801a5d2:	2201      	movs	r2, #1
 801a5d4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 801a5d6:	78fb      	ldrb	r3, [r7, #3]
 801a5d8:	015a      	lsls	r2, r3, #5
 801a5da:	693b      	ldr	r3, [r7, #16]
 801a5dc:	4413      	add	r3, r2
 801a5de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801a5e2:	685b      	ldr	r3, [r3, #4]
 801a5e4:	78fa      	ldrb	r2, [r7, #3]
 801a5e6:	0151      	lsls	r1, r2, #5
 801a5e8:	693a      	ldr	r2, [r7, #16]
 801a5ea:	440a      	add	r2, r1
 801a5ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801a5f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a5f4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 801a5f6:	78fa      	ldrb	r2, [r7, #3]
 801a5f8:	6879      	ldr	r1, [r7, #4]
 801a5fa:	4613      	mov	r3, r2
 801a5fc:	011b      	lsls	r3, r3, #4
 801a5fe:	1a9b      	subs	r3, r3, r2
 801a600:	009b      	lsls	r3, r3, #2
 801a602:	440b      	add	r3, r1
 801a604:	334c      	adds	r3, #76	@ 0x4c
 801a606:	2204      	movs	r2, #4
 801a608:	701a      	strb	r2, [r3, #0]
 801a60a:	e014      	b.n	801a636 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 801a60c:	78fa      	ldrb	r2, [r7, #3]
 801a60e:	6879      	ldr	r1, [r7, #4]
 801a610:	4613      	mov	r3, r2
 801a612:	011b      	lsls	r3, r3, #4
 801a614:	1a9b      	subs	r3, r3, r2
 801a616:	009b      	lsls	r3, r3, #2
 801a618:	440b      	add	r3, r1
 801a61a:	334c      	adds	r3, #76	@ 0x4c
 801a61c:	2202      	movs	r2, #2
 801a61e:	701a      	strb	r2, [r3, #0]
 801a620:	e009      	b.n	801a636 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 801a622:	78fa      	ldrb	r2, [r7, #3]
 801a624:	6879      	ldr	r1, [r7, #4]
 801a626:	4613      	mov	r3, r2
 801a628:	011b      	lsls	r3, r3, #4
 801a62a:	1a9b      	subs	r3, r3, r2
 801a62c:	009b      	lsls	r3, r3, #2
 801a62e:	440b      	add	r3, r1
 801a630:	334c      	adds	r3, #76	@ 0x4c
 801a632:	2202      	movs	r2, #2
 801a634:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 801a636:	78fa      	ldrb	r2, [r7, #3]
 801a638:	6879      	ldr	r1, [r7, #4]
 801a63a:	4613      	mov	r3, r2
 801a63c:	011b      	lsls	r3, r3, #4
 801a63e:	1a9b      	subs	r3, r3, r2
 801a640:	009b      	lsls	r3, r3, #2
 801a642:	440b      	add	r3, r1
 801a644:	3326      	adds	r3, #38	@ 0x26
 801a646:	781b      	ldrb	r3, [r3, #0]
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d00b      	beq.n	801a664 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 801a64c:	78fa      	ldrb	r2, [r7, #3]
 801a64e:	6879      	ldr	r1, [r7, #4]
 801a650:	4613      	mov	r3, r2
 801a652:	011b      	lsls	r3, r3, #4
 801a654:	1a9b      	subs	r3, r3, r2
 801a656:	009b      	lsls	r3, r3, #2
 801a658:	440b      	add	r3, r1
 801a65a:	3326      	adds	r3, #38	@ 0x26
 801a65c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 801a65e:	2b02      	cmp	r3, #2
 801a660:	f040 8136 	bne.w	801a8d0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 801a664:	78fb      	ldrb	r3, [r7, #3]
 801a666:	015a      	lsls	r2, r3, #5
 801a668:	693b      	ldr	r3, [r7, #16]
 801a66a:	4413      	add	r3, r2
 801a66c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801a674:	68fb      	ldr	r3, [r7, #12]
 801a676:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801a67a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 801a67c:	68fb      	ldr	r3, [r7, #12]
 801a67e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801a682:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 801a684:	78fb      	ldrb	r3, [r7, #3]
 801a686:	015a      	lsls	r2, r3, #5
 801a688:	693b      	ldr	r3, [r7, #16]
 801a68a:	4413      	add	r3, r2
 801a68c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801a690:	461a      	mov	r2, r3
 801a692:	68fb      	ldr	r3, [r7, #12]
 801a694:	6013      	str	r3, [r2, #0]
 801a696:	e11b      	b.n	801a8d0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 801a698:	78fa      	ldrb	r2, [r7, #3]
 801a69a:	6879      	ldr	r1, [r7, #4]
 801a69c:	4613      	mov	r3, r2
 801a69e:	011b      	lsls	r3, r3, #4
 801a6a0:	1a9b      	subs	r3, r3, r2
 801a6a2:	009b      	lsls	r3, r3, #2
 801a6a4:	440b      	add	r3, r1
 801a6a6:	334d      	adds	r3, #77	@ 0x4d
 801a6a8:	781b      	ldrb	r3, [r3, #0]
 801a6aa:	2b03      	cmp	r3, #3
 801a6ac:	f040 8081 	bne.w	801a7b2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 801a6b0:	78fa      	ldrb	r2, [r7, #3]
 801a6b2:	6879      	ldr	r1, [r7, #4]
 801a6b4:	4613      	mov	r3, r2
 801a6b6:	011b      	lsls	r3, r3, #4
 801a6b8:	1a9b      	subs	r3, r3, r2
 801a6ba:	009b      	lsls	r3, r3, #2
 801a6bc:	440b      	add	r3, r1
 801a6be:	334d      	adds	r3, #77	@ 0x4d
 801a6c0:	2202      	movs	r2, #2
 801a6c2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 801a6c4:	78fa      	ldrb	r2, [r7, #3]
 801a6c6:	6879      	ldr	r1, [r7, #4]
 801a6c8:	4613      	mov	r3, r2
 801a6ca:	011b      	lsls	r3, r3, #4
 801a6cc:	1a9b      	subs	r3, r3, r2
 801a6ce:	009b      	lsls	r3, r3, #2
 801a6d0:	440b      	add	r3, r1
 801a6d2:	331b      	adds	r3, #27
 801a6d4:	781b      	ldrb	r3, [r3, #0]
 801a6d6:	2b01      	cmp	r3, #1
 801a6d8:	f040 80fa 	bne.w	801a8d0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 801a6dc:	78fa      	ldrb	r2, [r7, #3]
 801a6de:	6879      	ldr	r1, [r7, #4]
 801a6e0:	4613      	mov	r3, r2
 801a6e2:	011b      	lsls	r3, r3, #4
 801a6e4:	1a9b      	subs	r3, r3, r2
 801a6e6:	009b      	lsls	r3, r3, #2
 801a6e8:	440b      	add	r3, r1
 801a6ea:	334c      	adds	r3, #76	@ 0x4c
 801a6ec:	2202      	movs	r2, #2
 801a6ee:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 801a6f0:	78fb      	ldrb	r3, [r7, #3]
 801a6f2:	015a      	lsls	r2, r3, #5
 801a6f4:	693b      	ldr	r3, [r7, #16]
 801a6f6:	4413      	add	r3, r2
 801a6f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801a6fc:	685b      	ldr	r3, [r3, #4]
 801a6fe:	78fa      	ldrb	r2, [r7, #3]
 801a700:	0151      	lsls	r1, r2, #5
 801a702:	693a      	ldr	r2, [r7, #16]
 801a704:	440a      	add	r2, r1
 801a706:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801a70a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801a70e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 801a710:	78fb      	ldrb	r3, [r7, #3]
 801a712:	015a      	lsls	r2, r3, #5
 801a714:	693b      	ldr	r3, [r7, #16]
 801a716:	4413      	add	r3, r2
 801a718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801a71c:	68db      	ldr	r3, [r3, #12]
 801a71e:	78fa      	ldrb	r2, [r7, #3]
 801a720:	0151      	lsls	r1, r2, #5
 801a722:	693a      	ldr	r2, [r7, #16]
 801a724:	440a      	add	r2, r1
 801a726:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801a72a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a72e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 801a730:	78fb      	ldrb	r3, [r7, #3]
 801a732:	015a      	lsls	r2, r3, #5
 801a734:	693b      	ldr	r3, [r7, #16]
 801a736:	4413      	add	r3, r2
 801a738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801a73c:	68db      	ldr	r3, [r3, #12]
 801a73e:	78fa      	ldrb	r2, [r7, #3]
 801a740:	0151      	lsls	r1, r2, #5
 801a742:	693a      	ldr	r2, [r7, #16]
 801a744:	440a      	add	r2, r1
 801a746:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801a74a:	f023 0320 	bic.w	r3, r3, #32
 801a74e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 801a750:	78fa      	ldrb	r2, [r7, #3]
 801a752:	6879      	ldr	r1, [r7, #4]
 801a754:	4613      	mov	r3, r2
 801a756:	011b      	lsls	r3, r3, #4
 801a758:	1a9b      	subs	r3, r3, r2
 801a75a:	009b      	lsls	r3, r3, #2
 801a75c:	440b      	add	r3, r1
 801a75e:	3326      	adds	r3, #38	@ 0x26
 801a760:	781b      	ldrb	r3, [r3, #0]
 801a762:	2b00      	cmp	r3, #0
 801a764:	d00b      	beq.n	801a77e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 801a766:	78fa      	ldrb	r2, [r7, #3]
 801a768:	6879      	ldr	r1, [r7, #4]
 801a76a:	4613      	mov	r3, r2
 801a76c:	011b      	lsls	r3, r3, #4
 801a76e:	1a9b      	subs	r3, r3, r2
 801a770:	009b      	lsls	r3, r3, #2
 801a772:	440b      	add	r3, r1
 801a774:	3326      	adds	r3, #38	@ 0x26
 801a776:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 801a778:	2b02      	cmp	r3, #2
 801a77a:	f040 80a9 	bne.w	801a8d0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 801a77e:	78fb      	ldrb	r3, [r7, #3]
 801a780:	015a      	lsls	r2, r3, #5
 801a782:	693b      	ldr	r3, [r7, #16]
 801a784:	4413      	add	r3, r2
 801a786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801a78a:	681b      	ldr	r3, [r3, #0]
 801a78c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801a78e:	68fb      	ldr	r3, [r7, #12]
 801a790:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801a794:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 801a796:	68fb      	ldr	r3, [r7, #12]
 801a798:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801a79c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 801a79e:	78fb      	ldrb	r3, [r7, #3]
 801a7a0:	015a      	lsls	r2, r3, #5
 801a7a2:	693b      	ldr	r3, [r7, #16]
 801a7a4:	4413      	add	r3, r2
 801a7a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801a7aa:	461a      	mov	r2, r3
 801a7ac:	68fb      	ldr	r3, [r7, #12]
 801a7ae:	6013      	str	r3, [r2, #0]
 801a7b0:	e08e      	b.n	801a8d0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 801a7b2:	78fa      	ldrb	r2, [r7, #3]
 801a7b4:	6879      	ldr	r1, [r7, #4]
 801a7b6:	4613      	mov	r3, r2
 801a7b8:	011b      	lsls	r3, r3, #4
 801a7ba:	1a9b      	subs	r3, r3, r2
 801a7bc:	009b      	lsls	r3, r3, #2
 801a7be:	440b      	add	r3, r1
 801a7c0:	334d      	adds	r3, #77	@ 0x4d
 801a7c2:	781b      	ldrb	r3, [r3, #0]
 801a7c4:	2b04      	cmp	r3, #4
 801a7c6:	d143      	bne.n	801a850 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 801a7c8:	78fa      	ldrb	r2, [r7, #3]
 801a7ca:	6879      	ldr	r1, [r7, #4]
 801a7cc:	4613      	mov	r3, r2
 801a7ce:	011b      	lsls	r3, r3, #4
 801a7d0:	1a9b      	subs	r3, r3, r2
 801a7d2:	009b      	lsls	r3, r3, #2
 801a7d4:	440b      	add	r3, r1
 801a7d6:	334d      	adds	r3, #77	@ 0x4d
 801a7d8:	2202      	movs	r2, #2
 801a7da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 801a7dc:	78fa      	ldrb	r2, [r7, #3]
 801a7de:	6879      	ldr	r1, [r7, #4]
 801a7e0:	4613      	mov	r3, r2
 801a7e2:	011b      	lsls	r3, r3, #4
 801a7e4:	1a9b      	subs	r3, r3, r2
 801a7e6:	009b      	lsls	r3, r3, #2
 801a7e8:	440b      	add	r3, r1
 801a7ea:	334c      	adds	r3, #76	@ 0x4c
 801a7ec:	2202      	movs	r2, #2
 801a7ee:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 801a7f0:	78fa      	ldrb	r2, [r7, #3]
 801a7f2:	6879      	ldr	r1, [r7, #4]
 801a7f4:	4613      	mov	r3, r2
 801a7f6:	011b      	lsls	r3, r3, #4
 801a7f8:	1a9b      	subs	r3, r3, r2
 801a7fa:	009b      	lsls	r3, r3, #2
 801a7fc:	440b      	add	r3, r1
 801a7fe:	3326      	adds	r3, #38	@ 0x26
 801a800:	781b      	ldrb	r3, [r3, #0]
 801a802:	2b00      	cmp	r3, #0
 801a804:	d00a      	beq.n	801a81c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 801a806:	78fa      	ldrb	r2, [r7, #3]
 801a808:	6879      	ldr	r1, [r7, #4]
 801a80a:	4613      	mov	r3, r2
 801a80c:	011b      	lsls	r3, r3, #4
 801a80e:	1a9b      	subs	r3, r3, r2
 801a810:	009b      	lsls	r3, r3, #2
 801a812:	440b      	add	r3, r1
 801a814:	3326      	adds	r3, #38	@ 0x26
 801a816:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 801a818:	2b02      	cmp	r3, #2
 801a81a:	d159      	bne.n	801a8d0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 801a81c:	78fb      	ldrb	r3, [r7, #3]
 801a81e:	015a      	lsls	r2, r3, #5
 801a820:	693b      	ldr	r3, [r7, #16]
 801a822:	4413      	add	r3, r2
 801a824:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801a82c:	68fb      	ldr	r3, [r7, #12]
 801a82e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801a832:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 801a834:	68fb      	ldr	r3, [r7, #12]
 801a836:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801a83a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 801a83c:	78fb      	ldrb	r3, [r7, #3]
 801a83e:	015a      	lsls	r2, r3, #5
 801a840:	693b      	ldr	r3, [r7, #16]
 801a842:	4413      	add	r3, r2
 801a844:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801a848:	461a      	mov	r2, r3
 801a84a:	68fb      	ldr	r3, [r7, #12]
 801a84c:	6013      	str	r3, [r2, #0]
 801a84e:	e03f      	b.n	801a8d0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 801a850:	78fa      	ldrb	r2, [r7, #3]
 801a852:	6879      	ldr	r1, [r7, #4]
 801a854:	4613      	mov	r3, r2
 801a856:	011b      	lsls	r3, r3, #4
 801a858:	1a9b      	subs	r3, r3, r2
 801a85a:	009b      	lsls	r3, r3, #2
 801a85c:	440b      	add	r3, r1
 801a85e:	334d      	adds	r3, #77	@ 0x4d
 801a860:	781b      	ldrb	r3, [r3, #0]
 801a862:	2b08      	cmp	r3, #8
 801a864:	d126      	bne.n	801a8b4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 801a866:	78fa      	ldrb	r2, [r7, #3]
 801a868:	6879      	ldr	r1, [r7, #4]
 801a86a:	4613      	mov	r3, r2
 801a86c:	011b      	lsls	r3, r3, #4
 801a86e:	1a9b      	subs	r3, r3, r2
 801a870:	009b      	lsls	r3, r3, #2
 801a872:	440b      	add	r3, r1
 801a874:	334d      	adds	r3, #77	@ 0x4d
 801a876:	2202      	movs	r2, #2
 801a878:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 801a87a:	78fa      	ldrb	r2, [r7, #3]
 801a87c:	6879      	ldr	r1, [r7, #4]
 801a87e:	4613      	mov	r3, r2
 801a880:	011b      	lsls	r3, r3, #4
 801a882:	1a9b      	subs	r3, r3, r2
 801a884:	009b      	lsls	r3, r3, #2
 801a886:	440b      	add	r3, r1
 801a888:	3344      	adds	r3, #68	@ 0x44
 801a88a:	681b      	ldr	r3, [r3, #0]
 801a88c:	1c59      	adds	r1, r3, #1
 801a88e:	6878      	ldr	r0, [r7, #4]
 801a890:	4613      	mov	r3, r2
 801a892:	011b      	lsls	r3, r3, #4
 801a894:	1a9b      	subs	r3, r3, r2
 801a896:	009b      	lsls	r3, r3, #2
 801a898:	4403      	add	r3, r0
 801a89a:	3344      	adds	r3, #68	@ 0x44
 801a89c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 801a89e:	78fa      	ldrb	r2, [r7, #3]
 801a8a0:	6879      	ldr	r1, [r7, #4]
 801a8a2:	4613      	mov	r3, r2
 801a8a4:	011b      	lsls	r3, r3, #4
 801a8a6:	1a9b      	subs	r3, r3, r2
 801a8a8:	009b      	lsls	r3, r3, #2
 801a8aa:	440b      	add	r3, r1
 801a8ac:	334c      	adds	r3, #76	@ 0x4c
 801a8ae:	2204      	movs	r2, #4
 801a8b0:	701a      	strb	r2, [r3, #0]
 801a8b2:	e00d      	b.n	801a8d0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 801a8b4:	78fa      	ldrb	r2, [r7, #3]
 801a8b6:	6879      	ldr	r1, [r7, #4]
 801a8b8:	4613      	mov	r3, r2
 801a8ba:	011b      	lsls	r3, r3, #4
 801a8bc:	1a9b      	subs	r3, r3, r2
 801a8be:	009b      	lsls	r3, r3, #2
 801a8c0:	440b      	add	r3, r1
 801a8c2:	334d      	adds	r3, #77	@ 0x4d
 801a8c4:	781b      	ldrb	r3, [r3, #0]
 801a8c6:	2b02      	cmp	r3, #2
 801a8c8:	f000 8100 	beq.w	801aacc <HCD_HC_IN_IRQHandler+0xcca>
 801a8cc:	e000      	b.n	801a8d0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 801a8ce:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 801a8d0:	78fa      	ldrb	r2, [r7, #3]
 801a8d2:	6879      	ldr	r1, [r7, #4]
 801a8d4:	4613      	mov	r3, r2
 801a8d6:	011b      	lsls	r3, r3, #4
 801a8d8:	1a9b      	subs	r3, r3, r2
 801a8da:	009b      	lsls	r3, r3, #2
 801a8dc:	440b      	add	r3, r1
 801a8de:	334c      	adds	r3, #76	@ 0x4c
 801a8e0:	781a      	ldrb	r2, [r3, #0]
 801a8e2:	78fb      	ldrb	r3, [r7, #3]
 801a8e4:	4619      	mov	r1, r3
 801a8e6:	6878      	ldr	r0, [r7, #4]
 801a8e8:	f00f fc3e 	bl	802a168 <HAL_HCD_HC_NotifyURBChange_Callback>
 801a8ec:	e0ef      	b.n	801aace <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 801a8ee:	687b      	ldr	r3, [r7, #4]
 801a8f0:	681b      	ldr	r3, [r3, #0]
 801a8f2:	78fa      	ldrb	r2, [r7, #3]
 801a8f4:	4611      	mov	r1, r2
 801a8f6:	4618      	mov	r0, r3
 801a8f8:	f004 fa73 	bl	801ede2 <USB_ReadChInterrupts>
 801a8fc:	4603      	mov	r3, r0
 801a8fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a902:	2b40      	cmp	r3, #64	@ 0x40
 801a904:	d12f      	bne.n	801a966 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 801a906:	78fb      	ldrb	r3, [r7, #3]
 801a908:	015a      	lsls	r2, r3, #5
 801a90a:	693b      	ldr	r3, [r7, #16]
 801a90c:	4413      	add	r3, r2
 801a90e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801a912:	461a      	mov	r2, r3
 801a914:	2340      	movs	r3, #64	@ 0x40
 801a916:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 801a918:	78fa      	ldrb	r2, [r7, #3]
 801a91a:	6879      	ldr	r1, [r7, #4]
 801a91c:	4613      	mov	r3, r2
 801a91e:	011b      	lsls	r3, r3, #4
 801a920:	1a9b      	subs	r3, r3, r2
 801a922:	009b      	lsls	r3, r3, #2
 801a924:	440b      	add	r3, r1
 801a926:	334d      	adds	r3, #77	@ 0x4d
 801a928:	2205      	movs	r2, #5
 801a92a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 801a92c:	78fa      	ldrb	r2, [r7, #3]
 801a92e:	6879      	ldr	r1, [r7, #4]
 801a930:	4613      	mov	r3, r2
 801a932:	011b      	lsls	r3, r3, #4
 801a934:	1a9b      	subs	r3, r3, r2
 801a936:	009b      	lsls	r3, r3, #2
 801a938:	440b      	add	r3, r1
 801a93a:	331a      	adds	r3, #26
 801a93c:	781b      	ldrb	r3, [r3, #0]
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d109      	bne.n	801a956 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 801a942:	78fa      	ldrb	r2, [r7, #3]
 801a944:	6879      	ldr	r1, [r7, #4]
 801a946:	4613      	mov	r3, r2
 801a948:	011b      	lsls	r3, r3, #4
 801a94a:	1a9b      	subs	r3, r3, r2
 801a94c:	009b      	lsls	r3, r3, #2
 801a94e:	440b      	add	r3, r1
 801a950:	3344      	adds	r3, #68	@ 0x44
 801a952:	2200      	movs	r2, #0
 801a954:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	681b      	ldr	r3, [r3, #0]
 801a95a:	78fa      	ldrb	r2, [r7, #3]
 801a95c:	4611      	mov	r1, r2
 801a95e:	4618      	mov	r0, r3
 801a960:	f004 ffd7 	bl	801f912 <USB_HC_Halt>
 801a964:	e0b3      	b.n	801aace <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	681b      	ldr	r3, [r3, #0]
 801a96a:	78fa      	ldrb	r2, [r7, #3]
 801a96c:	4611      	mov	r1, r2
 801a96e:	4618      	mov	r0, r3
 801a970:	f004 fa37 	bl	801ede2 <USB_ReadChInterrupts>
 801a974:	4603      	mov	r3, r0
 801a976:	f003 0310 	and.w	r3, r3, #16
 801a97a:	2b10      	cmp	r3, #16
 801a97c:	f040 80a7 	bne.w	801aace <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 801a980:	78fa      	ldrb	r2, [r7, #3]
 801a982:	6879      	ldr	r1, [r7, #4]
 801a984:	4613      	mov	r3, r2
 801a986:	011b      	lsls	r3, r3, #4
 801a988:	1a9b      	subs	r3, r3, r2
 801a98a:	009b      	lsls	r3, r3, #2
 801a98c:	440b      	add	r3, r1
 801a98e:	3326      	adds	r3, #38	@ 0x26
 801a990:	781b      	ldrb	r3, [r3, #0]
 801a992:	2b03      	cmp	r3, #3
 801a994:	d11b      	bne.n	801a9ce <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 801a996:	78fa      	ldrb	r2, [r7, #3]
 801a998:	6879      	ldr	r1, [r7, #4]
 801a99a:	4613      	mov	r3, r2
 801a99c:	011b      	lsls	r3, r3, #4
 801a99e:	1a9b      	subs	r3, r3, r2
 801a9a0:	009b      	lsls	r3, r3, #2
 801a9a2:	440b      	add	r3, r1
 801a9a4:	3344      	adds	r3, #68	@ 0x44
 801a9a6:	2200      	movs	r2, #0
 801a9a8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 801a9aa:	78fa      	ldrb	r2, [r7, #3]
 801a9ac:	6879      	ldr	r1, [r7, #4]
 801a9ae:	4613      	mov	r3, r2
 801a9b0:	011b      	lsls	r3, r3, #4
 801a9b2:	1a9b      	subs	r3, r3, r2
 801a9b4:	009b      	lsls	r3, r3, #2
 801a9b6:	440b      	add	r3, r1
 801a9b8:	334d      	adds	r3, #77	@ 0x4d
 801a9ba:	2204      	movs	r2, #4
 801a9bc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	681b      	ldr	r3, [r3, #0]
 801a9c2:	78fa      	ldrb	r2, [r7, #3]
 801a9c4:	4611      	mov	r1, r2
 801a9c6:	4618      	mov	r0, r3
 801a9c8:	f004 ffa3 	bl	801f912 <USB_HC_Halt>
 801a9cc:	e03f      	b.n	801aa4e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 801a9ce:	78fa      	ldrb	r2, [r7, #3]
 801a9d0:	6879      	ldr	r1, [r7, #4]
 801a9d2:	4613      	mov	r3, r2
 801a9d4:	011b      	lsls	r3, r3, #4
 801a9d6:	1a9b      	subs	r3, r3, r2
 801a9d8:	009b      	lsls	r3, r3, #2
 801a9da:	440b      	add	r3, r1
 801a9dc:	3326      	adds	r3, #38	@ 0x26
 801a9de:	781b      	ldrb	r3, [r3, #0]
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	d00a      	beq.n	801a9fa <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 801a9e4:	78fa      	ldrb	r2, [r7, #3]
 801a9e6:	6879      	ldr	r1, [r7, #4]
 801a9e8:	4613      	mov	r3, r2
 801a9ea:	011b      	lsls	r3, r3, #4
 801a9ec:	1a9b      	subs	r3, r3, r2
 801a9ee:	009b      	lsls	r3, r3, #2
 801a9f0:	440b      	add	r3, r1
 801a9f2:	3326      	adds	r3, #38	@ 0x26
 801a9f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 801a9f6:	2b02      	cmp	r3, #2
 801a9f8:	d129      	bne.n	801aa4e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 801a9fa:	78fa      	ldrb	r2, [r7, #3]
 801a9fc:	6879      	ldr	r1, [r7, #4]
 801a9fe:	4613      	mov	r3, r2
 801aa00:	011b      	lsls	r3, r3, #4
 801aa02:	1a9b      	subs	r3, r3, r2
 801aa04:	009b      	lsls	r3, r3, #2
 801aa06:	440b      	add	r3, r1
 801aa08:	3344      	adds	r3, #68	@ 0x44
 801aa0a:	2200      	movs	r2, #0
 801aa0c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	799b      	ldrb	r3, [r3, #6]
 801aa12:	2b00      	cmp	r3, #0
 801aa14:	d00a      	beq.n	801aa2c <HCD_HC_IN_IRQHandler+0xc2a>
 801aa16:	78fa      	ldrb	r2, [r7, #3]
 801aa18:	6879      	ldr	r1, [r7, #4]
 801aa1a:	4613      	mov	r3, r2
 801aa1c:	011b      	lsls	r3, r3, #4
 801aa1e:	1a9b      	subs	r3, r3, r2
 801aa20:	009b      	lsls	r3, r3, #2
 801aa22:	440b      	add	r3, r1
 801aa24:	331b      	adds	r3, #27
 801aa26:	781b      	ldrb	r3, [r3, #0]
 801aa28:	2b01      	cmp	r3, #1
 801aa2a:	d110      	bne.n	801aa4e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 801aa2c:	78fa      	ldrb	r2, [r7, #3]
 801aa2e:	6879      	ldr	r1, [r7, #4]
 801aa30:	4613      	mov	r3, r2
 801aa32:	011b      	lsls	r3, r3, #4
 801aa34:	1a9b      	subs	r3, r3, r2
 801aa36:	009b      	lsls	r3, r3, #2
 801aa38:	440b      	add	r3, r1
 801aa3a:	334d      	adds	r3, #77	@ 0x4d
 801aa3c:	2204      	movs	r2, #4
 801aa3e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	681b      	ldr	r3, [r3, #0]
 801aa44:	78fa      	ldrb	r2, [r7, #3]
 801aa46:	4611      	mov	r1, r2
 801aa48:	4618      	mov	r0, r3
 801aa4a:	f004 ff62 	bl	801f912 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 801aa4e:	78fa      	ldrb	r2, [r7, #3]
 801aa50:	6879      	ldr	r1, [r7, #4]
 801aa52:	4613      	mov	r3, r2
 801aa54:	011b      	lsls	r3, r3, #4
 801aa56:	1a9b      	subs	r3, r3, r2
 801aa58:	009b      	lsls	r3, r3, #2
 801aa5a:	440b      	add	r3, r1
 801aa5c:	331b      	adds	r3, #27
 801aa5e:	781b      	ldrb	r3, [r3, #0]
 801aa60:	2b01      	cmp	r3, #1
 801aa62:	d129      	bne.n	801aab8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 801aa64:	78fa      	ldrb	r2, [r7, #3]
 801aa66:	6879      	ldr	r1, [r7, #4]
 801aa68:	4613      	mov	r3, r2
 801aa6a:	011b      	lsls	r3, r3, #4
 801aa6c:	1a9b      	subs	r3, r3, r2
 801aa6e:	009b      	lsls	r3, r3, #2
 801aa70:	440b      	add	r3, r1
 801aa72:	331b      	adds	r3, #27
 801aa74:	2200      	movs	r2, #0
 801aa76:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 801aa78:	78fb      	ldrb	r3, [r7, #3]
 801aa7a:	015a      	lsls	r2, r3, #5
 801aa7c:	693b      	ldr	r3, [r7, #16]
 801aa7e:	4413      	add	r3, r2
 801aa80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801aa84:	685b      	ldr	r3, [r3, #4]
 801aa86:	78fa      	ldrb	r2, [r7, #3]
 801aa88:	0151      	lsls	r1, r2, #5
 801aa8a:	693a      	ldr	r2, [r7, #16]
 801aa8c:	440a      	add	r2, r1
 801aa8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801aa92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801aa96:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 801aa98:	78fb      	ldrb	r3, [r7, #3]
 801aa9a:	015a      	lsls	r2, r3, #5
 801aa9c:	693b      	ldr	r3, [r7, #16]
 801aa9e:	4413      	add	r3, r2
 801aaa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801aaa4:	68db      	ldr	r3, [r3, #12]
 801aaa6:	78fa      	ldrb	r2, [r7, #3]
 801aaa8:	0151      	lsls	r1, r2, #5
 801aaaa:	693a      	ldr	r2, [r7, #16]
 801aaac:	440a      	add	r2, r1
 801aaae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801aab2:	f043 0320 	orr.w	r3, r3, #32
 801aab6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 801aab8:	78fb      	ldrb	r3, [r7, #3]
 801aaba:	015a      	lsls	r2, r3, #5
 801aabc:	693b      	ldr	r3, [r7, #16]
 801aabe:	4413      	add	r3, r2
 801aac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801aac4:	461a      	mov	r2, r3
 801aac6:	2310      	movs	r3, #16
 801aac8:	6093      	str	r3, [r2, #8]
 801aaca:	e000      	b.n	801aace <HCD_HC_IN_IRQHandler+0xccc>
        return;
 801aacc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 801aace:	3718      	adds	r7, #24
 801aad0:	46bd      	mov	sp, r7
 801aad2:	bd80      	pop	{r7, pc}

0801aad4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 801aad4:	b580      	push	{r7, lr}
 801aad6:	b086      	sub	sp, #24
 801aad8:	af00      	add	r7, sp, #0
 801aada:	6078      	str	r0, [r7, #4]
 801aadc:	460b      	mov	r3, r1
 801aade:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	681b      	ldr	r3, [r3, #0]
 801aae4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801aae6:	697b      	ldr	r3, [r7, #20]
 801aae8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	681b      	ldr	r3, [r3, #0]
 801aaee:	78fa      	ldrb	r2, [r7, #3]
 801aaf0:	4611      	mov	r1, r2
 801aaf2:	4618      	mov	r0, r3
 801aaf4:	f004 f975 	bl	801ede2 <USB_ReadChInterrupts>
 801aaf8:	4603      	mov	r3, r0
 801aafa:	f003 0304 	and.w	r3, r3, #4
 801aafe:	2b04      	cmp	r3, #4
 801ab00:	d11b      	bne.n	801ab3a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 801ab02:	78fb      	ldrb	r3, [r7, #3]
 801ab04:	015a      	lsls	r2, r3, #5
 801ab06:	693b      	ldr	r3, [r7, #16]
 801ab08:	4413      	add	r3, r2
 801ab0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801ab0e:	461a      	mov	r2, r3
 801ab10:	2304      	movs	r3, #4
 801ab12:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 801ab14:	78fa      	ldrb	r2, [r7, #3]
 801ab16:	6879      	ldr	r1, [r7, #4]
 801ab18:	4613      	mov	r3, r2
 801ab1a:	011b      	lsls	r3, r3, #4
 801ab1c:	1a9b      	subs	r3, r3, r2
 801ab1e:	009b      	lsls	r3, r3, #2
 801ab20:	440b      	add	r3, r1
 801ab22:	334d      	adds	r3, #77	@ 0x4d
 801ab24:	2207      	movs	r2, #7
 801ab26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	78fa      	ldrb	r2, [r7, #3]
 801ab2e:	4611      	mov	r1, r2
 801ab30:	4618      	mov	r0, r3
 801ab32:	f004 feee 	bl	801f912 <USB_HC_Halt>
 801ab36:	f000 bc6f 	b.w	801b418 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	681b      	ldr	r3, [r3, #0]
 801ab3e:	78fa      	ldrb	r2, [r7, #3]
 801ab40:	4611      	mov	r1, r2
 801ab42:	4618      	mov	r0, r3
 801ab44:	f004 f94d 	bl	801ede2 <USB_ReadChInterrupts>
 801ab48:	4603      	mov	r3, r0
 801ab4a:	f003 0320 	and.w	r3, r3, #32
 801ab4e:	2b20      	cmp	r3, #32
 801ab50:	f040 8082 	bne.w	801ac58 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 801ab54:	78fb      	ldrb	r3, [r7, #3]
 801ab56:	015a      	lsls	r2, r3, #5
 801ab58:	693b      	ldr	r3, [r7, #16]
 801ab5a:	4413      	add	r3, r2
 801ab5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801ab60:	461a      	mov	r2, r3
 801ab62:	2320      	movs	r3, #32
 801ab64:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 801ab66:	78fa      	ldrb	r2, [r7, #3]
 801ab68:	6879      	ldr	r1, [r7, #4]
 801ab6a:	4613      	mov	r3, r2
 801ab6c:	011b      	lsls	r3, r3, #4
 801ab6e:	1a9b      	subs	r3, r3, r2
 801ab70:	009b      	lsls	r3, r3, #2
 801ab72:	440b      	add	r3, r1
 801ab74:	3319      	adds	r3, #25
 801ab76:	781b      	ldrb	r3, [r3, #0]
 801ab78:	2b01      	cmp	r3, #1
 801ab7a:	d124      	bne.n	801abc6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 801ab7c:	78fa      	ldrb	r2, [r7, #3]
 801ab7e:	6879      	ldr	r1, [r7, #4]
 801ab80:	4613      	mov	r3, r2
 801ab82:	011b      	lsls	r3, r3, #4
 801ab84:	1a9b      	subs	r3, r3, r2
 801ab86:	009b      	lsls	r3, r3, #2
 801ab88:	440b      	add	r3, r1
 801ab8a:	3319      	adds	r3, #25
 801ab8c:	2200      	movs	r2, #0
 801ab8e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 801ab90:	78fa      	ldrb	r2, [r7, #3]
 801ab92:	6879      	ldr	r1, [r7, #4]
 801ab94:	4613      	mov	r3, r2
 801ab96:	011b      	lsls	r3, r3, #4
 801ab98:	1a9b      	subs	r3, r3, r2
 801ab9a:	009b      	lsls	r3, r3, #2
 801ab9c:	440b      	add	r3, r1
 801ab9e:	334c      	adds	r3, #76	@ 0x4c
 801aba0:	2202      	movs	r2, #2
 801aba2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 801aba4:	78fa      	ldrb	r2, [r7, #3]
 801aba6:	6879      	ldr	r1, [r7, #4]
 801aba8:	4613      	mov	r3, r2
 801abaa:	011b      	lsls	r3, r3, #4
 801abac:	1a9b      	subs	r3, r3, r2
 801abae:	009b      	lsls	r3, r3, #2
 801abb0:	440b      	add	r3, r1
 801abb2:	334d      	adds	r3, #77	@ 0x4d
 801abb4:	2203      	movs	r2, #3
 801abb6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	78fa      	ldrb	r2, [r7, #3]
 801abbe:	4611      	mov	r1, r2
 801abc0:	4618      	mov	r0, r3
 801abc2:	f004 fea6 	bl	801f912 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 801abc6:	78fa      	ldrb	r2, [r7, #3]
 801abc8:	6879      	ldr	r1, [r7, #4]
 801abca:	4613      	mov	r3, r2
 801abcc:	011b      	lsls	r3, r3, #4
 801abce:	1a9b      	subs	r3, r3, r2
 801abd0:	009b      	lsls	r3, r3, #2
 801abd2:	440b      	add	r3, r1
 801abd4:	331a      	adds	r3, #26
 801abd6:	781b      	ldrb	r3, [r3, #0]
 801abd8:	2b01      	cmp	r3, #1
 801abda:	f040 841d 	bne.w	801b418 <HCD_HC_OUT_IRQHandler+0x944>
 801abde:	78fa      	ldrb	r2, [r7, #3]
 801abe0:	6879      	ldr	r1, [r7, #4]
 801abe2:	4613      	mov	r3, r2
 801abe4:	011b      	lsls	r3, r3, #4
 801abe6:	1a9b      	subs	r3, r3, r2
 801abe8:	009b      	lsls	r3, r3, #2
 801abea:	440b      	add	r3, r1
 801abec:	331b      	adds	r3, #27
 801abee:	781b      	ldrb	r3, [r3, #0]
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	f040 8411 	bne.w	801b418 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 801abf6:	78fa      	ldrb	r2, [r7, #3]
 801abf8:	6879      	ldr	r1, [r7, #4]
 801abfa:	4613      	mov	r3, r2
 801abfc:	011b      	lsls	r3, r3, #4
 801abfe:	1a9b      	subs	r3, r3, r2
 801ac00:	009b      	lsls	r3, r3, #2
 801ac02:	440b      	add	r3, r1
 801ac04:	3326      	adds	r3, #38	@ 0x26
 801ac06:	781b      	ldrb	r3, [r3, #0]
 801ac08:	2b01      	cmp	r3, #1
 801ac0a:	d009      	beq.n	801ac20 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 801ac0c:	78fa      	ldrb	r2, [r7, #3]
 801ac0e:	6879      	ldr	r1, [r7, #4]
 801ac10:	4613      	mov	r3, r2
 801ac12:	011b      	lsls	r3, r3, #4
 801ac14:	1a9b      	subs	r3, r3, r2
 801ac16:	009b      	lsls	r3, r3, #2
 801ac18:	440b      	add	r3, r1
 801ac1a:	331b      	adds	r3, #27
 801ac1c:	2201      	movs	r2, #1
 801ac1e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 801ac20:	78fa      	ldrb	r2, [r7, #3]
 801ac22:	6879      	ldr	r1, [r7, #4]
 801ac24:	4613      	mov	r3, r2
 801ac26:	011b      	lsls	r3, r3, #4
 801ac28:	1a9b      	subs	r3, r3, r2
 801ac2a:	009b      	lsls	r3, r3, #2
 801ac2c:	440b      	add	r3, r1
 801ac2e:	334d      	adds	r3, #77	@ 0x4d
 801ac30:	2203      	movs	r2, #3
 801ac32:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	681b      	ldr	r3, [r3, #0]
 801ac38:	78fa      	ldrb	r2, [r7, #3]
 801ac3a:	4611      	mov	r1, r2
 801ac3c:	4618      	mov	r0, r3
 801ac3e:	f004 fe68 	bl	801f912 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 801ac42:	78fa      	ldrb	r2, [r7, #3]
 801ac44:	6879      	ldr	r1, [r7, #4]
 801ac46:	4613      	mov	r3, r2
 801ac48:	011b      	lsls	r3, r3, #4
 801ac4a:	1a9b      	subs	r3, r3, r2
 801ac4c:	009b      	lsls	r3, r3, #2
 801ac4e:	440b      	add	r3, r1
 801ac50:	3344      	adds	r3, #68	@ 0x44
 801ac52:	2200      	movs	r2, #0
 801ac54:	601a      	str	r2, [r3, #0]
 801ac56:	e3df      	b.n	801b418 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	681b      	ldr	r3, [r3, #0]
 801ac5c:	78fa      	ldrb	r2, [r7, #3]
 801ac5e:	4611      	mov	r1, r2
 801ac60:	4618      	mov	r0, r3
 801ac62:	f004 f8be 	bl	801ede2 <USB_ReadChInterrupts>
 801ac66:	4603      	mov	r3, r0
 801ac68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801ac6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ac70:	d111      	bne.n	801ac96 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 801ac72:	78fb      	ldrb	r3, [r7, #3]
 801ac74:	015a      	lsls	r2, r3, #5
 801ac76:	693b      	ldr	r3, [r7, #16]
 801ac78:	4413      	add	r3, r2
 801ac7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801ac7e:	461a      	mov	r2, r3
 801ac80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801ac84:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	681b      	ldr	r3, [r3, #0]
 801ac8a:	78fa      	ldrb	r2, [r7, #3]
 801ac8c:	4611      	mov	r1, r2
 801ac8e:	4618      	mov	r0, r3
 801ac90:	f004 fe3f 	bl	801f912 <USB_HC_Halt>
 801ac94:	e3c0      	b.n	801b418 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	78fa      	ldrb	r2, [r7, #3]
 801ac9c:	4611      	mov	r1, r2
 801ac9e:	4618      	mov	r0, r3
 801aca0:	f004 f89f 	bl	801ede2 <USB_ReadChInterrupts>
 801aca4:	4603      	mov	r3, r0
 801aca6:	f003 0301 	and.w	r3, r3, #1
 801acaa:	2b01      	cmp	r3, #1
 801acac:	d168      	bne.n	801ad80 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 801acae:	78fa      	ldrb	r2, [r7, #3]
 801acb0:	6879      	ldr	r1, [r7, #4]
 801acb2:	4613      	mov	r3, r2
 801acb4:	011b      	lsls	r3, r3, #4
 801acb6:	1a9b      	subs	r3, r3, r2
 801acb8:	009b      	lsls	r3, r3, #2
 801acba:	440b      	add	r3, r1
 801acbc:	3344      	adds	r3, #68	@ 0x44
 801acbe:	2200      	movs	r2, #0
 801acc0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	78fa      	ldrb	r2, [r7, #3]
 801acc8:	4611      	mov	r1, r2
 801acca:	4618      	mov	r0, r3
 801accc:	f004 f889 	bl	801ede2 <USB_ReadChInterrupts>
 801acd0:	4603      	mov	r3, r0
 801acd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801acd6:	2b40      	cmp	r3, #64	@ 0x40
 801acd8:	d112      	bne.n	801ad00 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 801acda:	78fa      	ldrb	r2, [r7, #3]
 801acdc:	6879      	ldr	r1, [r7, #4]
 801acde:	4613      	mov	r3, r2
 801ace0:	011b      	lsls	r3, r3, #4
 801ace2:	1a9b      	subs	r3, r3, r2
 801ace4:	009b      	lsls	r3, r3, #2
 801ace6:	440b      	add	r3, r1
 801ace8:	3319      	adds	r3, #25
 801acea:	2201      	movs	r2, #1
 801acec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 801acee:	78fb      	ldrb	r3, [r7, #3]
 801acf0:	015a      	lsls	r2, r3, #5
 801acf2:	693b      	ldr	r3, [r7, #16]
 801acf4:	4413      	add	r3, r2
 801acf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801acfa:	461a      	mov	r2, r3
 801acfc:	2340      	movs	r3, #64	@ 0x40
 801acfe:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 801ad00:	78fa      	ldrb	r2, [r7, #3]
 801ad02:	6879      	ldr	r1, [r7, #4]
 801ad04:	4613      	mov	r3, r2
 801ad06:	011b      	lsls	r3, r3, #4
 801ad08:	1a9b      	subs	r3, r3, r2
 801ad0a:	009b      	lsls	r3, r3, #2
 801ad0c:	440b      	add	r3, r1
 801ad0e:	331b      	adds	r3, #27
 801ad10:	781b      	ldrb	r3, [r3, #0]
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d019      	beq.n	801ad4a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 801ad16:	78fa      	ldrb	r2, [r7, #3]
 801ad18:	6879      	ldr	r1, [r7, #4]
 801ad1a:	4613      	mov	r3, r2
 801ad1c:	011b      	lsls	r3, r3, #4
 801ad1e:	1a9b      	subs	r3, r3, r2
 801ad20:	009b      	lsls	r3, r3, #2
 801ad22:	440b      	add	r3, r1
 801ad24:	331b      	adds	r3, #27
 801ad26:	2200      	movs	r2, #0
 801ad28:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 801ad2a:	78fb      	ldrb	r3, [r7, #3]
 801ad2c:	015a      	lsls	r2, r3, #5
 801ad2e:	693b      	ldr	r3, [r7, #16]
 801ad30:	4413      	add	r3, r2
 801ad32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801ad36:	685b      	ldr	r3, [r3, #4]
 801ad38:	78fa      	ldrb	r2, [r7, #3]
 801ad3a:	0151      	lsls	r1, r2, #5
 801ad3c:	693a      	ldr	r2, [r7, #16]
 801ad3e:	440a      	add	r2, r1
 801ad40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801ad44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801ad48:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 801ad4a:	78fb      	ldrb	r3, [r7, #3]
 801ad4c:	015a      	lsls	r2, r3, #5
 801ad4e:	693b      	ldr	r3, [r7, #16]
 801ad50:	4413      	add	r3, r2
 801ad52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801ad56:	461a      	mov	r2, r3
 801ad58:	2301      	movs	r3, #1
 801ad5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 801ad5c:	78fa      	ldrb	r2, [r7, #3]
 801ad5e:	6879      	ldr	r1, [r7, #4]
 801ad60:	4613      	mov	r3, r2
 801ad62:	011b      	lsls	r3, r3, #4
 801ad64:	1a9b      	subs	r3, r3, r2
 801ad66:	009b      	lsls	r3, r3, #2
 801ad68:	440b      	add	r3, r1
 801ad6a:	334d      	adds	r3, #77	@ 0x4d
 801ad6c:	2201      	movs	r2, #1
 801ad6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	681b      	ldr	r3, [r3, #0]
 801ad74:	78fa      	ldrb	r2, [r7, #3]
 801ad76:	4611      	mov	r1, r2
 801ad78:	4618      	mov	r0, r3
 801ad7a:	f004 fdca 	bl	801f912 <USB_HC_Halt>
 801ad7e:	e34b      	b.n	801b418 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	681b      	ldr	r3, [r3, #0]
 801ad84:	78fa      	ldrb	r2, [r7, #3]
 801ad86:	4611      	mov	r1, r2
 801ad88:	4618      	mov	r0, r3
 801ad8a:	f004 f82a 	bl	801ede2 <USB_ReadChInterrupts>
 801ad8e:	4603      	mov	r3, r0
 801ad90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ad94:	2b40      	cmp	r3, #64	@ 0x40
 801ad96:	d139      	bne.n	801ae0c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 801ad98:	78fa      	ldrb	r2, [r7, #3]
 801ad9a:	6879      	ldr	r1, [r7, #4]
 801ad9c:	4613      	mov	r3, r2
 801ad9e:	011b      	lsls	r3, r3, #4
 801ada0:	1a9b      	subs	r3, r3, r2
 801ada2:	009b      	lsls	r3, r3, #2
 801ada4:	440b      	add	r3, r1
 801ada6:	334d      	adds	r3, #77	@ 0x4d
 801ada8:	2205      	movs	r2, #5
 801adaa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 801adac:	78fa      	ldrb	r2, [r7, #3]
 801adae:	6879      	ldr	r1, [r7, #4]
 801adb0:	4613      	mov	r3, r2
 801adb2:	011b      	lsls	r3, r3, #4
 801adb4:	1a9b      	subs	r3, r3, r2
 801adb6:	009b      	lsls	r3, r3, #2
 801adb8:	440b      	add	r3, r1
 801adba:	331a      	adds	r3, #26
 801adbc:	781b      	ldrb	r3, [r3, #0]
 801adbe:	2b00      	cmp	r3, #0
 801adc0:	d109      	bne.n	801add6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 801adc2:	78fa      	ldrb	r2, [r7, #3]
 801adc4:	6879      	ldr	r1, [r7, #4]
 801adc6:	4613      	mov	r3, r2
 801adc8:	011b      	lsls	r3, r3, #4
 801adca:	1a9b      	subs	r3, r3, r2
 801adcc:	009b      	lsls	r3, r3, #2
 801adce:	440b      	add	r3, r1
 801add0:	3319      	adds	r3, #25
 801add2:	2201      	movs	r2, #1
 801add4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 801add6:	78fa      	ldrb	r2, [r7, #3]
 801add8:	6879      	ldr	r1, [r7, #4]
 801adda:	4613      	mov	r3, r2
 801addc:	011b      	lsls	r3, r3, #4
 801adde:	1a9b      	subs	r3, r3, r2
 801ade0:	009b      	lsls	r3, r3, #2
 801ade2:	440b      	add	r3, r1
 801ade4:	3344      	adds	r3, #68	@ 0x44
 801ade6:	2200      	movs	r2, #0
 801ade8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	78fa      	ldrb	r2, [r7, #3]
 801adf0:	4611      	mov	r1, r2
 801adf2:	4618      	mov	r0, r3
 801adf4:	f004 fd8d 	bl	801f912 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 801adf8:	78fb      	ldrb	r3, [r7, #3]
 801adfa:	015a      	lsls	r2, r3, #5
 801adfc:	693b      	ldr	r3, [r7, #16]
 801adfe:	4413      	add	r3, r2
 801ae00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801ae04:	461a      	mov	r2, r3
 801ae06:	2340      	movs	r3, #64	@ 0x40
 801ae08:	6093      	str	r3, [r2, #8]
 801ae0a:	e305      	b.n	801b418 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	681b      	ldr	r3, [r3, #0]
 801ae10:	78fa      	ldrb	r2, [r7, #3]
 801ae12:	4611      	mov	r1, r2
 801ae14:	4618      	mov	r0, r3
 801ae16:	f003 ffe4 	bl	801ede2 <USB_ReadChInterrupts>
 801ae1a:	4603      	mov	r3, r0
 801ae1c:	f003 0308 	and.w	r3, r3, #8
 801ae20:	2b08      	cmp	r3, #8
 801ae22:	d11a      	bne.n	801ae5a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 801ae24:	78fb      	ldrb	r3, [r7, #3]
 801ae26:	015a      	lsls	r2, r3, #5
 801ae28:	693b      	ldr	r3, [r7, #16]
 801ae2a:	4413      	add	r3, r2
 801ae2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801ae30:	461a      	mov	r2, r3
 801ae32:	2308      	movs	r3, #8
 801ae34:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 801ae36:	78fa      	ldrb	r2, [r7, #3]
 801ae38:	6879      	ldr	r1, [r7, #4]
 801ae3a:	4613      	mov	r3, r2
 801ae3c:	011b      	lsls	r3, r3, #4
 801ae3e:	1a9b      	subs	r3, r3, r2
 801ae40:	009b      	lsls	r3, r3, #2
 801ae42:	440b      	add	r3, r1
 801ae44:	334d      	adds	r3, #77	@ 0x4d
 801ae46:	2206      	movs	r2, #6
 801ae48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	78fa      	ldrb	r2, [r7, #3]
 801ae50:	4611      	mov	r1, r2
 801ae52:	4618      	mov	r0, r3
 801ae54:	f004 fd5d 	bl	801f912 <USB_HC_Halt>
 801ae58:	e2de      	b.n	801b418 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	78fa      	ldrb	r2, [r7, #3]
 801ae60:	4611      	mov	r1, r2
 801ae62:	4618      	mov	r0, r3
 801ae64:	f003 ffbd 	bl	801ede2 <USB_ReadChInterrupts>
 801ae68:	4603      	mov	r3, r0
 801ae6a:	f003 0310 	and.w	r3, r3, #16
 801ae6e:	2b10      	cmp	r3, #16
 801ae70:	d144      	bne.n	801aefc <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 801ae72:	78fa      	ldrb	r2, [r7, #3]
 801ae74:	6879      	ldr	r1, [r7, #4]
 801ae76:	4613      	mov	r3, r2
 801ae78:	011b      	lsls	r3, r3, #4
 801ae7a:	1a9b      	subs	r3, r3, r2
 801ae7c:	009b      	lsls	r3, r3, #2
 801ae7e:	440b      	add	r3, r1
 801ae80:	3344      	adds	r3, #68	@ 0x44
 801ae82:	2200      	movs	r2, #0
 801ae84:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 801ae86:	78fa      	ldrb	r2, [r7, #3]
 801ae88:	6879      	ldr	r1, [r7, #4]
 801ae8a:	4613      	mov	r3, r2
 801ae8c:	011b      	lsls	r3, r3, #4
 801ae8e:	1a9b      	subs	r3, r3, r2
 801ae90:	009b      	lsls	r3, r3, #2
 801ae92:	440b      	add	r3, r1
 801ae94:	334d      	adds	r3, #77	@ 0x4d
 801ae96:	2204      	movs	r2, #4
 801ae98:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 801ae9a:	78fa      	ldrb	r2, [r7, #3]
 801ae9c:	6879      	ldr	r1, [r7, #4]
 801ae9e:	4613      	mov	r3, r2
 801aea0:	011b      	lsls	r3, r3, #4
 801aea2:	1a9b      	subs	r3, r3, r2
 801aea4:	009b      	lsls	r3, r3, #2
 801aea6:	440b      	add	r3, r1
 801aea8:	3319      	adds	r3, #25
 801aeaa:	781b      	ldrb	r3, [r3, #0]
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	d114      	bne.n	801aeda <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 801aeb0:	78fa      	ldrb	r2, [r7, #3]
 801aeb2:	6879      	ldr	r1, [r7, #4]
 801aeb4:	4613      	mov	r3, r2
 801aeb6:	011b      	lsls	r3, r3, #4
 801aeb8:	1a9b      	subs	r3, r3, r2
 801aeba:	009b      	lsls	r3, r3, #2
 801aebc:	440b      	add	r3, r1
 801aebe:	3318      	adds	r3, #24
 801aec0:	781b      	ldrb	r3, [r3, #0]
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d109      	bne.n	801aeda <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 801aec6:	78fa      	ldrb	r2, [r7, #3]
 801aec8:	6879      	ldr	r1, [r7, #4]
 801aeca:	4613      	mov	r3, r2
 801aecc:	011b      	lsls	r3, r3, #4
 801aece:	1a9b      	subs	r3, r3, r2
 801aed0:	009b      	lsls	r3, r3, #2
 801aed2:	440b      	add	r3, r1
 801aed4:	3319      	adds	r3, #25
 801aed6:	2201      	movs	r2, #1
 801aed8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	681b      	ldr	r3, [r3, #0]
 801aede:	78fa      	ldrb	r2, [r7, #3]
 801aee0:	4611      	mov	r1, r2
 801aee2:	4618      	mov	r0, r3
 801aee4:	f004 fd15 	bl	801f912 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 801aee8:	78fb      	ldrb	r3, [r7, #3]
 801aeea:	015a      	lsls	r2, r3, #5
 801aeec:	693b      	ldr	r3, [r7, #16]
 801aeee:	4413      	add	r3, r2
 801aef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801aef4:	461a      	mov	r2, r3
 801aef6:	2310      	movs	r3, #16
 801aef8:	6093      	str	r3, [r2, #8]
 801aefa:	e28d      	b.n	801b418 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	681b      	ldr	r3, [r3, #0]
 801af00:	78fa      	ldrb	r2, [r7, #3]
 801af02:	4611      	mov	r1, r2
 801af04:	4618      	mov	r0, r3
 801af06:	f003 ff6c 	bl	801ede2 <USB_ReadChInterrupts>
 801af0a:	4603      	mov	r3, r0
 801af0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801af10:	2b80      	cmp	r3, #128	@ 0x80
 801af12:	d169      	bne.n	801afe8 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	799b      	ldrb	r3, [r3, #6]
 801af18:	2b00      	cmp	r3, #0
 801af1a:	d111      	bne.n	801af40 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 801af1c:	78fa      	ldrb	r2, [r7, #3]
 801af1e:	6879      	ldr	r1, [r7, #4]
 801af20:	4613      	mov	r3, r2
 801af22:	011b      	lsls	r3, r3, #4
 801af24:	1a9b      	subs	r3, r3, r2
 801af26:	009b      	lsls	r3, r3, #2
 801af28:	440b      	add	r3, r1
 801af2a:	334d      	adds	r3, #77	@ 0x4d
 801af2c:	2207      	movs	r2, #7
 801af2e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	78fa      	ldrb	r2, [r7, #3]
 801af36:	4611      	mov	r1, r2
 801af38:	4618      	mov	r0, r3
 801af3a:	f004 fcea 	bl	801f912 <USB_HC_Halt>
 801af3e:	e049      	b.n	801afd4 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 801af40:	78fa      	ldrb	r2, [r7, #3]
 801af42:	6879      	ldr	r1, [r7, #4]
 801af44:	4613      	mov	r3, r2
 801af46:	011b      	lsls	r3, r3, #4
 801af48:	1a9b      	subs	r3, r3, r2
 801af4a:	009b      	lsls	r3, r3, #2
 801af4c:	440b      	add	r3, r1
 801af4e:	3344      	adds	r3, #68	@ 0x44
 801af50:	681b      	ldr	r3, [r3, #0]
 801af52:	1c59      	adds	r1, r3, #1
 801af54:	6878      	ldr	r0, [r7, #4]
 801af56:	4613      	mov	r3, r2
 801af58:	011b      	lsls	r3, r3, #4
 801af5a:	1a9b      	subs	r3, r3, r2
 801af5c:	009b      	lsls	r3, r3, #2
 801af5e:	4403      	add	r3, r0
 801af60:	3344      	adds	r3, #68	@ 0x44
 801af62:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 801af64:	78fa      	ldrb	r2, [r7, #3]
 801af66:	6879      	ldr	r1, [r7, #4]
 801af68:	4613      	mov	r3, r2
 801af6a:	011b      	lsls	r3, r3, #4
 801af6c:	1a9b      	subs	r3, r3, r2
 801af6e:	009b      	lsls	r3, r3, #2
 801af70:	440b      	add	r3, r1
 801af72:	3344      	adds	r3, #68	@ 0x44
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	2b02      	cmp	r3, #2
 801af78:	d922      	bls.n	801afc0 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 801af7a:	78fa      	ldrb	r2, [r7, #3]
 801af7c:	6879      	ldr	r1, [r7, #4]
 801af7e:	4613      	mov	r3, r2
 801af80:	011b      	lsls	r3, r3, #4
 801af82:	1a9b      	subs	r3, r3, r2
 801af84:	009b      	lsls	r3, r3, #2
 801af86:	440b      	add	r3, r1
 801af88:	3344      	adds	r3, #68	@ 0x44
 801af8a:	2200      	movs	r2, #0
 801af8c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 801af8e:	78fa      	ldrb	r2, [r7, #3]
 801af90:	6879      	ldr	r1, [r7, #4]
 801af92:	4613      	mov	r3, r2
 801af94:	011b      	lsls	r3, r3, #4
 801af96:	1a9b      	subs	r3, r3, r2
 801af98:	009b      	lsls	r3, r3, #2
 801af9a:	440b      	add	r3, r1
 801af9c:	334c      	adds	r3, #76	@ 0x4c
 801af9e:	2204      	movs	r2, #4
 801afa0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 801afa2:	78fa      	ldrb	r2, [r7, #3]
 801afa4:	6879      	ldr	r1, [r7, #4]
 801afa6:	4613      	mov	r3, r2
 801afa8:	011b      	lsls	r3, r3, #4
 801afaa:	1a9b      	subs	r3, r3, r2
 801afac:	009b      	lsls	r3, r3, #2
 801afae:	440b      	add	r3, r1
 801afb0:	334c      	adds	r3, #76	@ 0x4c
 801afb2:	781a      	ldrb	r2, [r3, #0]
 801afb4:	78fb      	ldrb	r3, [r7, #3]
 801afb6:	4619      	mov	r1, r3
 801afb8:	6878      	ldr	r0, [r7, #4]
 801afba:	f00f f8d5 	bl	802a168 <HAL_HCD_HC_NotifyURBChange_Callback>
 801afbe:	e009      	b.n	801afd4 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 801afc0:	78fa      	ldrb	r2, [r7, #3]
 801afc2:	6879      	ldr	r1, [r7, #4]
 801afc4:	4613      	mov	r3, r2
 801afc6:	011b      	lsls	r3, r3, #4
 801afc8:	1a9b      	subs	r3, r3, r2
 801afca:	009b      	lsls	r3, r3, #2
 801afcc:	440b      	add	r3, r1
 801afce:	334c      	adds	r3, #76	@ 0x4c
 801afd0:	2202      	movs	r2, #2
 801afd2:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 801afd4:	78fb      	ldrb	r3, [r7, #3]
 801afd6:	015a      	lsls	r2, r3, #5
 801afd8:	693b      	ldr	r3, [r7, #16]
 801afda:	4413      	add	r3, r2
 801afdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801afe0:	461a      	mov	r2, r3
 801afe2:	2380      	movs	r3, #128	@ 0x80
 801afe4:	6093      	str	r3, [r2, #8]
 801afe6:	e217      	b.n	801b418 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	78fa      	ldrb	r2, [r7, #3]
 801afee:	4611      	mov	r1, r2
 801aff0:	4618      	mov	r0, r3
 801aff2:	f003 fef6 	bl	801ede2 <USB_ReadChInterrupts>
 801aff6:	4603      	mov	r3, r0
 801aff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801affc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801b000:	d11b      	bne.n	801b03a <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 801b002:	78fa      	ldrb	r2, [r7, #3]
 801b004:	6879      	ldr	r1, [r7, #4]
 801b006:	4613      	mov	r3, r2
 801b008:	011b      	lsls	r3, r3, #4
 801b00a:	1a9b      	subs	r3, r3, r2
 801b00c:	009b      	lsls	r3, r3, #2
 801b00e:	440b      	add	r3, r1
 801b010:	334d      	adds	r3, #77	@ 0x4d
 801b012:	2209      	movs	r2, #9
 801b014:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	681b      	ldr	r3, [r3, #0]
 801b01a:	78fa      	ldrb	r2, [r7, #3]
 801b01c:	4611      	mov	r1, r2
 801b01e:	4618      	mov	r0, r3
 801b020:	f004 fc77 	bl	801f912 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 801b024:	78fb      	ldrb	r3, [r7, #3]
 801b026:	015a      	lsls	r2, r3, #5
 801b028:	693b      	ldr	r3, [r7, #16]
 801b02a:	4413      	add	r3, r2
 801b02c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801b030:	461a      	mov	r2, r3
 801b032:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b036:	6093      	str	r3, [r2, #8]
 801b038:	e1ee      	b.n	801b418 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	681b      	ldr	r3, [r3, #0]
 801b03e:	78fa      	ldrb	r2, [r7, #3]
 801b040:	4611      	mov	r1, r2
 801b042:	4618      	mov	r0, r3
 801b044:	f003 fecd 	bl	801ede2 <USB_ReadChInterrupts>
 801b048:	4603      	mov	r3, r0
 801b04a:	f003 0302 	and.w	r3, r3, #2
 801b04e:	2b02      	cmp	r3, #2
 801b050:	f040 81df 	bne.w	801b412 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 801b054:	78fb      	ldrb	r3, [r7, #3]
 801b056:	015a      	lsls	r2, r3, #5
 801b058:	693b      	ldr	r3, [r7, #16]
 801b05a:	4413      	add	r3, r2
 801b05c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801b060:	461a      	mov	r2, r3
 801b062:	2302      	movs	r3, #2
 801b064:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 801b066:	78fa      	ldrb	r2, [r7, #3]
 801b068:	6879      	ldr	r1, [r7, #4]
 801b06a:	4613      	mov	r3, r2
 801b06c:	011b      	lsls	r3, r3, #4
 801b06e:	1a9b      	subs	r3, r3, r2
 801b070:	009b      	lsls	r3, r3, #2
 801b072:	440b      	add	r3, r1
 801b074:	334d      	adds	r3, #77	@ 0x4d
 801b076:	781b      	ldrb	r3, [r3, #0]
 801b078:	2b01      	cmp	r3, #1
 801b07a:	f040 8093 	bne.w	801b1a4 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 801b07e:	78fa      	ldrb	r2, [r7, #3]
 801b080:	6879      	ldr	r1, [r7, #4]
 801b082:	4613      	mov	r3, r2
 801b084:	011b      	lsls	r3, r3, #4
 801b086:	1a9b      	subs	r3, r3, r2
 801b088:	009b      	lsls	r3, r3, #2
 801b08a:	440b      	add	r3, r1
 801b08c:	334d      	adds	r3, #77	@ 0x4d
 801b08e:	2202      	movs	r2, #2
 801b090:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 801b092:	78fa      	ldrb	r2, [r7, #3]
 801b094:	6879      	ldr	r1, [r7, #4]
 801b096:	4613      	mov	r3, r2
 801b098:	011b      	lsls	r3, r3, #4
 801b09a:	1a9b      	subs	r3, r3, r2
 801b09c:	009b      	lsls	r3, r3, #2
 801b09e:	440b      	add	r3, r1
 801b0a0:	334c      	adds	r3, #76	@ 0x4c
 801b0a2:	2201      	movs	r2, #1
 801b0a4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 801b0a6:	78fa      	ldrb	r2, [r7, #3]
 801b0a8:	6879      	ldr	r1, [r7, #4]
 801b0aa:	4613      	mov	r3, r2
 801b0ac:	011b      	lsls	r3, r3, #4
 801b0ae:	1a9b      	subs	r3, r3, r2
 801b0b0:	009b      	lsls	r3, r3, #2
 801b0b2:	440b      	add	r3, r1
 801b0b4:	3326      	adds	r3, #38	@ 0x26
 801b0b6:	781b      	ldrb	r3, [r3, #0]
 801b0b8:	2b02      	cmp	r3, #2
 801b0ba:	d00b      	beq.n	801b0d4 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 801b0bc:	78fa      	ldrb	r2, [r7, #3]
 801b0be:	6879      	ldr	r1, [r7, #4]
 801b0c0:	4613      	mov	r3, r2
 801b0c2:	011b      	lsls	r3, r3, #4
 801b0c4:	1a9b      	subs	r3, r3, r2
 801b0c6:	009b      	lsls	r3, r3, #2
 801b0c8:	440b      	add	r3, r1
 801b0ca:	3326      	adds	r3, #38	@ 0x26
 801b0cc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 801b0ce:	2b03      	cmp	r3, #3
 801b0d0:	f040 8190 	bne.w	801b3f4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	799b      	ldrb	r3, [r3, #6]
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	d115      	bne.n	801b108 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 801b0dc:	78fa      	ldrb	r2, [r7, #3]
 801b0de:	6879      	ldr	r1, [r7, #4]
 801b0e0:	4613      	mov	r3, r2
 801b0e2:	011b      	lsls	r3, r3, #4
 801b0e4:	1a9b      	subs	r3, r3, r2
 801b0e6:	009b      	lsls	r3, r3, #2
 801b0e8:	440b      	add	r3, r1
 801b0ea:	333d      	adds	r3, #61	@ 0x3d
 801b0ec:	781b      	ldrb	r3, [r3, #0]
 801b0ee:	78fa      	ldrb	r2, [r7, #3]
 801b0f0:	f083 0301 	eor.w	r3, r3, #1
 801b0f4:	b2d8      	uxtb	r0, r3
 801b0f6:	6879      	ldr	r1, [r7, #4]
 801b0f8:	4613      	mov	r3, r2
 801b0fa:	011b      	lsls	r3, r3, #4
 801b0fc:	1a9b      	subs	r3, r3, r2
 801b0fe:	009b      	lsls	r3, r3, #2
 801b100:	440b      	add	r3, r1
 801b102:	333d      	adds	r3, #61	@ 0x3d
 801b104:	4602      	mov	r2, r0
 801b106:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 801b108:	687b      	ldr	r3, [r7, #4]
 801b10a:	799b      	ldrb	r3, [r3, #6]
 801b10c:	2b01      	cmp	r3, #1
 801b10e:	f040 8171 	bne.w	801b3f4 <HCD_HC_OUT_IRQHandler+0x920>
 801b112:	78fa      	ldrb	r2, [r7, #3]
 801b114:	6879      	ldr	r1, [r7, #4]
 801b116:	4613      	mov	r3, r2
 801b118:	011b      	lsls	r3, r3, #4
 801b11a:	1a9b      	subs	r3, r3, r2
 801b11c:	009b      	lsls	r3, r3, #2
 801b11e:	440b      	add	r3, r1
 801b120:	3334      	adds	r3, #52	@ 0x34
 801b122:	681b      	ldr	r3, [r3, #0]
 801b124:	2b00      	cmp	r3, #0
 801b126:	f000 8165 	beq.w	801b3f4 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 801b12a:	78fa      	ldrb	r2, [r7, #3]
 801b12c:	6879      	ldr	r1, [r7, #4]
 801b12e:	4613      	mov	r3, r2
 801b130:	011b      	lsls	r3, r3, #4
 801b132:	1a9b      	subs	r3, r3, r2
 801b134:	009b      	lsls	r3, r3, #2
 801b136:	440b      	add	r3, r1
 801b138:	3334      	adds	r3, #52	@ 0x34
 801b13a:	6819      	ldr	r1, [r3, #0]
 801b13c:	78fa      	ldrb	r2, [r7, #3]
 801b13e:	6878      	ldr	r0, [r7, #4]
 801b140:	4613      	mov	r3, r2
 801b142:	011b      	lsls	r3, r3, #4
 801b144:	1a9b      	subs	r3, r3, r2
 801b146:	009b      	lsls	r3, r3, #2
 801b148:	4403      	add	r3, r0
 801b14a:	3328      	adds	r3, #40	@ 0x28
 801b14c:	881b      	ldrh	r3, [r3, #0]
 801b14e:	440b      	add	r3, r1
 801b150:	1e59      	subs	r1, r3, #1
 801b152:	78fa      	ldrb	r2, [r7, #3]
 801b154:	6878      	ldr	r0, [r7, #4]
 801b156:	4613      	mov	r3, r2
 801b158:	011b      	lsls	r3, r3, #4
 801b15a:	1a9b      	subs	r3, r3, r2
 801b15c:	009b      	lsls	r3, r3, #2
 801b15e:	4403      	add	r3, r0
 801b160:	3328      	adds	r3, #40	@ 0x28
 801b162:	881b      	ldrh	r3, [r3, #0]
 801b164:	fbb1 f3f3 	udiv	r3, r1, r3
 801b168:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 801b16a:	68bb      	ldr	r3, [r7, #8]
 801b16c:	f003 0301 	and.w	r3, r3, #1
 801b170:	2b00      	cmp	r3, #0
 801b172:	f000 813f 	beq.w	801b3f4 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 801b176:	78fa      	ldrb	r2, [r7, #3]
 801b178:	6879      	ldr	r1, [r7, #4]
 801b17a:	4613      	mov	r3, r2
 801b17c:	011b      	lsls	r3, r3, #4
 801b17e:	1a9b      	subs	r3, r3, r2
 801b180:	009b      	lsls	r3, r3, #2
 801b182:	440b      	add	r3, r1
 801b184:	333d      	adds	r3, #61	@ 0x3d
 801b186:	781b      	ldrb	r3, [r3, #0]
 801b188:	78fa      	ldrb	r2, [r7, #3]
 801b18a:	f083 0301 	eor.w	r3, r3, #1
 801b18e:	b2d8      	uxtb	r0, r3
 801b190:	6879      	ldr	r1, [r7, #4]
 801b192:	4613      	mov	r3, r2
 801b194:	011b      	lsls	r3, r3, #4
 801b196:	1a9b      	subs	r3, r3, r2
 801b198:	009b      	lsls	r3, r3, #2
 801b19a:	440b      	add	r3, r1
 801b19c:	333d      	adds	r3, #61	@ 0x3d
 801b19e:	4602      	mov	r2, r0
 801b1a0:	701a      	strb	r2, [r3, #0]
 801b1a2:	e127      	b.n	801b3f4 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 801b1a4:	78fa      	ldrb	r2, [r7, #3]
 801b1a6:	6879      	ldr	r1, [r7, #4]
 801b1a8:	4613      	mov	r3, r2
 801b1aa:	011b      	lsls	r3, r3, #4
 801b1ac:	1a9b      	subs	r3, r3, r2
 801b1ae:	009b      	lsls	r3, r3, #2
 801b1b0:	440b      	add	r3, r1
 801b1b2:	334d      	adds	r3, #77	@ 0x4d
 801b1b4:	781b      	ldrb	r3, [r3, #0]
 801b1b6:	2b03      	cmp	r3, #3
 801b1b8:	d120      	bne.n	801b1fc <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 801b1ba:	78fa      	ldrb	r2, [r7, #3]
 801b1bc:	6879      	ldr	r1, [r7, #4]
 801b1be:	4613      	mov	r3, r2
 801b1c0:	011b      	lsls	r3, r3, #4
 801b1c2:	1a9b      	subs	r3, r3, r2
 801b1c4:	009b      	lsls	r3, r3, #2
 801b1c6:	440b      	add	r3, r1
 801b1c8:	334d      	adds	r3, #77	@ 0x4d
 801b1ca:	2202      	movs	r2, #2
 801b1cc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 801b1ce:	78fa      	ldrb	r2, [r7, #3]
 801b1d0:	6879      	ldr	r1, [r7, #4]
 801b1d2:	4613      	mov	r3, r2
 801b1d4:	011b      	lsls	r3, r3, #4
 801b1d6:	1a9b      	subs	r3, r3, r2
 801b1d8:	009b      	lsls	r3, r3, #2
 801b1da:	440b      	add	r3, r1
 801b1dc:	331b      	adds	r3, #27
 801b1de:	781b      	ldrb	r3, [r3, #0]
 801b1e0:	2b01      	cmp	r3, #1
 801b1e2:	f040 8107 	bne.w	801b3f4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 801b1e6:	78fa      	ldrb	r2, [r7, #3]
 801b1e8:	6879      	ldr	r1, [r7, #4]
 801b1ea:	4613      	mov	r3, r2
 801b1ec:	011b      	lsls	r3, r3, #4
 801b1ee:	1a9b      	subs	r3, r3, r2
 801b1f0:	009b      	lsls	r3, r3, #2
 801b1f2:	440b      	add	r3, r1
 801b1f4:	334c      	adds	r3, #76	@ 0x4c
 801b1f6:	2202      	movs	r2, #2
 801b1f8:	701a      	strb	r2, [r3, #0]
 801b1fa:	e0fb      	b.n	801b3f4 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 801b1fc:	78fa      	ldrb	r2, [r7, #3]
 801b1fe:	6879      	ldr	r1, [r7, #4]
 801b200:	4613      	mov	r3, r2
 801b202:	011b      	lsls	r3, r3, #4
 801b204:	1a9b      	subs	r3, r3, r2
 801b206:	009b      	lsls	r3, r3, #2
 801b208:	440b      	add	r3, r1
 801b20a:	334d      	adds	r3, #77	@ 0x4d
 801b20c:	781b      	ldrb	r3, [r3, #0]
 801b20e:	2b04      	cmp	r3, #4
 801b210:	d13a      	bne.n	801b288 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 801b212:	78fa      	ldrb	r2, [r7, #3]
 801b214:	6879      	ldr	r1, [r7, #4]
 801b216:	4613      	mov	r3, r2
 801b218:	011b      	lsls	r3, r3, #4
 801b21a:	1a9b      	subs	r3, r3, r2
 801b21c:	009b      	lsls	r3, r3, #2
 801b21e:	440b      	add	r3, r1
 801b220:	334d      	adds	r3, #77	@ 0x4d
 801b222:	2202      	movs	r2, #2
 801b224:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 801b226:	78fa      	ldrb	r2, [r7, #3]
 801b228:	6879      	ldr	r1, [r7, #4]
 801b22a:	4613      	mov	r3, r2
 801b22c:	011b      	lsls	r3, r3, #4
 801b22e:	1a9b      	subs	r3, r3, r2
 801b230:	009b      	lsls	r3, r3, #2
 801b232:	440b      	add	r3, r1
 801b234:	334c      	adds	r3, #76	@ 0x4c
 801b236:	2202      	movs	r2, #2
 801b238:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 801b23a:	78fa      	ldrb	r2, [r7, #3]
 801b23c:	6879      	ldr	r1, [r7, #4]
 801b23e:	4613      	mov	r3, r2
 801b240:	011b      	lsls	r3, r3, #4
 801b242:	1a9b      	subs	r3, r3, r2
 801b244:	009b      	lsls	r3, r3, #2
 801b246:	440b      	add	r3, r1
 801b248:	331b      	adds	r3, #27
 801b24a:	781b      	ldrb	r3, [r3, #0]
 801b24c:	2b01      	cmp	r3, #1
 801b24e:	f040 80d1 	bne.w	801b3f4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 801b252:	78fa      	ldrb	r2, [r7, #3]
 801b254:	6879      	ldr	r1, [r7, #4]
 801b256:	4613      	mov	r3, r2
 801b258:	011b      	lsls	r3, r3, #4
 801b25a:	1a9b      	subs	r3, r3, r2
 801b25c:	009b      	lsls	r3, r3, #2
 801b25e:	440b      	add	r3, r1
 801b260:	331b      	adds	r3, #27
 801b262:	2200      	movs	r2, #0
 801b264:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 801b266:	78fb      	ldrb	r3, [r7, #3]
 801b268:	015a      	lsls	r2, r3, #5
 801b26a:	693b      	ldr	r3, [r7, #16]
 801b26c:	4413      	add	r3, r2
 801b26e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801b272:	685b      	ldr	r3, [r3, #4]
 801b274:	78fa      	ldrb	r2, [r7, #3]
 801b276:	0151      	lsls	r1, r2, #5
 801b278:	693a      	ldr	r2, [r7, #16]
 801b27a:	440a      	add	r2, r1
 801b27c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801b280:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801b284:	6053      	str	r3, [r2, #4]
 801b286:	e0b5      	b.n	801b3f4 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 801b288:	78fa      	ldrb	r2, [r7, #3]
 801b28a:	6879      	ldr	r1, [r7, #4]
 801b28c:	4613      	mov	r3, r2
 801b28e:	011b      	lsls	r3, r3, #4
 801b290:	1a9b      	subs	r3, r3, r2
 801b292:	009b      	lsls	r3, r3, #2
 801b294:	440b      	add	r3, r1
 801b296:	334d      	adds	r3, #77	@ 0x4d
 801b298:	781b      	ldrb	r3, [r3, #0]
 801b29a:	2b05      	cmp	r3, #5
 801b29c:	d114      	bne.n	801b2c8 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 801b29e:	78fa      	ldrb	r2, [r7, #3]
 801b2a0:	6879      	ldr	r1, [r7, #4]
 801b2a2:	4613      	mov	r3, r2
 801b2a4:	011b      	lsls	r3, r3, #4
 801b2a6:	1a9b      	subs	r3, r3, r2
 801b2a8:	009b      	lsls	r3, r3, #2
 801b2aa:	440b      	add	r3, r1
 801b2ac:	334d      	adds	r3, #77	@ 0x4d
 801b2ae:	2202      	movs	r2, #2
 801b2b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 801b2b2:	78fa      	ldrb	r2, [r7, #3]
 801b2b4:	6879      	ldr	r1, [r7, #4]
 801b2b6:	4613      	mov	r3, r2
 801b2b8:	011b      	lsls	r3, r3, #4
 801b2ba:	1a9b      	subs	r3, r3, r2
 801b2bc:	009b      	lsls	r3, r3, #2
 801b2be:	440b      	add	r3, r1
 801b2c0:	334c      	adds	r3, #76	@ 0x4c
 801b2c2:	2202      	movs	r2, #2
 801b2c4:	701a      	strb	r2, [r3, #0]
 801b2c6:	e095      	b.n	801b3f4 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 801b2c8:	78fa      	ldrb	r2, [r7, #3]
 801b2ca:	6879      	ldr	r1, [r7, #4]
 801b2cc:	4613      	mov	r3, r2
 801b2ce:	011b      	lsls	r3, r3, #4
 801b2d0:	1a9b      	subs	r3, r3, r2
 801b2d2:	009b      	lsls	r3, r3, #2
 801b2d4:	440b      	add	r3, r1
 801b2d6:	334d      	adds	r3, #77	@ 0x4d
 801b2d8:	781b      	ldrb	r3, [r3, #0]
 801b2da:	2b06      	cmp	r3, #6
 801b2dc:	d114      	bne.n	801b308 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 801b2de:	78fa      	ldrb	r2, [r7, #3]
 801b2e0:	6879      	ldr	r1, [r7, #4]
 801b2e2:	4613      	mov	r3, r2
 801b2e4:	011b      	lsls	r3, r3, #4
 801b2e6:	1a9b      	subs	r3, r3, r2
 801b2e8:	009b      	lsls	r3, r3, #2
 801b2ea:	440b      	add	r3, r1
 801b2ec:	334d      	adds	r3, #77	@ 0x4d
 801b2ee:	2202      	movs	r2, #2
 801b2f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 801b2f2:	78fa      	ldrb	r2, [r7, #3]
 801b2f4:	6879      	ldr	r1, [r7, #4]
 801b2f6:	4613      	mov	r3, r2
 801b2f8:	011b      	lsls	r3, r3, #4
 801b2fa:	1a9b      	subs	r3, r3, r2
 801b2fc:	009b      	lsls	r3, r3, #2
 801b2fe:	440b      	add	r3, r1
 801b300:	334c      	adds	r3, #76	@ 0x4c
 801b302:	2205      	movs	r2, #5
 801b304:	701a      	strb	r2, [r3, #0]
 801b306:	e075      	b.n	801b3f4 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 801b308:	78fa      	ldrb	r2, [r7, #3]
 801b30a:	6879      	ldr	r1, [r7, #4]
 801b30c:	4613      	mov	r3, r2
 801b30e:	011b      	lsls	r3, r3, #4
 801b310:	1a9b      	subs	r3, r3, r2
 801b312:	009b      	lsls	r3, r3, #2
 801b314:	440b      	add	r3, r1
 801b316:	334d      	adds	r3, #77	@ 0x4d
 801b318:	781b      	ldrb	r3, [r3, #0]
 801b31a:	2b07      	cmp	r3, #7
 801b31c:	d00a      	beq.n	801b334 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 801b31e:	78fa      	ldrb	r2, [r7, #3]
 801b320:	6879      	ldr	r1, [r7, #4]
 801b322:	4613      	mov	r3, r2
 801b324:	011b      	lsls	r3, r3, #4
 801b326:	1a9b      	subs	r3, r3, r2
 801b328:	009b      	lsls	r3, r3, #2
 801b32a:	440b      	add	r3, r1
 801b32c:	334d      	adds	r3, #77	@ 0x4d
 801b32e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 801b330:	2b09      	cmp	r3, #9
 801b332:	d170      	bne.n	801b416 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 801b334:	78fa      	ldrb	r2, [r7, #3]
 801b336:	6879      	ldr	r1, [r7, #4]
 801b338:	4613      	mov	r3, r2
 801b33a:	011b      	lsls	r3, r3, #4
 801b33c:	1a9b      	subs	r3, r3, r2
 801b33e:	009b      	lsls	r3, r3, #2
 801b340:	440b      	add	r3, r1
 801b342:	334d      	adds	r3, #77	@ 0x4d
 801b344:	2202      	movs	r2, #2
 801b346:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 801b348:	78fa      	ldrb	r2, [r7, #3]
 801b34a:	6879      	ldr	r1, [r7, #4]
 801b34c:	4613      	mov	r3, r2
 801b34e:	011b      	lsls	r3, r3, #4
 801b350:	1a9b      	subs	r3, r3, r2
 801b352:	009b      	lsls	r3, r3, #2
 801b354:	440b      	add	r3, r1
 801b356:	3344      	adds	r3, #68	@ 0x44
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	1c59      	adds	r1, r3, #1
 801b35c:	6878      	ldr	r0, [r7, #4]
 801b35e:	4613      	mov	r3, r2
 801b360:	011b      	lsls	r3, r3, #4
 801b362:	1a9b      	subs	r3, r3, r2
 801b364:	009b      	lsls	r3, r3, #2
 801b366:	4403      	add	r3, r0
 801b368:	3344      	adds	r3, #68	@ 0x44
 801b36a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 801b36c:	78fa      	ldrb	r2, [r7, #3]
 801b36e:	6879      	ldr	r1, [r7, #4]
 801b370:	4613      	mov	r3, r2
 801b372:	011b      	lsls	r3, r3, #4
 801b374:	1a9b      	subs	r3, r3, r2
 801b376:	009b      	lsls	r3, r3, #2
 801b378:	440b      	add	r3, r1
 801b37a:	3344      	adds	r3, #68	@ 0x44
 801b37c:	681b      	ldr	r3, [r3, #0]
 801b37e:	2b02      	cmp	r3, #2
 801b380:	d914      	bls.n	801b3ac <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 801b382:	78fa      	ldrb	r2, [r7, #3]
 801b384:	6879      	ldr	r1, [r7, #4]
 801b386:	4613      	mov	r3, r2
 801b388:	011b      	lsls	r3, r3, #4
 801b38a:	1a9b      	subs	r3, r3, r2
 801b38c:	009b      	lsls	r3, r3, #2
 801b38e:	440b      	add	r3, r1
 801b390:	3344      	adds	r3, #68	@ 0x44
 801b392:	2200      	movs	r2, #0
 801b394:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 801b396:	78fa      	ldrb	r2, [r7, #3]
 801b398:	6879      	ldr	r1, [r7, #4]
 801b39a:	4613      	mov	r3, r2
 801b39c:	011b      	lsls	r3, r3, #4
 801b39e:	1a9b      	subs	r3, r3, r2
 801b3a0:	009b      	lsls	r3, r3, #2
 801b3a2:	440b      	add	r3, r1
 801b3a4:	334c      	adds	r3, #76	@ 0x4c
 801b3a6:	2204      	movs	r2, #4
 801b3a8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 801b3aa:	e022      	b.n	801b3f2 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 801b3ac:	78fa      	ldrb	r2, [r7, #3]
 801b3ae:	6879      	ldr	r1, [r7, #4]
 801b3b0:	4613      	mov	r3, r2
 801b3b2:	011b      	lsls	r3, r3, #4
 801b3b4:	1a9b      	subs	r3, r3, r2
 801b3b6:	009b      	lsls	r3, r3, #2
 801b3b8:	440b      	add	r3, r1
 801b3ba:	334c      	adds	r3, #76	@ 0x4c
 801b3bc:	2202      	movs	r2, #2
 801b3be:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 801b3c0:	78fb      	ldrb	r3, [r7, #3]
 801b3c2:	015a      	lsls	r2, r3, #5
 801b3c4:	693b      	ldr	r3, [r7, #16]
 801b3c6:	4413      	add	r3, r2
 801b3c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801b3cc:	681b      	ldr	r3, [r3, #0]
 801b3ce:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801b3d0:	68fb      	ldr	r3, [r7, #12]
 801b3d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801b3d6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 801b3d8:	68fb      	ldr	r3, [r7, #12]
 801b3da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801b3de:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 801b3e0:	78fb      	ldrb	r3, [r7, #3]
 801b3e2:	015a      	lsls	r2, r3, #5
 801b3e4:	693b      	ldr	r3, [r7, #16]
 801b3e6:	4413      	add	r3, r2
 801b3e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801b3ec:	461a      	mov	r2, r3
 801b3ee:	68fb      	ldr	r3, [r7, #12]
 801b3f0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 801b3f2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 801b3f4:	78fa      	ldrb	r2, [r7, #3]
 801b3f6:	6879      	ldr	r1, [r7, #4]
 801b3f8:	4613      	mov	r3, r2
 801b3fa:	011b      	lsls	r3, r3, #4
 801b3fc:	1a9b      	subs	r3, r3, r2
 801b3fe:	009b      	lsls	r3, r3, #2
 801b400:	440b      	add	r3, r1
 801b402:	334c      	adds	r3, #76	@ 0x4c
 801b404:	781a      	ldrb	r2, [r3, #0]
 801b406:	78fb      	ldrb	r3, [r7, #3]
 801b408:	4619      	mov	r1, r3
 801b40a:	6878      	ldr	r0, [r7, #4]
 801b40c:	f00e feac 	bl	802a168 <HAL_HCD_HC_NotifyURBChange_Callback>
 801b410:	e002      	b.n	801b418 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 801b412:	bf00      	nop
 801b414:	e000      	b.n	801b418 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 801b416:	bf00      	nop
  }
}
 801b418:	3718      	adds	r7, #24
 801b41a:	46bd      	mov	sp, r7
 801b41c:	bd80      	pop	{r7, pc}

0801b41e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 801b41e:	b580      	push	{r7, lr}
 801b420:	b08a      	sub	sp, #40	@ 0x28
 801b422:	af00      	add	r7, sp, #0
 801b424:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	681b      	ldr	r3, [r3, #0]
 801b42a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b42e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	681b      	ldr	r3, [r3, #0]
 801b434:	6a1b      	ldr	r3, [r3, #32]
 801b436:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 801b438:	69fb      	ldr	r3, [r7, #28]
 801b43a:	f003 030f 	and.w	r3, r3, #15
 801b43e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 801b440:	69fb      	ldr	r3, [r7, #28]
 801b442:	0c5b      	lsrs	r3, r3, #17
 801b444:	f003 030f 	and.w	r3, r3, #15
 801b448:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 801b44a:	69fb      	ldr	r3, [r7, #28]
 801b44c:	091b      	lsrs	r3, r3, #4
 801b44e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b452:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 801b454:	697b      	ldr	r3, [r7, #20]
 801b456:	2b02      	cmp	r3, #2
 801b458:	d004      	beq.n	801b464 <HCD_RXQLVL_IRQHandler+0x46>
 801b45a:	697b      	ldr	r3, [r7, #20]
 801b45c:	2b05      	cmp	r3, #5
 801b45e:	f000 80b6 	beq.w	801b5ce <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 801b462:	e0b7      	b.n	801b5d4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 801b464:	693b      	ldr	r3, [r7, #16]
 801b466:	2b00      	cmp	r3, #0
 801b468:	f000 80b3 	beq.w	801b5d2 <HCD_RXQLVL_IRQHandler+0x1b4>
 801b46c:	6879      	ldr	r1, [r7, #4]
 801b46e:	69ba      	ldr	r2, [r7, #24]
 801b470:	4613      	mov	r3, r2
 801b472:	011b      	lsls	r3, r3, #4
 801b474:	1a9b      	subs	r3, r3, r2
 801b476:	009b      	lsls	r3, r3, #2
 801b478:	440b      	add	r3, r1
 801b47a:	332c      	adds	r3, #44	@ 0x2c
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	2b00      	cmp	r3, #0
 801b480:	f000 80a7 	beq.w	801b5d2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 801b484:	6879      	ldr	r1, [r7, #4]
 801b486:	69ba      	ldr	r2, [r7, #24]
 801b488:	4613      	mov	r3, r2
 801b48a:	011b      	lsls	r3, r3, #4
 801b48c:	1a9b      	subs	r3, r3, r2
 801b48e:	009b      	lsls	r3, r3, #2
 801b490:	440b      	add	r3, r1
 801b492:	3338      	adds	r3, #56	@ 0x38
 801b494:	681a      	ldr	r2, [r3, #0]
 801b496:	693b      	ldr	r3, [r7, #16]
 801b498:	18d1      	adds	r1, r2, r3
 801b49a:	6878      	ldr	r0, [r7, #4]
 801b49c:	69ba      	ldr	r2, [r7, #24]
 801b49e:	4613      	mov	r3, r2
 801b4a0:	011b      	lsls	r3, r3, #4
 801b4a2:	1a9b      	subs	r3, r3, r2
 801b4a4:	009b      	lsls	r3, r3, #2
 801b4a6:	4403      	add	r3, r0
 801b4a8:	3334      	adds	r3, #52	@ 0x34
 801b4aa:	681b      	ldr	r3, [r3, #0]
 801b4ac:	4299      	cmp	r1, r3
 801b4ae:	f200 8083 	bhi.w	801b5b8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	6818      	ldr	r0, [r3, #0]
 801b4b6:	6879      	ldr	r1, [r7, #4]
 801b4b8:	69ba      	ldr	r2, [r7, #24]
 801b4ba:	4613      	mov	r3, r2
 801b4bc:	011b      	lsls	r3, r3, #4
 801b4be:	1a9b      	subs	r3, r3, r2
 801b4c0:	009b      	lsls	r3, r3, #2
 801b4c2:	440b      	add	r3, r1
 801b4c4:	332c      	adds	r3, #44	@ 0x2c
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	693a      	ldr	r2, [r7, #16]
 801b4ca:	b292      	uxth	r2, r2
 801b4cc:	4619      	mov	r1, r3
 801b4ce:	f003 fc1d 	bl	801ed0c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 801b4d2:	6879      	ldr	r1, [r7, #4]
 801b4d4:	69ba      	ldr	r2, [r7, #24]
 801b4d6:	4613      	mov	r3, r2
 801b4d8:	011b      	lsls	r3, r3, #4
 801b4da:	1a9b      	subs	r3, r3, r2
 801b4dc:	009b      	lsls	r3, r3, #2
 801b4de:	440b      	add	r3, r1
 801b4e0:	332c      	adds	r3, #44	@ 0x2c
 801b4e2:	681a      	ldr	r2, [r3, #0]
 801b4e4:	693b      	ldr	r3, [r7, #16]
 801b4e6:	18d1      	adds	r1, r2, r3
 801b4e8:	6878      	ldr	r0, [r7, #4]
 801b4ea:	69ba      	ldr	r2, [r7, #24]
 801b4ec:	4613      	mov	r3, r2
 801b4ee:	011b      	lsls	r3, r3, #4
 801b4f0:	1a9b      	subs	r3, r3, r2
 801b4f2:	009b      	lsls	r3, r3, #2
 801b4f4:	4403      	add	r3, r0
 801b4f6:	332c      	adds	r3, #44	@ 0x2c
 801b4f8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 801b4fa:	6879      	ldr	r1, [r7, #4]
 801b4fc:	69ba      	ldr	r2, [r7, #24]
 801b4fe:	4613      	mov	r3, r2
 801b500:	011b      	lsls	r3, r3, #4
 801b502:	1a9b      	subs	r3, r3, r2
 801b504:	009b      	lsls	r3, r3, #2
 801b506:	440b      	add	r3, r1
 801b508:	3338      	adds	r3, #56	@ 0x38
 801b50a:	681a      	ldr	r2, [r3, #0]
 801b50c:	693b      	ldr	r3, [r7, #16]
 801b50e:	18d1      	adds	r1, r2, r3
 801b510:	6878      	ldr	r0, [r7, #4]
 801b512:	69ba      	ldr	r2, [r7, #24]
 801b514:	4613      	mov	r3, r2
 801b516:	011b      	lsls	r3, r3, #4
 801b518:	1a9b      	subs	r3, r3, r2
 801b51a:	009b      	lsls	r3, r3, #2
 801b51c:	4403      	add	r3, r0
 801b51e:	3338      	adds	r3, #56	@ 0x38
 801b520:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 801b522:	69bb      	ldr	r3, [r7, #24]
 801b524:	015a      	lsls	r2, r3, #5
 801b526:	6a3b      	ldr	r3, [r7, #32]
 801b528:	4413      	add	r3, r2
 801b52a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801b52e:	691b      	ldr	r3, [r3, #16]
 801b530:	0cdb      	lsrs	r3, r3, #19
 801b532:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b536:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 801b538:	6879      	ldr	r1, [r7, #4]
 801b53a:	69ba      	ldr	r2, [r7, #24]
 801b53c:	4613      	mov	r3, r2
 801b53e:	011b      	lsls	r3, r3, #4
 801b540:	1a9b      	subs	r3, r3, r2
 801b542:	009b      	lsls	r3, r3, #2
 801b544:	440b      	add	r3, r1
 801b546:	3328      	adds	r3, #40	@ 0x28
 801b548:	881b      	ldrh	r3, [r3, #0]
 801b54a:	461a      	mov	r2, r3
 801b54c:	693b      	ldr	r3, [r7, #16]
 801b54e:	4293      	cmp	r3, r2
 801b550:	d13f      	bne.n	801b5d2 <HCD_RXQLVL_IRQHandler+0x1b4>
 801b552:	68fb      	ldr	r3, [r7, #12]
 801b554:	2b00      	cmp	r3, #0
 801b556:	d03c      	beq.n	801b5d2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 801b558:	69bb      	ldr	r3, [r7, #24]
 801b55a:	015a      	lsls	r2, r3, #5
 801b55c:	6a3b      	ldr	r3, [r7, #32]
 801b55e:	4413      	add	r3, r2
 801b560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801b564:	681b      	ldr	r3, [r3, #0]
 801b566:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801b568:	68bb      	ldr	r3, [r7, #8]
 801b56a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801b56e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 801b570:	68bb      	ldr	r3, [r7, #8]
 801b572:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801b576:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 801b578:	69bb      	ldr	r3, [r7, #24]
 801b57a:	015a      	lsls	r2, r3, #5
 801b57c:	6a3b      	ldr	r3, [r7, #32]
 801b57e:	4413      	add	r3, r2
 801b580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801b584:	461a      	mov	r2, r3
 801b586:	68bb      	ldr	r3, [r7, #8]
 801b588:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 801b58a:	6879      	ldr	r1, [r7, #4]
 801b58c:	69ba      	ldr	r2, [r7, #24]
 801b58e:	4613      	mov	r3, r2
 801b590:	011b      	lsls	r3, r3, #4
 801b592:	1a9b      	subs	r3, r3, r2
 801b594:	009b      	lsls	r3, r3, #2
 801b596:	440b      	add	r3, r1
 801b598:	333c      	adds	r3, #60	@ 0x3c
 801b59a:	781b      	ldrb	r3, [r3, #0]
 801b59c:	f083 0301 	eor.w	r3, r3, #1
 801b5a0:	b2d8      	uxtb	r0, r3
 801b5a2:	6879      	ldr	r1, [r7, #4]
 801b5a4:	69ba      	ldr	r2, [r7, #24]
 801b5a6:	4613      	mov	r3, r2
 801b5a8:	011b      	lsls	r3, r3, #4
 801b5aa:	1a9b      	subs	r3, r3, r2
 801b5ac:	009b      	lsls	r3, r3, #2
 801b5ae:	440b      	add	r3, r1
 801b5b0:	333c      	adds	r3, #60	@ 0x3c
 801b5b2:	4602      	mov	r2, r0
 801b5b4:	701a      	strb	r2, [r3, #0]
      break;
 801b5b6:	e00c      	b.n	801b5d2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 801b5b8:	6879      	ldr	r1, [r7, #4]
 801b5ba:	69ba      	ldr	r2, [r7, #24]
 801b5bc:	4613      	mov	r3, r2
 801b5be:	011b      	lsls	r3, r3, #4
 801b5c0:	1a9b      	subs	r3, r3, r2
 801b5c2:	009b      	lsls	r3, r3, #2
 801b5c4:	440b      	add	r3, r1
 801b5c6:	334c      	adds	r3, #76	@ 0x4c
 801b5c8:	2204      	movs	r2, #4
 801b5ca:	701a      	strb	r2, [r3, #0]
      break;
 801b5cc:	e001      	b.n	801b5d2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 801b5ce:	bf00      	nop
 801b5d0:	e000      	b.n	801b5d4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 801b5d2:	bf00      	nop
  }
}
 801b5d4:	bf00      	nop
 801b5d6:	3728      	adds	r7, #40	@ 0x28
 801b5d8:	46bd      	mov	sp, r7
 801b5da:	bd80      	pop	{r7, pc}

0801b5dc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 801b5dc:	b580      	push	{r7, lr}
 801b5de:	b086      	sub	sp, #24
 801b5e0:	af00      	add	r7, sp, #0
 801b5e2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	681b      	ldr	r3, [r3, #0]
 801b5e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b5ea:	697b      	ldr	r3, [r7, #20]
 801b5ec:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 801b5ee:	693b      	ldr	r3, [r7, #16]
 801b5f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 801b5f4:	681b      	ldr	r3, [r3, #0]
 801b5f6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 801b5f8:	693b      	ldr	r3, [r7, #16]
 801b5fa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 801b5fe:	681b      	ldr	r3, [r3, #0]
 801b600:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 801b602:	68bb      	ldr	r3, [r7, #8]
 801b604:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 801b608:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 801b60a:	68fb      	ldr	r3, [r7, #12]
 801b60c:	f003 0302 	and.w	r3, r3, #2
 801b610:	2b02      	cmp	r3, #2
 801b612:	d10b      	bne.n	801b62c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 801b614:	68fb      	ldr	r3, [r7, #12]
 801b616:	f003 0301 	and.w	r3, r3, #1
 801b61a:	2b01      	cmp	r3, #1
 801b61c:	d102      	bne.n	801b624 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 801b61e:	6878      	ldr	r0, [r7, #4]
 801b620:	f00e fd86 	bl	802a130 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 801b624:	68bb      	ldr	r3, [r7, #8]
 801b626:	f043 0302 	orr.w	r3, r3, #2
 801b62a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 801b62c:	68fb      	ldr	r3, [r7, #12]
 801b62e:	f003 0308 	and.w	r3, r3, #8
 801b632:	2b08      	cmp	r3, #8
 801b634:	d132      	bne.n	801b69c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 801b636:	68bb      	ldr	r3, [r7, #8]
 801b638:	f043 0308 	orr.w	r3, r3, #8
 801b63c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 801b63e:	68fb      	ldr	r3, [r7, #12]
 801b640:	f003 0304 	and.w	r3, r3, #4
 801b644:	2b04      	cmp	r3, #4
 801b646:	d126      	bne.n	801b696 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	7a5b      	ldrb	r3, [r3, #9]
 801b64c:	2b02      	cmp	r3, #2
 801b64e:	d113      	bne.n	801b678 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 801b650:	68fb      	ldr	r3, [r7, #12]
 801b652:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 801b656:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801b65a:	d106      	bne.n	801b66a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	2102      	movs	r1, #2
 801b662:	4618      	mov	r0, r3
 801b664:	f003 fcd6 	bl	801f014 <USB_InitFSLSPClkSel>
 801b668:	e011      	b.n	801b68e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	681b      	ldr	r3, [r3, #0]
 801b66e:	2101      	movs	r1, #1
 801b670:	4618      	mov	r0, r3
 801b672:	f003 fccf 	bl	801f014 <USB_InitFSLSPClkSel>
 801b676:	e00a      	b.n	801b68e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	79db      	ldrb	r3, [r3, #7]
 801b67c:	2b01      	cmp	r3, #1
 801b67e:	d106      	bne.n	801b68e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 801b680:	693b      	ldr	r3, [r7, #16]
 801b682:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801b686:	461a      	mov	r2, r3
 801b688:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801b68c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 801b68e:	6878      	ldr	r0, [r7, #4]
 801b690:	f00e fd7c 	bl	802a18c <HAL_HCD_PortEnabled_Callback>
 801b694:	e002      	b.n	801b69c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 801b696:	6878      	ldr	r0, [r7, #4]
 801b698:	f00e fd86 	bl	802a1a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 801b69c:	68fb      	ldr	r3, [r7, #12]
 801b69e:	f003 0320 	and.w	r3, r3, #32
 801b6a2:	2b20      	cmp	r3, #32
 801b6a4:	d103      	bne.n	801b6ae <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 801b6a6:	68bb      	ldr	r3, [r7, #8]
 801b6a8:	f043 0320 	orr.w	r3, r3, #32
 801b6ac:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 801b6ae:	693b      	ldr	r3, [r7, #16]
 801b6b0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 801b6b4:	461a      	mov	r2, r3
 801b6b6:	68bb      	ldr	r3, [r7, #8]
 801b6b8:	6013      	str	r3, [r2, #0]
}
 801b6ba:	bf00      	nop
 801b6bc:	3718      	adds	r7, #24
 801b6be:	46bd      	mov	sp, r7
 801b6c0:	bd80      	pop	{r7, pc}
	...

0801b6c4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801b6c4:	b480      	push	{r7}
 801b6c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801b6c8:	4b05      	ldr	r3, [pc, #20]	@ (801b6e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	4a04      	ldr	r2, [pc, #16]	@ (801b6e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 801b6ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801b6d2:	6013      	str	r3, [r2, #0]
}
 801b6d4:	bf00      	nop
 801b6d6:	46bd      	mov	sp, r7
 801b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6dc:	4770      	bx	lr
 801b6de:	bf00      	nop
 801b6e0:	40007000 	.word	0x40007000

0801b6e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 801b6e4:	b580      	push	{r7, lr}
 801b6e6:	b082      	sub	sp, #8
 801b6e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 801b6ea:	2300      	movs	r3, #0
 801b6ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 801b6ee:	4b23      	ldr	r3, [pc, #140]	@ (801b77c <HAL_PWREx_EnableOverDrive+0x98>)
 801b6f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b6f2:	4a22      	ldr	r2, [pc, #136]	@ (801b77c <HAL_PWREx_EnableOverDrive+0x98>)
 801b6f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801b6f8:	6413      	str	r3, [r2, #64]	@ 0x40
 801b6fa:	4b20      	ldr	r3, [pc, #128]	@ (801b77c <HAL_PWREx_EnableOverDrive+0x98>)
 801b6fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b6fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801b702:	603b      	str	r3, [r7, #0]
 801b704:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 801b706:	4b1e      	ldr	r3, [pc, #120]	@ (801b780 <HAL_PWREx_EnableOverDrive+0x9c>)
 801b708:	681b      	ldr	r3, [r3, #0]
 801b70a:	4a1d      	ldr	r2, [pc, #116]	@ (801b780 <HAL_PWREx_EnableOverDrive+0x9c>)
 801b70c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801b710:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b712:	f7fc ff59 	bl	80185c8 <HAL_GetTick>
 801b716:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801b718:	e009      	b.n	801b72e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801b71a:	f7fc ff55 	bl	80185c8 <HAL_GetTick>
 801b71e:	4602      	mov	r2, r0
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	1ad3      	subs	r3, r2, r3
 801b724:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801b728:	d901      	bls.n	801b72e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 801b72a:	2303      	movs	r3, #3
 801b72c:	e022      	b.n	801b774 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801b72e:	4b14      	ldr	r3, [pc, #80]	@ (801b780 <HAL_PWREx_EnableOverDrive+0x9c>)
 801b730:	685b      	ldr	r3, [r3, #4]
 801b732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801b736:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b73a:	d1ee      	bne.n	801b71a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801b73c:	4b10      	ldr	r3, [pc, #64]	@ (801b780 <HAL_PWREx_EnableOverDrive+0x9c>)
 801b73e:	681b      	ldr	r3, [r3, #0]
 801b740:	4a0f      	ldr	r2, [pc, #60]	@ (801b780 <HAL_PWREx_EnableOverDrive+0x9c>)
 801b742:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b746:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b748:	f7fc ff3e 	bl	80185c8 <HAL_GetTick>
 801b74c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801b74e:	e009      	b.n	801b764 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801b750:	f7fc ff3a 	bl	80185c8 <HAL_GetTick>
 801b754:	4602      	mov	r2, r0
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	1ad3      	subs	r3, r2, r3
 801b75a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801b75e:	d901      	bls.n	801b764 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 801b760:	2303      	movs	r3, #3
 801b762:	e007      	b.n	801b774 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801b764:	4b06      	ldr	r3, [pc, #24]	@ (801b780 <HAL_PWREx_EnableOverDrive+0x9c>)
 801b766:	685b      	ldr	r3, [r3, #4]
 801b768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801b76c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801b770:	d1ee      	bne.n	801b750 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 801b772:	2300      	movs	r3, #0
}
 801b774:	4618      	mov	r0, r3
 801b776:	3708      	adds	r7, #8
 801b778:	46bd      	mov	sp, r7
 801b77a:	bd80      	pop	{r7, pc}
 801b77c:	40023800 	.word	0x40023800
 801b780:	40007000 	.word	0x40007000

0801b784 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b784:	b580      	push	{r7, lr}
 801b786:	b086      	sub	sp, #24
 801b788:	af00      	add	r7, sp, #0
 801b78a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 801b78c:	2300      	movs	r3, #0
 801b78e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	2b00      	cmp	r3, #0
 801b794:	d101      	bne.n	801b79a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 801b796:	2301      	movs	r3, #1
 801b798:	e29b      	b.n	801bcd2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	681b      	ldr	r3, [r3, #0]
 801b79e:	f003 0301 	and.w	r3, r3, #1
 801b7a2:	2b00      	cmp	r3, #0
 801b7a4:	f000 8087 	beq.w	801b8b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 801b7a8:	4b96      	ldr	r3, [pc, #600]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b7aa:	689b      	ldr	r3, [r3, #8]
 801b7ac:	f003 030c 	and.w	r3, r3, #12
 801b7b0:	2b04      	cmp	r3, #4
 801b7b2:	d00c      	beq.n	801b7ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801b7b4:	4b93      	ldr	r3, [pc, #588]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b7b6:	689b      	ldr	r3, [r3, #8]
 801b7b8:	f003 030c 	and.w	r3, r3, #12
 801b7bc:	2b08      	cmp	r3, #8
 801b7be:	d112      	bne.n	801b7e6 <HAL_RCC_OscConfig+0x62>
 801b7c0:	4b90      	ldr	r3, [pc, #576]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b7c2:	685b      	ldr	r3, [r3, #4]
 801b7c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801b7c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801b7cc:	d10b      	bne.n	801b7e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b7ce:	4b8d      	ldr	r3, [pc, #564]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b7d0:	681b      	ldr	r3, [r3, #0]
 801b7d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	d06c      	beq.n	801b8b4 <HAL_RCC_OscConfig+0x130>
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	685b      	ldr	r3, [r3, #4]
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d168      	bne.n	801b8b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801b7e2:	2301      	movs	r3, #1
 801b7e4:	e275      	b.n	801bcd2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	685b      	ldr	r3, [r3, #4]
 801b7ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b7ee:	d106      	bne.n	801b7fe <HAL_RCC_OscConfig+0x7a>
 801b7f0:	4b84      	ldr	r3, [pc, #528]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b7f2:	681b      	ldr	r3, [r3, #0]
 801b7f4:	4a83      	ldr	r2, [pc, #524]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b7f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801b7fa:	6013      	str	r3, [r2, #0]
 801b7fc:	e02e      	b.n	801b85c <HAL_RCC_OscConfig+0xd8>
 801b7fe:	687b      	ldr	r3, [r7, #4]
 801b800:	685b      	ldr	r3, [r3, #4]
 801b802:	2b00      	cmp	r3, #0
 801b804:	d10c      	bne.n	801b820 <HAL_RCC_OscConfig+0x9c>
 801b806:	4b7f      	ldr	r3, [pc, #508]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b808:	681b      	ldr	r3, [r3, #0]
 801b80a:	4a7e      	ldr	r2, [pc, #504]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b80c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801b810:	6013      	str	r3, [r2, #0]
 801b812:	4b7c      	ldr	r3, [pc, #496]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b814:	681b      	ldr	r3, [r3, #0]
 801b816:	4a7b      	ldr	r2, [pc, #492]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b818:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801b81c:	6013      	str	r3, [r2, #0]
 801b81e:	e01d      	b.n	801b85c <HAL_RCC_OscConfig+0xd8>
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	685b      	ldr	r3, [r3, #4]
 801b824:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801b828:	d10c      	bne.n	801b844 <HAL_RCC_OscConfig+0xc0>
 801b82a:	4b76      	ldr	r3, [pc, #472]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	4a75      	ldr	r2, [pc, #468]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b830:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801b834:	6013      	str	r3, [r2, #0]
 801b836:	4b73      	ldr	r3, [pc, #460]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b838:	681b      	ldr	r3, [r3, #0]
 801b83a:	4a72      	ldr	r2, [pc, #456]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b83c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801b840:	6013      	str	r3, [r2, #0]
 801b842:	e00b      	b.n	801b85c <HAL_RCC_OscConfig+0xd8>
 801b844:	4b6f      	ldr	r3, [pc, #444]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b846:	681b      	ldr	r3, [r3, #0]
 801b848:	4a6e      	ldr	r2, [pc, #440]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b84a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801b84e:	6013      	str	r3, [r2, #0]
 801b850:	4b6c      	ldr	r3, [pc, #432]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b852:	681b      	ldr	r3, [r3, #0]
 801b854:	4a6b      	ldr	r2, [pc, #428]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b856:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801b85a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	685b      	ldr	r3, [r3, #4]
 801b860:	2b00      	cmp	r3, #0
 801b862:	d013      	beq.n	801b88c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b864:	f7fc feb0 	bl	80185c8 <HAL_GetTick>
 801b868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b86a:	e008      	b.n	801b87e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b86c:	f7fc feac 	bl	80185c8 <HAL_GetTick>
 801b870:	4602      	mov	r2, r0
 801b872:	693b      	ldr	r3, [r7, #16]
 801b874:	1ad3      	subs	r3, r2, r3
 801b876:	2b64      	cmp	r3, #100	@ 0x64
 801b878:	d901      	bls.n	801b87e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801b87a:	2303      	movs	r3, #3
 801b87c:	e229      	b.n	801bcd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b87e:	4b61      	ldr	r3, [pc, #388]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b880:	681b      	ldr	r3, [r3, #0]
 801b882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801b886:	2b00      	cmp	r3, #0
 801b888:	d0f0      	beq.n	801b86c <HAL_RCC_OscConfig+0xe8>
 801b88a:	e014      	b.n	801b8b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b88c:	f7fc fe9c 	bl	80185c8 <HAL_GetTick>
 801b890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801b892:	e008      	b.n	801b8a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b894:	f7fc fe98 	bl	80185c8 <HAL_GetTick>
 801b898:	4602      	mov	r2, r0
 801b89a:	693b      	ldr	r3, [r7, #16]
 801b89c:	1ad3      	subs	r3, r2, r3
 801b89e:	2b64      	cmp	r3, #100	@ 0x64
 801b8a0:	d901      	bls.n	801b8a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801b8a2:	2303      	movs	r3, #3
 801b8a4:	e215      	b.n	801bcd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801b8a6:	4b57      	ldr	r3, [pc, #348]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b8a8:	681b      	ldr	r3, [r3, #0]
 801b8aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d1f0      	bne.n	801b894 <HAL_RCC_OscConfig+0x110>
 801b8b2:	e000      	b.n	801b8b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b8b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	681b      	ldr	r3, [r3, #0]
 801b8ba:	f003 0302 	and.w	r3, r3, #2
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	d069      	beq.n	801b996 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801b8c2:	4b50      	ldr	r3, [pc, #320]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b8c4:	689b      	ldr	r3, [r3, #8]
 801b8c6:	f003 030c 	and.w	r3, r3, #12
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	d00b      	beq.n	801b8e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801b8ce:	4b4d      	ldr	r3, [pc, #308]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b8d0:	689b      	ldr	r3, [r3, #8]
 801b8d2:	f003 030c 	and.w	r3, r3, #12
 801b8d6:	2b08      	cmp	r3, #8
 801b8d8:	d11c      	bne.n	801b914 <HAL_RCC_OscConfig+0x190>
 801b8da:	4b4a      	ldr	r3, [pc, #296]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b8dc:	685b      	ldr	r3, [r3, #4]
 801b8de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	d116      	bne.n	801b914 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801b8e6:	4b47      	ldr	r3, [pc, #284]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b8e8:	681b      	ldr	r3, [r3, #0]
 801b8ea:	f003 0302 	and.w	r3, r3, #2
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	d005      	beq.n	801b8fe <HAL_RCC_OscConfig+0x17a>
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	68db      	ldr	r3, [r3, #12]
 801b8f6:	2b01      	cmp	r3, #1
 801b8f8:	d001      	beq.n	801b8fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801b8fa:	2301      	movs	r3, #1
 801b8fc:	e1e9      	b.n	801bcd2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b8fe:	4b41      	ldr	r3, [pc, #260]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b900:	681b      	ldr	r3, [r3, #0]
 801b902:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	691b      	ldr	r3, [r3, #16]
 801b90a:	00db      	lsls	r3, r3, #3
 801b90c:	493d      	ldr	r1, [pc, #244]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b90e:	4313      	orrs	r3, r2
 801b910:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801b912:	e040      	b.n	801b996 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	68db      	ldr	r3, [r3, #12]
 801b918:	2b00      	cmp	r3, #0
 801b91a:	d023      	beq.n	801b964 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801b91c:	4b39      	ldr	r3, [pc, #228]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b91e:	681b      	ldr	r3, [r3, #0]
 801b920:	4a38      	ldr	r2, [pc, #224]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b922:	f043 0301 	orr.w	r3, r3, #1
 801b926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b928:	f7fc fe4e 	bl	80185c8 <HAL_GetTick>
 801b92c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b92e:	e008      	b.n	801b942 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b930:	f7fc fe4a 	bl	80185c8 <HAL_GetTick>
 801b934:	4602      	mov	r2, r0
 801b936:	693b      	ldr	r3, [r7, #16]
 801b938:	1ad3      	subs	r3, r2, r3
 801b93a:	2b02      	cmp	r3, #2
 801b93c:	d901      	bls.n	801b942 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 801b93e:	2303      	movs	r3, #3
 801b940:	e1c7      	b.n	801bcd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b942:	4b30      	ldr	r3, [pc, #192]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b944:	681b      	ldr	r3, [r3, #0]
 801b946:	f003 0302 	and.w	r3, r3, #2
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	d0f0      	beq.n	801b930 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b94e:	4b2d      	ldr	r3, [pc, #180]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b950:	681b      	ldr	r3, [r3, #0]
 801b952:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 801b956:	687b      	ldr	r3, [r7, #4]
 801b958:	691b      	ldr	r3, [r3, #16]
 801b95a:	00db      	lsls	r3, r3, #3
 801b95c:	4929      	ldr	r1, [pc, #164]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b95e:	4313      	orrs	r3, r2
 801b960:	600b      	str	r3, [r1, #0]
 801b962:	e018      	b.n	801b996 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b964:	4b27      	ldr	r3, [pc, #156]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b966:	681b      	ldr	r3, [r3, #0]
 801b968:	4a26      	ldr	r2, [pc, #152]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b96a:	f023 0301 	bic.w	r3, r3, #1
 801b96e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b970:	f7fc fe2a 	bl	80185c8 <HAL_GetTick>
 801b974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801b976:	e008      	b.n	801b98a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b978:	f7fc fe26 	bl	80185c8 <HAL_GetTick>
 801b97c:	4602      	mov	r2, r0
 801b97e:	693b      	ldr	r3, [r7, #16]
 801b980:	1ad3      	subs	r3, r2, r3
 801b982:	2b02      	cmp	r3, #2
 801b984:	d901      	bls.n	801b98a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801b986:	2303      	movs	r3, #3
 801b988:	e1a3      	b.n	801bcd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801b98a:	4b1e      	ldr	r3, [pc, #120]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b98c:	681b      	ldr	r3, [r3, #0]
 801b98e:	f003 0302 	and.w	r3, r3, #2
 801b992:	2b00      	cmp	r3, #0
 801b994:	d1f0      	bne.n	801b978 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	681b      	ldr	r3, [r3, #0]
 801b99a:	f003 0308 	and.w	r3, r3, #8
 801b99e:	2b00      	cmp	r3, #0
 801b9a0:	d038      	beq.n	801ba14 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	695b      	ldr	r3, [r3, #20]
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	d019      	beq.n	801b9de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b9aa:	4b16      	ldr	r3, [pc, #88]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b9ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b9ae:	4a15      	ldr	r2, [pc, #84]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b9b0:	f043 0301 	orr.w	r3, r3, #1
 801b9b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b9b6:	f7fc fe07 	bl	80185c8 <HAL_GetTick>
 801b9ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801b9bc:	e008      	b.n	801b9d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b9be:	f7fc fe03 	bl	80185c8 <HAL_GetTick>
 801b9c2:	4602      	mov	r2, r0
 801b9c4:	693b      	ldr	r3, [r7, #16]
 801b9c6:	1ad3      	subs	r3, r2, r3
 801b9c8:	2b02      	cmp	r3, #2
 801b9ca:	d901      	bls.n	801b9d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801b9cc:	2303      	movs	r3, #3
 801b9ce:	e180      	b.n	801bcd2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801b9d0:	4b0c      	ldr	r3, [pc, #48]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b9d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b9d4:	f003 0302 	and.w	r3, r3, #2
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d0f0      	beq.n	801b9be <HAL_RCC_OscConfig+0x23a>
 801b9dc:	e01a      	b.n	801ba14 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b9de:	4b09      	ldr	r3, [pc, #36]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b9e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b9e2:	4a08      	ldr	r2, [pc, #32]	@ (801ba04 <HAL_RCC_OscConfig+0x280>)
 801b9e4:	f023 0301 	bic.w	r3, r3, #1
 801b9e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b9ea:	f7fc fded 	bl	80185c8 <HAL_GetTick>
 801b9ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801b9f0:	e00a      	b.n	801ba08 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b9f2:	f7fc fde9 	bl	80185c8 <HAL_GetTick>
 801b9f6:	4602      	mov	r2, r0
 801b9f8:	693b      	ldr	r3, [r7, #16]
 801b9fa:	1ad3      	subs	r3, r2, r3
 801b9fc:	2b02      	cmp	r3, #2
 801b9fe:	d903      	bls.n	801ba08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801ba00:	2303      	movs	r3, #3
 801ba02:	e166      	b.n	801bcd2 <HAL_RCC_OscConfig+0x54e>
 801ba04:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801ba08:	4b92      	ldr	r3, [pc, #584]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801ba0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ba0c:	f003 0302 	and.w	r3, r3, #2
 801ba10:	2b00      	cmp	r3, #0
 801ba12:	d1ee      	bne.n	801b9f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	681b      	ldr	r3, [r3, #0]
 801ba18:	f003 0304 	and.w	r3, r3, #4
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	f000 80a4 	beq.w	801bb6a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801ba22:	4b8c      	ldr	r3, [pc, #560]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801ba24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ba26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801ba2a:	2b00      	cmp	r3, #0
 801ba2c:	d10d      	bne.n	801ba4a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 801ba2e:	4b89      	ldr	r3, [pc, #548]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801ba30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ba32:	4a88      	ldr	r2, [pc, #544]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801ba34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801ba38:	6413      	str	r3, [r2, #64]	@ 0x40
 801ba3a:	4b86      	ldr	r3, [pc, #536]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801ba3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ba3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801ba42:	60bb      	str	r3, [r7, #8]
 801ba44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801ba46:	2301      	movs	r3, #1
 801ba48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801ba4a:	4b83      	ldr	r3, [pc, #524]	@ (801bc58 <HAL_RCC_OscConfig+0x4d4>)
 801ba4c:	681b      	ldr	r3, [r3, #0]
 801ba4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ba52:	2b00      	cmp	r3, #0
 801ba54:	d118      	bne.n	801ba88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 801ba56:	4b80      	ldr	r3, [pc, #512]	@ (801bc58 <HAL_RCC_OscConfig+0x4d4>)
 801ba58:	681b      	ldr	r3, [r3, #0]
 801ba5a:	4a7f      	ldr	r2, [pc, #508]	@ (801bc58 <HAL_RCC_OscConfig+0x4d4>)
 801ba5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801ba60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801ba62:	f7fc fdb1 	bl	80185c8 <HAL_GetTick>
 801ba66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801ba68:	e008      	b.n	801ba7c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801ba6a:	f7fc fdad 	bl	80185c8 <HAL_GetTick>
 801ba6e:	4602      	mov	r2, r0
 801ba70:	693b      	ldr	r3, [r7, #16]
 801ba72:	1ad3      	subs	r3, r2, r3
 801ba74:	2b64      	cmp	r3, #100	@ 0x64
 801ba76:	d901      	bls.n	801ba7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 801ba78:	2303      	movs	r3, #3
 801ba7a:	e12a      	b.n	801bcd2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801ba7c:	4b76      	ldr	r3, [pc, #472]	@ (801bc58 <HAL_RCC_OscConfig+0x4d4>)
 801ba7e:	681b      	ldr	r3, [r3, #0]
 801ba80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	d0f0      	beq.n	801ba6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	689b      	ldr	r3, [r3, #8]
 801ba8c:	2b01      	cmp	r3, #1
 801ba8e:	d106      	bne.n	801ba9e <HAL_RCC_OscConfig+0x31a>
 801ba90:	4b70      	ldr	r3, [pc, #448]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801ba92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ba94:	4a6f      	ldr	r2, [pc, #444]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801ba96:	f043 0301 	orr.w	r3, r3, #1
 801ba9a:	6713      	str	r3, [r2, #112]	@ 0x70
 801ba9c:	e02d      	b.n	801bafa <HAL_RCC_OscConfig+0x376>
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	689b      	ldr	r3, [r3, #8]
 801baa2:	2b00      	cmp	r3, #0
 801baa4:	d10c      	bne.n	801bac0 <HAL_RCC_OscConfig+0x33c>
 801baa6:	4b6b      	ldr	r3, [pc, #428]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801baa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801baaa:	4a6a      	ldr	r2, [pc, #424]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801baac:	f023 0301 	bic.w	r3, r3, #1
 801bab0:	6713      	str	r3, [r2, #112]	@ 0x70
 801bab2:	4b68      	ldr	r3, [pc, #416]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801bab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bab6:	4a67      	ldr	r2, [pc, #412]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801bab8:	f023 0304 	bic.w	r3, r3, #4
 801babc:	6713      	str	r3, [r2, #112]	@ 0x70
 801babe:	e01c      	b.n	801bafa <HAL_RCC_OscConfig+0x376>
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	689b      	ldr	r3, [r3, #8]
 801bac4:	2b05      	cmp	r3, #5
 801bac6:	d10c      	bne.n	801bae2 <HAL_RCC_OscConfig+0x35e>
 801bac8:	4b62      	ldr	r3, [pc, #392]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801baca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bacc:	4a61      	ldr	r2, [pc, #388]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801bace:	f043 0304 	orr.w	r3, r3, #4
 801bad2:	6713      	str	r3, [r2, #112]	@ 0x70
 801bad4:	4b5f      	ldr	r3, [pc, #380]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801bad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bad8:	4a5e      	ldr	r2, [pc, #376]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801bada:	f043 0301 	orr.w	r3, r3, #1
 801bade:	6713      	str	r3, [r2, #112]	@ 0x70
 801bae0:	e00b      	b.n	801bafa <HAL_RCC_OscConfig+0x376>
 801bae2:	4b5c      	ldr	r3, [pc, #368]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801bae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bae6:	4a5b      	ldr	r2, [pc, #364]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801bae8:	f023 0301 	bic.w	r3, r3, #1
 801baec:	6713      	str	r3, [r2, #112]	@ 0x70
 801baee:	4b59      	ldr	r3, [pc, #356]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801baf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801baf2:	4a58      	ldr	r2, [pc, #352]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801baf4:	f023 0304 	bic.w	r3, r3, #4
 801baf8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	689b      	ldr	r3, [r3, #8]
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	d015      	beq.n	801bb2e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bb02:	f7fc fd61 	bl	80185c8 <HAL_GetTick>
 801bb06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801bb08:	e00a      	b.n	801bb20 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801bb0a:	f7fc fd5d 	bl	80185c8 <HAL_GetTick>
 801bb0e:	4602      	mov	r2, r0
 801bb10:	693b      	ldr	r3, [r7, #16]
 801bb12:	1ad3      	subs	r3, r2, r3
 801bb14:	f241 3288 	movw	r2, #5000	@ 0x1388
 801bb18:	4293      	cmp	r3, r2
 801bb1a:	d901      	bls.n	801bb20 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 801bb1c:	2303      	movs	r3, #3
 801bb1e:	e0d8      	b.n	801bcd2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801bb20:	4b4c      	ldr	r3, [pc, #304]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801bb22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bb24:	f003 0302 	and.w	r3, r3, #2
 801bb28:	2b00      	cmp	r3, #0
 801bb2a:	d0ee      	beq.n	801bb0a <HAL_RCC_OscConfig+0x386>
 801bb2c:	e014      	b.n	801bb58 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bb2e:	f7fc fd4b 	bl	80185c8 <HAL_GetTick>
 801bb32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801bb34:	e00a      	b.n	801bb4c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801bb36:	f7fc fd47 	bl	80185c8 <HAL_GetTick>
 801bb3a:	4602      	mov	r2, r0
 801bb3c:	693b      	ldr	r3, [r7, #16]
 801bb3e:	1ad3      	subs	r3, r2, r3
 801bb40:	f241 3288 	movw	r2, #5000	@ 0x1388
 801bb44:	4293      	cmp	r3, r2
 801bb46:	d901      	bls.n	801bb4c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 801bb48:	2303      	movs	r3, #3
 801bb4a:	e0c2      	b.n	801bcd2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801bb4c:	4b41      	ldr	r3, [pc, #260]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801bb4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bb50:	f003 0302 	and.w	r3, r3, #2
 801bb54:	2b00      	cmp	r3, #0
 801bb56:	d1ee      	bne.n	801bb36 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801bb58:	7dfb      	ldrb	r3, [r7, #23]
 801bb5a:	2b01      	cmp	r3, #1
 801bb5c:	d105      	bne.n	801bb6a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801bb5e:	4b3d      	ldr	r3, [pc, #244]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801bb60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bb62:	4a3c      	ldr	r2, [pc, #240]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801bb64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801bb68:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801bb6a:	687b      	ldr	r3, [r7, #4]
 801bb6c:	699b      	ldr	r3, [r3, #24]
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	f000 80ae 	beq.w	801bcd0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801bb74:	4b37      	ldr	r3, [pc, #220]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801bb76:	689b      	ldr	r3, [r3, #8]
 801bb78:	f003 030c 	and.w	r3, r3, #12
 801bb7c:	2b08      	cmp	r3, #8
 801bb7e:	d06d      	beq.n	801bc5c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	699b      	ldr	r3, [r3, #24]
 801bb84:	2b02      	cmp	r3, #2
 801bb86:	d14b      	bne.n	801bc20 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bb88:	4b32      	ldr	r3, [pc, #200]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	4a31      	ldr	r2, [pc, #196]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801bb8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801bb92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bb94:	f7fc fd18 	bl	80185c8 <HAL_GetTick>
 801bb98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bb9a:	e008      	b.n	801bbae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801bb9c:	f7fc fd14 	bl	80185c8 <HAL_GetTick>
 801bba0:	4602      	mov	r2, r0
 801bba2:	693b      	ldr	r3, [r7, #16]
 801bba4:	1ad3      	subs	r3, r2, r3
 801bba6:	2b02      	cmp	r3, #2
 801bba8:	d901      	bls.n	801bbae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 801bbaa:	2303      	movs	r3, #3
 801bbac:	e091      	b.n	801bcd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bbae:	4b29      	ldr	r3, [pc, #164]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801bbb0:	681b      	ldr	r3, [r3, #0]
 801bbb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	d1f0      	bne.n	801bb9c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801bbba:	687b      	ldr	r3, [r7, #4]
 801bbbc:	69da      	ldr	r2, [r3, #28]
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	6a1b      	ldr	r3, [r3, #32]
 801bbc2:	431a      	orrs	r2, r3
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bbc8:	019b      	lsls	r3, r3, #6
 801bbca:	431a      	orrs	r2, r3
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bbd0:	085b      	lsrs	r3, r3, #1
 801bbd2:	3b01      	subs	r3, #1
 801bbd4:	041b      	lsls	r3, r3, #16
 801bbd6:	431a      	orrs	r2, r3
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bbdc:	061b      	lsls	r3, r3, #24
 801bbde:	431a      	orrs	r2, r3
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bbe4:	071b      	lsls	r3, r3, #28
 801bbe6:	491b      	ldr	r1, [pc, #108]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801bbe8:	4313      	orrs	r3, r2
 801bbea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801bbec:	4b19      	ldr	r3, [pc, #100]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801bbee:	681b      	ldr	r3, [r3, #0]
 801bbf0:	4a18      	ldr	r2, [pc, #96]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801bbf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801bbf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bbf8:	f7fc fce6 	bl	80185c8 <HAL_GetTick>
 801bbfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801bbfe:	e008      	b.n	801bc12 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801bc00:	f7fc fce2 	bl	80185c8 <HAL_GetTick>
 801bc04:	4602      	mov	r2, r0
 801bc06:	693b      	ldr	r3, [r7, #16]
 801bc08:	1ad3      	subs	r3, r2, r3
 801bc0a:	2b02      	cmp	r3, #2
 801bc0c:	d901      	bls.n	801bc12 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 801bc0e:	2303      	movs	r3, #3
 801bc10:	e05f      	b.n	801bcd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801bc12:	4b10      	ldr	r3, [pc, #64]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801bc14:	681b      	ldr	r3, [r3, #0]
 801bc16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801bc1a:	2b00      	cmp	r3, #0
 801bc1c:	d0f0      	beq.n	801bc00 <HAL_RCC_OscConfig+0x47c>
 801bc1e:	e057      	b.n	801bcd0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bc20:	4b0c      	ldr	r3, [pc, #48]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801bc22:	681b      	ldr	r3, [r3, #0]
 801bc24:	4a0b      	ldr	r2, [pc, #44]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801bc26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801bc2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bc2c:	f7fc fccc 	bl	80185c8 <HAL_GetTick>
 801bc30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bc32:	e008      	b.n	801bc46 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801bc34:	f7fc fcc8 	bl	80185c8 <HAL_GetTick>
 801bc38:	4602      	mov	r2, r0
 801bc3a:	693b      	ldr	r3, [r7, #16]
 801bc3c:	1ad3      	subs	r3, r2, r3
 801bc3e:	2b02      	cmp	r3, #2
 801bc40:	d901      	bls.n	801bc46 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 801bc42:	2303      	movs	r3, #3
 801bc44:	e045      	b.n	801bcd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bc46:	4b03      	ldr	r3, [pc, #12]	@ (801bc54 <HAL_RCC_OscConfig+0x4d0>)
 801bc48:	681b      	ldr	r3, [r3, #0]
 801bc4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	d1f0      	bne.n	801bc34 <HAL_RCC_OscConfig+0x4b0>
 801bc52:	e03d      	b.n	801bcd0 <HAL_RCC_OscConfig+0x54c>
 801bc54:	40023800 	.word	0x40023800
 801bc58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 801bc5c:	4b1f      	ldr	r3, [pc, #124]	@ (801bcdc <HAL_RCC_OscConfig+0x558>)
 801bc5e:	685b      	ldr	r3, [r3, #4]
 801bc60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	699b      	ldr	r3, [r3, #24]
 801bc66:	2b01      	cmp	r3, #1
 801bc68:	d030      	beq.n	801bccc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bc6a:	68fb      	ldr	r3, [r7, #12]
 801bc6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 801bc70:	687b      	ldr	r3, [r7, #4]
 801bc72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801bc74:	429a      	cmp	r2, r3
 801bc76:	d129      	bne.n	801bccc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801bc78:	68fb      	ldr	r3, [r7, #12]
 801bc7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bc82:	429a      	cmp	r2, r3
 801bc84:	d122      	bne.n	801bccc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801bc86:	68fa      	ldr	r2, [r7, #12]
 801bc88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 801bc8c:	4013      	ands	r3, r2
 801bc8e:	687a      	ldr	r2, [r7, #4]
 801bc90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801bc92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801bc94:	4293      	cmp	r3, r2
 801bc96:	d119      	bne.n	801bccc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 801bc98:	68fb      	ldr	r3, [r7, #12]
 801bc9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 801bc9e:	687b      	ldr	r3, [r7, #4]
 801bca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bca2:	085b      	lsrs	r3, r3, #1
 801bca4:	3b01      	subs	r3, #1
 801bca6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801bca8:	429a      	cmp	r2, r3
 801bcaa:	d10f      	bne.n	801bccc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801bcac:	68fb      	ldr	r3, [r7, #12]
 801bcae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 801bcb2:	687b      	ldr	r3, [r7, #4]
 801bcb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bcb6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 801bcb8:	429a      	cmp	r2, r3
 801bcba:	d107      	bne.n	801bccc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801bcbc:	68fb      	ldr	r3, [r7, #12]
 801bcbe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bcc6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801bcc8:	429a      	cmp	r2, r3
 801bcca:	d001      	beq.n	801bcd0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 801bccc:	2301      	movs	r3, #1
 801bcce:	e000      	b.n	801bcd2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 801bcd0:	2300      	movs	r3, #0
}
 801bcd2:	4618      	mov	r0, r3
 801bcd4:	3718      	adds	r7, #24
 801bcd6:	46bd      	mov	sp, r7
 801bcd8:	bd80      	pop	{r7, pc}
 801bcda:	bf00      	nop
 801bcdc:	40023800 	.word	0x40023800

0801bce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801bce0:	b580      	push	{r7, lr}
 801bce2:	b084      	sub	sp, #16
 801bce4:	af00      	add	r7, sp, #0
 801bce6:	6078      	str	r0, [r7, #4]
 801bce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 801bcea:	2300      	movs	r3, #0
 801bcec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801bcee:	687b      	ldr	r3, [r7, #4]
 801bcf0:	2b00      	cmp	r3, #0
 801bcf2:	d101      	bne.n	801bcf8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801bcf4:	2301      	movs	r3, #1
 801bcf6:	e0d0      	b.n	801be9a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801bcf8:	4b6a      	ldr	r3, [pc, #424]	@ (801bea4 <HAL_RCC_ClockConfig+0x1c4>)
 801bcfa:	681b      	ldr	r3, [r3, #0]
 801bcfc:	f003 030f 	and.w	r3, r3, #15
 801bd00:	683a      	ldr	r2, [r7, #0]
 801bd02:	429a      	cmp	r2, r3
 801bd04:	d910      	bls.n	801bd28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bd06:	4b67      	ldr	r3, [pc, #412]	@ (801bea4 <HAL_RCC_ClockConfig+0x1c4>)
 801bd08:	681b      	ldr	r3, [r3, #0]
 801bd0a:	f023 020f 	bic.w	r2, r3, #15
 801bd0e:	4965      	ldr	r1, [pc, #404]	@ (801bea4 <HAL_RCC_ClockConfig+0x1c4>)
 801bd10:	683b      	ldr	r3, [r7, #0]
 801bd12:	4313      	orrs	r3, r2
 801bd14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bd16:	4b63      	ldr	r3, [pc, #396]	@ (801bea4 <HAL_RCC_ClockConfig+0x1c4>)
 801bd18:	681b      	ldr	r3, [r3, #0]
 801bd1a:	f003 030f 	and.w	r3, r3, #15
 801bd1e:	683a      	ldr	r2, [r7, #0]
 801bd20:	429a      	cmp	r2, r3
 801bd22:	d001      	beq.n	801bd28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801bd24:	2301      	movs	r3, #1
 801bd26:	e0b8      	b.n	801be9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	681b      	ldr	r3, [r3, #0]
 801bd2c:	f003 0302 	and.w	r3, r3, #2
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	d020      	beq.n	801bd76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801bd34:	687b      	ldr	r3, [r7, #4]
 801bd36:	681b      	ldr	r3, [r3, #0]
 801bd38:	f003 0304 	and.w	r3, r3, #4
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	d005      	beq.n	801bd4c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801bd40:	4b59      	ldr	r3, [pc, #356]	@ (801bea8 <HAL_RCC_ClockConfig+0x1c8>)
 801bd42:	689b      	ldr	r3, [r3, #8]
 801bd44:	4a58      	ldr	r2, [pc, #352]	@ (801bea8 <HAL_RCC_ClockConfig+0x1c8>)
 801bd46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 801bd4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	681b      	ldr	r3, [r3, #0]
 801bd50:	f003 0308 	and.w	r3, r3, #8
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d005      	beq.n	801bd64 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801bd58:	4b53      	ldr	r3, [pc, #332]	@ (801bea8 <HAL_RCC_ClockConfig+0x1c8>)
 801bd5a:	689b      	ldr	r3, [r3, #8]
 801bd5c:	4a52      	ldr	r2, [pc, #328]	@ (801bea8 <HAL_RCC_ClockConfig+0x1c8>)
 801bd5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 801bd62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801bd64:	4b50      	ldr	r3, [pc, #320]	@ (801bea8 <HAL_RCC_ClockConfig+0x1c8>)
 801bd66:	689b      	ldr	r3, [r3, #8]
 801bd68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	689b      	ldr	r3, [r3, #8]
 801bd70:	494d      	ldr	r1, [pc, #308]	@ (801bea8 <HAL_RCC_ClockConfig+0x1c8>)
 801bd72:	4313      	orrs	r3, r2
 801bd74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	681b      	ldr	r3, [r3, #0]
 801bd7a:	f003 0301 	and.w	r3, r3, #1
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d040      	beq.n	801be04 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	685b      	ldr	r3, [r3, #4]
 801bd86:	2b01      	cmp	r3, #1
 801bd88:	d107      	bne.n	801bd9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bd8a:	4b47      	ldr	r3, [pc, #284]	@ (801bea8 <HAL_RCC_ClockConfig+0x1c8>)
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801bd92:	2b00      	cmp	r3, #0
 801bd94:	d115      	bne.n	801bdc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801bd96:	2301      	movs	r3, #1
 801bd98:	e07f      	b.n	801be9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	685b      	ldr	r3, [r3, #4]
 801bd9e:	2b02      	cmp	r3, #2
 801bda0:	d107      	bne.n	801bdb2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801bda2:	4b41      	ldr	r3, [pc, #260]	@ (801bea8 <HAL_RCC_ClockConfig+0x1c8>)
 801bda4:	681b      	ldr	r3, [r3, #0]
 801bda6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801bdaa:	2b00      	cmp	r3, #0
 801bdac:	d109      	bne.n	801bdc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801bdae:	2301      	movs	r3, #1
 801bdb0:	e073      	b.n	801be9a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bdb2:	4b3d      	ldr	r3, [pc, #244]	@ (801bea8 <HAL_RCC_ClockConfig+0x1c8>)
 801bdb4:	681b      	ldr	r3, [r3, #0]
 801bdb6:	f003 0302 	and.w	r3, r3, #2
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	d101      	bne.n	801bdc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801bdbe:	2301      	movs	r3, #1
 801bdc0:	e06b      	b.n	801be9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801bdc2:	4b39      	ldr	r3, [pc, #228]	@ (801bea8 <HAL_RCC_ClockConfig+0x1c8>)
 801bdc4:	689b      	ldr	r3, [r3, #8]
 801bdc6:	f023 0203 	bic.w	r2, r3, #3
 801bdca:	687b      	ldr	r3, [r7, #4]
 801bdcc:	685b      	ldr	r3, [r3, #4]
 801bdce:	4936      	ldr	r1, [pc, #216]	@ (801bea8 <HAL_RCC_ClockConfig+0x1c8>)
 801bdd0:	4313      	orrs	r3, r2
 801bdd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801bdd4:	f7fc fbf8 	bl	80185c8 <HAL_GetTick>
 801bdd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801bdda:	e00a      	b.n	801bdf2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bddc:	f7fc fbf4 	bl	80185c8 <HAL_GetTick>
 801bde0:	4602      	mov	r2, r0
 801bde2:	68fb      	ldr	r3, [r7, #12]
 801bde4:	1ad3      	subs	r3, r2, r3
 801bde6:	f241 3288 	movw	r2, #5000	@ 0x1388
 801bdea:	4293      	cmp	r3, r2
 801bdec:	d901      	bls.n	801bdf2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 801bdee:	2303      	movs	r3, #3
 801bdf0:	e053      	b.n	801be9a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801bdf2:	4b2d      	ldr	r3, [pc, #180]	@ (801bea8 <HAL_RCC_ClockConfig+0x1c8>)
 801bdf4:	689b      	ldr	r3, [r3, #8]
 801bdf6:	f003 020c 	and.w	r2, r3, #12
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	685b      	ldr	r3, [r3, #4]
 801bdfe:	009b      	lsls	r3, r3, #2
 801be00:	429a      	cmp	r2, r3
 801be02:	d1eb      	bne.n	801bddc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801be04:	4b27      	ldr	r3, [pc, #156]	@ (801bea4 <HAL_RCC_ClockConfig+0x1c4>)
 801be06:	681b      	ldr	r3, [r3, #0]
 801be08:	f003 030f 	and.w	r3, r3, #15
 801be0c:	683a      	ldr	r2, [r7, #0]
 801be0e:	429a      	cmp	r2, r3
 801be10:	d210      	bcs.n	801be34 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801be12:	4b24      	ldr	r3, [pc, #144]	@ (801bea4 <HAL_RCC_ClockConfig+0x1c4>)
 801be14:	681b      	ldr	r3, [r3, #0]
 801be16:	f023 020f 	bic.w	r2, r3, #15
 801be1a:	4922      	ldr	r1, [pc, #136]	@ (801bea4 <HAL_RCC_ClockConfig+0x1c4>)
 801be1c:	683b      	ldr	r3, [r7, #0]
 801be1e:	4313      	orrs	r3, r2
 801be20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801be22:	4b20      	ldr	r3, [pc, #128]	@ (801bea4 <HAL_RCC_ClockConfig+0x1c4>)
 801be24:	681b      	ldr	r3, [r3, #0]
 801be26:	f003 030f 	and.w	r3, r3, #15
 801be2a:	683a      	ldr	r2, [r7, #0]
 801be2c:	429a      	cmp	r2, r3
 801be2e:	d001      	beq.n	801be34 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 801be30:	2301      	movs	r3, #1
 801be32:	e032      	b.n	801be9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	681b      	ldr	r3, [r3, #0]
 801be38:	f003 0304 	and.w	r3, r3, #4
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	d008      	beq.n	801be52 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801be40:	4b19      	ldr	r3, [pc, #100]	@ (801bea8 <HAL_RCC_ClockConfig+0x1c8>)
 801be42:	689b      	ldr	r3, [r3, #8]
 801be44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	68db      	ldr	r3, [r3, #12]
 801be4c:	4916      	ldr	r1, [pc, #88]	@ (801bea8 <HAL_RCC_ClockConfig+0x1c8>)
 801be4e:	4313      	orrs	r3, r2
 801be50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801be52:	687b      	ldr	r3, [r7, #4]
 801be54:	681b      	ldr	r3, [r3, #0]
 801be56:	f003 0308 	and.w	r3, r3, #8
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	d009      	beq.n	801be72 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801be5e:	4b12      	ldr	r3, [pc, #72]	@ (801bea8 <HAL_RCC_ClockConfig+0x1c8>)
 801be60:	689b      	ldr	r3, [r3, #8]
 801be62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 801be66:	687b      	ldr	r3, [r7, #4]
 801be68:	691b      	ldr	r3, [r3, #16]
 801be6a:	00db      	lsls	r3, r3, #3
 801be6c:	490e      	ldr	r1, [pc, #56]	@ (801bea8 <HAL_RCC_ClockConfig+0x1c8>)
 801be6e:	4313      	orrs	r3, r2
 801be70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801be72:	f000 f821 	bl	801beb8 <HAL_RCC_GetSysClockFreq>
 801be76:	4602      	mov	r2, r0
 801be78:	4b0b      	ldr	r3, [pc, #44]	@ (801bea8 <HAL_RCC_ClockConfig+0x1c8>)
 801be7a:	689b      	ldr	r3, [r3, #8]
 801be7c:	091b      	lsrs	r3, r3, #4
 801be7e:	f003 030f 	and.w	r3, r3, #15
 801be82:	490a      	ldr	r1, [pc, #40]	@ (801beac <HAL_RCC_ClockConfig+0x1cc>)
 801be84:	5ccb      	ldrb	r3, [r1, r3]
 801be86:	fa22 f303 	lsr.w	r3, r2, r3
 801be8a:	4a09      	ldr	r2, [pc, #36]	@ (801beb0 <HAL_RCC_ClockConfig+0x1d0>)
 801be8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 801be8e:	4b09      	ldr	r3, [pc, #36]	@ (801beb4 <HAL_RCC_ClockConfig+0x1d4>)
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	4618      	mov	r0, r3
 801be94:	f7fc f9cc 	bl	8018230 <HAL_InitTick>

  return HAL_OK;
 801be98:	2300      	movs	r3, #0
}
 801be9a:	4618      	mov	r0, r3
 801be9c:	3710      	adds	r7, #16
 801be9e:	46bd      	mov	sp, r7
 801bea0:	bd80      	pop	{r7, pc}
 801bea2:	bf00      	nop
 801bea4:	40023c00 	.word	0x40023c00
 801bea8:	40023800 	.word	0x40023800
 801beac:	0803a2a0 	.word	0x0803a2a0
 801beb0:	200002b0 	.word	0x200002b0
 801beb4:	200002b4 	.word	0x200002b4

0801beb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801beb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801bebc:	b094      	sub	sp, #80	@ 0x50
 801bebe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 801bec0:	2300      	movs	r3, #0
 801bec2:	647b      	str	r3, [r7, #68]	@ 0x44
 801bec4:	2300      	movs	r3, #0
 801bec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801bec8:	2300      	movs	r3, #0
 801beca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 801becc:	2300      	movs	r3, #0
 801bece:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801bed0:	4b79      	ldr	r3, [pc, #484]	@ (801c0b8 <HAL_RCC_GetSysClockFreq+0x200>)
 801bed2:	689b      	ldr	r3, [r3, #8]
 801bed4:	f003 030c 	and.w	r3, r3, #12
 801bed8:	2b08      	cmp	r3, #8
 801beda:	d00d      	beq.n	801bef8 <HAL_RCC_GetSysClockFreq+0x40>
 801bedc:	2b08      	cmp	r3, #8
 801bede:	f200 80e1 	bhi.w	801c0a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	d002      	beq.n	801beec <HAL_RCC_GetSysClockFreq+0x34>
 801bee6:	2b04      	cmp	r3, #4
 801bee8:	d003      	beq.n	801bef2 <HAL_RCC_GetSysClockFreq+0x3a>
 801beea:	e0db      	b.n	801c0a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801beec:	4b73      	ldr	r3, [pc, #460]	@ (801c0bc <HAL_RCC_GetSysClockFreq+0x204>)
 801beee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 801bef0:	e0db      	b.n	801c0aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801bef2:	4b73      	ldr	r3, [pc, #460]	@ (801c0c0 <HAL_RCC_GetSysClockFreq+0x208>)
 801bef4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 801bef6:	e0d8      	b.n	801c0aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801bef8:	4b6f      	ldr	r3, [pc, #444]	@ (801c0b8 <HAL_RCC_GetSysClockFreq+0x200>)
 801befa:	685b      	ldr	r3, [r3, #4]
 801befc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bf00:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 801bf02:	4b6d      	ldr	r3, [pc, #436]	@ (801c0b8 <HAL_RCC_GetSysClockFreq+0x200>)
 801bf04:	685b      	ldr	r3, [r3, #4]
 801bf06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801bf0a:	2b00      	cmp	r3, #0
 801bf0c:	d063      	beq.n	801bfd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801bf0e:	4b6a      	ldr	r3, [pc, #424]	@ (801c0b8 <HAL_RCC_GetSysClockFreq+0x200>)
 801bf10:	685b      	ldr	r3, [r3, #4]
 801bf12:	099b      	lsrs	r3, r3, #6
 801bf14:	2200      	movs	r2, #0
 801bf16:	63bb      	str	r3, [r7, #56]	@ 0x38
 801bf18:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801bf1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bf20:	633b      	str	r3, [r7, #48]	@ 0x30
 801bf22:	2300      	movs	r3, #0
 801bf24:	637b      	str	r3, [r7, #52]	@ 0x34
 801bf26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 801bf2a:	4622      	mov	r2, r4
 801bf2c:	462b      	mov	r3, r5
 801bf2e:	f04f 0000 	mov.w	r0, #0
 801bf32:	f04f 0100 	mov.w	r1, #0
 801bf36:	0159      	lsls	r1, r3, #5
 801bf38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801bf3c:	0150      	lsls	r0, r2, #5
 801bf3e:	4602      	mov	r2, r0
 801bf40:	460b      	mov	r3, r1
 801bf42:	4621      	mov	r1, r4
 801bf44:	1a51      	subs	r1, r2, r1
 801bf46:	6139      	str	r1, [r7, #16]
 801bf48:	4629      	mov	r1, r5
 801bf4a:	eb63 0301 	sbc.w	r3, r3, r1
 801bf4e:	617b      	str	r3, [r7, #20]
 801bf50:	f04f 0200 	mov.w	r2, #0
 801bf54:	f04f 0300 	mov.w	r3, #0
 801bf58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801bf5c:	4659      	mov	r1, fp
 801bf5e:	018b      	lsls	r3, r1, #6
 801bf60:	4651      	mov	r1, sl
 801bf62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801bf66:	4651      	mov	r1, sl
 801bf68:	018a      	lsls	r2, r1, #6
 801bf6a:	4651      	mov	r1, sl
 801bf6c:	ebb2 0801 	subs.w	r8, r2, r1
 801bf70:	4659      	mov	r1, fp
 801bf72:	eb63 0901 	sbc.w	r9, r3, r1
 801bf76:	f04f 0200 	mov.w	r2, #0
 801bf7a:	f04f 0300 	mov.w	r3, #0
 801bf7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801bf82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801bf86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801bf8a:	4690      	mov	r8, r2
 801bf8c:	4699      	mov	r9, r3
 801bf8e:	4623      	mov	r3, r4
 801bf90:	eb18 0303 	adds.w	r3, r8, r3
 801bf94:	60bb      	str	r3, [r7, #8]
 801bf96:	462b      	mov	r3, r5
 801bf98:	eb49 0303 	adc.w	r3, r9, r3
 801bf9c:	60fb      	str	r3, [r7, #12]
 801bf9e:	f04f 0200 	mov.w	r2, #0
 801bfa2:	f04f 0300 	mov.w	r3, #0
 801bfa6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801bfaa:	4629      	mov	r1, r5
 801bfac:	024b      	lsls	r3, r1, #9
 801bfae:	4621      	mov	r1, r4
 801bfb0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801bfb4:	4621      	mov	r1, r4
 801bfb6:	024a      	lsls	r2, r1, #9
 801bfb8:	4610      	mov	r0, r2
 801bfba:	4619      	mov	r1, r3
 801bfbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801bfbe:	2200      	movs	r2, #0
 801bfc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bfc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801bfc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801bfc8:	f7e4 fbae 	bl	8000728 <__aeabi_uldivmod>
 801bfcc:	4602      	mov	r2, r0
 801bfce:	460b      	mov	r3, r1
 801bfd0:	4613      	mov	r3, r2
 801bfd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801bfd4:	e058      	b.n	801c088 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801bfd6:	4b38      	ldr	r3, [pc, #224]	@ (801c0b8 <HAL_RCC_GetSysClockFreq+0x200>)
 801bfd8:	685b      	ldr	r3, [r3, #4]
 801bfda:	099b      	lsrs	r3, r3, #6
 801bfdc:	2200      	movs	r2, #0
 801bfde:	4618      	mov	r0, r3
 801bfe0:	4611      	mov	r1, r2
 801bfe2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801bfe6:	623b      	str	r3, [r7, #32]
 801bfe8:	2300      	movs	r3, #0
 801bfea:	627b      	str	r3, [r7, #36]	@ 0x24
 801bfec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801bff0:	4642      	mov	r2, r8
 801bff2:	464b      	mov	r3, r9
 801bff4:	f04f 0000 	mov.w	r0, #0
 801bff8:	f04f 0100 	mov.w	r1, #0
 801bffc:	0159      	lsls	r1, r3, #5
 801bffe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801c002:	0150      	lsls	r0, r2, #5
 801c004:	4602      	mov	r2, r0
 801c006:	460b      	mov	r3, r1
 801c008:	4641      	mov	r1, r8
 801c00a:	ebb2 0a01 	subs.w	sl, r2, r1
 801c00e:	4649      	mov	r1, r9
 801c010:	eb63 0b01 	sbc.w	fp, r3, r1
 801c014:	f04f 0200 	mov.w	r2, #0
 801c018:	f04f 0300 	mov.w	r3, #0
 801c01c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801c020:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801c024:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801c028:	ebb2 040a 	subs.w	r4, r2, sl
 801c02c:	eb63 050b 	sbc.w	r5, r3, fp
 801c030:	f04f 0200 	mov.w	r2, #0
 801c034:	f04f 0300 	mov.w	r3, #0
 801c038:	00eb      	lsls	r3, r5, #3
 801c03a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801c03e:	00e2      	lsls	r2, r4, #3
 801c040:	4614      	mov	r4, r2
 801c042:	461d      	mov	r5, r3
 801c044:	4643      	mov	r3, r8
 801c046:	18e3      	adds	r3, r4, r3
 801c048:	603b      	str	r3, [r7, #0]
 801c04a:	464b      	mov	r3, r9
 801c04c:	eb45 0303 	adc.w	r3, r5, r3
 801c050:	607b      	str	r3, [r7, #4]
 801c052:	f04f 0200 	mov.w	r2, #0
 801c056:	f04f 0300 	mov.w	r3, #0
 801c05a:	e9d7 4500 	ldrd	r4, r5, [r7]
 801c05e:	4629      	mov	r1, r5
 801c060:	028b      	lsls	r3, r1, #10
 801c062:	4621      	mov	r1, r4
 801c064:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801c068:	4621      	mov	r1, r4
 801c06a:	028a      	lsls	r2, r1, #10
 801c06c:	4610      	mov	r0, r2
 801c06e:	4619      	mov	r1, r3
 801c070:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c072:	2200      	movs	r2, #0
 801c074:	61bb      	str	r3, [r7, #24]
 801c076:	61fa      	str	r2, [r7, #28]
 801c078:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801c07c:	f7e4 fb54 	bl	8000728 <__aeabi_uldivmod>
 801c080:	4602      	mov	r2, r0
 801c082:	460b      	mov	r3, r1
 801c084:	4613      	mov	r3, r2
 801c086:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 801c088:	4b0b      	ldr	r3, [pc, #44]	@ (801c0b8 <HAL_RCC_GetSysClockFreq+0x200>)
 801c08a:	685b      	ldr	r3, [r3, #4]
 801c08c:	0c1b      	lsrs	r3, r3, #16
 801c08e:	f003 0303 	and.w	r3, r3, #3
 801c092:	3301      	adds	r3, #1
 801c094:	005b      	lsls	r3, r3, #1
 801c096:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 801c098:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c09a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c09c:	fbb2 f3f3 	udiv	r3, r2, r3
 801c0a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 801c0a2:	e002      	b.n	801c0aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801c0a4:	4b05      	ldr	r3, [pc, #20]	@ (801c0bc <HAL_RCC_GetSysClockFreq+0x204>)
 801c0a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 801c0a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 801c0aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 801c0ac:	4618      	mov	r0, r3
 801c0ae:	3750      	adds	r7, #80	@ 0x50
 801c0b0:	46bd      	mov	sp, r7
 801c0b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801c0b6:	bf00      	nop
 801c0b8:	40023800 	.word	0x40023800
 801c0bc:	00f42400 	.word	0x00f42400
 801c0c0:	007a1200 	.word	0x007a1200

0801c0c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801c0c4:	b480      	push	{r7}
 801c0c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801c0c8:	4b03      	ldr	r3, [pc, #12]	@ (801c0d8 <HAL_RCC_GetHCLKFreq+0x14>)
 801c0ca:	681b      	ldr	r3, [r3, #0]
}
 801c0cc:	4618      	mov	r0, r3
 801c0ce:	46bd      	mov	sp, r7
 801c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0d4:	4770      	bx	lr
 801c0d6:	bf00      	nop
 801c0d8:	200002b0 	.word	0x200002b0

0801c0dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801c0dc:	b580      	push	{r7, lr}
 801c0de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801c0e0:	f7ff fff0 	bl	801c0c4 <HAL_RCC_GetHCLKFreq>
 801c0e4:	4602      	mov	r2, r0
 801c0e6:	4b05      	ldr	r3, [pc, #20]	@ (801c0fc <HAL_RCC_GetPCLK1Freq+0x20>)
 801c0e8:	689b      	ldr	r3, [r3, #8]
 801c0ea:	0a9b      	lsrs	r3, r3, #10
 801c0ec:	f003 0307 	and.w	r3, r3, #7
 801c0f0:	4903      	ldr	r1, [pc, #12]	@ (801c100 <HAL_RCC_GetPCLK1Freq+0x24>)
 801c0f2:	5ccb      	ldrb	r3, [r1, r3]
 801c0f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 801c0f8:	4618      	mov	r0, r3
 801c0fa:	bd80      	pop	{r7, pc}
 801c0fc:	40023800 	.word	0x40023800
 801c100:	0803a2b0 	.word	0x0803a2b0

0801c104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801c104:	b580      	push	{r7, lr}
 801c106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801c108:	f7ff ffdc 	bl	801c0c4 <HAL_RCC_GetHCLKFreq>
 801c10c:	4602      	mov	r2, r0
 801c10e:	4b05      	ldr	r3, [pc, #20]	@ (801c124 <HAL_RCC_GetPCLK2Freq+0x20>)
 801c110:	689b      	ldr	r3, [r3, #8]
 801c112:	0b5b      	lsrs	r3, r3, #13
 801c114:	f003 0307 	and.w	r3, r3, #7
 801c118:	4903      	ldr	r1, [pc, #12]	@ (801c128 <HAL_RCC_GetPCLK2Freq+0x24>)
 801c11a:	5ccb      	ldrb	r3, [r1, r3]
 801c11c:	fa22 f303 	lsr.w	r3, r2, r3
}
 801c120:	4618      	mov	r0, r3
 801c122:	bd80      	pop	{r7, pc}
 801c124:	40023800 	.word	0x40023800
 801c128:	0803a2b0 	.word	0x0803a2b0

0801c12c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801c12c:	b480      	push	{r7}
 801c12e:	b083      	sub	sp, #12
 801c130:	af00      	add	r7, sp, #0
 801c132:	6078      	str	r0, [r7, #4]
 801c134:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	220f      	movs	r2, #15
 801c13a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801c13c:	4b12      	ldr	r3, [pc, #72]	@ (801c188 <HAL_RCC_GetClockConfig+0x5c>)
 801c13e:	689b      	ldr	r3, [r3, #8]
 801c140:	f003 0203 	and.w	r2, r3, #3
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801c148:	4b0f      	ldr	r3, [pc, #60]	@ (801c188 <HAL_RCC_GetClockConfig+0x5c>)
 801c14a:	689b      	ldr	r3, [r3, #8]
 801c14c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 801c154:	4b0c      	ldr	r3, [pc, #48]	@ (801c188 <HAL_RCC_GetClockConfig+0x5c>)
 801c156:	689b      	ldr	r3, [r3, #8]
 801c158:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 801c160:	4b09      	ldr	r3, [pc, #36]	@ (801c188 <HAL_RCC_GetClockConfig+0x5c>)
 801c162:	689b      	ldr	r3, [r3, #8]
 801c164:	08db      	lsrs	r3, r3, #3
 801c166:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 801c16a:	687b      	ldr	r3, [r7, #4]
 801c16c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801c16e:	4b07      	ldr	r3, [pc, #28]	@ (801c18c <HAL_RCC_GetClockConfig+0x60>)
 801c170:	681b      	ldr	r3, [r3, #0]
 801c172:	f003 020f 	and.w	r2, r3, #15
 801c176:	683b      	ldr	r3, [r7, #0]
 801c178:	601a      	str	r2, [r3, #0]
}
 801c17a:	bf00      	nop
 801c17c:	370c      	adds	r7, #12
 801c17e:	46bd      	mov	sp, r7
 801c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c184:	4770      	bx	lr
 801c186:	bf00      	nop
 801c188:	40023800 	.word	0x40023800
 801c18c:	40023c00 	.word	0x40023c00

0801c190 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801c190:	b580      	push	{r7, lr}
 801c192:	b088      	sub	sp, #32
 801c194:	af00      	add	r7, sp, #0
 801c196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 801c198:	2300      	movs	r3, #0
 801c19a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 801c19c:	2300      	movs	r3, #0
 801c19e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 801c1a0:	2300      	movs	r3, #0
 801c1a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 801c1a4:	2300      	movs	r3, #0
 801c1a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 801c1a8:	2300      	movs	r3, #0
 801c1aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	f003 0301 	and.w	r3, r3, #1
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	d012      	beq.n	801c1de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801c1b8:	4b69      	ldr	r3, [pc, #420]	@ (801c360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c1ba:	689b      	ldr	r3, [r3, #8]
 801c1bc:	4a68      	ldr	r2, [pc, #416]	@ (801c360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c1be:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801c1c2:	6093      	str	r3, [r2, #8]
 801c1c4:	4b66      	ldr	r3, [pc, #408]	@ (801c360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c1c6:	689a      	ldr	r2, [r3, #8]
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c1cc:	4964      	ldr	r1, [pc, #400]	@ (801c360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c1ce:	4313      	orrs	r3, r2
 801c1d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c1d6:	2b00      	cmp	r3, #0
 801c1d8:	d101      	bne.n	801c1de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 801c1da:	2301      	movs	r3, #1
 801c1dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801c1de:	687b      	ldr	r3, [r7, #4]
 801c1e0:	681b      	ldr	r3, [r3, #0]
 801c1e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801c1e6:	2b00      	cmp	r3, #0
 801c1e8:	d017      	beq.n	801c21a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801c1ea:	4b5d      	ldr	r3, [pc, #372]	@ (801c360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c1ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801c1f0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c1f8:	4959      	ldr	r1, [pc, #356]	@ (801c360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c1fa:	4313      	orrs	r3, r2
 801c1fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c204:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801c208:	d101      	bne.n	801c20e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 801c20a:	2301      	movs	r3, #1
 801c20c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c212:	2b00      	cmp	r3, #0
 801c214:	d101      	bne.n	801c21a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 801c216:	2301      	movs	r3, #1
 801c218:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	681b      	ldr	r3, [r3, #0]
 801c21e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801c222:	2b00      	cmp	r3, #0
 801c224:	d017      	beq.n	801c256 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801c226:	4b4e      	ldr	r3, [pc, #312]	@ (801c360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c228:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801c22c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c234:	494a      	ldr	r1, [pc, #296]	@ (801c360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c236:	4313      	orrs	r3, r2
 801c238:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c240:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801c244:	d101      	bne.n	801c24a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 801c246:	2301      	movs	r3, #1
 801c248:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801c24a:	687b      	ldr	r3, [r7, #4]
 801c24c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d101      	bne.n	801c256 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 801c252:	2301      	movs	r3, #1
 801c254:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	681b      	ldr	r3, [r3, #0]
 801c25a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801c25e:	2b00      	cmp	r3, #0
 801c260:	d001      	beq.n	801c266 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 801c262:	2301      	movs	r3, #1
 801c264:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801c266:	687b      	ldr	r3, [r7, #4]
 801c268:	681b      	ldr	r3, [r3, #0]
 801c26a:	f003 0320 	and.w	r3, r3, #32
 801c26e:	2b00      	cmp	r3, #0
 801c270:	f000 808b 	beq.w	801c38a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801c274:	4b3a      	ldr	r3, [pc, #232]	@ (801c360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c278:	4a39      	ldr	r2, [pc, #228]	@ (801c360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c27a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801c27e:	6413      	str	r3, [r2, #64]	@ 0x40
 801c280:	4b37      	ldr	r3, [pc, #220]	@ (801c360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801c288:	60bb      	str	r3, [r7, #8]
 801c28a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801c28c:	4b35      	ldr	r3, [pc, #212]	@ (801c364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801c28e:	681b      	ldr	r3, [r3, #0]
 801c290:	4a34      	ldr	r2, [pc, #208]	@ (801c364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801c292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801c296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c298:	f7fc f996 	bl	80185c8 <HAL_GetTick>
 801c29c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801c29e:	e008      	b.n	801c2b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c2a0:	f7fc f992 	bl	80185c8 <HAL_GetTick>
 801c2a4:	4602      	mov	r2, r0
 801c2a6:	697b      	ldr	r3, [r7, #20]
 801c2a8:	1ad3      	subs	r3, r2, r3
 801c2aa:	2b64      	cmp	r3, #100	@ 0x64
 801c2ac:	d901      	bls.n	801c2b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 801c2ae:	2303      	movs	r3, #3
 801c2b0:	e38f      	b.n	801c9d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801c2b2:	4b2c      	ldr	r3, [pc, #176]	@ (801c364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801c2b4:	681b      	ldr	r3, [r3, #0]
 801c2b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c2ba:	2b00      	cmp	r3, #0
 801c2bc:	d0f0      	beq.n	801c2a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801c2be:	4b28      	ldr	r3, [pc, #160]	@ (801c360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c2c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c2c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801c2c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801c2c8:	693b      	ldr	r3, [r7, #16]
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	d035      	beq.n	801c33a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 801c2ce:	687b      	ldr	r3, [r7, #4]
 801c2d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c2d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801c2d6:	693a      	ldr	r2, [r7, #16]
 801c2d8:	429a      	cmp	r2, r3
 801c2da:	d02e      	beq.n	801c33a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801c2dc:	4b20      	ldr	r3, [pc, #128]	@ (801c360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c2de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c2e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801c2e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801c2e6:	4b1e      	ldr	r3, [pc, #120]	@ (801c360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c2e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c2ea:	4a1d      	ldr	r2, [pc, #116]	@ (801c360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c2ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c2f0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 801c2f2:	4b1b      	ldr	r3, [pc, #108]	@ (801c360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c2f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c2f6:	4a1a      	ldr	r2, [pc, #104]	@ (801c360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c2f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c2fc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 801c2fe:	4a18      	ldr	r2, [pc, #96]	@ (801c360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c300:	693b      	ldr	r3, [r7, #16]
 801c302:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801c304:	4b16      	ldr	r3, [pc, #88]	@ (801c360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c308:	f003 0301 	and.w	r3, r3, #1
 801c30c:	2b01      	cmp	r3, #1
 801c30e:	d114      	bne.n	801c33a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c310:	f7fc f95a 	bl	80185c8 <HAL_GetTick>
 801c314:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801c316:	e00a      	b.n	801c32e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801c318:	f7fc f956 	bl	80185c8 <HAL_GetTick>
 801c31c:	4602      	mov	r2, r0
 801c31e:	697b      	ldr	r3, [r7, #20]
 801c320:	1ad3      	subs	r3, r2, r3
 801c322:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c326:	4293      	cmp	r3, r2
 801c328:	d901      	bls.n	801c32e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 801c32a:	2303      	movs	r3, #3
 801c32c:	e351      	b.n	801c9d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801c32e:	4b0c      	ldr	r3, [pc, #48]	@ (801c360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c332:	f003 0302 	and.w	r3, r3, #2
 801c336:	2b00      	cmp	r3, #0
 801c338:	d0ee      	beq.n	801c318 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c33e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801c342:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801c346:	d111      	bne.n	801c36c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 801c348:	4b05      	ldr	r3, [pc, #20]	@ (801c360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c34a:	689b      	ldr	r3, [r3, #8]
 801c34c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 801c350:	687b      	ldr	r3, [r7, #4]
 801c352:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 801c354:	4b04      	ldr	r3, [pc, #16]	@ (801c368 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 801c356:	400b      	ands	r3, r1
 801c358:	4901      	ldr	r1, [pc, #4]	@ (801c360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c35a:	4313      	orrs	r3, r2
 801c35c:	608b      	str	r3, [r1, #8]
 801c35e:	e00b      	b.n	801c378 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 801c360:	40023800 	.word	0x40023800
 801c364:	40007000 	.word	0x40007000
 801c368:	0ffffcff 	.word	0x0ffffcff
 801c36c:	4bac      	ldr	r3, [pc, #688]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c36e:	689b      	ldr	r3, [r3, #8]
 801c370:	4aab      	ldr	r2, [pc, #684]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c372:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 801c376:	6093      	str	r3, [r2, #8]
 801c378:	4ba9      	ldr	r3, [pc, #676]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c37a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c384:	49a6      	ldr	r1, [pc, #664]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c386:	4313      	orrs	r3, r2
 801c388:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	681b      	ldr	r3, [r3, #0]
 801c38e:	f003 0310 	and.w	r3, r3, #16
 801c392:	2b00      	cmp	r3, #0
 801c394:	d010      	beq.n	801c3b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801c396:	4ba2      	ldr	r3, [pc, #648]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c398:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801c39c:	4aa0      	ldr	r2, [pc, #640]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c39e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801c3a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 801c3a6:	4b9e      	ldr	r3, [pc, #632]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c3a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 801c3ac:	687b      	ldr	r3, [r7, #4]
 801c3ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c3b0:	499b      	ldr	r1, [pc, #620]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c3b2:	4313      	orrs	r3, r2
 801c3b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801c3b8:	687b      	ldr	r3, [r7, #4]
 801c3ba:	681b      	ldr	r3, [r3, #0]
 801c3bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801c3c0:	2b00      	cmp	r3, #0
 801c3c2:	d00a      	beq.n	801c3da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801c3c4:	4b96      	ldr	r3, [pc, #600]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c3c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c3ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 801c3ce:	687b      	ldr	r3, [r7, #4]
 801c3d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801c3d2:	4993      	ldr	r1, [pc, #588]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c3d4:	4313      	orrs	r3, r2
 801c3d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	681b      	ldr	r3, [r3, #0]
 801c3de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801c3e2:	2b00      	cmp	r3, #0
 801c3e4:	d00a      	beq.n	801c3fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801c3e6:	4b8e      	ldr	r3, [pc, #568]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c3e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c3ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 801c3f0:	687b      	ldr	r3, [r7, #4]
 801c3f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801c3f4:	498a      	ldr	r1, [pc, #552]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c3f6:	4313      	orrs	r3, r2
 801c3f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801c3fc:	687b      	ldr	r3, [r7, #4]
 801c3fe:	681b      	ldr	r3, [r3, #0]
 801c400:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c404:	2b00      	cmp	r3, #0
 801c406:	d00a      	beq.n	801c41e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801c408:	4b85      	ldr	r3, [pc, #532]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c40a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c40e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801c412:	687b      	ldr	r3, [r7, #4]
 801c414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c416:	4982      	ldr	r1, [pc, #520]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c418:	4313      	orrs	r3, r2
 801c41a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801c41e:	687b      	ldr	r3, [r7, #4]
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c426:	2b00      	cmp	r3, #0
 801c428:	d00a      	beq.n	801c440 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801c42a:	4b7d      	ldr	r3, [pc, #500]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c42c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c430:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c438:	4979      	ldr	r1, [pc, #484]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c43a:	4313      	orrs	r3, r2
 801c43c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	681b      	ldr	r3, [r3, #0]
 801c444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d00a      	beq.n	801c462 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801c44c:	4b74      	ldr	r3, [pc, #464]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c44e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c452:	f023 0203 	bic.w	r2, r3, #3
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c45a:	4971      	ldr	r1, [pc, #452]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c45c:	4313      	orrs	r3, r2
 801c45e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	681b      	ldr	r3, [r3, #0]
 801c466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	d00a      	beq.n	801c484 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801c46e:	4b6c      	ldr	r3, [pc, #432]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c474:	f023 020c 	bic.w	r2, r3, #12
 801c478:	687b      	ldr	r3, [r7, #4]
 801c47a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c47c:	4968      	ldr	r1, [pc, #416]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c47e:	4313      	orrs	r3, r2
 801c480:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	d00a      	beq.n	801c4a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801c490:	4b63      	ldr	r3, [pc, #396]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c496:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 801c49a:	687b      	ldr	r3, [r7, #4]
 801c49c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c49e:	4960      	ldr	r1, [pc, #384]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c4a0:	4313      	orrs	r3, r2
 801c4a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	681b      	ldr	r3, [r3, #0]
 801c4aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	d00a      	beq.n	801c4c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801c4b2:	4b5b      	ldr	r3, [pc, #364]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c4b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c4b8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801c4bc:	687b      	ldr	r3, [r7, #4]
 801c4be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c4c0:	4957      	ldr	r1, [pc, #348]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c4c2:	4313      	orrs	r3, r2
 801c4c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	681b      	ldr	r3, [r3, #0]
 801c4cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d00a      	beq.n	801c4ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801c4d4:	4b52      	ldr	r3, [pc, #328]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c4d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c4da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c4e2:	494f      	ldr	r1, [pc, #316]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c4e4:	4313      	orrs	r3, r2
 801c4e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	681b      	ldr	r3, [r3, #0]
 801c4ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d00a      	beq.n	801c50c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 801c4f6:	4b4a      	ldr	r3, [pc, #296]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c4f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c4fc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c504:	4946      	ldr	r1, [pc, #280]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c506:	4313      	orrs	r3, r2
 801c508:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 801c50c:	687b      	ldr	r3, [r7, #4]
 801c50e:	681b      	ldr	r3, [r3, #0]
 801c510:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801c514:	2b00      	cmp	r3, #0
 801c516:	d00a      	beq.n	801c52e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 801c518:	4b41      	ldr	r3, [pc, #260]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c51a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c51e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c526:	493e      	ldr	r1, [pc, #248]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c528:	4313      	orrs	r3, r2
 801c52a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	681b      	ldr	r3, [r3, #0]
 801c532:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c536:	2b00      	cmp	r3, #0
 801c538:	d00a      	beq.n	801c550 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 801c53a:	4b39      	ldr	r3, [pc, #228]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c53c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c540:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c548:	4935      	ldr	r1, [pc, #212]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c54a:	4313      	orrs	r3, r2
 801c54c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	681b      	ldr	r3, [r3, #0]
 801c554:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d00a      	beq.n	801c572 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801c55c:	4b30      	ldr	r3, [pc, #192]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c55e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c562:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c56a:	492d      	ldr	r1, [pc, #180]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c56c:	4313      	orrs	r3, r2
 801c56e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801c572:	687b      	ldr	r3, [r7, #4]
 801c574:	681b      	ldr	r3, [r3, #0]
 801c576:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801c57a:	2b00      	cmp	r3, #0
 801c57c:	d011      	beq.n	801c5a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801c57e:	4b28      	ldr	r3, [pc, #160]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c584:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c58c:	4924      	ldr	r1, [pc, #144]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c58e:	4313      	orrs	r3, r2
 801c590:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 801c594:	687b      	ldr	r3, [r7, #4]
 801c596:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c598:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801c59c:	d101      	bne.n	801c5a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 801c59e:	2301      	movs	r3, #1
 801c5a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801c5a2:	687b      	ldr	r3, [r7, #4]
 801c5a4:	681b      	ldr	r3, [r3, #0]
 801c5a6:	f003 0308 	and.w	r3, r3, #8
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	d001      	beq.n	801c5b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 801c5ae:	2301      	movs	r3, #1
 801c5b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	681b      	ldr	r3, [r3, #0]
 801c5b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	d00a      	beq.n	801c5d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801c5be:	4b18      	ldr	r3, [pc, #96]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c5c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c5c4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c5cc:	4914      	ldr	r1, [pc, #80]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c5ce:	4313      	orrs	r3, r2
 801c5d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 801c5d4:	687b      	ldr	r3, [r7, #4]
 801c5d6:	681b      	ldr	r3, [r3, #0]
 801c5d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	d00b      	beq.n	801c5f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801c5e0:	4b0f      	ldr	r3, [pc, #60]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c5e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c5e6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c5f0:	490b      	ldr	r1, [pc, #44]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c5f2:	4313      	orrs	r3, r2
 801c5f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 801c5f8:	687b      	ldr	r3, [r7, #4]
 801c5fa:	681b      	ldr	r3, [r3, #0]
 801c5fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801c600:	2b00      	cmp	r3, #0
 801c602:	d00f      	beq.n	801c624 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 801c604:	4b06      	ldr	r3, [pc, #24]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c60a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801c614:	4902      	ldr	r1, [pc, #8]	@ (801c620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c616:	4313      	orrs	r3, r2
 801c618:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 801c61c:	e002      	b.n	801c624 <HAL_RCCEx_PeriphCLKConfig+0x494>
 801c61e:	bf00      	nop
 801c620:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	681b      	ldr	r3, [r3, #0]
 801c628:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d00b      	beq.n	801c648 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801c630:	4b8a      	ldr	r3, [pc, #552]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c632:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801c636:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801c63a:	687b      	ldr	r3, [r7, #4]
 801c63c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c640:	4986      	ldr	r1, [pc, #536]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c642:	4313      	orrs	r3, r2
 801c644:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	681b      	ldr	r3, [r3, #0]
 801c64c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801c650:	2b00      	cmp	r3, #0
 801c652:	d00b      	beq.n	801c66c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 801c654:	4b81      	ldr	r3, [pc, #516]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801c65a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 801c65e:	687b      	ldr	r3, [r7, #4]
 801c660:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801c664:	497d      	ldr	r1, [pc, #500]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c666:	4313      	orrs	r3, r2
 801c668:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 801c66c:	69fb      	ldr	r3, [r7, #28]
 801c66e:	2b01      	cmp	r3, #1
 801c670:	d006      	beq.n	801c680 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 801c672:	687b      	ldr	r3, [r7, #4]
 801c674:	681b      	ldr	r3, [r3, #0]
 801c676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c67a:	2b00      	cmp	r3, #0
 801c67c:	f000 80d6 	beq.w	801c82c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801c680:	4b76      	ldr	r3, [pc, #472]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c682:	681b      	ldr	r3, [r3, #0]
 801c684:	4a75      	ldr	r2, [pc, #468]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c686:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801c68a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c68c:	f7fb ff9c 	bl	80185c8 <HAL_GetTick>
 801c690:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801c692:	e008      	b.n	801c6a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801c694:	f7fb ff98 	bl	80185c8 <HAL_GetTick>
 801c698:	4602      	mov	r2, r0
 801c69a:	697b      	ldr	r3, [r7, #20]
 801c69c:	1ad3      	subs	r3, r2, r3
 801c69e:	2b64      	cmp	r3, #100	@ 0x64
 801c6a0:	d901      	bls.n	801c6a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801c6a2:	2303      	movs	r3, #3
 801c6a4:	e195      	b.n	801c9d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801c6a6:	4b6d      	ldr	r3, [pc, #436]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c6a8:	681b      	ldr	r3, [r3, #0]
 801c6aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d1f0      	bne.n	801c694 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	681b      	ldr	r3, [r3, #0]
 801c6b6:	f003 0301 	and.w	r3, r3, #1
 801c6ba:	2b00      	cmp	r3, #0
 801c6bc:	d021      	beq.n	801c702 <HAL_RCCEx_PeriphCLKConfig+0x572>
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	d11d      	bne.n	801c702 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801c6c6:	4b65      	ldr	r3, [pc, #404]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c6c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801c6cc:	0c1b      	lsrs	r3, r3, #16
 801c6ce:	f003 0303 	and.w	r3, r3, #3
 801c6d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801c6d4:	4b61      	ldr	r3, [pc, #388]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c6d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801c6da:	0e1b      	lsrs	r3, r3, #24
 801c6dc:	f003 030f 	and.w	r3, r3, #15
 801c6e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 801c6e2:	687b      	ldr	r3, [r7, #4]
 801c6e4:	685b      	ldr	r3, [r3, #4]
 801c6e6:	019a      	lsls	r2, r3, #6
 801c6e8:	693b      	ldr	r3, [r7, #16]
 801c6ea:	041b      	lsls	r3, r3, #16
 801c6ec:	431a      	orrs	r2, r3
 801c6ee:	68fb      	ldr	r3, [r7, #12]
 801c6f0:	061b      	lsls	r3, r3, #24
 801c6f2:	431a      	orrs	r2, r3
 801c6f4:	687b      	ldr	r3, [r7, #4]
 801c6f6:	689b      	ldr	r3, [r3, #8]
 801c6f8:	071b      	lsls	r3, r3, #28
 801c6fa:	4958      	ldr	r1, [pc, #352]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c6fc:	4313      	orrs	r3, r2
 801c6fe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	681b      	ldr	r3, [r3, #0]
 801c706:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d004      	beq.n	801c718 <HAL_RCCEx_PeriphCLKConfig+0x588>
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c712:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801c716:	d00a      	beq.n	801c72e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801c718:	687b      	ldr	r3, [r7, #4]
 801c71a:	681b      	ldr	r3, [r3, #0]
 801c71c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801c720:	2b00      	cmp	r3, #0
 801c722:	d02e      	beq.n	801c782 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801c724:	687b      	ldr	r3, [r7, #4]
 801c726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c728:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801c72c:	d129      	bne.n	801c782 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801c72e:	4b4b      	ldr	r3, [pc, #300]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c730:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801c734:	0c1b      	lsrs	r3, r3, #16
 801c736:	f003 0303 	and.w	r3, r3, #3
 801c73a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801c73c:	4b47      	ldr	r3, [pc, #284]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c73e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801c742:	0f1b      	lsrs	r3, r3, #28
 801c744:	f003 0307 	and.w	r3, r3, #7
 801c748:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 801c74a:	687b      	ldr	r3, [r7, #4]
 801c74c:	685b      	ldr	r3, [r3, #4]
 801c74e:	019a      	lsls	r2, r3, #6
 801c750:	693b      	ldr	r3, [r7, #16]
 801c752:	041b      	lsls	r3, r3, #16
 801c754:	431a      	orrs	r2, r3
 801c756:	687b      	ldr	r3, [r7, #4]
 801c758:	68db      	ldr	r3, [r3, #12]
 801c75a:	061b      	lsls	r3, r3, #24
 801c75c:	431a      	orrs	r2, r3
 801c75e:	68fb      	ldr	r3, [r7, #12]
 801c760:	071b      	lsls	r3, r3, #28
 801c762:	493e      	ldr	r1, [pc, #248]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c764:	4313      	orrs	r3, r2
 801c766:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801c76a:	4b3c      	ldr	r3, [pc, #240]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c76c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801c770:	f023 021f 	bic.w	r2, r3, #31
 801c774:	687b      	ldr	r3, [r7, #4]
 801c776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c778:	3b01      	subs	r3, #1
 801c77a:	4938      	ldr	r1, [pc, #224]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c77c:	4313      	orrs	r3, r2
 801c77e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801c782:	687b      	ldr	r3, [r7, #4]
 801c784:	681b      	ldr	r3, [r3, #0]
 801c786:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	d01d      	beq.n	801c7ca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801c78e:	4b33      	ldr	r3, [pc, #204]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801c794:	0e1b      	lsrs	r3, r3, #24
 801c796:	f003 030f 	and.w	r3, r3, #15
 801c79a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801c79c:	4b2f      	ldr	r3, [pc, #188]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c79e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801c7a2:	0f1b      	lsrs	r3, r3, #28
 801c7a4:	f003 0307 	and.w	r3, r3, #7
 801c7a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	685b      	ldr	r3, [r3, #4]
 801c7ae:	019a      	lsls	r2, r3, #6
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	691b      	ldr	r3, [r3, #16]
 801c7b4:	041b      	lsls	r3, r3, #16
 801c7b6:	431a      	orrs	r2, r3
 801c7b8:	693b      	ldr	r3, [r7, #16]
 801c7ba:	061b      	lsls	r3, r3, #24
 801c7bc:	431a      	orrs	r2, r3
 801c7be:	68fb      	ldr	r3, [r7, #12]
 801c7c0:	071b      	lsls	r3, r3, #28
 801c7c2:	4926      	ldr	r1, [pc, #152]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c7c4:	4313      	orrs	r3, r2
 801c7c6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801c7ca:	687b      	ldr	r3, [r7, #4]
 801c7cc:	681b      	ldr	r3, [r3, #0]
 801c7ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d011      	beq.n	801c7fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801c7d6:	687b      	ldr	r3, [r7, #4]
 801c7d8:	685b      	ldr	r3, [r3, #4]
 801c7da:	019a      	lsls	r2, r3, #6
 801c7dc:	687b      	ldr	r3, [r7, #4]
 801c7de:	691b      	ldr	r3, [r3, #16]
 801c7e0:	041b      	lsls	r3, r3, #16
 801c7e2:	431a      	orrs	r2, r3
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	68db      	ldr	r3, [r3, #12]
 801c7e8:	061b      	lsls	r3, r3, #24
 801c7ea:	431a      	orrs	r2, r3
 801c7ec:	687b      	ldr	r3, [r7, #4]
 801c7ee:	689b      	ldr	r3, [r3, #8]
 801c7f0:	071b      	lsls	r3, r3, #28
 801c7f2:	491a      	ldr	r1, [pc, #104]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c7f4:	4313      	orrs	r3, r2
 801c7f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801c7fa:	4b18      	ldr	r3, [pc, #96]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c7fc:	681b      	ldr	r3, [r3, #0]
 801c7fe:	4a17      	ldr	r2, [pc, #92]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c800:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801c804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c806:	f7fb fedf 	bl	80185c8 <HAL_GetTick>
 801c80a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801c80c:	e008      	b.n	801c820 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801c80e:	f7fb fedb 	bl	80185c8 <HAL_GetTick>
 801c812:	4602      	mov	r2, r0
 801c814:	697b      	ldr	r3, [r7, #20]
 801c816:	1ad3      	subs	r3, r2, r3
 801c818:	2b64      	cmp	r3, #100	@ 0x64
 801c81a:	d901      	bls.n	801c820 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801c81c:	2303      	movs	r3, #3
 801c81e:	e0d8      	b.n	801c9d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801c820:	4b0e      	ldr	r3, [pc, #56]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c822:	681b      	ldr	r3, [r3, #0]
 801c824:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801c828:	2b00      	cmp	r3, #0
 801c82a:	d0f0      	beq.n	801c80e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 801c82c:	69bb      	ldr	r3, [r7, #24]
 801c82e:	2b01      	cmp	r3, #1
 801c830:	f040 80ce 	bne.w	801c9d0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801c834:	4b09      	ldr	r3, [pc, #36]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c836:	681b      	ldr	r3, [r3, #0]
 801c838:	4a08      	ldr	r2, [pc, #32]	@ (801c85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c83a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801c83e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c840:	f7fb fec2 	bl	80185c8 <HAL_GetTick>
 801c844:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801c846:	e00b      	b.n	801c860 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801c848:	f7fb febe 	bl	80185c8 <HAL_GetTick>
 801c84c:	4602      	mov	r2, r0
 801c84e:	697b      	ldr	r3, [r7, #20]
 801c850:	1ad3      	subs	r3, r2, r3
 801c852:	2b64      	cmp	r3, #100	@ 0x64
 801c854:	d904      	bls.n	801c860 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801c856:	2303      	movs	r3, #3
 801c858:	e0bb      	b.n	801c9d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 801c85a:	bf00      	nop
 801c85c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801c860:	4b5e      	ldr	r3, [pc, #376]	@ (801c9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c862:	681b      	ldr	r3, [r3, #0]
 801c864:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801c868:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801c86c:	d0ec      	beq.n	801c848 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	681b      	ldr	r3, [r3, #0]
 801c872:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801c876:	2b00      	cmp	r3, #0
 801c878:	d003      	beq.n	801c882 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 801c87a:	687b      	ldr	r3, [r7, #4]
 801c87c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c87e:	2b00      	cmp	r3, #0
 801c880:	d009      	beq.n	801c896 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801c882:	687b      	ldr	r3, [r7, #4]
 801c884:	681b      	ldr	r3, [r3, #0]
 801c886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801c88a:	2b00      	cmp	r3, #0
 801c88c:	d02e      	beq.n	801c8ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801c88e:	687b      	ldr	r3, [r7, #4]
 801c890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c892:	2b00      	cmp	r3, #0
 801c894:	d12a      	bne.n	801c8ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801c896:	4b51      	ldr	r3, [pc, #324]	@ (801c9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c89c:	0c1b      	lsrs	r3, r3, #16
 801c89e:	f003 0303 	and.w	r3, r3, #3
 801c8a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801c8a4:	4b4d      	ldr	r3, [pc, #308]	@ (801c9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c8a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c8aa:	0f1b      	lsrs	r3, r3, #28
 801c8ac:	f003 0307 	and.w	r3, r3, #7
 801c8b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	695b      	ldr	r3, [r3, #20]
 801c8b6:	019a      	lsls	r2, r3, #6
 801c8b8:	693b      	ldr	r3, [r7, #16]
 801c8ba:	041b      	lsls	r3, r3, #16
 801c8bc:	431a      	orrs	r2, r3
 801c8be:	687b      	ldr	r3, [r7, #4]
 801c8c0:	699b      	ldr	r3, [r3, #24]
 801c8c2:	061b      	lsls	r3, r3, #24
 801c8c4:	431a      	orrs	r2, r3
 801c8c6:	68fb      	ldr	r3, [r7, #12]
 801c8c8:	071b      	lsls	r3, r3, #28
 801c8ca:	4944      	ldr	r1, [pc, #272]	@ (801c9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c8cc:	4313      	orrs	r3, r2
 801c8ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801c8d2:	4b42      	ldr	r3, [pc, #264]	@ (801c9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c8d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801c8d8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 801c8dc:	687b      	ldr	r3, [r7, #4]
 801c8de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c8e0:	3b01      	subs	r3, #1
 801c8e2:	021b      	lsls	r3, r3, #8
 801c8e4:	493d      	ldr	r1, [pc, #244]	@ (801c9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c8e6:	4313      	orrs	r3, r2
 801c8e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 801c8ec:	687b      	ldr	r3, [r7, #4]
 801c8ee:	681b      	ldr	r3, [r3, #0]
 801c8f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	d022      	beq.n	801c93e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c8fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801c900:	d11d      	bne.n	801c93e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801c902:	4b36      	ldr	r3, [pc, #216]	@ (801c9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c908:	0e1b      	lsrs	r3, r3, #24
 801c90a:	f003 030f 	and.w	r3, r3, #15
 801c90e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801c910:	4b32      	ldr	r3, [pc, #200]	@ (801c9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c916:	0f1b      	lsrs	r3, r3, #28
 801c918:	f003 0307 	and.w	r3, r3, #7
 801c91c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	695b      	ldr	r3, [r3, #20]
 801c922:	019a      	lsls	r2, r3, #6
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	6a1b      	ldr	r3, [r3, #32]
 801c928:	041b      	lsls	r3, r3, #16
 801c92a:	431a      	orrs	r2, r3
 801c92c:	693b      	ldr	r3, [r7, #16]
 801c92e:	061b      	lsls	r3, r3, #24
 801c930:	431a      	orrs	r2, r3
 801c932:	68fb      	ldr	r3, [r7, #12]
 801c934:	071b      	lsls	r3, r3, #28
 801c936:	4929      	ldr	r1, [pc, #164]	@ (801c9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c938:	4313      	orrs	r3, r2
 801c93a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 801c93e:	687b      	ldr	r3, [r7, #4]
 801c940:	681b      	ldr	r3, [r3, #0]
 801c942:	f003 0308 	and.w	r3, r3, #8
 801c946:	2b00      	cmp	r3, #0
 801c948:	d028      	beq.n	801c99c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801c94a:	4b24      	ldr	r3, [pc, #144]	@ (801c9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c94c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c950:	0e1b      	lsrs	r3, r3, #24
 801c952:	f003 030f 	and.w	r3, r3, #15
 801c956:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801c958:	4b20      	ldr	r3, [pc, #128]	@ (801c9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c95a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c95e:	0c1b      	lsrs	r3, r3, #16
 801c960:	f003 0303 	and.w	r3, r3, #3
 801c964:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	695b      	ldr	r3, [r3, #20]
 801c96a:	019a      	lsls	r2, r3, #6
 801c96c:	68fb      	ldr	r3, [r7, #12]
 801c96e:	041b      	lsls	r3, r3, #16
 801c970:	431a      	orrs	r2, r3
 801c972:	693b      	ldr	r3, [r7, #16]
 801c974:	061b      	lsls	r3, r3, #24
 801c976:	431a      	orrs	r2, r3
 801c978:	687b      	ldr	r3, [r7, #4]
 801c97a:	69db      	ldr	r3, [r3, #28]
 801c97c:	071b      	lsls	r3, r3, #28
 801c97e:	4917      	ldr	r1, [pc, #92]	@ (801c9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c980:	4313      	orrs	r3, r2
 801c982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 801c986:	4b15      	ldr	r3, [pc, #84]	@ (801c9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c988:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801c98c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c994:	4911      	ldr	r1, [pc, #68]	@ (801c9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c996:	4313      	orrs	r3, r2
 801c998:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801c99c:	4b0f      	ldr	r3, [pc, #60]	@ (801c9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c99e:	681b      	ldr	r3, [r3, #0]
 801c9a0:	4a0e      	ldr	r2, [pc, #56]	@ (801c9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c9a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801c9a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c9a8:	f7fb fe0e 	bl	80185c8 <HAL_GetTick>
 801c9ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801c9ae:	e008      	b.n	801c9c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801c9b0:	f7fb fe0a 	bl	80185c8 <HAL_GetTick>
 801c9b4:	4602      	mov	r2, r0
 801c9b6:	697b      	ldr	r3, [r7, #20]
 801c9b8:	1ad3      	subs	r3, r2, r3
 801c9ba:	2b64      	cmp	r3, #100	@ 0x64
 801c9bc:	d901      	bls.n	801c9c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801c9be:	2303      	movs	r3, #3
 801c9c0:	e007      	b.n	801c9d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801c9c2:	4b06      	ldr	r3, [pc, #24]	@ (801c9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c9c4:	681b      	ldr	r3, [r3, #0]
 801c9c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801c9ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801c9ce:	d1ef      	bne.n	801c9b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 801c9d0:	2300      	movs	r3, #0
}
 801c9d2:	4618      	mov	r0, r3
 801c9d4:	3720      	adds	r7, #32
 801c9d6:	46bd      	mov	sp, r7
 801c9d8:	bd80      	pop	{r7, pc}
 801c9da:	bf00      	nop
 801c9dc:	40023800 	.word	0x40023800

0801c9e0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 801c9e0:	b580      	push	{r7, lr}
 801c9e2:	b082      	sub	sp, #8
 801c9e4:	af00      	add	r7, sp, #0
 801c9e6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	2b00      	cmp	r3, #0
 801c9ec:	d101      	bne.n	801c9f2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 801c9ee:	2301      	movs	r3, #1
 801c9f0:	e01c      	b.n	801ca2c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 801c9f2:	687b      	ldr	r3, [r7, #4]
 801c9f4:	795b      	ldrb	r3, [r3, #5]
 801c9f6:	b2db      	uxtb	r3, r3
 801c9f8:	2b00      	cmp	r3, #0
 801c9fa:	d105      	bne.n	801ca08 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	2200      	movs	r2, #0
 801ca00:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 801ca02:	6878      	ldr	r0, [r7, #4]
 801ca04:	f7fb fb60 	bl	80180c8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	2202      	movs	r2, #2
 801ca0c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	681b      	ldr	r3, [r3, #0]
 801ca12:	681a      	ldr	r2, [r3, #0]
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	681b      	ldr	r3, [r3, #0]
 801ca18:	f042 0204 	orr.w	r2, r2, #4
 801ca1c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 801ca1e:	687b      	ldr	r3, [r7, #4]
 801ca20:	2201      	movs	r2, #1
 801ca22:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	2200      	movs	r2, #0
 801ca28:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 801ca2a:	2300      	movs	r3, #0
}
 801ca2c:	4618      	mov	r0, r3
 801ca2e:	3708      	adds	r7, #8
 801ca30:	46bd      	mov	sp, r7
 801ca32:	bd80      	pop	{r7, pc}

0801ca34 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 801ca34:	b580      	push	{r7, lr}
 801ca36:	b084      	sub	sp, #16
 801ca38:	af00      	add	r7, sp, #0
 801ca3a:	6078      	str	r0, [r7, #4]
 801ca3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801ca3e:	2300      	movs	r3, #0
 801ca40:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	791b      	ldrb	r3, [r3, #4]
 801ca46:	2b01      	cmp	r3, #1
 801ca48:	d101      	bne.n	801ca4e <HAL_RNG_GenerateRandomNumber+0x1a>
 801ca4a:	2302      	movs	r3, #2
 801ca4c:	e044      	b.n	801cad8 <HAL_RNG_GenerateRandomNumber+0xa4>
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	2201      	movs	r2, #1
 801ca52:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	795b      	ldrb	r3, [r3, #5]
 801ca58:	b2db      	uxtb	r3, r3
 801ca5a:	2b01      	cmp	r3, #1
 801ca5c:	d133      	bne.n	801cac6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	2202      	movs	r2, #2
 801ca62:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 801ca64:	f7fb fdb0 	bl	80185c8 <HAL_GetTick>
 801ca68:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801ca6a:	e018      	b.n	801ca9e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801ca6c:	f7fb fdac 	bl	80185c8 <HAL_GetTick>
 801ca70:	4602      	mov	r2, r0
 801ca72:	68bb      	ldr	r3, [r7, #8]
 801ca74:	1ad3      	subs	r3, r2, r3
 801ca76:	2b02      	cmp	r3, #2
 801ca78:	d911      	bls.n	801ca9e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	681b      	ldr	r3, [r3, #0]
 801ca7e:	685b      	ldr	r3, [r3, #4]
 801ca80:	f003 0301 	and.w	r3, r3, #1
 801ca84:	2b01      	cmp	r3, #1
 801ca86:	d00a      	beq.n	801ca9e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 801ca88:	687b      	ldr	r3, [r7, #4]
 801ca8a:	2201      	movs	r2, #1
 801ca8c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801ca8e:	687b      	ldr	r3, [r7, #4]
 801ca90:	2202      	movs	r2, #2
 801ca92:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	2200      	movs	r2, #0
 801ca98:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 801ca9a:	2301      	movs	r3, #1
 801ca9c:	e01c      	b.n	801cad8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801ca9e:	687b      	ldr	r3, [r7, #4]
 801caa0:	681b      	ldr	r3, [r3, #0]
 801caa2:	685b      	ldr	r3, [r3, #4]
 801caa4:	f003 0301 	and.w	r3, r3, #1
 801caa8:	2b01      	cmp	r3, #1
 801caaa:	d1df      	bne.n	801ca6c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 801caac:	687b      	ldr	r3, [r7, #4]
 801caae:	681b      	ldr	r3, [r3, #0]
 801cab0:	689a      	ldr	r2, [r3, #8]
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	68da      	ldr	r2, [r3, #12]
 801caba:	683b      	ldr	r3, [r7, #0]
 801cabc:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	2201      	movs	r2, #1
 801cac2:	715a      	strb	r2, [r3, #5]
 801cac4:	e004      	b.n	801cad0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 801cac6:	687b      	ldr	r3, [r7, #4]
 801cac8:	2204      	movs	r2, #4
 801caca:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 801cacc:	2301      	movs	r3, #1
 801cace:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 801cad0:	687b      	ldr	r3, [r7, #4]
 801cad2:	2200      	movs	r2, #0
 801cad4:	711a      	strb	r2, [r3, #4]

  return status;
 801cad6:	7bfb      	ldrb	r3, [r7, #15]
}
 801cad8:	4618      	mov	r0, r3
 801cada:	3710      	adds	r7, #16
 801cadc:	46bd      	mov	sp, r7
 801cade:	bd80      	pop	{r7, pc}

0801cae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801cae0:	b580      	push	{r7, lr}
 801cae2:	b082      	sub	sp, #8
 801cae4:	af00      	add	r7, sp, #0
 801cae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	2b00      	cmp	r3, #0
 801caec:	d101      	bne.n	801caf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801caee:	2301      	movs	r3, #1
 801caf0:	e049      	b.n	801cb86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801caf2:	687b      	ldr	r3, [r7, #4]
 801caf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801caf8:	b2db      	uxtb	r3, r3
 801cafa:	2b00      	cmp	r3, #0
 801cafc:	d106      	bne.n	801cb0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cafe:	687b      	ldr	r3, [r7, #4]
 801cb00:	2200      	movs	r2, #0
 801cb02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801cb06:	6878      	ldr	r0, [r7, #4]
 801cb08:	f7fb fb12 	bl	8018130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cb0c:	687b      	ldr	r3, [r7, #4]
 801cb0e:	2202      	movs	r2, #2
 801cb10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	681a      	ldr	r2, [r3, #0]
 801cb18:	687b      	ldr	r3, [r7, #4]
 801cb1a:	3304      	adds	r3, #4
 801cb1c:	4619      	mov	r1, r3
 801cb1e:	4610      	mov	r0, r2
 801cb20:	f000 fdcc 	bl	801d6bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cb24:	687b      	ldr	r3, [r7, #4]
 801cb26:	2201      	movs	r2, #1
 801cb28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cb2c:	687b      	ldr	r3, [r7, #4]
 801cb2e:	2201      	movs	r2, #1
 801cb30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	2201      	movs	r2, #1
 801cb38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801cb3c:	687b      	ldr	r3, [r7, #4]
 801cb3e:	2201      	movs	r2, #1
 801cb40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801cb44:	687b      	ldr	r3, [r7, #4]
 801cb46:	2201      	movs	r2, #1
 801cb48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	2201      	movs	r2, #1
 801cb50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	2201      	movs	r2, #1
 801cb58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cb5c:	687b      	ldr	r3, [r7, #4]
 801cb5e:	2201      	movs	r2, #1
 801cb60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	2201      	movs	r2, #1
 801cb68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801cb6c:	687b      	ldr	r3, [r7, #4]
 801cb6e:	2201      	movs	r2, #1
 801cb70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	2201      	movs	r2, #1
 801cb78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	2201      	movs	r2, #1
 801cb80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801cb84:	2300      	movs	r3, #0
}
 801cb86:	4618      	mov	r0, r3
 801cb88:	3708      	adds	r7, #8
 801cb8a:	46bd      	mov	sp, r7
 801cb8c:	bd80      	pop	{r7, pc}
	...

0801cb90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801cb90:	b480      	push	{r7}
 801cb92:	b085      	sub	sp, #20
 801cb94:	af00      	add	r7, sp, #0
 801cb96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801cb98:	687b      	ldr	r3, [r7, #4]
 801cb9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801cb9e:	b2db      	uxtb	r3, r3
 801cba0:	2b01      	cmp	r3, #1
 801cba2:	d001      	beq.n	801cba8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801cba4:	2301      	movs	r3, #1
 801cba6:	e04c      	b.n	801cc42 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cba8:	687b      	ldr	r3, [r7, #4]
 801cbaa:	2202      	movs	r2, #2
 801cbac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cbb0:	687b      	ldr	r3, [r7, #4]
 801cbb2:	681b      	ldr	r3, [r3, #0]
 801cbb4:	4a26      	ldr	r2, [pc, #152]	@ (801cc50 <HAL_TIM_Base_Start+0xc0>)
 801cbb6:	4293      	cmp	r3, r2
 801cbb8:	d022      	beq.n	801cc00 <HAL_TIM_Base_Start+0x70>
 801cbba:	687b      	ldr	r3, [r7, #4]
 801cbbc:	681b      	ldr	r3, [r3, #0]
 801cbbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801cbc2:	d01d      	beq.n	801cc00 <HAL_TIM_Base_Start+0x70>
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	681b      	ldr	r3, [r3, #0]
 801cbc8:	4a22      	ldr	r2, [pc, #136]	@ (801cc54 <HAL_TIM_Base_Start+0xc4>)
 801cbca:	4293      	cmp	r3, r2
 801cbcc:	d018      	beq.n	801cc00 <HAL_TIM_Base_Start+0x70>
 801cbce:	687b      	ldr	r3, [r7, #4]
 801cbd0:	681b      	ldr	r3, [r3, #0]
 801cbd2:	4a21      	ldr	r2, [pc, #132]	@ (801cc58 <HAL_TIM_Base_Start+0xc8>)
 801cbd4:	4293      	cmp	r3, r2
 801cbd6:	d013      	beq.n	801cc00 <HAL_TIM_Base_Start+0x70>
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	681b      	ldr	r3, [r3, #0]
 801cbdc:	4a1f      	ldr	r2, [pc, #124]	@ (801cc5c <HAL_TIM_Base_Start+0xcc>)
 801cbde:	4293      	cmp	r3, r2
 801cbe0:	d00e      	beq.n	801cc00 <HAL_TIM_Base_Start+0x70>
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	681b      	ldr	r3, [r3, #0]
 801cbe6:	4a1e      	ldr	r2, [pc, #120]	@ (801cc60 <HAL_TIM_Base_Start+0xd0>)
 801cbe8:	4293      	cmp	r3, r2
 801cbea:	d009      	beq.n	801cc00 <HAL_TIM_Base_Start+0x70>
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	681b      	ldr	r3, [r3, #0]
 801cbf0:	4a1c      	ldr	r2, [pc, #112]	@ (801cc64 <HAL_TIM_Base_Start+0xd4>)
 801cbf2:	4293      	cmp	r3, r2
 801cbf4:	d004      	beq.n	801cc00 <HAL_TIM_Base_Start+0x70>
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	681b      	ldr	r3, [r3, #0]
 801cbfa:	4a1b      	ldr	r2, [pc, #108]	@ (801cc68 <HAL_TIM_Base_Start+0xd8>)
 801cbfc:	4293      	cmp	r3, r2
 801cbfe:	d115      	bne.n	801cc2c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cc00:	687b      	ldr	r3, [r7, #4]
 801cc02:	681b      	ldr	r3, [r3, #0]
 801cc04:	689a      	ldr	r2, [r3, #8]
 801cc06:	4b19      	ldr	r3, [pc, #100]	@ (801cc6c <HAL_TIM_Base_Start+0xdc>)
 801cc08:	4013      	ands	r3, r2
 801cc0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cc0c:	68fb      	ldr	r3, [r7, #12]
 801cc0e:	2b06      	cmp	r3, #6
 801cc10:	d015      	beq.n	801cc3e <HAL_TIM_Base_Start+0xae>
 801cc12:	68fb      	ldr	r3, [r7, #12]
 801cc14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cc18:	d011      	beq.n	801cc3e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 801cc1a:	687b      	ldr	r3, [r7, #4]
 801cc1c:	681b      	ldr	r3, [r3, #0]
 801cc1e:	681a      	ldr	r2, [r3, #0]
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	681b      	ldr	r3, [r3, #0]
 801cc24:	f042 0201 	orr.w	r2, r2, #1
 801cc28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cc2a:	e008      	b.n	801cc3e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cc2c:	687b      	ldr	r3, [r7, #4]
 801cc2e:	681b      	ldr	r3, [r3, #0]
 801cc30:	681a      	ldr	r2, [r3, #0]
 801cc32:	687b      	ldr	r3, [r7, #4]
 801cc34:	681b      	ldr	r3, [r3, #0]
 801cc36:	f042 0201 	orr.w	r2, r2, #1
 801cc3a:	601a      	str	r2, [r3, #0]
 801cc3c:	e000      	b.n	801cc40 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cc3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801cc40:	2300      	movs	r3, #0
}
 801cc42:	4618      	mov	r0, r3
 801cc44:	3714      	adds	r7, #20
 801cc46:	46bd      	mov	sp, r7
 801cc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc4c:	4770      	bx	lr
 801cc4e:	bf00      	nop
 801cc50:	40010000 	.word	0x40010000
 801cc54:	40000400 	.word	0x40000400
 801cc58:	40000800 	.word	0x40000800
 801cc5c:	40000c00 	.word	0x40000c00
 801cc60:	40010400 	.word	0x40010400
 801cc64:	40014000 	.word	0x40014000
 801cc68:	40001800 	.word	0x40001800
 801cc6c:	00010007 	.word	0x00010007

0801cc70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801cc70:	b480      	push	{r7}
 801cc72:	b085      	sub	sp, #20
 801cc74:	af00      	add	r7, sp, #0
 801cc76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801cc7e:	b2db      	uxtb	r3, r3
 801cc80:	2b01      	cmp	r3, #1
 801cc82:	d001      	beq.n	801cc88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801cc84:	2301      	movs	r3, #1
 801cc86:	e054      	b.n	801cd32 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cc88:	687b      	ldr	r3, [r7, #4]
 801cc8a:	2202      	movs	r2, #2
 801cc8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801cc90:	687b      	ldr	r3, [r7, #4]
 801cc92:	681b      	ldr	r3, [r3, #0]
 801cc94:	68da      	ldr	r2, [r3, #12]
 801cc96:	687b      	ldr	r3, [r7, #4]
 801cc98:	681b      	ldr	r3, [r3, #0]
 801cc9a:	f042 0201 	orr.w	r2, r2, #1
 801cc9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	681b      	ldr	r3, [r3, #0]
 801cca4:	4a26      	ldr	r2, [pc, #152]	@ (801cd40 <HAL_TIM_Base_Start_IT+0xd0>)
 801cca6:	4293      	cmp	r3, r2
 801cca8:	d022      	beq.n	801ccf0 <HAL_TIM_Base_Start_IT+0x80>
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	681b      	ldr	r3, [r3, #0]
 801ccae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ccb2:	d01d      	beq.n	801ccf0 <HAL_TIM_Base_Start_IT+0x80>
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	681b      	ldr	r3, [r3, #0]
 801ccb8:	4a22      	ldr	r2, [pc, #136]	@ (801cd44 <HAL_TIM_Base_Start_IT+0xd4>)
 801ccba:	4293      	cmp	r3, r2
 801ccbc:	d018      	beq.n	801ccf0 <HAL_TIM_Base_Start_IT+0x80>
 801ccbe:	687b      	ldr	r3, [r7, #4]
 801ccc0:	681b      	ldr	r3, [r3, #0]
 801ccc2:	4a21      	ldr	r2, [pc, #132]	@ (801cd48 <HAL_TIM_Base_Start_IT+0xd8>)
 801ccc4:	4293      	cmp	r3, r2
 801ccc6:	d013      	beq.n	801ccf0 <HAL_TIM_Base_Start_IT+0x80>
 801ccc8:	687b      	ldr	r3, [r7, #4]
 801ccca:	681b      	ldr	r3, [r3, #0]
 801cccc:	4a1f      	ldr	r2, [pc, #124]	@ (801cd4c <HAL_TIM_Base_Start_IT+0xdc>)
 801ccce:	4293      	cmp	r3, r2
 801ccd0:	d00e      	beq.n	801ccf0 <HAL_TIM_Base_Start_IT+0x80>
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	681b      	ldr	r3, [r3, #0]
 801ccd6:	4a1e      	ldr	r2, [pc, #120]	@ (801cd50 <HAL_TIM_Base_Start_IT+0xe0>)
 801ccd8:	4293      	cmp	r3, r2
 801ccda:	d009      	beq.n	801ccf0 <HAL_TIM_Base_Start_IT+0x80>
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	681b      	ldr	r3, [r3, #0]
 801cce0:	4a1c      	ldr	r2, [pc, #112]	@ (801cd54 <HAL_TIM_Base_Start_IT+0xe4>)
 801cce2:	4293      	cmp	r3, r2
 801cce4:	d004      	beq.n	801ccf0 <HAL_TIM_Base_Start_IT+0x80>
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	681b      	ldr	r3, [r3, #0]
 801ccea:	4a1b      	ldr	r2, [pc, #108]	@ (801cd58 <HAL_TIM_Base_Start_IT+0xe8>)
 801ccec:	4293      	cmp	r3, r2
 801ccee:	d115      	bne.n	801cd1c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	689a      	ldr	r2, [r3, #8]
 801ccf6:	4b19      	ldr	r3, [pc, #100]	@ (801cd5c <HAL_TIM_Base_Start_IT+0xec>)
 801ccf8:	4013      	ands	r3, r2
 801ccfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ccfc:	68fb      	ldr	r3, [r7, #12]
 801ccfe:	2b06      	cmp	r3, #6
 801cd00:	d015      	beq.n	801cd2e <HAL_TIM_Base_Start_IT+0xbe>
 801cd02:	68fb      	ldr	r3, [r7, #12]
 801cd04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cd08:	d011      	beq.n	801cd2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	681b      	ldr	r3, [r3, #0]
 801cd0e:	681a      	ldr	r2, [r3, #0]
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	681b      	ldr	r3, [r3, #0]
 801cd14:	f042 0201 	orr.w	r2, r2, #1
 801cd18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cd1a:	e008      	b.n	801cd2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	681b      	ldr	r3, [r3, #0]
 801cd20:	681a      	ldr	r2, [r3, #0]
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	681b      	ldr	r3, [r3, #0]
 801cd26:	f042 0201 	orr.w	r2, r2, #1
 801cd2a:	601a      	str	r2, [r3, #0]
 801cd2c:	e000      	b.n	801cd30 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cd2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801cd30:	2300      	movs	r3, #0
}
 801cd32:	4618      	mov	r0, r3
 801cd34:	3714      	adds	r7, #20
 801cd36:	46bd      	mov	sp, r7
 801cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd3c:	4770      	bx	lr
 801cd3e:	bf00      	nop
 801cd40:	40010000 	.word	0x40010000
 801cd44:	40000400 	.word	0x40000400
 801cd48:	40000800 	.word	0x40000800
 801cd4c:	40000c00 	.word	0x40000c00
 801cd50:	40010400 	.word	0x40010400
 801cd54:	40014000 	.word	0x40014000
 801cd58:	40001800 	.word	0x40001800
 801cd5c:	00010007 	.word	0x00010007

0801cd60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801cd60:	b580      	push	{r7, lr}
 801cd62:	b082      	sub	sp, #8
 801cd64:	af00      	add	r7, sp, #0
 801cd66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	2b00      	cmp	r3, #0
 801cd6c:	d101      	bne.n	801cd72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801cd6e:	2301      	movs	r3, #1
 801cd70:	e049      	b.n	801ce06 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801cd78:	b2db      	uxtb	r3, r3
 801cd7a:	2b00      	cmp	r3, #0
 801cd7c:	d106      	bne.n	801cd8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cd7e:	687b      	ldr	r3, [r7, #4]
 801cd80:	2200      	movs	r2, #0
 801cd82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801cd86:	6878      	ldr	r0, [r7, #4]
 801cd88:	f000 f841 	bl	801ce0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cd8c:	687b      	ldr	r3, [r7, #4]
 801cd8e:	2202      	movs	r2, #2
 801cd90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cd94:	687b      	ldr	r3, [r7, #4]
 801cd96:	681a      	ldr	r2, [r3, #0]
 801cd98:	687b      	ldr	r3, [r7, #4]
 801cd9a:	3304      	adds	r3, #4
 801cd9c:	4619      	mov	r1, r3
 801cd9e:	4610      	mov	r0, r2
 801cda0:	f000 fc8c 	bl	801d6bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cda4:	687b      	ldr	r3, [r7, #4]
 801cda6:	2201      	movs	r2, #1
 801cda8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cdac:	687b      	ldr	r3, [r7, #4]
 801cdae:	2201      	movs	r2, #1
 801cdb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	2201      	movs	r2, #1
 801cdb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	2201      	movs	r2, #1
 801cdc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	2201      	movs	r2, #1
 801cdc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801cdcc:	687b      	ldr	r3, [r7, #4]
 801cdce:	2201      	movs	r2, #1
 801cdd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	2201      	movs	r2, #1
 801cdd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cddc:	687b      	ldr	r3, [r7, #4]
 801cdde:	2201      	movs	r2, #1
 801cde0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	2201      	movs	r2, #1
 801cde8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	2201      	movs	r2, #1
 801cdf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	2201      	movs	r2, #1
 801cdf8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cdfc:	687b      	ldr	r3, [r7, #4]
 801cdfe:	2201      	movs	r2, #1
 801ce00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801ce04:	2300      	movs	r3, #0
}
 801ce06:	4618      	mov	r0, r3
 801ce08:	3708      	adds	r7, #8
 801ce0a:	46bd      	mov	sp, r7
 801ce0c:	bd80      	pop	{r7, pc}

0801ce0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801ce0e:	b480      	push	{r7}
 801ce10:	b083      	sub	sp, #12
 801ce12:	af00      	add	r7, sp, #0
 801ce14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801ce16:	bf00      	nop
 801ce18:	370c      	adds	r7, #12
 801ce1a:	46bd      	mov	sp, r7
 801ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce20:	4770      	bx	lr
	...

0801ce24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ce24:	b580      	push	{r7, lr}
 801ce26:	b084      	sub	sp, #16
 801ce28:	af00      	add	r7, sp, #0
 801ce2a:	6078      	str	r0, [r7, #4]
 801ce2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801ce2e:	683b      	ldr	r3, [r7, #0]
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	d109      	bne.n	801ce48 <HAL_TIM_PWM_Start+0x24>
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801ce3a:	b2db      	uxtb	r3, r3
 801ce3c:	2b01      	cmp	r3, #1
 801ce3e:	bf14      	ite	ne
 801ce40:	2301      	movne	r3, #1
 801ce42:	2300      	moveq	r3, #0
 801ce44:	b2db      	uxtb	r3, r3
 801ce46:	e03c      	b.n	801cec2 <HAL_TIM_PWM_Start+0x9e>
 801ce48:	683b      	ldr	r3, [r7, #0]
 801ce4a:	2b04      	cmp	r3, #4
 801ce4c:	d109      	bne.n	801ce62 <HAL_TIM_PWM_Start+0x3e>
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801ce54:	b2db      	uxtb	r3, r3
 801ce56:	2b01      	cmp	r3, #1
 801ce58:	bf14      	ite	ne
 801ce5a:	2301      	movne	r3, #1
 801ce5c:	2300      	moveq	r3, #0
 801ce5e:	b2db      	uxtb	r3, r3
 801ce60:	e02f      	b.n	801cec2 <HAL_TIM_PWM_Start+0x9e>
 801ce62:	683b      	ldr	r3, [r7, #0]
 801ce64:	2b08      	cmp	r3, #8
 801ce66:	d109      	bne.n	801ce7c <HAL_TIM_PWM_Start+0x58>
 801ce68:	687b      	ldr	r3, [r7, #4]
 801ce6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801ce6e:	b2db      	uxtb	r3, r3
 801ce70:	2b01      	cmp	r3, #1
 801ce72:	bf14      	ite	ne
 801ce74:	2301      	movne	r3, #1
 801ce76:	2300      	moveq	r3, #0
 801ce78:	b2db      	uxtb	r3, r3
 801ce7a:	e022      	b.n	801cec2 <HAL_TIM_PWM_Start+0x9e>
 801ce7c:	683b      	ldr	r3, [r7, #0]
 801ce7e:	2b0c      	cmp	r3, #12
 801ce80:	d109      	bne.n	801ce96 <HAL_TIM_PWM_Start+0x72>
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801ce88:	b2db      	uxtb	r3, r3
 801ce8a:	2b01      	cmp	r3, #1
 801ce8c:	bf14      	ite	ne
 801ce8e:	2301      	movne	r3, #1
 801ce90:	2300      	moveq	r3, #0
 801ce92:	b2db      	uxtb	r3, r3
 801ce94:	e015      	b.n	801cec2 <HAL_TIM_PWM_Start+0x9e>
 801ce96:	683b      	ldr	r3, [r7, #0]
 801ce98:	2b10      	cmp	r3, #16
 801ce9a:	d109      	bne.n	801ceb0 <HAL_TIM_PWM_Start+0x8c>
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801cea2:	b2db      	uxtb	r3, r3
 801cea4:	2b01      	cmp	r3, #1
 801cea6:	bf14      	ite	ne
 801cea8:	2301      	movne	r3, #1
 801ceaa:	2300      	moveq	r3, #0
 801ceac:	b2db      	uxtb	r3, r3
 801ceae:	e008      	b.n	801cec2 <HAL_TIM_PWM_Start+0x9e>
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801ceb6:	b2db      	uxtb	r3, r3
 801ceb8:	2b01      	cmp	r3, #1
 801ceba:	bf14      	ite	ne
 801cebc:	2301      	movne	r3, #1
 801cebe:	2300      	moveq	r3, #0
 801cec0:	b2db      	uxtb	r3, r3
 801cec2:	2b00      	cmp	r3, #0
 801cec4:	d001      	beq.n	801ceca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801cec6:	2301      	movs	r3, #1
 801cec8:	e092      	b.n	801cff0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ceca:	683b      	ldr	r3, [r7, #0]
 801cecc:	2b00      	cmp	r3, #0
 801cece:	d104      	bne.n	801ceda <HAL_TIM_PWM_Start+0xb6>
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	2202      	movs	r2, #2
 801ced4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801ced8:	e023      	b.n	801cf22 <HAL_TIM_PWM_Start+0xfe>
 801ceda:	683b      	ldr	r3, [r7, #0]
 801cedc:	2b04      	cmp	r3, #4
 801cede:	d104      	bne.n	801ceea <HAL_TIM_PWM_Start+0xc6>
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	2202      	movs	r2, #2
 801cee4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801cee8:	e01b      	b.n	801cf22 <HAL_TIM_PWM_Start+0xfe>
 801ceea:	683b      	ldr	r3, [r7, #0]
 801ceec:	2b08      	cmp	r3, #8
 801ceee:	d104      	bne.n	801cefa <HAL_TIM_PWM_Start+0xd6>
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	2202      	movs	r2, #2
 801cef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801cef8:	e013      	b.n	801cf22 <HAL_TIM_PWM_Start+0xfe>
 801cefa:	683b      	ldr	r3, [r7, #0]
 801cefc:	2b0c      	cmp	r3, #12
 801cefe:	d104      	bne.n	801cf0a <HAL_TIM_PWM_Start+0xe6>
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	2202      	movs	r2, #2
 801cf04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801cf08:	e00b      	b.n	801cf22 <HAL_TIM_PWM_Start+0xfe>
 801cf0a:	683b      	ldr	r3, [r7, #0]
 801cf0c:	2b10      	cmp	r3, #16
 801cf0e:	d104      	bne.n	801cf1a <HAL_TIM_PWM_Start+0xf6>
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	2202      	movs	r2, #2
 801cf14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801cf18:	e003      	b.n	801cf22 <HAL_TIM_PWM_Start+0xfe>
 801cf1a:	687b      	ldr	r3, [r7, #4]
 801cf1c:	2202      	movs	r2, #2
 801cf1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801cf22:	687b      	ldr	r3, [r7, #4]
 801cf24:	681b      	ldr	r3, [r3, #0]
 801cf26:	2201      	movs	r2, #1
 801cf28:	6839      	ldr	r1, [r7, #0]
 801cf2a:	4618      	mov	r0, r3
 801cf2c:	f000 ff6a 	bl	801de04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801cf30:	687b      	ldr	r3, [r7, #4]
 801cf32:	681b      	ldr	r3, [r3, #0]
 801cf34:	4a30      	ldr	r2, [pc, #192]	@ (801cff8 <HAL_TIM_PWM_Start+0x1d4>)
 801cf36:	4293      	cmp	r3, r2
 801cf38:	d004      	beq.n	801cf44 <HAL_TIM_PWM_Start+0x120>
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	681b      	ldr	r3, [r3, #0]
 801cf3e:	4a2f      	ldr	r2, [pc, #188]	@ (801cffc <HAL_TIM_PWM_Start+0x1d8>)
 801cf40:	4293      	cmp	r3, r2
 801cf42:	d101      	bne.n	801cf48 <HAL_TIM_PWM_Start+0x124>
 801cf44:	2301      	movs	r3, #1
 801cf46:	e000      	b.n	801cf4a <HAL_TIM_PWM_Start+0x126>
 801cf48:	2300      	movs	r3, #0
 801cf4a:	2b00      	cmp	r3, #0
 801cf4c:	d007      	beq.n	801cf5e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	681b      	ldr	r3, [r3, #0]
 801cf52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801cf54:	687b      	ldr	r3, [r7, #4]
 801cf56:	681b      	ldr	r3, [r3, #0]
 801cf58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801cf5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	681b      	ldr	r3, [r3, #0]
 801cf62:	4a25      	ldr	r2, [pc, #148]	@ (801cff8 <HAL_TIM_PWM_Start+0x1d4>)
 801cf64:	4293      	cmp	r3, r2
 801cf66:	d022      	beq.n	801cfae <HAL_TIM_PWM_Start+0x18a>
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	681b      	ldr	r3, [r3, #0]
 801cf6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801cf70:	d01d      	beq.n	801cfae <HAL_TIM_PWM_Start+0x18a>
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	681b      	ldr	r3, [r3, #0]
 801cf76:	4a22      	ldr	r2, [pc, #136]	@ (801d000 <HAL_TIM_PWM_Start+0x1dc>)
 801cf78:	4293      	cmp	r3, r2
 801cf7a:	d018      	beq.n	801cfae <HAL_TIM_PWM_Start+0x18a>
 801cf7c:	687b      	ldr	r3, [r7, #4]
 801cf7e:	681b      	ldr	r3, [r3, #0]
 801cf80:	4a20      	ldr	r2, [pc, #128]	@ (801d004 <HAL_TIM_PWM_Start+0x1e0>)
 801cf82:	4293      	cmp	r3, r2
 801cf84:	d013      	beq.n	801cfae <HAL_TIM_PWM_Start+0x18a>
 801cf86:	687b      	ldr	r3, [r7, #4]
 801cf88:	681b      	ldr	r3, [r3, #0]
 801cf8a:	4a1f      	ldr	r2, [pc, #124]	@ (801d008 <HAL_TIM_PWM_Start+0x1e4>)
 801cf8c:	4293      	cmp	r3, r2
 801cf8e:	d00e      	beq.n	801cfae <HAL_TIM_PWM_Start+0x18a>
 801cf90:	687b      	ldr	r3, [r7, #4]
 801cf92:	681b      	ldr	r3, [r3, #0]
 801cf94:	4a19      	ldr	r2, [pc, #100]	@ (801cffc <HAL_TIM_PWM_Start+0x1d8>)
 801cf96:	4293      	cmp	r3, r2
 801cf98:	d009      	beq.n	801cfae <HAL_TIM_PWM_Start+0x18a>
 801cf9a:	687b      	ldr	r3, [r7, #4]
 801cf9c:	681b      	ldr	r3, [r3, #0]
 801cf9e:	4a1b      	ldr	r2, [pc, #108]	@ (801d00c <HAL_TIM_PWM_Start+0x1e8>)
 801cfa0:	4293      	cmp	r3, r2
 801cfa2:	d004      	beq.n	801cfae <HAL_TIM_PWM_Start+0x18a>
 801cfa4:	687b      	ldr	r3, [r7, #4]
 801cfa6:	681b      	ldr	r3, [r3, #0]
 801cfa8:	4a19      	ldr	r2, [pc, #100]	@ (801d010 <HAL_TIM_PWM_Start+0x1ec>)
 801cfaa:	4293      	cmp	r3, r2
 801cfac:	d115      	bne.n	801cfda <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cfae:	687b      	ldr	r3, [r7, #4]
 801cfb0:	681b      	ldr	r3, [r3, #0]
 801cfb2:	689a      	ldr	r2, [r3, #8]
 801cfb4:	4b17      	ldr	r3, [pc, #92]	@ (801d014 <HAL_TIM_PWM_Start+0x1f0>)
 801cfb6:	4013      	ands	r3, r2
 801cfb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cfba:	68fb      	ldr	r3, [r7, #12]
 801cfbc:	2b06      	cmp	r3, #6
 801cfbe:	d015      	beq.n	801cfec <HAL_TIM_PWM_Start+0x1c8>
 801cfc0:	68fb      	ldr	r3, [r7, #12]
 801cfc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cfc6:	d011      	beq.n	801cfec <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 801cfc8:	687b      	ldr	r3, [r7, #4]
 801cfca:	681b      	ldr	r3, [r3, #0]
 801cfcc:	681a      	ldr	r2, [r3, #0]
 801cfce:	687b      	ldr	r3, [r7, #4]
 801cfd0:	681b      	ldr	r3, [r3, #0]
 801cfd2:	f042 0201 	orr.w	r2, r2, #1
 801cfd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cfd8:	e008      	b.n	801cfec <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cfda:	687b      	ldr	r3, [r7, #4]
 801cfdc:	681b      	ldr	r3, [r3, #0]
 801cfde:	681a      	ldr	r2, [r3, #0]
 801cfe0:	687b      	ldr	r3, [r7, #4]
 801cfe2:	681b      	ldr	r3, [r3, #0]
 801cfe4:	f042 0201 	orr.w	r2, r2, #1
 801cfe8:	601a      	str	r2, [r3, #0]
 801cfea:	e000      	b.n	801cfee <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cfec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801cfee:	2300      	movs	r3, #0
}
 801cff0:	4618      	mov	r0, r3
 801cff2:	3710      	adds	r7, #16
 801cff4:	46bd      	mov	sp, r7
 801cff6:	bd80      	pop	{r7, pc}
 801cff8:	40010000 	.word	0x40010000
 801cffc:	40010400 	.word	0x40010400
 801d000:	40000400 	.word	0x40000400
 801d004:	40000800 	.word	0x40000800
 801d008:	40000c00 	.word	0x40000c00
 801d00c:	40014000 	.word	0x40014000
 801d010:	40001800 	.word	0x40001800
 801d014:	00010007 	.word	0x00010007

0801d018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801d018:	b580      	push	{r7, lr}
 801d01a:	b084      	sub	sp, #16
 801d01c:	af00      	add	r7, sp, #0
 801d01e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801d020:	687b      	ldr	r3, [r7, #4]
 801d022:	681b      	ldr	r3, [r3, #0]
 801d024:	68db      	ldr	r3, [r3, #12]
 801d026:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	681b      	ldr	r3, [r3, #0]
 801d02c:	691b      	ldr	r3, [r3, #16]
 801d02e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801d030:	68bb      	ldr	r3, [r7, #8]
 801d032:	f003 0302 	and.w	r3, r3, #2
 801d036:	2b00      	cmp	r3, #0
 801d038:	d020      	beq.n	801d07c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801d03a:	68fb      	ldr	r3, [r7, #12]
 801d03c:	f003 0302 	and.w	r3, r3, #2
 801d040:	2b00      	cmp	r3, #0
 801d042:	d01b      	beq.n	801d07c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801d044:	687b      	ldr	r3, [r7, #4]
 801d046:	681b      	ldr	r3, [r3, #0]
 801d048:	f06f 0202 	mvn.w	r2, #2
 801d04c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801d04e:	687b      	ldr	r3, [r7, #4]
 801d050:	2201      	movs	r2, #1
 801d052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	681b      	ldr	r3, [r3, #0]
 801d058:	699b      	ldr	r3, [r3, #24]
 801d05a:	f003 0303 	and.w	r3, r3, #3
 801d05e:	2b00      	cmp	r3, #0
 801d060:	d003      	beq.n	801d06a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801d062:	6878      	ldr	r0, [r7, #4]
 801d064:	f000 fb0c 	bl	801d680 <HAL_TIM_IC_CaptureCallback>
 801d068:	e005      	b.n	801d076 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801d06a:	6878      	ldr	r0, [r7, #4]
 801d06c:	f000 fafe 	bl	801d66c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d070:	6878      	ldr	r0, [r7, #4]
 801d072:	f000 fb0f 	bl	801d694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d076:	687b      	ldr	r3, [r7, #4]
 801d078:	2200      	movs	r2, #0
 801d07a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801d07c:	68bb      	ldr	r3, [r7, #8]
 801d07e:	f003 0304 	and.w	r3, r3, #4
 801d082:	2b00      	cmp	r3, #0
 801d084:	d020      	beq.n	801d0c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801d086:	68fb      	ldr	r3, [r7, #12]
 801d088:	f003 0304 	and.w	r3, r3, #4
 801d08c:	2b00      	cmp	r3, #0
 801d08e:	d01b      	beq.n	801d0c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	681b      	ldr	r3, [r3, #0]
 801d094:	f06f 0204 	mvn.w	r2, #4
 801d098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	2202      	movs	r2, #2
 801d09e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801d0a0:	687b      	ldr	r3, [r7, #4]
 801d0a2:	681b      	ldr	r3, [r3, #0]
 801d0a4:	699b      	ldr	r3, [r3, #24]
 801d0a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801d0aa:	2b00      	cmp	r3, #0
 801d0ac:	d003      	beq.n	801d0b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d0ae:	6878      	ldr	r0, [r7, #4]
 801d0b0:	f000 fae6 	bl	801d680 <HAL_TIM_IC_CaptureCallback>
 801d0b4:	e005      	b.n	801d0c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d0b6:	6878      	ldr	r0, [r7, #4]
 801d0b8:	f000 fad8 	bl	801d66c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d0bc:	6878      	ldr	r0, [r7, #4]
 801d0be:	f000 fae9 	bl	801d694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d0c2:	687b      	ldr	r3, [r7, #4]
 801d0c4:	2200      	movs	r2, #0
 801d0c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801d0c8:	68bb      	ldr	r3, [r7, #8]
 801d0ca:	f003 0308 	and.w	r3, r3, #8
 801d0ce:	2b00      	cmp	r3, #0
 801d0d0:	d020      	beq.n	801d114 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801d0d2:	68fb      	ldr	r3, [r7, #12]
 801d0d4:	f003 0308 	and.w	r3, r3, #8
 801d0d8:	2b00      	cmp	r3, #0
 801d0da:	d01b      	beq.n	801d114 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	681b      	ldr	r3, [r3, #0]
 801d0e0:	f06f 0208 	mvn.w	r2, #8
 801d0e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	2204      	movs	r2, #4
 801d0ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	681b      	ldr	r3, [r3, #0]
 801d0f0:	69db      	ldr	r3, [r3, #28]
 801d0f2:	f003 0303 	and.w	r3, r3, #3
 801d0f6:	2b00      	cmp	r3, #0
 801d0f8:	d003      	beq.n	801d102 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d0fa:	6878      	ldr	r0, [r7, #4]
 801d0fc:	f000 fac0 	bl	801d680 <HAL_TIM_IC_CaptureCallback>
 801d100:	e005      	b.n	801d10e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d102:	6878      	ldr	r0, [r7, #4]
 801d104:	f000 fab2 	bl	801d66c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d108:	6878      	ldr	r0, [r7, #4]
 801d10a:	f000 fac3 	bl	801d694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d10e:	687b      	ldr	r3, [r7, #4]
 801d110:	2200      	movs	r2, #0
 801d112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801d114:	68bb      	ldr	r3, [r7, #8]
 801d116:	f003 0310 	and.w	r3, r3, #16
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	d020      	beq.n	801d160 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801d11e:	68fb      	ldr	r3, [r7, #12]
 801d120:	f003 0310 	and.w	r3, r3, #16
 801d124:	2b00      	cmp	r3, #0
 801d126:	d01b      	beq.n	801d160 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801d128:	687b      	ldr	r3, [r7, #4]
 801d12a:	681b      	ldr	r3, [r3, #0]
 801d12c:	f06f 0210 	mvn.w	r2, #16
 801d130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	2208      	movs	r2, #8
 801d136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d138:	687b      	ldr	r3, [r7, #4]
 801d13a:	681b      	ldr	r3, [r3, #0]
 801d13c:	69db      	ldr	r3, [r3, #28]
 801d13e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801d142:	2b00      	cmp	r3, #0
 801d144:	d003      	beq.n	801d14e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d146:	6878      	ldr	r0, [r7, #4]
 801d148:	f000 fa9a 	bl	801d680 <HAL_TIM_IC_CaptureCallback>
 801d14c:	e005      	b.n	801d15a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d14e:	6878      	ldr	r0, [r7, #4]
 801d150:	f000 fa8c 	bl	801d66c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d154:	6878      	ldr	r0, [r7, #4]
 801d156:	f000 fa9d 	bl	801d694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	2200      	movs	r2, #0
 801d15e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801d160:	68bb      	ldr	r3, [r7, #8]
 801d162:	f003 0301 	and.w	r3, r3, #1
 801d166:	2b00      	cmp	r3, #0
 801d168:	d00c      	beq.n	801d184 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801d16a:	68fb      	ldr	r3, [r7, #12]
 801d16c:	f003 0301 	and.w	r3, r3, #1
 801d170:	2b00      	cmp	r3, #0
 801d172:	d007      	beq.n	801d184 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801d174:	687b      	ldr	r3, [r7, #4]
 801d176:	681b      	ldr	r3, [r3, #0]
 801d178:	f06f 0201 	mvn.w	r2, #1
 801d17c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801d17e:	6878      	ldr	r0, [r7, #4]
 801d180:	f7e8 fe64 	bl	8005e4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801d184:	68bb      	ldr	r3, [r7, #8]
 801d186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801d18a:	2b00      	cmp	r3, #0
 801d18c:	d104      	bne.n	801d198 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801d18e:	68bb      	ldr	r3, [r7, #8]
 801d190:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801d194:	2b00      	cmp	r3, #0
 801d196:	d00c      	beq.n	801d1b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801d198:	68fb      	ldr	r3, [r7, #12]
 801d19a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	d007      	beq.n	801d1b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801d1a2:	687b      	ldr	r3, [r7, #4]
 801d1a4:	681b      	ldr	r3, [r3, #0]
 801d1a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801d1aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801d1ac:	6878      	ldr	r0, [r7, #4]
 801d1ae:	f000 ff65 	bl	801e07c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801d1b2:	68bb      	ldr	r3, [r7, #8]
 801d1b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	d00c      	beq.n	801d1d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801d1bc:	68fb      	ldr	r3, [r7, #12]
 801d1be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801d1c2:	2b00      	cmp	r3, #0
 801d1c4:	d007      	beq.n	801d1d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801d1c6:	687b      	ldr	r3, [r7, #4]
 801d1c8:	681b      	ldr	r3, [r3, #0]
 801d1ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801d1ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801d1d0:	6878      	ldr	r0, [r7, #4]
 801d1d2:	f000 ff5d 	bl	801e090 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801d1d6:	68bb      	ldr	r3, [r7, #8]
 801d1d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d1dc:	2b00      	cmp	r3, #0
 801d1de:	d00c      	beq.n	801d1fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801d1e0:	68fb      	ldr	r3, [r7, #12]
 801d1e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d1e6:	2b00      	cmp	r3, #0
 801d1e8:	d007      	beq.n	801d1fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801d1ea:	687b      	ldr	r3, [r7, #4]
 801d1ec:	681b      	ldr	r3, [r3, #0]
 801d1ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801d1f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801d1f4:	6878      	ldr	r0, [r7, #4]
 801d1f6:	f000 fa57 	bl	801d6a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801d1fa:	68bb      	ldr	r3, [r7, #8]
 801d1fc:	f003 0320 	and.w	r3, r3, #32
 801d200:	2b00      	cmp	r3, #0
 801d202:	d00c      	beq.n	801d21e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801d204:	68fb      	ldr	r3, [r7, #12]
 801d206:	f003 0320 	and.w	r3, r3, #32
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	d007      	beq.n	801d21e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801d20e:	687b      	ldr	r3, [r7, #4]
 801d210:	681b      	ldr	r3, [r3, #0]
 801d212:	f06f 0220 	mvn.w	r2, #32
 801d216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801d218:	6878      	ldr	r0, [r7, #4]
 801d21a:	f000 ff25 	bl	801e068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801d21e:	bf00      	nop
 801d220:	3710      	adds	r7, #16
 801d222:	46bd      	mov	sp, r7
 801d224:	bd80      	pop	{r7, pc}
	...

0801d228 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801d228:	b580      	push	{r7, lr}
 801d22a:	b086      	sub	sp, #24
 801d22c:	af00      	add	r7, sp, #0
 801d22e:	60f8      	str	r0, [r7, #12]
 801d230:	60b9      	str	r1, [r7, #8]
 801d232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801d234:	2300      	movs	r3, #0
 801d236:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801d238:	68fb      	ldr	r3, [r7, #12]
 801d23a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801d23e:	2b01      	cmp	r3, #1
 801d240:	d101      	bne.n	801d246 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801d242:	2302      	movs	r3, #2
 801d244:	e0ff      	b.n	801d446 <HAL_TIM_PWM_ConfigChannel+0x21e>
 801d246:	68fb      	ldr	r3, [r7, #12]
 801d248:	2201      	movs	r2, #1
 801d24a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801d24e:	687b      	ldr	r3, [r7, #4]
 801d250:	2b14      	cmp	r3, #20
 801d252:	f200 80f0 	bhi.w	801d436 <HAL_TIM_PWM_ConfigChannel+0x20e>
 801d256:	a201      	add	r2, pc, #4	@ (adr r2, 801d25c <HAL_TIM_PWM_ConfigChannel+0x34>)
 801d258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d25c:	0801d2b1 	.word	0x0801d2b1
 801d260:	0801d437 	.word	0x0801d437
 801d264:	0801d437 	.word	0x0801d437
 801d268:	0801d437 	.word	0x0801d437
 801d26c:	0801d2f1 	.word	0x0801d2f1
 801d270:	0801d437 	.word	0x0801d437
 801d274:	0801d437 	.word	0x0801d437
 801d278:	0801d437 	.word	0x0801d437
 801d27c:	0801d333 	.word	0x0801d333
 801d280:	0801d437 	.word	0x0801d437
 801d284:	0801d437 	.word	0x0801d437
 801d288:	0801d437 	.word	0x0801d437
 801d28c:	0801d373 	.word	0x0801d373
 801d290:	0801d437 	.word	0x0801d437
 801d294:	0801d437 	.word	0x0801d437
 801d298:	0801d437 	.word	0x0801d437
 801d29c:	0801d3b5 	.word	0x0801d3b5
 801d2a0:	0801d437 	.word	0x0801d437
 801d2a4:	0801d437 	.word	0x0801d437
 801d2a8:	0801d437 	.word	0x0801d437
 801d2ac:	0801d3f5 	.word	0x0801d3f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801d2b0:	68fb      	ldr	r3, [r7, #12]
 801d2b2:	681b      	ldr	r3, [r3, #0]
 801d2b4:	68b9      	ldr	r1, [r7, #8]
 801d2b6:	4618      	mov	r0, r3
 801d2b8:	f000 faac 	bl	801d814 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801d2bc:	68fb      	ldr	r3, [r7, #12]
 801d2be:	681b      	ldr	r3, [r3, #0]
 801d2c0:	699a      	ldr	r2, [r3, #24]
 801d2c2:	68fb      	ldr	r3, [r7, #12]
 801d2c4:	681b      	ldr	r3, [r3, #0]
 801d2c6:	f042 0208 	orr.w	r2, r2, #8
 801d2ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801d2cc:	68fb      	ldr	r3, [r7, #12]
 801d2ce:	681b      	ldr	r3, [r3, #0]
 801d2d0:	699a      	ldr	r2, [r3, #24]
 801d2d2:	68fb      	ldr	r3, [r7, #12]
 801d2d4:	681b      	ldr	r3, [r3, #0]
 801d2d6:	f022 0204 	bic.w	r2, r2, #4
 801d2da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801d2dc:	68fb      	ldr	r3, [r7, #12]
 801d2de:	681b      	ldr	r3, [r3, #0]
 801d2e0:	6999      	ldr	r1, [r3, #24]
 801d2e2:	68bb      	ldr	r3, [r7, #8]
 801d2e4:	691a      	ldr	r2, [r3, #16]
 801d2e6:	68fb      	ldr	r3, [r7, #12]
 801d2e8:	681b      	ldr	r3, [r3, #0]
 801d2ea:	430a      	orrs	r2, r1
 801d2ec:	619a      	str	r2, [r3, #24]
      break;
 801d2ee:	e0a5      	b.n	801d43c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d2f0:	68fb      	ldr	r3, [r7, #12]
 801d2f2:	681b      	ldr	r3, [r3, #0]
 801d2f4:	68b9      	ldr	r1, [r7, #8]
 801d2f6:	4618      	mov	r0, r3
 801d2f8:	f000 fafe 	bl	801d8f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801d2fc:	68fb      	ldr	r3, [r7, #12]
 801d2fe:	681b      	ldr	r3, [r3, #0]
 801d300:	699a      	ldr	r2, [r3, #24]
 801d302:	68fb      	ldr	r3, [r7, #12]
 801d304:	681b      	ldr	r3, [r3, #0]
 801d306:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801d30a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801d30c:	68fb      	ldr	r3, [r7, #12]
 801d30e:	681b      	ldr	r3, [r3, #0]
 801d310:	699a      	ldr	r2, [r3, #24]
 801d312:	68fb      	ldr	r3, [r7, #12]
 801d314:	681b      	ldr	r3, [r3, #0]
 801d316:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801d31a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801d31c:	68fb      	ldr	r3, [r7, #12]
 801d31e:	681b      	ldr	r3, [r3, #0]
 801d320:	6999      	ldr	r1, [r3, #24]
 801d322:	68bb      	ldr	r3, [r7, #8]
 801d324:	691b      	ldr	r3, [r3, #16]
 801d326:	021a      	lsls	r2, r3, #8
 801d328:	68fb      	ldr	r3, [r7, #12]
 801d32a:	681b      	ldr	r3, [r3, #0]
 801d32c:	430a      	orrs	r2, r1
 801d32e:	619a      	str	r2, [r3, #24]
      break;
 801d330:	e084      	b.n	801d43c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d332:	68fb      	ldr	r3, [r7, #12]
 801d334:	681b      	ldr	r3, [r3, #0]
 801d336:	68b9      	ldr	r1, [r7, #8]
 801d338:	4618      	mov	r0, r3
 801d33a:	f000 fb55 	bl	801d9e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801d33e:	68fb      	ldr	r3, [r7, #12]
 801d340:	681b      	ldr	r3, [r3, #0]
 801d342:	69da      	ldr	r2, [r3, #28]
 801d344:	68fb      	ldr	r3, [r7, #12]
 801d346:	681b      	ldr	r3, [r3, #0]
 801d348:	f042 0208 	orr.w	r2, r2, #8
 801d34c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801d34e:	68fb      	ldr	r3, [r7, #12]
 801d350:	681b      	ldr	r3, [r3, #0]
 801d352:	69da      	ldr	r2, [r3, #28]
 801d354:	68fb      	ldr	r3, [r7, #12]
 801d356:	681b      	ldr	r3, [r3, #0]
 801d358:	f022 0204 	bic.w	r2, r2, #4
 801d35c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801d35e:	68fb      	ldr	r3, [r7, #12]
 801d360:	681b      	ldr	r3, [r3, #0]
 801d362:	69d9      	ldr	r1, [r3, #28]
 801d364:	68bb      	ldr	r3, [r7, #8]
 801d366:	691a      	ldr	r2, [r3, #16]
 801d368:	68fb      	ldr	r3, [r7, #12]
 801d36a:	681b      	ldr	r3, [r3, #0]
 801d36c:	430a      	orrs	r2, r1
 801d36e:	61da      	str	r2, [r3, #28]
      break;
 801d370:	e064      	b.n	801d43c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d372:	68fb      	ldr	r3, [r7, #12]
 801d374:	681b      	ldr	r3, [r3, #0]
 801d376:	68b9      	ldr	r1, [r7, #8]
 801d378:	4618      	mov	r0, r3
 801d37a:	f000 fbab 	bl	801dad4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801d37e:	68fb      	ldr	r3, [r7, #12]
 801d380:	681b      	ldr	r3, [r3, #0]
 801d382:	69da      	ldr	r2, [r3, #28]
 801d384:	68fb      	ldr	r3, [r7, #12]
 801d386:	681b      	ldr	r3, [r3, #0]
 801d388:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801d38c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801d38e:	68fb      	ldr	r3, [r7, #12]
 801d390:	681b      	ldr	r3, [r3, #0]
 801d392:	69da      	ldr	r2, [r3, #28]
 801d394:	68fb      	ldr	r3, [r7, #12]
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801d39c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801d39e:	68fb      	ldr	r3, [r7, #12]
 801d3a0:	681b      	ldr	r3, [r3, #0]
 801d3a2:	69d9      	ldr	r1, [r3, #28]
 801d3a4:	68bb      	ldr	r3, [r7, #8]
 801d3a6:	691b      	ldr	r3, [r3, #16]
 801d3a8:	021a      	lsls	r2, r3, #8
 801d3aa:	68fb      	ldr	r3, [r7, #12]
 801d3ac:	681b      	ldr	r3, [r3, #0]
 801d3ae:	430a      	orrs	r2, r1
 801d3b0:	61da      	str	r2, [r3, #28]
      break;
 801d3b2:	e043      	b.n	801d43c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801d3b4:	68fb      	ldr	r3, [r7, #12]
 801d3b6:	681b      	ldr	r3, [r3, #0]
 801d3b8:	68b9      	ldr	r1, [r7, #8]
 801d3ba:	4618      	mov	r0, r3
 801d3bc:	f000 fbe2 	bl	801db84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801d3c0:	68fb      	ldr	r3, [r7, #12]
 801d3c2:	681b      	ldr	r3, [r3, #0]
 801d3c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801d3c6:	68fb      	ldr	r3, [r7, #12]
 801d3c8:	681b      	ldr	r3, [r3, #0]
 801d3ca:	f042 0208 	orr.w	r2, r2, #8
 801d3ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801d3d0:	68fb      	ldr	r3, [r7, #12]
 801d3d2:	681b      	ldr	r3, [r3, #0]
 801d3d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801d3d6:	68fb      	ldr	r3, [r7, #12]
 801d3d8:	681b      	ldr	r3, [r3, #0]
 801d3da:	f022 0204 	bic.w	r2, r2, #4
 801d3de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801d3e0:	68fb      	ldr	r3, [r7, #12]
 801d3e2:	681b      	ldr	r3, [r3, #0]
 801d3e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801d3e6:	68bb      	ldr	r3, [r7, #8]
 801d3e8:	691a      	ldr	r2, [r3, #16]
 801d3ea:	68fb      	ldr	r3, [r7, #12]
 801d3ec:	681b      	ldr	r3, [r3, #0]
 801d3ee:	430a      	orrs	r2, r1
 801d3f0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801d3f2:	e023      	b.n	801d43c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801d3f4:	68fb      	ldr	r3, [r7, #12]
 801d3f6:	681b      	ldr	r3, [r3, #0]
 801d3f8:	68b9      	ldr	r1, [r7, #8]
 801d3fa:	4618      	mov	r0, r3
 801d3fc:	f000 fc14 	bl	801dc28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801d400:	68fb      	ldr	r3, [r7, #12]
 801d402:	681b      	ldr	r3, [r3, #0]
 801d404:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801d406:	68fb      	ldr	r3, [r7, #12]
 801d408:	681b      	ldr	r3, [r3, #0]
 801d40a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801d40e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801d410:	68fb      	ldr	r3, [r7, #12]
 801d412:	681b      	ldr	r3, [r3, #0]
 801d414:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801d416:	68fb      	ldr	r3, [r7, #12]
 801d418:	681b      	ldr	r3, [r3, #0]
 801d41a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801d41e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801d420:	68fb      	ldr	r3, [r7, #12]
 801d422:	681b      	ldr	r3, [r3, #0]
 801d424:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801d426:	68bb      	ldr	r3, [r7, #8]
 801d428:	691b      	ldr	r3, [r3, #16]
 801d42a:	021a      	lsls	r2, r3, #8
 801d42c:	68fb      	ldr	r3, [r7, #12]
 801d42e:	681b      	ldr	r3, [r3, #0]
 801d430:	430a      	orrs	r2, r1
 801d432:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801d434:	e002      	b.n	801d43c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801d436:	2301      	movs	r3, #1
 801d438:	75fb      	strb	r3, [r7, #23]
      break;
 801d43a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801d43c:	68fb      	ldr	r3, [r7, #12]
 801d43e:	2200      	movs	r2, #0
 801d440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801d444:	7dfb      	ldrb	r3, [r7, #23]
}
 801d446:	4618      	mov	r0, r3
 801d448:	3718      	adds	r7, #24
 801d44a:	46bd      	mov	sp, r7
 801d44c:	bd80      	pop	{r7, pc}
 801d44e:	bf00      	nop

0801d450 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801d450:	b580      	push	{r7, lr}
 801d452:	b084      	sub	sp, #16
 801d454:	af00      	add	r7, sp, #0
 801d456:	6078      	str	r0, [r7, #4]
 801d458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801d45a:	2300      	movs	r3, #0
 801d45c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801d45e:	687b      	ldr	r3, [r7, #4]
 801d460:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801d464:	2b01      	cmp	r3, #1
 801d466:	d101      	bne.n	801d46c <HAL_TIM_ConfigClockSource+0x1c>
 801d468:	2302      	movs	r3, #2
 801d46a:	e0b4      	b.n	801d5d6 <HAL_TIM_ConfigClockSource+0x186>
 801d46c:	687b      	ldr	r3, [r7, #4]
 801d46e:	2201      	movs	r2, #1
 801d470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	2202      	movs	r2, #2
 801d478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801d47c:	687b      	ldr	r3, [r7, #4]
 801d47e:	681b      	ldr	r3, [r3, #0]
 801d480:	689b      	ldr	r3, [r3, #8]
 801d482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801d484:	68ba      	ldr	r2, [r7, #8]
 801d486:	4b56      	ldr	r3, [pc, #344]	@ (801d5e0 <HAL_TIM_ConfigClockSource+0x190>)
 801d488:	4013      	ands	r3, r2
 801d48a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d48c:	68bb      	ldr	r3, [r7, #8]
 801d48e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801d492:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	68ba      	ldr	r2, [r7, #8]
 801d49a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801d49c:	683b      	ldr	r3, [r7, #0]
 801d49e:	681b      	ldr	r3, [r3, #0]
 801d4a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d4a4:	d03e      	beq.n	801d524 <HAL_TIM_ConfigClockSource+0xd4>
 801d4a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d4aa:	f200 8087 	bhi.w	801d5bc <HAL_TIM_ConfigClockSource+0x16c>
 801d4ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d4b2:	f000 8086 	beq.w	801d5c2 <HAL_TIM_ConfigClockSource+0x172>
 801d4b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d4ba:	d87f      	bhi.n	801d5bc <HAL_TIM_ConfigClockSource+0x16c>
 801d4bc:	2b70      	cmp	r3, #112	@ 0x70
 801d4be:	d01a      	beq.n	801d4f6 <HAL_TIM_ConfigClockSource+0xa6>
 801d4c0:	2b70      	cmp	r3, #112	@ 0x70
 801d4c2:	d87b      	bhi.n	801d5bc <HAL_TIM_ConfigClockSource+0x16c>
 801d4c4:	2b60      	cmp	r3, #96	@ 0x60
 801d4c6:	d050      	beq.n	801d56a <HAL_TIM_ConfigClockSource+0x11a>
 801d4c8:	2b60      	cmp	r3, #96	@ 0x60
 801d4ca:	d877      	bhi.n	801d5bc <HAL_TIM_ConfigClockSource+0x16c>
 801d4cc:	2b50      	cmp	r3, #80	@ 0x50
 801d4ce:	d03c      	beq.n	801d54a <HAL_TIM_ConfigClockSource+0xfa>
 801d4d0:	2b50      	cmp	r3, #80	@ 0x50
 801d4d2:	d873      	bhi.n	801d5bc <HAL_TIM_ConfigClockSource+0x16c>
 801d4d4:	2b40      	cmp	r3, #64	@ 0x40
 801d4d6:	d058      	beq.n	801d58a <HAL_TIM_ConfigClockSource+0x13a>
 801d4d8:	2b40      	cmp	r3, #64	@ 0x40
 801d4da:	d86f      	bhi.n	801d5bc <HAL_TIM_ConfigClockSource+0x16c>
 801d4dc:	2b30      	cmp	r3, #48	@ 0x30
 801d4de:	d064      	beq.n	801d5aa <HAL_TIM_ConfigClockSource+0x15a>
 801d4e0:	2b30      	cmp	r3, #48	@ 0x30
 801d4e2:	d86b      	bhi.n	801d5bc <HAL_TIM_ConfigClockSource+0x16c>
 801d4e4:	2b20      	cmp	r3, #32
 801d4e6:	d060      	beq.n	801d5aa <HAL_TIM_ConfigClockSource+0x15a>
 801d4e8:	2b20      	cmp	r3, #32
 801d4ea:	d867      	bhi.n	801d5bc <HAL_TIM_ConfigClockSource+0x16c>
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	d05c      	beq.n	801d5aa <HAL_TIM_ConfigClockSource+0x15a>
 801d4f0:	2b10      	cmp	r3, #16
 801d4f2:	d05a      	beq.n	801d5aa <HAL_TIM_ConfigClockSource+0x15a>
 801d4f4:	e062      	b.n	801d5bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d4f6:	687b      	ldr	r3, [r7, #4]
 801d4f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801d4fa:	683b      	ldr	r3, [r7, #0]
 801d4fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801d4fe:	683b      	ldr	r3, [r7, #0]
 801d500:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801d502:	683b      	ldr	r3, [r7, #0]
 801d504:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801d506:	f000 fc5d 	bl	801ddc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	681b      	ldr	r3, [r3, #0]
 801d50e:	689b      	ldr	r3, [r3, #8]
 801d510:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801d512:	68bb      	ldr	r3, [r7, #8]
 801d514:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801d518:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801d51a:	687b      	ldr	r3, [r7, #4]
 801d51c:	681b      	ldr	r3, [r3, #0]
 801d51e:	68ba      	ldr	r2, [r7, #8]
 801d520:	609a      	str	r2, [r3, #8]
      break;
 801d522:	e04f      	b.n	801d5c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d524:	687b      	ldr	r3, [r7, #4]
 801d526:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801d528:	683b      	ldr	r3, [r7, #0]
 801d52a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801d52c:	683b      	ldr	r3, [r7, #0]
 801d52e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801d530:	683b      	ldr	r3, [r7, #0]
 801d532:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801d534:	f000 fc46 	bl	801ddc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801d538:	687b      	ldr	r3, [r7, #4]
 801d53a:	681b      	ldr	r3, [r3, #0]
 801d53c:	689a      	ldr	r2, [r3, #8]
 801d53e:	687b      	ldr	r3, [r7, #4]
 801d540:	681b      	ldr	r3, [r3, #0]
 801d542:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801d546:	609a      	str	r2, [r3, #8]
      break;
 801d548:	e03c      	b.n	801d5c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d54a:	687b      	ldr	r3, [r7, #4]
 801d54c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801d54e:	683b      	ldr	r3, [r7, #0]
 801d550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801d552:	683b      	ldr	r3, [r7, #0]
 801d554:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801d556:	461a      	mov	r2, r3
 801d558:	f000 fbba 	bl	801dcd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801d55c:	687b      	ldr	r3, [r7, #4]
 801d55e:	681b      	ldr	r3, [r3, #0]
 801d560:	2150      	movs	r1, #80	@ 0x50
 801d562:	4618      	mov	r0, r3
 801d564:	f000 fc13 	bl	801dd8e <TIM_ITRx_SetConfig>
      break;
 801d568:	e02c      	b.n	801d5c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801d56a:	687b      	ldr	r3, [r7, #4]
 801d56c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801d56e:	683b      	ldr	r3, [r7, #0]
 801d570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801d572:	683b      	ldr	r3, [r7, #0]
 801d574:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801d576:	461a      	mov	r2, r3
 801d578:	f000 fbd9 	bl	801dd2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801d57c:	687b      	ldr	r3, [r7, #4]
 801d57e:	681b      	ldr	r3, [r3, #0]
 801d580:	2160      	movs	r1, #96	@ 0x60
 801d582:	4618      	mov	r0, r3
 801d584:	f000 fc03 	bl	801dd8e <TIM_ITRx_SetConfig>
      break;
 801d588:	e01c      	b.n	801d5c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d58a:	687b      	ldr	r3, [r7, #4]
 801d58c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801d58e:	683b      	ldr	r3, [r7, #0]
 801d590:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801d592:	683b      	ldr	r3, [r7, #0]
 801d594:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801d596:	461a      	mov	r2, r3
 801d598:	f000 fb9a 	bl	801dcd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801d59c:	687b      	ldr	r3, [r7, #4]
 801d59e:	681b      	ldr	r3, [r3, #0]
 801d5a0:	2140      	movs	r1, #64	@ 0x40
 801d5a2:	4618      	mov	r0, r3
 801d5a4:	f000 fbf3 	bl	801dd8e <TIM_ITRx_SetConfig>
      break;
 801d5a8:	e00c      	b.n	801d5c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801d5aa:	687b      	ldr	r3, [r7, #4]
 801d5ac:	681a      	ldr	r2, [r3, #0]
 801d5ae:	683b      	ldr	r3, [r7, #0]
 801d5b0:	681b      	ldr	r3, [r3, #0]
 801d5b2:	4619      	mov	r1, r3
 801d5b4:	4610      	mov	r0, r2
 801d5b6:	f000 fbea 	bl	801dd8e <TIM_ITRx_SetConfig>
      break;
 801d5ba:	e003      	b.n	801d5c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801d5bc:	2301      	movs	r3, #1
 801d5be:	73fb      	strb	r3, [r7, #15]
      break;
 801d5c0:	e000      	b.n	801d5c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801d5c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801d5c4:	687b      	ldr	r3, [r7, #4]
 801d5c6:	2201      	movs	r2, #1
 801d5c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801d5cc:	687b      	ldr	r3, [r7, #4]
 801d5ce:	2200      	movs	r2, #0
 801d5d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801d5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 801d5d6:	4618      	mov	r0, r3
 801d5d8:	3710      	adds	r7, #16
 801d5da:	46bd      	mov	sp, r7
 801d5dc:	bd80      	pop	{r7, pc}
 801d5de:	bf00      	nop
 801d5e0:	fffeff88 	.word	0xfffeff88

0801d5e4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801d5e4:	b480      	push	{r7}
 801d5e6:	b085      	sub	sp, #20
 801d5e8:	af00      	add	r7, sp, #0
 801d5ea:	6078      	str	r0, [r7, #4]
 801d5ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 801d5ee:	2300      	movs	r3, #0
 801d5f0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 801d5f2:	683b      	ldr	r3, [r7, #0]
 801d5f4:	2b0c      	cmp	r3, #12
 801d5f6:	d831      	bhi.n	801d65c <HAL_TIM_ReadCapturedValue+0x78>
 801d5f8:	a201      	add	r2, pc, #4	@ (adr r2, 801d600 <HAL_TIM_ReadCapturedValue+0x1c>)
 801d5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d5fe:	bf00      	nop
 801d600:	0801d635 	.word	0x0801d635
 801d604:	0801d65d 	.word	0x0801d65d
 801d608:	0801d65d 	.word	0x0801d65d
 801d60c:	0801d65d 	.word	0x0801d65d
 801d610:	0801d63f 	.word	0x0801d63f
 801d614:	0801d65d 	.word	0x0801d65d
 801d618:	0801d65d 	.word	0x0801d65d
 801d61c:	0801d65d 	.word	0x0801d65d
 801d620:	0801d649 	.word	0x0801d649
 801d624:	0801d65d 	.word	0x0801d65d
 801d628:	0801d65d 	.word	0x0801d65d
 801d62c:	0801d65d 	.word	0x0801d65d
 801d630:	0801d653 	.word	0x0801d653
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 801d634:	687b      	ldr	r3, [r7, #4]
 801d636:	681b      	ldr	r3, [r3, #0]
 801d638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d63a:	60fb      	str	r3, [r7, #12]

      break;
 801d63c:	e00f      	b.n	801d65e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	681b      	ldr	r3, [r3, #0]
 801d642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d644:	60fb      	str	r3, [r7, #12]

      break;
 801d646:	e00a      	b.n	801d65e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 801d648:	687b      	ldr	r3, [r7, #4]
 801d64a:	681b      	ldr	r3, [r3, #0]
 801d64c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d64e:	60fb      	str	r3, [r7, #12]

      break;
 801d650:	e005      	b.n	801d65e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	681b      	ldr	r3, [r3, #0]
 801d656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d658:	60fb      	str	r3, [r7, #12]

      break;
 801d65a:	e000      	b.n	801d65e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 801d65c:	bf00      	nop
  }

  return tmpreg;
 801d65e:	68fb      	ldr	r3, [r7, #12]
}
 801d660:	4618      	mov	r0, r3
 801d662:	3714      	adds	r7, #20
 801d664:	46bd      	mov	sp, r7
 801d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d66a:	4770      	bx	lr

0801d66c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d66c:	b480      	push	{r7}
 801d66e:	b083      	sub	sp, #12
 801d670:	af00      	add	r7, sp, #0
 801d672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801d674:	bf00      	nop
 801d676:	370c      	adds	r7, #12
 801d678:	46bd      	mov	sp, r7
 801d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d67e:	4770      	bx	lr

0801d680 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801d680:	b480      	push	{r7}
 801d682:	b083      	sub	sp, #12
 801d684:	af00      	add	r7, sp, #0
 801d686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801d688:	bf00      	nop
 801d68a:	370c      	adds	r7, #12
 801d68c:	46bd      	mov	sp, r7
 801d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d692:	4770      	bx	lr

0801d694 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801d694:	b480      	push	{r7}
 801d696:	b083      	sub	sp, #12
 801d698:	af00      	add	r7, sp, #0
 801d69a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801d69c:	bf00      	nop
 801d69e:	370c      	adds	r7, #12
 801d6a0:	46bd      	mov	sp, r7
 801d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6a6:	4770      	bx	lr

0801d6a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801d6a8:	b480      	push	{r7}
 801d6aa:	b083      	sub	sp, #12
 801d6ac:	af00      	add	r7, sp, #0
 801d6ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801d6b0:	bf00      	nop
 801d6b2:	370c      	adds	r7, #12
 801d6b4:	46bd      	mov	sp, r7
 801d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6ba:	4770      	bx	lr

0801d6bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801d6bc:	b480      	push	{r7}
 801d6be:	b085      	sub	sp, #20
 801d6c0:	af00      	add	r7, sp, #0
 801d6c2:	6078      	str	r0, [r7, #4]
 801d6c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d6c6:	687b      	ldr	r3, [r7, #4]
 801d6c8:	681b      	ldr	r3, [r3, #0]
 801d6ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d6cc:	687b      	ldr	r3, [r7, #4]
 801d6ce:	4a46      	ldr	r2, [pc, #280]	@ (801d7e8 <TIM_Base_SetConfig+0x12c>)
 801d6d0:	4293      	cmp	r3, r2
 801d6d2:	d013      	beq.n	801d6fc <TIM_Base_SetConfig+0x40>
 801d6d4:	687b      	ldr	r3, [r7, #4]
 801d6d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d6da:	d00f      	beq.n	801d6fc <TIM_Base_SetConfig+0x40>
 801d6dc:	687b      	ldr	r3, [r7, #4]
 801d6de:	4a43      	ldr	r2, [pc, #268]	@ (801d7ec <TIM_Base_SetConfig+0x130>)
 801d6e0:	4293      	cmp	r3, r2
 801d6e2:	d00b      	beq.n	801d6fc <TIM_Base_SetConfig+0x40>
 801d6e4:	687b      	ldr	r3, [r7, #4]
 801d6e6:	4a42      	ldr	r2, [pc, #264]	@ (801d7f0 <TIM_Base_SetConfig+0x134>)
 801d6e8:	4293      	cmp	r3, r2
 801d6ea:	d007      	beq.n	801d6fc <TIM_Base_SetConfig+0x40>
 801d6ec:	687b      	ldr	r3, [r7, #4]
 801d6ee:	4a41      	ldr	r2, [pc, #260]	@ (801d7f4 <TIM_Base_SetConfig+0x138>)
 801d6f0:	4293      	cmp	r3, r2
 801d6f2:	d003      	beq.n	801d6fc <TIM_Base_SetConfig+0x40>
 801d6f4:	687b      	ldr	r3, [r7, #4]
 801d6f6:	4a40      	ldr	r2, [pc, #256]	@ (801d7f8 <TIM_Base_SetConfig+0x13c>)
 801d6f8:	4293      	cmp	r3, r2
 801d6fa:	d108      	bne.n	801d70e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d6fc:	68fb      	ldr	r3, [r7, #12]
 801d6fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801d702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d704:	683b      	ldr	r3, [r7, #0]
 801d706:	685b      	ldr	r3, [r3, #4]
 801d708:	68fa      	ldr	r2, [r7, #12]
 801d70a:	4313      	orrs	r3, r2
 801d70c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	4a35      	ldr	r2, [pc, #212]	@ (801d7e8 <TIM_Base_SetConfig+0x12c>)
 801d712:	4293      	cmp	r3, r2
 801d714:	d02b      	beq.n	801d76e <TIM_Base_SetConfig+0xb2>
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d71c:	d027      	beq.n	801d76e <TIM_Base_SetConfig+0xb2>
 801d71e:	687b      	ldr	r3, [r7, #4]
 801d720:	4a32      	ldr	r2, [pc, #200]	@ (801d7ec <TIM_Base_SetConfig+0x130>)
 801d722:	4293      	cmp	r3, r2
 801d724:	d023      	beq.n	801d76e <TIM_Base_SetConfig+0xb2>
 801d726:	687b      	ldr	r3, [r7, #4]
 801d728:	4a31      	ldr	r2, [pc, #196]	@ (801d7f0 <TIM_Base_SetConfig+0x134>)
 801d72a:	4293      	cmp	r3, r2
 801d72c:	d01f      	beq.n	801d76e <TIM_Base_SetConfig+0xb2>
 801d72e:	687b      	ldr	r3, [r7, #4]
 801d730:	4a30      	ldr	r2, [pc, #192]	@ (801d7f4 <TIM_Base_SetConfig+0x138>)
 801d732:	4293      	cmp	r3, r2
 801d734:	d01b      	beq.n	801d76e <TIM_Base_SetConfig+0xb2>
 801d736:	687b      	ldr	r3, [r7, #4]
 801d738:	4a2f      	ldr	r2, [pc, #188]	@ (801d7f8 <TIM_Base_SetConfig+0x13c>)
 801d73a:	4293      	cmp	r3, r2
 801d73c:	d017      	beq.n	801d76e <TIM_Base_SetConfig+0xb2>
 801d73e:	687b      	ldr	r3, [r7, #4]
 801d740:	4a2e      	ldr	r2, [pc, #184]	@ (801d7fc <TIM_Base_SetConfig+0x140>)
 801d742:	4293      	cmp	r3, r2
 801d744:	d013      	beq.n	801d76e <TIM_Base_SetConfig+0xb2>
 801d746:	687b      	ldr	r3, [r7, #4]
 801d748:	4a2d      	ldr	r2, [pc, #180]	@ (801d800 <TIM_Base_SetConfig+0x144>)
 801d74a:	4293      	cmp	r3, r2
 801d74c:	d00f      	beq.n	801d76e <TIM_Base_SetConfig+0xb2>
 801d74e:	687b      	ldr	r3, [r7, #4]
 801d750:	4a2c      	ldr	r2, [pc, #176]	@ (801d804 <TIM_Base_SetConfig+0x148>)
 801d752:	4293      	cmp	r3, r2
 801d754:	d00b      	beq.n	801d76e <TIM_Base_SetConfig+0xb2>
 801d756:	687b      	ldr	r3, [r7, #4]
 801d758:	4a2b      	ldr	r2, [pc, #172]	@ (801d808 <TIM_Base_SetConfig+0x14c>)
 801d75a:	4293      	cmp	r3, r2
 801d75c:	d007      	beq.n	801d76e <TIM_Base_SetConfig+0xb2>
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	4a2a      	ldr	r2, [pc, #168]	@ (801d80c <TIM_Base_SetConfig+0x150>)
 801d762:	4293      	cmp	r3, r2
 801d764:	d003      	beq.n	801d76e <TIM_Base_SetConfig+0xb2>
 801d766:	687b      	ldr	r3, [r7, #4]
 801d768:	4a29      	ldr	r2, [pc, #164]	@ (801d810 <TIM_Base_SetConfig+0x154>)
 801d76a:	4293      	cmp	r3, r2
 801d76c:	d108      	bne.n	801d780 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d76e:	68fb      	ldr	r3, [r7, #12]
 801d770:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801d774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d776:	683b      	ldr	r3, [r7, #0]
 801d778:	68db      	ldr	r3, [r3, #12]
 801d77a:	68fa      	ldr	r2, [r7, #12]
 801d77c:	4313      	orrs	r3, r2
 801d77e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d780:	68fb      	ldr	r3, [r7, #12]
 801d782:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801d786:	683b      	ldr	r3, [r7, #0]
 801d788:	695b      	ldr	r3, [r3, #20]
 801d78a:	4313      	orrs	r3, r2
 801d78c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d78e:	687b      	ldr	r3, [r7, #4]
 801d790:	68fa      	ldr	r2, [r7, #12]
 801d792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d794:	683b      	ldr	r3, [r7, #0]
 801d796:	689a      	ldr	r2, [r3, #8]
 801d798:	687b      	ldr	r3, [r7, #4]
 801d79a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d79c:	683b      	ldr	r3, [r7, #0]
 801d79e:	681a      	ldr	r2, [r3, #0]
 801d7a0:	687b      	ldr	r3, [r7, #4]
 801d7a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801d7a4:	687b      	ldr	r3, [r7, #4]
 801d7a6:	4a10      	ldr	r2, [pc, #64]	@ (801d7e8 <TIM_Base_SetConfig+0x12c>)
 801d7a8:	4293      	cmp	r3, r2
 801d7aa:	d003      	beq.n	801d7b4 <TIM_Base_SetConfig+0xf8>
 801d7ac:	687b      	ldr	r3, [r7, #4]
 801d7ae:	4a12      	ldr	r2, [pc, #72]	@ (801d7f8 <TIM_Base_SetConfig+0x13c>)
 801d7b0:	4293      	cmp	r3, r2
 801d7b2:	d103      	bne.n	801d7bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801d7b4:	683b      	ldr	r3, [r7, #0]
 801d7b6:	691a      	ldr	r2, [r3, #16]
 801d7b8:	687b      	ldr	r3, [r7, #4]
 801d7ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d7bc:	687b      	ldr	r3, [r7, #4]
 801d7be:	2201      	movs	r2, #1
 801d7c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801d7c2:	687b      	ldr	r3, [r7, #4]
 801d7c4:	691b      	ldr	r3, [r3, #16]
 801d7c6:	f003 0301 	and.w	r3, r3, #1
 801d7ca:	2b01      	cmp	r3, #1
 801d7cc:	d105      	bne.n	801d7da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801d7ce:	687b      	ldr	r3, [r7, #4]
 801d7d0:	691b      	ldr	r3, [r3, #16]
 801d7d2:	f023 0201 	bic.w	r2, r3, #1
 801d7d6:	687b      	ldr	r3, [r7, #4]
 801d7d8:	611a      	str	r2, [r3, #16]
  }
}
 801d7da:	bf00      	nop
 801d7dc:	3714      	adds	r7, #20
 801d7de:	46bd      	mov	sp, r7
 801d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7e4:	4770      	bx	lr
 801d7e6:	bf00      	nop
 801d7e8:	40010000 	.word	0x40010000
 801d7ec:	40000400 	.word	0x40000400
 801d7f0:	40000800 	.word	0x40000800
 801d7f4:	40000c00 	.word	0x40000c00
 801d7f8:	40010400 	.word	0x40010400
 801d7fc:	40014000 	.word	0x40014000
 801d800:	40014400 	.word	0x40014400
 801d804:	40014800 	.word	0x40014800
 801d808:	40001800 	.word	0x40001800
 801d80c:	40001c00 	.word	0x40001c00
 801d810:	40002000 	.word	0x40002000

0801d814 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d814:	b480      	push	{r7}
 801d816:	b087      	sub	sp, #28
 801d818:	af00      	add	r7, sp, #0
 801d81a:	6078      	str	r0, [r7, #4]
 801d81c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d81e:	687b      	ldr	r3, [r7, #4]
 801d820:	6a1b      	ldr	r3, [r3, #32]
 801d822:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d824:	687b      	ldr	r3, [r7, #4]
 801d826:	6a1b      	ldr	r3, [r3, #32]
 801d828:	f023 0201 	bic.w	r2, r3, #1
 801d82c:	687b      	ldr	r3, [r7, #4]
 801d82e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d830:	687b      	ldr	r3, [r7, #4]
 801d832:	685b      	ldr	r3, [r3, #4]
 801d834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	699b      	ldr	r3, [r3, #24]
 801d83a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d83c:	68fa      	ldr	r2, [r7, #12]
 801d83e:	4b2b      	ldr	r3, [pc, #172]	@ (801d8ec <TIM_OC1_SetConfig+0xd8>)
 801d840:	4013      	ands	r3, r2
 801d842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d844:	68fb      	ldr	r3, [r7, #12]
 801d846:	f023 0303 	bic.w	r3, r3, #3
 801d84a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d84c:	683b      	ldr	r3, [r7, #0]
 801d84e:	681b      	ldr	r3, [r3, #0]
 801d850:	68fa      	ldr	r2, [r7, #12]
 801d852:	4313      	orrs	r3, r2
 801d854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d856:	697b      	ldr	r3, [r7, #20]
 801d858:	f023 0302 	bic.w	r3, r3, #2
 801d85c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d85e:	683b      	ldr	r3, [r7, #0]
 801d860:	689b      	ldr	r3, [r3, #8]
 801d862:	697a      	ldr	r2, [r7, #20]
 801d864:	4313      	orrs	r3, r2
 801d866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801d868:	687b      	ldr	r3, [r7, #4]
 801d86a:	4a21      	ldr	r2, [pc, #132]	@ (801d8f0 <TIM_OC1_SetConfig+0xdc>)
 801d86c:	4293      	cmp	r3, r2
 801d86e:	d003      	beq.n	801d878 <TIM_OC1_SetConfig+0x64>
 801d870:	687b      	ldr	r3, [r7, #4]
 801d872:	4a20      	ldr	r2, [pc, #128]	@ (801d8f4 <TIM_OC1_SetConfig+0xe0>)
 801d874:	4293      	cmp	r3, r2
 801d876:	d10c      	bne.n	801d892 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801d878:	697b      	ldr	r3, [r7, #20]
 801d87a:	f023 0308 	bic.w	r3, r3, #8
 801d87e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801d880:	683b      	ldr	r3, [r7, #0]
 801d882:	68db      	ldr	r3, [r3, #12]
 801d884:	697a      	ldr	r2, [r7, #20]
 801d886:	4313      	orrs	r3, r2
 801d888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801d88a:	697b      	ldr	r3, [r7, #20]
 801d88c:	f023 0304 	bic.w	r3, r3, #4
 801d890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d892:	687b      	ldr	r3, [r7, #4]
 801d894:	4a16      	ldr	r2, [pc, #88]	@ (801d8f0 <TIM_OC1_SetConfig+0xdc>)
 801d896:	4293      	cmp	r3, r2
 801d898:	d003      	beq.n	801d8a2 <TIM_OC1_SetConfig+0x8e>
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	4a15      	ldr	r2, [pc, #84]	@ (801d8f4 <TIM_OC1_SetConfig+0xe0>)
 801d89e:	4293      	cmp	r3, r2
 801d8a0:	d111      	bne.n	801d8c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801d8a2:	693b      	ldr	r3, [r7, #16]
 801d8a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801d8a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801d8aa:	693b      	ldr	r3, [r7, #16]
 801d8ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801d8b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801d8b2:	683b      	ldr	r3, [r7, #0]
 801d8b4:	695b      	ldr	r3, [r3, #20]
 801d8b6:	693a      	ldr	r2, [r7, #16]
 801d8b8:	4313      	orrs	r3, r2
 801d8ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801d8bc:	683b      	ldr	r3, [r7, #0]
 801d8be:	699b      	ldr	r3, [r3, #24]
 801d8c0:	693a      	ldr	r2, [r7, #16]
 801d8c2:	4313      	orrs	r3, r2
 801d8c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d8c6:	687b      	ldr	r3, [r7, #4]
 801d8c8:	693a      	ldr	r2, [r7, #16]
 801d8ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d8cc:	687b      	ldr	r3, [r7, #4]
 801d8ce:	68fa      	ldr	r2, [r7, #12]
 801d8d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d8d2:	683b      	ldr	r3, [r7, #0]
 801d8d4:	685a      	ldr	r2, [r3, #4]
 801d8d6:	687b      	ldr	r3, [r7, #4]
 801d8d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d8da:	687b      	ldr	r3, [r7, #4]
 801d8dc:	697a      	ldr	r2, [r7, #20]
 801d8de:	621a      	str	r2, [r3, #32]
}
 801d8e0:	bf00      	nop
 801d8e2:	371c      	adds	r7, #28
 801d8e4:	46bd      	mov	sp, r7
 801d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8ea:	4770      	bx	lr
 801d8ec:	fffeff8f 	.word	0xfffeff8f
 801d8f0:	40010000 	.word	0x40010000
 801d8f4:	40010400 	.word	0x40010400

0801d8f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d8f8:	b480      	push	{r7}
 801d8fa:	b087      	sub	sp, #28
 801d8fc:	af00      	add	r7, sp, #0
 801d8fe:	6078      	str	r0, [r7, #4]
 801d900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	6a1b      	ldr	r3, [r3, #32]
 801d906:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d908:	687b      	ldr	r3, [r7, #4]
 801d90a:	6a1b      	ldr	r3, [r3, #32]
 801d90c:	f023 0210 	bic.w	r2, r3, #16
 801d910:	687b      	ldr	r3, [r7, #4]
 801d912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d914:	687b      	ldr	r3, [r7, #4]
 801d916:	685b      	ldr	r3, [r3, #4]
 801d918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d91a:	687b      	ldr	r3, [r7, #4]
 801d91c:	699b      	ldr	r3, [r3, #24]
 801d91e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d920:	68fa      	ldr	r2, [r7, #12]
 801d922:	4b2e      	ldr	r3, [pc, #184]	@ (801d9dc <TIM_OC2_SetConfig+0xe4>)
 801d924:	4013      	ands	r3, r2
 801d926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d928:	68fb      	ldr	r3, [r7, #12]
 801d92a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801d92e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d930:	683b      	ldr	r3, [r7, #0]
 801d932:	681b      	ldr	r3, [r3, #0]
 801d934:	021b      	lsls	r3, r3, #8
 801d936:	68fa      	ldr	r2, [r7, #12]
 801d938:	4313      	orrs	r3, r2
 801d93a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d93c:	697b      	ldr	r3, [r7, #20]
 801d93e:	f023 0320 	bic.w	r3, r3, #32
 801d942:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d944:	683b      	ldr	r3, [r7, #0]
 801d946:	689b      	ldr	r3, [r3, #8]
 801d948:	011b      	lsls	r3, r3, #4
 801d94a:	697a      	ldr	r2, [r7, #20]
 801d94c:	4313      	orrs	r3, r2
 801d94e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801d950:	687b      	ldr	r3, [r7, #4]
 801d952:	4a23      	ldr	r2, [pc, #140]	@ (801d9e0 <TIM_OC2_SetConfig+0xe8>)
 801d954:	4293      	cmp	r3, r2
 801d956:	d003      	beq.n	801d960 <TIM_OC2_SetConfig+0x68>
 801d958:	687b      	ldr	r3, [r7, #4]
 801d95a:	4a22      	ldr	r2, [pc, #136]	@ (801d9e4 <TIM_OC2_SetConfig+0xec>)
 801d95c:	4293      	cmp	r3, r2
 801d95e:	d10d      	bne.n	801d97c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801d960:	697b      	ldr	r3, [r7, #20]
 801d962:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801d966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801d968:	683b      	ldr	r3, [r7, #0]
 801d96a:	68db      	ldr	r3, [r3, #12]
 801d96c:	011b      	lsls	r3, r3, #4
 801d96e:	697a      	ldr	r2, [r7, #20]
 801d970:	4313      	orrs	r3, r2
 801d972:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801d974:	697b      	ldr	r3, [r7, #20]
 801d976:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801d97a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d97c:	687b      	ldr	r3, [r7, #4]
 801d97e:	4a18      	ldr	r2, [pc, #96]	@ (801d9e0 <TIM_OC2_SetConfig+0xe8>)
 801d980:	4293      	cmp	r3, r2
 801d982:	d003      	beq.n	801d98c <TIM_OC2_SetConfig+0x94>
 801d984:	687b      	ldr	r3, [r7, #4]
 801d986:	4a17      	ldr	r2, [pc, #92]	@ (801d9e4 <TIM_OC2_SetConfig+0xec>)
 801d988:	4293      	cmp	r3, r2
 801d98a:	d113      	bne.n	801d9b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801d98c:	693b      	ldr	r3, [r7, #16]
 801d98e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801d992:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801d994:	693b      	ldr	r3, [r7, #16]
 801d996:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801d99a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801d99c:	683b      	ldr	r3, [r7, #0]
 801d99e:	695b      	ldr	r3, [r3, #20]
 801d9a0:	009b      	lsls	r3, r3, #2
 801d9a2:	693a      	ldr	r2, [r7, #16]
 801d9a4:	4313      	orrs	r3, r2
 801d9a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801d9a8:	683b      	ldr	r3, [r7, #0]
 801d9aa:	699b      	ldr	r3, [r3, #24]
 801d9ac:	009b      	lsls	r3, r3, #2
 801d9ae:	693a      	ldr	r2, [r7, #16]
 801d9b0:	4313      	orrs	r3, r2
 801d9b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d9b4:	687b      	ldr	r3, [r7, #4]
 801d9b6:	693a      	ldr	r2, [r7, #16]
 801d9b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d9ba:	687b      	ldr	r3, [r7, #4]
 801d9bc:	68fa      	ldr	r2, [r7, #12]
 801d9be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d9c0:	683b      	ldr	r3, [r7, #0]
 801d9c2:	685a      	ldr	r2, [r3, #4]
 801d9c4:	687b      	ldr	r3, [r7, #4]
 801d9c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d9c8:	687b      	ldr	r3, [r7, #4]
 801d9ca:	697a      	ldr	r2, [r7, #20]
 801d9cc:	621a      	str	r2, [r3, #32]
}
 801d9ce:	bf00      	nop
 801d9d0:	371c      	adds	r7, #28
 801d9d2:	46bd      	mov	sp, r7
 801d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9d8:	4770      	bx	lr
 801d9da:	bf00      	nop
 801d9dc:	feff8fff 	.word	0xfeff8fff
 801d9e0:	40010000 	.word	0x40010000
 801d9e4:	40010400 	.word	0x40010400

0801d9e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d9e8:	b480      	push	{r7}
 801d9ea:	b087      	sub	sp, #28
 801d9ec:	af00      	add	r7, sp, #0
 801d9ee:	6078      	str	r0, [r7, #4]
 801d9f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d9f2:	687b      	ldr	r3, [r7, #4]
 801d9f4:	6a1b      	ldr	r3, [r3, #32]
 801d9f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d9f8:	687b      	ldr	r3, [r7, #4]
 801d9fa:	6a1b      	ldr	r3, [r3, #32]
 801d9fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801da00:	687b      	ldr	r3, [r7, #4]
 801da02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801da04:	687b      	ldr	r3, [r7, #4]
 801da06:	685b      	ldr	r3, [r3, #4]
 801da08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	69db      	ldr	r3, [r3, #28]
 801da0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801da10:	68fa      	ldr	r2, [r7, #12]
 801da12:	4b2d      	ldr	r3, [pc, #180]	@ (801dac8 <TIM_OC3_SetConfig+0xe0>)
 801da14:	4013      	ands	r3, r2
 801da16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801da18:	68fb      	ldr	r3, [r7, #12]
 801da1a:	f023 0303 	bic.w	r3, r3, #3
 801da1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801da20:	683b      	ldr	r3, [r7, #0]
 801da22:	681b      	ldr	r3, [r3, #0]
 801da24:	68fa      	ldr	r2, [r7, #12]
 801da26:	4313      	orrs	r3, r2
 801da28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801da2a:	697b      	ldr	r3, [r7, #20]
 801da2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801da30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801da32:	683b      	ldr	r3, [r7, #0]
 801da34:	689b      	ldr	r3, [r3, #8]
 801da36:	021b      	lsls	r3, r3, #8
 801da38:	697a      	ldr	r2, [r7, #20]
 801da3a:	4313      	orrs	r3, r2
 801da3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801da3e:	687b      	ldr	r3, [r7, #4]
 801da40:	4a22      	ldr	r2, [pc, #136]	@ (801dacc <TIM_OC3_SetConfig+0xe4>)
 801da42:	4293      	cmp	r3, r2
 801da44:	d003      	beq.n	801da4e <TIM_OC3_SetConfig+0x66>
 801da46:	687b      	ldr	r3, [r7, #4]
 801da48:	4a21      	ldr	r2, [pc, #132]	@ (801dad0 <TIM_OC3_SetConfig+0xe8>)
 801da4a:	4293      	cmp	r3, r2
 801da4c:	d10d      	bne.n	801da6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801da4e:	697b      	ldr	r3, [r7, #20]
 801da50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801da54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801da56:	683b      	ldr	r3, [r7, #0]
 801da58:	68db      	ldr	r3, [r3, #12]
 801da5a:	021b      	lsls	r3, r3, #8
 801da5c:	697a      	ldr	r2, [r7, #20]
 801da5e:	4313      	orrs	r3, r2
 801da60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801da62:	697b      	ldr	r3, [r7, #20]
 801da64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801da68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801da6a:	687b      	ldr	r3, [r7, #4]
 801da6c:	4a17      	ldr	r2, [pc, #92]	@ (801dacc <TIM_OC3_SetConfig+0xe4>)
 801da6e:	4293      	cmp	r3, r2
 801da70:	d003      	beq.n	801da7a <TIM_OC3_SetConfig+0x92>
 801da72:	687b      	ldr	r3, [r7, #4]
 801da74:	4a16      	ldr	r2, [pc, #88]	@ (801dad0 <TIM_OC3_SetConfig+0xe8>)
 801da76:	4293      	cmp	r3, r2
 801da78:	d113      	bne.n	801daa2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801da7a:	693b      	ldr	r3, [r7, #16]
 801da7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801da80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801da82:	693b      	ldr	r3, [r7, #16]
 801da84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801da88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801da8a:	683b      	ldr	r3, [r7, #0]
 801da8c:	695b      	ldr	r3, [r3, #20]
 801da8e:	011b      	lsls	r3, r3, #4
 801da90:	693a      	ldr	r2, [r7, #16]
 801da92:	4313      	orrs	r3, r2
 801da94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801da96:	683b      	ldr	r3, [r7, #0]
 801da98:	699b      	ldr	r3, [r3, #24]
 801da9a:	011b      	lsls	r3, r3, #4
 801da9c:	693a      	ldr	r2, [r7, #16]
 801da9e:	4313      	orrs	r3, r2
 801daa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801daa2:	687b      	ldr	r3, [r7, #4]
 801daa4:	693a      	ldr	r2, [r7, #16]
 801daa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801daa8:	687b      	ldr	r3, [r7, #4]
 801daaa:	68fa      	ldr	r2, [r7, #12]
 801daac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801daae:	683b      	ldr	r3, [r7, #0]
 801dab0:	685a      	ldr	r2, [r3, #4]
 801dab2:	687b      	ldr	r3, [r7, #4]
 801dab4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dab6:	687b      	ldr	r3, [r7, #4]
 801dab8:	697a      	ldr	r2, [r7, #20]
 801daba:	621a      	str	r2, [r3, #32]
}
 801dabc:	bf00      	nop
 801dabe:	371c      	adds	r7, #28
 801dac0:	46bd      	mov	sp, r7
 801dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dac6:	4770      	bx	lr
 801dac8:	fffeff8f 	.word	0xfffeff8f
 801dacc:	40010000 	.word	0x40010000
 801dad0:	40010400 	.word	0x40010400

0801dad4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801dad4:	b480      	push	{r7}
 801dad6:	b087      	sub	sp, #28
 801dad8:	af00      	add	r7, sp, #0
 801dada:	6078      	str	r0, [r7, #4]
 801dadc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801dade:	687b      	ldr	r3, [r7, #4]
 801dae0:	6a1b      	ldr	r3, [r3, #32]
 801dae2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801dae4:	687b      	ldr	r3, [r7, #4]
 801dae6:	6a1b      	ldr	r3, [r3, #32]
 801dae8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801daec:	687b      	ldr	r3, [r7, #4]
 801daee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	685b      	ldr	r3, [r3, #4]
 801daf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801daf6:	687b      	ldr	r3, [r7, #4]
 801daf8:	69db      	ldr	r3, [r3, #28]
 801dafa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801dafc:	68fa      	ldr	r2, [r7, #12]
 801dafe:	4b1e      	ldr	r3, [pc, #120]	@ (801db78 <TIM_OC4_SetConfig+0xa4>)
 801db00:	4013      	ands	r3, r2
 801db02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801db04:	68fb      	ldr	r3, [r7, #12]
 801db06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801db0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801db0c:	683b      	ldr	r3, [r7, #0]
 801db0e:	681b      	ldr	r3, [r3, #0]
 801db10:	021b      	lsls	r3, r3, #8
 801db12:	68fa      	ldr	r2, [r7, #12]
 801db14:	4313      	orrs	r3, r2
 801db16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801db18:	693b      	ldr	r3, [r7, #16]
 801db1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801db1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801db20:	683b      	ldr	r3, [r7, #0]
 801db22:	689b      	ldr	r3, [r3, #8]
 801db24:	031b      	lsls	r3, r3, #12
 801db26:	693a      	ldr	r2, [r7, #16]
 801db28:	4313      	orrs	r3, r2
 801db2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	4a13      	ldr	r2, [pc, #76]	@ (801db7c <TIM_OC4_SetConfig+0xa8>)
 801db30:	4293      	cmp	r3, r2
 801db32:	d003      	beq.n	801db3c <TIM_OC4_SetConfig+0x68>
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	4a12      	ldr	r2, [pc, #72]	@ (801db80 <TIM_OC4_SetConfig+0xac>)
 801db38:	4293      	cmp	r3, r2
 801db3a:	d109      	bne.n	801db50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801db3c:	697b      	ldr	r3, [r7, #20]
 801db3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801db42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801db44:	683b      	ldr	r3, [r7, #0]
 801db46:	695b      	ldr	r3, [r3, #20]
 801db48:	019b      	lsls	r3, r3, #6
 801db4a:	697a      	ldr	r2, [r7, #20]
 801db4c:	4313      	orrs	r3, r2
 801db4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801db50:	687b      	ldr	r3, [r7, #4]
 801db52:	697a      	ldr	r2, [r7, #20]
 801db54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801db56:	687b      	ldr	r3, [r7, #4]
 801db58:	68fa      	ldr	r2, [r7, #12]
 801db5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801db5c:	683b      	ldr	r3, [r7, #0]
 801db5e:	685a      	ldr	r2, [r3, #4]
 801db60:	687b      	ldr	r3, [r7, #4]
 801db62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801db64:	687b      	ldr	r3, [r7, #4]
 801db66:	693a      	ldr	r2, [r7, #16]
 801db68:	621a      	str	r2, [r3, #32]
}
 801db6a:	bf00      	nop
 801db6c:	371c      	adds	r7, #28
 801db6e:	46bd      	mov	sp, r7
 801db70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db74:	4770      	bx	lr
 801db76:	bf00      	nop
 801db78:	feff8fff 	.word	0xfeff8fff
 801db7c:	40010000 	.word	0x40010000
 801db80:	40010400 	.word	0x40010400

0801db84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801db84:	b480      	push	{r7}
 801db86:	b087      	sub	sp, #28
 801db88:	af00      	add	r7, sp, #0
 801db8a:	6078      	str	r0, [r7, #4]
 801db8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801db8e:	687b      	ldr	r3, [r7, #4]
 801db90:	6a1b      	ldr	r3, [r3, #32]
 801db92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801db94:	687b      	ldr	r3, [r7, #4]
 801db96:	6a1b      	ldr	r3, [r3, #32]
 801db98:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801db9c:	687b      	ldr	r3, [r7, #4]
 801db9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dba0:	687b      	ldr	r3, [r7, #4]
 801dba2:	685b      	ldr	r3, [r3, #4]
 801dba4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801dba6:	687b      	ldr	r3, [r7, #4]
 801dba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dbaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801dbac:	68fa      	ldr	r2, [r7, #12]
 801dbae:	4b1b      	ldr	r3, [pc, #108]	@ (801dc1c <TIM_OC5_SetConfig+0x98>)
 801dbb0:	4013      	ands	r3, r2
 801dbb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801dbb4:	683b      	ldr	r3, [r7, #0]
 801dbb6:	681b      	ldr	r3, [r3, #0]
 801dbb8:	68fa      	ldr	r2, [r7, #12]
 801dbba:	4313      	orrs	r3, r2
 801dbbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801dbbe:	693b      	ldr	r3, [r7, #16]
 801dbc0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801dbc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801dbc6:	683b      	ldr	r3, [r7, #0]
 801dbc8:	689b      	ldr	r3, [r3, #8]
 801dbca:	041b      	lsls	r3, r3, #16
 801dbcc:	693a      	ldr	r2, [r7, #16]
 801dbce:	4313      	orrs	r3, r2
 801dbd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dbd2:	687b      	ldr	r3, [r7, #4]
 801dbd4:	4a12      	ldr	r2, [pc, #72]	@ (801dc20 <TIM_OC5_SetConfig+0x9c>)
 801dbd6:	4293      	cmp	r3, r2
 801dbd8:	d003      	beq.n	801dbe2 <TIM_OC5_SetConfig+0x5e>
 801dbda:	687b      	ldr	r3, [r7, #4]
 801dbdc:	4a11      	ldr	r2, [pc, #68]	@ (801dc24 <TIM_OC5_SetConfig+0xa0>)
 801dbde:	4293      	cmp	r3, r2
 801dbe0:	d109      	bne.n	801dbf6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801dbe2:	697b      	ldr	r3, [r7, #20]
 801dbe4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801dbe8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801dbea:	683b      	ldr	r3, [r7, #0]
 801dbec:	695b      	ldr	r3, [r3, #20]
 801dbee:	021b      	lsls	r3, r3, #8
 801dbf0:	697a      	ldr	r2, [r7, #20]
 801dbf2:	4313      	orrs	r3, r2
 801dbf4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dbf6:	687b      	ldr	r3, [r7, #4]
 801dbf8:	697a      	ldr	r2, [r7, #20]
 801dbfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801dbfc:	687b      	ldr	r3, [r7, #4]
 801dbfe:	68fa      	ldr	r2, [r7, #12]
 801dc00:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801dc02:	683b      	ldr	r3, [r7, #0]
 801dc04:	685a      	ldr	r2, [r3, #4]
 801dc06:	687b      	ldr	r3, [r7, #4]
 801dc08:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dc0a:	687b      	ldr	r3, [r7, #4]
 801dc0c:	693a      	ldr	r2, [r7, #16]
 801dc0e:	621a      	str	r2, [r3, #32]
}
 801dc10:	bf00      	nop
 801dc12:	371c      	adds	r7, #28
 801dc14:	46bd      	mov	sp, r7
 801dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc1a:	4770      	bx	lr
 801dc1c:	fffeff8f 	.word	0xfffeff8f
 801dc20:	40010000 	.word	0x40010000
 801dc24:	40010400 	.word	0x40010400

0801dc28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801dc28:	b480      	push	{r7}
 801dc2a:	b087      	sub	sp, #28
 801dc2c:	af00      	add	r7, sp, #0
 801dc2e:	6078      	str	r0, [r7, #4]
 801dc30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801dc32:	687b      	ldr	r3, [r7, #4]
 801dc34:	6a1b      	ldr	r3, [r3, #32]
 801dc36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801dc38:	687b      	ldr	r3, [r7, #4]
 801dc3a:	6a1b      	ldr	r3, [r3, #32]
 801dc3c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801dc40:	687b      	ldr	r3, [r7, #4]
 801dc42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	685b      	ldr	r3, [r3, #4]
 801dc48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801dc4a:	687b      	ldr	r3, [r7, #4]
 801dc4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dc4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801dc50:	68fa      	ldr	r2, [r7, #12]
 801dc52:	4b1c      	ldr	r3, [pc, #112]	@ (801dcc4 <TIM_OC6_SetConfig+0x9c>)
 801dc54:	4013      	ands	r3, r2
 801dc56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801dc58:	683b      	ldr	r3, [r7, #0]
 801dc5a:	681b      	ldr	r3, [r3, #0]
 801dc5c:	021b      	lsls	r3, r3, #8
 801dc5e:	68fa      	ldr	r2, [r7, #12]
 801dc60:	4313      	orrs	r3, r2
 801dc62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801dc64:	693b      	ldr	r3, [r7, #16]
 801dc66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801dc6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801dc6c:	683b      	ldr	r3, [r7, #0]
 801dc6e:	689b      	ldr	r3, [r3, #8]
 801dc70:	051b      	lsls	r3, r3, #20
 801dc72:	693a      	ldr	r2, [r7, #16]
 801dc74:	4313      	orrs	r3, r2
 801dc76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dc78:	687b      	ldr	r3, [r7, #4]
 801dc7a:	4a13      	ldr	r2, [pc, #76]	@ (801dcc8 <TIM_OC6_SetConfig+0xa0>)
 801dc7c:	4293      	cmp	r3, r2
 801dc7e:	d003      	beq.n	801dc88 <TIM_OC6_SetConfig+0x60>
 801dc80:	687b      	ldr	r3, [r7, #4]
 801dc82:	4a12      	ldr	r2, [pc, #72]	@ (801dccc <TIM_OC6_SetConfig+0xa4>)
 801dc84:	4293      	cmp	r3, r2
 801dc86:	d109      	bne.n	801dc9c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801dc88:	697b      	ldr	r3, [r7, #20]
 801dc8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801dc8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801dc90:	683b      	ldr	r3, [r7, #0]
 801dc92:	695b      	ldr	r3, [r3, #20]
 801dc94:	029b      	lsls	r3, r3, #10
 801dc96:	697a      	ldr	r2, [r7, #20]
 801dc98:	4313      	orrs	r3, r2
 801dc9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dc9c:	687b      	ldr	r3, [r7, #4]
 801dc9e:	697a      	ldr	r2, [r7, #20]
 801dca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801dca2:	687b      	ldr	r3, [r7, #4]
 801dca4:	68fa      	ldr	r2, [r7, #12]
 801dca6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801dca8:	683b      	ldr	r3, [r7, #0]
 801dcaa:	685a      	ldr	r2, [r3, #4]
 801dcac:	687b      	ldr	r3, [r7, #4]
 801dcae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dcb0:	687b      	ldr	r3, [r7, #4]
 801dcb2:	693a      	ldr	r2, [r7, #16]
 801dcb4:	621a      	str	r2, [r3, #32]
}
 801dcb6:	bf00      	nop
 801dcb8:	371c      	adds	r7, #28
 801dcba:	46bd      	mov	sp, r7
 801dcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcc0:	4770      	bx	lr
 801dcc2:	bf00      	nop
 801dcc4:	feff8fff 	.word	0xfeff8fff
 801dcc8:	40010000 	.word	0x40010000
 801dccc:	40010400 	.word	0x40010400

0801dcd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801dcd0:	b480      	push	{r7}
 801dcd2:	b087      	sub	sp, #28
 801dcd4:	af00      	add	r7, sp, #0
 801dcd6:	60f8      	str	r0, [r7, #12]
 801dcd8:	60b9      	str	r1, [r7, #8]
 801dcda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801dcdc:	68fb      	ldr	r3, [r7, #12]
 801dcde:	6a1b      	ldr	r3, [r3, #32]
 801dce0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801dce2:	68fb      	ldr	r3, [r7, #12]
 801dce4:	6a1b      	ldr	r3, [r3, #32]
 801dce6:	f023 0201 	bic.w	r2, r3, #1
 801dcea:	68fb      	ldr	r3, [r7, #12]
 801dcec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801dcee:	68fb      	ldr	r3, [r7, #12]
 801dcf0:	699b      	ldr	r3, [r3, #24]
 801dcf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801dcf4:	693b      	ldr	r3, [r7, #16]
 801dcf6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801dcfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801dcfc:	687b      	ldr	r3, [r7, #4]
 801dcfe:	011b      	lsls	r3, r3, #4
 801dd00:	693a      	ldr	r2, [r7, #16]
 801dd02:	4313      	orrs	r3, r2
 801dd04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801dd06:	697b      	ldr	r3, [r7, #20]
 801dd08:	f023 030a 	bic.w	r3, r3, #10
 801dd0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801dd0e:	697a      	ldr	r2, [r7, #20]
 801dd10:	68bb      	ldr	r3, [r7, #8]
 801dd12:	4313      	orrs	r3, r2
 801dd14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801dd16:	68fb      	ldr	r3, [r7, #12]
 801dd18:	693a      	ldr	r2, [r7, #16]
 801dd1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801dd1c:	68fb      	ldr	r3, [r7, #12]
 801dd1e:	697a      	ldr	r2, [r7, #20]
 801dd20:	621a      	str	r2, [r3, #32]
}
 801dd22:	bf00      	nop
 801dd24:	371c      	adds	r7, #28
 801dd26:	46bd      	mov	sp, r7
 801dd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd2c:	4770      	bx	lr

0801dd2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801dd2e:	b480      	push	{r7}
 801dd30:	b087      	sub	sp, #28
 801dd32:	af00      	add	r7, sp, #0
 801dd34:	60f8      	str	r0, [r7, #12]
 801dd36:	60b9      	str	r1, [r7, #8]
 801dd38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801dd3a:	68fb      	ldr	r3, [r7, #12]
 801dd3c:	6a1b      	ldr	r3, [r3, #32]
 801dd3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801dd40:	68fb      	ldr	r3, [r7, #12]
 801dd42:	6a1b      	ldr	r3, [r3, #32]
 801dd44:	f023 0210 	bic.w	r2, r3, #16
 801dd48:	68fb      	ldr	r3, [r7, #12]
 801dd4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801dd4c:	68fb      	ldr	r3, [r7, #12]
 801dd4e:	699b      	ldr	r3, [r3, #24]
 801dd50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801dd52:	693b      	ldr	r3, [r7, #16]
 801dd54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801dd58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801dd5a:	687b      	ldr	r3, [r7, #4]
 801dd5c:	031b      	lsls	r3, r3, #12
 801dd5e:	693a      	ldr	r2, [r7, #16]
 801dd60:	4313      	orrs	r3, r2
 801dd62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801dd64:	697b      	ldr	r3, [r7, #20]
 801dd66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801dd6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801dd6c:	68bb      	ldr	r3, [r7, #8]
 801dd6e:	011b      	lsls	r3, r3, #4
 801dd70:	697a      	ldr	r2, [r7, #20]
 801dd72:	4313      	orrs	r3, r2
 801dd74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801dd76:	68fb      	ldr	r3, [r7, #12]
 801dd78:	693a      	ldr	r2, [r7, #16]
 801dd7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801dd7c:	68fb      	ldr	r3, [r7, #12]
 801dd7e:	697a      	ldr	r2, [r7, #20]
 801dd80:	621a      	str	r2, [r3, #32]
}
 801dd82:	bf00      	nop
 801dd84:	371c      	adds	r7, #28
 801dd86:	46bd      	mov	sp, r7
 801dd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd8c:	4770      	bx	lr

0801dd8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801dd8e:	b480      	push	{r7}
 801dd90:	b085      	sub	sp, #20
 801dd92:	af00      	add	r7, sp, #0
 801dd94:	6078      	str	r0, [r7, #4]
 801dd96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801dd98:	687b      	ldr	r3, [r7, #4]
 801dd9a:	689b      	ldr	r3, [r3, #8]
 801dd9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801dd9e:	68fb      	ldr	r3, [r7, #12]
 801dda0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801dda4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801dda6:	683a      	ldr	r2, [r7, #0]
 801dda8:	68fb      	ldr	r3, [r7, #12]
 801ddaa:	4313      	orrs	r3, r2
 801ddac:	f043 0307 	orr.w	r3, r3, #7
 801ddb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801ddb2:	687b      	ldr	r3, [r7, #4]
 801ddb4:	68fa      	ldr	r2, [r7, #12]
 801ddb6:	609a      	str	r2, [r3, #8]
}
 801ddb8:	bf00      	nop
 801ddba:	3714      	adds	r7, #20
 801ddbc:	46bd      	mov	sp, r7
 801ddbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddc2:	4770      	bx	lr

0801ddc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801ddc4:	b480      	push	{r7}
 801ddc6:	b087      	sub	sp, #28
 801ddc8:	af00      	add	r7, sp, #0
 801ddca:	60f8      	str	r0, [r7, #12]
 801ddcc:	60b9      	str	r1, [r7, #8]
 801ddce:	607a      	str	r2, [r7, #4]
 801ddd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801ddd2:	68fb      	ldr	r3, [r7, #12]
 801ddd4:	689b      	ldr	r3, [r3, #8]
 801ddd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801ddd8:	697b      	ldr	r3, [r7, #20]
 801ddda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801ddde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801dde0:	683b      	ldr	r3, [r7, #0]
 801dde2:	021a      	lsls	r2, r3, #8
 801dde4:	687b      	ldr	r3, [r7, #4]
 801dde6:	431a      	orrs	r2, r3
 801dde8:	68bb      	ldr	r3, [r7, #8]
 801ddea:	4313      	orrs	r3, r2
 801ddec:	697a      	ldr	r2, [r7, #20]
 801ddee:	4313      	orrs	r3, r2
 801ddf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801ddf2:	68fb      	ldr	r3, [r7, #12]
 801ddf4:	697a      	ldr	r2, [r7, #20]
 801ddf6:	609a      	str	r2, [r3, #8]
}
 801ddf8:	bf00      	nop
 801ddfa:	371c      	adds	r7, #28
 801ddfc:	46bd      	mov	sp, r7
 801ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de02:	4770      	bx	lr

0801de04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801de04:	b480      	push	{r7}
 801de06:	b087      	sub	sp, #28
 801de08:	af00      	add	r7, sp, #0
 801de0a:	60f8      	str	r0, [r7, #12]
 801de0c:	60b9      	str	r1, [r7, #8]
 801de0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801de10:	68bb      	ldr	r3, [r7, #8]
 801de12:	f003 031f 	and.w	r3, r3, #31
 801de16:	2201      	movs	r2, #1
 801de18:	fa02 f303 	lsl.w	r3, r2, r3
 801de1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801de1e:	68fb      	ldr	r3, [r7, #12]
 801de20:	6a1a      	ldr	r2, [r3, #32]
 801de22:	697b      	ldr	r3, [r7, #20]
 801de24:	43db      	mvns	r3, r3
 801de26:	401a      	ands	r2, r3
 801de28:	68fb      	ldr	r3, [r7, #12]
 801de2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801de2c:	68fb      	ldr	r3, [r7, #12]
 801de2e:	6a1a      	ldr	r2, [r3, #32]
 801de30:	68bb      	ldr	r3, [r7, #8]
 801de32:	f003 031f 	and.w	r3, r3, #31
 801de36:	6879      	ldr	r1, [r7, #4]
 801de38:	fa01 f303 	lsl.w	r3, r1, r3
 801de3c:	431a      	orrs	r2, r3
 801de3e:	68fb      	ldr	r3, [r7, #12]
 801de40:	621a      	str	r2, [r3, #32]
}
 801de42:	bf00      	nop
 801de44:	371c      	adds	r7, #28
 801de46:	46bd      	mov	sp, r7
 801de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de4c:	4770      	bx	lr
	...

0801de50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801de50:	b480      	push	{r7}
 801de52:	b085      	sub	sp, #20
 801de54:	af00      	add	r7, sp, #0
 801de56:	6078      	str	r0, [r7, #4]
 801de58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801de5a:	687b      	ldr	r3, [r7, #4]
 801de5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801de60:	2b01      	cmp	r3, #1
 801de62:	d101      	bne.n	801de68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801de64:	2302      	movs	r3, #2
 801de66:	e06d      	b.n	801df44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 801de68:	687b      	ldr	r3, [r7, #4]
 801de6a:	2201      	movs	r2, #1
 801de6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	2202      	movs	r2, #2
 801de74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801de78:	687b      	ldr	r3, [r7, #4]
 801de7a:	681b      	ldr	r3, [r3, #0]
 801de7c:	685b      	ldr	r3, [r3, #4]
 801de7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801de80:	687b      	ldr	r3, [r7, #4]
 801de82:	681b      	ldr	r3, [r3, #0]
 801de84:	689b      	ldr	r3, [r3, #8]
 801de86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801de88:	687b      	ldr	r3, [r7, #4]
 801de8a:	681b      	ldr	r3, [r3, #0]
 801de8c:	4a30      	ldr	r2, [pc, #192]	@ (801df50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801de8e:	4293      	cmp	r3, r2
 801de90:	d004      	beq.n	801de9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801de92:	687b      	ldr	r3, [r7, #4]
 801de94:	681b      	ldr	r3, [r3, #0]
 801de96:	4a2f      	ldr	r2, [pc, #188]	@ (801df54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801de98:	4293      	cmp	r3, r2
 801de9a:	d108      	bne.n	801deae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801de9c:	68fb      	ldr	r3, [r7, #12]
 801de9e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801dea2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801dea4:	683b      	ldr	r3, [r7, #0]
 801dea6:	685b      	ldr	r3, [r3, #4]
 801dea8:	68fa      	ldr	r2, [r7, #12]
 801deaa:	4313      	orrs	r3, r2
 801deac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801deae:	68fb      	ldr	r3, [r7, #12]
 801deb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801deb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801deb6:	683b      	ldr	r3, [r7, #0]
 801deb8:	681b      	ldr	r3, [r3, #0]
 801deba:	68fa      	ldr	r2, [r7, #12]
 801debc:	4313      	orrs	r3, r2
 801debe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801dec0:	687b      	ldr	r3, [r7, #4]
 801dec2:	681b      	ldr	r3, [r3, #0]
 801dec4:	68fa      	ldr	r2, [r7, #12]
 801dec6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	681b      	ldr	r3, [r3, #0]
 801decc:	4a20      	ldr	r2, [pc, #128]	@ (801df50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801dece:	4293      	cmp	r3, r2
 801ded0:	d022      	beq.n	801df18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801ded2:	687b      	ldr	r3, [r7, #4]
 801ded4:	681b      	ldr	r3, [r3, #0]
 801ded6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801deda:	d01d      	beq.n	801df18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801dedc:	687b      	ldr	r3, [r7, #4]
 801dede:	681b      	ldr	r3, [r3, #0]
 801dee0:	4a1d      	ldr	r2, [pc, #116]	@ (801df58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801dee2:	4293      	cmp	r3, r2
 801dee4:	d018      	beq.n	801df18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801dee6:	687b      	ldr	r3, [r7, #4]
 801dee8:	681b      	ldr	r3, [r3, #0]
 801deea:	4a1c      	ldr	r2, [pc, #112]	@ (801df5c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801deec:	4293      	cmp	r3, r2
 801deee:	d013      	beq.n	801df18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	681b      	ldr	r3, [r3, #0]
 801def4:	4a1a      	ldr	r2, [pc, #104]	@ (801df60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801def6:	4293      	cmp	r3, r2
 801def8:	d00e      	beq.n	801df18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801defa:	687b      	ldr	r3, [r7, #4]
 801defc:	681b      	ldr	r3, [r3, #0]
 801defe:	4a15      	ldr	r2, [pc, #84]	@ (801df54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801df00:	4293      	cmp	r3, r2
 801df02:	d009      	beq.n	801df18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	681b      	ldr	r3, [r3, #0]
 801df08:	4a16      	ldr	r2, [pc, #88]	@ (801df64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801df0a:	4293      	cmp	r3, r2
 801df0c:	d004      	beq.n	801df18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801df0e:	687b      	ldr	r3, [r7, #4]
 801df10:	681b      	ldr	r3, [r3, #0]
 801df12:	4a15      	ldr	r2, [pc, #84]	@ (801df68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801df14:	4293      	cmp	r3, r2
 801df16:	d10c      	bne.n	801df32 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801df18:	68bb      	ldr	r3, [r7, #8]
 801df1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801df1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801df20:	683b      	ldr	r3, [r7, #0]
 801df22:	689b      	ldr	r3, [r3, #8]
 801df24:	68ba      	ldr	r2, [r7, #8]
 801df26:	4313      	orrs	r3, r2
 801df28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801df2a:	687b      	ldr	r3, [r7, #4]
 801df2c:	681b      	ldr	r3, [r3, #0]
 801df2e:	68ba      	ldr	r2, [r7, #8]
 801df30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801df32:	687b      	ldr	r3, [r7, #4]
 801df34:	2201      	movs	r2, #1
 801df36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801df3a:	687b      	ldr	r3, [r7, #4]
 801df3c:	2200      	movs	r2, #0
 801df3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801df42:	2300      	movs	r3, #0
}
 801df44:	4618      	mov	r0, r3
 801df46:	3714      	adds	r7, #20
 801df48:	46bd      	mov	sp, r7
 801df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df4e:	4770      	bx	lr
 801df50:	40010000 	.word	0x40010000
 801df54:	40010400 	.word	0x40010400
 801df58:	40000400 	.word	0x40000400
 801df5c:	40000800 	.word	0x40000800
 801df60:	40000c00 	.word	0x40000c00
 801df64:	40014000 	.word	0x40014000
 801df68:	40001800 	.word	0x40001800

0801df6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801df6c:	b480      	push	{r7}
 801df6e:	b085      	sub	sp, #20
 801df70:	af00      	add	r7, sp, #0
 801df72:	6078      	str	r0, [r7, #4]
 801df74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801df76:	2300      	movs	r3, #0
 801df78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801df80:	2b01      	cmp	r3, #1
 801df82:	d101      	bne.n	801df88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801df84:	2302      	movs	r3, #2
 801df86:	e065      	b.n	801e054 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 801df88:	687b      	ldr	r3, [r7, #4]
 801df8a:	2201      	movs	r2, #1
 801df8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801df90:	68fb      	ldr	r3, [r7, #12]
 801df92:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801df96:	683b      	ldr	r3, [r7, #0]
 801df98:	68db      	ldr	r3, [r3, #12]
 801df9a:	4313      	orrs	r3, r2
 801df9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801df9e:	68fb      	ldr	r3, [r7, #12]
 801dfa0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801dfa4:	683b      	ldr	r3, [r7, #0]
 801dfa6:	689b      	ldr	r3, [r3, #8]
 801dfa8:	4313      	orrs	r3, r2
 801dfaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801dfac:	68fb      	ldr	r3, [r7, #12]
 801dfae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801dfb2:	683b      	ldr	r3, [r7, #0]
 801dfb4:	685b      	ldr	r3, [r3, #4]
 801dfb6:	4313      	orrs	r3, r2
 801dfb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801dfba:	68fb      	ldr	r3, [r7, #12]
 801dfbc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801dfc0:	683b      	ldr	r3, [r7, #0]
 801dfc2:	681b      	ldr	r3, [r3, #0]
 801dfc4:	4313      	orrs	r3, r2
 801dfc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801dfc8:	68fb      	ldr	r3, [r7, #12]
 801dfca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801dfce:	683b      	ldr	r3, [r7, #0]
 801dfd0:	691b      	ldr	r3, [r3, #16]
 801dfd2:	4313      	orrs	r3, r2
 801dfd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801dfd6:	68fb      	ldr	r3, [r7, #12]
 801dfd8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801dfdc:	683b      	ldr	r3, [r7, #0]
 801dfde:	695b      	ldr	r3, [r3, #20]
 801dfe0:	4313      	orrs	r3, r2
 801dfe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801dfe4:	68fb      	ldr	r3, [r7, #12]
 801dfe6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801dfea:	683b      	ldr	r3, [r7, #0]
 801dfec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dfee:	4313      	orrs	r3, r2
 801dff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801dff2:	68fb      	ldr	r3, [r7, #12]
 801dff4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 801dff8:	683b      	ldr	r3, [r7, #0]
 801dffa:	699b      	ldr	r3, [r3, #24]
 801dffc:	041b      	lsls	r3, r3, #16
 801dffe:	4313      	orrs	r3, r2
 801e000:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801e002:	687b      	ldr	r3, [r7, #4]
 801e004:	681b      	ldr	r3, [r3, #0]
 801e006:	4a16      	ldr	r2, [pc, #88]	@ (801e060 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 801e008:	4293      	cmp	r3, r2
 801e00a:	d004      	beq.n	801e016 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 801e00c:	687b      	ldr	r3, [r7, #4]
 801e00e:	681b      	ldr	r3, [r3, #0]
 801e010:	4a14      	ldr	r2, [pc, #80]	@ (801e064 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801e012:	4293      	cmp	r3, r2
 801e014:	d115      	bne.n	801e042 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801e016:	68fb      	ldr	r3, [r7, #12]
 801e018:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 801e01c:	683b      	ldr	r3, [r7, #0]
 801e01e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e020:	051b      	lsls	r3, r3, #20
 801e022:	4313      	orrs	r3, r2
 801e024:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801e026:	68fb      	ldr	r3, [r7, #12]
 801e028:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801e02c:	683b      	ldr	r3, [r7, #0]
 801e02e:	69db      	ldr	r3, [r3, #28]
 801e030:	4313      	orrs	r3, r2
 801e032:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801e034:	68fb      	ldr	r3, [r7, #12]
 801e036:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801e03a:	683b      	ldr	r3, [r7, #0]
 801e03c:	6a1b      	ldr	r3, [r3, #32]
 801e03e:	4313      	orrs	r3, r2
 801e040:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801e042:	687b      	ldr	r3, [r7, #4]
 801e044:	681b      	ldr	r3, [r3, #0]
 801e046:	68fa      	ldr	r2, [r7, #12]
 801e048:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801e04a:	687b      	ldr	r3, [r7, #4]
 801e04c:	2200      	movs	r2, #0
 801e04e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801e052:	2300      	movs	r3, #0
}
 801e054:	4618      	mov	r0, r3
 801e056:	3714      	adds	r7, #20
 801e058:	46bd      	mov	sp, r7
 801e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e05e:	4770      	bx	lr
 801e060:	40010000 	.word	0x40010000
 801e064:	40010400 	.word	0x40010400

0801e068 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801e068:	b480      	push	{r7}
 801e06a:	b083      	sub	sp, #12
 801e06c:	af00      	add	r7, sp, #0
 801e06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801e070:	bf00      	nop
 801e072:	370c      	adds	r7, #12
 801e074:	46bd      	mov	sp, r7
 801e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e07a:	4770      	bx	lr

0801e07c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801e07c:	b480      	push	{r7}
 801e07e:	b083      	sub	sp, #12
 801e080:	af00      	add	r7, sp, #0
 801e082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801e084:	bf00      	nop
 801e086:	370c      	adds	r7, #12
 801e088:	46bd      	mov	sp, r7
 801e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e08e:	4770      	bx	lr

0801e090 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801e090:	b480      	push	{r7}
 801e092:	b083      	sub	sp, #12
 801e094:	af00      	add	r7, sp, #0
 801e096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801e098:	bf00      	nop
 801e09a:	370c      	adds	r7, #12
 801e09c:	46bd      	mov	sp, r7
 801e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0a2:	4770      	bx	lr

0801e0a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801e0a4:	b580      	push	{r7, lr}
 801e0a6:	b082      	sub	sp, #8
 801e0a8:	af00      	add	r7, sp, #0
 801e0aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801e0ac:	687b      	ldr	r3, [r7, #4]
 801e0ae:	2b00      	cmp	r3, #0
 801e0b0:	d101      	bne.n	801e0b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801e0b2:	2301      	movs	r3, #1
 801e0b4:	e040      	b.n	801e138 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801e0b6:	687b      	ldr	r3, [r7, #4]
 801e0b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e0ba:	2b00      	cmp	r3, #0
 801e0bc:	d106      	bne.n	801e0cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801e0be:	687b      	ldr	r3, [r7, #4]
 801e0c0:	2200      	movs	r2, #0
 801e0c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801e0c6:	6878      	ldr	r0, [r7, #4]
 801e0c8:	f7fa f852 	bl	8018170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	2224      	movs	r2, #36	@ 0x24
 801e0d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801e0d2:	687b      	ldr	r3, [r7, #4]
 801e0d4:	681b      	ldr	r3, [r3, #0]
 801e0d6:	681a      	ldr	r2, [r3, #0]
 801e0d8:	687b      	ldr	r3, [r7, #4]
 801e0da:	681b      	ldr	r3, [r3, #0]
 801e0dc:	f022 0201 	bic.w	r2, r2, #1
 801e0e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801e0e2:	687b      	ldr	r3, [r7, #4]
 801e0e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	d002      	beq.n	801e0f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 801e0ea:	6878      	ldr	r0, [r7, #4]
 801e0ec:	f000 fa8c 	bl	801e608 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801e0f0:	6878      	ldr	r0, [r7, #4]
 801e0f2:	f000 f825 	bl	801e140 <UART_SetConfig>
 801e0f6:	4603      	mov	r3, r0
 801e0f8:	2b01      	cmp	r3, #1
 801e0fa:	d101      	bne.n	801e100 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 801e0fc:	2301      	movs	r3, #1
 801e0fe:	e01b      	b.n	801e138 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801e100:	687b      	ldr	r3, [r7, #4]
 801e102:	681b      	ldr	r3, [r3, #0]
 801e104:	685a      	ldr	r2, [r3, #4]
 801e106:	687b      	ldr	r3, [r7, #4]
 801e108:	681b      	ldr	r3, [r3, #0]
 801e10a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801e10e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801e110:	687b      	ldr	r3, [r7, #4]
 801e112:	681b      	ldr	r3, [r3, #0]
 801e114:	689a      	ldr	r2, [r3, #8]
 801e116:	687b      	ldr	r3, [r7, #4]
 801e118:	681b      	ldr	r3, [r3, #0]
 801e11a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801e11e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	681b      	ldr	r3, [r3, #0]
 801e124:	681a      	ldr	r2, [r3, #0]
 801e126:	687b      	ldr	r3, [r7, #4]
 801e128:	681b      	ldr	r3, [r3, #0]
 801e12a:	f042 0201 	orr.w	r2, r2, #1
 801e12e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801e130:	6878      	ldr	r0, [r7, #4]
 801e132:	f000 fb0b 	bl	801e74c <UART_CheckIdleState>
 801e136:	4603      	mov	r3, r0
}
 801e138:	4618      	mov	r0, r3
 801e13a:	3708      	adds	r7, #8
 801e13c:	46bd      	mov	sp, r7
 801e13e:	bd80      	pop	{r7, pc}

0801e140 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801e140:	b580      	push	{r7, lr}
 801e142:	b088      	sub	sp, #32
 801e144:	af00      	add	r7, sp, #0
 801e146:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801e148:	2300      	movs	r3, #0
 801e14a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	689a      	ldr	r2, [r3, #8]
 801e150:	687b      	ldr	r3, [r7, #4]
 801e152:	691b      	ldr	r3, [r3, #16]
 801e154:	431a      	orrs	r2, r3
 801e156:	687b      	ldr	r3, [r7, #4]
 801e158:	695b      	ldr	r3, [r3, #20]
 801e15a:	431a      	orrs	r2, r3
 801e15c:	687b      	ldr	r3, [r7, #4]
 801e15e:	69db      	ldr	r3, [r3, #28]
 801e160:	4313      	orrs	r3, r2
 801e162:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801e164:	687b      	ldr	r3, [r7, #4]
 801e166:	681b      	ldr	r3, [r3, #0]
 801e168:	681a      	ldr	r2, [r3, #0]
 801e16a:	4ba6      	ldr	r3, [pc, #664]	@ (801e404 <UART_SetConfig+0x2c4>)
 801e16c:	4013      	ands	r3, r2
 801e16e:	687a      	ldr	r2, [r7, #4]
 801e170:	6812      	ldr	r2, [r2, #0]
 801e172:	6979      	ldr	r1, [r7, #20]
 801e174:	430b      	orrs	r3, r1
 801e176:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801e178:	687b      	ldr	r3, [r7, #4]
 801e17a:	681b      	ldr	r3, [r3, #0]
 801e17c:	685b      	ldr	r3, [r3, #4]
 801e17e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801e182:	687b      	ldr	r3, [r7, #4]
 801e184:	68da      	ldr	r2, [r3, #12]
 801e186:	687b      	ldr	r3, [r7, #4]
 801e188:	681b      	ldr	r3, [r3, #0]
 801e18a:	430a      	orrs	r2, r1
 801e18c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801e18e:	687b      	ldr	r3, [r7, #4]
 801e190:	699b      	ldr	r3, [r3, #24]
 801e192:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	6a1b      	ldr	r3, [r3, #32]
 801e198:	697a      	ldr	r2, [r7, #20]
 801e19a:	4313      	orrs	r3, r2
 801e19c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801e19e:	687b      	ldr	r3, [r7, #4]
 801e1a0:	681b      	ldr	r3, [r3, #0]
 801e1a2:	689b      	ldr	r3, [r3, #8]
 801e1a4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 801e1a8:	687b      	ldr	r3, [r7, #4]
 801e1aa:	681b      	ldr	r3, [r3, #0]
 801e1ac:	697a      	ldr	r2, [r7, #20]
 801e1ae:	430a      	orrs	r2, r1
 801e1b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801e1b2:	687b      	ldr	r3, [r7, #4]
 801e1b4:	681b      	ldr	r3, [r3, #0]
 801e1b6:	4a94      	ldr	r2, [pc, #592]	@ (801e408 <UART_SetConfig+0x2c8>)
 801e1b8:	4293      	cmp	r3, r2
 801e1ba:	d120      	bne.n	801e1fe <UART_SetConfig+0xbe>
 801e1bc:	4b93      	ldr	r3, [pc, #588]	@ (801e40c <UART_SetConfig+0x2cc>)
 801e1be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e1c2:	f003 0303 	and.w	r3, r3, #3
 801e1c6:	2b03      	cmp	r3, #3
 801e1c8:	d816      	bhi.n	801e1f8 <UART_SetConfig+0xb8>
 801e1ca:	a201      	add	r2, pc, #4	@ (adr r2, 801e1d0 <UART_SetConfig+0x90>)
 801e1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e1d0:	0801e1e1 	.word	0x0801e1e1
 801e1d4:	0801e1ed 	.word	0x0801e1ed
 801e1d8:	0801e1e7 	.word	0x0801e1e7
 801e1dc:	0801e1f3 	.word	0x0801e1f3
 801e1e0:	2301      	movs	r3, #1
 801e1e2:	77fb      	strb	r3, [r7, #31]
 801e1e4:	e150      	b.n	801e488 <UART_SetConfig+0x348>
 801e1e6:	2302      	movs	r3, #2
 801e1e8:	77fb      	strb	r3, [r7, #31]
 801e1ea:	e14d      	b.n	801e488 <UART_SetConfig+0x348>
 801e1ec:	2304      	movs	r3, #4
 801e1ee:	77fb      	strb	r3, [r7, #31]
 801e1f0:	e14a      	b.n	801e488 <UART_SetConfig+0x348>
 801e1f2:	2308      	movs	r3, #8
 801e1f4:	77fb      	strb	r3, [r7, #31]
 801e1f6:	e147      	b.n	801e488 <UART_SetConfig+0x348>
 801e1f8:	2310      	movs	r3, #16
 801e1fa:	77fb      	strb	r3, [r7, #31]
 801e1fc:	e144      	b.n	801e488 <UART_SetConfig+0x348>
 801e1fe:	687b      	ldr	r3, [r7, #4]
 801e200:	681b      	ldr	r3, [r3, #0]
 801e202:	4a83      	ldr	r2, [pc, #524]	@ (801e410 <UART_SetConfig+0x2d0>)
 801e204:	4293      	cmp	r3, r2
 801e206:	d132      	bne.n	801e26e <UART_SetConfig+0x12e>
 801e208:	4b80      	ldr	r3, [pc, #512]	@ (801e40c <UART_SetConfig+0x2cc>)
 801e20a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e20e:	f003 030c 	and.w	r3, r3, #12
 801e212:	2b0c      	cmp	r3, #12
 801e214:	d828      	bhi.n	801e268 <UART_SetConfig+0x128>
 801e216:	a201      	add	r2, pc, #4	@ (adr r2, 801e21c <UART_SetConfig+0xdc>)
 801e218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e21c:	0801e251 	.word	0x0801e251
 801e220:	0801e269 	.word	0x0801e269
 801e224:	0801e269 	.word	0x0801e269
 801e228:	0801e269 	.word	0x0801e269
 801e22c:	0801e25d 	.word	0x0801e25d
 801e230:	0801e269 	.word	0x0801e269
 801e234:	0801e269 	.word	0x0801e269
 801e238:	0801e269 	.word	0x0801e269
 801e23c:	0801e257 	.word	0x0801e257
 801e240:	0801e269 	.word	0x0801e269
 801e244:	0801e269 	.word	0x0801e269
 801e248:	0801e269 	.word	0x0801e269
 801e24c:	0801e263 	.word	0x0801e263
 801e250:	2300      	movs	r3, #0
 801e252:	77fb      	strb	r3, [r7, #31]
 801e254:	e118      	b.n	801e488 <UART_SetConfig+0x348>
 801e256:	2302      	movs	r3, #2
 801e258:	77fb      	strb	r3, [r7, #31]
 801e25a:	e115      	b.n	801e488 <UART_SetConfig+0x348>
 801e25c:	2304      	movs	r3, #4
 801e25e:	77fb      	strb	r3, [r7, #31]
 801e260:	e112      	b.n	801e488 <UART_SetConfig+0x348>
 801e262:	2308      	movs	r3, #8
 801e264:	77fb      	strb	r3, [r7, #31]
 801e266:	e10f      	b.n	801e488 <UART_SetConfig+0x348>
 801e268:	2310      	movs	r3, #16
 801e26a:	77fb      	strb	r3, [r7, #31]
 801e26c:	e10c      	b.n	801e488 <UART_SetConfig+0x348>
 801e26e:	687b      	ldr	r3, [r7, #4]
 801e270:	681b      	ldr	r3, [r3, #0]
 801e272:	4a68      	ldr	r2, [pc, #416]	@ (801e414 <UART_SetConfig+0x2d4>)
 801e274:	4293      	cmp	r3, r2
 801e276:	d120      	bne.n	801e2ba <UART_SetConfig+0x17a>
 801e278:	4b64      	ldr	r3, [pc, #400]	@ (801e40c <UART_SetConfig+0x2cc>)
 801e27a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e27e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801e282:	2b30      	cmp	r3, #48	@ 0x30
 801e284:	d013      	beq.n	801e2ae <UART_SetConfig+0x16e>
 801e286:	2b30      	cmp	r3, #48	@ 0x30
 801e288:	d814      	bhi.n	801e2b4 <UART_SetConfig+0x174>
 801e28a:	2b20      	cmp	r3, #32
 801e28c:	d009      	beq.n	801e2a2 <UART_SetConfig+0x162>
 801e28e:	2b20      	cmp	r3, #32
 801e290:	d810      	bhi.n	801e2b4 <UART_SetConfig+0x174>
 801e292:	2b00      	cmp	r3, #0
 801e294:	d002      	beq.n	801e29c <UART_SetConfig+0x15c>
 801e296:	2b10      	cmp	r3, #16
 801e298:	d006      	beq.n	801e2a8 <UART_SetConfig+0x168>
 801e29a:	e00b      	b.n	801e2b4 <UART_SetConfig+0x174>
 801e29c:	2300      	movs	r3, #0
 801e29e:	77fb      	strb	r3, [r7, #31]
 801e2a0:	e0f2      	b.n	801e488 <UART_SetConfig+0x348>
 801e2a2:	2302      	movs	r3, #2
 801e2a4:	77fb      	strb	r3, [r7, #31]
 801e2a6:	e0ef      	b.n	801e488 <UART_SetConfig+0x348>
 801e2a8:	2304      	movs	r3, #4
 801e2aa:	77fb      	strb	r3, [r7, #31]
 801e2ac:	e0ec      	b.n	801e488 <UART_SetConfig+0x348>
 801e2ae:	2308      	movs	r3, #8
 801e2b0:	77fb      	strb	r3, [r7, #31]
 801e2b2:	e0e9      	b.n	801e488 <UART_SetConfig+0x348>
 801e2b4:	2310      	movs	r3, #16
 801e2b6:	77fb      	strb	r3, [r7, #31]
 801e2b8:	e0e6      	b.n	801e488 <UART_SetConfig+0x348>
 801e2ba:	687b      	ldr	r3, [r7, #4]
 801e2bc:	681b      	ldr	r3, [r3, #0]
 801e2be:	4a56      	ldr	r2, [pc, #344]	@ (801e418 <UART_SetConfig+0x2d8>)
 801e2c0:	4293      	cmp	r3, r2
 801e2c2:	d120      	bne.n	801e306 <UART_SetConfig+0x1c6>
 801e2c4:	4b51      	ldr	r3, [pc, #324]	@ (801e40c <UART_SetConfig+0x2cc>)
 801e2c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e2ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801e2ce:	2bc0      	cmp	r3, #192	@ 0xc0
 801e2d0:	d013      	beq.n	801e2fa <UART_SetConfig+0x1ba>
 801e2d2:	2bc0      	cmp	r3, #192	@ 0xc0
 801e2d4:	d814      	bhi.n	801e300 <UART_SetConfig+0x1c0>
 801e2d6:	2b80      	cmp	r3, #128	@ 0x80
 801e2d8:	d009      	beq.n	801e2ee <UART_SetConfig+0x1ae>
 801e2da:	2b80      	cmp	r3, #128	@ 0x80
 801e2dc:	d810      	bhi.n	801e300 <UART_SetConfig+0x1c0>
 801e2de:	2b00      	cmp	r3, #0
 801e2e0:	d002      	beq.n	801e2e8 <UART_SetConfig+0x1a8>
 801e2e2:	2b40      	cmp	r3, #64	@ 0x40
 801e2e4:	d006      	beq.n	801e2f4 <UART_SetConfig+0x1b4>
 801e2e6:	e00b      	b.n	801e300 <UART_SetConfig+0x1c0>
 801e2e8:	2300      	movs	r3, #0
 801e2ea:	77fb      	strb	r3, [r7, #31]
 801e2ec:	e0cc      	b.n	801e488 <UART_SetConfig+0x348>
 801e2ee:	2302      	movs	r3, #2
 801e2f0:	77fb      	strb	r3, [r7, #31]
 801e2f2:	e0c9      	b.n	801e488 <UART_SetConfig+0x348>
 801e2f4:	2304      	movs	r3, #4
 801e2f6:	77fb      	strb	r3, [r7, #31]
 801e2f8:	e0c6      	b.n	801e488 <UART_SetConfig+0x348>
 801e2fa:	2308      	movs	r3, #8
 801e2fc:	77fb      	strb	r3, [r7, #31]
 801e2fe:	e0c3      	b.n	801e488 <UART_SetConfig+0x348>
 801e300:	2310      	movs	r3, #16
 801e302:	77fb      	strb	r3, [r7, #31]
 801e304:	e0c0      	b.n	801e488 <UART_SetConfig+0x348>
 801e306:	687b      	ldr	r3, [r7, #4]
 801e308:	681b      	ldr	r3, [r3, #0]
 801e30a:	4a44      	ldr	r2, [pc, #272]	@ (801e41c <UART_SetConfig+0x2dc>)
 801e30c:	4293      	cmp	r3, r2
 801e30e:	d125      	bne.n	801e35c <UART_SetConfig+0x21c>
 801e310:	4b3e      	ldr	r3, [pc, #248]	@ (801e40c <UART_SetConfig+0x2cc>)
 801e312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801e31a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e31e:	d017      	beq.n	801e350 <UART_SetConfig+0x210>
 801e320:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e324:	d817      	bhi.n	801e356 <UART_SetConfig+0x216>
 801e326:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e32a:	d00b      	beq.n	801e344 <UART_SetConfig+0x204>
 801e32c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e330:	d811      	bhi.n	801e356 <UART_SetConfig+0x216>
 801e332:	2b00      	cmp	r3, #0
 801e334:	d003      	beq.n	801e33e <UART_SetConfig+0x1fe>
 801e336:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e33a:	d006      	beq.n	801e34a <UART_SetConfig+0x20a>
 801e33c:	e00b      	b.n	801e356 <UART_SetConfig+0x216>
 801e33e:	2300      	movs	r3, #0
 801e340:	77fb      	strb	r3, [r7, #31]
 801e342:	e0a1      	b.n	801e488 <UART_SetConfig+0x348>
 801e344:	2302      	movs	r3, #2
 801e346:	77fb      	strb	r3, [r7, #31]
 801e348:	e09e      	b.n	801e488 <UART_SetConfig+0x348>
 801e34a:	2304      	movs	r3, #4
 801e34c:	77fb      	strb	r3, [r7, #31]
 801e34e:	e09b      	b.n	801e488 <UART_SetConfig+0x348>
 801e350:	2308      	movs	r3, #8
 801e352:	77fb      	strb	r3, [r7, #31]
 801e354:	e098      	b.n	801e488 <UART_SetConfig+0x348>
 801e356:	2310      	movs	r3, #16
 801e358:	77fb      	strb	r3, [r7, #31]
 801e35a:	e095      	b.n	801e488 <UART_SetConfig+0x348>
 801e35c:	687b      	ldr	r3, [r7, #4]
 801e35e:	681b      	ldr	r3, [r3, #0]
 801e360:	4a2f      	ldr	r2, [pc, #188]	@ (801e420 <UART_SetConfig+0x2e0>)
 801e362:	4293      	cmp	r3, r2
 801e364:	d125      	bne.n	801e3b2 <UART_SetConfig+0x272>
 801e366:	4b29      	ldr	r3, [pc, #164]	@ (801e40c <UART_SetConfig+0x2cc>)
 801e368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e36c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801e370:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801e374:	d017      	beq.n	801e3a6 <UART_SetConfig+0x266>
 801e376:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801e37a:	d817      	bhi.n	801e3ac <UART_SetConfig+0x26c>
 801e37c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801e380:	d00b      	beq.n	801e39a <UART_SetConfig+0x25a>
 801e382:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801e386:	d811      	bhi.n	801e3ac <UART_SetConfig+0x26c>
 801e388:	2b00      	cmp	r3, #0
 801e38a:	d003      	beq.n	801e394 <UART_SetConfig+0x254>
 801e38c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e390:	d006      	beq.n	801e3a0 <UART_SetConfig+0x260>
 801e392:	e00b      	b.n	801e3ac <UART_SetConfig+0x26c>
 801e394:	2301      	movs	r3, #1
 801e396:	77fb      	strb	r3, [r7, #31]
 801e398:	e076      	b.n	801e488 <UART_SetConfig+0x348>
 801e39a:	2302      	movs	r3, #2
 801e39c:	77fb      	strb	r3, [r7, #31]
 801e39e:	e073      	b.n	801e488 <UART_SetConfig+0x348>
 801e3a0:	2304      	movs	r3, #4
 801e3a2:	77fb      	strb	r3, [r7, #31]
 801e3a4:	e070      	b.n	801e488 <UART_SetConfig+0x348>
 801e3a6:	2308      	movs	r3, #8
 801e3a8:	77fb      	strb	r3, [r7, #31]
 801e3aa:	e06d      	b.n	801e488 <UART_SetConfig+0x348>
 801e3ac:	2310      	movs	r3, #16
 801e3ae:	77fb      	strb	r3, [r7, #31]
 801e3b0:	e06a      	b.n	801e488 <UART_SetConfig+0x348>
 801e3b2:	687b      	ldr	r3, [r7, #4]
 801e3b4:	681b      	ldr	r3, [r3, #0]
 801e3b6:	4a1b      	ldr	r2, [pc, #108]	@ (801e424 <UART_SetConfig+0x2e4>)
 801e3b8:	4293      	cmp	r3, r2
 801e3ba:	d138      	bne.n	801e42e <UART_SetConfig+0x2ee>
 801e3bc:	4b13      	ldr	r3, [pc, #76]	@ (801e40c <UART_SetConfig+0x2cc>)
 801e3be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e3c2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 801e3c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801e3ca:	d017      	beq.n	801e3fc <UART_SetConfig+0x2bc>
 801e3cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801e3d0:	d82a      	bhi.n	801e428 <UART_SetConfig+0x2e8>
 801e3d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e3d6:	d00b      	beq.n	801e3f0 <UART_SetConfig+0x2b0>
 801e3d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e3dc:	d824      	bhi.n	801e428 <UART_SetConfig+0x2e8>
 801e3de:	2b00      	cmp	r3, #0
 801e3e0:	d003      	beq.n	801e3ea <UART_SetConfig+0x2aa>
 801e3e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e3e6:	d006      	beq.n	801e3f6 <UART_SetConfig+0x2b6>
 801e3e8:	e01e      	b.n	801e428 <UART_SetConfig+0x2e8>
 801e3ea:	2300      	movs	r3, #0
 801e3ec:	77fb      	strb	r3, [r7, #31]
 801e3ee:	e04b      	b.n	801e488 <UART_SetConfig+0x348>
 801e3f0:	2302      	movs	r3, #2
 801e3f2:	77fb      	strb	r3, [r7, #31]
 801e3f4:	e048      	b.n	801e488 <UART_SetConfig+0x348>
 801e3f6:	2304      	movs	r3, #4
 801e3f8:	77fb      	strb	r3, [r7, #31]
 801e3fa:	e045      	b.n	801e488 <UART_SetConfig+0x348>
 801e3fc:	2308      	movs	r3, #8
 801e3fe:	77fb      	strb	r3, [r7, #31]
 801e400:	e042      	b.n	801e488 <UART_SetConfig+0x348>
 801e402:	bf00      	nop
 801e404:	efff69f3 	.word	0xefff69f3
 801e408:	40011000 	.word	0x40011000
 801e40c:	40023800 	.word	0x40023800
 801e410:	40004400 	.word	0x40004400
 801e414:	40004800 	.word	0x40004800
 801e418:	40004c00 	.word	0x40004c00
 801e41c:	40005000 	.word	0x40005000
 801e420:	40011400 	.word	0x40011400
 801e424:	40007800 	.word	0x40007800
 801e428:	2310      	movs	r3, #16
 801e42a:	77fb      	strb	r3, [r7, #31]
 801e42c:	e02c      	b.n	801e488 <UART_SetConfig+0x348>
 801e42e:	687b      	ldr	r3, [r7, #4]
 801e430:	681b      	ldr	r3, [r3, #0]
 801e432:	4a72      	ldr	r2, [pc, #456]	@ (801e5fc <UART_SetConfig+0x4bc>)
 801e434:	4293      	cmp	r3, r2
 801e436:	d125      	bne.n	801e484 <UART_SetConfig+0x344>
 801e438:	4b71      	ldr	r3, [pc, #452]	@ (801e600 <UART_SetConfig+0x4c0>)
 801e43a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e43e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801e442:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801e446:	d017      	beq.n	801e478 <UART_SetConfig+0x338>
 801e448:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801e44c:	d817      	bhi.n	801e47e <UART_SetConfig+0x33e>
 801e44e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e452:	d00b      	beq.n	801e46c <UART_SetConfig+0x32c>
 801e454:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e458:	d811      	bhi.n	801e47e <UART_SetConfig+0x33e>
 801e45a:	2b00      	cmp	r3, #0
 801e45c:	d003      	beq.n	801e466 <UART_SetConfig+0x326>
 801e45e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e462:	d006      	beq.n	801e472 <UART_SetConfig+0x332>
 801e464:	e00b      	b.n	801e47e <UART_SetConfig+0x33e>
 801e466:	2300      	movs	r3, #0
 801e468:	77fb      	strb	r3, [r7, #31]
 801e46a:	e00d      	b.n	801e488 <UART_SetConfig+0x348>
 801e46c:	2302      	movs	r3, #2
 801e46e:	77fb      	strb	r3, [r7, #31]
 801e470:	e00a      	b.n	801e488 <UART_SetConfig+0x348>
 801e472:	2304      	movs	r3, #4
 801e474:	77fb      	strb	r3, [r7, #31]
 801e476:	e007      	b.n	801e488 <UART_SetConfig+0x348>
 801e478:	2308      	movs	r3, #8
 801e47a:	77fb      	strb	r3, [r7, #31]
 801e47c:	e004      	b.n	801e488 <UART_SetConfig+0x348>
 801e47e:	2310      	movs	r3, #16
 801e480:	77fb      	strb	r3, [r7, #31]
 801e482:	e001      	b.n	801e488 <UART_SetConfig+0x348>
 801e484:	2310      	movs	r3, #16
 801e486:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801e488:	687b      	ldr	r3, [r7, #4]
 801e48a:	69db      	ldr	r3, [r3, #28]
 801e48c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e490:	d15b      	bne.n	801e54a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 801e492:	7ffb      	ldrb	r3, [r7, #31]
 801e494:	2b08      	cmp	r3, #8
 801e496:	d828      	bhi.n	801e4ea <UART_SetConfig+0x3aa>
 801e498:	a201      	add	r2, pc, #4	@ (adr r2, 801e4a0 <UART_SetConfig+0x360>)
 801e49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e49e:	bf00      	nop
 801e4a0:	0801e4c5 	.word	0x0801e4c5
 801e4a4:	0801e4cd 	.word	0x0801e4cd
 801e4a8:	0801e4d5 	.word	0x0801e4d5
 801e4ac:	0801e4eb 	.word	0x0801e4eb
 801e4b0:	0801e4db 	.word	0x0801e4db
 801e4b4:	0801e4eb 	.word	0x0801e4eb
 801e4b8:	0801e4eb 	.word	0x0801e4eb
 801e4bc:	0801e4eb 	.word	0x0801e4eb
 801e4c0:	0801e4e3 	.word	0x0801e4e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e4c4:	f7fd fe0a 	bl	801c0dc <HAL_RCC_GetPCLK1Freq>
 801e4c8:	61b8      	str	r0, [r7, #24]
        break;
 801e4ca:	e013      	b.n	801e4f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e4cc:	f7fd fe1a 	bl	801c104 <HAL_RCC_GetPCLK2Freq>
 801e4d0:	61b8      	str	r0, [r7, #24]
        break;
 801e4d2:	e00f      	b.n	801e4f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e4d4:	4b4b      	ldr	r3, [pc, #300]	@ (801e604 <UART_SetConfig+0x4c4>)
 801e4d6:	61bb      	str	r3, [r7, #24]
        break;
 801e4d8:	e00c      	b.n	801e4f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e4da:	f7fd fced 	bl	801beb8 <HAL_RCC_GetSysClockFreq>
 801e4de:	61b8      	str	r0, [r7, #24]
        break;
 801e4e0:	e008      	b.n	801e4f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e4e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801e4e6:	61bb      	str	r3, [r7, #24]
        break;
 801e4e8:	e004      	b.n	801e4f4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 801e4ea:	2300      	movs	r3, #0
 801e4ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801e4ee:	2301      	movs	r3, #1
 801e4f0:	77bb      	strb	r3, [r7, #30]
        break;
 801e4f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801e4f4:	69bb      	ldr	r3, [r7, #24]
 801e4f6:	2b00      	cmp	r3, #0
 801e4f8:	d074      	beq.n	801e5e4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801e4fa:	69bb      	ldr	r3, [r7, #24]
 801e4fc:	005a      	lsls	r2, r3, #1
 801e4fe:	687b      	ldr	r3, [r7, #4]
 801e500:	685b      	ldr	r3, [r3, #4]
 801e502:	085b      	lsrs	r3, r3, #1
 801e504:	441a      	add	r2, r3
 801e506:	687b      	ldr	r3, [r7, #4]
 801e508:	685b      	ldr	r3, [r3, #4]
 801e50a:	fbb2 f3f3 	udiv	r3, r2, r3
 801e50e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e510:	693b      	ldr	r3, [r7, #16]
 801e512:	2b0f      	cmp	r3, #15
 801e514:	d916      	bls.n	801e544 <UART_SetConfig+0x404>
 801e516:	693b      	ldr	r3, [r7, #16]
 801e518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e51c:	d212      	bcs.n	801e544 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801e51e:	693b      	ldr	r3, [r7, #16]
 801e520:	b29b      	uxth	r3, r3
 801e522:	f023 030f 	bic.w	r3, r3, #15
 801e526:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801e528:	693b      	ldr	r3, [r7, #16]
 801e52a:	085b      	lsrs	r3, r3, #1
 801e52c:	b29b      	uxth	r3, r3
 801e52e:	f003 0307 	and.w	r3, r3, #7
 801e532:	b29a      	uxth	r2, r3
 801e534:	89fb      	ldrh	r3, [r7, #14]
 801e536:	4313      	orrs	r3, r2
 801e538:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801e53a:	687b      	ldr	r3, [r7, #4]
 801e53c:	681b      	ldr	r3, [r3, #0]
 801e53e:	89fa      	ldrh	r2, [r7, #14]
 801e540:	60da      	str	r2, [r3, #12]
 801e542:	e04f      	b.n	801e5e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801e544:	2301      	movs	r3, #1
 801e546:	77bb      	strb	r3, [r7, #30]
 801e548:	e04c      	b.n	801e5e4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 801e54a:	7ffb      	ldrb	r3, [r7, #31]
 801e54c:	2b08      	cmp	r3, #8
 801e54e:	d828      	bhi.n	801e5a2 <UART_SetConfig+0x462>
 801e550:	a201      	add	r2, pc, #4	@ (adr r2, 801e558 <UART_SetConfig+0x418>)
 801e552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e556:	bf00      	nop
 801e558:	0801e57d 	.word	0x0801e57d
 801e55c:	0801e585 	.word	0x0801e585
 801e560:	0801e58d 	.word	0x0801e58d
 801e564:	0801e5a3 	.word	0x0801e5a3
 801e568:	0801e593 	.word	0x0801e593
 801e56c:	0801e5a3 	.word	0x0801e5a3
 801e570:	0801e5a3 	.word	0x0801e5a3
 801e574:	0801e5a3 	.word	0x0801e5a3
 801e578:	0801e59b 	.word	0x0801e59b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e57c:	f7fd fdae 	bl	801c0dc <HAL_RCC_GetPCLK1Freq>
 801e580:	61b8      	str	r0, [r7, #24]
        break;
 801e582:	e013      	b.n	801e5ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e584:	f7fd fdbe 	bl	801c104 <HAL_RCC_GetPCLK2Freq>
 801e588:	61b8      	str	r0, [r7, #24]
        break;
 801e58a:	e00f      	b.n	801e5ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e58c:	4b1d      	ldr	r3, [pc, #116]	@ (801e604 <UART_SetConfig+0x4c4>)
 801e58e:	61bb      	str	r3, [r7, #24]
        break;
 801e590:	e00c      	b.n	801e5ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e592:	f7fd fc91 	bl	801beb8 <HAL_RCC_GetSysClockFreq>
 801e596:	61b8      	str	r0, [r7, #24]
        break;
 801e598:	e008      	b.n	801e5ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e59a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801e59e:	61bb      	str	r3, [r7, #24]
        break;
 801e5a0:	e004      	b.n	801e5ac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 801e5a2:	2300      	movs	r3, #0
 801e5a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801e5a6:	2301      	movs	r3, #1
 801e5a8:	77bb      	strb	r3, [r7, #30]
        break;
 801e5aa:	bf00      	nop
    }

    if (pclk != 0U)
 801e5ac:	69bb      	ldr	r3, [r7, #24]
 801e5ae:	2b00      	cmp	r3, #0
 801e5b0:	d018      	beq.n	801e5e4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801e5b2:	687b      	ldr	r3, [r7, #4]
 801e5b4:	685b      	ldr	r3, [r3, #4]
 801e5b6:	085a      	lsrs	r2, r3, #1
 801e5b8:	69bb      	ldr	r3, [r7, #24]
 801e5ba:	441a      	add	r2, r3
 801e5bc:	687b      	ldr	r3, [r7, #4]
 801e5be:	685b      	ldr	r3, [r3, #4]
 801e5c0:	fbb2 f3f3 	udiv	r3, r2, r3
 801e5c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e5c6:	693b      	ldr	r3, [r7, #16]
 801e5c8:	2b0f      	cmp	r3, #15
 801e5ca:	d909      	bls.n	801e5e0 <UART_SetConfig+0x4a0>
 801e5cc:	693b      	ldr	r3, [r7, #16]
 801e5ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e5d2:	d205      	bcs.n	801e5e0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801e5d4:	693b      	ldr	r3, [r7, #16]
 801e5d6:	b29a      	uxth	r2, r3
 801e5d8:	687b      	ldr	r3, [r7, #4]
 801e5da:	681b      	ldr	r3, [r3, #0]
 801e5dc:	60da      	str	r2, [r3, #12]
 801e5de:	e001      	b.n	801e5e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801e5e0:	2301      	movs	r3, #1
 801e5e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801e5e4:	687b      	ldr	r3, [r7, #4]
 801e5e6:	2200      	movs	r2, #0
 801e5e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801e5ea:	687b      	ldr	r3, [r7, #4]
 801e5ec:	2200      	movs	r2, #0
 801e5ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801e5f0:	7fbb      	ldrb	r3, [r7, #30]
}
 801e5f2:	4618      	mov	r0, r3
 801e5f4:	3720      	adds	r7, #32
 801e5f6:	46bd      	mov	sp, r7
 801e5f8:	bd80      	pop	{r7, pc}
 801e5fa:	bf00      	nop
 801e5fc:	40007c00 	.word	0x40007c00
 801e600:	40023800 	.word	0x40023800
 801e604:	00f42400 	.word	0x00f42400

0801e608 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801e608:	b480      	push	{r7}
 801e60a:	b083      	sub	sp, #12
 801e60c:	af00      	add	r7, sp, #0
 801e60e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801e610:	687b      	ldr	r3, [r7, #4]
 801e612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e614:	f003 0308 	and.w	r3, r3, #8
 801e618:	2b00      	cmp	r3, #0
 801e61a:	d00a      	beq.n	801e632 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801e61c:	687b      	ldr	r3, [r7, #4]
 801e61e:	681b      	ldr	r3, [r3, #0]
 801e620:	685b      	ldr	r3, [r3, #4]
 801e622:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801e626:	687b      	ldr	r3, [r7, #4]
 801e628:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801e62a:	687b      	ldr	r3, [r7, #4]
 801e62c:	681b      	ldr	r3, [r3, #0]
 801e62e:	430a      	orrs	r2, r1
 801e630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801e632:	687b      	ldr	r3, [r7, #4]
 801e634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e636:	f003 0301 	and.w	r3, r3, #1
 801e63a:	2b00      	cmp	r3, #0
 801e63c:	d00a      	beq.n	801e654 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801e63e:	687b      	ldr	r3, [r7, #4]
 801e640:	681b      	ldr	r3, [r3, #0]
 801e642:	685b      	ldr	r3, [r3, #4]
 801e644:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801e648:	687b      	ldr	r3, [r7, #4]
 801e64a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801e64c:	687b      	ldr	r3, [r7, #4]
 801e64e:	681b      	ldr	r3, [r3, #0]
 801e650:	430a      	orrs	r2, r1
 801e652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801e654:	687b      	ldr	r3, [r7, #4]
 801e656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e658:	f003 0302 	and.w	r3, r3, #2
 801e65c:	2b00      	cmp	r3, #0
 801e65e:	d00a      	beq.n	801e676 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801e660:	687b      	ldr	r3, [r7, #4]
 801e662:	681b      	ldr	r3, [r3, #0]
 801e664:	685b      	ldr	r3, [r3, #4]
 801e666:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801e66a:	687b      	ldr	r3, [r7, #4]
 801e66c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e66e:	687b      	ldr	r3, [r7, #4]
 801e670:	681b      	ldr	r3, [r3, #0]
 801e672:	430a      	orrs	r2, r1
 801e674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801e676:	687b      	ldr	r3, [r7, #4]
 801e678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e67a:	f003 0304 	and.w	r3, r3, #4
 801e67e:	2b00      	cmp	r3, #0
 801e680:	d00a      	beq.n	801e698 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801e682:	687b      	ldr	r3, [r7, #4]
 801e684:	681b      	ldr	r3, [r3, #0]
 801e686:	685b      	ldr	r3, [r3, #4]
 801e688:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801e68c:	687b      	ldr	r3, [r7, #4]
 801e68e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801e690:	687b      	ldr	r3, [r7, #4]
 801e692:	681b      	ldr	r3, [r3, #0]
 801e694:	430a      	orrs	r2, r1
 801e696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801e698:	687b      	ldr	r3, [r7, #4]
 801e69a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e69c:	f003 0310 	and.w	r3, r3, #16
 801e6a0:	2b00      	cmp	r3, #0
 801e6a2:	d00a      	beq.n	801e6ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801e6a4:	687b      	ldr	r3, [r7, #4]
 801e6a6:	681b      	ldr	r3, [r3, #0]
 801e6a8:	689b      	ldr	r3, [r3, #8]
 801e6aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801e6ae:	687b      	ldr	r3, [r7, #4]
 801e6b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e6b2:	687b      	ldr	r3, [r7, #4]
 801e6b4:	681b      	ldr	r3, [r3, #0]
 801e6b6:	430a      	orrs	r2, r1
 801e6b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801e6ba:	687b      	ldr	r3, [r7, #4]
 801e6bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e6be:	f003 0320 	and.w	r3, r3, #32
 801e6c2:	2b00      	cmp	r3, #0
 801e6c4:	d00a      	beq.n	801e6dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801e6c6:	687b      	ldr	r3, [r7, #4]
 801e6c8:	681b      	ldr	r3, [r3, #0]
 801e6ca:	689b      	ldr	r3, [r3, #8]
 801e6cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801e6d0:	687b      	ldr	r3, [r7, #4]
 801e6d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801e6d4:	687b      	ldr	r3, [r7, #4]
 801e6d6:	681b      	ldr	r3, [r3, #0]
 801e6d8:	430a      	orrs	r2, r1
 801e6da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801e6dc:	687b      	ldr	r3, [r7, #4]
 801e6de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e6e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e6e4:	2b00      	cmp	r3, #0
 801e6e6:	d01a      	beq.n	801e71e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801e6e8:	687b      	ldr	r3, [r7, #4]
 801e6ea:	681b      	ldr	r3, [r3, #0]
 801e6ec:	685b      	ldr	r3, [r3, #4]
 801e6ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801e6f2:	687b      	ldr	r3, [r7, #4]
 801e6f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e6f6:	687b      	ldr	r3, [r7, #4]
 801e6f8:	681b      	ldr	r3, [r3, #0]
 801e6fa:	430a      	orrs	r2, r1
 801e6fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801e6fe:	687b      	ldr	r3, [r7, #4]
 801e700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e702:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801e706:	d10a      	bne.n	801e71e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801e708:	687b      	ldr	r3, [r7, #4]
 801e70a:	681b      	ldr	r3, [r3, #0]
 801e70c:	685b      	ldr	r3, [r3, #4]
 801e70e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801e712:	687b      	ldr	r3, [r7, #4]
 801e714:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801e716:	687b      	ldr	r3, [r7, #4]
 801e718:	681b      	ldr	r3, [r3, #0]
 801e71a:	430a      	orrs	r2, r1
 801e71c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801e71e:	687b      	ldr	r3, [r7, #4]
 801e720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801e726:	2b00      	cmp	r3, #0
 801e728:	d00a      	beq.n	801e740 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801e72a:	687b      	ldr	r3, [r7, #4]
 801e72c:	681b      	ldr	r3, [r3, #0]
 801e72e:	685b      	ldr	r3, [r3, #4]
 801e730:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801e734:	687b      	ldr	r3, [r7, #4]
 801e736:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801e738:	687b      	ldr	r3, [r7, #4]
 801e73a:	681b      	ldr	r3, [r3, #0]
 801e73c:	430a      	orrs	r2, r1
 801e73e:	605a      	str	r2, [r3, #4]
  }
}
 801e740:	bf00      	nop
 801e742:	370c      	adds	r7, #12
 801e744:	46bd      	mov	sp, r7
 801e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e74a:	4770      	bx	lr

0801e74c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801e74c:	b580      	push	{r7, lr}
 801e74e:	b098      	sub	sp, #96	@ 0x60
 801e750:	af02      	add	r7, sp, #8
 801e752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e754:	687b      	ldr	r3, [r7, #4]
 801e756:	2200      	movs	r2, #0
 801e758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801e75c:	f7f9 ff34 	bl	80185c8 <HAL_GetTick>
 801e760:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801e762:	687b      	ldr	r3, [r7, #4]
 801e764:	681b      	ldr	r3, [r3, #0]
 801e766:	681b      	ldr	r3, [r3, #0]
 801e768:	f003 0308 	and.w	r3, r3, #8
 801e76c:	2b08      	cmp	r3, #8
 801e76e:	d12e      	bne.n	801e7ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e770:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801e774:	9300      	str	r3, [sp, #0]
 801e776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e778:	2200      	movs	r2, #0
 801e77a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801e77e:	6878      	ldr	r0, [r7, #4]
 801e780:	f000 f88c 	bl	801e89c <UART_WaitOnFlagUntilTimeout>
 801e784:	4603      	mov	r3, r0
 801e786:	2b00      	cmp	r3, #0
 801e788:	d021      	beq.n	801e7ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801e78a:	687b      	ldr	r3, [r7, #4]
 801e78c:	681b      	ldr	r3, [r3, #0]
 801e78e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e792:	e853 3f00 	ldrex	r3, [r3]
 801e796:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801e798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e79a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801e79e:	653b      	str	r3, [r7, #80]	@ 0x50
 801e7a0:	687b      	ldr	r3, [r7, #4]
 801e7a2:	681b      	ldr	r3, [r3, #0]
 801e7a4:	461a      	mov	r2, r3
 801e7a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e7a8:	647b      	str	r3, [r7, #68]	@ 0x44
 801e7aa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e7ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801e7ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801e7b0:	e841 2300 	strex	r3, r2, [r1]
 801e7b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801e7b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e7b8:	2b00      	cmp	r3, #0
 801e7ba:	d1e6      	bne.n	801e78a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801e7bc:	687b      	ldr	r3, [r7, #4]
 801e7be:	2220      	movs	r2, #32
 801e7c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801e7c2:	687b      	ldr	r3, [r7, #4]
 801e7c4:	2200      	movs	r2, #0
 801e7c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e7ca:	2303      	movs	r3, #3
 801e7cc:	e062      	b.n	801e894 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801e7ce:	687b      	ldr	r3, [r7, #4]
 801e7d0:	681b      	ldr	r3, [r3, #0]
 801e7d2:	681b      	ldr	r3, [r3, #0]
 801e7d4:	f003 0304 	and.w	r3, r3, #4
 801e7d8:	2b04      	cmp	r3, #4
 801e7da:	d149      	bne.n	801e870 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e7dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801e7e0:	9300      	str	r3, [sp, #0]
 801e7e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e7e4:	2200      	movs	r2, #0
 801e7e6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801e7ea:	6878      	ldr	r0, [r7, #4]
 801e7ec:	f000 f856 	bl	801e89c <UART_WaitOnFlagUntilTimeout>
 801e7f0:	4603      	mov	r3, r0
 801e7f2:	2b00      	cmp	r3, #0
 801e7f4:	d03c      	beq.n	801e870 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e7f6:	687b      	ldr	r3, [r7, #4]
 801e7f8:	681b      	ldr	r3, [r3, #0]
 801e7fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e7fe:	e853 3f00 	ldrex	r3, [r3]
 801e802:	623b      	str	r3, [r7, #32]
   return(result);
 801e804:	6a3b      	ldr	r3, [r7, #32]
 801e806:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801e80a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801e80c:	687b      	ldr	r3, [r7, #4]
 801e80e:	681b      	ldr	r3, [r3, #0]
 801e810:	461a      	mov	r2, r3
 801e812:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e814:	633b      	str	r3, [r7, #48]	@ 0x30
 801e816:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e818:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801e81a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e81c:	e841 2300 	strex	r3, r2, [r1]
 801e820:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801e822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e824:	2b00      	cmp	r3, #0
 801e826:	d1e6      	bne.n	801e7f6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e828:	687b      	ldr	r3, [r7, #4]
 801e82a:	681b      	ldr	r3, [r3, #0]
 801e82c:	3308      	adds	r3, #8
 801e82e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e830:	693b      	ldr	r3, [r7, #16]
 801e832:	e853 3f00 	ldrex	r3, [r3]
 801e836:	60fb      	str	r3, [r7, #12]
   return(result);
 801e838:	68fb      	ldr	r3, [r7, #12]
 801e83a:	f023 0301 	bic.w	r3, r3, #1
 801e83e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e840:	687b      	ldr	r3, [r7, #4]
 801e842:	681b      	ldr	r3, [r3, #0]
 801e844:	3308      	adds	r3, #8
 801e846:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801e848:	61fa      	str	r2, [r7, #28]
 801e84a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e84c:	69b9      	ldr	r1, [r7, #24]
 801e84e:	69fa      	ldr	r2, [r7, #28]
 801e850:	e841 2300 	strex	r3, r2, [r1]
 801e854:	617b      	str	r3, [r7, #20]
   return(result);
 801e856:	697b      	ldr	r3, [r7, #20]
 801e858:	2b00      	cmp	r3, #0
 801e85a:	d1e5      	bne.n	801e828 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 801e85c:	687b      	ldr	r3, [r7, #4]
 801e85e:	2220      	movs	r2, #32
 801e860:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 801e864:	687b      	ldr	r3, [r7, #4]
 801e866:	2200      	movs	r2, #0
 801e868:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e86c:	2303      	movs	r3, #3
 801e86e:	e011      	b.n	801e894 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801e870:	687b      	ldr	r3, [r7, #4]
 801e872:	2220      	movs	r2, #32
 801e874:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801e876:	687b      	ldr	r3, [r7, #4]
 801e878:	2220      	movs	r2, #32
 801e87a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e87e:	687b      	ldr	r3, [r7, #4]
 801e880:	2200      	movs	r2, #0
 801e882:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e884:	687b      	ldr	r3, [r7, #4]
 801e886:	2200      	movs	r2, #0
 801e888:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801e88a:	687b      	ldr	r3, [r7, #4]
 801e88c:	2200      	movs	r2, #0
 801e88e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 801e892:	2300      	movs	r3, #0
}
 801e894:	4618      	mov	r0, r3
 801e896:	3758      	adds	r7, #88	@ 0x58
 801e898:	46bd      	mov	sp, r7
 801e89a:	bd80      	pop	{r7, pc}

0801e89c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801e89c:	b580      	push	{r7, lr}
 801e89e:	b084      	sub	sp, #16
 801e8a0:	af00      	add	r7, sp, #0
 801e8a2:	60f8      	str	r0, [r7, #12]
 801e8a4:	60b9      	str	r1, [r7, #8]
 801e8a6:	603b      	str	r3, [r7, #0]
 801e8a8:	4613      	mov	r3, r2
 801e8aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e8ac:	e04f      	b.n	801e94e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801e8ae:	69bb      	ldr	r3, [r7, #24]
 801e8b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e8b4:	d04b      	beq.n	801e94e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801e8b6:	f7f9 fe87 	bl	80185c8 <HAL_GetTick>
 801e8ba:	4602      	mov	r2, r0
 801e8bc:	683b      	ldr	r3, [r7, #0]
 801e8be:	1ad3      	subs	r3, r2, r3
 801e8c0:	69ba      	ldr	r2, [r7, #24]
 801e8c2:	429a      	cmp	r2, r3
 801e8c4:	d302      	bcc.n	801e8cc <UART_WaitOnFlagUntilTimeout+0x30>
 801e8c6:	69bb      	ldr	r3, [r7, #24]
 801e8c8:	2b00      	cmp	r3, #0
 801e8ca:	d101      	bne.n	801e8d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801e8cc:	2303      	movs	r3, #3
 801e8ce:	e04e      	b.n	801e96e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801e8d0:	68fb      	ldr	r3, [r7, #12]
 801e8d2:	681b      	ldr	r3, [r3, #0]
 801e8d4:	681b      	ldr	r3, [r3, #0]
 801e8d6:	f003 0304 	and.w	r3, r3, #4
 801e8da:	2b00      	cmp	r3, #0
 801e8dc:	d037      	beq.n	801e94e <UART_WaitOnFlagUntilTimeout+0xb2>
 801e8de:	68bb      	ldr	r3, [r7, #8]
 801e8e0:	2b80      	cmp	r3, #128	@ 0x80
 801e8e2:	d034      	beq.n	801e94e <UART_WaitOnFlagUntilTimeout+0xb2>
 801e8e4:	68bb      	ldr	r3, [r7, #8]
 801e8e6:	2b40      	cmp	r3, #64	@ 0x40
 801e8e8:	d031      	beq.n	801e94e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801e8ea:	68fb      	ldr	r3, [r7, #12]
 801e8ec:	681b      	ldr	r3, [r3, #0]
 801e8ee:	69db      	ldr	r3, [r3, #28]
 801e8f0:	f003 0308 	and.w	r3, r3, #8
 801e8f4:	2b08      	cmp	r3, #8
 801e8f6:	d110      	bne.n	801e91a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801e8f8:	68fb      	ldr	r3, [r7, #12]
 801e8fa:	681b      	ldr	r3, [r3, #0]
 801e8fc:	2208      	movs	r2, #8
 801e8fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801e900:	68f8      	ldr	r0, [r7, #12]
 801e902:	f000 f838 	bl	801e976 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801e906:	68fb      	ldr	r3, [r7, #12]
 801e908:	2208      	movs	r2, #8
 801e90a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801e90e:	68fb      	ldr	r3, [r7, #12]
 801e910:	2200      	movs	r2, #0
 801e912:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 801e916:	2301      	movs	r3, #1
 801e918:	e029      	b.n	801e96e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801e91a:	68fb      	ldr	r3, [r7, #12]
 801e91c:	681b      	ldr	r3, [r3, #0]
 801e91e:	69db      	ldr	r3, [r3, #28]
 801e920:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801e924:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801e928:	d111      	bne.n	801e94e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801e92a:	68fb      	ldr	r3, [r7, #12]
 801e92c:	681b      	ldr	r3, [r3, #0]
 801e92e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801e932:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801e934:	68f8      	ldr	r0, [r7, #12]
 801e936:	f000 f81e 	bl	801e976 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801e93a:	68fb      	ldr	r3, [r7, #12]
 801e93c:	2220      	movs	r2, #32
 801e93e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801e942:	68fb      	ldr	r3, [r7, #12]
 801e944:	2200      	movs	r2, #0
 801e946:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 801e94a:	2303      	movs	r3, #3
 801e94c:	e00f      	b.n	801e96e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e94e:	68fb      	ldr	r3, [r7, #12]
 801e950:	681b      	ldr	r3, [r3, #0]
 801e952:	69da      	ldr	r2, [r3, #28]
 801e954:	68bb      	ldr	r3, [r7, #8]
 801e956:	4013      	ands	r3, r2
 801e958:	68ba      	ldr	r2, [r7, #8]
 801e95a:	429a      	cmp	r2, r3
 801e95c:	bf0c      	ite	eq
 801e95e:	2301      	moveq	r3, #1
 801e960:	2300      	movne	r3, #0
 801e962:	b2db      	uxtb	r3, r3
 801e964:	461a      	mov	r2, r3
 801e966:	79fb      	ldrb	r3, [r7, #7]
 801e968:	429a      	cmp	r2, r3
 801e96a:	d0a0      	beq.n	801e8ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801e96c:	2300      	movs	r3, #0
}
 801e96e:	4618      	mov	r0, r3
 801e970:	3710      	adds	r7, #16
 801e972:	46bd      	mov	sp, r7
 801e974:	bd80      	pop	{r7, pc}

0801e976 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801e976:	b480      	push	{r7}
 801e978:	b095      	sub	sp, #84	@ 0x54
 801e97a:	af00      	add	r7, sp, #0
 801e97c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e97e:	687b      	ldr	r3, [r7, #4]
 801e980:	681b      	ldr	r3, [r3, #0]
 801e982:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e986:	e853 3f00 	ldrex	r3, [r3]
 801e98a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801e98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e98e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801e992:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801e994:	687b      	ldr	r3, [r7, #4]
 801e996:	681b      	ldr	r3, [r3, #0]
 801e998:	461a      	mov	r2, r3
 801e99a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e99c:	643b      	str	r3, [r7, #64]	@ 0x40
 801e99e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e9a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801e9a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801e9a4:	e841 2300 	strex	r3, r2, [r1]
 801e9a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801e9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e9ac:	2b00      	cmp	r3, #0
 801e9ae:	d1e6      	bne.n	801e97e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e9b0:	687b      	ldr	r3, [r7, #4]
 801e9b2:	681b      	ldr	r3, [r3, #0]
 801e9b4:	3308      	adds	r3, #8
 801e9b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e9b8:	6a3b      	ldr	r3, [r7, #32]
 801e9ba:	e853 3f00 	ldrex	r3, [r3]
 801e9be:	61fb      	str	r3, [r7, #28]
   return(result);
 801e9c0:	69fb      	ldr	r3, [r7, #28]
 801e9c2:	f023 0301 	bic.w	r3, r3, #1
 801e9c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e9c8:	687b      	ldr	r3, [r7, #4]
 801e9ca:	681b      	ldr	r3, [r3, #0]
 801e9cc:	3308      	adds	r3, #8
 801e9ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801e9d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801e9d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e9d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801e9d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e9d8:	e841 2300 	strex	r3, r2, [r1]
 801e9dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801e9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9e0:	2b00      	cmp	r3, #0
 801e9e2:	d1e5      	bne.n	801e9b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e9e4:	687b      	ldr	r3, [r7, #4]
 801e9e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e9e8:	2b01      	cmp	r3, #1
 801e9ea:	d118      	bne.n	801ea1e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e9ec:	687b      	ldr	r3, [r7, #4]
 801e9ee:	681b      	ldr	r3, [r3, #0]
 801e9f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e9f2:	68fb      	ldr	r3, [r7, #12]
 801e9f4:	e853 3f00 	ldrex	r3, [r3]
 801e9f8:	60bb      	str	r3, [r7, #8]
   return(result);
 801e9fa:	68bb      	ldr	r3, [r7, #8]
 801e9fc:	f023 0310 	bic.w	r3, r3, #16
 801ea00:	647b      	str	r3, [r7, #68]	@ 0x44
 801ea02:	687b      	ldr	r3, [r7, #4]
 801ea04:	681b      	ldr	r3, [r3, #0]
 801ea06:	461a      	mov	r2, r3
 801ea08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ea0a:	61bb      	str	r3, [r7, #24]
 801ea0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ea0e:	6979      	ldr	r1, [r7, #20]
 801ea10:	69ba      	ldr	r2, [r7, #24]
 801ea12:	e841 2300 	strex	r3, r2, [r1]
 801ea16:	613b      	str	r3, [r7, #16]
   return(result);
 801ea18:	693b      	ldr	r3, [r7, #16]
 801ea1a:	2b00      	cmp	r3, #0
 801ea1c:	d1e6      	bne.n	801e9ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801ea1e:	687b      	ldr	r3, [r7, #4]
 801ea20:	2220      	movs	r2, #32
 801ea22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ea26:	687b      	ldr	r3, [r7, #4]
 801ea28:	2200      	movs	r2, #0
 801ea2a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801ea2c:	687b      	ldr	r3, [r7, #4]
 801ea2e:	2200      	movs	r2, #0
 801ea30:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801ea32:	bf00      	nop
 801ea34:	3754      	adds	r7, #84	@ 0x54
 801ea36:	46bd      	mov	sp, r7
 801ea38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea3c:	4770      	bx	lr
	...

0801ea40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801ea40:	b084      	sub	sp, #16
 801ea42:	b580      	push	{r7, lr}
 801ea44:	b084      	sub	sp, #16
 801ea46:	af00      	add	r7, sp, #0
 801ea48:	6078      	str	r0, [r7, #4]
 801ea4a:	f107 001c 	add.w	r0, r7, #28
 801ea4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801ea52:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801ea56:	2b01      	cmp	r3, #1
 801ea58:	d121      	bne.n	801ea9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801ea5a:	687b      	ldr	r3, [r7, #4]
 801ea5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ea5e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801ea62:	687b      	ldr	r3, [r7, #4]
 801ea64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801ea66:	687b      	ldr	r3, [r7, #4]
 801ea68:	68da      	ldr	r2, [r3, #12]
 801ea6a:	4b21      	ldr	r3, [pc, #132]	@ (801eaf0 <USB_CoreInit+0xb0>)
 801ea6c:	4013      	ands	r3, r2
 801ea6e:	687a      	ldr	r2, [r7, #4]
 801ea70:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801ea72:	687b      	ldr	r3, [r7, #4]
 801ea74:	68db      	ldr	r3, [r3, #12]
 801ea76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801ea7a:	687b      	ldr	r3, [r7, #4]
 801ea7c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801ea7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801ea82:	2b01      	cmp	r3, #1
 801ea84:	d105      	bne.n	801ea92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801ea86:	687b      	ldr	r3, [r7, #4]
 801ea88:	68db      	ldr	r3, [r3, #12]
 801ea8a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801ea8e:	687b      	ldr	r3, [r7, #4]
 801ea90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801ea92:	6878      	ldr	r0, [r7, #4]
 801ea94:	f000 f9d4 	bl	801ee40 <USB_CoreReset>
 801ea98:	4603      	mov	r3, r0
 801ea9a:	73fb      	strb	r3, [r7, #15]
 801ea9c:	e010      	b.n	801eac0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801ea9e:	687b      	ldr	r3, [r7, #4]
 801eaa0:	68db      	ldr	r3, [r3, #12]
 801eaa2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801eaa6:	687b      	ldr	r3, [r7, #4]
 801eaa8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801eaaa:	6878      	ldr	r0, [r7, #4]
 801eaac:	f000 f9c8 	bl	801ee40 <USB_CoreReset>
 801eab0:	4603      	mov	r3, r0
 801eab2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801eab4:	687b      	ldr	r3, [r7, #4]
 801eab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eab8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801eabc:	687b      	ldr	r3, [r7, #4]
 801eabe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 801eac0:	7fbb      	ldrb	r3, [r7, #30]
 801eac2:	2b01      	cmp	r3, #1
 801eac4:	d10b      	bne.n	801eade <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801eac6:	687b      	ldr	r3, [r7, #4]
 801eac8:	689b      	ldr	r3, [r3, #8]
 801eaca:	f043 0206 	orr.w	r2, r3, #6
 801eace:	687b      	ldr	r3, [r7, #4]
 801ead0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801ead2:	687b      	ldr	r3, [r7, #4]
 801ead4:	689b      	ldr	r3, [r3, #8]
 801ead6:	f043 0220 	orr.w	r2, r3, #32
 801eada:	687b      	ldr	r3, [r7, #4]
 801eadc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801eade:	7bfb      	ldrb	r3, [r7, #15]
}
 801eae0:	4618      	mov	r0, r3
 801eae2:	3710      	adds	r7, #16
 801eae4:	46bd      	mov	sp, r7
 801eae6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801eaea:	b004      	add	sp, #16
 801eaec:	4770      	bx	lr
 801eaee:	bf00      	nop
 801eaf0:	ffbdffbf 	.word	0xffbdffbf

0801eaf4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801eaf4:	b480      	push	{r7}
 801eaf6:	b083      	sub	sp, #12
 801eaf8:	af00      	add	r7, sp, #0
 801eafa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801eafc:	687b      	ldr	r3, [r7, #4]
 801eafe:	689b      	ldr	r3, [r3, #8]
 801eb00:	f043 0201 	orr.w	r2, r3, #1
 801eb04:	687b      	ldr	r3, [r7, #4]
 801eb06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801eb08:	2300      	movs	r3, #0
}
 801eb0a:	4618      	mov	r0, r3
 801eb0c:	370c      	adds	r7, #12
 801eb0e:	46bd      	mov	sp, r7
 801eb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb14:	4770      	bx	lr

0801eb16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801eb16:	b480      	push	{r7}
 801eb18:	b083      	sub	sp, #12
 801eb1a:	af00      	add	r7, sp, #0
 801eb1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801eb1e:	687b      	ldr	r3, [r7, #4]
 801eb20:	689b      	ldr	r3, [r3, #8]
 801eb22:	f023 0201 	bic.w	r2, r3, #1
 801eb26:	687b      	ldr	r3, [r7, #4]
 801eb28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801eb2a:	2300      	movs	r3, #0
}
 801eb2c:	4618      	mov	r0, r3
 801eb2e:	370c      	adds	r7, #12
 801eb30:	46bd      	mov	sp, r7
 801eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb36:	4770      	bx	lr

0801eb38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801eb38:	b580      	push	{r7, lr}
 801eb3a:	b084      	sub	sp, #16
 801eb3c:	af00      	add	r7, sp, #0
 801eb3e:	6078      	str	r0, [r7, #4]
 801eb40:	460b      	mov	r3, r1
 801eb42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801eb44:	2300      	movs	r3, #0
 801eb46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801eb48:	687b      	ldr	r3, [r7, #4]
 801eb4a:	68db      	ldr	r3, [r3, #12]
 801eb4c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 801eb50:	687b      	ldr	r3, [r7, #4]
 801eb52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801eb54:	78fb      	ldrb	r3, [r7, #3]
 801eb56:	2b01      	cmp	r3, #1
 801eb58:	d115      	bne.n	801eb86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801eb5a:	687b      	ldr	r3, [r7, #4]
 801eb5c:	68db      	ldr	r3, [r3, #12]
 801eb5e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801eb62:	687b      	ldr	r3, [r7, #4]
 801eb64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801eb66:	200a      	movs	r0, #10
 801eb68:	f7f9 fd3a 	bl	80185e0 <HAL_Delay>
      ms += 10U;
 801eb6c:	68fb      	ldr	r3, [r7, #12]
 801eb6e:	330a      	adds	r3, #10
 801eb70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801eb72:	6878      	ldr	r0, [r7, #4]
 801eb74:	f000 f956 	bl	801ee24 <USB_GetMode>
 801eb78:	4603      	mov	r3, r0
 801eb7a:	2b01      	cmp	r3, #1
 801eb7c:	d01e      	beq.n	801ebbc <USB_SetCurrentMode+0x84>
 801eb7e:	68fb      	ldr	r3, [r7, #12]
 801eb80:	2bc7      	cmp	r3, #199	@ 0xc7
 801eb82:	d9f0      	bls.n	801eb66 <USB_SetCurrentMode+0x2e>
 801eb84:	e01a      	b.n	801ebbc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801eb86:	78fb      	ldrb	r3, [r7, #3]
 801eb88:	2b00      	cmp	r3, #0
 801eb8a:	d115      	bne.n	801ebb8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801eb8c:	687b      	ldr	r3, [r7, #4]
 801eb8e:	68db      	ldr	r3, [r3, #12]
 801eb90:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801eb94:	687b      	ldr	r3, [r7, #4]
 801eb96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801eb98:	200a      	movs	r0, #10
 801eb9a:	f7f9 fd21 	bl	80185e0 <HAL_Delay>
      ms += 10U;
 801eb9e:	68fb      	ldr	r3, [r7, #12]
 801eba0:	330a      	adds	r3, #10
 801eba2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801eba4:	6878      	ldr	r0, [r7, #4]
 801eba6:	f000 f93d 	bl	801ee24 <USB_GetMode>
 801ebaa:	4603      	mov	r3, r0
 801ebac:	2b00      	cmp	r3, #0
 801ebae:	d005      	beq.n	801ebbc <USB_SetCurrentMode+0x84>
 801ebb0:	68fb      	ldr	r3, [r7, #12]
 801ebb2:	2bc7      	cmp	r3, #199	@ 0xc7
 801ebb4:	d9f0      	bls.n	801eb98 <USB_SetCurrentMode+0x60>
 801ebb6:	e001      	b.n	801ebbc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801ebb8:	2301      	movs	r3, #1
 801ebba:	e005      	b.n	801ebc8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 801ebbc:	68fb      	ldr	r3, [r7, #12]
 801ebbe:	2bc8      	cmp	r3, #200	@ 0xc8
 801ebc0:	d101      	bne.n	801ebc6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801ebc2:	2301      	movs	r3, #1
 801ebc4:	e000      	b.n	801ebc8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801ebc6:	2300      	movs	r3, #0
}
 801ebc8:	4618      	mov	r0, r3
 801ebca:	3710      	adds	r7, #16
 801ebcc:	46bd      	mov	sp, r7
 801ebce:	bd80      	pop	{r7, pc}

0801ebd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801ebd0:	b480      	push	{r7}
 801ebd2:	b085      	sub	sp, #20
 801ebd4:	af00      	add	r7, sp, #0
 801ebd6:	6078      	str	r0, [r7, #4]
 801ebd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801ebda:	2300      	movs	r3, #0
 801ebdc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801ebde:	68fb      	ldr	r3, [r7, #12]
 801ebe0:	3301      	adds	r3, #1
 801ebe2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801ebe4:	68fb      	ldr	r3, [r7, #12]
 801ebe6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801ebea:	d901      	bls.n	801ebf0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801ebec:	2303      	movs	r3, #3
 801ebee:	e01b      	b.n	801ec28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801ebf0:	687b      	ldr	r3, [r7, #4]
 801ebf2:	691b      	ldr	r3, [r3, #16]
 801ebf4:	2b00      	cmp	r3, #0
 801ebf6:	daf2      	bge.n	801ebde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801ebf8:	2300      	movs	r3, #0
 801ebfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801ebfc:	683b      	ldr	r3, [r7, #0]
 801ebfe:	019b      	lsls	r3, r3, #6
 801ec00:	f043 0220 	orr.w	r2, r3, #32
 801ec04:	687b      	ldr	r3, [r7, #4]
 801ec06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801ec08:	68fb      	ldr	r3, [r7, #12]
 801ec0a:	3301      	adds	r3, #1
 801ec0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801ec0e:	68fb      	ldr	r3, [r7, #12]
 801ec10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801ec14:	d901      	bls.n	801ec1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801ec16:	2303      	movs	r3, #3
 801ec18:	e006      	b.n	801ec28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801ec1a:	687b      	ldr	r3, [r7, #4]
 801ec1c:	691b      	ldr	r3, [r3, #16]
 801ec1e:	f003 0320 	and.w	r3, r3, #32
 801ec22:	2b20      	cmp	r3, #32
 801ec24:	d0f0      	beq.n	801ec08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801ec26:	2300      	movs	r3, #0
}
 801ec28:	4618      	mov	r0, r3
 801ec2a:	3714      	adds	r7, #20
 801ec2c:	46bd      	mov	sp, r7
 801ec2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec32:	4770      	bx	lr

0801ec34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801ec34:	b480      	push	{r7}
 801ec36:	b085      	sub	sp, #20
 801ec38:	af00      	add	r7, sp, #0
 801ec3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801ec3c:	2300      	movs	r3, #0
 801ec3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801ec40:	68fb      	ldr	r3, [r7, #12]
 801ec42:	3301      	adds	r3, #1
 801ec44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801ec46:	68fb      	ldr	r3, [r7, #12]
 801ec48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801ec4c:	d901      	bls.n	801ec52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801ec4e:	2303      	movs	r3, #3
 801ec50:	e018      	b.n	801ec84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801ec52:	687b      	ldr	r3, [r7, #4]
 801ec54:	691b      	ldr	r3, [r3, #16]
 801ec56:	2b00      	cmp	r3, #0
 801ec58:	daf2      	bge.n	801ec40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801ec5a:	2300      	movs	r3, #0
 801ec5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801ec5e:	687b      	ldr	r3, [r7, #4]
 801ec60:	2210      	movs	r2, #16
 801ec62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801ec64:	68fb      	ldr	r3, [r7, #12]
 801ec66:	3301      	adds	r3, #1
 801ec68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801ec6a:	68fb      	ldr	r3, [r7, #12]
 801ec6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801ec70:	d901      	bls.n	801ec76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801ec72:	2303      	movs	r3, #3
 801ec74:	e006      	b.n	801ec84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801ec76:	687b      	ldr	r3, [r7, #4]
 801ec78:	691b      	ldr	r3, [r3, #16]
 801ec7a:	f003 0310 	and.w	r3, r3, #16
 801ec7e:	2b10      	cmp	r3, #16
 801ec80:	d0f0      	beq.n	801ec64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801ec82:	2300      	movs	r3, #0
}
 801ec84:	4618      	mov	r0, r3
 801ec86:	3714      	adds	r7, #20
 801ec88:	46bd      	mov	sp, r7
 801ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec8e:	4770      	bx	lr

0801ec90 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801ec90:	b480      	push	{r7}
 801ec92:	b089      	sub	sp, #36	@ 0x24
 801ec94:	af00      	add	r7, sp, #0
 801ec96:	60f8      	str	r0, [r7, #12]
 801ec98:	60b9      	str	r1, [r7, #8]
 801ec9a:	4611      	mov	r1, r2
 801ec9c:	461a      	mov	r2, r3
 801ec9e:	460b      	mov	r3, r1
 801eca0:	71fb      	strb	r3, [r7, #7]
 801eca2:	4613      	mov	r3, r2
 801eca4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801eca6:	68fb      	ldr	r3, [r7, #12]
 801eca8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801ecaa:	68bb      	ldr	r3, [r7, #8]
 801ecac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801ecae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801ecb2:	2b00      	cmp	r3, #0
 801ecb4:	d123      	bne.n	801ecfe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801ecb6:	88bb      	ldrh	r3, [r7, #4]
 801ecb8:	3303      	adds	r3, #3
 801ecba:	089b      	lsrs	r3, r3, #2
 801ecbc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801ecbe:	2300      	movs	r3, #0
 801ecc0:	61bb      	str	r3, [r7, #24]
 801ecc2:	e018      	b.n	801ecf6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801ecc4:	79fb      	ldrb	r3, [r7, #7]
 801ecc6:	031a      	lsls	r2, r3, #12
 801ecc8:	697b      	ldr	r3, [r7, #20]
 801ecca:	4413      	add	r3, r2
 801eccc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801ecd0:	461a      	mov	r2, r3
 801ecd2:	69fb      	ldr	r3, [r7, #28]
 801ecd4:	681b      	ldr	r3, [r3, #0]
 801ecd6:	6013      	str	r3, [r2, #0]
      pSrc++;
 801ecd8:	69fb      	ldr	r3, [r7, #28]
 801ecda:	3301      	adds	r3, #1
 801ecdc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801ecde:	69fb      	ldr	r3, [r7, #28]
 801ece0:	3301      	adds	r3, #1
 801ece2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801ece4:	69fb      	ldr	r3, [r7, #28]
 801ece6:	3301      	adds	r3, #1
 801ece8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801ecea:	69fb      	ldr	r3, [r7, #28]
 801ecec:	3301      	adds	r3, #1
 801ecee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801ecf0:	69bb      	ldr	r3, [r7, #24]
 801ecf2:	3301      	adds	r3, #1
 801ecf4:	61bb      	str	r3, [r7, #24]
 801ecf6:	69ba      	ldr	r2, [r7, #24]
 801ecf8:	693b      	ldr	r3, [r7, #16]
 801ecfa:	429a      	cmp	r2, r3
 801ecfc:	d3e2      	bcc.n	801ecc4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801ecfe:	2300      	movs	r3, #0
}
 801ed00:	4618      	mov	r0, r3
 801ed02:	3724      	adds	r7, #36	@ 0x24
 801ed04:	46bd      	mov	sp, r7
 801ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed0a:	4770      	bx	lr

0801ed0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801ed0c:	b480      	push	{r7}
 801ed0e:	b08b      	sub	sp, #44	@ 0x2c
 801ed10:	af00      	add	r7, sp, #0
 801ed12:	60f8      	str	r0, [r7, #12]
 801ed14:	60b9      	str	r1, [r7, #8]
 801ed16:	4613      	mov	r3, r2
 801ed18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ed1a:	68fb      	ldr	r3, [r7, #12]
 801ed1c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801ed1e:	68bb      	ldr	r3, [r7, #8]
 801ed20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801ed22:	88fb      	ldrh	r3, [r7, #6]
 801ed24:	089b      	lsrs	r3, r3, #2
 801ed26:	b29b      	uxth	r3, r3
 801ed28:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801ed2a:	88fb      	ldrh	r3, [r7, #6]
 801ed2c:	f003 0303 	and.w	r3, r3, #3
 801ed30:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801ed32:	2300      	movs	r3, #0
 801ed34:	623b      	str	r3, [r7, #32]
 801ed36:	e014      	b.n	801ed62 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801ed38:	69bb      	ldr	r3, [r7, #24]
 801ed3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801ed3e:	681a      	ldr	r2, [r3, #0]
 801ed40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed42:	601a      	str	r2, [r3, #0]
    pDest++;
 801ed44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed46:	3301      	adds	r3, #1
 801ed48:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801ed4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed4c:	3301      	adds	r3, #1
 801ed4e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801ed50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed52:	3301      	adds	r3, #1
 801ed54:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801ed56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed58:	3301      	adds	r3, #1
 801ed5a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 801ed5c:	6a3b      	ldr	r3, [r7, #32]
 801ed5e:	3301      	adds	r3, #1
 801ed60:	623b      	str	r3, [r7, #32]
 801ed62:	6a3a      	ldr	r2, [r7, #32]
 801ed64:	697b      	ldr	r3, [r7, #20]
 801ed66:	429a      	cmp	r2, r3
 801ed68:	d3e6      	bcc.n	801ed38 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801ed6a:	8bfb      	ldrh	r3, [r7, #30]
 801ed6c:	2b00      	cmp	r3, #0
 801ed6e:	d01e      	beq.n	801edae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801ed70:	2300      	movs	r3, #0
 801ed72:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801ed74:	69bb      	ldr	r3, [r7, #24]
 801ed76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801ed7a:	461a      	mov	r2, r3
 801ed7c:	f107 0310 	add.w	r3, r7, #16
 801ed80:	6812      	ldr	r2, [r2, #0]
 801ed82:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801ed84:	693a      	ldr	r2, [r7, #16]
 801ed86:	6a3b      	ldr	r3, [r7, #32]
 801ed88:	b2db      	uxtb	r3, r3
 801ed8a:	00db      	lsls	r3, r3, #3
 801ed8c:	fa22 f303 	lsr.w	r3, r2, r3
 801ed90:	b2da      	uxtb	r2, r3
 801ed92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed94:	701a      	strb	r2, [r3, #0]
      i++;
 801ed96:	6a3b      	ldr	r3, [r7, #32]
 801ed98:	3301      	adds	r3, #1
 801ed9a:	623b      	str	r3, [r7, #32]
      pDest++;
 801ed9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed9e:	3301      	adds	r3, #1
 801eda0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801eda2:	8bfb      	ldrh	r3, [r7, #30]
 801eda4:	3b01      	subs	r3, #1
 801eda6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801eda8:	8bfb      	ldrh	r3, [r7, #30]
 801edaa:	2b00      	cmp	r3, #0
 801edac:	d1ea      	bne.n	801ed84 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801edae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801edb0:	4618      	mov	r0, r3
 801edb2:	372c      	adds	r7, #44	@ 0x2c
 801edb4:	46bd      	mov	sp, r7
 801edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edba:	4770      	bx	lr

0801edbc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 801edbc:	b480      	push	{r7}
 801edbe:	b085      	sub	sp, #20
 801edc0:	af00      	add	r7, sp, #0
 801edc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801edc4:	687b      	ldr	r3, [r7, #4]
 801edc6:	695b      	ldr	r3, [r3, #20]
 801edc8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801edca:	687b      	ldr	r3, [r7, #4]
 801edcc:	699b      	ldr	r3, [r3, #24]
 801edce:	68fa      	ldr	r2, [r7, #12]
 801edd0:	4013      	ands	r3, r2
 801edd2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801edd4:	68fb      	ldr	r3, [r7, #12]
}
 801edd6:	4618      	mov	r0, r3
 801edd8:	3714      	adds	r7, #20
 801edda:	46bd      	mov	sp, r7
 801eddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ede0:	4770      	bx	lr

0801ede2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 801ede2:	b480      	push	{r7}
 801ede4:	b085      	sub	sp, #20
 801ede6:	af00      	add	r7, sp, #0
 801ede8:	6078      	str	r0, [r7, #4]
 801edea:	460b      	mov	r3, r1
 801edec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801edee:	687b      	ldr	r3, [r7, #4]
 801edf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 801edf2:	78fb      	ldrb	r3, [r7, #3]
 801edf4:	015a      	lsls	r2, r3, #5
 801edf6:	68fb      	ldr	r3, [r7, #12]
 801edf8:	4413      	add	r3, r2
 801edfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801edfe:	689b      	ldr	r3, [r3, #8]
 801ee00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 801ee02:	78fb      	ldrb	r3, [r7, #3]
 801ee04:	015a      	lsls	r2, r3, #5
 801ee06:	68fb      	ldr	r3, [r7, #12]
 801ee08:	4413      	add	r3, r2
 801ee0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801ee0e:	68db      	ldr	r3, [r3, #12]
 801ee10:	68ba      	ldr	r2, [r7, #8]
 801ee12:	4013      	ands	r3, r2
 801ee14:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801ee16:	68bb      	ldr	r3, [r7, #8]
}
 801ee18:	4618      	mov	r0, r3
 801ee1a:	3714      	adds	r7, #20
 801ee1c:	46bd      	mov	sp, r7
 801ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee22:	4770      	bx	lr

0801ee24 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801ee24:	b480      	push	{r7}
 801ee26:	b083      	sub	sp, #12
 801ee28:	af00      	add	r7, sp, #0
 801ee2a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801ee2c:	687b      	ldr	r3, [r7, #4]
 801ee2e:	695b      	ldr	r3, [r3, #20]
 801ee30:	f003 0301 	and.w	r3, r3, #1
}
 801ee34:	4618      	mov	r0, r3
 801ee36:	370c      	adds	r7, #12
 801ee38:	46bd      	mov	sp, r7
 801ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee3e:	4770      	bx	lr

0801ee40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801ee40:	b480      	push	{r7}
 801ee42:	b085      	sub	sp, #20
 801ee44:	af00      	add	r7, sp, #0
 801ee46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801ee48:	2300      	movs	r3, #0
 801ee4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801ee4c:	68fb      	ldr	r3, [r7, #12]
 801ee4e:	3301      	adds	r3, #1
 801ee50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801ee52:	68fb      	ldr	r3, [r7, #12]
 801ee54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801ee58:	d901      	bls.n	801ee5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801ee5a:	2303      	movs	r3, #3
 801ee5c:	e01b      	b.n	801ee96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801ee5e:	687b      	ldr	r3, [r7, #4]
 801ee60:	691b      	ldr	r3, [r3, #16]
 801ee62:	2b00      	cmp	r3, #0
 801ee64:	daf2      	bge.n	801ee4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801ee66:	2300      	movs	r3, #0
 801ee68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801ee6a:	687b      	ldr	r3, [r7, #4]
 801ee6c:	691b      	ldr	r3, [r3, #16]
 801ee6e:	f043 0201 	orr.w	r2, r3, #1
 801ee72:	687b      	ldr	r3, [r7, #4]
 801ee74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801ee76:	68fb      	ldr	r3, [r7, #12]
 801ee78:	3301      	adds	r3, #1
 801ee7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801ee7c:	68fb      	ldr	r3, [r7, #12]
 801ee7e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801ee82:	d901      	bls.n	801ee88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801ee84:	2303      	movs	r3, #3
 801ee86:	e006      	b.n	801ee96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801ee88:	687b      	ldr	r3, [r7, #4]
 801ee8a:	691b      	ldr	r3, [r3, #16]
 801ee8c:	f003 0301 	and.w	r3, r3, #1
 801ee90:	2b01      	cmp	r3, #1
 801ee92:	d0f0      	beq.n	801ee76 <USB_CoreReset+0x36>

  return HAL_OK;
 801ee94:	2300      	movs	r3, #0
}
 801ee96:	4618      	mov	r0, r3
 801ee98:	3714      	adds	r7, #20
 801ee9a:	46bd      	mov	sp, r7
 801ee9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eea0:	4770      	bx	lr
	...

0801eea4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801eea4:	b084      	sub	sp, #16
 801eea6:	b580      	push	{r7, lr}
 801eea8:	b086      	sub	sp, #24
 801eeaa:	af00      	add	r7, sp, #0
 801eeac:	6078      	str	r0, [r7, #4]
 801eeae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801eeb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801eeb6:	2300      	movs	r3, #0
 801eeb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801eeba:	687b      	ldr	r3, [r7, #4]
 801eebc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801eebe:	68fb      	ldr	r3, [r7, #12]
 801eec0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801eec4:	461a      	mov	r2, r3
 801eec6:	2300      	movs	r3, #0
 801eec8:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 801eeca:	687b      	ldr	r3, [r7, #4]
 801eecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eece:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801eed2:	687b      	ldr	r3, [r7, #4]
 801eed4:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 801eed6:	687b      	ldr	r3, [r7, #4]
 801eed8:	68db      	ldr	r3, [r3, #12]
 801eeda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801eede:	2b00      	cmp	r3, #0
 801eee0:	d119      	bne.n	801ef16 <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 801eee2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801eee6:	2b01      	cmp	r3, #1
 801eee8:	d10a      	bne.n	801ef00 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 801eeea:	68fb      	ldr	r3, [r7, #12]
 801eeec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801eef0:	681b      	ldr	r3, [r3, #0]
 801eef2:	68fa      	ldr	r2, [r7, #12]
 801eef4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801eef8:	f043 0304 	orr.w	r3, r3, #4
 801eefc:	6013      	str	r3, [r2, #0]
 801eefe:	e014      	b.n	801ef2a <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 801ef00:	68fb      	ldr	r3, [r7, #12]
 801ef02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801ef06:	681b      	ldr	r3, [r3, #0]
 801ef08:	68fa      	ldr	r2, [r7, #12]
 801ef0a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801ef0e:	f023 0304 	bic.w	r3, r3, #4
 801ef12:	6013      	str	r3, [r2, #0]
 801ef14:	e009      	b.n	801ef2a <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 801ef16:	68fb      	ldr	r3, [r7, #12]
 801ef18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801ef1c:	681b      	ldr	r3, [r3, #0]
 801ef1e:	68fa      	ldr	r2, [r7, #12]
 801ef20:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801ef24:	f023 0304 	bic.w	r3, r3, #4
 801ef28:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801ef2a:	2110      	movs	r1, #16
 801ef2c:	6878      	ldr	r0, [r7, #4]
 801ef2e:	f7ff fe4f 	bl	801ebd0 <USB_FlushTxFifo>
 801ef32:	4603      	mov	r3, r0
 801ef34:	2b00      	cmp	r3, #0
 801ef36:	d001      	beq.n	801ef3c <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 801ef38:	2301      	movs	r3, #1
 801ef3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801ef3c:	6878      	ldr	r0, [r7, #4]
 801ef3e:	f7ff fe79 	bl	801ec34 <USB_FlushRxFifo>
 801ef42:	4603      	mov	r3, r0
 801ef44:	2b00      	cmp	r3, #0
 801ef46:	d001      	beq.n	801ef4c <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 801ef48:	2301      	movs	r3, #1
 801ef4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 801ef4c:	2300      	movs	r3, #0
 801ef4e:	613b      	str	r3, [r7, #16]
 801ef50:	e015      	b.n	801ef7e <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 801ef52:	693b      	ldr	r3, [r7, #16]
 801ef54:	015a      	lsls	r2, r3, #5
 801ef56:	68fb      	ldr	r3, [r7, #12]
 801ef58:	4413      	add	r3, r2
 801ef5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801ef5e:	461a      	mov	r2, r3
 801ef60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ef64:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 801ef66:	693b      	ldr	r3, [r7, #16]
 801ef68:	015a      	lsls	r2, r3, #5
 801ef6a:	68fb      	ldr	r3, [r7, #12]
 801ef6c:	4413      	add	r3, r2
 801ef6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801ef72:	461a      	mov	r2, r3
 801ef74:	2300      	movs	r3, #0
 801ef76:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 801ef78:	693b      	ldr	r3, [r7, #16]
 801ef7a:	3301      	adds	r3, #1
 801ef7c:	613b      	str	r3, [r7, #16]
 801ef7e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801ef82:	461a      	mov	r2, r3
 801ef84:	693b      	ldr	r3, [r7, #16]
 801ef86:	4293      	cmp	r3, r2
 801ef88:	d3e3      	bcc.n	801ef52 <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801ef8a:	687b      	ldr	r3, [r7, #4]
 801ef8c:	2200      	movs	r2, #0
 801ef8e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 801ef90:	687b      	ldr	r3, [r7, #4]
 801ef92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ef96:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 801ef98:	687b      	ldr	r3, [r7, #4]
 801ef9a:	4a18      	ldr	r2, [pc, #96]	@ (801effc <USB_HostInit+0x158>)
 801ef9c:	4293      	cmp	r3, r2
 801ef9e:	d10b      	bne.n	801efb8 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 801efa0:	687b      	ldr	r3, [r7, #4]
 801efa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801efa6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 801efa8:	687b      	ldr	r3, [r7, #4]
 801efaa:	4a15      	ldr	r2, [pc, #84]	@ (801f000 <USB_HostInit+0x15c>)
 801efac:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 801efae:	687b      	ldr	r3, [r7, #4]
 801efb0:	4a14      	ldr	r2, [pc, #80]	@ (801f004 <USB_HostInit+0x160>)
 801efb2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 801efb6:	e009      	b.n	801efcc <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 801efb8:	687b      	ldr	r3, [r7, #4]
 801efba:	2280      	movs	r2, #128	@ 0x80
 801efbc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 801efbe:	687b      	ldr	r3, [r7, #4]
 801efc0:	4a11      	ldr	r2, [pc, #68]	@ (801f008 <USB_HostInit+0x164>)
 801efc2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 801efc4:	687b      	ldr	r3, [r7, #4]
 801efc6:	4a11      	ldr	r2, [pc, #68]	@ (801f00c <USB_HostInit+0x168>)
 801efc8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801efcc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801efd0:	2b00      	cmp	r3, #0
 801efd2:	d105      	bne.n	801efe0 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801efd4:	687b      	ldr	r3, [r7, #4]
 801efd6:	699b      	ldr	r3, [r3, #24]
 801efd8:	f043 0210 	orr.w	r2, r3, #16
 801efdc:	687b      	ldr	r3, [r7, #4]
 801efde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 801efe0:	687b      	ldr	r3, [r7, #4]
 801efe2:	699a      	ldr	r2, [r3, #24]
 801efe4:	4b0a      	ldr	r3, [pc, #40]	@ (801f010 <USB_HostInit+0x16c>)
 801efe6:	4313      	orrs	r3, r2
 801efe8:	687a      	ldr	r2, [r7, #4]
 801efea:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 801efec:	7dfb      	ldrb	r3, [r7, #23]
}
 801efee:	4618      	mov	r0, r3
 801eff0:	3718      	adds	r7, #24
 801eff2:	46bd      	mov	sp, r7
 801eff4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801eff8:	b004      	add	sp, #16
 801effa:	4770      	bx	lr
 801effc:	40040000 	.word	0x40040000
 801f000:	01000200 	.word	0x01000200
 801f004:	00e00300 	.word	0x00e00300
 801f008:	00600080 	.word	0x00600080
 801f00c:	004000e0 	.word	0x004000e0
 801f010:	a3200008 	.word	0xa3200008

0801f014 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 801f014:	b480      	push	{r7}
 801f016:	b085      	sub	sp, #20
 801f018:	af00      	add	r7, sp, #0
 801f01a:	6078      	str	r0, [r7, #4]
 801f01c:	460b      	mov	r3, r1
 801f01e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f020:	687b      	ldr	r3, [r7, #4]
 801f022:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 801f024:	68fb      	ldr	r3, [r7, #12]
 801f026:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801f02a:	681b      	ldr	r3, [r3, #0]
 801f02c:	68fa      	ldr	r2, [r7, #12]
 801f02e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801f032:	f023 0303 	bic.w	r3, r3, #3
 801f036:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 801f038:	68fb      	ldr	r3, [r7, #12]
 801f03a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801f03e:	681a      	ldr	r2, [r3, #0]
 801f040:	78fb      	ldrb	r3, [r7, #3]
 801f042:	f003 0303 	and.w	r3, r3, #3
 801f046:	68f9      	ldr	r1, [r7, #12]
 801f048:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 801f04c:	4313      	orrs	r3, r2
 801f04e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 801f050:	78fb      	ldrb	r3, [r7, #3]
 801f052:	2b01      	cmp	r3, #1
 801f054:	d107      	bne.n	801f066 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 801f056:	68fb      	ldr	r3, [r7, #12]
 801f058:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801f05c:	461a      	mov	r2, r3
 801f05e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 801f062:	6053      	str	r3, [r2, #4]
 801f064:	e00c      	b.n	801f080 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 801f066:	78fb      	ldrb	r3, [r7, #3]
 801f068:	2b02      	cmp	r3, #2
 801f06a:	d107      	bne.n	801f07c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 801f06c:	68fb      	ldr	r3, [r7, #12]
 801f06e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801f072:	461a      	mov	r2, r3
 801f074:	f241 7370 	movw	r3, #6000	@ 0x1770
 801f078:	6053      	str	r3, [r2, #4]
 801f07a:	e001      	b.n	801f080 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 801f07c:	2301      	movs	r3, #1
 801f07e:	e000      	b.n	801f082 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 801f080:	2300      	movs	r3, #0
}
 801f082:	4618      	mov	r0, r3
 801f084:	3714      	adds	r7, #20
 801f086:	46bd      	mov	sp, r7
 801f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f08c:	4770      	bx	lr

0801f08e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 801f08e:	b580      	push	{r7, lr}
 801f090:	b084      	sub	sp, #16
 801f092:	af00      	add	r7, sp, #0
 801f094:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f096:	687b      	ldr	r3, [r7, #4]
 801f098:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 801f09a:	2300      	movs	r3, #0
 801f09c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 801f09e:	68fb      	ldr	r3, [r7, #12]
 801f0a0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 801f0a4:	681b      	ldr	r3, [r3, #0]
 801f0a6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 801f0a8:	68bb      	ldr	r3, [r7, #8]
 801f0aa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 801f0ae:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 801f0b0:	68bb      	ldr	r3, [r7, #8]
 801f0b2:	68fa      	ldr	r2, [r7, #12]
 801f0b4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 801f0b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801f0bc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 801f0be:	2064      	movs	r0, #100	@ 0x64
 801f0c0:	f7f9 fa8e 	bl	80185e0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 801f0c4:	68bb      	ldr	r3, [r7, #8]
 801f0c6:	68fa      	ldr	r2, [r7, #12]
 801f0c8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 801f0cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801f0d0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 801f0d2:	200a      	movs	r0, #10
 801f0d4:	f7f9 fa84 	bl	80185e0 <HAL_Delay>

  return HAL_OK;
 801f0d8:	2300      	movs	r3, #0
}
 801f0da:	4618      	mov	r0, r3
 801f0dc:	3710      	adds	r7, #16
 801f0de:	46bd      	mov	sp, r7
 801f0e0:	bd80      	pop	{r7, pc}

0801f0e2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 801f0e2:	b480      	push	{r7}
 801f0e4:	b085      	sub	sp, #20
 801f0e6:	af00      	add	r7, sp, #0
 801f0e8:	6078      	str	r0, [r7, #4]
 801f0ea:	460b      	mov	r3, r1
 801f0ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f0ee:	687b      	ldr	r3, [r7, #4]
 801f0f0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 801f0f2:	2300      	movs	r3, #0
 801f0f4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 801f0f6:	68fb      	ldr	r3, [r7, #12]
 801f0f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 801f0fc:	681b      	ldr	r3, [r3, #0]
 801f0fe:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 801f100:	68bb      	ldr	r3, [r7, #8]
 801f102:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 801f106:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 801f108:	68bb      	ldr	r3, [r7, #8]
 801f10a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801f10e:	2b00      	cmp	r3, #0
 801f110:	d109      	bne.n	801f126 <USB_DriveVbus+0x44>
 801f112:	78fb      	ldrb	r3, [r7, #3]
 801f114:	2b01      	cmp	r3, #1
 801f116:	d106      	bne.n	801f126 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 801f118:	68bb      	ldr	r3, [r7, #8]
 801f11a:	68fa      	ldr	r2, [r7, #12]
 801f11c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 801f120:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801f124:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 801f126:	68bb      	ldr	r3, [r7, #8]
 801f128:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801f12c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801f130:	d109      	bne.n	801f146 <USB_DriveVbus+0x64>
 801f132:	78fb      	ldrb	r3, [r7, #3]
 801f134:	2b00      	cmp	r3, #0
 801f136:	d106      	bne.n	801f146 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 801f138:	68bb      	ldr	r3, [r7, #8]
 801f13a:	68fa      	ldr	r2, [r7, #12]
 801f13c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 801f140:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801f144:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 801f146:	2300      	movs	r3, #0
}
 801f148:	4618      	mov	r0, r3
 801f14a:	3714      	adds	r7, #20
 801f14c:	46bd      	mov	sp, r7
 801f14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f152:	4770      	bx	lr

0801f154 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 801f154:	b480      	push	{r7}
 801f156:	b085      	sub	sp, #20
 801f158:	af00      	add	r7, sp, #0
 801f15a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f15c:	687b      	ldr	r3, [r7, #4]
 801f15e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 801f160:	2300      	movs	r3, #0
 801f162:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 801f164:	68fb      	ldr	r3, [r7, #12]
 801f166:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 801f16a:	681b      	ldr	r3, [r3, #0]
 801f16c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 801f16e:	68bb      	ldr	r3, [r7, #8]
 801f170:	0c5b      	lsrs	r3, r3, #17
 801f172:	f003 0303 	and.w	r3, r3, #3
}
 801f176:	4618      	mov	r0, r3
 801f178:	3714      	adds	r7, #20
 801f17a:	46bd      	mov	sp, r7
 801f17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f180:	4770      	bx	lr

0801f182 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 801f182:	b480      	push	{r7}
 801f184:	b085      	sub	sp, #20
 801f186:	af00      	add	r7, sp, #0
 801f188:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f18a:	687b      	ldr	r3, [r7, #4]
 801f18c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 801f18e:	68fb      	ldr	r3, [r7, #12]
 801f190:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801f194:	689b      	ldr	r3, [r3, #8]
 801f196:	b29b      	uxth	r3, r3
}
 801f198:	4618      	mov	r0, r3
 801f19a:	3714      	adds	r7, #20
 801f19c:	46bd      	mov	sp, r7
 801f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1a2:	4770      	bx	lr

0801f1a4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 801f1a4:	b580      	push	{r7, lr}
 801f1a6:	b088      	sub	sp, #32
 801f1a8:	af00      	add	r7, sp, #0
 801f1aa:	6078      	str	r0, [r7, #4]
 801f1ac:	4608      	mov	r0, r1
 801f1ae:	4611      	mov	r1, r2
 801f1b0:	461a      	mov	r2, r3
 801f1b2:	4603      	mov	r3, r0
 801f1b4:	70fb      	strb	r3, [r7, #3]
 801f1b6:	460b      	mov	r3, r1
 801f1b8:	70bb      	strb	r3, [r7, #2]
 801f1ba:	4613      	mov	r3, r2
 801f1bc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 801f1be:	2300      	movs	r3, #0
 801f1c0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f1c2:	687b      	ldr	r3, [r7, #4]
 801f1c4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 801f1c6:	78fb      	ldrb	r3, [r7, #3]
 801f1c8:	015a      	lsls	r2, r3, #5
 801f1ca:	693b      	ldr	r3, [r7, #16]
 801f1cc:	4413      	add	r3, r2
 801f1ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f1d2:	461a      	mov	r2, r3
 801f1d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f1d8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 801f1da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801f1de:	2b03      	cmp	r3, #3
 801f1e0:	d87c      	bhi.n	801f2dc <USB_HC_Init+0x138>
 801f1e2:	a201      	add	r2, pc, #4	@ (adr r2, 801f1e8 <USB_HC_Init+0x44>)
 801f1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f1e8:	0801f1f9 	.word	0x0801f1f9
 801f1ec:	0801f29f 	.word	0x0801f29f
 801f1f0:	0801f1f9 	.word	0x0801f1f9
 801f1f4:	0801f261 	.word	0x0801f261
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 801f1f8:	78fb      	ldrb	r3, [r7, #3]
 801f1fa:	015a      	lsls	r2, r3, #5
 801f1fc:	693b      	ldr	r3, [r7, #16]
 801f1fe:	4413      	add	r3, r2
 801f200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f204:	461a      	mov	r2, r3
 801f206:	f240 439d 	movw	r3, #1181	@ 0x49d
 801f20a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 801f20c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801f210:	2b00      	cmp	r3, #0
 801f212:	da10      	bge.n	801f236 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 801f214:	78fb      	ldrb	r3, [r7, #3]
 801f216:	015a      	lsls	r2, r3, #5
 801f218:	693b      	ldr	r3, [r7, #16]
 801f21a:	4413      	add	r3, r2
 801f21c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f220:	68db      	ldr	r3, [r3, #12]
 801f222:	78fa      	ldrb	r2, [r7, #3]
 801f224:	0151      	lsls	r1, r2, #5
 801f226:	693a      	ldr	r2, [r7, #16]
 801f228:	440a      	add	r2, r1
 801f22a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801f22e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801f232:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 801f234:	e055      	b.n	801f2e2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 801f236:	687b      	ldr	r3, [r7, #4]
 801f238:	4a6f      	ldr	r2, [pc, #444]	@ (801f3f8 <USB_HC_Init+0x254>)
 801f23a:	4293      	cmp	r3, r2
 801f23c:	d151      	bne.n	801f2e2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 801f23e:	78fb      	ldrb	r3, [r7, #3]
 801f240:	015a      	lsls	r2, r3, #5
 801f242:	693b      	ldr	r3, [r7, #16]
 801f244:	4413      	add	r3, r2
 801f246:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f24a:	68db      	ldr	r3, [r3, #12]
 801f24c:	78fa      	ldrb	r2, [r7, #3]
 801f24e:	0151      	lsls	r1, r2, #5
 801f250:	693a      	ldr	r2, [r7, #16]
 801f252:	440a      	add	r2, r1
 801f254:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801f258:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 801f25c:	60d3      	str	r3, [r2, #12]
      break;
 801f25e:	e040      	b.n	801f2e2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 801f260:	78fb      	ldrb	r3, [r7, #3]
 801f262:	015a      	lsls	r2, r3, #5
 801f264:	693b      	ldr	r3, [r7, #16]
 801f266:	4413      	add	r3, r2
 801f268:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f26c:	461a      	mov	r2, r3
 801f26e:	f240 639d 	movw	r3, #1693	@ 0x69d
 801f272:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 801f274:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801f278:	2b00      	cmp	r3, #0
 801f27a:	da34      	bge.n	801f2e6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 801f27c:	78fb      	ldrb	r3, [r7, #3]
 801f27e:	015a      	lsls	r2, r3, #5
 801f280:	693b      	ldr	r3, [r7, #16]
 801f282:	4413      	add	r3, r2
 801f284:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f288:	68db      	ldr	r3, [r3, #12]
 801f28a:	78fa      	ldrb	r2, [r7, #3]
 801f28c:	0151      	lsls	r1, r2, #5
 801f28e:	693a      	ldr	r2, [r7, #16]
 801f290:	440a      	add	r2, r1
 801f292:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801f296:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801f29a:	60d3      	str	r3, [r2, #12]
      }

      break;
 801f29c:	e023      	b.n	801f2e6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 801f29e:	78fb      	ldrb	r3, [r7, #3]
 801f2a0:	015a      	lsls	r2, r3, #5
 801f2a2:	693b      	ldr	r3, [r7, #16]
 801f2a4:	4413      	add	r3, r2
 801f2a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f2aa:	461a      	mov	r2, r3
 801f2ac:	f240 2325 	movw	r3, #549	@ 0x225
 801f2b0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 801f2b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801f2b6:	2b00      	cmp	r3, #0
 801f2b8:	da17      	bge.n	801f2ea <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 801f2ba:	78fb      	ldrb	r3, [r7, #3]
 801f2bc:	015a      	lsls	r2, r3, #5
 801f2be:	693b      	ldr	r3, [r7, #16]
 801f2c0:	4413      	add	r3, r2
 801f2c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f2c6:	68db      	ldr	r3, [r3, #12]
 801f2c8:	78fa      	ldrb	r2, [r7, #3]
 801f2ca:	0151      	lsls	r1, r2, #5
 801f2cc:	693a      	ldr	r2, [r7, #16]
 801f2ce:	440a      	add	r2, r1
 801f2d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801f2d4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 801f2d8:	60d3      	str	r3, [r2, #12]
      }
      break;
 801f2da:	e006      	b.n	801f2ea <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 801f2dc:	2301      	movs	r3, #1
 801f2de:	77fb      	strb	r3, [r7, #31]
      break;
 801f2e0:	e004      	b.n	801f2ec <USB_HC_Init+0x148>
      break;
 801f2e2:	bf00      	nop
 801f2e4:	e002      	b.n	801f2ec <USB_HC_Init+0x148>
      break;
 801f2e6:	bf00      	nop
 801f2e8:	e000      	b.n	801f2ec <USB_HC_Init+0x148>
      break;
 801f2ea:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 801f2ec:	78fb      	ldrb	r3, [r7, #3]
 801f2ee:	015a      	lsls	r2, r3, #5
 801f2f0:	693b      	ldr	r3, [r7, #16]
 801f2f2:	4413      	add	r3, r2
 801f2f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f2f8:	461a      	mov	r2, r3
 801f2fa:	2300      	movs	r3, #0
 801f2fc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 801f2fe:	78fb      	ldrb	r3, [r7, #3]
 801f300:	015a      	lsls	r2, r3, #5
 801f302:	693b      	ldr	r3, [r7, #16]
 801f304:	4413      	add	r3, r2
 801f306:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f30a:	68db      	ldr	r3, [r3, #12]
 801f30c:	78fa      	ldrb	r2, [r7, #3]
 801f30e:	0151      	lsls	r1, r2, #5
 801f310:	693a      	ldr	r2, [r7, #16]
 801f312:	440a      	add	r2, r1
 801f314:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801f318:	f043 0302 	orr.w	r3, r3, #2
 801f31c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 801f31e:	693b      	ldr	r3, [r7, #16]
 801f320:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801f324:	699a      	ldr	r2, [r3, #24]
 801f326:	78fb      	ldrb	r3, [r7, #3]
 801f328:	f003 030f 	and.w	r3, r3, #15
 801f32c:	2101      	movs	r1, #1
 801f32e:	fa01 f303 	lsl.w	r3, r1, r3
 801f332:	6939      	ldr	r1, [r7, #16]
 801f334:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 801f338:	4313      	orrs	r3, r2
 801f33a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 801f33c:	687b      	ldr	r3, [r7, #4]
 801f33e:	699b      	ldr	r3, [r3, #24]
 801f340:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 801f344:	687b      	ldr	r3, [r7, #4]
 801f346:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 801f348:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801f34c:	2b00      	cmp	r3, #0
 801f34e:	da03      	bge.n	801f358 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 801f350:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801f354:	61bb      	str	r3, [r7, #24]
 801f356:	e001      	b.n	801f35c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 801f358:	2300      	movs	r3, #0
 801f35a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 801f35c:	6878      	ldr	r0, [r7, #4]
 801f35e:	f7ff fef9 	bl	801f154 <USB_GetHostSpeed>
 801f362:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 801f364:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801f368:	2b02      	cmp	r3, #2
 801f36a:	d106      	bne.n	801f37a <USB_HC_Init+0x1d6>
 801f36c:	68fb      	ldr	r3, [r7, #12]
 801f36e:	2b02      	cmp	r3, #2
 801f370:	d003      	beq.n	801f37a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 801f372:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 801f376:	617b      	str	r3, [r7, #20]
 801f378:	e001      	b.n	801f37e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 801f37a:	2300      	movs	r3, #0
 801f37c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801f37e:	787b      	ldrb	r3, [r7, #1]
 801f380:	059b      	lsls	r3, r3, #22
 801f382:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 801f386:	78bb      	ldrb	r3, [r7, #2]
 801f388:	02db      	lsls	r3, r3, #11
 801f38a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801f38e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 801f390:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801f394:	049b      	lsls	r3, r3, #18
 801f396:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 801f39a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 801f39c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801f39e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 801f3a2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 801f3a4:	69bb      	ldr	r3, [r7, #24]
 801f3a6:	431a      	orrs	r2, r3
 801f3a8:	697b      	ldr	r3, [r7, #20]
 801f3aa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801f3ac:	78fa      	ldrb	r2, [r7, #3]
 801f3ae:	0151      	lsls	r1, r2, #5
 801f3b0:	693a      	ldr	r2, [r7, #16]
 801f3b2:	440a      	add	r2, r1
 801f3b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 801f3b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801f3bc:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 801f3be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801f3c2:	2b03      	cmp	r3, #3
 801f3c4:	d003      	beq.n	801f3ce <USB_HC_Init+0x22a>
 801f3c6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801f3ca:	2b01      	cmp	r3, #1
 801f3cc:	d10f      	bne.n	801f3ee <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 801f3ce:	78fb      	ldrb	r3, [r7, #3]
 801f3d0:	015a      	lsls	r2, r3, #5
 801f3d2:	693b      	ldr	r3, [r7, #16]
 801f3d4:	4413      	add	r3, r2
 801f3d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f3da:	681b      	ldr	r3, [r3, #0]
 801f3dc:	78fa      	ldrb	r2, [r7, #3]
 801f3de:	0151      	lsls	r1, r2, #5
 801f3e0:	693a      	ldr	r2, [r7, #16]
 801f3e2:	440a      	add	r2, r1
 801f3e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801f3e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f3ec:	6013      	str	r3, [r2, #0]
  }

  return ret;
 801f3ee:	7ffb      	ldrb	r3, [r7, #31]
}
 801f3f0:	4618      	mov	r0, r3
 801f3f2:	3720      	adds	r7, #32
 801f3f4:	46bd      	mov	sp, r7
 801f3f6:	bd80      	pop	{r7, pc}
 801f3f8:	40040000 	.word	0x40040000

0801f3fc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 801f3fc:	b580      	push	{r7, lr}
 801f3fe:	b08c      	sub	sp, #48	@ 0x30
 801f400:	af02      	add	r7, sp, #8
 801f402:	60f8      	str	r0, [r7, #12]
 801f404:	60b9      	str	r1, [r7, #8]
 801f406:	4613      	mov	r3, r2
 801f408:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f40a:	68fb      	ldr	r3, [r7, #12]
 801f40c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 801f40e:	68bb      	ldr	r3, [r7, #8]
 801f410:	785b      	ldrb	r3, [r3, #1]
 801f412:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 801f414:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801f418:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 801f41a:	68fb      	ldr	r3, [r7, #12]
 801f41c:	4a5d      	ldr	r2, [pc, #372]	@ (801f594 <USB_HC_StartXfer+0x198>)
 801f41e:	4293      	cmp	r3, r2
 801f420:	d12f      	bne.n	801f482 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 801f422:	79fb      	ldrb	r3, [r7, #7]
 801f424:	2b01      	cmp	r3, #1
 801f426:	d11c      	bne.n	801f462 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 801f428:	68bb      	ldr	r3, [r7, #8]
 801f42a:	7c9b      	ldrb	r3, [r3, #18]
 801f42c:	2b00      	cmp	r3, #0
 801f42e:	d003      	beq.n	801f438 <USB_HC_StartXfer+0x3c>
 801f430:	68bb      	ldr	r3, [r7, #8]
 801f432:	7c9b      	ldrb	r3, [r3, #18]
 801f434:	2b02      	cmp	r3, #2
 801f436:	d124      	bne.n	801f482 <USB_HC_StartXfer+0x86>
 801f438:	68bb      	ldr	r3, [r7, #8]
 801f43a:	799b      	ldrb	r3, [r3, #6]
 801f43c:	2b00      	cmp	r3, #0
 801f43e:	d120      	bne.n	801f482 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 801f440:	69fb      	ldr	r3, [r7, #28]
 801f442:	015a      	lsls	r2, r3, #5
 801f444:	6a3b      	ldr	r3, [r7, #32]
 801f446:	4413      	add	r3, r2
 801f448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f44c:	68db      	ldr	r3, [r3, #12]
 801f44e:	69fa      	ldr	r2, [r7, #28]
 801f450:	0151      	lsls	r1, r2, #5
 801f452:	6a3a      	ldr	r2, [r7, #32]
 801f454:	440a      	add	r2, r1
 801f456:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801f45a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801f45e:	60d3      	str	r3, [r2, #12]
 801f460:	e00f      	b.n	801f482 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 801f462:	68bb      	ldr	r3, [r7, #8]
 801f464:	791b      	ldrb	r3, [r3, #4]
 801f466:	2b00      	cmp	r3, #0
 801f468:	d10b      	bne.n	801f482 <USB_HC_StartXfer+0x86>
 801f46a:	68bb      	ldr	r3, [r7, #8]
 801f46c:	795b      	ldrb	r3, [r3, #5]
 801f46e:	2b01      	cmp	r3, #1
 801f470:	d107      	bne.n	801f482 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 801f472:	68bb      	ldr	r3, [r7, #8]
 801f474:	785b      	ldrb	r3, [r3, #1]
 801f476:	4619      	mov	r1, r3
 801f478:	68f8      	ldr	r0, [r7, #12]
 801f47a:	f000 fb6b 	bl	801fb54 <USB_DoPing>
        return HAL_OK;
 801f47e:	2300      	movs	r3, #0
 801f480:	e232      	b.n	801f8e8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 801f482:	68bb      	ldr	r3, [r7, #8]
 801f484:	799b      	ldrb	r3, [r3, #6]
 801f486:	2b01      	cmp	r3, #1
 801f488:	d158      	bne.n	801f53c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 801f48a:	2301      	movs	r3, #1
 801f48c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 801f48e:	68bb      	ldr	r3, [r7, #8]
 801f490:	78db      	ldrb	r3, [r3, #3]
 801f492:	2b00      	cmp	r3, #0
 801f494:	d007      	beq.n	801f4a6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801f496:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801f498:	68ba      	ldr	r2, [r7, #8]
 801f49a:	8a92      	ldrh	r2, [r2, #20]
 801f49c:	fb03 f202 	mul.w	r2, r3, r2
 801f4a0:	68bb      	ldr	r3, [r7, #8]
 801f4a2:	61da      	str	r2, [r3, #28]
 801f4a4:	e07c      	b.n	801f5a0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 801f4a6:	68bb      	ldr	r3, [r7, #8]
 801f4a8:	7c9b      	ldrb	r3, [r3, #18]
 801f4aa:	2b01      	cmp	r3, #1
 801f4ac:	d130      	bne.n	801f510 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 801f4ae:	68bb      	ldr	r3, [r7, #8]
 801f4b0:	6a1b      	ldr	r3, [r3, #32]
 801f4b2:	2bbc      	cmp	r3, #188	@ 0xbc
 801f4b4:	d918      	bls.n	801f4e8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 801f4b6:	68bb      	ldr	r3, [r7, #8]
 801f4b8:	8a9b      	ldrh	r3, [r3, #20]
 801f4ba:	461a      	mov	r2, r3
 801f4bc:	68bb      	ldr	r3, [r7, #8]
 801f4be:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 801f4c0:	68bb      	ldr	r3, [r7, #8]
 801f4c2:	69da      	ldr	r2, [r3, #28]
 801f4c4:	68bb      	ldr	r3, [r7, #8]
 801f4c6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 801f4c8:	68bb      	ldr	r3, [r7, #8]
 801f4ca:	68db      	ldr	r3, [r3, #12]
 801f4cc:	2b01      	cmp	r3, #1
 801f4ce:	d003      	beq.n	801f4d8 <USB_HC_StartXfer+0xdc>
 801f4d0:	68bb      	ldr	r3, [r7, #8]
 801f4d2:	68db      	ldr	r3, [r3, #12]
 801f4d4:	2b02      	cmp	r3, #2
 801f4d6:	d103      	bne.n	801f4e0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 801f4d8:	68bb      	ldr	r3, [r7, #8]
 801f4da:	2202      	movs	r2, #2
 801f4dc:	60da      	str	r2, [r3, #12]
 801f4de:	e05f      	b.n	801f5a0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 801f4e0:	68bb      	ldr	r3, [r7, #8]
 801f4e2:	2201      	movs	r2, #1
 801f4e4:	60da      	str	r2, [r3, #12]
 801f4e6:	e05b      	b.n	801f5a0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 801f4e8:	68bb      	ldr	r3, [r7, #8]
 801f4ea:	6a1a      	ldr	r2, [r3, #32]
 801f4ec:	68bb      	ldr	r3, [r7, #8]
 801f4ee:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 801f4f0:	68bb      	ldr	r3, [r7, #8]
 801f4f2:	68db      	ldr	r3, [r3, #12]
 801f4f4:	2b01      	cmp	r3, #1
 801f4f6:	d007      	beq.n	801f508 <USB_HC_StartXfer+0x10c>
 801f4f8:	68bb      	ldr	r3, [r7, #8]
 801f4fa:	68db      	ldr	r3, [r3, #12]
 801f4fc:	2b02      	cmp	r3, #2
 801f4fe:	d003      	beq.n	801f508 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 801f500:	68bb      	ldr	r3, [r7, #8]
 801f502:	2204      	movs	r2, #4
 801f504:	60da      	str	r2, [r3, #12]
 801f506:	e04b      	b.n	801f5a0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 801f508:	68bb      	ldr	r3, [r7, #8]
 801f50a:	2203      	movs	r2, #3
 801f50c:	60da      	str	r2, [r3, #12]
 801f50e:	e047      	b.n	801f5a0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 801f510:	79fb      	ldrb	r3, [r7, #7]
 801f512:	2b01      	cmp	r3, #1
 801f514:	d10d      	bne.n	801f532 <USB_HC_StartXfer+0x136>
 801f516:	68bb      	ldr	r3, [r7, #8]
 801f518:	6a1b      	ldr	r3, [r3, #32]
 801f51a:	68ba      	ldr	r2, [r7, #8]
 801f51c:	8a92      	ldrh	r2, [r2, #20]
 801f51e:	4293      	cmp	r3, r2
 801f520:	d907      	bls.n	801f532 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801f522:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801f524:	68ba      	ldr	r2, [r7, #8]
 801f526:	8a92      	ldrh	r2, [r2, #20]
 801f528:	fb03 f202 	mul.w	r2, r3, r2
 801f52c:	68bb      	ldr	r3, [r7, #8]
 801f52e:	61da      	str	r2, [r3, #28]
 801f530:	e036      	b.n	801f5a0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 801f532:	68bb      	ldr	r3, [r7, #8]
 801f534:	6a1a      	ldr	r2, [r3, #32]
 801f536:	68bb      	ldr	r3, [r7, #8]
 801f538:	61da      	str	r2, [r3, #28]
 801f53a:	e031      	b.n	801f5a0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 801f53c:	68bb      	ldr	r3, [r7, #8]
 801f53e:	6a1b      	ldr	r3, [r3, #32]
 801f540:	2b00      	cmp	r3, #0
 801f542:	d018      	beq.n	801f576 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 801f544:	68bb      	ldr	r3, [r7, #8]
 801f546:	6a1b      	ldr	r3, [r3, #32]
 801f548:	68ba      	ldr	r2, [r7, #8]
 801f54a:	8a92      	ldrh	r2, [r2, #20]
 801f54c:	4413      	add	r3, r2
 801f54e:	3b01      	subs	r3, #1
 801f550:	68ba      	ldr	r2, [r7, #8]
 801f552:	8a92      	ldrh	r2, [r2, #20]
 801f554:	fbb3 f3f2 	udiv	r3, r3, r2
 801f558:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 801f55a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801f55c:	8b7b      	ldrh	r3, [r7, #26]
 801f55e:	429a      	cmp	r2, r3
 801f560:	d90b      	bls.n	801f57a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 801f562:	8b7b      	ldrh	r3, [r7, #26]
 801f564:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801f566:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801f568:	68ba      	ldr	r2, [r7, #8]
 801f56a:	8a92      	ldrh	r2, [r2, #20]
 801f56c:	fb03 f202 	mul.w	r2, r3, r2
 801f570:	68bb      	ldr	r3, [r7, #8]
 801f572:	61da      	str	r2, [r3, #28]
 801f574:	e001      	b.n	801f57a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 801f576:	2301      	movs	r3, #1
 801f578:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 801f57a:	68bb      	ldr	r3, [r7, #8]
 801f57c:	78db      	ldrb	r3, [r3, #3]
 801f57e:	2b00      	cmp	r3, #0
 801f580:	d00a      	beq.n	801f598 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801f582:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801f584:	68ba      	ldr	r2, [r7, #8]
 801f586:	8a92      	ldrh	r2, [r2, #20]
 801f588:	fb03 f202 	mul.w	r2, r3, r2
 801f58c:	68bb      	ldr	r3, [r7, #8]
 801f58e:	61da      	str	r2, [r3, #28]
 801f590:	e006      	b.n	801f5a0 <USB_HC_StartXfer+0x1a4>
 801f592:	bf00      	nop
 801f594:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 801f598:	68bb      	ldr	r3, [r7, #8]
 801f59a:	6a1a      	ldr	r2, [r3, #32]
 801f59c:	68bb      	ldr	r3, [r7, #8]
 801f59e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801f5a0:	68bb      	ldr	r3, [r7, #8]
 801f5a2:	69db      	ldr	r3, [r3, #28]
 801f5a4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801f5a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801f5aa:	04d9      	lsls	r1, r3, #19
 801f5ac:	4ba3      	ldr	r3, [pc, #652]	@ (801f83c <USB_HC_StartXfer+0x440>)
 801f5ae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801f5b0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 801f5b2:	68bb      	ldr	r3, [r7, #8]
 801f5b4:	7d9b      	ldrb	r3, [r3, #22]
 801f5b6:	075b      	lsls	r3, r3, #29
 801f5b8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801f5bc:	69f9      	ldr	r1, [r7, #28]
 801f5be:	0148      	lsls	r0, r1, #5
 801f5c0:	6a39      	ldr	r1, [r7, #32]
 801f5c2:	4401      	add	r1, r0
 801f5c4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801f5c8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801f5ca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 801f5cc:	79fb      	ldrb	r3, [r7, #7]
 801f5ce:	2b00      	cmp	r3, #0
 801f5d0:	d009      	beq.n	801f5e6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 801f5d2:	68bb      	ldr	r3, [r7, #8]
 801f5d4:	6999      	ldr	r1, [r3, #24]
 801f5d6:	69fb      	ldr	r3, [r7, #28]
 801f5d8:	015a      	lsls	r2, r3, #5
 801f5da:	6a3b      	ldr	r3, [r7, #32]
 801f5dc:	4413      	add	r3, r2
 801f5de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f5e2:	460a      	mov	r2, r1
 801f5e4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 801f5e6:	6a3b      	ldr	r3, [r7, #32]
 801f5e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801f5ec:	689b      	ldr	r3, [r3, #8]
 801f5ee:	f003 0301 	and.w	r3, r3, #1
 801f5f2:	2b00      	cmp	r3, #0
 801f5f4:	bf0c      	ite	eq
 801f5f6:	2301      	moveq	r3, #1
 801f5f8:	2300      	movne	r3, #0
 801f5fa:	b2db      	uxtb	r3, r3
 801f5fc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 801f5fe:	69fb      	ldr	r3, [r7, #28]
 801f600:	015a      	lsls	r2, r3, #5
 801f602:	6a3b      	ldr	r3, [r7, #32]
 801f604:	4413      	add	r3, r2
 801f606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f60a:	681b      	ldr	r3, [r3, #0]
 801f60c:	69fa      	ldr	r2, [r7, #28]
 801f60e:	0151      	lsls	r1, r2, #5
 801f610:	6a3a      	ldr	r2, [r7, #32]
 801f612:	440a      	add	r2, r1
 801f614:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801f618:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801f61c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 801f61e:	69fb      	ldr	r3, [r7, #28]
 801f620:	015a      	lsls	r2, r3, #5
 801f622:	6a3b      	ldr	r3, [r7, #32]
 801f624:	4413      	add	r3, r2
 801f626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f62a:	681a      	ldr	r2, [r3, #0]
 801f62c:	7e7b      	ldrb	r3, [r7, #25]
 801f62e:	075b      	lsls	r3, r3, #29
 801f630:	69f9      	ldr	r1, [r7, #28]
 801f632:	0148      	lsls	r0, r1, #5
 801f634:	6a39      	ldr	r1, [r7, #32]
 801f636:	4401      	add	r1, r0
 801f638:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 801f63c:	4313      	orrs	r3, r2
 801f63e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 801f640:	68bb      	ldr	r3, [r7, #8]
 801f642:	799b      	ldrb	r3, [r3, #6]
 801f644:	2b01      	cmp	r3, #1
 801f646:	f040 80c3 	bne.w	801f7d0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 801f64a:	68bb      	ldr	r3, [r7, #8]
 801f64c:	7c5b      	ldrb	r3, [r3, #17]
 801f64e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 801f650:	68ba      	ldr	r2, [r7, #8]
 801f652:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 801f654:	4313      	orrs	r3, r2
 801f656:	69fa      	ldr	r2, [r7, #28]
 801f658:	0151      	lsls	r1, r2, #5
 801f65a:	6a3a      	ldr	r2, [r7, #32]
 801f65c:	440a      	add	r2, r1
 801f65e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 801f662:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 801f666:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 801f668:	69fb      	ldr	r3, [r7, #28]
 801f66a:	015a      	lsls	r2, r3, #5
 801f66c:	6a3b      	ldr	r3, [r7, #32]
 801f66e:	4413      	add	r3, r2
 801f670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f674:	68db      	ldr	r3, [r3, #12]
 801f676:	69fa      	ldr	r2, [r7, #28]
 801f678:	0151      	lsls	r1, r2, #5
 801f67a:	6a3a      	ldr	r2, [r7, #32]
 801f67c:	440a      	add	r2, r1
 801f67e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801f682:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 801f686:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 801f688:	68bb      	ldr	r3, [r7, #8]
 801f68a:	79db      	ldrb	r3, [r3, #7]
 801f68c:	2b01      	cmp	r3, #1
 801f68e:	d123      	bne.n	801f6d8 <USB_HC_StartXfer+0x2dc>
 801f690:	68bb      	ldr	r3, [r7, #8]
 801f692:	78db      	ldrb	r3, [r3, #3]
 801f694:	2b00      	cmp	r3, #0
 801f696:	d11f      	bne.n	801f6d8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 801f698:	69fb      	ldr	r3, [r7, #28]
 801f69a:	015a      	lsls	r2, r3, #5
 801f69c:	6a3b      	ldr	r3, [r7, #32]
 801f69e:	4413      	add	r3, r2
 801f6a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f6a4:	685b      	ldr	r3, [r3, #4]
 801f6a6:	69fa      	ldr	r2, [r7, #28]
 801f6a8:	0151      	lsls	r1, r2, #5
 801f6aa:	6a3a      	ldr	r2, [r7, #32]
 801f6ac:	440a      	add	r2, r1
 801f6ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801f6b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801f6b6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 801f6b8:	69fb      	ldr	r3, [r7, #28]
 801f6ba:	015a      	lsls	r2, r3, #5
 801f6bc:	6a3b      	ldr	r3, [r7, #32]
 801f6be:	4413      	add	r3, r2
 801f6c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f6c4:	68db      	ldr	r3, [r3, #12]
 801f6c6:	69fa      	ldr	r2, [r7, #28]
 801f6c8:	0151      	lsls	r1, r2, #5
 801f6ca:	6a3a      	ldr	r2, [r7, #32]
 801f6cc:	440a      	add	r2, r1
 801f6ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801f6d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f6d6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 801f6d8:	68bb      	ldr	r3, [r7, #8]
 801f6da:	7c9b      	ldrb	r3, [r3, #18]
 801f6dc:	2b01      	cmp	r3, #1
 801f6de:	d003      	beq.n	801f6e8 <USB_HC_StartXfer+0x2ec>
 801f6e0:	68bb      	ldr	r3, [r7, #8]
 801f6e2:	7c9b      	ldrb	r3, [r3, #18]
 801f6e4:	2b03      	cmp	r3, #3
 801f6e6:	d117      	bne.n	801f718 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 801f6e8:	68bb      	ldr	r3, [r7, #8]
 801f6ea:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 801f6ec:	2b01      	cmp	r3, #1
 801f6ee:	d113      	bne.n	801f718 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 801f6f0:	68bb      	ldr	r3, [r7, #8]
 801f6f2:	78db      	ldrb	r3, [r3, #3]
 801f6f4:	2b01      	cmp	r3, #1
 801f6f6:	d10f      	bne.n	801f718 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 801f6f8:	69fb      	ldr	r3, [r7, #28]
 801f6fa:	015a      	lsls	r2, r3, #5
 801f6fc:	6a3b      	ldr	r3, [r7, #32]
 801f6fe:	4413      	add	r3, r2
 801f700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f704:	685b      	ldr	r3, [r3, #4]
 801f706:	69fa      	ldr	r2, [r7, #28]
 801f708:	0151      	lsls	r1, r2, #5
 801f70a:	6a3a      	ldr	r2, [r7, #32]
 801f70c:	440a      	add	r2, r1
 801f70e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801f712:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801f716:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 801f718:	68bb      	ldr	r3, [r7, #8]
 801f71a:	7c9b      	ldrb	r3, [r3, #18]
 801f71c:	2b01      	cmp	r3, #1
 801f71e:	d162      	bne.n	801f7e6 <USB_HC_StartXfer+0x3ea>
 801f720:	68bb      	ldr	r3, [r7, #8]
 801f722:	78db      	ldrb	r3, [r3, #3]
 801f724:	2b00      	cmp	r3, #0
 801f726:	d15e      	bne.n	801f7e6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 801f728:	68bb      	ldr	r3, [r7, #8]
 801f72a:	68db      	ldr	r3, [r3, #12]
 801f72c:	3b01      	subs	r3, #1
 801f72e:	2b03      	cmp	r3, #3
 801f730:	d858      	bhi.n	801f7e4 <USB_HC_StartXfer+0x3e8>
 801f732:	a201      	add	r2, pc, #4	@ (adr r2, 801f738 <USB_HC_StartXfer+0x33c>)
 801f734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f738:	0801f749 	.word	0x0801f749
 801f73c:	0801f76b 	.word	0x0801f76b
 801f740:	0801f78d 	.word	0x0801f78d
 801f744:	0801f7af 	.word	0x0801f7af
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 801f748:	69fb      	ldr	r3, [r7, #28]
 801f74a:	015a      	lsls	r2, r3, #5
 801f74c:	6a3b      	ldr	r3, [r7, #32]
 801f74e:	4413      	add	r3, r2
 801f750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f754:	685b      	ldr	r3, [r3, #4]
 801f756:	69fa      	ldr	r2, [r7, #28]
 801f758:	0151      	lsls	r1, r2, #5
 801f75a:	6a3a      	ldr	r2, [r7, #32]
 801f75c:	440a      	add	r2, r1
 801f75e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801f762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801f766:	6053      	str	r3, [r2, #4]
          break;
 801f768:	e03d      	b.n	801f7e6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 801f76a:	69fb      	ldr	r3, [r7, #28]
 801f76c:	015a      	lsls	r2, r3, #5
 801f76e:	6a3b      	ldr	r3, [r7, #32]
 801f770:	4413      	add	r3, r2
 801f772:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f776:	685b      	ldr	r3, [r3, #4]
 801f778:	69fa      	ldr	r2, [r7, #28]
 801f77a:	0151      	lsls	r1, r2, #5
 801f77c:	6a3a      	ldr	r2, [r7, #32]
 801f77e:	440a      	add	r2, r1
 801f780:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801f784:	f043 030e 	orr.w	r3, r3, #14
 801f788:	6053      	str	r3, [r2, #4]
          break;
 801f78a:	e02c      	b.n	801f7e6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 801f78c:	69fb      	ldr	r3, [r7, #28]
 801f78e:	015a      	lsls	r2, r3, #5
 801f790:	6a3b      	ldr	r3, [r7, #32]
 801f792:	4413      	add	r3, r2
 801f794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f798:	685b      	ldr	r3, [r3, #4]
 801f79a:	69fa      	ldr	r2, [r7, #28]
 801f79c:	0151      	lsls	r1, r2, #5
 801f79e:	6a3a      	ldr	r2, [r7, #32]
 801f7a0:	440a      	add	r2, r1
 801f7a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801f7a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801f7aa:	6053      	str	r3, [r2, #4]
          break;
 801f7ac:	e01b      	b.n	801f7e6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 801f7ae:	69fb      	ldr	r3, [r7, #28]
 801f7b0:	015a      	lsls	r2, r3, #5
 801f7b2:	6a3b      	ldr	r3, [r7, #32]
 801f7b4:	4413      	add	r3, r2
 801f7b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f7ba:	685b      	ldr	r3, [r3, #4]
 801f7bc:	69fa      	ldr	r2, [r7, #28]
 801f7be:	0151      	lsls	r1, r2, #5
 801f7c0:	6a3a      	ldr	r2, [r7, #32]
 801f7c2:	440a      	add	r2, r1
 801f7c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801f7c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801f7cc:	6053      	str	r3, [r2, #4]
          break;
 801f7ce:	e00a      	b.n	801f7e6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 801f7d0:	69fb      	ldr	r3, [r7, #28]
 801f7d2:	015a      	lsls	r2, r3, #5
 801f7d4:	6a3b      	ldr	r3, [r7, #32]
 801f7d6:	4413      	add	r3, r2
 801f7d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f7dc:	461a      	mov	r2, r3
 801f7de:	2300      	movs	r3, #0
 801f7e0:	6053      	str	r3, [r2, #4]
 801f7e2:	e000      	b.n	801f7e6 <USB_HC_StartXfer+0x3ea>
          break;
 801f7e4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 801f7e6:	69fb      	ldr	r3, [r7, #28]
 801f7e8:	015a      	lsls	r2, r3, #5
 801f7ea:	6a3b      	ldr	r3, [r7, #32]
 801f7ec:	4413      	add	r3, r2
 801f7ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f7f2:	681b      	ldr	r3, [r3, #0]
 801f7f4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801f7f6:	693b      	ldr	r3, [r7, #16]
 801f7f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801f7fc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 801f7fe:	68bb      	ldr	r3, [r7, #8]
 801f800:	78db      	ldrb	r3, [r3, #3]
 801f802:	2b00      	cmp	r3, #0
 801f804:	d004      	beq.n	801f810 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 801f806:	693b      	ldr	r3, [r7, #16]
 801f808:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801f80c:	613b      	str	r3, [r7, #16]
 801f80e:	e003      	b.n	801f818 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 801f810:	693b      	ldr	r3, [r7, #16]
 801f812:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801f816:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 801f818:	693b      	ldr	r3, [r7, #16]
 801f81a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801f81e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 801f820:	69fb      	ldr	r3, [r7, #28]
 801f822:	015a      	lsls	r2, r3, #5
 801f824:	6a3b      	ldr	r3, [r7, #32]
 801f826:	4413      	add	r3, r2
 801f828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f82c:	461a      	mov	r2, r3
 801f82e:	693b      	ldr	r3, [r7, #16]
 801f830:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 801f832:	79fb      	ldrb	r3, [r7, #7]
 801f834:	2b00      	cmp	r3, #0
 801f836:	d003      	beq.n	801f840 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 801f838:	2300      	movs	r3, #0
 801f83a:	e055      	b.n	801f8e8 <USB_HC_StartXfer+0x4ec>
 801f83c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 801f840:	68bb      	ldr	r3, [r7, #8]
 801f842:	78db      	ldrb	r3, [r3, #3]
 801f844:	2b00      	cmp	r3, #0
 801f846:	d14e      	bne.n	801f8e6 <USB_HC_StartXfer+0x4ea>
 801f848:	68bb      	ldr	r3, [r7, #8]
 801f84a:	6a1b      	ldr	r3, [r3, #32]
 801f84c:	2b00      	cmp	r3, #0
 801f84e:	d04a      	beq.n	801f8e6 <USB_HC_StartXfer+0x4ea>
 801f850:	68bb      	ldr	r3, [r7, #8]
 801f852:	79db      	ldrb	r3, [r3, #7]
 801f854:	2b00      	cmp	r3, #0
 801f856:	d146      	bne.n	801f8e6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 801f858:	68bb      	ldr	r3, [r7, #8]
 801f85a:	7c9b      	ldrb	r3, [r3, #18]
 801f85c:	2b03      	cmp	r3, #3
 801f85e:	d831      	bhi.n	801f8c4 <USB_HC_StartXfer+0x4c8>
 801f860:	a201      	add	r2, pc, #4	@ (adr r2, 801f868 <USB_HC_StartXfer+0x46c>)
 801f862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f866:	bf00      	nop
 801f868:	0801f879 	.word	0x0801f879
 801f86c:	0801f89d 	.word	0x0801f89d
 801f870:	0801f879 	.word	0x0801f879
 801f874:	0801f89d 	.word	0x0801f89d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 801f878:	68bb      	ldr	r3, [r7, #8]
 801f87a:	6a1b      	ldr	r3, [r3, #32]
 801f87c:	3303      	adds	r3, #3
 801f87e:	089b      	lsrs	r3, r3, #2
 801f880:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 801f882:	8afa      	ldrh	r2, [r7, #22]
 801f884:	68fb      	ldr	r3, [r7, #12]
 801f886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f888:	b29b      	uxth	r3, r3
 801f88a:	429a      	cmp	r2, r3
 801f88c:	d91c      	bls.n	801f8c8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 801f88e:	68fb      	ldr	r3, [r7, #12]
 801f890:	699b      	ldr	r3, [r3, #24]
 801f892:	f043 0220 	orr.w	r2, r3, #32
 801f896:	68fb      	ldr	r3, [r7, #12]
 801f898:	619a      	str	r2, [r3, #24]
        }
        break;
 801f89a:	e015      	b.n	801f8c8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 801f89c:	68bb      	ldr	r3, [r7, #8]
 801f89e:	6a1b      	ldr	r3, [r3, #32]
 801f8a0:	3303      	adds	r3, #3
 801f8a2:	089b      	lsrs	r3, r3, #2
 801f8a4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 801f8a6:	8afa      	ldrh	r2, [r7, #22]
 801f8a8:	6a3b      	ldr	r3, [r7, #32]
 801f8aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801f8ae:	691b      	ldr	r3, [r3, #16]
 801f8b0:	b29b      	uxth	r3, r3
 801f8b2:	429a      	cmp	r2, r3
 801f8b4:	d90a      	bls.n	801f8cc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 801f8b6:	68fb      	ldr	r3, [r7, #12]
 801f8b8:	699b      	ldr	r3, [r3, #24]
 801f8ba:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 801f8be:	68fb      	ldr	r3, [r7, #12]
 801f8c0:	619a      	str	r2, [r3, #24]
        }
        break;
 801f8c2:	e003      	b.n	801f8cc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 801f8c4:	bf00      	nop
 801f8c6:	e002      	b.n	801f8ce <USB_HC_StartXfer+0x4d2>
        break;
 801f8c8:	bf00      	nop
 801f8ca:	e000      	b.n	801f8ce <USB_HC_StartXfer+0x4d2>
        break;
 801f8cc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 801f8ce:	68bb      	ldr	r3, [r7, #8]
 801f8d0:	6999      	ldr	r1, [r3, #24]
 801f8d2:	68bb      	ldr	r3, [r7, #8]
 801f8d4:	785a      	ldrb	r2, [r3, #1]
 801f8d6:	68bb      	ldr	r3, [r7, #8]
 801f8d8:	6a1b      	ldr	r3, [r3, #32]
 801f8da:	b29b      	uxth	r3, r3
 801f8dc:	2000      	movs	r0, #0
 801f8de:	9000      	str	r0, [sp, #0]
 801f8e0:	68f8      	ldr	r0, [r7, #12]
 801f8e2:	f7ff f9d5 	bl	801ec90 <USB_WritePacket>
  }

  return HAL_OK;
 801f8e6:	2300      	movs	r3, #0
}
 801f8e8:	4618      	mov	r0, r3
 801f8ea:	3728      	adds	r7, #40	@ 0x28
 801f8ec:	46bd      	mov	sp, r7
 801f8ee:	bd80      	pop	{r7, pc}

0801f8f0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801f8f0:	b480      	push	{r7}
 801f8f2:	b085      	sub	sp, #20
 801f8f4:	af00      	add	r7, sp, #0
 801f8f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f8f8:	687b      	ldr	r3, [r7, #4]
 801f8fa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 801f8fc:	68fb      	ldr	r3, [r7, #12]
 801f8fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801f902:	695b      	ldr	r3, [r3, #20]
 801f904:	b29b      	uxth	r3, r3
}
 801f906:	4618      	mov	r0, r3
 801f908:	3714      	adds	r7, #20
 801f90a:	46bd      	mov	sp, r7
 801f90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f910:	4770      	bx	lr

0801f912 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 801f912:	b480      	push	{r7}
 801f914:	b089      	sub	sp, #36	@ 0x24
 801f916:	af00      	add	r7, sp, #0
 801f918:	6078      	str	r0, [r7, #4]
 801f91a:	460b      	mov	r3, r1
 801f91c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f91e:	687b      	ldr	r3, [r7, #4]
 801f920:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 801f922:	78fb      	ldrb	r3, [r7, #3]
 801f924:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 801f926:	2300      	movs	r3, #0
 801f928:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 801f92a:	69bb      	ldr	r3, [r7, #24]
 801f92c:	015a      	lsls	r2, r3, #5
 801f92e:	69fb      	ldr	r3, [r7, #28]
 801f930:	4413      	add	r3, r2
 801f932:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f936:	681b      	ldr	r3, [r3, #0]
 801f938:	0c9b      	lsrs	r3, r3, #18
 801f93a:	f003 0303 	and.w	r3, r3, #3
 801f93e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 801f940:	69bb      	ldr	r3, [r7, #24]
 801f942:	015a      	lsls	r2, r3, #5
 801f944:	69fb      	ldr	r3, [r7, #28]
 801f946:	4413      	add	r3, r2
 801f948:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f94c:	681b      	ldr	r3, [r3, #0]
 801f94e:	0fdb      	lsrs	r3, r3, #31
 801f950:	f003 0301 	and.w	r3, r3, #1
 801f954:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 801f956:	69bb      	ldr	r3, [r7, #24]
 801f958:	015a      	lsls	r2, r3, #5
 801f95a:	69fb      	ldr	r3, [r7, #28]
 801f95c:	4413      	add	r3, r2
 801f95e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f962:	685b      	ldr	r3, [r3, #4]
 801f964:	0fdb      	lsrs	r3, r3, #31
 801f966:	f003 0301 	and.w	r3, r3, #1
 801f96a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 801f96c:	687b      	ldr	r3, [r7, #4]
 801f96e:	689b      	ldr	r3, [r3, #8]
 801f970:	f003 0320 	and.w	r3, r3, #32
 801f974:	2b20      	cmp	r3, #32
 801f976:	d10d      	bne.n	801f994 <USB_HC_Halt+0x82>
 801f978:	68fb      	ldr	r3, [r7, #12]
 801f97a:	2b00      	cmp	r3, #0
 801f97c:	d10a      	bne.n	801f994 <USB_HC_Halt+0x82>
 801f97e:	693b      	ldr	r3, [r7, #16]
 801f980:	2b00      	cmp	r3, #0
 801f982:	d005      	beq.n	801f990 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 801f984:	697b      	ldr	r3, [r7, #20]
 801f986:	2b01      	cmp	r3, #1
 801f988:	d002      	beq.n	801f990 <USB_HC_Halt+0x7e>
 801f98a:	697b      	ldr	r3, [r7, #20]
 801f98c:	2b03      	cmp	r3, #3
 801f98e:	d101      	bne.n	801f994 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 801f990:	2300      	movs	r3, #0
 801f992:	e0d8      	b.n	801fb46 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 801f994:	697b      	ldr	r3, [r7, #20]
 801f996:	2b00      	cmp	r3, #0
 801f998:	d002      	beq.n	801f9a0 <USB_HC_Halt+0x8e>
 801f99a:	697b      	ldr	r3, [r7, #20]
 801f99c:	2b02      	cmp	r3, #2
 801f99e:	d173      	bne.n	801fa88 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801f9a0:	69bb      	ldr	r3, [r7, #24]
 801f9a2:	015a      	lsls	r2, r3, #5
 801f9a4:	69fb      	ldr	r3, [r7, #28]
 801f9a6:	4413      	add	r3, r2
 801f9a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f9ac:	681b      	ldr	r3, [r3, #0]
 801f9ae:	69ba      	ldr	r2, [r7, #24]
 801f9b0:	0151      	lsls	r1, r2, #5
 801f9b2:	69fa      	ldr	r2, [r7, #28]
 801f9b4:	440a      	add	r2, r1
 801f9b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801f9ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801f9be:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801f9c0:	687b      	ldr	r3, [r7, #4]
 801f9c2:	689b      	ldr	r3, [r3, #8]
 801f9c4:	f003 0320 	and.w	r3, r3, #32
 801f9c8:	2b00      	cmp	r3, #0
 801f9ca:	d14a      	bne.n	801fa62 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801f9cc:	687b      	ldr	r3, [r7, #4]
 801f9ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801f9d4:	2b00      	cmp	r3, #0
 801f9d6:	d133      	bne.n	801fa40 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801f9d8:	69bb      	ldr	r3, [r7, #24]
 801f9da:	015a      	lsls	r2, r3, #5
 801f9dc:	69fb      	ldr	r3, [r7, #28]
 801f9de:	4413      	add	r3, r2
 801f9e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801f9e4:	681b      	ldr	r3, [r3, #0]
 801f9e6:	69ba      	ldr	r2, [r7, #24]
 801f9e8:	0151      	lsls	r1, r2, #5
 801f9ea:	69fa      	ldr	r2, [r7, #28]
 801f9ec:	440a      	add	r2, r1
 801f9ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801f9f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f9f6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801f9f8:	69bb      	ldr	r3, [r7, #24]
 801f9fa:	015a      	lsls	r2, r3, #5
 801f9fc:	69fb      	ldr	r3, [r7, #28]
 801f9fe:	4413      	add	r3, r2
 801fa00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801fa04:	681b      	ldr	r3, [r3, #0]
 801fa06:	69ba      	ldr	r2, [r7, #24]
 801fa08:	0151      	lsls	r1, r2, #5
 801fa0a:	69fa      	ldr	r2, [r7, #28]
 801fa0c:	440a      	add	r2, r1
 801fa0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801fa12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801fa16:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 801fa18:	68bb      	ldr	r3, [r7, #8]
 801fa1a:	3301      	adds	r3, #1
 801fa1c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 801fa1e:	68bb      	ldr	r3, [r7, #8]
 801fa20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801fa24:	d82e      	bhi.n	801fa84 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801fa26:	69bb      	ldr	r3, [r7, #24]
 801fa28:	015a      	lsls	r2, r3, #5
 801fa2a:	69fb      	ldr	r3, [r7, #28]
 801fa2c:	4413      	add	r3, r2
 801fa2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801fa32:	681b      	ldr	r3, [r3, #0]
 801fa34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801fa38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801fa3c:	d0ec      	beq.n	801fa18 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801fa3e:	e081      	b.n	801fb44 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801fa40:	69bb      	ldr	r3, [r7, #24]
 801fa42:	015a      	lsls	r2, r3, #5
 801fa44:	69fb      	ldr	r3, [r7, #28]
 801fa46:	4413      	add	r3, r2
 801fa48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801fa4c:	681b      	ldr	r3, [r3, #0]
 801fa4e:	69ba      	ldr	r2, [r7, #24]
 801fa50:	0151      	lsls	r1, r2, #5
 801fa52:	69fa      	ldr	r2, [r7, #28]
 801fa54:	440a      	add	r2, r1
 801fa56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801fa5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801fa5e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801fa60:	e070      	b.n	801fb44 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801fa62:	69bb      	ldr	r3, [r7, #24]
 801fa64:	015a      	lsls	r2, r3, #5
 801fa66:	69fb      	ldr	r3, [r7, #28]
 801fa68:	4413      	add	r3, r2
 801fa6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801fa6e:	681b      	ldr	r3, [r3, #0]
 801fa70:	69ba      	ldr	r2, [r7, #24]
 801fa72:	0151      	lsls	r1, r2, #5
 801fa74:	69fa      	ldr	r2, [r7, #28]
 801fa76:	440a      	add	r2, r1
 801fa78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801fa7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801fa80:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801fa82:	e05f      	b.n	801fb44 <USB_HC_Halt+0x232>
            break;
 801fa84:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801fa86:	e05d      	b.n	801fb44 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801fa88:	69bb      	ldr	r3, [r7, #24]
 801fa8a:	015a      	lsls	r2, r3, #5
 801fa8c:	69fb      	ldr	r3, [r7, #28]
 801fa8e:	4413      	add	r3, r2
 801fa90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801fa94:	681b      	ldr	r3, [r3, #0]
 801fa96:	69ba      	ldr	r2, [r7, #24]
 801fa98:	0151      	lsls	r1, r2, #5
 801fa9a:	69fa      	ldr	r2, [r7, #28]
 801fa9c:	440a      	add	r2, r1
 801fa9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801faa2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801faa6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 801faa8:	69fb      	ldr	r3, [r7, #28]
 801faaa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801faae:	691b      	ldr	r3, [r3, #16]
 801fab0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801fab4:	2b00      	cmp	r3, #0
 801fab6:	d133      	bne.n	801fb20 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801fab8:	69bb      	ldr	r3, [r7, #24]
 801faba:	015a      	lsls	r2, r3, #5
 801fabc:	69fb      	ldr	r3, [r7, #28]
 801fabe:	4413      	add	r3, r2
 801fac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801fac4:	681b      	ldr	r3, [r3, #0]
 801fac6:	69ba      	ldr	r2, [r7, #24]
 801fac8:	0151      	lsls	r1, r2, #5
 801faca:	69fa      	ldr	r2, [r7, #28]
 801facc:	440a      	add	r2, r1
 801face:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801fad2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801fad6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801fad8:	69bb      	ldr	r3, [r7, #24]
 801fada:	015a      	lsls	r2, r3, #5
 801fadc:	69fb      	ldr	r3, [r7, #28]
 801fade:	4413      	add	r3, r2
 801fae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801fae4:	681b      	ldr	r3, [r3, #0]
 801fae6:	69ba      	ldr	r2, [r7, #24]
 801fae8:	0151      	lsls	r1, r2, #5
 801faea:	69fa      	ldr	r2, [r7, #28]
 801faec:	440a      	add	r2, r1
 801faee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801faf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801faf6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 801faf8:	68bb      	ldr	r3, [r7, #8]
 801fafa:	3301      	adds	r3, #1
 801fafc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 801fafe:	68bb      	ldr	r3, [r7, #8]
 801fb00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801fb04:	d81d      	bhi.n	801fb42 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801fb06:	69bb      	ldr	r3, [r7, #24]
 801fb08:	015a      	lsls	r2, r3, #5
 801fb0a:	69fb      	ldr	r3, [r7, #28]
 801fb0c:	4413      	add	r3, r2
 801fb0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801fb12:	681b      	ldr	r3, [r3, #0]
 801fb14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801fb18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801fb1c:	d0ec      	beq.n	801faf8 <USB_HC_Halt+0x1e6>
 801fb1e:	e011      	b.n	801fb44 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801fb20:	69bb      	ldr	r3, [r7, #24]
 801fb22:	015a      	lsls	r2, r3, #5
 801fb24:	69fb      	ldr	r3, [r7, #28]
 801fb26:	4413      	add	r3, r2
 801fb28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801fb2c:	681b      	ldr	r3, [r3, #0]
 801fb2e:	69ba      	ldr	r2, [r7, #24]
 801fb30:	0151      	lsls	r1, r2, #5
 801fb32:	69fa      	ldr	r2, [r7, #28]
 801fb34:	440a      	add	r2, r1
 801fb36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801fb3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801fb3e:	6013      	str	r3, [r2, #0]
 801fb40:	e000      	b.n	801fb44 <USB_HC_Halt+0x232>
          break;
 801fb42:	bf00      	nop
    }
  }

  return HAL_OK;
 801fb44:	2300      	movs	r3, #0
}
 801fb46:	4618      	mov	r0, r3
 801fb48:	3724      	adds	r7, #36	@ 0x24
 801fb4a:	46bd      	mov	sp, r7
 801fb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb50:	4770      	bx	lr
	...

0801fb54 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 801fb54:	b480      	push	{r7}
 801fb56:	b087      	sub	sp, #28
 801fb58:	af00      	add	r7, sp, #0
 801fb5a:	6078      	str	r0, [r7, #4]
 801fb5c:	460b      	mov	r3, r1
 801fb5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801fb60:	687b      	ldr	r3, [r7, #4]
 801fb62:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 801fb64:	78fb      	ldrb	r3, [r7, #3]
 801fb66:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 801fb68:	2301      	movs	r3, #1
 801fb6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801fb6c:	68fb      	ldr	r3, [r7, #12]
 801fb6e:	04da      	lsls	r2, r3, #19
 801fb70:	4b15      	ldr	r3, [pc, #84]	@ (801fbc8 <USB_DoPing+0x74>)
 801fb72:	4013      	ands	r3, r2
 801fb74:	693a      	ldr	r2, [r7, #16]
 801fb76:	0151      	lsls	r1, r2, #5
 801fb78:	697a      	ldr	r2, [r7, #20]
 801fb7a:	440a      	add	r2, r1
 801fb7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801fb80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801fb84:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 801fb86:	693b      	ldr	r3, [r7, #16]
 801fb88:	015a      	lsls	r2, r3, #5
 801fb8a:	697b      	ldr	r3, [r7, #20]
 801fb8c:	4413      	add	r3, r2
 801fb8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801fb92:	681b      	ldr	r3, [r3, #0]
 801fb94:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801fb96:	68bb      	ldr	r3, [r7, #8]
 801fb98:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801fb9c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 801fb9e:	68bb      	ldr	r3, [r7, #8]
 801fba0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801fba4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 801fba6:	693b      	ldr	r3, [r7, #16]
 801fba8:	015a      	lsls	r2, r3, #5
 801fbaa:	697b      	ldr	r3, [r7, #20]
 801fbac:	4413      	add	r3, r2
 801fbae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801fbb2:	461a      	mov	r2, r3
 801fbb4:	68bb      	ldr	r3, [r7, #8]
 801fbb6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 801fbb8:	2300      	movs	r3, #0
}
 801fbba:	4618      	mov	r0, r3
 801fbbc:	371c      	adds	r7, #28
 801fbbe:	46bd      	mov	sp, r7
 801fbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbc4:	4770      	bx	lr
 801fbc6:	bf00      	nop
 801fbc8:	1ff80000 	.word	0x1ff80000

0801fbcc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 801fbcc:	b580      	push	{r7, lr}
 801fbce:	b088      	sub	sp, #32
 801fbd0:	af00      	add	r7, sp, #0
 801fbd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 801fbd4:	2300      	movs	r3, #0
 801fbd6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801fbd8:	687b      	ldr	r3, [r7, #4]
 801fbda:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 801fbdc:	2300      	movs	r3, #0
 801fbde:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 801fbe0:	6878      	ldr	r0, [r7, #4]
 801fbe2:	f7fe ff98 	bl	801eb16 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801fbe6:	2110      	movs	r1, #16
 801fbe8:	6878      	ldr	r0, [r7, #4]
 801fbea:	f7fe fff1 	bl	801ebd0 <USB_FlushTxFifo>
 801fbee:	4603      	mov	r3, r0
 801fbf0:	2b00      	cmp	r3, #0
 801fbf2:	d001      	beq.n	801fbf8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 801fbf4:	2301      	movs	r3, #1
 801fbf6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801fbf8:	6878      	ldr	r0, [r7, #4]
 801fbfa:	f7ff f81b 	bl	801ec34 <USB_FlushRxFifo>
 801fbfe:	4603      	mov	r3, r0
 801fc00:	2b00      	cmp	r3, #0
 801fc02:	d001      	beq.n	801fc08 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 801fc04:	2301      	movs	r3, #1
 801fc06:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 801fc08:	2300      	movs	r3, #0
 801fc0a:	61bb      	str	r3, [r7, #24]
 801fc0c:	e01f      	b.n	801fc4e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 801fc0e:	69bb      	ldr	r3, [r7, #24]
 801fc10:	015a      	lsls	r2, r3, #5
 801fc12:	697b      	ldr	r3, [r7, #20]
 801fc14:	4413      	add	r3, r2
 801fc16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801fc1a:	681b      	ldr	r3, [r3, #0]
 801fc1c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 801fc1e:	693b      	ldr	r3, [r7, #16]
 801fc20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801fc24:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 801fc26:	693b      	ldr	r3, [r7, #16]
 801fc28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801fc2c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801fc2e:	693b      	ldr	r3, [r7, #16]
 801fc30:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801fc34:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 801fc36:	69bb      	ldr	r3, [r7, #24]
 801fc38:	015a      	lsls	r2, r3, #5
 801fc3a:	697b      	ldr	r3, [r7, #20]
 801fc3c:	4413      	add	r3, r2
 801fc3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801fc42:	461a      	mov	r2, r3
 801fc44:	693b      	ldr	r3, [r7, #16]
 801fc46:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 801fc48:	69bb      	ldr	r3, [r7, #24]
 801fc4a:	3301      	adds	r3, #1
 801fc4c:	61bb      	str	r3, [r7, #24]
 801fc4e:	69bb      	ldr	r3, [r7, #24]
 801fc50:	2b0f      	cmp	r3, #15
 801fc52:	d9dc      	bls.n	801fc0e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 801fc54:	2300      	movs	r3, #0
 801fc56:	61bb      	str	r3, [r7, #24]
 801fc58:	e034      	b.n	801fcc4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 801fc5a:	69bb      	ldr	r3, [r7, #24]
 801fc5c:	015a      	lsls	r2, r3, #5
 801fc5e:	697b      	ldr	r3, [r7, #20]
 801fc60:	4413      	add	r3, r2
 801fc62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801fc66:	681b      	ldr	r3, [r3, #0]
 801fc68:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 801fc6a:	693b      	ldr	r3, [r7, #16]
 801fc6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801fc70:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 801fc72:	693b      	ldr	r3, [r7, #16]
 801fc74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801fc78:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801fc7a:	693b      	ldr	r3, [r7, #16]
 801fc7c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801fc80:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 801fc82:	69bb      	ldr	r3, [r7, #24]
 801fc84:	015a      	lsls	r2, r3, #5
 801fc86:	697b      	ldr	r3, [r7, #20]
 801fc88:	4413      	add	r3, r2
 801fc8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801fc8e:	461a      	mov	r2, r3
 801fc90:	693b      	ldr	r3, [r7, #16]
 801fc92:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 801fc94:	68fb      	ldr	r3, [r7, #12]
 801fc96:	3301      	adds	r3, #1
 801fc98:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 801fc9a:	68fb      	ldr	r3, [r7, #12]
 801fc9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801fca0:	d80c      	bhi.n	801fcbc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801fca2:	69bb      	ldr	r3, [r7, #24]
 801fca4:	015a      	lsls	r2, r3, #5
 801fca6:	697b      	ldr	r3, [r7, #20]
 801fca8:	4413      	add	r3, r2
 801fcaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801fcae:	681b      	ldr	r3, [r3, #0]
 801fcb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801fcb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801fcb8:	d0ec      	beq.n	801fc94 <USB_StopHost+0xc8>
 801fcba:	e000      	b.n	801fcbe <USB_StopHost+0xf2>
        break;
 801fcbc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 801fcbe:	69bb      	ldr	r3, [r7, #24]
 801fcc0:	3301      	adds	r3, #1
 801fcc2:	61bb      	str	r3, [r7, #24]
 801fcc4:	69bb      	ldr	r3, [r7, #24]
 801fcc6:	2b0f      	cmp	r3, #15
 801fcc8:	d9c7      	bls.n	801fc5a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 801fcca:	697b      	ldr	r3, [r7, #20]
 801fccc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801fcd0:	461a      	mov	r2, r3
 801fcd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fcd6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 801fcd8:	687b      	ldr	r3, [r7, #4]
 801fcda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801fcde:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 801fce0:	6878      	ldr	r0, [r7, #4]
 801fce2:	f7fe ff07 	bl	801eaf4 <USB_EnableGlobalInt>

  return ret;
 801fce6:	7ffb      	ldrb	r3, [r7, #31]
}
 801fce8:	4618      	mov	r0, r3
 801fcea:	3720      	adds	r7, #32
 801fcec:	46bd      	mov	sp, r7
 801fcee:	bd80      	pop	{r7, pc}

0801fcf0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801fcf0:	b580      	push	{r7, lr}
 801fcf2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 801fcf4:	4904      	ldr	r1, [pc, #16]	@ (801fd08 <MX_FATFS_Init+0x18>)
 801fcf6:	4805      	ldr	r0, [pc, #20]	@ (801fd0c <MX_FATFS_Init+0x1c>)
 801fcf8:	f006 fa0e 	bl	8026118 <FATFS_LinkDriver>
 801fcfc:	4603      	mov	r3, r0
 801fcfe:	461a      	mov	r2, r3
 801fd00:	4b03      	ldr	r3, [pc, #12]	@ (801fd10 <MX_FATFS_Init+0x20>)
 801fd02:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801fd04:	bf00      	nop
 801fd06:	bd80      	pop	{r7, pc}
 801fd08:	2001b040 	.word	0x2001b040
 801fd0c:	0803a2b8 	.word	0x0803a2b8
 801fd10:	2001b03c 	.word	0x2001b03c

0801fd14 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801fd14:	b480      	push	{r7}
 801fd16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801fd18:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801fd1a:	4618      	mov	r0, r3
 801fd1c:	46bd      	mov	sp, r7
 801fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd22:	4770      	bx	lr

0801fd24 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 801fd24:	b480      	push	{r7}
 801fd26:	b083      	sub	sp, #12
 801fd28:	af00      	add	r7, sp, #0
 801fd2a:	4603      	mov	r3, r0
 801fd2c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 801fd2e:	2300      	movs	r3, #0
}
 801fd30:	4618      	mov	r0, r3
 801fd32:	370c      	adds	r7, #12
 801fd34:	46bd      	mov	sp, r7
 801fd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd3a:	4770      	bx	lr

0801fd3c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 801fd3c:	b580      	push	{r7, lr}
 801fd3e:	b084      	sub	sp, #16
 801fd40:	af00      	add	r7, sp, #0
 801fd42:	4603      	mov	r3, r0
 801fd44:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 801fd46:	2301      	movs	r3, #1
 801fd48:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 801fd4a:	79fb      	ldrb	r3, [r7, #7]
 801fd4c:	4619      	mov	r1, r3
 801fd4e:	4808      	ldr	r0, [pc, #32]	@ (801fd70 <USBH_status+0x34>)
 801fd50:	f000 fe71 	bl	8020a36 <USBH_MSC_UnitIsReady>
 801fd54:	4603      	mov	r3, r0
 801fd56:	2b00      	cmp	r3, #0
 801fd58:	d002      	beq.n	801fd60 <USBH_status+0x24>
  {
    res = RES_OK;
 801fd5a:	2300      	movs	r3, #0
 801fd5c:	73fb      	strb	r3, [r7, #15]
 801fd5e:	e001      	b.n	801fd64 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 801fd60:	2301      	movs	r3, #1
 801fd62:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 801fd64:	7bfb      	ldrb	r3, [r7, #15]
}
 801fd66:	4618      	mov	r0, r3
 801fd68:	3710      	adds	r7, #16
 801fd6a:	46bd      	mov	sp, r7
 801fd6c:	bd80      	pop	{r7, pc}
 801fd6e:	bf00      	nop
 801fd70:	2002dee4 	.word	0x2002dee4

0801fd74 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801fd74:	b580      	push	{r7, lr}
 801fd76:	b094      	sub	sp, #80	@ 0x50
 801fd78:	af02      	add	r7, sp, #8
 801fd7a:	60b9      	str	r1, [r7, #8]
 801fd7c:	607a      	str	r2, [r7, #4]
 801fd7e:	603b      	str	r3, [r7, #0]
 801fd80:	4603      	mov	r3, r0
 801fd82:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801fd84:	2301      	movs	r3, #1
 801fd86:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 801fd8a:	7bf9      	ldrb	r1, [r7, #15]
 801fd8c:	683b      	ldr	r3, [r7, #0]
 801fd8e:	9300      	str	r3, [sp, #0]
 801fd90:	68bb      	ldr	r3, [r7, #8]
 801fd92:	687a      	ldr	r2, [r7, #4]
 801fd94:	4813      	ldr	r0, [pc, #76]	@ (801fde4 <USBH_read+0x70>)
 801fd96:	f000 fe98 	bl	8020aca <USBH_MSC_Read>
 801fd9a:	4603      	mov	r3, r0
 801fd9c:	2b00      	cmp	r3, #0
 801fd9e:	d103      	bne.n	801fda8 <USBH_read+0x34>
  {
    res = RES_OK;
 801fda0:	2300      	movs	r3, #0
 801fda2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801fda6:	e017      	b.n	801fdd8 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 801fda8:	f107 0210 	add.w	r2, r7, #16
 801fdac:	7bfb      	ldrb	r3, [r7, #15]
 801fdae:	4619      	mov	r1, r3
 801fdb0:	480c      	ldr	r0, [pc, #48]	@ (801fde4 <USBH_read+0x70>)
 801fdb2:	f000 fe66 	bl	8020a82 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 801fdb6:	7f7b      	ldrb	r3, [r7, #29]
 801fdb8:	2b3a      	cmp	r3, #58	@ 0x3a
 801fdba:	d005      	beq.n	801fdc8 <USBH_read+0x54>
 801fdbc:	2b3a      	cmp	r3, #58	@ 0x3a
 801fdbe:	dc07      	bgt.n	801fdd0 <USBH_read+0x5c>
 801fdc0:	2b04      	cmp	r3, #4
 801fdc2:	d001      	beq.n	801fdc8 <USBH_read+0x54>
 801fdc4:	2b28      	cmp	r3, #40	@ 0x28
 801fdc6:	d103      	bne.n	801fdd0 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 801fdc8:	2303      	movs	r3, #3
 801fdca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 801fdce:	e003      	b.n	801fdd8 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 801fdd0:	2301      	movs	r3, #1
 801fdd2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 801fdd6:	bf00      	nop
    }
  }

  return res;
 801fdd8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 801fddc:	4618      	mov	r0, r3
 801fdde:	3748      	adds	r7, #72	@ 0x48
 801fde0:	46bd      	mov	sp, r7
 801fde2:	bd80      	pop	{r7, pc}
 801fde4:	2002dee4 	.word	0x2002dee4

0801fde8 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801fde8:	b580      	push	{r7, lr}
 801fdea:	b094      	sub	sp, #80	@ 0x50
 801fdec:	af02      	add	r7, sp, #8
 801fdee:	60b9      	str	r1, [r7, #8]
 801fdf0:	607a      	str	r2, [r7, #4]
 801fdf2:	603b      	str	r3, [r7, #0]
 801fdf4:	4603      	mov	r3, r0
 801fdf6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801fdf8:	2301      	movs	r3, #1
 801fdfa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 801fdfe:	7bf9      	ldrb	r1, [r7, #15]
 801fe00:	683b      	ldr	r3, [r7, #0]
 801fe02:	9300      	str	r3, [sp, #0]
 801fe04:	68bb      	ldr	r3, [r7, #8]
 801fe06:	687a      	ldr	r2, [r7, #4]
 801fe08:	4817      	ldr	r0, [pc, #92]	@ (801fe68 <USBH_write+0x80>)
 801fe0a:	f000 fec7 	bl	8020b9c <USBH_MSC_Write>
 801fe0e:	4603      	mov	r3, r0
 801fe10:	2b00      	cmp	r3, #0
 801fe12:	d103      	bne.n	801fe1c <USBH_write+0x34>
  {
    res = RES_OK;
 801fe14:	2300      	movs	r3, #0
 801fe16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801fe1a:	e01f      	b.n	801fe5c <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 801fe1c:	f107 0210 	add.w	r2, r7, #16
 801fe20:	7bfb      	ldrb	r3, [r7, #15]
 801fe22:	4619      	mov	r1, r3
 801fe24:	4810      	ldr	r0, [pc, #64]	@ (801fe68 <USBH_write+0x80>)
 801fe26:	f000 fe2c 	bl	8020a82 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 801fe2a:	7f7b      	ldrb	r3, [r7, #29]
 801fe2c:	2b3a      	cmp	r3, #58	@ 0x3a
 801fe2e:	d00d      	beq.n	801fe4c <USBH_write+0x64>
 801fe30:	2b3a      	cmp	r3, #58	@ 0x3a
 801fe32:	dc0f      	bgt.n	801fe54 <USBH_write+0x6c>
 801fe34:	2b28      	cmp	r3, #40	@ 0x28
 801fe36:	d009      	beq.n	801fe4c <USBH_write+0x64>
 801fe38:	2b28      	cmp	r3, #40	@ 0x28
 801fe3a:	dc0b      	bgt.n	801fe54 <USBH_write+0x6c>
 801fe3c:	2b04      	cmp	r3, #4
 801fe3e:	d005      	beq.n	801fe4c <USBH_write+0x64>
 801fe40:	2b27      	cmp	r3, #39	@ 0x27
 801fe42:	d107      	bne.n	801fe54 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 801fe44:	2302      	movs	r3, #2
 801fe46:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 801fe4a:	e007      	b.n	801fe5c <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 801fe4c:	2303      	movs	r3, #3
 801fe4e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 801fe52:	e003      	b.n	801fe5c <USBH_write+0x74>

    default:
      res = RES_ERROR;
 801fe54:	2301      	movs	r3, #1
 801fe56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 801fe5a:	bf00      	nop
    }
  }

  return res;
 801fe5c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 801fe60:	4618      	mov	r0, r3
 801fe62:	3748      	adds	r7, #72	@ 0x48
 801fe64:	46bd      	mov	sp, r7
 801fe66:	bd80      	pop	{r7, pc}
 801fe68:	2002dee4 	.word	0x2002dee4

0801fe6c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801fe6c:	b580      	push	{r7, lr}
 801fe6e:	b090      	sub	sp, #64	@ 0x40
 801fe70:	af00      	add	r7, sp, #0
 801fe72:	4603      	mov	r3, r0
 801fe74:	603a      	str	r2, [r7, #0]
 801fe76:	71fb      	strb	r3, [r7, #7]
 801fe78:	460b      	mov	r3, r1
 801fe7a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801fe7c:	2301      	movs	r3, #1
 801fe7e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 801fe82:	79bb      	ldrb	r3, [r7, #6]
 801fe84:	2b03      	cmp	r3, #3
 801fe86:	d852      	bhi.n	801ff2e <USBH_ioctl+0xc2>
 801fe88:	a201      	add	r2, pc, #4	@ (adr r2, 801fe90 <USBH_ioctl+0x24>)
 801fe8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fe8e:	bf00      	nop
 801fe90:	0801fea1 	.word	0x0801fea1
 801fe94:	0801fea9 	.word	0x0801fea9
 801fe98:	0801fed3 	.word	0x0801fed3
 801fe9c:	0801feff 	.word	0x0801feff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 801fea0:	2300      	movs	r3, #0
 801fea2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 801fea6:	e045      	b.n	801ff34 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 801fea8:	f107 0208 	add.w	r2, r7, #8
 801feac:	79fb      	ldrb	r3, [r7, #7]
 801feae:	4619      	mov	r1, r3
 801feb0:	4823      	ldr	r0, [pc, #140]	@ (801ff40 <USBH_ioctl+0xd4>)
 801feb2:	f000 fde6 	bl	8020a82 <USBH_MSC_GetLUNInfo>
 801feb6:	4603      	mov	r3, r0
 801feb8:	2b00      	cmp	r3, #0
 801feba:	d106      	bne.n	801feca <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 801febc:	68fa      	ldr	r2, [r7, #12]
 801febe:	683b      	ldr	r3, [r7, #0]
 801fec0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 801fec2:	2300      	movs	r3, #0
 801fec4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 801fec8:	e034      	b.n	801ff34 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 801feca:	2301      	movs	r3, #1
 801fecc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 801fed0:	e030      	b.n	801ff34 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 801fed2:	f107 0208 	add.w	r2, r7, #8
 801fed6:	79fb      	ldrb	r3, [r7, #7]
 801fed8:	4619      	mov	r1, r3
 801feda:	4819      	ldr	r0, [pc, #100]	@ (801ff40 <USBH_ioctl+0xd4>)
 801fedc:	f000 fdd1 	bl	8020a82 <USBH_MSC_GetLUNInfo>
 801fee0:	4603      	mov	r3, r0
 801fee2:	2b00      	cmp	r3, #0
 801fee4:	d107      	bne.n	801fef6 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 801fee6:	8a3b      	ldrh	r3, [r7, #16]
 801fee8:	461a      	mov	r2, r3
 801feea:	683b      	ldr	r3, [r7, #0]
 801feec:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 801feee:	2300      	movs	r3, #0
 801fef0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 801fef4:	e01e      	b.n	801ff34 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 801fef6:	2301      	movs	r3, #1
 801fef8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 801fefc:	e01a      	b.n	801ff34 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 801fefe:	f107 0208 	add.w	r2, r7, #8
 801ff02:	79fb      	ldrb	r3, [r7, #7]
 801ff04:	4619      	mov	r1, r3
 801ff06:	480e      	ldr	r0, [pc, #56]	@ (801ff40 <USBH_ioctl+0xd4>)
 801ff08:	f000 fdbb 	bl	8020a82 <USBH_MSC_GetLUNInfo>
 801ff0c:	4603      	mov	r3, r0
 801ff0e:	2b00      	cmp	r3, #0
 801ff10:	d109      	bne.n	801ff26 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 801ff12:	8a3b      	ldrh	r3, [r7, #16]
 801ff14:	0a5b      	lsrs	r3, r3, #9
 801ff16:	b29b      	uxth	r3, r3
 801ff18:	461a      	mov	r2, r3
 801ff1a:	683b      	ldr	r3, [r7, #0]
 801ff1c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 801ff1e:	2300      	movs	r3, #0
 801ff20:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 801ff24:	e006      	b.n	801ff34 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 801ff26:	2301      	movs	r3, #1
 801ff28:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 801ff2c:	e002      	b.n	801ff34 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 801ff2e:	2304      	movs	r3, #4
 801ff30:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 801ff34:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801ff38:	4618      	mov	r0, r3
 801ff3a:	3740      	adds	r7, #64	@ 0x40
 801ff3c:	46bd      	mov	sp, r7
 801ff3e:	bd80      	pop	{r7, pc}
 801ff40:	2002dee4 	.word	0x2002dee4

0801ff44 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 801ff44:	b590      	push	{r4, r7, lr}
 801ff46:	b089      	sub	sp, #36	@ 0x24
 801ff48:	af04      	add	r7, sp, #16
 801ff4a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 801ff4c:	687b      	ldr	r3, [r7, #4]
 801ff4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801ff52:	7919      	ldrb	r1, [r3, #4]
 801ff54:	2350      	movs	r3, #80	@ 0x50
 801ff56:	2206      	movs	r2, #6
 801ff58:	6878      	ldr	r0, [r7, #4]
 801ff5a:	f001 fd76 	bl	8021a4a <USBH_FindInterface>
 801ff5e:	4603      	mov	r3, r0
 801ff60:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 801ff62:	7bfb      	ldrb	r3, [r7, #15]
 801ff64:	2bff      	cmp	r3, #255	@ 0xff
 801ff66:	d002      	beq.n	801ff6e <USBH_MSC_InterfaceInit+0x2a>
 801ff68:	7bfb      	ldrb	r3, [r7, #15]
 801ff6a:	2b01      	cmp	r3, #1
 801ff6c:	d901      	bls.n	801ff72 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 801ff6e:	2302      	movs	r3, #2
 801ff70:	e106      	b.n	8020180 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 801ff72:	7bfb      	ldrb	r3, [r7, #15]
 801ff74:	4619      	mov	r1, r3
 801ff76:	6878      	ldr	r0, [r7, #4]
 801ff78:	f001 fd4b 	bl	8021a12 <USBH_SelectInterface>
 801ff7c:	4603      	mov	r3, r0
 801ff7e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 801ff80:	7bbb      	ldrb	r3, [r7, #14]
 801ff82:	2b00      	cmp	r3, #0
 801ff84:	d001      	beq.n	801ff8a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 801ff86:	2302      	movs	r3, #2
 801ff88:	e0fa      	b.n	8020180 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 801ff8a:	687b      	ldr	r3, [r7, #4]
 801ff8c:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 801ff90:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801ff94:	f00a fb7e 	bl	802a694 <malloc>
 801ff98:	4603      	mov	r3, r0
 801ff9a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801ff9c:	687b      	ldr	r3, [r7, #4]
 801ff9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801ffa2:	69db      	ldr	r3, [r3, #28]
 801ffa4:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 801ffa6:	68bb      	ldr	r3, [r7, #8]
 801ffa8:	2b00      	cmp	r3, #0
 801ffaa:	d101      	bne.n	801ffb0 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 801ffac:	2302      	movs	r3, #2
 801ffae:	e0e7      	b.n	8020180 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 801ffb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801ffb4:	2100      	movs	r1, #0
 801ffb6:	68b8      	ldr	r0, [r7, #8]
 801ffb8:	f00b fda8 	bl	802bb0c <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 801ffbc:	7bfb      	ldrb	r3, [r7, #15]
 801ffbe:	687a      	ldr	r2, [r7, #4]
 801ffc0:	211a      	movs	r1, #26
 801ffc2:	fb01 f303 	mul.w	r3, r1, r3
 801ffc6:	4413      	add	r3, r2
 801ffc8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 801ffcc:	781b      	ldrb	r3, [r3, #0]
 801ffce:	b25b      	sxtb	r3, r3
 801ffd0:	2b00      	cmp	r3, #0
 801ffd2:	da16      	bge.n	8020002 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 801ffd4:	7bfb      	ldrb	r3, [r7, #15]
 801ffd6:	687a      	ldr	r2, [r7, #4]
 801ffd8:	211a      	movs	r1, #26
 801ffda:	fb01 f303 	mul.w	r3, r1, r3
 801ffde:	4413      	add	r3, r2
 801ffe0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 801ffe4:	781a      	ldrb	r2, [r3, #0]
 801ffe6:	68bb      	ldr	r3, [r7, #8]
 801ffe8:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801ffea:	7bfb      	ldrb	r3, [r7, #15]
 801ffec:	687a      	ldr	r2, [r7, #4]
 801ffee:	211a      	movs	r1, #26
 801fff0:	fb01 f303 	mul.w	r3, r1, r3
 801fff4:	4413      	add	r3, r2
 801fff6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 801fffa:	881a      	ldrh	r2, [r3, #0]
 801fffc:	68bb      	ldr	r3, [r7, #8]
 801fffe:	815a      	strh	r2, [r3, #10]
 8020000:	e015      	b.n	802002e <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8020002:	7bfb      	ldrb	r3, [r7, #15]
 8020004:	687a      	ldr	r2, [r7, #4]
 8020006:	211a      	movs	r1, #26
 8020008:	fb01 f303 	mul.w	r3, r1, r3
 802000c:	4413      	add	r3, r2
 802000e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8020012:	781a      	ldrb	r2, [r3, #0]
 8020014:	68bb      	ldr	r3, [r7, #8]
 8020016:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8020018:	7bfb      	ldrb	r3, [r7, #15]
 802001a:	687a      	ldr	r2, [r7, #4]
 802001c:	211a      	movs	r1, #26
 802001e:	fb01 f303 	mul.w	r3, r1, r3
 8020022:	4413      	add	r3, r2
 8020024:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8020028:	881a      	ldrh	r2, [r3, #0]
 802002a:	68bb      	ldr	r3, [r7, #8]
 802002c:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 802002e:	7bfb      	ldrb	r3, [r7, #15]
 8020030:	687a      	ldr	r2, [r7, #4]
 8020032:	211a      	movs	r1, #26
 8020034:	fb01 f303 	mul.w	r3, r1, r3
 8020038:	4413      	add	r3, r2
 802003a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 802003e:	781b      	ldrb	r3, [r3, #0]
 8020040:	b25b      	sxtb	r3, r3
 8020042:	2b00      	cmp	r3, #0
 8020044:	da16      	bge.n	8020074 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8020046:	7bfb      	ldrb	r3, [r7, #15]
 8020048:	687a      	ldr	r2, [r7, #4]
 802004a:	211a      	movs	r1, #26
 802004c:	fb01 f303 	mul.w	r3, r1, r3
 8020050:	4413      	add	r3, r2
 8020052:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8020056:	781a      	ldrb	r2, [r3, #0]
 8020058:	68bb      	ldr	r3, [r7, #8]
 802005a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802005c:	7bfb      	ldrb	r3, [r7, #15]
 802005e:	687a      	ldr	r2, [r7, #4]
 8020060:	211a      	movs	r1, #26
 8020062:	fb01 f303 	mul.w	r3, r1, r3
 8020066:	4413      	add	r3, r2
 8020068:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 802006c:	881a      	ldrh	r2, [r3, #0]
 802006e:	68bb      	ldr	r3, [r7, #8]
 8020070:	815a      	strh	r2, [r3, #10]
 8020072:	e015      	b.n	80200a0 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8020074:	7bfb      	ldrb	r3, [r7, #15]
 8020076:	687a      	ldr	r2, [r7, #4]
 8020078:	211a      	movs	r1, #26
 802007a:	fb01 f303 	mul.w	r3, r1, r3
 802007e:	4413      	add	r3, r2
 8020080:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8020084:	781a      	ldrb	r2, [r3, #0]
 8020086:	68bb      	ldr	r3, [r7, #8]
 8020088:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802008a:	7bfb      	ldrb	r3, [r7, #15]
 802008c:	687a      	ldr	r2, [r7, #4]
 802008e:	211a      	movs	r1, #26
 8020090:	fb01 f303 	mul.w	r3, r1, r3
 8020094:	4413      	add	r3, r2
 8020096:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 802009a:	881a      	ldrh	r2, [r3, #0]
 802009c:	68bb      	ldr	r3, [r7, #8]
 802009e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80200a0:	68bb      	ldr	r3, [r7, #8]
 80200a2:	2200      	movs	r2, #0
 80200a4:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80200a6:	68bb      	ldr	r3, [r7, #8]
 80200a8:	2200      	movs	r2, #0
 80200aa:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80200ac:	68bb      	ldr	r3, [r7, #8]
 80200ae:	2200      	movs	r2, #0
 80200b0:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80200b2:	68bb      	ldr	r3, [r7, #8]
 80200b4:	799b      	ldrb	r3, [r3, #6]
 80200b6:	4619      	mov	r1, r3
 80200b8:	6878      	ldr	r0, [r7, #4]
 80200ba:	f003 fa62 	bl	8023582 <USBH_AllocPipe>
 80200be:	4603      	mov	r3, r0
 80200c0:	461a      	mov	r2, r3
 80200c2:	68bb      	ldr	r3, [r7, #8]
 80200c4:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80200c6:	68bb      	ldr	r3, [r7, #8]
 80200c8:	79db      	ldrb	r3, [r3, #7]
 80200ca:	4619      	mov	r1, r3
 80200cc:	6878      	ldr	r0, [r7, #4]
 80200ce:	f003 fa58 	bl	8023582 <USBH_AllocPipe>
 80200d2:	4603      	mov	r3, r0
 80200d4:	461a      	mov	r2, r3
 80200d6:	68bb      	ldr	r3, [r7, #8]
 80200d8:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 80200da:	6878      	ldr	r0, [r7, #4]
 80200dc:	f000 fe02 	bl	8020ce4 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 80200e0:	68bb      	ldr	r3, [r7, #8]
 80200e2:	799b      	ldrb	r3, [r3, #6]
 80200e4:	2b00      	cmp	r3, #0
 80200e6:	d01e      	beq.n	8020126 <USBH_MSC_InterfaceInit+0x1e2>
 80200e8:	68bb      	ldr	r3, [r7, #8]
 80200ea:	891b      	ldrh	r3, [r3, #8]
 80200ec:	2b00      	cmp	r3, #0
 80200ee:	d01a      	beq.n	8020126 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80200f0:	68bb      	ldr	r3, [r7, #8]
 80200f2:	7959      	ldrb	r1, [r3, #5]
 80200f4:	68bb      	ldr	r3, [r7, #8]
 80200f6:	7998      	ldrb	r0, [r3, #6]
 80200f8:	687b      	ldr	r3, [r7, #4]
 80200fa:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80200fe:	687b      	ldr	r3, [r7, #4]
 8020100:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8020104:	68ba      	ldr	r2, [r7, #8]
 8020106:	8912      	ldrh	r2, [r2, #8]
 8020108:	9202      	str	r2, [sp, #8]
 802010a:	2202      	movs	r2, #2
 802010c:	9201      	str	r2, [sp, #4]
 802010e:	9300      	str	r3, [sp, #0]
 8020110:	4623      	mov	r3, r4
 8020112:	4602      	mov	r2, r0
 8020114:	6878      	ldr	r0, [r7, #4]
 8020116:	f003 fa05 	bl	8023524 <USBH_OpenPipe>
 802011a:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 802011c:	68bb      	ldr	r3, [r7, #8]
 802011e:	79db      	ldrb	r3, [r3, #7]
 8020120:	2b00      	cmp	r3, #0
 8020122:	d02c      	beq.n	802017e <USBH_MSC_InterfaceInit+0x23a>
 8020124:	e001      	b.n	802012a <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8020126:	2303      	movs	r3, #3
 8020128:	e02a      	b.n	8020180 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 802012a:	68bb      	ldr	r3, [r7, #8]
 802012c:	895b      	ldrh	r3, [r3, #10]
 802012e:	2b00      	cmp	r3, #0
 8020130:	d025      	beq.n	802017e <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8020132:	68bb      	ldr	r3, [r7, #8]
 8020134:	7919      	ldrb	r1, [r3, #4]
 8020136:	68bb      	ldr	r3, [r7, #8]
 8020138:	79d8      	ldrb	r0, [r3, #7]
 802013a:	687b      	ldr	r3, [r7, #4]
 802013c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8020140:	687b      	ldr	r3, [r7, #4]
 8020142:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8020146:	68ba      	ldr	r2, [r7, #8]
 8020148:	8952      	ldrh	r2, [r2, #10]
 802014a:	9202      	str	r2, [sp, #8]
 802014c:	2202      	movs	r2, #2
 802014e:	9201      	str	r2, [sp, #4]
 8020150:	9300      	str	r3, [sp, #0]
 8020152:	4623      	mov	r3, r4
 8020154:	4602      	mov	r2, r0
 8020156:	6878      	ldr	r0, [r7, #4]
 8020158:	f003 f9e4 	bl	8023524 <USBH_OpenPipe>
 802015c:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 802015e:	68bb      	ldr	r3, [r7, #8]
 8020160:	791b      	ldrb	r3, [r3, #4]
 8020162:	2200      	movs	r2, #0
 8020164:	4619      	mov	r1, r3
 8020166:	6878      	ldr	r0, [r7, #4]
 8020168:	f00a f99c 	bl	802a4a4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 802016c:	68bb      	ldr	r3, [r7, #8]
 802016e:	795b      	ldrb	r3, [r3, #5]
 8020170:	2200      	movs	r2, #0
 8020172:	4619      	mov	r1, r3
 8020174:	6878      	ldr	r0, [r7, #4]
 8020176:	f00a f995 	bl	802a4a4 <USBH_LL_SetToggle>

  return USBH_OK;
 802017a:	2300      	movs	r3, #0
 802017c:	e000      	b.n	8020180 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 802017e:	2303      	movs	r3, #3
}
 8020180:	4618      	mov	r0, r3
 8020182:	3714      	adds	r7, #20
 8020184:	46bd      	mov	sp, r7
 8020186:	bd90      	pop	{r4, r7, pc}

08020188 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8020188:	b580      	push	{r7, lr}
 802018a:	b084      	sub	sp, #16
 802018c:	af00      	add	r7, sp, #0
 802018e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8020190:	687b      	ldr	r3, [r7, #4]
 8020192:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8020196:	69db      	ldr	r3, [r3, #28]
 8020198:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 802019a:	68fb      	ldr	r3, [r7, #12]
 802019c:	795b      	ldrb	r3, [r3, #5]
 802019e:	2b00      	cmp	r3, #0
 80201a0:	d00e      	beq.n	80201c0 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80201a2:	68fb      	ldr	r3, [r7, #12]
 80201a4:	795b      	ldrb	r3, [r3, #5]
 80201a6:	4619      	mov	r1, r3
 80201a8:	6878      	ldr	r0, [r7, #4]
 80201aa:	f003 f9da 	bl	8023562 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80201ae:	68fb      	ldr	r3, [r7, #12]
 80201b0:	795b      	ldrb	r3, [r3, #5]
 80201b2:	4619      	mov	r1, r3
 80201b4:	6878      	ldr	r0, [r7, #4]
 80201b6:	f003 fa05 	bl	80235c4 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80201ba:	68fb      	ldr	r3, [r7, #12]
 80201bc:	2200      	movs	r2, #0
 80201be:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 80201c0:	68fb      	ldr	r3, [r7, #12]
 80201c2:	791b      	ldrb	r3, [r3, #4]
 80201c4:	2b00      	cmp	r3, #0
 80201c6:	d00e      	beq.n	80201e6 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80201c8:	68fb      	ldr	r3, [r7, #12]
 80201ca:	791b      	ldrb	r3, [r3, #4]
 80201cc:	4619      	mov	r1, r3
 80201ce:	6878      	ldr	r0, [r7, #4]
 80201d0:	f003 f9c7 	bl	8023562 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 80201d4:	68fb      	ldr	r3, [r7, #12]
 80201d6:	791b      	ldrb	r3, [r3, #4]
 80201d8:	4619      	mov	r1, r3
 80201da:	6878      	ldr	r0, [r7, #4]
 80201dc:	f003 f9f2 	bl	80235c4 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80201e0:	68fb      	ldr	r3, [r7, #12]
 80201e2:	2200      	movs	r2, #0
 80201e4:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80201e6:	687b      	ldr	r3, [r7, #4]
 80201e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80201ec:	69db      	ldr	r3, [r3, #28]
 80201ee:	2b00      	cmp	r3, #0
 80201f0:	d00b      	beq.n	802020a <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80201f2:	687b      	ldr	r3, [r7, #4]
 80201f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80201f8:	69db      	ldr	r3, [r3, #28]
 80201fa:	4618      	mov	r0, r3
 80201fc:	f00a fa52 	bl	802a6a4 <free>
    phost->pActiveClass->pData = 0U;
 8020200:	687b      	ldr	r3, [r7, #4]
 8020202:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8020206:	2200      	movs	r2, #0
 8020208:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 802020a:	2300      	movs	r3, #0
}
 802020c:	4618      	mov	r0, r3
 802020e:	3710      	adds	r7, #16
 8020210:	46bd      	mov	sp, r7
 8020212:	bd80      	pop	{r7, pc}

08020214 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8020214:	b580      	push	{r7, lr}
 8020216:	b084      	sub	sp, #16
 8020218:	af00      	add	r7, sp, #0
 802021a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802021c:	687b      	ldr	r3, [r7, #4]
 802021e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8020222:	69db      	ldr	r3, [r3, #28]
 8020224:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8020226:	2301      	movs	r3, #1
 8020228:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 802022a:	68bb      	ldr	r3, [r7, #8]
 802022c:	7b9b      	ldrb	r3, [r3, #14]
 802022e:	2b03      	cmp	r3, #3
 8020230:	d041      	beq.n	80202b6 <USBH_MSC_ClassRequest+0xa2>
 8020232:	2b03      	cmp	r3, #3
 8020234:	dc4b      	bgt.n	80202ce <USBH_MSC_ClassRequest+0xba>
 8020236:	2b00      	cmp	r3, #0
 8020238:	d001      	beq.n	802023e <USBH_MSC_ClassRequest+0x2a>
 802023a:	2b02      	cmp	r3, #2
 802023c:	d147      	bne.n	80202ce <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 802023e:	68bb      	ldr	r3, [r7, #8]
 8020240:	4619      	mov	r1, r3
 8020242:	6878      	ldr	r0, [r7, #4]
 8020244:	f000 fd30 	bl	8020ca8 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8020248:	4603      	mov	r3, r0
 802024a:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 802024c:	7bfb      	ldrb	r3, [r7, #15]
 802024e:	2b03      	cmp	r3, #3
 8020250:	d104      	bne.n	802025c <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8020252:	68bb      	ldr	r3, [r7, #8]
 8020254:	2200      	movs	r2, #0
 8020256:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8020258:	2300      	movs	r3, #0
 802025a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 802025c:	7bfb      	ldrb	r3, [r7, #15]
 802025e:	2b00      	cmp	r3, #0
 8020260:	d137      	bne.n	80202d2 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8020262:	68bb      	ldr	r3, [r7, #8]
 8020264:	781b      	ldrb	r3, [r3, #0]
 8020266:	2b02      	cmp	r3, #2
 8020268:	d804      	bhi.n	8020274 <USBH_MSC_ClassRequest+0x60>
 802026a:	68bb      	ldr	r3, [r7, #8]
 802026c:	781b      	ldrb	r3, [r3, #0]
 802026e:	3301      	adds	r3, #1
 8020270:	b2da      	uxtb	r2, r3
 8020272:	e000      	b.n	8020276 <USBH_MSC_ClassRequest+0x62>
 8020274:	2202      	movs	r2, #2
 8020276:	68bb      	ldr	r3, [r7, #8]
 8020278:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 802027a:	2300      	movs	r3, #0
 802027c:	73bb      	strb	r3, [r7, #14]
 802027e:	e014      	b.n	80202aa <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8020280:	7bbb      	ldrb	r3, [r7, #14]
 8020282:	68ba      	ldr	r2, [r7, #8]
 8020284:	2134      	movs	r1, #52	@ 0x34
 8020286:	fb01 f303 	mul.w	r3, r1, r3
 802028a:	4413      	add	r3, r2
 802028c:	3392      	adds	r3, #146	@ 0x92
 802028e:	2202      	movs	r2, #2
 8020290:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8020292:	7bbb      	ldrb	r3, [r7, #14]
 8020294:	68ba      	ldr	r2, [r7, #8]
 8020296:	2134      	movs	r1, #52	@ 0x34
 8020298:	fb01 f303 	mul.w	r3, r1, r3
 802029c:	4413      	add	r3, r2
 802029e:	33c1      	adds	r3, #193	@ 0xc1
 80202a0:	2200      	movs	r2, #0
 80202a2:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80202a4:	7bbb      	ldrb	r3, [r7, #14]
 80202a6:	3301      	adds	r3, #1
 80202a8:	73bb      	strb	r3, [r7, #14]
 80202aa:	68bb      	ldr	r3, [r7, #8]
 80202ac:	781b      	ldrb	r3, [r3, #0]
 80202ae:	7bba      	ldrb	r2, [r7, #14]
 80202b0:	429a      	cmp	r2, r3
 80202b2:	d3e5      	bcc.n	8020280 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 80202b4:	e00d      	b.n	80202d2 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80202b6:	2100      	movs	r1, #0
 80202b8:	6878      	ldr	r0, [r7, #4]
 80202ba:	f002 fabd 	bl	8022838 <USBH_ClrFeature>
 80202be:	4603      	mov	r3, r0
 80202c0:	2b00      	cmp	r3, #0
 80202c2:	d108      	bne.n	80202d6 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80202c4:	68bb      	ldr	r3, [r7, #8]
 80202c6:	7bda      	ldrb	r2, [r3, #15]
 80202c8:	68bb      	ldr	r3, [r7, #8]
 80202ca:	739a      	strb	r2, [r3, #14]
      }
      break;
 80202cc:	e003      	b.n	80202d6 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 80202ce:	bf00      	nop
 80202d0:	e002      	b.n	80202d8 <USBH_MSC_ClassRequest+0xc4>
      break;
 80202d2:	bf00      	nop
 80202d4:	e000      	b.n	80202d8 <USBH_MSC_ClassRequest+0xc4>
      break;
 80202d6:	bf00      	nop
  }

  return status;
 80202d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80202da:	4618      	mov	r0, r3
 80202dc:	3710      	adds	r7, #16
 80202de:	46bd      	mov	sp, r7
 80202e0:	bd80      	pop	{r7, pc}
	...

080202e4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80202e4:	b580      	push	{r7, lr}
 80202e6:	b086      	sub	sp, #24
 80202e8:	af00      	add	r7, sp, #0
 80202ea:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80202ec:	687b      	ldr	r3, [r7, #4]
 80202ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80202f2:	69db      	ldr	r3, [r3, #28]
 80202f4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80202f6:	2301      	movs	r3, #1
 80202f8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80202fa:	2301      	movs	r3, #1
 80202fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80202fe:	2301      	movs	r3, #1
 8020300:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8020302:	693b      	ldr	r3, [r7, #16]
 8020304:	7b1b      	ldrb	r3, [r3, #12]
 8020306:	2b00      	cmp	r3, #0
 8020308:	d003      	beq.n	8020312 <USBH_MSC_Process+0x2e>
 802030a:	2b01      	cmp	r3, #1
 802030c:	f000 828b 	beq.w	8020826 <USBH_MSC_Process+0x542>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8020310:	e28c      	b.n	802082c <USBH_MSC_Process+0x548>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8020312:	693b      	ldr	r3, [r7, #16]
 8020314:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8020318:	693a      	ldr	r2, [r7, #16]
 802031a:	7812      	ldrb	r2, [r2, #0]
 802031c:	4293      	cmp	r3, r2
 802031e:	f080 8266 	bcs.w	80207ee <USBH_MSC_Process+0x50a>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8020322:	693b      	ldr	r3, [r7, #16]
 8020324:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8020328:	4619      	mov	r1, r3
 802032a:	693a      	ldr	r2, [r7, #16]
 802032c:	2334      	movs	r3, #52	@ 0x34
 802032e:	fb01 f303 	mul.w	r3, r1, r3
 8020332:	4413      	add	r3, r2
 8020334:	3391      	adds	r3, #145	@ 0x91
 8020336:	2201      	movs	r2, #1
 8020338:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 802033a:	693b      	ldr	r3, [r7, #16]
 802033c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8020340:	4619      	mov	r1, r3
 8020342:	693a      	ldr	r2, [r7, #16]
 8020344:	2334      	movs	r3, #52	@ 0x34
 8020346:	fb01 f303 	mul.w	r3, r1, r3
 802034a:	4413      	add	r3, r2
 802034c:	3390      	adds	r3, #144	@ 0x90
 802034e:	781b      	ldrb	r3, [r3, #0]
 8020350:	2b08      	cmp	r3, #8
 8020352:	f200 8234 	bhi.w	80207be <USBH_MSC_Process+0x4da>
 8020356:	a201      	add	r2, pc, #4	@ (adr r2, 802035c <USBH_MSC_Process+0x78>)
 8020358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802035c:	08020381 	.word	0x08020381
 8020360:	080207bf 	.word	0x080207bf
 8020364:	08020449 	.word	0x08020449
 8020368:	080205cd 	.word	0x080205cd
 802036c:	080203a7 	.word	0x080203a7
 8020370:	08020699 	.word	0x08020699
 8020374:	080207bf 	.word	0x080207bf
 8020378:	080207bf 	.word	0x080207bf
 802037c:	080207ad 	.word	0x080207ad
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8020380:	693b      	ldr	r3, [r7, #16]
 8020382:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8020386:	4619      	mov	r1, r3
 8020388:	693a      	ldr	r2, [r7, #16]
 802038a:	2334      	movs	r3, #52	@ 0x34
 802038c:	fb01 f303 	mul.w	r3, r1, r3
 8020390:	4413      	add	r3, r2
 8020392:	3390      	adds	r3, #144	@ 0x90
 8020394:	2204      	movs	r2, #4
 8020396:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8020398:	687b      	ldr	r3, [r7, #4]
 802039a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 802039e:	693b      	ldr	r3, [r7, #16]
 80203a0:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
            break;
 80203a4:	e214      	b.n	80207d0 <USBH_MSC_Process+0x4ec>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80203a6:	693b      	ldr	r3, [r7, #16]
 80203a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80203ac:	b2d9      	uxtb	r1, r3
 80203ae:	693b      	ldr	r3, [r7, #16]
 80203b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80203b4:	461a      	mov	r2, r3
 80203b6:	2334      	movs	r3, #52	@ 0x34
 80203b8:	fb02 f303 	mul.w	r3, r2, r3
 80203bc:	3398      	adds	r3, #152	@ 0x98
 80203be:	693a      	ldr	r2, [r7, #16]
 80203c0:	4413      	add	r3, r2
 80203c2:	3307      	adds	r3, #7
 80203c4:	461a      	mov	r2, r3
 80203c6:	6878      	ldr	r0, [r7, #4]
 80203c8:	f001 f835 	bl	8021436 <USBH_MSC_SCSI_Inquiry>
 80203cc:	4603      	mov	r3, r0
 80203ce:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80203d0:	7bfb      	ldrb	r3, [r7, #15]
 80203d2:	2b00      	cmp	r3, #0
 80203d4:	d10b      	bne.n	80203ee <USBH_MSC_Process+0x10a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80203d6:	693b      	ldr	r3, [r7, #16]
 80203d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80203dc:	4619      	mov	r1, r3
 80203de:	693a      	ldr	r2, [r7, #16]
 80203e0:	2334      	movs	r3, #52	@ 0x34
 80203e2:	fb01 f303 	mul.w	r3, r1, r3
 80203e6:	4413      	add	r3, r2
 80203e8:	3390      	adds	r3, #144	@ 0x90
 80203ea:	2202      	movs	r2, #2
 80203ec:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80203ee:	7bfb      	ldrb	r3, [r7, #15]
 80203f0:	2b02      	cmp	r3, #2
 80203f2:	d10c      	bne.n	802040e <USBH_MSC_Process+0x12a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80203f4:	693b      	ldr	r3, [r7, #16]
 80203f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80203fa:	4619      	mov	r1, r3
 80203fc:	693a      	ldr	r2, [r7, #16]
 80203fe:	2334      	movs	r3, #52	@ 0x34
 8020400:	fb01 f303 	mul.w	r3, r1, r3
 8020404:	4413      	add	r3, r2
 8020406:	3390      	adds	r3, #144	@ 0x90
 8020408:	2205      	movs	r2, #5
 802040a:	701a      	strb	r2, [r3, #0]
            break;
 802040c:	e1d9      	b.n	80207c2 <USBH_MSC_Process+0x4de>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 802040e:	7bfb      	ldrb	r3, [r7, #15]
 8020410:	2b04      	cmp	r3, #4
 8020412:	f040 81d6 	bne.w	80207c2 <USBH_MSC_Process+0x4de>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8020416:	693b      	ldr	r3, [r7, #16]
 8020418:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 802041c:	4619      	mov	r1, r3
 802041e:	693a      	ldr	r2, [r7, #16]
 8020420:	2334      	movs	r3, #52	@ 0x34
 8020422:	fb01 f303 	mul.w	r3, r1, r3
 8020426:	4413      	add	r3, r2
 8020428:	3390      	adds	r3, #144	@ 0x90
 802042a:	2201      	movs	r2, #1
 802042c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 802042e:	693b      	ldr	r3, [r7, #16]
 8020430:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8020434:	4619      	mov	r1, r3
 8020436:	693a      	ldr	r2, [r7, #16]
 8020438:	2334      	movs	r3, #52	@ 0x34
 802043a:	fb01 f303 	mul.w	r3, r1, r3
 802043e:	4413      	add	r3, r2
 8020440:	3391      	adds	r3, #145	@ 0x91
 8020442:	2202      	movs	r2, #2
 8020444:	701a      	strb	r2, [r3, #0]
            break;
 8020446:	e1bc      	b.n	80207c2 <USBH_MSC_Process+0x4de>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8020448:	693b      	ldr	r3, [r7, #16]
 802044a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 802044e:	b2db      	uxtb	r3, r3
 8020450:	4619      	mov	r1, r3
 8020452:	6878      	ldr	r0, [r7, #4]
 8020454:	f000 ff32 	bl	80212bc <USBH_MSC_SCSI_TestUnitReady>
 8020458:	4603      	mov	r3, r0
 802045a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 802045c:	7bbb      	ldrb	r3, [r7, #14]
 802045e:	2b00      	cmp	r3, #0
 8020460:	d149      	bne.n	80204f6 <USBH_MSC_Process+0x212>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8020462:	693b      	ldr	r3, [r7, #16]
 8020464:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8020468:	4619      	mov	r1, r3
 802046a:	693a      	ldr	r2, [r7, #16]
 802046c:	2334      	movs	r3, #52	@ 0x34
 802046e:	fb01 f303 	mul.w	r3, r1, r3
 8020472:	4413      	add	r3, r2
 8020474:	3392      	adds	r3, #146	@ 0x92
 8020476:	781b      	ldrb	r3, [r3, #0]
 8020478:	2b00      	cmp	r3, #0
 802047a:	d00c      	beq.n	8020496 <USBH_MSC_Process+0x1b2>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 802047c:	693b      	ldr	r3, [r7, #16]
 802047e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8020482:	4619      	mov	r1, r3
 8020484:	693a      	ldr	r2, [r7, #16]
 8020486:	2334      	movs	r3, #52	@ 0x34
 8020488:	fb01 f303 	mul.w	r3, r1, r3
 802048c:	4413      	add	r3, r2
 802048e:	33c1      	adds	r3, #193	@ 0xc1
 8020490:	2201      	movs	r2, #1
 8020492:	701a      	strb	r2, [r3, #0]
 8020494:	e00b      	b.n	80204ae <USBH_MSC_Process+0x1ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8020496:	693b      	ldr	r3, [r7, #16]
 8020498:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 802049c:	4619      	mov	r1, r3
 802049e:	693a      	ldr	r2, [r7, #16]
 80204a0:	2334      	movs	r3, #52	@ 0x34
 80204a2:	fb01 f303 	mul.w	r3, r1, r3
 80204a6:	4413      	add	r3, r2
 80204a8:	33c1      	adds	r3, #193	@ 0xc1
 80204aa:	2200      	movs	r2, #0
 80204ac:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80204ae:	693b      	ldr	r3, [r7, #16]
 80204b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80204b4:	4619      	mov	r1, r3
 80204b6:	693a      	ldr	r2, [r7, #16]
 80204b8:	2334      	movs	r3, #52	@ 0x34
 80204ba:	fb01 f303 	mul.w	r3, r1, r3
 80204be:	4413      	add	r3, r2
 80204c0:	3390      	adds	r3, #144	@ 0x90
 80204c2:	2203      	movs	r2, #3
 80204c4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80204c6:	693b      	ldr	r3, [r7, #16]
 80204c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80204cc:	4619      	mov	r1, r3
 80204ce:	693a      	ldr	r2, [r7, #16]
 80204d0:	2334      	movs	r3, #52	@ 0x34
 80204d2:	fb01 f303 	mul.w	r3, r1, r3
 80204d6:	4413      	add	r3, r2
 80204d8:	3391      	adds	r3, #145	@ 0x91
 80204da:	2200      	movs	r2, #0
 80204dc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80204de:	693b      	ldr	r3, [r7, #16]
 80204e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80204e4:	4619      	mov	r1, r3
 80204e6:	693a      	ldr	r2, [r7, #16]
 80204e8:	2334      	movs	r3, #52	@ 0x34
 80204ea:	fb01 f303 	mul.w	r3, r1, r3
 80204ee:	4413      	add	r3, r2
 80204f0:	3392      	adds	r3, #146	@ 0x92
 80204f2:	2200      	movs	r2, #0
 80204f4:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80204f6:	7bbb      	ldrb	r3, [r7, #14]
 80204f8:	2b02      	cmp	r3, #2
 80204fa:	d14a      	bne.n	8020592 <USBH_MSC_Process+0x2ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80204fc:	693b      	ldr	r3, [r7, #16]
 80204fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8020502:	4619      	mov	r1, r3
 8020504:	693a      	ldr	r2, [r7, #16]
 8020506:	2334      	movs	r3, #52	@ 0x34
 8020508:	fb01 f303 	mul.w	r3, r1, r3
 802050c:	4413      	add	r3, r2
 802050e:	3392      	adds	r3, #146	@ 0x92
 8020510:	781b      	ldrb	r3, [r3, #0]
 8020512:	2b02      	cmp	r3, #2
 8020514:	d00c      	beq.n	8020530 <USBH_MSC_Process+0x24c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8020516:	693b      	ldr	r3, [r7, #16]
 8020518:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 802051c:	4619      	mov	r1, r3
 802051e:	693a      	ldr	r2, [r7, #16]
 8020520:	2334      	movs	r3, #52	@ 0x34
 8020522:	fb01 f303 	mul.w	r3, r1, r3
 8020526:	4413      	add	r3, r2
 8020528:	33c1      	adds	r3, #193	@ 0xc1
 802052a:	2201      	movs	r2, #1
 802052c:	701a      	strb	r2, [r3, #0]
 802052e:	e00b      	b.n	8020548 <USBH_MSC_Process+0x264>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8020530:	693b      	ldr	r3, [r7, #16]
 8020532:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8020536:	4619      	mov	r1, r3
 8020538:	693a      	ldr	r2, [r7, #16]
 802053a:	2334      	movs	r3, #52	@ 0x34
 802053c:	fb01 f303 	mul.w	r3, r1, r3
 8020540:	4413      	add	r3, r2
 8020542:	33c1      	adds	r3, #193	@ 0xc1
 8020544:	2200      	movs	r2, #0
 8020546:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8020548:	693b      	ldr	r3, [r7, #16]
 802054a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 802054e:	4619      	mov	r1, r3
 8020550:	693a      	ldr	r2, [r7, #16]
 8020552:	2334      	movs	r3, #52	@ 0x34
 8020554:	fb01 f303 	mul.w	r3, r1, r3
 8020558:	4413      	add	r3, r2
 802055a:	3390      	adds	r3, #144	@ 0x90
 802055c:	2205      	movs	r2, #5
 802055e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8020560:	693b      	ldr	r3, [r7, #16]
 8020562:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8020566:	4619      	mov	r1, r3
 8020568:	693a      	ldr	r2, [r7, #16]
 802056a:	2334      	movs	r3, #52	@ 0x34
 802056c:	fb01 f303 	mul.w	r3, r1, r3
 8020570:	4413      	add	r3, r2
 8020572:	3391      	adds	r3, #145	@ 0x91
 8020574:	2201      	movs	r2, #1
 8020576:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8020578:	693b      	ldr	r3, [r7, #16]
 802057a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 802057e:	4619      	mov	r1, r3
 8020580:	693a      	ldr	r2, [r7, #16]
 8020582:	2334      	movs	r3, #52	@ 0x34
 8020584:	fb01 f303 	mul.w	r3, r1, r3
 8020588:	4413      	add	r3, r2
 802058a:	3392      	adds	r3, #146	@ 0x92
 802058c:	2202      	movs	r2, #2
 802058e:	701a      	strb	r2, [r3, #0]
            break;
 8020590:	e119      	b.n	80207c6 <USBH_MSC_Process+0x4e2>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8020592:	7bbb      	ldrb	r3, [r7, #14]
 8020594:	2b04      	cmp	r3, #4
 8020596:	f040 8116 	bne.w	80207c6 <USBH_MSC_Process+0x4e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 802059a:	693b      	ldr	r3, [r7, #16]
 802059c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80205a0:	4619      	mov	r1, r3
 80205a2:	693a      	ldr	r2, [r7, #16]
 80205a4:	2334      	movs	r3, #52	@ 0x34
 80205a6:	fb01 f303 	mul.w	r3, r1, r3
 80205aa:	4413      	add	r3, r2
 80205ac:	3390      	adds	r3, #144	@ 0x90
 80205ae:	2201      	movs	r2, #1
 80205b0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80205b2:	693b      	ldr	r3, [r7, #16]
 80205b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80205b8:	4619      	mov	r1, r3
 80205ba:	693a      	ldr	r2, [r7, #16]
 80205bc:	2334      	movs	r3, #52	@ 0x34
 80205be:	fb01 f303 	mul.w	r3, r1, r3
 80205c2:	4413      	add	r3, r2
 80205c4:	3391      	adds	r3, #145	@ 0x91
 80205c6:	2202      	movs	r2, #2
 80205c8:	701a      	strb	r2, [r3, #0]
            break;
 80205ca:	e0fc      	b.n	80207c6 <USBH_MSC_Process+0x4e2>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 80205cc:	693b      	ldr	r3, [r7, #16]
 80205ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80205d2:	b2d9      	uxtb	r1, r3
 80205d4:	693b      	ldr	r3, [r7, #16]
 80205d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80205da:	461a      	mov	r2, r3
 80205dc:	2334      	movs	r3, #52	@ 0x34
 80205de:	fb02 f303 	mul.w	r3, r2, r3
 80205e2:	3390      	adds	r3, #144	@ 0x90
 80205e4:	693a      	ldr	r2, [r7, #16]
 80205e6:	4413      	add	r3, r2
 80205e8:	3304      	adds	r3, #4
 80205ea:	461a      	mov	r2, r3
 80205ec:	6878      	ldr	r0, [r7, #4]
 80205ee:	f000 fea8 	bl	8021342 <USBH_MSC_SCSI_ReadCapacity>
 80205f2:	4603      	mov	r3, r0
 80205f4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80205f6:	7bfb      	ldrb	r3, [r7, #15]
 80205f8:	2b00      	cmp	r3, #0
 80205fa:	d120      	bne.n	802063e <USBH_MSC_Process+0x35a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80205fc:	693b      	ldr	r3, [r7, #16]
 80205fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8020602:	4619      	mov	r1, r3
 8020604:	693a      	ldr	r2, [r7, #16]
 8020606:	2334      	movs	r3, #52	@ 0x34
 8020608:	fb01 f303 	mul.w	r3, r1, r3
 802060c:	4413      	add	r3, r2
 802060e:	3390      	adds	r3, #144	@ 0x90
 8020610:	2201      	movs	r2, #1
 8020612:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8020614:	693b      	ldr	r3, [r7, #16]
 8020616:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 802061a:	4619      	mov	r1, r3
 802061c:	693a      	ldr	r2, [r7, #16]
 802061e:	2334      	movs	r3, #52	@ 0x34
 8020620:	fb01 f303 	mul.w	r3, r1, r3
 8020624:	4413      	add	r3, r2
 8020626:	3391      	adds	r3, #145	@ 0x91
 8020628:	2200      	movs	r2, #0
 802062a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 802062c:	693b      	ldr	r3, [r7, #16]
 802062e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8020632:	3301      	adds	r3, #1
 8020634:	b29a      	uxth	r2, r3
 8020636:	693b      	ldr	r3, [r7, #16]
 8020638:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 802063c:	e0c5      	b.n	80207ca <USBH_MSC_Process+0x4e6>
            else if (scsi_status == USBH_FAIL)
 802063e:	7bfb      	ldrb	r3, [r7, #15]
 8020640:	2b02      	cmp	r3, #2
 8020642:	d10c      	bne.n	802065e <USBH_MSC_Process+0x37a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8020644:	693b      	ldr	r3, [r7, #16]
 8020646:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 802064a:	4619      	mov	r1, r3
 802064c:	693a      	ldr	r2, [r7, #16]
 802064e:	2334      	movs	r3, #52	@ 0x34
 8020650:	fb01 f303 	mul.w	r3, r1, r3
 8020654:	4413      	add	r3, r2
 8020656:	3390      	adds	r3, #144	@ 0x90
 8020658:	2205      	movs	r2, #5
 802065a:	701a      	strb	r2, [r3, #0]
            break;
 802065c:	e0b5      	b.n	80207ca <USBH_MSC_Process+0x4e6>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 802065e:	7bfb      	ldrb	r3, [r7, #15]
 8020660:	2b04      	cmp	r3, #4
 8020662:	f040 80b2 	bne.w	80207ca <USBH_MSC_Process+0x4e6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8020666:	693b      	ldr	r3, [r7, #16]
 8020668:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 802066c:	4619      	mov	r1, r3
 802066e:	693a      	ldr	r2, [r7, #16]
 8020670:	2334      	movs	r3, #52	@ 0x34
 8020672:	fb01 f303 	mul.w	r3, r1, r3
 8020676:	4413      	add	r3, r2
 8020678:	3390      	adds	r3, #144	@ 0x90
 802067a:	2201      	movs	r2, #1
 802067c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 802067e:	693b      	ldr	r3, [r7, #16]
 8020680:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8020684:	4619      	mov	r1, r3
 8020686:	693a      	ldr	r2, [r7, #16]
 8020688:	2334      	movs	r3, #52	@ 0x34
 802068a:	fb01 f303 	mul.w	r3, r1, r3
 802068e:	4413      	add	r3, r2
 8020690:	3391      	adds	r3, #145	@ 0x91
 8020692:	2202      	movs	r2, #2
 8020694:	701a      	strb	r2, [r3, #0]
            break;
 8020696:	e098      	b.n	80207ca <USBH_MSC_Process+0x4e6>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8020698:	693b      	ldr	r3, [r7, #16]
 802069a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 802069e:	b2d9      	uxtb	r1, r3
 80206a0:	693b      	ldr	r3, [r7, #16]
 80206a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80206a6:	461a      	mov	r2, r3
 80206a8:	2334      	movs	r3, #52	@ 0x34
 80206aa:	fb02 f303 	mul.w	r3, r2, r3
 80206ae:	3398      	adds	r3, #152	@ 0x98
 80206b0:	693a      	ldr	r2, [r7, #16]
 80206b2:	4413      	add	r3, r2
 80206b4:	3304      	adds	r3, #4
 80206b6:	461a      	mov	r2, r3
 80206b8:	6878      	ldr	r0, [r7, #4]
 80206ba:	f000 ff61 	bl	8021580 <USBH_MSC_SCSI_RequestSense>
 80206be:	4603      	mov	r3, r0
 80206c0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80206c2:	7bfb      	ldrb	r3, [r7, #15]
 80206c4:	2b00      	cmp	r3, #0
 80206c6:	d145      	bne.n	8020754 <USBH_MSC_Process+0x470>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80206c8:	693b      	ldr	r3, [r7, #16]
 80206ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80206ce:	4619      	mov	r1, r3
 80206d0:	693a      	ldr	r2, [r7, #16]
 80206d2:	2334      	movs	r3, #52	@ 0x34
 80206d4:	fb01 f303 	mul.w	r3, r1, r3
 80206d8:	4413      	add	r3, r2
 80206da:	339c      	adds	r3, #156	@ 0x9c
 80206dc:	781b      	ldrb	r3, [r3, #0]
 80206de:	2b06      	cmp	r3, #6
 80206e0:	d00c      	beq.n	80206fc <USBH_MSC_Process+0x418>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80206e2:	693b      	ldr	r3, [r7, #16]
 80206e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80206e8:	4619      	mov	r1, r3
 80206ea:	693a      	ldr	r2, [r7, #16]
 80206ec:	2334      	movs	r3, #52	@ 0x34
 80206ee:	fb01 f303 	mul.w	r3, r1, r3
 80206f2:	4413      	add	r3, r2
 80206f4:	339c      	adds	r3, #156	@ 0x9c
 80206f6:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80206f8:	2b02      	cmp	r3, #2
 80206fa:	d117      	bne.n	802072c <USBH_MSC_Process+0x448>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80206fc:	687b      	ldr	r3, [r7, #4]
 80206fe:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8020702:	693b      	ldr	r3, [r7, #16]
 8020704:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8020708:	1ad3      	subs	r3, r2, r3
 802070a:	f242 720f 	movw	r2, #9999	@ 0x270f
 802070e:	4293      	cmp	r3, r2
 8020710:	d80c      	bhi.n	802072c <USBH_MSC_Process+0x448>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8020712:	693b      	ldr	r3, [r7, #16]
 8020714:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8020718:	4619      	mov	r1, r3
 802071a:	693a      	ldr	r2, [r7, #16]
 802071c:	2334      	movs	r3, #52	@ 0x34
 802071e:	fb01 f303 	mul.w	r3, r1, r3
 8020722:	4413      	add	r3, r2
 8020724:	3390      	adds	r3, #144	@ 0x90
 8020726:	2202      	movs	r2, #2
 8020728:	701a      	strb	r2, [r3, #0]
                  break;
 802072a:	e051      	b.n	80207d0 <USBH_MSC_Process+0x4ec>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 802072c:	693b      	ldr	r3, [r7, #16]
 802072e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8020732:	4619      	mov	r1, r3
 8020734:	693a      	ldr	r2, [r7, #16]
 8020736:	2334      	movs	r3, #52	@ 0x34
 8020738:	fb01 f303 	mul.w	r3, r1, r3
 802073c:	4413      	add	r3, r2
 802073e:	3390      	adds	r3, #144	@ 0x90
 8020740:	2201      	movs	r2, #1
 8020742:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8020744:	693b      	ldr	r3, [r7, #16]
 8020746:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 802074a:	3301      	adds	r3, #1
 802074c:	b29a      	uxth	r2, r3
 802074e:	693b      	ldr	r3, [r7, #16]
 8020750:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            if (scsi_status == USBH_FAIL)
 8020754:	7bfb      	ldrb	r3, [r7, #15]
 8020756:	2b02      	cmp	r3, #2
 8020758:	d10c      	bne.n	8020774 <USBH_MSC_Process+0x490>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 802075a:	693b      	ldr	r3, [r7, #16]
 802075c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8020760:	4619      	mov	r1, r3
 8020762:	693a      	ldr	r2, [r7, #16]
 8020764:	2334      	movs	r3, #52	@ 0x34
 8020766:	fb01 f303 	mul.w	r3, r1, r3
 802076a:	4413      	add	r3, r2
 802076c:	3390      	adds	r3, #144	@ 0x90
 802076e:	2208      	movs	r2, #8
 8020770:	701a      	strb	r2, [r3, #0]
            break;
 8020772:	e02c      	b.n	80207ce <USBH_MSC_Process+0x4ea>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8020774:	7bfb      	ldrb	r3, [r7, #15]
 8020776:	2b04      	cmp	r3, #4
 8020778:	d129      	bne.n	80207ce <USBH_MSC_Process+0x4ea>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 802077a:	693b      	ldr	r3, [r7, #16]
 802077c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8020780:	4619      	mov	r1, r3
 8020782:	693a      	ldr	r2, [r7, #16]
 8020784:	2334      	movs	r3, #52	@ 0x34
 8020786:	fb01 f303 	mul.w	r3, r1, r3
 802078a:	4413      	add	r3, r2
 802078c:	3390      	adds	r3, #144	@ 0x90
 802078e:	2201      	movs	r2, #1
 8020790:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8020792:	693b      	ldr	r3, [r7, #16]
 8020794:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8020798:	4619      	mov	r1, r3
 802079a:	693a      	ldr	r2, [r7, #16]
 802079c:	2334      	movs	r3, #52	@ 0x34
 802079e:	fb01 f303 	mul.w	r3, r1, r3
 80207a2:	4413      	add	r3, r2
 80207a4:	3391      	adds	r3, #145	@ 0x91
 80207a6:	2202      	movs	r2, #2
 80207a8:	701a      	strb	r2, [r3, #0]
            break;
 80207aa:	e010      	b.n	80207ce <USBH_MSC_Process+0x4ea>
            MSC_Handle->current_lun++;
 80207ac:	693b      	ldr	r3, [r7, #16]
 80207ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80207b2:	3301      	adds	r3, #1
 80207b4:	b29a      	uxth	r2, r3
 80207b6:	693b      	ldr	r3, [r7, #16]
 80207b8:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 80207bc:	e008      	b.n	80207d0 <USBH_MSC_Process+0x4ec>
            break;
 80207be:	bf00      	nop
 80207c0:	e006      	b.n	80207d0 <USBH_MSC_Process+0x4ec>
            break;
 80207c2:	bf00      	nop
 80207c4:	e004      	b.n	80207d0 <USBH_MSC_Process+0x4ec>
            break;
 80207c6:	bf00      	nop
 80207c8:	e002      	b.n	80207d0 <USBH_MSC_Process+0x4ec>
            break;
 80207ca:	bf00      	nop
 80207cc:	e000      	b.n	80207d0 <USBH_MSC_Process+0x4ec>
            break;
 80207ce:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80207d0:	687b      	ldr	r3, [r7, #4]
 80207d2:	2204      	movs	r2, #4
 80207d4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80207d8:	687b      	ldr	r3, [r7, #4]
 80207da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80207de:	687b      	ldr	r3, [r7, #4]
 80207e0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80207e4:	2300      	movs	r3, #0
 80207e6:	2200      	movs	r2, #0
 80207e8:	f006 f848 	bl	802687c <osMessageQueuePut>
      break;
 80207ec:	e01e      	b.n	802082c <USBH_MSC_Process+0x548>
        MSC_Handle->current_lun = 0U;
 80207ee:	693b      	ldr	r3, [r7, #16]
 80207f0:	2200      	movs	r2, #0
 80207f2:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_IDLE;
 80207f6:	693b      	ldr	r3, [r7, #16]
 80207f8:	2201      	movs	r2, #1
 80207fa:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80207fc:	687b      	ldr	r3, [r7, #4]
 80207fe:	2204      	movs	r2, #4
 8020800:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8020804:	687b      	ldr	r3, [r7, #4]
 8020806:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 802080a:	687b      	ldr	r3, [r7, #4]
 802080c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8020810:	2300      	movs	r3, #0
 8020812:	2200      	movs	r2, #0
 8020814:	f006 f832 	bl	802687c <osMessageQueuePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8020818:	687b      	ldr	r3, [r7, #4]
 802081a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 802081e:	2102      	movs	r1, #2
 8020820:	6878      	ldr	r0, [r7, #4]
 8020822:	4798      	blx	r3
      break;
 8020824:	e002      	b.n	802082c <USBH_MSC_Process+0x548>
      error = USBH_OK;
 8020826:	2300      	movs	r3, #0
 8020828:	75fb      	strb	r3, [r7, #23]
      break;
 802082a:	bf00      	nop
  }
  return error;
 802082c:	7dfb      	ldrb	r3, [r7, #23]
}
 802082e:	4618      	mov	r0, r3
 8020830:	3718      	adds	r7, #24
 8020832:	46bd      	mov	sp, r7
 8020834:	bd80      	pop	{r7, pc}
 8020836:	bf00      	nop

08020838 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8020838:	b480      	push	{r7}
 802083a:	b083      	sub	sp, #12
 802083c:	af00      	add	r7, sp, #0
 802083e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8020840:	2300      	movs	r3, #0
}
 8020842:	4618      	mov	r0, r3
 8020844:	370c      	adds	r7, #12
 8020846:	46bd      	mov	sp, r7
 8020848:	f85d 7b04 	ldr.w	r7, [sp], #4
 802084c:	4770      	bx	lr

0802084e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 802084e:	b580      	push	{r7, lr}
 8020850:	b088      	sub	sp, #32
 8020852:	af02      	add	r7, sp, #8
 8020854:	6078      	str	r0, [r7, #4]
 8020856:	460b      	mov	r3, r1
 8020858:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802085a:	687b      	ldr	r3, [r7, #4]
 802085c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8020860:	69db      	ldr	r3, [r3, #28]
 8020862:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8020864:	2301      	movs	r3, #1
 8020866:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8020868:	2301      	movs	r3, #1
 802086a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 802086c:	78fb      	ldrb	r3, [r7, #3]
 802086e:	693a      	ldr	r2, [r7, #16]
 8020870:	2134      	movs	r1, #52	@ 0x34
 8020872:	fb01 f303 	mul.w	r3, r1, r3
 8020876:	4413      	add	r3, r2
 8020878:	3390      	adds	r3, #144	@ 0x90
 802087a:	781b      	ldrb	r3, [r3, #0]
 802087c:	2b07      	cmp	r3, #7
 802087e:	d04b      	beq.n	8020918 <USBH_MSC_RdWrProcess+0xca>
 8020880:	2b07      	cmp	r3, #7
 8020882:	f300 80d2 	bgt.w	8020a2a <USBH_MSC_RdWrProcess+0x1dc>
 8020886:	2b05      	cmp	r3, #5
 8020888:	f000 8089 	beq.w	802099e <USBH_MSC_RdWrProcess+0x150>
 802088c:	2b06      	cmp	r3, #6
 802088e:	f040 80cc 	bne.w	8020a2a <USBH_MSC_RdWrProcess+0x1dc>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8020892:	78f9      	ldrb	r1, [r7, #3]
 8020894:	2300      	movs	r3, #0
 8020896:	9300      	str	r3, [sp, #0]
 8020898:	2300      	movs	r3, #0
 802089a:	2200      	movs	r2, #0
 802089c:	6878      	ldr	r0, [r7, #4]
 802089e:	f000 ff53 	bl	8021748 <USBH_MSC_SCSI_Read>
 80208a2:	4603      	mov	r3, r0
 80208a4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80208a6:	7bfb      	ldrb	r3, [r7, #15]
 80208a8:	2b00      	cmp	r3, #0
 80208aa:	d10b      	bne.n	80208c4 <USBH_MSC_RdWrProcess+0x76>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80208ac:	78fb      	ldrb	r3, [r7, #3]
 80208ae:	693a      	ldr	r2, [r7, #16]
 80208b0:	2134      	movs	r1, #52	@ 0x34
 80208b2:	fb01 f303 	mul.w	r3, r1, r3
 80208b6:	4413      	add	r3, r2
 80208b8:	3390      	adds	r3, #144	@ 0x90
 80208ba:	2201      	movs	r2, #1
 80208bc:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80208be:	2300      	movs	r3, #0
 80208c0:	75fb      	strb	r3, [r7, #23]
 80208c2:	e01a      	b.n	80208fa <USBH_MSC_RdWrProcess+0xac>
      }
      else if (scsi_status == USBH_FAIL)
 80208c4:	7bfb      	ldrb	r3, [r7, #15]
 80208c6:	2b02      	cmp	r3, #2
 80208c8:	d109      	bne.n	80208de <USBH_MSC_RdWrProcess+0x90>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80208ca:	78fb      	ldrb	r3, [r7, #3]
 80208cc:	693a      	ldr	r2, [r7, #16]
 80208ce:	2134      	movs	r1, #52	@ 0x34
 80208d0:	fb01 f303 	mul.w	r3, r1, r3
 80208d4:	4413      	add	r3, r2
 80208d6:	3390      	adds	r3, #144	@ 0x90
 80208d8:	2205      	movs	r2, #5
 80208da:	701a      	strb	r2, [r3, #0]
 80208dc:	e00d      	b.n	80208fa <USBH_MSC_RdWrProcess+0xac>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80208de:	7bfb      	ldrb	r3, [r7, #15]
 80208e0:	2b04      	cmp	r3, #4
 80208e2:	d10a      	bne.n	80208fa <USBH_MSC_RdWrProcess+0xac>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80208e4:	78fb      	ldrb	r3, [r7, #3]
 80208e6:	693a      	ldr	r2, [r7, #16]
 80208e8:	2134      	movs	r1, #52	@ 0x34
 80208ea:	fb01 f303 	mul.w	r3, r1, r3
 80208ee:	4413      	add	r3, r2
 80208f0:	3390      	adds	r3, #144	@ 0x90
 80208f2:	2208      	movs	r2, #8
 80208f4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80208f6:	2302      	movs	r3, #2
 80208f8:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80208fa:	687b      	ldr	r3, [r7, #4]
 80208fc:	2204      	movs	r2, #4
 80208fe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8020902:	687b      	ldr	r3, [r7, #4]
 8020904:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8020908:	687b      	ldr	r3, [r7, #4]
 802090a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 802090e:	2300      	movs	r3, #0
 8020910:	2200      	movs	r2, #0
 8020912:	f005 ffb3 	bl	802687c <osMessageQueuePut>
#endif
#endif
      break;
 8020916:	e089      	b.n	8020a2c <USBH_MSC_RdWrProcess+0x1de>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8020918:	78f9      	ldrb	r1, [r7, #3]
 802091a:	2300      	movs	r3, #0
 802091c:	9300      	str	r3, [sp, #0]
 802091e:	2300      	movs	r3, #0
 8020920:	2200      	movs	r2, #0
 8020922:	6878      	ldr	r0, [r7, #4]
 8020924:	f000 fea5 	bl	8021672 <USBH_MSC_SCSI_Write>
 8020928:	4603      	mov	r3, r0
 802092a:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 802092c:	7bfb      	ldrb	r3, [r7, #15]
 802092e:	2b00      	cmp	r3, #0
 8020930:	d10b      	bne.n	802094a <USBH_MSC_RdWrProcess+0xfc>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8020932:	78fb      	ldrb	r3, [r7, #3]
 8020934:	693a      	ldr	r2, [r7, #16]
 8020936:	2134      	movs	r1, #52	@ 0x34
 8020938:	fb01 f303 	mul.w	r3, r1, r3
 802093c:	4413      	add	r3, r2
 802093e:	3390      	adds	r3, #144	@ 0x90
 8020940:	2201      	movs	r2, #1
 8020942:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8020944:	2300      	movs	r3, #0
 8020946:	75fb      	strb	r3, [r7, #23]
 8020948:	e01a      	b.n	8020980 <USBH_MSC_RdWrProcess+0x132>
      }
      else if (scsi_status == USBH_FAIL)
 802094a:	7bfb      	ldrb	r3, [r7, #15]
 802094c:	2b02      	cmp	r3, #2
 802094e:	d109      	bne.n	8020964 <USBH_MSC_RdWrProcess+0x116>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8020950:	78fb      	ldrb	r3, [r7, #3]
 8020952:	693a      	ldr	r2, [r7, #16]
 8020954:	2134      	movs	r1, #52	@ 0x34
 8020956:	fb01 f303 	mul.w	r3, r1, r3
 802095a:	4413      	add	r3, r2
 802095c:	3390      	adds	r3, #144	@ 0x90
 802095e:	2205      	movs	r2, #5
 8020960:	701a      	strb	r2, [r3, #0]
 8020962:	e00d      	b.n	8020980 <USBH_MSC_RdWrProcess+0x132>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8020964:	7bfb      	ldrb	r3, [r7, #15]
 8020966:	2b04      	cmp	r3, #4
 8020968:	d10a      	bne.n	8020980 <USBH_MSC_RdWrProcess+0x132>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 802096a:	78fb      	ldrb	r3, [r7, #3]
 802096c:	693a      	ldr	r2, [r7, #16]
 802096e:	2134      	movs	r1, #52	@ 0x34
 8020970:	fb01 f303 	mul.w	r3, r1, r3
 8020974:	4413      	add	r3, r2
 8020976:	3390      	adds	r3, #144	@ 0x90
 8020978:	2208      	movs	r2, #8
 802097a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 802097c:	2302      	movs	r3, #2
 802097e:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8020980:	687b      	ldr	r3, [r7, #4]
 8020982:	2204      	movs	r2, #4
 8020984:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8020988:	687b      	ldr	r3, [r7, #4]
 802098a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 802098e:	687b      	ldr	r3, [r7, #4]
 8020990:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8020994:	2300      	movs	r3, #0
 8020996:	2200      	movs	r2, #0
 8020998:	f005 ff70 	bl	802687c <osMessageQueuePut>
#endif
#endif
      break;
 802099c:	e046      	b.n	8020a2c <USBH_MSC_RdWrProcess+0x1de>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 802099e:	78fb      	ldrb	r3, [r7, #3]
 80209a0:	2234      	movs	r2, #52	@ 0x34
 80209a2:	fb02 f303 	mul.w	r3, r2, r3
 80209a6:	3398      	adds	r3, #152	@ 0x98
 80209a8:	693a      	ldr	r2, [r7, #16]
 80209aa:	4413      	add	r3, r2
 80209ac:	1d1a      	adds	r2, r3, #4
 80209ae:	78fb      	ldrb	r3, [r7, #3]
 80209b0:	4619      	mov	r1, r3
 80209b2:	6878      	ldr	r0, [r7, #4]
 80209b4:	f000 fde4 	bl	8021580 <USBH_MSC_SCSI_RequestSense>
 80209b8:	4603      	mov	r3, r0
 80209ba:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80209bc:	7bfb      	ldrb	r3, [r7, #15]
 80209be:	2b00      	cmp	r3, #0
 80209c0:	d113      	bne.n	80209ea <USBH_MSC_RdWrProcess+0x19c>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80209c2:	78fb      	ldrb	r3, [r7, #3]
 80209c4:	693a      	ldr	r2, [r7, #16]
 80209c6:	2134      	movs	r1, #52	@ 0x34
 80209c8:	fb01 f303 	mul.w	r3, r1, r3
 80209cc:	4413      	add	r3, r2
 80209ce:	3390      	adds	r3, #144	@ 0x90
 80209d0:	2201      	movs	r2, #1
 80209d2:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80209d4:	78fb      	ldrb	r3, [r7, #3]
 80209d6:	693a      	ldr	r2, [r7, #16]
 80209d8:	2134      	movs	r1, #52	@ 0x34
 80209da:	fb01 f303 	mul.w	r3, r1, r3
 80209de:	4413      	add	r3, r2
 80209e0:	3391      	adds	r3, #145	@ 0x91
 80209e2:	2202      	movs	r2, #2
 80209e4:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80209e6:	2302      	movs	r3, #2
 80209e8:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 80209ea:	7bfb      	ldrb	r3, [r7, #15]
 80209ec:	2b02      	cmp	r3, #2
 80209ee:	d00d      	beq.n	8020a0c <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80209f0:	7bfb      	ldrb	r3, [r7, #15]
 80209f2:	2b04      	cmp	r3, #4
 80209f4:	d10a      	bne.n	8020a0c <USBH_MSC_RdWrProcess+0x1be>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80209f6:	78fb      	ldrb	r3, [r7, #3]
 80209f8:	693a      	ldr	r2, [r7, #16]
 80209fa:	2134      	movs	r1, #52	@ 0x34
 80209fc:	fb01 f303 	mul.w	r3, r1, r3
 8020a00:	4413      	add	r3, r2
 8020a02:	3390      	adds	r3, #144	@ 0x90
 8020a04:	2208      	movs	r2, #8
 8020a06:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8020a08:	2302      	movs	r3, #2
 8020a0a:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8020a0c:	687b      	ldr	r3, [r7, #4]
 8020a0e:	2204      	movs	r2, #4
 8020a10:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8020a14:	687b      	ldr	r3, [r7, #4]
 8020a16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8020a1a:	687b      	ldr	r3, [r7, #4]
 8020a1c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8020a20:	2300      	movs	r3, #0
 8020a22:	2200      	movs	r2, #0
 8020a24:	f005 ff2a 	bl	802687c <osMessageQueuePut>
#endif
#endif
      break;
 8020a28:	e000      	b.n	8020a2c <USBH_MSC_RdWrProcess+0x1de>

    default:
      break;
 8020a2a:	bf00      	nop

  }
  return error;
 8020a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8020a2e:	4618      	mov	r0, r3
 8020a30:	3718      	adds	r7, #24
 8020a32:	46bd      	mov	sp, r7
 8020a34:	bd80      	pop	{r7, pc}

08020a36 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8020a36:	b480      	push	{r7}
 8020a38:	b085      	sub	sp, #20
 8020a3a:	af00      	add	r7, sp, #0
 8020a3c:	6078      	str	r0, [r7, #4]
 8020a3e:	460b      	mov	r3, r1
 8020a40:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8020a42:	687b      	ldr	r3, [r7, #4]
 8020a44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8020a48:	69db      	ldr	r3, [r3, #28]
 8020a4a:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8020a4c:	687b      	ldr	r3, [r7, #4]
 8020a4e:	781b      	ldrb	r3, [r3, #0]
 8020a50:	b2db      	uxtb	r3, r3
 8020a52:	2b0b      	cmp	r3, #11
 8020a54:	d10c      	bne.n	8020a70 <USBH_MSC_UnitIsReady+0x3a>
 8020a56:	78fb      	ldrb	r3, [r7, #3]
 8020a58:	68ba      	ldr	r2, [r7, #8]
 8020a5a:	2134      	movs	r1, #52	@ 0x34
 8020a5c:	fb01 f303 	mul.w	r3, r1, r3
 8020a60:	4413      	add	r3, r2
 8020a62:	3391      	adds	r3, #145	@ 0x91
 8020a64:	781b      	ldrb	r3, [r3, #0]
 8020a66:	2b00      	cmp	r3, #0
 8020a68:	d102      	bne.n	8020a70 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8020a6a:	2301      	movs	r3, #1
 8020a6c:	73fb      	strb	r3, [r7, #15]
 8020a6e:	e001      	b.n	8020a74 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8020a70:	2300      	movs	r3, #0
 8020a72:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8020a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8020a76:	4618      	mov	r0, r3
 8020a78:	3714      	adds	r7, #20
 8020a7a:	46bd      	mov	sp, r7
 8020a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a80:	4770      	bx	lr

08020a82 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8020a82:	b580      	push	{r7, lr}
 8020a84:	b086      	sub	sp, #24
 8020a86:	af00      	add	r7, sp, #0
 8020a88:	60f8      	str	r0, [r7, #12]
 8020a8a:	460b      	mov	r3, r1
 8020a8c:	607a      	str	r2, [r7, #4]
 8020a8e:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8020a90:	68fb      	ldr	r3, [r7, #12]
 8020a92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8020a96:	69db      	ldr	r3, [r3, #28]
 8020a98:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8020a9a:	68fb      	ldr	r3, [r7, #12]
 8020a9c:	781b      	ldrb	r3, [r3, #0]
 8020a9e:	b2db      	uxtb	r3, r3
 8020aa0:	2b0b      	cmp	r3, #11
 8020aa2:	d10d      	bne.n	8020ac0 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8020aa4:	7afb      	ldrb	r3, [r7, #11]
 8020aa6:	2234      	movs	r2, #52	@ 0x34
 8020aa8:	fb02 f303 	mul.w	r3, r2, r3
 8020aac:	3390      	adds	r3, #144	@ 0x90
 8020aae:	697a      	ldr	r2, [r7, #20]
 8020ab0:	4413      	add	r3, r2
 8020ab2:	2234      	movs	r2, #52	@ 0x34
 8020ab4:	4619      	mov	r1, r3
 8020ab6:	6878      	ldr	r0, [r7, #4]
 8020ab8:	f00b fd5d 	bl	802c576 <memcpy>
    return USBH_OK;
 8020abc:	2300      	movs	r3, #0
 8020abe:	e000      	b.n	8020ac2 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8020ac0:	2302      	movs	r3, #2
  }
}
 8020ac2:	4618      	mov	r0, r3
 8020ac4:	3718      	adds	r7, #24
 8020ac6:	46bd      	mov	sp, r7
 8020ac8:	bd80      	pop	{r7, pc}

08020aca <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8020aca:	b580      	push	{r7, lr}
 8020acc:	b088      	sub	sp, #32
 8020ace:	af02      	add	r7, sp, #8
 8020ad0:	60f8      	str	r0, [r7, #12]
 8020ad2:	607a      	str	r2, [r7, #4]
 8020ad4:	603b      	str	r3, [r7, #0]
 8020ad6:	460b      	mov	r3, r1
 8020ad8:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8020ada:	68fb      	ldr	r3, [r7, #12]
 8020adc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8020ae0:	69db      	ldr	r3, [r3, #28]
 8020ae2:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8020ae4:	68fb      	ldr	r3, [r7, #12]
 8020ae6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8020aea:	b2db      	uxtb	r3, r3
 8020aec:	2b00      	cmp	r3, #0
 8020aee:	d00e      	beq.n	8020b0e <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8020af0:	68fb      	ldr	r3, [r7, #12]
 8020af2:	781b      	ldrb	r3, [r3, #0]
 8020af4:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8020af6:	2b0b      	cmp	r3, #11
 8020af8:	d109      	bne.n	8020b0e <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8020afa:	7afb      	ldrb	r3, [r7, #11]
 8020afc:	697a      	ldr	r2, [r7, #20]
 8020afe:	2134      	movs	r1, #52	@ 0x34
 8020b00:	fb01 f303 	mul.w	r3, r1, r3
 8020b04:	4413      	add	r3, r2
 8020b06:	3390      	adds	r3, #144	@ 0x90
 8020b08:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8020b0a:	2b01      	cmp	r3, #1
 8020b0c:	d001      	beq.n	8020b12 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8020b0e:	2302      	movs	r3, #2
 8020b10:	e040      	b.n	8020b94 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8020b12:	697b      	ldr	r3, [r7, #20]
 8020b14:	2206      	movs	r2, #6
 8020b16:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8020b18:	7afb      	ldrb	r3, [r7, #11]
 8020b1a:	697a      	ldr	r2, [r7, #20]
 8020b1c:	2134      	movs	r1, #52	@ 0x34
 8020b1e:	fb01 f303 	mul.w	r3, r1, r3
 8020b22:	4413      	add	r3, r2
 8020b24:	3390      	adds	r3, #144	@ 0x90
 8020b26:	2206      	movs	r2, #6
 8020b28:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8020b2a:	7afb      	ldrb	r3, [r7, #11]
 8020b2c:	b29a      	uxth	r2, r3
 8020b2e:	697b      	ldr	r3, [r7, #20]
 8020b30:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8020b34:	7af9      	ldrb	r1, [r7, #11]
 8020b36:	6a3b      	ldr	r3, [r7, #32]
 8020b38:	9300      	str	r3, [sp, #0]
 8020b3a:	683b      	ldr	r3, [r7, #0]
 8020b3c:	687a      	ldr	r2, [r7, #4]
 8020b3e:	68f8      	ldr	r0, [r7, #12]
 8020b40:	f000 fe02 	bl	8021748 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8020b44:	68fb      	ldr	r3, [r7, #12]
 8020b46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8020b4a:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8020b4c:	e016      	b.n	8020b7c <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8020b4e:	68fb      	ldr	r3, [r7, #12]
 8020b50:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8020b54:	693b      	ldr	r3, [r7, #16]
 8020b56:	1ad2      	subs	r2, r2, r3
 8020b58:	6a3b      	ldr	r3, [r7, #32]
 8020b5a:	f242 7110 	movw	r1, #10000	@ 0x2710
 8020b5e:	fb01 f303 	mul.w	r3, r1, r3
 8020b62:	429a      	cmp	r2, r3
 8020b64:	d805      	bhi.n	8020b72 <USBH_MSC_Read+0xa8>
 8020b66:	68fb      	ldr	r3, [r7, #12]
 8020b68:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8020b6c:	b2db      	uxtb	r3, r3
 8020b6e:	2b00      	cmp	r3, #0
 8020b70:	d104      	bne.n	8020b7c <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8020b72:	697b      	ldr	r3, [r7, #20]
 8020b74:	2201      	movs	r2, #1
 8020b76:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8020b78:	2302      	movs	r3, #2
 8020b7a:	e00b      	b.n	8020b94 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8020b7c:	7afb      	ldrb	r3, [r7, #11]
 8020b7e:	4619      	mov	r1, r3
 8020b80:	68f8      	ldr	r0, [r7, #12]
 8020b82:	f7ff fe64 	bl	802084e <USBH_MSC_RdWrProcess>
 8020b86:	4603      	mov	r3, r0
 8020b88:	2b01      	cmp	r3, #1
 8020b8a:	d0e0      	beq.n	8020b4e <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8020b8c:	697b      	ldr	r3, [r7, #20]
 8020b8e:	2201      	movs	r2, #1
 8020b90:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8020b92:	2300      	movs	r3, #0
}
 8020b94:	4618      	mov	r0, r3
 8020b96:	3718      	adds	r7, #24
 8020b98:	46bd      	mov	sp, r7
 8020b9a:	bd80      	pop	{r7, pc}

08020b9c <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8020b9c:	b580      	push	{r7, lr}
 8020b9e:	b088      	sub	sp, #32
 8020ba0:	af02      	add	r7, sp, #8
 8020ba2:	60f8      	str	r0, [r7, #12]
 8020ba4:	607a      	str	r2, [r7, #4]
 8020ba6:	603b      	str	r3, [r7, #0]
 8020ba8:	460b      	mov	r3, r1
 8020baa:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8020bac:	68fb      	ldr	r3, [r7, #12]
 8020bae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8020bb2:	69db      	ldr	r3, [r3, #28]
 8020bb4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8020bb6:	68fb      	ldr	r3, [r7, #12]
 8020bb8:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8020bbc:	b2db      	uxtb	r3, r3
 8020bbe:	2b00      	cmp	r3, #0
 8020bc0:	d00e      	beq.n	8020be0 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8020bc2:	68fb      	ldr	r3, [r7, #12]
 8020bc4:	781b      	ldrb	r3, [r3, #0]
 8020bc6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8020bc8:	2b0b      	cmp	r3, #11
 8020bca:	d109      	bne.n	8020be0 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8020bcc:	7afb      	ldrb	r3, [r7, #11]
 8020bce:	697a      	ldr	r2, [r7, #20]
 8020bd0:	2134      	movs	r1, #52	@ 0x34
 8020bd2:	fb01 f303 	mul.w	r3, r1, r3
 8020bd6:	4413      	add	r3, r2
 8020bd8:	3390      	adds	r3, #144	@ 0x90
 8020bda:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8020bdc:	2b01      	cmp	r3, #1
 8020bde:	d001      	beq.n	8020be4 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8020be0:	2302      	movs	r3, #2
 8020be2:	e040      	b.n	8020c66 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8020be4:	697b      	ldr	r3, [r7, #20]
 8020be6:	2207      	movs	r2, #7
 8020be8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8020bea:	7afb      	ldrb	r3, [r7, #11]
 8020bec:	697a      	ldr	r2, [r7, #20]
 8020bee:	2134      	movs	r1, #52	@ 0x34
 8020bf0:	fb01 f303 	mul.w	r3, r1, r3
 8020bf4:	4413      	add	r3, r2
 8020bf6:	3390      	adds	r3, #144	@ 0x90
 8020bf8:	2207      	movs	r2, #7
 8020bfa:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8020bfc:	7afb      	ldrb	r3, [r7, #11]
 8020bfe:	b29a      	uxth	r2, r3
 8020c00:	697b      	ldr	r3, [r7, #20]
 8020c02:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8020c06:	7af9      	ldrb	r1, [r7, #11]
 8020c08:	6a3b      	ldr	r3, [r7, #32]
 8020c0a:	9300      	str	r3, [sp, #0]
 8020c0c:	683b      	ldr	r3, [r7, #0]
 8020c0e:	687a      	ldr	r2, [r7, #4]
 8020c10:	68f8      	ldr	r0, [r7, #12]
 8020c12:	f000 fd2e 	bl	8021672 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8020c16:	68fb      	ldr	r3, [r7, #12]
 8020c18:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8020c1c:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8020c1e:	e016      	b.n	8020c4e <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8020c20:	68fb      	ldr	r3, [r7, #12]
 8020c22:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8020c26:	693b      	ldr	r3, [r7, #16]
 8020c28:	1ad2      	subs	r2, r2, r3
 8020c2a:	6a3b      	ldr	r3, [r7, #32]
 8020c2c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8020c30:	fb01 f303 	mul.w	r3, r1, r3
 8020c34:	429a      	cmp	r2, r3
 8020c36:	d805      	bhi.n	8020c44 <USBH_MSC_Write+0xa8>
 8020c38:	68fb      	ldr	r3, [r7, #12]
 8020c3a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8020c3e:	b2db      	uxtb	r3, r3
 8020c40:	2b00      	cmp	r3, #0
 8020c42:	d104      	bne.n	8020c4e <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8020c44:	697b      	ldr	r3, [r7, #20]
 8020c46:	2201      	movs	r2, #1
 8020c48:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8020c4a:	2302      	movs	r3, #2
 8020c4c:	e00b      	b.n	8020c66 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8020c4e:	7afb      	ldrb	r3, [r7, #11]
 8020c50:	4619      	mov	r1, r3
 8020c52:	68f8      	ldr	r0, [r7, #12]
 8020c54:	f7ff fdfb 	bl	802084e <USBH_MSC_RdWrProcess>
 8020c58:	4603      	mov	r3, r0
 8020c5a:	2b01      	cmp	r3, #1
 8020c5c:	d0e0      	beq.n	8020c20 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8020c5e:	697b      	ldr	r3, [r7, #20]
 8020c60:	2201      	movs	r2, #1
 8020c62:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8020c64:	2300      	movs	r3, #0
}
 8020c66:	4618      	mov	r0, r3
 8020c68:	3718      	adds	r7, #24
 8020c6a:	46bd      	mov	sp, r7
 8020c6c:	bd80      	pop	{r7, pc}

08020c6e <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8020c6e:	b580      	push	{r7, lr}
 8020c70:	b082      	sub	sp, #8
 8020c72:	af00      	add	r7, sp, #0
 8020c74:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8020c76:	687b      	ldr	r3, [r7, #4]
 8020c78:	2221      	movs	r2, #33	@ 0x21
 8020c7a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8020c7c:	687b      	ldr	r3, [r7, #4]
 8020c7e:	22ff      	movs	r2, #255	@ 0xff
 8020c80:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8020c82:	687b      	ldr	r3, [r7, #4]
 8020c84:	2200      	movs	r2, #0
 8020c86:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8020c88:	687b      	ldr	r3, [r7, #4]
 8020c8a:	2200      	movs	r2, #0
 8020c8c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8020c8e:	687b      	ldr	r3, [r7, #4]
 8020c90:	2200      	movs	r2, #0
 8020c92:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8020c94:	2200      	movs	r2, #0
 8020c96:	2100      	movs	r1, #0
 8020c98:	6878      	ldr	r0, [r7, #4]
 8020c9a:	f002 f902 	bl	8022ea2 <USBH_CtlReq>
 8020c9e:	4603      	mov	r3, r0
}
 8020ca0:	4618      	mov	r0, r3
 8020ca2:	3708      	adds	r7, #8
 8020ca4:	46bd      	mov	sp, r7
 8020ca6:	bd80      	pop	{r7, pc}

08020ca8 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8020ca8:	b580      	push	{r7, lr}
 8020caa:	b082      	sub	sp, #8
 8020cac:	af00      	add	r7, sp, #0
 8020cae:	6078      	str	r0, [r7, #4]
 8020cb0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8020cb2:	687b      	ldr	r3, [r7, #4]
 8020cb4:	22a1      	movs	r2, #161	@ 0xa1
 8020cb6:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8020cb8:	687b      	ldr	r3, [r7, #4]
 8020cba:	22fe      	movs	r2, #254	@ 0xfe
 8020cbc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8020cbe:	687b      	ldr	r3, [r7, #4]
 8020cc0:	2200      	movs	r2, #0
 8020cc2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8020cc4:	687b      	ldr	r3, [r7, #4]
 8020cc6:	2200      	movs	r2, #0
 8020cc8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8020cca:	687b      	ldr	r3, [r7, #4]
 8020ccc:	2201      	movs	r2, #1
 8020cce:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8020cd0:	2201      	movs	r2, #1
 8020cd2:	6839      	ldr	r1, [r7, #0]
 8020cd4:	6878      	ldr	r0, [r7, #4]
 8020cd6:	f002 f8e4 	bl	8022ea2 <USBH_CtlReq>
 8020cda:	4603      	mov	r3, r0
}
 8020cdc:	4618      	mov	r0, r3
 8020cde:	3708      	adds	r7, #8
 8020ce0:	46bd      	mov	sp, r7
 8020ce2:	bd80      	pop	{r7, pc}

08020ce4 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8020ce4:	b480      	push	{r7}
 8020ce6:	b085      	sub	sp, #20
 8020ce8:	af00      	add	r7, sp, #0
 8020cea:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8020cec:	687b      	ldr	r3, [r7, #4]
 8020cee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8020cf2:	69db      	ldr	r3, [r3, #28]
 8020cf4:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8020cf6:	68fb      	ldr	r3, [r7, #12]
 8020cf8:	4a09      	ldr	r2, [pc, #36]	@ (8020d20 <USBH_MSC_BOT_Init+0x3c>)
 8020cfa:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8020cfc:	68fb      	ldr	r3, [r7, #12]
 8020cfe:	4a09      	ldr	r2, [pc, #36]	@ (8020d24 <USBH_MSC_BOT_Init+0x40>)
 8020d00:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8020d02:	68fb      	ldr	r3, [r7, #12]
 8020d04:	2201      	movs	r2, #1
 8020d06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8020d0a:	68fb      	ldr	r3, [r7, #12]
 8020d0c:	2201      	movs	r2, #1
 8020d0e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 8020d12:	2300      	movs	r3, #0
}
 8020d14:	4618      	mov	r0, r3
 8020d16:	3714      	adds	r7, #20
 8020d18:	46bd      	mov	sp, r7
 8020d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d1e:	4770      	bx	lr
 8020d20:	43425355 	.word	0x43425355
 8020d24:	20304050 	.word	0x20304050

08020d28 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8020d28:	b580      	push	{r7, lr}
 8020d2a:	b088      	sub	sp, #32
 8020d2c:	af02      	add	r7, sp, #8
 8020d2e:	6078      	str	r0, [r7, #4]
 8020d30:	460b      	mov	r3, r1
 8020d32:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8020d34:	2301      	movs	r3, #1
 8020d36:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8020d38:	2301      	movs	r3, #1
 8020d3a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8020d3c:	2301      	movs	r3, #1
 8020d3e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8020d40:	2300      	movs	r3, #0
 8020d42:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8020d44:	687b      	ldr	r3, [r7, #4]
 8020d46:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8020d4a:	69db      	ldr	r3, [r3, #28]
 8020d4c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8020d4e:	2300      	movs	r3, #0
 8020d50:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8020d52:	693b      	ldr	r3, [r7, #16]
 8020d54:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8020d58:	3b01      	subs	r3, #1
 8020d5a:	2b0a      	cmp	r3, #10
 8020d5c:	f200 822a 	bhi.w	80211b4 <USBH_MSC_BOT_Process+0x48c>
 8020d60:	a201      	add	r2, pc, #4	@ (adr r2, 8020d68 <USBH_MSC_BOT_Process+0x40>)
 8020d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020d66:	bf00      	nop
 8020d68:	08020d95 	.word	0x08020d95
 8020d6c:	08020dbd 	.word	0x08020dbd
 8020d70:	08020e7b 	.word	0x08020e7b
 8020d74:	08020e99 	.word	0x08020e99
 8020d78:	08020f55 	.word	0x08020f55
 8020d7c:	08020f77 	.word	0x08020f77
 8020d80:	08021063 	.word	0x08021063
 8020d84:	0802107f 	.word	0x0802107f
 8020d88:	08021109 	.word	0x08021109
 8020d8c:	08021139 	.word	0x08021139
 8020d90:	0802119b 	.word	0x0802119b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8020d94:	693b      	ldr	r3, [r7, #16]
 8020d96:	78fa      	ldrb	r2, [r7, #3]
 8020d98:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8020d9c:	693b      	ldr	r3, [r7, #16]
 8020d9e:	2202      	movs	r2, #2
 8020da0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8020da4:	693b      	ldr	r3, [r7, #16]
 8020da6:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8020daa:	693b      	ldr	r3, [r7, #16]
 8020dac:	795b      	ldrb	r3, [r3, #5]
 8020dae:	2201      	movs	r2, #1
 8020db0:	9200      	str	r2, [sp, #0]
 8020db2:	221f      	movs	r2, #31
 8020db4:	6878      	ldr	r0, [r7, #4]
 8020db6:	f002 fb72 	bl	802349e <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8020dba:	e20a      	b.n	80211d2 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8020dbc:	693b      	ldr	r3, [r7, #16]
 8020dbe:	795b      	ldrb	r3, [r3, #5]
 8020dc0:	4619      	mov	r1, r3
 8020dc2:	6878      	ldr	r0, [r7, #4]
 8020dc4:	f009 fb44 	bl	802a450 <USBH_LL_GetURBState>
 8020dc8:	4603      	mov	r3, r0
 8020dca:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8020dcc:	7d3b      	ldrb	r3, [r7, #20]
 8020dce:	2b01      	cmp	r3, #1
 8020dd0:	d126      	bne.n	8020e20 <USBH_MSC_BOT_Process+0xf8>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8020dd2:	693b      	ldr	r3, [r7, #16]
 8020dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8020dd6:	2b00      	cmp	r3, #0
 8020dd8:	d00f      	beq.n	8020dfa <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8020dda:	693b      	ldr	r3, [r7, #16]
 8020ddc:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8020de0:	b25b      	sxtb	r3, r3
 8020de2:	2b00      	cmp	r3, #0
 8020de4:	da04      	bge.n	8020df0 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8020de6:	693b      	ldr	r3, [r7, #16]
 8020de8:	2203      	movs	r2, #3
 8020dea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8020dee:	e008      	b.n	8020e02 <USBH_MSC_BOT_Process+0xda>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8020df0:	693b      	ldr	r3, [r7, #16]
 8020df2:	2205      	movs	r2, #5
 8020df4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8020df8:	e003      	b.n	8020e02 <USBH_MSC_BOT_Process+0xda>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8020dfa:	693b      	ldr	r3, [r7, #16]
 8020dfc:	2207      	movs	r2, #7
 8020dfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8020e02:	687b      	ldr	r3, [r7, #4]
 8020e04:	2202      	movs	r2, #2
 8020e06:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8020e0a:	687b      	ldr	r3, [r7, #4]
 8020e0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8020e10:	687b      	ldr	r3, [r7, #4]
 8020e12:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8020e16:	2300      	movs	r3, #0
 8020e18:	2200      	movs	r2, #0
 8020e1a:	f005 fd2f 	bl	802687c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8020e1e:	e1cb      	b.n	80211b8 <USBH_MSC_BOT_Process+0x490>
      else if (URB_Status == USBH_URB_NOTREADY)
 8020e20:	7d3b      	ldrb	r3, [r7, #20]
 8020e22:	2b02      	cmp	r3, #2
 8020e24:	d112      	bne.n	8020e4c <USBH_MSC_BOT_Process+0x124>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8020e26:	693b      	ldr	r3, [r7, #16]
 8020e28:	2201      	movs	r2, #1
 8020e2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8020e2e:	687b      	ldr	r3, [r7, #4]
 8020e30:	2202      	movs	r2, #2
 8020e32:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8020e36:	687b      	ldr	r3, [r7, #4]
 8020e38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8020e3c:	687b      	ldr	r3, [r7, #4]
 8020e3e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8020e42:	2300      	movs	r3, #0
 8020e44:	2200      	movs	r2, #0
 8020e46:	f005 fd19 	bl	802687c <osMessageQueuePut>
      break;
 8020e4a:	e1b5      	b.n	80211b8 <USBH_MSC_BOT_Process+0x490>
        if (URB_Status == USBH_URB_STALL)
 8020e4c:	7d3b      	ldrb	r3, [r7, #20]
 8020e4e:	2b05      	cmp	r3, #5
 8020e50:	f040 81b2 	bne.w	80211b8 <USBH_MSC_BOT_Process+0x490>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8020e54:	693b      	ldr	r3, [r7, #16]
 8020e56:	220a      	movs	r2, #10
 8020e58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8020e5c:	687b      	ldr	r3, [r7, #4]
 8020e5e:	2202      	movs	r2, #2
 8020e60:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8020e64:	687b      	ldr	r3, [r7, #4]
 8020e66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8020e6a:	687b      	ldr	r3, [r7, #4]
 8020e6c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8020e70:	2300      	movs	r3, #0
 8020e72:	2200      	movs	r2, #0
 8020e74:	f005 fd02 	bl	802687c <osMessageQueuePut>
      break;
 8020e78:	e19e      	b.n	80211b8 <USBH_MSC_BOT_Process+0x490>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8020e7a:	693b      	ldr	r3, [r7, #16]
 8020e7c:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8020e80:	693b      	ldr	r3, [r7, #16]
 8020e82:	895a      	ldrh	r2, [r3, #10]
 8020e84:	693b      	ldr	r3, [r7, #16]
 8020e86:	791b      	ldrb	r3, [r3, #4]
 8020e88:	6878      	ldr	r0, [r7, #4]
 8020e8a:	f002 fb2d 	bl	80234e8 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8020e8e:	693b      	ldr	r3, [r7, #16]
 8020e90:	2204      	movs	r2, #4
 8020e92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 8020e96:	e19c      	b.n	80211d2 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8020e98:	693b      	ldr	r3, [r7, #16]
 8020e9a:	791b      	ldrb	r3, [r3, #4]
 8020e9c:	4619      	mov	r1, r3
 8020e9e:	6878      	ldr	r0, [r7, #4]
 8020ea0:	f009 fad6 	bl	802a450 <USBH_LL_GetURBState>
 8020ea4:	4603      	mov	r3, r0
 8020ea6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8020ea8:	7d3b      	ldrb	r3, [r7, #20]
 8020eaa:	2b01      	cmp	r3, #1
 8020eac:	d13b      	bne.n	8020f26 <USBH_MSC_BOT_Process+0x1fe>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8020eae:	693b      	ldr	r3, [r7, #16]
 8020eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8020eb2:	693a      	ldr	r2, [r7, #16]
 8020eb4:	8952      	ldrh	r2, [r2, #10]
 8020eb6:	4293      	cmp	r3, r2
 8020eb8:	d910      	bls.n	8020edc <USBH_MSC_BOT_Process+0x1b4>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8020eba:	693b      	ldr	r3, [r7, #16]
 8020ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8020ec0:	693a      	ldr	r2, [r7, #16]
 8020ec2:	8952      	ldrh	r2, [r2, #10]
 8020ec4:	441a      	add	r2, r3
 8020ec6:	693b      	ldr	r3, [r7, #16]
 8020ec8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8020ecc:	693b      	ldr	r3, [r7, #16]
 8020ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8020ed0:	693a      	ldr	r2, [r7, #16]
 8020ed2:	8952      	ldrh	r2, [r2, #10]
 8020ed4:	1a9a      	subs	r2, r3, r2
 8020ed6:	693b      	ldr	r3, [r7, #16]
 8020ed8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8020eda:	e002      	b.n	8020ee2 <USBH_MSC_BOT_Process+0x1ba>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8020edc:	693b      	ldr	r3, [r7, #16]
 8020ede:	2200      	movs	r2, #0
 8020ee0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8020ee2:	693b      	ldr	r3, [r7, #16]
 8020ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8020ee6:	2b00      	cmp	r3, #0
 8020ee8:	d00a      	beq.n	8020f00 <USBH_MSC_BOT_Process+0x1d8>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8020eea:	693b      	ldr	r3, [r7, #16]
 8020eec:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8020ef0:	693b      	ldr	r3, [r7, #16]
 8020ef2:	895a      	ldrh	r2, [r3, #10]
 8020ef4:	693b      	ldr	r3, [r7, #16]
 8020ef6:	791b      	ldrb	r3, [r3, #4]
 8020ef8:	6878      	ldr	r0, [r7, #4]
 8020efa:	f002 faf5 	bl	80234e8 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8020efe:	e15d      	b.n	80211bc <USBH_MSC_BOT_Process+0x494>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8020f00:	693b      	ldr	r3, [r7, #16]
 8020f02:	2207      	movs	r2, #7
 8020f04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8020f08:	687b      	ldr	r3, [r7, #4]
 8020f0a:	2202      	movs	r2, #2
 8020f0c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8020f10:	687b      	ldr	r3, [r7, #4]
 8020f12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8020f16:	687b      	ldr	r3, [r7, #4]
 8020f18:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8020f1c:	2300      	movs	r3, #0
 8020f1e:	2200      	movs	r2, #0
 8020f20:	f005 fcac 	bl	802687c <osMessageQueuePut>
      break;
 8020f24:	e14a      	b.n	80211bc <USBH_MSC_BOT_Process+0x494>
      else if (URB_Status == USBH_URB_STALL)
 8020f26:	7d3b      	ldrb	r3, [r7, #20]
 8020f28:	2b05      	cmp	r3, #5
 8020f2a:	f040 8147 	bne.w	80211bc <USBH_MSC_BOT_Process+0x494>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8020f2e:	693b      	ldr	r3, [r7, #16]
 8020f30:	2209      	movs	r2, #9
 8020f32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8020f36:	687b      	ldr	r3, [r7, #4]
 8020f38:	2202      	movs	r2, #2
 8020f3a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8020f3e:	687b      	ldr	r3, [r7, #4]
 8020f40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8020f44:	687b      	ldr	r3, [r7, #4]
 8020f46:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8020f4a:	2300      	movs	r3, #0
 8020f4c:	2200      	movs	r2, #0
 8020f4e:	f005 fc95 	bl	802687c <osMessageQueuePut>
      break;
 8020f52:	e133      	b.n	80211bc <USBH_MSC_BOT_Process+0x494>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8020f54:	693b      	ldr	r3, [r7, #16]
 8020f56:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8020f5a:	693b      	ldr	r3, [r7, #16]
 8020f5c:	891a      	ldrh	r2, [r3, #8]
 8020f5e:	693b      	ldr	r3, [r7, #16]
 8020f60:	795b      	ldrb	r3, [r3, #5]
 8020f62:	2001      	movs	r0, #1
 8020f64:	9000      	str	r0, [sp, #0]
 8020f66:	6878      	ldr	r0, [r7, #4]
 8020f68:	f002 fa99 	bl	802349e <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8020f6c:	693b      	ldr	r3, [r7, #16]
 8020f6e:	2206      	movs	r2, #6
 8020f70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8020f74:	e12d      	b.n	80211d2 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8020f76:	693b      	ldr	r3, [r7, #16]
 8020f78:	795b      	ldrb	r3, [r3, #5]
 8020f7a:	4619      	mov	r1, r3
 8020f7c:	6878      	ldr	r0, [r7, #4]
 8020f7e:	f009 fa67 	bl	802a450 <USBH_LL_GetURBState>
 8020f82:	4603      	mov	r3, r0
 8020f84:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8020f86:	7d3b      	ldrb	r3, [r7, #20]
 8020f88:	2b01      	cmp	r3, #1
 8020f8a:	d13d      	bne.n	8021008 <USBH_MSC_BOT_Process+0x2e0>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8020f8c:	693b      	ldr	r3, [r7, #16]
 8020f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8020f90:	693a      	ldr	r2, [r7, #16]
 8020f92:	8912      	ldrh	r2, [r2, #8]
 8020f94:	4293      	cmp	r3, r2
 8020f96:	d910      	bls.n	8020fba <USBH_MSC_BOT_Process+0x292>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8020f98:	693b      	ldr	r3, [r7, #16]
 8020f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8020f9e:	693a      	ldr	r2, [r7, #16]
 8020fa0:	8912      	ldrh	r2, [r2, #8]
 8020fa2:	441a      	add	r2, r3
 8020fa4:	693b      	ldr	r3, [r7, #16]
 8020fa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8020faa:	693b      	ldr	r3, [r7, #16]
 8020fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8020fae:	693a      	ldr	r2, [r7, #16]
 8020fb0:	8912      	ldrh	r2, [r2, #8]
 8020fb2:	1a9a      	subs	r2, r3, r2
 8020fb4:	693b      	ldr	r3, [r7, #16]
 8020fb6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8020fb8:	e002      	b.n	8020fc0 <USBH_MSC_BOT_Process+0x298>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8020fba:	693b      	ldr	r3, [r7, #16]
 8020fbc:	2200      	movs	r2, #0
 8020fbe:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8020fc0:	693b      	ldr	r3, [r7, #16]
 8020fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8020fc4:	2b00      	cmp	r3, #0
 8020fc6:	d00c      	beq.n	8020fe2 <USBH_MSC_BOT_Process+0x2ba>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8020fc8:	693b      	ldr	r3, [r7, #16]
 8020fca:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8020fce:	693b      	ldr	r3, [r7, #16]
 8020fd0:	891a      	ldrh	r2, [r3, #8]
 8020fd2:	693b      	ldr	r3, [r7, #16]
 8020fd4:	795b      	ldrb	r3, [r3, #5]
 8020fd6:	2001      	movs	r0, #1
 8020fd8:	9000      	str	r0, [sp, #0]
 8020fda:	6878      	ldr	r0, [r7, #4]
 8020fdc:	f002 fa5f 	bl	802349e <USBH_BulkSendData>
 8020fe0:	e003      	b.n	8020fea <USBH_MSC_BOT_Process+0x2c2>
                                  MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8020fe2:	693b      	ldr	r3, [r7, #16]
 8020fe4:	2207      	movs	r2, #7
 8020fe6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8020fea:	687b      	ldr	r3, [r7, #4]
 8020fec:	2202      	movs	r2, #2
 8020fee:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8020ff2:	687b      	ldr	r3, [r7, #4]
 8020ff4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8020ff8:	687b      	ldr	r3, [r7, #4]
 8020ffa:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8020ffe:	2300      	movs	r3, #0
 8021000:	2200      	movs	r2, #0
 8021002:	f005 fc3b 	bl	802687c <osMessageQueuePut>
#endif
      }
      else
      {
      }
      break;
 8021006:	e0db      	b.n	80211c0 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_NOTREADY)
 8021008:	7d3b      	ldrb	r3, [r7, #20]
 802100a:	2b02      	cmp	r3, #2
 802100c:	d112      	bne.n	8021034 <USBH_MSC_BOT_Process+0x30c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 802100e:	693b      	ldr	r3, [r7, #16]
 8021010:	2205      	movs	r2, #5
 8021012:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8021016:	687b      	ldr	r3, [r7, #4]
 8021018:	2202      	movs	r2, #2
 802101a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 802101e:	687b      	ldr	r3, [r7, #4]
 8021020:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8021024:	687b      	ldr	r3, [r7, #4]
 8021026:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 802102a:	2300      	movs	r3, #0
 802102c:	2200      	movs	r2, #0
 802102e:	f005 fc25 	bl	802687c <osMessageQueuePut>
      break;
 8021032:	e0c5      	b.n	80211c0 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_STALL)
 8021034:	7d3b      	ldrb	r3, [r7, #20]
 8021036:	2b05      	cmp	r3, #5
 8021038:	f040 80c2 	bne.w	80211c0 <USBH_MSC_BOT_Process+0x498>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 802103c:	693b      	ldr	r3, [r7, #16]
 802103e:	220a      	movs	r2, #10
 8021040:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8021044:	687b      	ldr	r3, [r7, #4]
 8021046:	2202      	movs	r2, #2
 8021048:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 802104c:	687b      	ldr	r3, [r7, #4]
 802104e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8021052:	687b      	ldr	r3, [r7, #4]
 8021054:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8021058:	2300      	movs	r3, #0
 802105a:	2200      	movs	r2, #0
 802105c:	f005 fc0e 	bl	802687c <osMessageQueuePut>
      break;
 8021060:	e0ae      	b.n	80211c0 <USBH_MSC_BOT_Process+0x498>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8021062:	693b      	ldr	r3, [r7, #16]
 8021064:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 8021068:	693b      	ldr	r3, [r7, #16]
 802106a:	791b      	ldrb	r3, [r3, #4]
 802106c:	220d      	movs	r2, #13
 802106e:	6878      	ldr	r0, [r7, #4]
 8021070:	f002 fa3a 	bl	80234e8 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8021074:	693b      	ldr	r3, [r7, #16]
 8021076:	2208      	movs	r2, #8
 8021078:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 802107c:	e0a9      	b.n	80211d2 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 802107e:	693b      	ldr	r3, [r7, #16]
 8021080:	791b      	ldrb	r3, [r3, #4]
 8021082:	4619      	mov	r1, r3
 8021084:	6878      	ldr	r0, [r7, #4]
 8021086:	f009 f9e3 	bl	802a450 <USBH_LL_GetURBState>
 802108a:	4603      	mov	r3, r0
 802108c:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 802108e:	7d3b      	ldrb	r3, [r7, #20]
 8021090:	2b01      	cmp	r3, #1
 8021092:	d123      	bne.n	80210dc <USBH_MSC_BOT_Process+0x3b4>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8021094:	693b      	ldr	r3, [r7, #16]
 8021096:	2201      	movs	r2, #1
 8021098:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 802109c:	693b      	ldr	r3, [r7, #16]
 802109e:	2201      	movs	r2, #1
 80210a0:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80210a4:	6878      	ldr	r0, [r7, #4]
 80210a6:	f000 f8c5 	bl	8021234 <USBH_MSC_DecodeCSW>
 80210aa:	4603      	mov	r3, r0
 80210ac:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80210ae:	7d7b      	ldrb	r3, [r7, #21]
 80210b0:	2b00      	cmp	r3, #0
 80210b2:	d102      	bne.n	80210ba <USBH_MSC_BOT_Process+0x392>
        {
          status = USBH_OK;
 80210b4:	2300      	movs	r3, #0
 80210b6:	75fb      	strb	r3, [r7, #23]
 80210b8:	e001      	b.n	80210be <USBH_MSC_BOT_Process+0x396>
        }
        else
        {
          status = USBH_FAIL;
 80210ba:	2302      	movs	r3, #2
 80210bc:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80210be:	687b      	ldr	r3, [r7, #4]
 80210c0:	2202      	movs	r2, #2
 80210c2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80210c6:	687b      	ldr	r3, [r7, #4]
 80210c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80210cc:	687b      	ldr	r3, [r7, #4]
 80210ce:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80210d2:	2300      	movs	r3, #0
 80210d4:	2200      	movs	r2, #0
 80210d6:	f005 fbd1 	bl	802687c <osMessageQueuePut>
#endif
      }
      else
      {
      }
      break;
 80210da:	e073      	b.n	80211c4 <USBH_MSC_BOT_Process+0x49c>
      else if (URB_Status == USBH_URB_STALL)
 80210dc:	7d3b      	ldrb	r3, [r7, #20]
 80210de:	2b05      	cmp	r3, #5
 80210e0:	d170      	bne.n	80211c4 <USBH_MSC_BOT_Process+0x49c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80210e2:	693b      	ldr	r3, [r7, #16]
 80210e4:	2209      	movs	r2, #9
 80210e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80210ea:	687b      	ldr	r3, [r7, #4]
 80210ec:	2202      	movs	r2, #2
 80210ee:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80210f2:	687b      	ldr	r3, [r7, #4]
 80210f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80210f8:	687b      	ldr	r3, [r7, #4]
 80210fa:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80210fe:	2300      	movs	r3, #0
 8021100:	2200      	movs	r2, #0
 8021102:	f005 fbbb 	bl	802687c <osMessageQueuePut>
      break;
 8021106:	e05d      	b.n	80211c4 <USBH_MSC_BOT_Process+0x49c>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8021108:	78fb      	ldrb	r3, [r7, #3]
 802110a:	2200      	movs	r2, #0
 802110c:	4619      	mov	r1, r3
 802110e:	6878      	ldr	r0, [r7, #4]
 8021110:	f000 f864 	bl	80211dc <USBH_MSC_BOT_Abort>
 8021114:	4603      	mov	r3, r0
 8021116:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8021118:	7dbb      	ldrb	r3, [r7, #22]
 802111a:	2b00      	cmp	r3, #0
 802111c:	d104      	bne.n	8021128 <USBH_MSC_BOT_Process+0x400>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 802111e:	693b      	ldr	r3, [r7, #16]
 8021120:	2207      	movs	r2, #7
 8021122:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8021126:	e04f      	b.n	80211c8 <USBH_MSC_BOT_Process+0x4a0>
      else if (error == USBH_UNRECOVERED_ERROR)
 8021128:	7dbb      	ldrb	r3, [r7, #22]
 802112a:	2b04      	cmp	r3, #4
 802112c:	d14c      	bne.n	80211c8 <USBH_MSC_BOT_Process+0x4a0>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 802112e:	693b      	ldr	r3, [r7, #16]
 8021130:	220b      	movs	r2, #11
 8021132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8021136:	e047      	b.n	80211c8 <USBH_MSC_BOT_Process+0x4a0>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8021138:	78fb      	ldrb	r3, [r7, #3]
 802113a:	2201      	movs	r2, #1
 802113c:	4619      	mov	r1, r3
 802113e:	6878      	ldr	r0, [r7, #4]
 8021140:	f000 f84c 	bl	80211dc <USBH_MSC_BOT_Abort>
 8021144:	4603      	mov	r3, r0
 8021146:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8021148:	7dbb      	ldrb	r3, [r7, #22]
 802114a:	2b00      	cmp	r3, #0
 802114c:	d11d      	bne.n	802118a <USBH_MSC_BOT_Process+0x462>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 802114e:	693b      	ldr	r3, [r7, #16]
 8021150:	795b      	ldrb	r3, [r3, #5]
 8021152:	4619      	mov	r1, r3
 8021154:	6878      	ldr	r0, [r7, #4]
 8021156:	f009 f9d8 	bl	802a50a <USBH_LL_GetToggle>
 802115a:	4603      	mov	r3, r0
 802115c:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 802115e:	693b      	ldr	r3, [r7, #16]
 8021160:	7959      	ldrb	r1, [r3, #5]
 8021162:	7bfb      	ldrb	r3, [r7, #15]
 8021164:	f1c3 0301 	rsb	r3, r3, #1
 8021168:	b2db      	uxtb	r3, r3
 802116a:	461a      	mov	r2, r3
 802116c:	6878      	ldr	r0, [r7, #4]
 802116e:	f009 f999 	bl	802a4a4 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8021172:	693b      	ldr	r3, [r7, #16]
 8021174:	791b      	ldrb	r3, [r3, #4]
 8021176:	2200      	movs	r2, #0
 8021178:	4619      	mov	r1, r3
 802117a:	6878      	ldr	r0, [r7, #4]
 802117c:	f009 f992 	bl	802a4a4 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8021180:	693b      	ldr	r3, [r7, #16]
 8021182:	2209      	movs	r2, #9
 8021184:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8021188:	e020      	b.n	80211cc <USBH_MSC_BOT_Process+0x4a4>
        if (error == USBH_UNRECOVERED_ERROR)
 802118a:	7dbb      	ldrb	r3, [r7, #22]
 802118c:	2b04      	cmp	r3, #4
 802118e:	d11d      	bne.n	80211cc <USBH_MSC_BOT_Process+0x4a4>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8021190:	693b      	ldr	r3, [r7, #16]
 8021192:	220b      	movs	r2, #11
 8021194:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8021198:	e018      	b.n	80211cc <USBH_MSC_BOT_Process+0x4a4>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 802119a:	6878      	ldr	r0, [r7, #4]
 802119c:	f7ff fd67 	bl	8020c6e <USBH_MSC_BOT_REQ_Reset>
 80211a0:	4603      	mov	r3, r0
 80211a2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80211a4:	7dfb      	ldrb	r3, [r7, #23]
 80211a6:	2b00      	cmp	r3, #0
 80211a8:	d112      	bne.n	80211d0 <USBH_MSC_BOT_Process+0x4a8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80211aa:	693b      	ldr	r3, [r7, #16]
 80211ac:	2201      	movs	r2, #1
 80211ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 80211b2:	e00d      	b.n	80211d0 <USBH_MSC_BOT_Process+0x4a8>

    default:
      break;
 80211b4:	bf00      	nop
 80211b6:	e00c      	b.n	80211d2 <USBH_MSC_BOT_Process+0x4aa>
      break;
 80211b8:	bf00      	nop
 80211ba:	e00a      	b.n	80211d2 <USBH_MSC_BOT_Process+0x4aa>
      break;
 80211bc:	bf00      	nop
 80211be:	e008      	b.n	80211d2 <USBH_MSC_BOT_Process+0x4aa>
      break;
 80211c0:	bf00      	nop
 80211c2:	e006      	b.n	80211d2 <USBH_MSC_BOT_Process+0x4aa>
      break;
 80211c4:	bf00      	nop
 80211c6:	e004      	b.n	80211d2 <USBH_MSC_BOT_Process+0x4aa>
      break;
 80211c8:	bf00      	nop
 80211ca:	e002      	b.n	80211d2 <USBH_MSC_BOT_Process+0x4aa>
      break;
 80211cc:	bf00      	nop
 80211ce:	e000      	b.n	80211d2 <USBH_MSC_BOT_Process+0x4aa>
      break;
 80211d0:	bf00      	nop
  }
  return status;
 80211d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80211d4:	4618      	mov	r0, r3
 80211d6:	3718      	adds	r7, #24
 80211d8:	46bd      	mov	sp, r7
 80211da:	bd80      	pop	{r7, pc}

080211dc <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80211dc:	b580      	push	{r7, lr}
 80211de:	b084      	sub	sp, #16
 80211e0:	af00      	add	r7, sp, #0
 80211e2:	6078      	str	r0, [r7, #4]
 80211e4:	460b      	mov	r3, r1
 80211e6:	70fb      	strb	r3, [r7, #3]
 80211e8:	4613      	mov	r3, r2
 80211ea:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80211ec:	2302      	movs	r3, #2
 80211ee:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80211f0:	687b      	ldr	r3, [r7, #4]
 80211f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80211f6:	69db      	ldr	r3, [r3, #28]
 80211f8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80211fa:	78bb      	ldrb	r3, [r7, #2]
 80211fc:	2b00      	cmp	r3, #0
 80211fe:	d002      	beq.n	8021206 <USBH_MSC_BOT_Abort+0x2a>
 8021200:	2b01      	cmp	r3, #1
 8021202:	d009      	beq.n	8021218 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8021204:	e011      	b.n	802122a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8021206:	68bb      	ldr	r3, [r7, #8]
 8021208:	79db      	ldrb	r3, [r3, #7]
 802120a:	4619      	mov	r1, r3
 802120c:	6878      	ldr	r0, [r7, #4]
 802120e:	f001 fb13 	bl	8022838 <USBH_ClrFeature>
 8021212:	4603      	mov	r3, r0
 8021214:	73fb      	strb	r3, [r7, #15]
      break;
 8021216:	e008      	b.n	802122a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8021218:	68bb      	ldr	r3, [r7, #8]
 802121a:	799b      	ldrb	r3, [r3, #6]
 802121c:	4619      	mov	r1, r3
 802121e:	6878      	ldr	r0, [r7, #4]
 8021220:	f001 fb0a 	bl	8022838 <USBH_ClrFeature>
 8021224:	4603      	mov	r3, r0
 8021226:	73fb      	strb	r3, [r7, #15]
      break;
 8021228:	bf00      	nop
  }
  return status;
 802122a:	7bfb      	ldrb	r3, [r7, #15]
}
 802122c:	4618      	mov	r0, r3
 802122e:	3710      	adds	r7, #16
 8021230:	46bd      	mov	sp, r7
 8021232:	bd80      	pop	{r7, pc}

08021234 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8021234:	b580      	push	{r7, lr}
 8021236:	b084      	sub	sp, #16
 8021238:	af00      	add	r7, sp, #0
 802123a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802123c:	687b      	ldr	r3, [r7, #4]
 802123e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8021242:	69db      	ldr	r3, [r3, #28]
 8021244:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8021246:	2301      	movs	r3, #1
 8021248:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 802124a:	68bb      	ldr	r3, [r7, #8]
 802124c:	791b      	ldrb	r3, [r3, #4]
 802124e:	4619      	mov	r1, r3
 8021250:	6878      	ldr	r0, [r7, #4]
 8021252:	f009 f86b 	bl	802a32c <USBH_LL_GetLastXferSize>
 8021256:	4603      	mov	r3, r0
 8021258:	2b0d      	cmp	r3, #13
 802125a:	d002      	beq.n	8021262 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 802125c:	2302      	movs	r3, #2
 802125e:	73fb      	strb	r3, [r7, #15]
 8021260:	e024      	b.n	80212ac <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8021262:	68bb      	ldr	r3, [r7, #8]
 8021264:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8021266:	4a14      	ldr	r2, [pc, #80]	@ (80212b8 <USBH_MSC_DecodeCSW+0x84>)
 8021268:	4293      	cmp	r3, r2
 802126a:	d11d      	bne.n	80212a8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 802126c:	68bb      	ldr	r3, [r7, #8]
 802126e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8021270:	68bb      	ldr	r3, [r7, #8]
 8021272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021274:	429a      	cmp	r2, r3
 8021276:	d119      	bne.n	80212ac <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8021278:	68bb      	ldr	r3, [r7, #8]
 802127a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 802127e:	2b00      	cmp	r3, #0
 8021280:	d102      	bne.n	8021288 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8021282:	2300      	movs	r3, #0
 8021284:	73fb      	strb	r3, [r7, #15]
 8021286:	e011      	b.n	80212ac <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8021288:	68bb      	ldr	r3, [r7, #8]
 802128a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 802128e:	2b01      	cmp	r3, #1
 8021290:	d102      	bne.n	8021298 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8021292:	2301      	movs	r3, #1
 8021294:	73fb      	strb	r3, [r7, #15]
 8021296:	e009      	b.n	80212ac <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8021298:	68bb      	ldr	r3, [r7, #8]
 802129a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 802129e:	2b02      	cmp	r3, #2
 80212a0:	d104      	bne.n	80212ac <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80212a2:	2302      	movs	r3, #2
 80212a4:	73fb      	strb	r3, [r7, #15]
 80212a6:	e001      	b.n	80212ac <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80212a8:	2302      	movs	r3, #2
 80212aa:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80212ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80212ae:	4618      	mov	r0, r3
 80212b0:	3710      	adds	r7, #16
 80212b2:	46bd      	mov	sp, r7
 80212b4:	bd80      	pop	{r7, pc}
 80212b6:	bf00      	nop
 80212b8:	53425355 	.word	0x53425355

080212bc <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80212bc:	b580      	push	{r7, lr}
 80212be:	b084      	sub	sp, #16
 80212c0:	af00      	add	r7, sp, #0
 80212c2:	6078      	str	r0, [r7, #4]
 80212c4:	460b      	mov	r3, r1
 80212c6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL;
 80212c8:	2302      	movs	r3, #2
 80212ca:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80212cc:	687b      	ldr	r3, [r7, #4]
 80212ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80212d2:	69db      	ldr	r3, [r3, #28]
 80212d4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80212d6:	68bb      	ldr	r3, [r7, #8]
 80212d8:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80212dc:	2b01      	cmp	r3, #1
 80212de:	d002      	beq.n	80212e6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80212e0:	2b02      	cmp	r3, #2
 80212e2:	d021      	beq.n	8021328 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80212e4:	e028      	b.n	8021338 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80212e6:	68bb      	ldr	r3, [r7, #8]
 80212e8:	2200      	movs	r2, #0
 80212ea:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80212ec:	68bb      	ldr	r3, [r7, #8]
 80212ee:	2200      	movs	r2, #0
 80212f0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80212f4:	68bb      	ldr	r3, [r7, #8]
 80212f6:	220a      	movs	r2, #10
 80212f8:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80212fc:	68bb      	ldr	r3, [r7, #8]
 80212fe:	3363      	adds	r3, #99	@ 0x63
 8021300:	2210      	movs	r2, #16
 8021302:	2100      	movs	r1, #0
 8021304:	4618      	mov	r0, r3
 8021306:	f00a fc01 	bl	802bb0c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 802130a:	68bb      	ldr	r3, [r7, #8]
 802130c:	2200      	movs	r2, #0
 802130e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8021312:	68bb      	ldr	r3, [r7, #8]
 8021314:	2201      	movs	r2, #1
 8021316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 802131a:	68bb      	ldr	r3, [r7, #8]
 802131c:	2202      	movs	r2, #2
 802131e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 8021322:	2301      	movs	r3, #1
 8021324:	73fb      	strb	r3, [r7, #15]
      break;
 8021326:	e007      	b.n	8021338 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8021328:	78fb      	ldrb	r3, [r7, #3]
 802132a:	4619      	mov	r1, r3
 802132c:	6878      	ldr	r0, [r7, #4]
 802132e:	f7ff fcfb 	bl	8020d28 <USBH_MSC_BOT_Process>
 8021332:	4603      	mov	r3, r0
 8021334:	73fb      	strb	r3, [r7, #15]
      break;
 8021336:	bf00      	nop
  }

  return error;
 8021338:	7bfb      	ldrb	r3, [r7, #15]
}
 802133a:	4618      	mov	r0, r3
 802133c:	3710      	adds	r7, #16
 802133e:	46bd      	mov	sp, r7
 8021340:	bd80      	pop	{r7, pc}

08021342 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8021342:	b580      	push	{r7, lr}
 8021344:	b086      	sub	sp, #24
 8021346:	af00      	add	r7, sp, #0
 8021348:	60f8      	str	r0, [r7, #12]
 802134a:	460b      	mov	r3, r1
 802134c:	607a      	str	r2, [r7, #4]
 802134e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY;
 8021350:	2301      	movs	r3, #1
 8021352:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8021354:	68fb      	ldr	r3, [r7, #12]
 8021356:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 802135a:	69db      	ldr	r3, [r3, #28]
 802135c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 802135e:	693b      	ldr	r3, [r7, #16]
 8021360:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8021364:	2b01      	cmp	r3, #1
 8021366:	d002      	beq.n	802136e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8021368:	2b02      	cmp	r3, #2
 802136a:	d027      	beq.n	80213bc <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 802136c:	e05e      	b.n	802142c <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 802136e:	693b      	ldr	r3, [r7, #16]
 8021370:	2208      	movs	r2, #8
 8021372:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8021374:	693b      	ldr	r3, [r7, #16]
 8021376:	2280      	movs	r2, #128	@ 0x80
 8021378:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 802137c:	693b      	ldr	r3, [r7, #16]
 802137e:	220a      	movs	r2, #10
 8021380:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8021384:	693b      	ldr	r3, [r7, #16]
 8021386:	3363      	adds	r3, #99	@ 0x63
 8021388:	2210      	movs	r2, #16
 802138a:	2100      	movs	r1, #0
 802138c:	4618      	mov	r0, r3
 802138e:	f00a fbbd 	bl	802bb0c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8021392:	693b      	ldr	r3, [r7, #16]
 8021394:	2225      	movs	r2, #37	@ 0x25
 8021396:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 802139a:	693b      	ldr	r3, [r7, #16]
 802139c:	2201      	movs	r2, #1
 802139e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80213a2:	693b      	ldr	r3, [r7, #16]
 80213a4:	2202      	movs	r2, #2
 80213a6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80213aa:	693b      	ldr	r3, [r7, #16]
 80213ac:	f103 0210 	add.w	r2, r3, #16
 80213b0:	693b      	ldr	r3, [r7, #16]
 80213b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 80213b6:	2301      	movs	r3, #1
 80213b8:	75fb      	strb	r3, [r7, #23]
      break;
 80213ba:	e037      	b.n	802142c <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 80213bc:	7afb      	ldrb	r3, [r7, #11]
 80213be:	4619      	mov	r1, r3
 80213c0:	68f8      	ldr	r0, [r7, #12]
 80213c2:	f7ff fcb1 	bl	8020d28 <USBH_MSC_BOT_Process>
 80213c6:	4603      	mov	r3, r0
 80213c8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80213ca:	7dfb      	ldrb	r3, [r7, #23]
 80213cc:	2b00      	cmp	r3, #0
 80213ce:	d12c      	bne.n	802142a <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80213d0:	693b      	ldr	r3, [r7, #16]
 80213d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80213d6:	3303      	adds	r3, #3
 80213d8:	781b      	ldrb	r3, [r3, #0]
 80213da:	461a      	mov	r2, r3
 80213dc:	693b      	ldr	r3, [r7, #16]
 80213de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80213e2:	3302      	adds	r3, #2
 80213e4:	781b      	ldrb	r3, [r3, #0]
 80213e6:	021b      	lsls	r3, r3, #8
 80213e8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80213ea:	693b      	ldr	r3, [r7, #16]
 80213ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80213f0:	3301      	adds	r3, #1
 80213f2:	781b      	ldrb	r3, [r3, #0]
 80213f4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80213f6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80213f8:	693b      	ldr	r3, [r7, #16]
 80213fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80213fe:	781b      	ldrb	r3, [r3, #0]
 8021400:	061b      	lsls	r3, r3, #24
 8021402:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8021404:	687b      	ldr	r3, [r7, #4]
 8021406:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8021408:	693b      	ldr	r3, [r7, #16]
 802140a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 802140e:	3307      	adds	r3, #7
 8021410:	781b      	ldrb	r3, [r3, #0]
 8021412:	461a      	mov	r2, r3
 8021414:	693b      	ldr	r3, [r7, #16]
 8021416:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 802141a:	3306      	adds	r3, #6
 802141c:	781b      	ldrb	r3, [r3, #0]
 802141e:	021b      	lsls	r3, r3, #8
 8021420:	b29b      	uxth	r3, r3
 8021422:	4313      	orrs	r3, r2
 8021424:	b29a      	uxth	r2, r3
 8021426:	687b      	ldr	r3, [r7, #4]
 8021428:	809a      	strh	r2, [r3, #4]
      break;
 802142a:	bf00      	nop
  }

  return error;
 802142c:	7dfb      	ldrb	r3, [r7, #23]
}
 802142e:	4618      	mov	r0, r3
 8021430:	3718      	adds	r7, #24
 8021432:	46bd      	mov	sp, r7
 8021434:	bd80      	pop	{r7, pc}

08021436 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8021436:	b580      	push	{r7, lr}
 8021438:	b086      	sub	sp, #24
 802143a:	af00      	add	r7, sp, #0
 802143c:	60f8      	str	r0, [r7, #12]
 802143e:	460b      	mov	r3, r1
 8021440:	607a      	str	r2, [r7, #4]
 8021442:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8021444:	2302      	movs	r3, #2
 8021446:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8021448:	68fb      	ldr	r3, [r7, #12]
 802144a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 802144e:	69db      	ldr	r3, [r3, #28]
 8021450:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8021452:	693b      	ldr	r3, [r7, #16]
 8021454:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8021458:	2b01      	cmp	r3, #1
 802145a:	d002      	beq.n	8021462 <USBH_MSC_SCSI_Inquiry+0x2c>
 802145c:	2b02      	cmp	r3, #2
 802145e:	d03d      	beq.n	80214dc <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8021460:	e089      	b.n	8021576 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8021462:	693b      	ldr	r3, [r7, #16]
 8021464:	2224      	movs	r2, #36	@ 0x24
 8021466:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8021468:	693b      	ldr	r3, [r7, #16]
 802146a:	2280      	movs	r2, #128	@ 0x80
 802146c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8021470:	693b      	ldr	r3, [r7, #16]
 8021472:	220a      	movs	r2, #10
 8021474:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8021478:	693b      	ldr	r3, [r7, #16]
 802147a:	3363      	adds	r3, #99	@ 0x63
 802147c:	220a      	movs	r2, #10
 802147e:	2100      	movs	r1, #0
 8021480:	4618      	mov	r0, r3
 8021482:	f00a fb43 	bl	802bb0c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8021486:	693b      	ldr	r3, [r7, #16]
 8021488:	2212      	movs	r2, #18
 802148a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 802148e:	7afb      	ldrb	r3, [r7, #11]
 8021490:	015b      	lsls	r3, r3, #5
 8021492:	b2da      	uxtb	r2, r3
 8021494:	693b      	ldr	r3, [r7, #16]
 8021496:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 802149a:	693b      	ldr	r3, [r7, #16]
 802149c:	2200      	movs	r2, #0
 802149e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80214a2:	693b      	ldr	r3, [r7, #16]
 80214a4:	2200      	movs	r2, #0
 80214a6:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80214aa:	693b      	ldr	r3, [r7, #16]
 80214ac:	2224      	movs	r2, #36	@ 0x24
 80214ae:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80214b2:	693b      	ldr	r3, [r7, #16]
 80214b4:	2200      	movs	r2, #0
 80214b6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80214ba:	693b      	ldr	r3, [r7, #16]
 80214bc:	2201      	movs	r2, #1
 80214be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80214c2:	693b      	ldr	r3, [r7, #16]
 80214c4:	2202      	movs	r2, #2
 80214c6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80214ca:	693b      	ldr	r3, [r7, #16]
 80214cc:	f103 0210 	add.w	r2, r3, #16
 80214d0:	693b      	ldr	r3, [r7, #16]
 80214d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 80214d6:	2301      	movs	r3, #1
 80214d8:	75fb      	strb	r3, [r7, #23]
      break;
 80214da:	e04c      	b.n	8021576 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80214dc:	7afb      	ldrb	r3, [r7, #11]
 80214de:	4619      	mov	r1, r3
 80214e0:	68f8      	ldr	r0, [r7, #12]
 80214e2:	f7ff fc21 	bl	8020d28 <USBH_MSC_BOT_Process>
 80214e6:	4603      	mov	r3, r0
 80214e8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80214ea:	7dfb      	ldrb	r3, [r7, #23]
 80214ec:	2b00      	cmp	r3, #0
 80214ee:	d141      	bne.n	8021574 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80214f0:	2222      	movs	r2, #34	@ 0x22
 80214f2:	2100      	movs	r1, #0
 80214f4:	6878      	ldr	r0, [r7, #4]
 80214f6:	f00a fb09 	bl	802bb0c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80214fa:	693b      	ldr	r3, [r7, #16]
 80214fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8021500:	781b      	ldrb	r3, [r3, #0]
 8021502:	f003 031f 	and.w	r3, r3, #31
 8021506:	b2da      	uxtb	r2, r3
 8021508:	687b      	ldr	r3, [r7, #4]
 802150a:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 802150c:	693b      	ldr	r3, [r7, #16]
 802150e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8021512:	781b      	ldrb	r3, [r3, #0]
 8021514:	095b      	lsrs	r3, r3, #5
 8021516:	b2da      	uxtb	r2, r3
 8021518:	687b      	ldr	r3, [r7, #4]
 802151a:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 802151c:	693b      	ldr	r3, [r7, #16]
 802151e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8021522:	3301      	adds	r3, #1
 8021524:	781b      	ldrb	r3, [r3, #0]
 8021526:	b25b      	sxtb	r3, r3
 8021528:	2b00      	cmp	r3, #0
 802152a:	da03      	bge.n	8021534 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 802152c:	687b      	ldr	r3, [r7, #4]
 802152e:	2201      	movs	r2, #1
 8021530:	709a      	strb	r2, [r3, #2]
 8021532:	e002      	b.n	802153a <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8021534:	687b      	ldr	r3, [r7, #4]
 8021536:	2200      	movs	r2, #0
 8021538:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 802153a:	687b      	ldr	r3, [r7, #4]
 802153c:	1cd8      	adds	r0, r3, #3
 802153e:	693b      	ldr	r3, [r7, #16]
 8021540:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8021544:	3308      	adds	r3, #8
 8021546:	2208      	movs	r2, #8
 8021548:	4619      	mov	r1, r3
 802154a:	f00b f814 	bl	802c576 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 802154e:	687b      	ldr	r3, [r7, #4]
 8021550:	f103 000c 	add.w	r0, r3, #12
 8021554:	693b      	ldr	r3, [r7, #16]
 8021556:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 802155a:	3310      	adds	r3, #16
 802155c:	2210      	movs	r2, #16
 802155e:	4619      	mov	r1, r3
 8021560:	f00b f809 	bl	802c576 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8021564:	687b      	ldr	r3, [r7, #4]
 8021566:	331d      	adds	r3, #29
 8021568:	693a      	ldr	r2, [r7, #16]
 802156a:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 802156e:	3220      	adds	r2, #32
 8021570:	6812      	ldr	r2, [r2, #0]
 8021572:	601a      	str	r2, [r3, #0]
      break;
 8021574:	bf00      	nop
  }

  return error;
 8021576:	7dfb      	ldrb	r3, [r7, #23]
}
 8021578:	4618      	mov	r0, r3
 802157a:	3718      	adds	r7, #24
 802157c:	46bd      	mov	sp, r7
 802157e:	bd80      	pop	{r7, pc}

08021580 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8021580:	b580      	push	{r7, lr}
 8021582:	b086      	sub	sp, #24
 8021584:	af00      	add	r7, sp, #0
 8021586:	60f8      	str	r0, [r7, #12]
 8021588:	460b      	mov	r3, r1
 802158a:	607a      	str	r2, [r7, #4]
 802158c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 802158e:	2302      	movs	r3, #2
 8021590:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8021592:	68fb      	ldr	r3, [r7, #12]
 8021594:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8021598:	69db      	ldr	r3, [r3, #28]
 802159a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 802159c:	693b      	ldr	r3, [r7, #16]
 802159e:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80215a2:	2b01      	cmp	r3, #1
 80215a4:	d002      	beq.n	80215ac <USBH_MSC_SCSI_RequestSense+0x2c>
 80215a6:	2b02      	cmp	r3, #2
 80215a8:	d03d      	beq.n	8021626 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80215aa:	e05d      	b.n	8021668 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80215ac:	693b      	ldr	r3, [r7, #16]
 80215ae:	220e      	movs	r2, #14
 80215b0:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80215b2:	693b      	ldr	r3, [r7, #16]
 80215b4:	2280      	movs	r2, #128	@ 0x80
 80215b6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80215ba:	693b      	ldr	r3, [r7, #16]
 80215bc:	220a      	movs	r2, #10
 80215be:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80215c2:	693b      	ldr	r3, [r7, #16]
 80215c4:	3363      	adds	r3, #99	@ 0x63
 80215c6:	2210      	movs	r2, #16
 80215c8:	2100      	movs	r1, #0
 80215ca:	4618      	mov	r0, r3
 80215cc:	f00a fa9e 	bl	802bb0c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80215d0:	693b      	ldr	r3, [r7, #16]
 80215d2:	2203      	movs	r2, #3
 80215d4:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80215d8:	7afb      	ldrb	r3, [r7, #11]
 80215da:	015b      	lsls	r3, r3, #5
 80215dc:	b2da      	uxtb	r2, r3
 80215de:	693b      	ldr	r3, [r7, #16]
 80215e0:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80215e4:	693b      	ldr	r3, [r7, #16]
 80215e6:	2200      	movs	r2, #0
 80215e8:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80215ec:	693b      	ldr	r3, [r7, #16]
 80215ee:	2200      	movs	r2, #0
 80215f0:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80215f4:	693b      	ldr	r3, [r7, #16]
 80215f6:	220e      	movs	r2, #14
 80215f8:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80215fc:	693b      	ldr	r3, [r7, #16]
 80215fe:	2200      	movs	r2, #0
 8021600:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8021604:	693b      	ldr	r3, [r7, #16]
 8021606:	2201      	movs	r2, #1
 8021608:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 802160c:	693b      	ldr	r3, [r7, #16]
 802160e:	2202      	movs	r2, #2
 8021610:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8021614:	693b      	ldr	r3, [r7, #16]
 8021616:	f103 0210 	add.w	r2, r3, #16
 802161a:	693b      	ldr	r3, [r7, #16]
 802161c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8021620:	2301      	movs	r3, #1
 8021622:	75fb      	strb	r3, [r7, #23]
      break;
 8021624:	e020      	b.n	8021668 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8021626:	7afb      	ldrb	r3, [r7, #11]
 8021628:	4619      	mov	r1, r3
 802162a:	68f8      	ldr	r0, [r7, #12]
 802162c:	f7ff fb7c 	bl	8020d28 <USBH_MSC_BOT_Process>
 8021630:	4603      	mov	r3, r0
 8021632:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8021634:	7dfb      	ldrb	r3, [r7, #23]
 8021636:	2b00      	cmp	r3, #0
 8021638:	d115      	bne.n	8021666 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 802163a:	693b      	ldr	r3, [r7, #16]
 802163c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8021640:	3302      	adds	r3, #2
 8021642:	781b      	ldrb	r3, [r3, #0]
 8021644:	f003 030f 	and.w	r3, r3, #15
 8021648:	b2da      	uxtb	r2, r3
 802164a:	687b      	ldr	r3, [r7, #4]
 802164c:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 802164e:	693b      	ldr	r3, [r7, #16]
 8021650:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8021654:	7b1a      	ldrb	r2, [r3, #12]
 8021656:	687b      	ldr	r3, [r7, #4]
 8021658:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 802165a:	693b      	ldr	r3, [r7, #16]
 802165c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8021660:	7b5a      	ldrb	r2, [r3, #13]
 8021662:	687b      	ldr	r3, [r7, #4]
 8021664:	709a      	strb	r2, [r3, #2]
      break;
 8021666:	bf00      	nop
  }

  return error;
 8021668:	7dfb      	ldrb	r3, [r7, #23]
}
 802166a:	4618      	mov	r0, r3
 802166c:	3718      	adds	r7, #24
 802166e:	46bd      	mov	sp, r7
 8021670:	bd80      	pop	{r7, pc}

08021672 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8021672:	b580      	push	{r7, lr}
 8021674:	b086      	sub	sp, #24
 8021676:	af00      	add	r7, sp, #0
 8021678:	60f8      	str	r0, [r7, #12]
 802167a:	607a      	str	r2, [r7, #4]
 802167c:	603b      	str	r3, [r7, #0]
 802167e:	460b      	mov	r3, r1
 8021680:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 8021682:	2302      	movs	r3, #2
 8021684:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8021686:	68fb      	ldr	r3, [r7, #12]
 8021688:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 802168c:	69db      	ldr	r3, [r3, #28]
 802168e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8021690:	693b      	ldr	r3, [r7, #16]
 8021692:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8021696:	2b01      	cmp	r3, #1
 8021698:	d002      	beq.n	80216a0 <USBH_MSC_SCSI_Write+0x2e>
 802169a:	2b02      	cmp	r3, #2
 802169c:	d047      	beq.n	802172e <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 802169e:	e04e      	b.n	802173e <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80216a0:	693b      	ldr	r3, [r7, #16]
 80216a2:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 80216a6:	461a      	mov	r2, r3
 80216a8:	6a3b      	ldr	r3, [r7, #32]
 80216aa:	fb03 f202 	mul.w	r2, r3, r2
 80216ae:	693b      	ldr	r3, [r7, #16]
 80216b0:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80216b2:	693b      	ldr	r3, [r7, #16]
 80216b4:	2200      	movs	r2, #0
 80216b6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80216ba:	693b      	ldr	r3, [r7, #16]
 80216bc:	220a      	movs	r2, #10
 80216be:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80216c2:	693b      	ldr	r3, [r7, #16]
 80216c4:	3363      	adds	r3, #99	@ 0x63
 80216c6:	2210      	movs	r2, #16
 80216c8:	2100      	movs	r1, #0
 80216ca:	4618      	mov	r0, r3
 80216cc:	f00a fa1e 	bl	802bb0c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80216d0:	693b      	ldr	r3, [r7, #16]
 80216d2:	222a      	movs	r2, #42	@ 0x2a
 80216d4:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80216d8:	79fa      	ldrb	r2, [r7, #7]
 80216da:	693b      	ldr	r3, [r7, #16]
 80216dc:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80216e0:	79ba      	ldrb	r2, [r7, #6]
 80216e2:	693b      	ldr	r3, [r7, #16]
 80216e4:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80216e8:	797a      	ldrb	r2, [r7, #5]
 80216ea:	693b      	ldr	r3, [r7, #16]
 80216ec:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80216f0:	1d3b      	adds	r3, r7, #4
 80216f2:	781a      	ldrb	r2, [r3, #0]
 80216f4:	693b      	ldr	r3, [r7, #16]
 80216f6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 80216fa:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80216fe:	693b      	ldr	r3, [r7, #16]
 8021700:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 8021704:	f107 0320 	add.w	r3, r7, #32
 8021708:	781a      	ldrb	r2, [r3, #0]
 802170a:	693b      	ldr	r3, [r7, #16]
 802170c:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8021710:	693b      	ldr	r3, [r7, #16]
 8021712:	2201      	movs	r2, #1
 8021714:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8021718:	693b      	ldr	r3, [r7, #16]
 802171a:	2202      	movs	r2, #2
 802171c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8021720:	693b      	ldr	r3, [r7, #16]
 8021722:	683a      	ldr	r2, [r7, #0]
 8021724:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8021728:	2301      	movs	r3, #1
 802172a:	75fb      	strb	r3, [r7, #23]
      break;
 802172c:	e007      	b.n	802173e <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 802172e:	7afb      	ldrb	r3, [r7, #11]
 8021730:	4619      	mov	r1, r3
 8021732:	68f8      	ldr	r0, [r7, #12]
 8021734:	f7ff faf8 	bl	8020d28 <USBH_MSC_BOT_Process>
 8021738:	4603      	mov	r3, r0
 802173a:	75fb      	strb	r3, [r7, #23]
      break;
 802173c:	bf00      	nop
  }

  return error;
 802173e:	7dfb      	ldrb	r3, [r7, #23]
}
 8021740:	4618      	mov	r0, r3
 8021742:	3718      	adds	r7, #24
 8021744:	46bd      	mov	sp, r7
 8021746:	bd80      	pop	{r7, pc}

08021748 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8021748:	b580      	push	{r7, lr}
 802174a:	b086      	sub	sp, #24
 802174c:	af00      	add	r7, sp, #0
 802174e:	60f8      	str	r0, [r7, #12]
 8021750:	607a      	str	r2, [r7, #4]
 8021752:	603b      	str	r3, [r7, #0]
 8021754:	460b      	mov	r3, r1
 8021756:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 8021758:	2302      	movs	r3, #2
 802175a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 802175c:	68fb      	ldr	r3, [r7, #12]
 802175e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8021762:	69db      	ldr	r3, [r3, #28]
 8021764:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8021766:	693b      	ldr	r3, [r7, #16]
 8021768:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 802176c:	2b01      	cmp	r3, #1
 802176e:	d002      	beq.n	8021776 <USBH_MSC_SCSI_Read+0x2e>
 8021770:	2b02      	cmp	r3, #2
 8021772:	d047      	beq.n	8021804 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8021774:	e04e      	b.n	8021814 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8021776:	693b      	ldr	r3, [r7, #16]
 8021778:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 802177c:	461a      	mov	r2, r3
 802177e:	6a3b      	ldr	r3, [r7, #32]
 8021780:	fb03 f202 	mul.w	r2, r3, r2
 8021784:	693b      	ldr	r3, [r7, #16]
 8021786:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8021788:	693b      	ldr	r3, [r7, #16]
 802178a:	2280      	movs	r2, #128	@ 0x80
 802178c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8021790:	693b      	ldr	r3, [r7, #16]
 8021792:	220a      	movs	r2, #10
 8021794:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8021798:	693b      	ldr	r3, [r7, #16]
 802179a:	3363      	adds	r3, #99	@ 0x63
 802179c:	2210      	movs	r2, #16
 802179e:	2100      	movs	r1, #0
 80217a0:	4618      	mov	r0, r3
 80217a2:	f00a f9b3 	bl	802bb0c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80217a6:	693b      	ldr	r3, [r7, #16]
 80217a8:	2228      	movs	r2, #40	@ 0x28
 80217aa:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80217ae:	79fa      	ldrb	r2, [r7, #7]
 80217b0:	693b      	ldr	r3, [r7, #16]
 80217b2:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80217b6:	79ba      	ldrb	r2, [r7, #6]
 80217b8:	693b      	ldr	r3, [r7, #16]
 80217ba:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80217be:	797a      	ldrb	r2, [r7, #5]
 80217c0:	693b      	ldr	r3, [r7, #16]
 80217c2:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80217c6:	1d3b      	adds	r3, r7, #4
 80217c8:	781a      	ldrb	r2, [r3, #0]
 80217ca:	693b      	ldr	r3, [r7, #16]
 80217cc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 80217d0:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80217d4:	693b      	ldr	r3, [r7, #16]
 80217d6:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 80217da:	f107 0320 	add.w	r3, r7, #32
 80217de:	781a      	ldrb	r2, [r3, #0]
 80217e0:	693b      	ldr	r3, [r7, #16]
 80217e2:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80217e6:	693b      	ldr	r3, [r7, #16]
 80217e8:	2201      	movs	r2, #1
 80217ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80217ee:	693b      	ldr	r3, [r7, #16]
 80217f0:	2202      	movs	r2, #2
 80217f2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80217f6:	693b      	ldr	r3, [r7, #16]
 80217f8:	683a      	ldr	r2, [r7, #0]
 80217fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 80217fe:	2301      	movs	r3, #1
 8021800:	75fb      	strb	r3, [r7, #23]
      break;
 8021802:	e007      	b.n	8021814 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8021804:	7afb      	ldrb	r3, [r7, #11]
 8021806:	4619      	mov	r1, r3
 8021808:	68f8      	ldr	r0, [r7, #12]
 802180a:	f7ff fa8d 	bl	8020d28 <USBH_MSC_BOT_Process>
 802180e:	4603      	mov	r3, r0
 8021810:	75fb      	strb	r3, [r7, #23]
      break;
 8021812:	bf00      	nop
  }

  return error;
 8021814:	7dfb      	ldrb	r3, [r7, #23]
}
 8021816:	4618      	mov	r0, r3
 8021818:	3718      	adds	r7, #24
 802181a:	46bd      	mov	sp, r7
 802181c:	bd80      	pop	{r7, pc}
	...

08021820 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8021820:	b580      	push	{r7, lr}
 8021822:	b084      	sub	sp, #16
 8021824:	af00      	add	r7, sp, #0
 8021826:	60f8      	str	r0, [r7, #12]
 8021828:	60b9      	str	r1, [r7, #8]
 802182a:	4613      	mov	r3, r2
 802182c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 802182e:	68fb      	ldr	r3, [r7, #12]
 8021830:	2b00      	cmp	r3, #0
 8021832:	d101      	bne.n	8021838 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8021834:	2302      	movs	r3, #2
 8021836:	e045      	b.n	80218c4 <USBH_Init+0xa4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8021838:	68fb      	ldr	r3, [r7, #12]
 802183a:	79fa      	ldrb	r2, [r7, #7]
 802183c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8021840:	68fb      	ldr	r3, [r7, #12]
 8021842:	2200      	movs	r2, #0
 8021844:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8021848:	68fb      	ldr	r3, [r7, #12]
 802184a:	2200      	movs	r2, #0
 802184c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8021850:	68f8      	ldr	r0, [r7, #12]
 8021852:	f000 f841 	bl	80218d8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8021856:	68fb      	ldr	r3, [r7, #12]
 8021858:	2200      	movs	r2, #0
 802185a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 802185e:	68fb      	ldr	r3, [r7, #12]
 8021860:	2200      	movs	r2, #0
 8021862:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8021866:	68fb      	ldr	r3, [r7, #12]
 8021868:	2200      	movs	r2, #0
 802186a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 802186e:	68fb      	ldr	r3, [r7, #12]
 8021870:	2200      	movs	r2, #0
 8021872:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8021876:	68bb      	ldr	r3, [r7, #8]
 8021878:	2b00      	cmp	r3, #0
 802187a:	d003      	beq.n	8021884 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 802187c:	68fb      	ldr	r3, [r7, #12]
 802187e:	68ba      	ldr	r2, [r7, #8]
 8021880:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8021884:	2200      	movs	r2, #0
 8021886:	2104      	movs	r1, #4
 8021888:	2010      	movs	r0, #16
 802188a:	f004 ff71 	bl	8026770 <osMessageQueueNew>
 802188e:	4602      	mov	r2, r0
 8021890:	68fb      	ldr	r3, [r7, #12]
 8021892:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8021896:	4b0d      	ldr	r3, [pc, #52]	@ (80218cc <USBH_Init+0xac>)
 8021898:	4a0d      	ldr	r2, [pc, #52]	@ (80218d0 <USBH_Init+0xb0>)
 802189a:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 802189c:	4b0b      	ldr	r3, [pc, #44]	@ (80218cc <USBH_Init+0xac>)
 802189e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80218a2:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 80218a4:	4b09      	ldr	r3, [pc, #36]	@ (80218cc <USBH_Init+0xac>)
 80218a6:	2218      	movs	r2, #24
 80218a8:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 80218aa:	4a08      	ldr	r2, [pc, #32]	@ (80218cc <USBH_Init+0xac>)
 80218ac:	68f9      	ldr	r1, [r7, #12]
 80218ae:	4809      	ldr	r0, [pc, #36]	@ (80218d4 <USBH_Init+0xb4>)
 80218b0:	f004 fcfa 	bl	80262a8 <osThreadNew>
 80218b4:	4602      	mov	r2, r0
 80218b6:	68fb      	ldr	r3, [r7, #12]
 80218b8:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80218bc:	68f8      	ldr	r0, [r7, #12]
 80218be:	f008 fc81 	bl	802a1c4 <USBH_LL_Init>

  return USBH_OK;
 80218c2:	2300      	movs	r3, #0
}
 80218c4:	4618      	mov	r0, r3
 80218c6:	3710      	adds	r7, #16
 80218c8:	46bd      	mov	sp, r7
 80218ca:	bd80      	pop	{r7, pc}
 80218cc:	2001d0ac 	.word	0x2001d0ac
 80218d0:	08031558 	.word	0x08031558
 80218d4:	08022589 	.word	0x08022589

080218d8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80218d8:	b580      	push	{r7, lr}
 80218da:	b084      	sub	sp, #16
 80218dc:	af00      	add	r7, sp, #0
 80218de:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80218e0:	2300      	movs	r3, #0
 80218e2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80218e4:	2300      	movs	r3, #0
 80218e6:	60fb      	str	r3, [r7, #12]
 80218e8:	e009      	b.n	80218fe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80218ea:	687a      	ldr	r2, [r7, #4]
 80218ec:	68fb      	ldr	r3, [r7, #12]
 80218ee:	33e0      	adds	r3, #224	@ 0xe0
 80218f0:	009b      	lsls	r3, r3, #2
 80218f2:	4413      	add	r3, r2
 80218f4:	2200      	movs	r2, #0
 80218f6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80218f8:	68fb      	ldr	r3, [r7, #12]
 80218fa:	3301      	adds	r3, #1
 80218fc:	60fb      	str	r3, [r7, #12]
 80218fe:	68fb      	ldr	r3, [r7, #12]
 8021900:	2b0f      	cmp	r3, #15
 8021902:	d9f2      	bls.n	80218ea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8021904:	2300      	movs	r3, #0
 8021906:	60fb      	str	r3, [r7, #12]
 8021908:	e009      	b.n	802191e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 802190a:	687a      	ldr	r2, [r7, #4]
 802190c:	68fb      	ldr	r3, [r7, #12]
 802190e:	4413      	add	r3, r2
 8021910:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8021914:	2200      	movs	r2, #0
 8021916:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8021918:	68fb      	ldr	r3, [r7, #12]
 802191a:	3301      	adds	r3, #1
 802191c:	60fb      	str	r3, [r7, #12]
 802191e:	68fb      	ldr	r3, [r7, #12]
 8021920:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021924:	d3f1      	bcc.n	802190a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8021926:	687b      	ldr	r3, [r7, #4]
 8021928:	2200      	movs	r2, #0
 802192a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 802192c:	687b      	ldr	r3, [r7, #4]
 802192e:	2200      	movs	r2, #0
 8021930:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8021932:	687b      	ldr	r3, [r7, #4]
 8021934:	2201      	movs	r2, #1
 8021936:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8021938:	687b      	ldr	r3, [r7, #4]
 802193a:	2200      	movs	r2, #0
 802193c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8021940:	687b      	ldr	r3, [r7, #4]
 8021942:	2201      	movs	r2, #1
 8021944:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8021946:	687b      	ldr	r3, [r7, #4]
 8021948:	2240      	movs	r2, #64	@ 0x40
 802194a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 802194c:	687b      	ldr	r3, [r7, #4]
 802194e:	2200      	movs	r2, #0
 8021950:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8021952:	687b      	ldr	r3, [r7, #4]
 8021954:	2200      	movs	r2, #0
 8021956:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 802195a:	687b      	ldr	r3, [r7, #4]
 802195c:	2201      	movs	r2, #1
 802195e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8021962:	687b      	ldr	r3, [r7, #4]
 8021964:	2200      	movs	r2, #0
 8021966:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 802196a:	687b      	ldr	r3, [r7, #4]
 802196c:	2200      	movs	r2, #0
 802196e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8021972:	687b      	ldr	r3, [r7, #4]
 8021974:	331c      	adds	r3, #28
 8021976:	f44f 7280 	mov.w	r2, #256	@ 0x100
 802197a:	2100      	movs	r1, #0
 802197c:	4618      	mov	r0, r3
 802197e:	f00a f8c5 	bl	802bb0c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8021982:	687b      	ldr	r3, [r7, #4]
 8021984:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8021988:	f44f 7200 	mov.w	r2, #512	@ 0x200
 802198c:	2100      	movs	r1, #0
 802198e:	4618      	mov	r0, r3
 8021990:	f00a f8bc 	bl	802bb0c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8021994:	687b      	ldr	r3, [r7, #4]
 8021996:	f203 3326 	addw	r3, r3, #806	@ 0x326
 802199a:	2212      	movs	r2, #18
 802199c:	2100      	movs	r1, #0
 802199e:	4618      	mov	r0, r3
 80219a0:	f00a f8b4 	bl	802bb0c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80219a4:	687b      	ldr	r3, [r7, #4]
 80219a6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80219aa:	223e      	movs	r2, #62	@ 0x3e
 80219ac:	2100      	movs	r1, #0
 80219ae:	4618      	mov	r0, r3
 80219b0:	f00a f8ac 	bl	802bb0c <memset>

  return USBH_OK;
 80219b4:	2300      	movs	r3, #0
}
 80219b6:	4618      	mov	r0, r3
 80219b8:	3710      	adds	r7, #16
 80219ba:	46bd      	mov	sp, r7
 80219bc:	bd80      	pop	{r7, pc}

080219be <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80219be:	b480      	push	{r7}
 80219c0:	b085      	sub	sp, #20
 80219c2:	af00      	add	r7, sp, #0
 80219c4:	6078      	str	r0, [r7, #4]
 80219c6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80219c8:	2300      	movs	r3, #0
 80219ca:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80219cc:	683b      	ldr	r3, [r7, #0]
 80219ce:	2b00      	cmp	r3, #0
 80219d0:	d016      	beq.n	8021a00 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80219d2:	687b      	ldr	r3, [r7, #4]
 80219d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80219d8:	2b00      	cmp	r3, #0
 80219da:	d10e      	bne.n	80219fa <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80219dc:	687b      	ldr	r3, [r7, #4]
 80219de:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80219e2:	1c59      	adds	r1, r3, #1
 80219e4:	687a      	ldr	r2, [r7, #4]
 80219e6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80219ea:	687a      	ldr	r2, [r7, #4]
 80219ec:	33de      	adds	r3, #222	@ 0xde
 80219ee:	6839      	ldr	r1, [r7, #0]
 80219f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80219f4:	2300      	movs	r3, #0
 80219f6:	73fb      	strb	r3, [r7, #15]
 80219f8:	e004      	b.n	8021a04 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80219fa:	2302      	movs	r3, #2
 80219fc:	73fb      	strb	r3, [r7, #15]
 80219fe:	e001      	b.n	8021a04 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8021a00:	2302      	movs	r3, #2
 8021a02:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8021a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8021a06:	4618      	mov	r0, r3
 8021a08:	3714      	adds	r7, #20
 8021a0a:	46bd      	mov	sp, r7
 8021a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a10:	4770      	bx	lr

08021a12 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8021a12:	b480      	push	{r7}
 8021a14:	b085      	sub	sp, #20
 8021a16:	af00      	add	r7, sp, #0
 8021a18:	6078      	str	r0, [r7, #4]
 8021a1a:	460b      	mov	r3, r1
 8021a1c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8021a1e:	2300      	movs	r3, #0
 8021a20:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8021a22:	687b      	ldr	r3, [r7, #4]
 8021a24:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8021a28:	78fa      	ldrb	r2, [r7, #3]
 8021a2a:	429a      	cmp	r2, r3
 8021a2c:	d204      	bcs.n	8021a38 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8021a2e:	687b      	ldr	r3, [r7, #4]
 8021a30:	78fa      	ldrb	r2, [r7, #3]
 8021a32:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8021a36:	e001      	b.n	8021a3c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8021a38:	2302      	movs	r3, #2
 8021a3a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8021a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8021a3e:	4618      	mov	r0, r3
 8021a40:	3714      	adds	r7, #20
 8021a42:	46bd      	mov	sp, r7
 8021a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a48:	4770      	bx	lr

08021a4a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8021a4a:	b480      	push	{r7}
 8021a4c:	b087      	sub	sp, #28
 8021a4e:	af00      	add	r7, sp, #0
 8021a50:	6078      	str	r0, [r7, #4]
 8021a52:	4608      	mov	r0, r1
 8021a54:	4611      	mov	r1, r2
 8021a56:	461a      	mov	r2, r3
 8021a58:	4603      	mov	r3, r0
 8021a5a:	70fb      	strb	r3, [r7, #3]
 8021a5c:	460b      	mov	r3, r1
 8021a5e:	70bb      	strb	r3, [r7, #2]
 8021a60:	4613      	mov	r3, r2
 8021a62:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8021a64:	2300      	movs	r3, #0
 8021a66:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8021a68:	2300      	movs	r3, #0
 8021a6a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8021a6c:	687b      	ldr	r3, [r7, #4]
 8021a6e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8021a72:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8021a74:	e025      	b.n	8021ac2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8021a76:	7dfb      	ldrb	r3, [r7, #23]
 8021a78:	221a      	movs	r2, #26
 8021a7a:	fb02 f303 	mul.w	r3, r2, r3
 8021a7e:	3308      	adds	r3, #8
 8021a80:	68fa      	ldr	r2, [r7, #12]
 8021a82:	4413      	add	r3, r2
 8021a84:	3302      	adds	r3, #2
 8021a86:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8021a88:	693b      	ldr	r3, [r7, #16]
 8021a8a:	795b      	ldrb	r3, [r3, #5]
 8021a8c:	78fa      	ldrb	r2, [r7, #3]
 8021a8e:	429a      	cmp	r2, r3
 8021a90:	d002      	beq.n	8021a98 <USBH_FindInterface+0x4e>
 8021a92:	78fb      	ldrb	r3, [r7, #3]
 8021a94:	2bff      	cmp	r3, #255	@ 0xff
 8021a96:	d111      	bne.n	8021abc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8021a98:	693b      	ldr	r3, [r7, #16]
 8021a9a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8021a9c:	78ba      	ldrb	r2, [r7, #2]
 8021a9e:	429a      	cmp	r2, r3
 8021aa0:	d002      	beq.n	8021aa8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8021aa2:	78bb      	ldrb	r3, [r7, #2]
 8021aa4:	2bff      	cmp	r3, #255	@ 0xff
 8021aa6:	d109      	bne.n	8021abc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8021aa8:	693b      	ldr	r3, [r7, #16]
 8021aaa:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8021aac:	787a      	ldrb	r2, [r7, #1]
 8021aae:	429a      	cmp	r2, r3
 8021ab0:	d002      	beq.n	8021ab8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8021ab2:	787b      	ldrb	r3, [r7, #1]
 8021ab4:	2bff      	cmp	r3, #255	@ 0xff
 8021ab6:	d101      	bne.n	8021abc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8021ab8:	7dfb      	ldrb	r3, [r7, #23]
 8021aba:	e006      	b.n	8021aca <USBH_FindInterface+0x80>
    }
    if_ix++;
 8021abc:	7dfb      	ldrb	r3, [r7, #23]
 8021abe:	3301      	adds	r3, #1
 8021ac0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8021ac2:	7dfb      	ldrb	r3, [r7, #23]
 8021ac4:	2b01      	cmp	r3, #1
 8021ac6:	d9d6      	bls.n	8021a76 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8021ac8:	23ff      	movs	r3, #255	@ 0xff
}
 8021aca:	4618      	mov	r0, r3
 8021acc:	371c      	adds	r7, #28
 8021ace:	46bd      	mov	sp, r7
 8021ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ad4:	4770      	bx	lr

08021ad6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8021ad6:	b580      	push	{r7, lr}
 8021ad8:	b082      	sub	sp, #8
 8021ada:	af00      	add	r7, sp, #0
 8021adc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8021ade:	6878      	ldr	r0, [r7, #4]
 8021ae0:	f008 fbac 	bl	802a23c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8021ae4:	2101      	movs	r1, #1
 8021ae6:	6878      	ldr	r0, [r7, #4]
 8021ae8:	f008 fcc5 	bl	802a476 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8021aec:	2300      	movs	r3, #0
}
 8021aee:	4618      	mov	r0, r3
 8021af0:	3708      	adds	r7, #8
 8021af2:	46bd      	mov	sp, r7
 8021af4:	bd80      	pop	{r7, pc}
	...

08021af8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8021af8:	b580      	push	{r7, lr}
 8021afa:	b088      	sub	sp, #32
 8021afc:	af04      	add	r7, sp, #16
 8021afe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8021b00:	2302      	movs	r3, #2
 8021b02:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8021b04:	2300      	movs	r3, #0
 8021b06:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8021b08:	687b      	ldr	r3, [r7, #4]
 8021b0a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8021b0e:	b2db      	uxtb	r3, r3
 8021b10:	2b01      	cmp	r3, #1
 8021b12:	d102      	bne.n	8021b1a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8021b14:	687b      	ldr	r3, [r7, #4]
 8021b16:	2203      	movs	r2, #3
 8021b18:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8021b1a:	687b      	ldr	r3, [r7, #4]
 8021b1c:	781b      	ldrb	r3, [r3, #0]
 8021b1e:	b2db      	uxtb	r3, r3
 8021b20:	2b0b      	cmp	r3, #11
 8021b22:	f200 8244 	bhi.w	8021fae <USBH_Process+0x4b6>
 8021b26:	a201      	add	r2, pc, #4	@ (adr r2, 8021b2c <USBH_Process+0x34>)
 8021b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021b2c:	08021b5d 	.word	0x08021b5d
 8021b30:	08021bab 	.word	0x08021bab
 8021b34:	08021c2f 	.word	0x08021c2f
 8021b38:	08021f2d 	.word	0x08021f2d
 8021b3c:	08021faf 	.word	0x08021faf
 8021b40:	08021ceb 	.word	0x08021ceb
 8021b44:	08021eb7 	.word	0x08021eb7
 8021b48:	08021d3d 	.word	0x08021d3d
 8021b4c:	08021d79 	.word	0x08021d79
 8021b50:	08021db1 	.word	0x08021db1
 8021b54:	08021e0f 	.word	0x08021e0f
 8021b58:	08021f15 	.word	0x08021f15
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8021b5c:	687b      	ldr	r3, [r7, #4]
 8021b5e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8021b62:	b2db      	uxtb	r3, r3
 8021b64:	2b00      	cmp	r3, #0
 8021b66:	f000 8224 	beq.w	8021fb2 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8021b6a:	687b      	ldr	r3, [r7, #4]
 8021b6c:	2201      	movs	r2, #1
 8021b6e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8021b70:	20c8      	movs	r0, #200	@ 0xc8
 8021b72:	f008 fcfd 	bl	802a570 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8021b76:	6878      	ldr	r0, [r7, #4]
 8021b78:	f008 fbbd 	bl	802a2f6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8021b7c:	687b      	ldr	r3, [r7, #4]
 8021b7e:	2200      	movs	r2, #0
 8021b80:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8021b84:	687b      	ldr	r3, [r7, #4]
 8021b86:	2200      	movs	r2, #0
 8021b88:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8021b8c:	687b      	ldr	r3, [r7, #4]
 8021b8e:	2201      	movs	r2, #1
 8021b90:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8021b94:	687b      	ldr	r3, [r7, #4]
 8021b96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8021b9a:	687b      	ldr	r3, [r7, #4]
 8021b9c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8021ba0:	2300      	movs	r3, #0
 8021ba2:	2200      	movs	r2, #0
 8021ba4:	f004 fe6a 	bl	802687c <osMessageQueuePut>
#endif
#endif
      }
      break;
 8021ba8:	e203      	b.n	8021fb2 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8021baa:	687b      	ldr	r3, [r7, #4]
 8021bac:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8021bb0:	2b01      	cmp	r3, #1
 8021bb2:	d107      	bne.n	8021bc4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8021bb4:	687b      	ldr	r3, [r7, #4]
 8021bb6:	2200      	movs	r2, #0
 8021bb8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8021bbc:	687b      	ldr	r3, [r7, #4]
 8021bbe:	2202      	movs	r2, #2
 8021bc0:	701a      	strb	r2, [r3, #0]
 8021bc2:	e025      	b.n	8021c10 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8021bc4:	687b      	ldr	r3, [r7, #4]
 8021bc6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8021bca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8021bce:	d914      	bls.n	8021bfa <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8021bd0:	687b      	ldr	r3, [r7, #4]
 8021bd2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8021bd6:	3301      	adds	r3, #1
 8021bd8:	b2da      	uxtb	r2, r3
 8021bda:	687b      	ldr	r3, [r7, #4]
 8021bdc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8021be0:	687b      	ldr	r3, [r7, #4]
 8021be2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8021be6:	2b03      	cmp	r3, #3
 8021be8:	d903      	bls.n	8021bf2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8021bea:	687b      	ldr	r3, [r7, #4]
 8021bec:	220d      	movs	r2, #13
 8021bee:	701a      	strb	r2, [r3, #0]
 8021bf0:	e00e      	b.n	8021c10 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8021bf2:	687b      	ldr	r3, [r7, #4]
 8021bf4:	2200      	movs	r2, #0
 8021bf6:	701a      	strb	r2, [r3, #0]
 8021bf8:	e00a      	b.n	8021c10 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8021bfa:	687b      	ldr	r3, [r7, #4]
 8021bfc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8021c00:	f103 020a 	add.w	r2, r3, #10
 8021c04:	687b      	ldr	r3, [r7, #4]
 8021c06:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8021c0a:	200a      	movs	r0, #10
 8021c0c:	f008 fcb0 	bl	802a570 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8021c10:	687b      	ldr	r3, [r7, #4]
 8021c12:	2201      	movs	r2, #1
 8021c14:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8021c18:	687b      	ldr	r3, [r7, #4]
 8021c1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8021c1e:	687b      	ldr	r3, [r7, #4]
 8021c20:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8021c24:	2300      	movs	r3, #0
 8021c26:	2200      	movs	r2, #0
 8021c28:	f004 fe28 	bl	802687c <osMessageQueuePut>
#endif
#endif
      break;
 8021c2c:	e1c8      	b.n	8021fc0 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8021c2e:	687b      	ldr	r3, [r7, #4]
 8021c30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8021c34:	2b00      	cmp	r3, #0
 8021c36:	d005      	beq.n	8021c44 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8021c38:	687b      	ldr	r3, [r7, #4]
 8021c3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8021c3e:	2104      	movs	r1, #4
 8021c40:	6878      	ldr	r0, [r7, #4]
 8021c42:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8021c44:	2064      	movs	r0, #100	@ 0x64
 8021c46:	f008 fc93 	bl	802a570 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8021c4a:	6878      	ldr	r0, [r7, #4]
 8021c4c:	f008 fb2c 	bl	802a2a8 <USBH_LL_GetSpeed>
 8021c50:	4603      	mov	r3, r0
 8021c52:	461a      	mov	r2, r3
 8021c54:	687b      	ldr	r3, [r7, #4]
 8021c56:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8021c5a:	687b      	ldr	r3, [r7, #4]
 8021c5c:	2205      	movs	r2, #5
 8021c5e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8021c60:	2100      	movs	r1, #0
 8021c62:	6878      	ldr	r0, [r7, #4]
 8021c64:	f001 fc8d 	bl	8023582 <USBH_AllocPipe>
 8021c68:	4603      	mov	r3, r0
 8021c6a:	461a      	mov	r2, r3
 8021c6c:	687b      	ldr	r3, [r7, #4]
 8021c6e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8021c70:	2180      	movs	r1, #128	@ 0x80
 8021c72:	6878      	ldr	r0, [r7, #4]
 8021c74:	f001 fc85 	bl	8023582 <USBH_AllocPipe>
 8021c78:	4603      	mov	r3, r0
 8021c7a:	461a      	mov	r2, r3
 8021c7c:	687b      	ldr	r3, [r7, #4]
 8021c7e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8021c80:	687b      	ldr	r3, [r7, #4]
 8021c82:	7919      	ldrb	r1, [r3, #4]
 8021c84:	687b      	ldr	r3, [r7, #4]
 8021c86:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8021c8a:	687b      	ldr	r3, [r7, #4]
 8021c8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8021c90:	687a      	ldr	r2, [r7, #4]
 8021c92:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8021c94:	9202      	str	r2, [sp, #8]
 8021c96:	2200      	movs	r2, #0
 8021c98:	9201      	str	r2, [sp, #4]
 8021c9a:	9300      	str	r3, [sp, #0]
 8021c9c:	4603      	mov	r3, r0
 8021c9e:	2280      	movs	r2, #128	@ 0x80
 8021ca0:	6878      	ldr	r0, [r7, #4]
 8021ca2:	f001 fc3f 	bl	8023524 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8021ca6:	687b      	ldr	r3, [r7, #4]
 8021ca8:	7959      	ldrb	r1, [r3, #5]
 8021caa:	687b      	ldr	r3, [r7, #4]
 8021cac:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8021cb0:	687b      	ldr	r3, [r7, #4]
 8021cb2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8021cb6:	687a      	ldr	r2, [r7, #4]
 8021cb8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8021cba:	9202      	str	r2, [sp, #8]
 8021cbc:	2200      	movs	r2, #0
 8021cbe:	9201      	str	r2, [sp, #4]
 8021cc0:	9300      	str	r3, [sp, #0]
 8021cc2:	4603      	mov	r3, r0
 8021cc4:	2200      	movs	r2, #0
 8021cc6:	6878      	ldr	r0, [r7, #4]
 8021cc8:	f001 fc2c 	bl	8023524 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8021ccc:	687b      	ldr	r3, [r7, #4]
 8021cce:	2201      	movs	r2, #1
 8021cd0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8021cd4:	687b      	ldr	r3, [r7, #4]
 8021cd6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8021cda:	687b      	ldr	r3, [r7, #4]
 8021cdc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8021ce0:	2300      	movs	r3, #0
 8021ce2:	2200      	movs	r2, #0
 8021ce4:	f004 fdca 	bl	802687c <osMessageQueuePut>
#endif
#endif
      break;
 8021ce8:	e16a      	b.n	8021fc0 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8021cea:	6878      	ldr	r0, [r7, #4]
 8021cec:	f000 f96e 	bl	8021fcc <USBH_HandleEnum>
 8021cf0:	4603      	mov	r3, r0
 8021cf2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8021cf4:	7bbb      	ldrb	r3, [r7, #14]
 8021cf6:	b2db      	uxtb	r3, r3
 8021cf8:	2b00      	cmp	r3, #0
 8021cfa:	f040 815c 	bne.w	8021fb6 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8021cfe:	687b      	ldr	r3, [r7, #4]
 8021d00:	2200      	movs	r2, #0
 8021d02:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8021d06:	687b      	ldr	r3, [r7, #4]
 8021d08:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8021d0c:	2b01      	cmp	r3, #1
 8021d0e:	d103      	bne.n	8021d18 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8021d10:	687b      	ldr	r3, [r7, #4]
 8021d12:	2208      	movs	r2, #8
 8021d14:	701a      	strb	r2, [r3, #0]
 8021d16:	e002      	b.n	8021d1e <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8021d18:	687b      	ldr	r3, [r7, #4]
 8021d1a:	2207      	movs	r2, #7
 8021d1c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8021d1e:	687b      	ldr	r3, [r7, #4]
 8021d20:	2205      	movs	r2, #5
 8021d22:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8021d26:	687b      	ldr	r3, [r7, #4]
 8021d28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8021d2c:	687b      	ldr	r3, [r7, #4]
 8021d2e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8021d32:	2300      	movs	r3, #0
 8021d34:	2200      	movs	r2, #0
 8021d36:	f004 fda1 	bl	802687c <osMessageQueuePut>
#endif
#endif
      }
      break;
 8021d3a:	e13c      	b.n	8021fb6 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8021d3c:	687b      	ldr	r3, [r7, #4]
 8021d3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8021d42:	2b00      	cmp	r3, #0
 8021d44:	f000 8139 	beq.w	8021fba <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8021d48:	687b      	ldr	r3, [r7, #4]
 8021d4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8021d4e:	2101      	movs	r1, #1
 8021d50:	6878      	ldr	r0, [r7, #4]
 8021d52:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8021d54:	687b      	ldr	r3, [r7, #4]
 8021d56:	2208      	movs	r2, #8
 8021d58:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8021d5a:	687b      	ldr	r3, [r7, #4]
 8021d5c:	2205      	movs	r2, #5
 8021d5e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8021d62:	687b      	ldr	r3, [r7, #4]
 8021d64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8021d68:	687b      	ldr	r3, [r7, #4]
 8021d6a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8021d6e:	2300      	movs	r3, #0
 8021d70:	2200      	movs	r2, #0
 8021d72:	f004 fd83 	bl	802687c <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8021d76:	e120      	b.n	8021fba <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8021d78:	687b      	ldr	r3, [r7, #4]
 8021d7a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8021d7e:	4619      	mov	r1, r3
 8021d80:	6878      	ldr	r0, [r7, #4]
 8021d82:	f000 fd12 	bl	80227aa <USBH_SetCfg>
 8021d86:	4603      	mov	r3, r0
 8021d88:	2b00      	cmp	r3, #0
 8021d8a:	d102      	bne.n	8021d92 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8021d8c:	687b      	ldr	r3, [r7, #4]
 8021d8e:	2209      	movs	r2, #9
 8021d90:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8021d92:	687b      	ldr	r3, [r7, #4]
 8021d94:	2201      	movs	r2, #1
 8021d96:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8021d9a:	687b      	ldr	r3, [r7, #4]
 8021d9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8021da0:	687b      	ldr	r3, [r7, #4]
 8021da2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8021da6:	2300      	movs	r3, #0
 8021da8:	2200      	movs	r2, #0
 8021daa:	f004 fd67 	bl	802687c <osMessageQueuePut>
#endif
#endif
      break;
 8021dae:	e107      	b.n	8021fc0 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8021db0:	687b      	ldr	r3, [r7, #4]
 8021db2:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8021db6:	f003 0320 	and.w	r3, r3, #32
 8021dba:	2b00      	cmp	r3, #0
 8021dbc:	d015      	beq.n	8021dea <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8021dbe:	2101      	movs	r1, #1
 8021dc0:	6878      	ldr	r0, [r7, #4]
 8021dc2:	f000 fd15 	bl	80227f0 <USBH_SetFeature>
 8021dc6:	4603      	mov	r3, r0
 8021dc8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8021dca:	7bbb      	ldrb	r3, [r7, #14]
 8021dcc:	b2db      	uxtb	r3, r3
 8021dce:	2b00      	cmp	r3, #0
 8021dd0:	d103      	bne.n	8021dda <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8021dd2:	687b      	ldr	r3, [r7, #4]
 8021dd4:	220a      	movs	r2, #10
 8021dd6:	701a      	strb	r2, [r3, #0]
 8021dd8:	e00a      	b.n	8021df0 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8021dda:	7bbb      	ldrb	r3, [r7, #14]
 8021ddc:	b2db      	uxtb	r3, r3
 8021dde:	2b03      	cmp	r3, #3
 8021de0:	d106      	bne.n	8021df0 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8021de2:	687b      	ldr	r3, [r7, #4]
 8021de4:	220a      	movs	r2, #10
 8021de6:	701a      	strb	r2, [r3, #0]
 8021de8:	e002      	b.n	8021df0 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8021dea:	687b      	ldr	r3, [r7, #4]
 8021dec:	220a      	movs	r2, #10
 8021dee:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8021df0:	687b      	ldr	r3, [r7, #4]
 8021df2:	2201      	movs	r2, #1
 8021df4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8021df8:	687b      	ldr	r3, [r7, #4]
 8021dfa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8021dfe:	687b      	ldr	r3, [r7, #4]
 8021e00:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8021e04:	2300      	movs	r3, #0
 8021e06:	2200      	movs	r2, #0
 8021e08:	f004 fd38 	bl	802687c <osMessageQueuePut>
#endif
#endif
      break;
 8021e0c:	e0d8      	b.n	8021fc0 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8021e0e:	687b      	ldr	r3, [r7, #4]
 8021e10:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8021e14:	2b00      	cmp	r3, #0
 8021e16:	d03f      	beq.n	8021e98 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8021e18:	687b      	ldr	r3, [r7, #4]
 8021e1a:	2200      	movs	r2, #0
 8021e1c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8021e20:	2300      	movs	r3, #0
 8021e22:	73fb      	strb	r3, [r7, #15]
 8021e24:	e016      	b.n	8021e54 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8021e26:	7bfa      	ldrb	r2, [r7, #15]
 8021e28:	687b      	ldr	r3, [r7, #4]
 8021e2a:	32de      	adds	r2, #222	@ 0xde
 8021e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021e30:	791a      	ldrb	r2, [r3, #4]
 8021e32:	687b      	ldr	r3, [r7, #4]
 8021e34:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8021e38:	429a      	cmp	r2, r3
 8021e3a:	d108      	bne.n	8021e4e <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 8021e3c:	7bfa      	ldrb	r2, [r7, #15]
 8021e3e:	687b      	ldr	r3, [r7, #4]
 8021e40:	32de      	adds	r2, #222	@ 0xde
 8021e42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8021e46:	687b      	ldr	r3, [r7, #4]
 8021e48:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8021e4c:	e005      	b.n	8021e5a <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8021e4e:	7bfb      	ldrb	r3, [r7, #15]
 8021e50:	3301      	adds	r3, #1
 8021e52:	73fb      	strb	r3, [r7, #15]
 8021e54:	7bfb      	ldrb	r3, [r7, #15]
 8021e56:	2b00      	cmp	r3, #0
 8021e58:	d0e5      	beq.n	8021e26 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 8021e5a:	687b      	ldr	r3, [r7, #4]
 8021e5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8021e60:	2b00      	cmp	r3, #0
 8021e62:	d016      	beq.n	8021e92 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8021e64:	687b      	ldr	r3, [r7, #4]
 8021e66:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8021e6a:	689b      	ldr	r3, [r3, #8]
 8021e6c:	6878      	ldr	r0, [r7, #4]
 8021e6e:	4798      	blx	r3
 8021e70:	4603      	mov	r3, r0
 8021e72:	2b00      	cmp	r3, #0
 8021e74:	d109      	bne.n	8021e8a <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8021e76:	687b      	ldr	r3, [r7, #4]
 8021e78:	2206      	movs	r2, #6
 8021e7a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8021e7c:	687b      	ldr	r3, [r7, #4]
 8021e7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8021e82:	2103      	movs	r1, #3
 8021e84:	6878      	ldr	r0, [r7, #4]
 8021e86:	4798      	blx	r3
 8021e88:	e006      	b.n	8021e98 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8021e8a:	687b      	ldr	r3, [r7, #4]
 8021e8c:	220d      	movs	r2, #13
 8021e8e:	701a      	strb	r2, [r3, #0]
 8021e90:	e002      	b.n	8021e98 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8021e92:	687b      	ldr	r3, [r7, #4]
 8021e94:	220d      	movs	r2, #13
 8021e96:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8021e98:	687b      	ldr	r3, [r7, #4]
 8021e9a:	2205      	movs	r2, #5
 8021e9c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8021ea0:	687b      	ldr	r3, [r7, #4]
 8021ea2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8021ea6:	687b      	ldr	r3, [r7, #4]
 8021ea8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8021eac:	2300      	movs	r3, #0
 8021eae:	2200      	movs	r2, #0
 8021eb0:	f004 fce4 	bl	802687c <osMessageQueuePut>
#endif
#endif
      break;
 8021eb4:	e084      	b.n	8021fc0 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8021eb6:	687b      	ldr	r3, [r7, #4]
 8021eb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8021ebc:	2b00      	cmp	r3, #0
 8021ebe:	d017      	beq.n	8021ef0 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 8021ec0:	687b      	ldr	r3, [r7, #4]
 8021ec2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8021ec6:	691b      	ldr	r3, [r3, #16]
 8021ec8:	6878      	ldr	r0, [r7, #4]
 8021eca:	4798      	blx	r3
 8021ecc:	4603      	mov	r3, r0
 8021ece:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8021ed0:	7bbb      	ldrb	r3, [r7, #14]
 8021ed2:	b2db      	uxtb	r3, r3
 8021ed4:	2b00      	cmp	r3, #0
 8021ed6:	d103      	bne.n	8021ee0 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 8021ed8:	687b      	ldr	r3, [r7, #4]
 8021eda:	220b      	movs	r2, #11
 8021edc:	701a      	strb	r2, [r3, #0]
 8021ede:	e00a      	b.n	8021ef6 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 8021ee0:	7bbb      	ldrb	r3, [r7, #14]
 8021ee2:	b2db      	uxtb	r3, r3
 8021ee4:	2b02      	cmp	r3, #2
 8021ee6:	d106      	bne.n	8021ef6 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 8021ee8:	687b      	ldr	r3, [r7, #4]
 8021eea:	220d      	movs	r2, #13
 8021eec:	701a      	strb	r2, [r3, #0]
 8021eee:	e002      	b.n	8021ef6 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8021ef0:	687b      	ldr	r3, [r7, #4]
 8021ef2:	220d      	movs	r2, #13
 8021ef4:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8021ef6:	687b      	ldr	r3, [r7, #4]
 8021ef8:	2205      	movs	r2, #5
 8021efa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8021efe:	687b      	ldr	r3, [r7, #4]
 8021f00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8021f04:	687b      	ldr	r3, [r7, #4]
 8021f06:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8021f0a:	2300      	movs	r3, #0
 8021f0c:	2200      	movs	r2, #0
 8021f0e:	f004 fcb5 	bl	802687c <osMessageQueuePut>
#endif
#endif
      break;
 8021f12:	e055      	b.n	8021fc0 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8021f14:	687b      	ldr	r3, [r7, #4]
 8021f16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8021f1a:	2b00      	cmp	r3, #0
 8021f1c:	d04f      	beq.n	8021fbe <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8021f1e:	687b      	ldr	r3, [r7, #4]
 8021f20:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8021f24:	695b      	ldr	r3, [r3, #20]
 8021f26:	6878      	ldr	r0, [r7, #4]
 8021f28:	4798      	blx	r3
      }
      break;
 8021f2a:	e048      	b.n	8021fbe <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8021f2c:	687b      	ldr	r3, [r7, #4]
 8021f2e:	2200      	movs	r2, #0
 8021f30:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8021f34:	6878      	ldr	r0, [r7, #4]
 8021f36:	f7ff fccf 	bl	80218d8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8021f3a:	687b      	ldr	r3, [r7, #4]
 8021f3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8021f40:	2b00      	cmp	r3, #0
 8021f42:	d009      	beq.n	8021f58 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 8021f44:	687b      	ldr	r3, [r7, #4]
 8021f46:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8021f4a:	68db      	ldr	r3, [r3, #12]
 8021f4c:	6878      	ldr	r0, [r7, #4]
 8021f4e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8021f50:	687b      	ldr	r3, [r7, #4]
 8021f52:	2200      	movs	r2, #0
 8021f54:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8021f58:	687b      	ldr	r3, [r7, #4]
 8021f5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8021f5e:	2b00      	cmp	r3, #0
 8021f60:	d005      	beq.n	8021f6e <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8021f62:	687b      	ldr	r3, [r7, #4]
 8021f64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8021f68:	2105      	movs	r1, #5
 8021f6a:	6878      	ldr	r0, [r7, #4]
 8021f6c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8021f6e:	687b      	ldr	r3, [r7, #4]
 8021f70:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8021f74:	b2db      	uxtb	r3, r3
 8021f76:	2b01      	cmp	r3, #1
 8021f78:	d107      	bne.n	8021f8a <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 8021f7a:	687b      	ldr	r3, [r7, #4]
 8021f7c:	2200      	movs	r2, #0
 8021f7e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8021f82:	6878      	ldr	r0, [r7, #4]
 8021f84:	f7ff fda7 	bl	8021ad6 <USBH_Start>
 8021f88:	e002      	b.n	8021f90 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8021f8a:	6878      	ldr	r0, [r7, #4]
 8021f8c:	f008 f956 	bl	802a23c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8021f90:	687b      	ldr	r3, [r7, #4]
 8021f92:	2201      	movs	r2, #1
 8021f94:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8021f98:	687b      	ldr	r3, [r7, #4]
 8021f9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8021f9e:	687b      	ldr	r3, [r7, #4]
 8021fa0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8021fa4:	2300      	movs	r3, #0
 8021fa6:	2200      	movs	r2, #0
 8021fa8:	f004 fc68 	bl	802687c <osMessageQueuePut>
#endif
#endif
      break;
 8021fac:	e008      	b.n	8021fc0 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8021fae:	bf00      	nop
 8021fb0:	e006      	b.n	8021fc0 <USBH_Process+0x4c8>
      break;
 8021fb2:	bf00      	nop
 8021fb4:	e004      	b.n	8021fc0 <USBH_Process+0x4c8>
      break;
 8021fb6:	bf00      	nop
 8021fb8:	e002      	b.n	8021fc0 <USBH_Process+0x4c8>
    break;
 8021fba:	bf00      	nop
 8021fbc:	e000      	b.n	8021fc0 <USBH_Process+0x4c8>
      break;
 8021fbe:	bf00      	nop
  }
  return USBH_OK;
 8021fc0:	2300      	movs	r3, #0
}
 8021fc2:	4618      	mov	r0, r3
 8021fc4:	3710      	adds	r7, #16
 8021fc6:	46bd      	mov	sp, r7
 8021fc8:	bd80      	pop	{r7, pc}
 8021fca:	bf00      	nop

08021fcc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8021fcc:	b580      	push	{r7, lr}
 8021fce:	b088      	sub	sp, #32
 8021fd0:	af04      	add	r7, sp, #16
 8021fd2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8021fd4:	2301      	movs	r3, #1
 8021fd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8021fd8:	2301      	movs	r3, #1
 8021fda:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8021fdc:	687b      	ldr	r3, [r7, #4]
 8021fde:	785b      	ldrb	r3, [r3, #1]
 8021fe0:	2b07      	cmp	r3, #7
 8021fe2:	f200 8204 	bhi.w	80223ee <USBH_HandleEnum+0x422>
 8021fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8021fec <USBH_HandleEnum+0x20>)
 8021fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021fec:	0802200d 	.word	0x0802200d
 8021ff0:	080220c7 	.word	0x080220c7
 8021ff4:	08022131 	.word	0x08022131
 8021ff8:	080221bb 	.word	0x080221bb
 8021ffc:	08022225 	.word	0x08022225
 8022000:	08022295 	.word	0x08022295
 8022004:	08022331 	.word	0x08022331
 8022008:	080223af 	.word	0x080223af
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 802200c:	2108      	movs	r1, #8
 802200e:	6878      	ldr	r0, [r7, #4]
 8022010:	f000 fae8 	bl	80225e4 <USBH_Get_DevDesc>
 8022014:	4603      	mov	r3, r0
 8022016:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8022018:	7bbb      	ldrb	r3, [r7, #14]
 802201a:	2b00      	cmp	r3, #0
 802201c:	d12e      	bne.n	802207c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 802201e:	687b      	ldr	r3, [r7, #4]
 8022020:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8022024:	687b      	ldr	r3, [r7, #4]
 8022026:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8022028:	687b      	ldr	r3, [r7, #4]
 802202a:	2201      	movs	r2, #1
 802202c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802202e:	687b      	ldr	r3, [r7, #4]
 8022030:	7919      	ldrb	r1, [r3, #4]
 8022032:	687b      	ldr	r3, [r7, #4]
 8022034:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8022038:	687b      	ldr	r3, [r7, #4]
 802203a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802203e:	687a      	ldr	r2, [r7, #4]
 8022040:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8022042:	9202      	str	r2, [sp, #8]
 8022044:	2200      	movs	r2, #0
 8022046:	9201      	str	r2, [sp, #4]
 8022048:	9300      	str	r3, [sp, #0]
 802204a:	4603      	mov	r3, r0
 802204c:	2280      	movs	r2, #128	@ 0x80
 802204e:	6878      	ldr	r0, [r7, #4]
 8022050:	f001 fa68 	bl	8023524 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8022054:	687b      	ldr	r3, [r7, #4]
 8022056:	7959      	ldrb	r1, [r3, #5]
 8022058:	687b      	ldr	r3, [r7, #4]
 802205a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 802205e:	687b      	ldr	r3, [r7, #4]
 8022060:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8022064:	687a      	ldr	r2, [r7, #4]
 8022066:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8022068:	9202      	str	r2, [sp, #8]
 802206a:	2200      	movs	r2, #0
 802206c:	9201      	str	r2, [sp, #4]
 802206e:	9300      	str	r3, [sp, #0]
 8022070:	4603      	mov	r3, r0
 8022072:	2200      	movs	r2, #0
 8022074:	6878      	ldr	r0, [r7, #4]
 8022076:	f001 fa55 	bl	8023524 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802207a:	e1ba      	b.n	80223f2 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802207c:	7bbb      	ldrb	r3, [r7, #14]
 802207e:	2b03      	cmp	r3, #3
 8022080:	f040 81b7 	bne.w	80223f2 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 8022084:	687b      	ldr	r3, [r7, #4]
 8022086:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 802208a:	3301      	adds	r3, #1
 802208c:	b2da      	uxtb	r2, r3
 802208e:	687b      	ldr	r3, [r7, #4]
 8022090:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8022094:	687b      	ldr	r3, [r7, #4]
 8022096:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 802209a:	2b03      	cmp	r3, #3
 802209c:	d903      	bls.n	80220a6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 802209e:	687b      	ldr	r3, [r7, #4]
 80220a0:	220d      	movs	r2, #13
 80220a2:	701a      	strb	r2, [r3, #0]
      break;
 80220a4:	e1a5      	b.n	80223f2 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80220a6:	687b      	ldr	r3, [r7, #4]
 80220a8:	795b      	ldrb	r3, [r3, #5]
 80220aa:	4619      	mov	r1, r3
 80220ac:	6878      	ldr	r0, [r7, #4]
 80220ae:	f001 fa89 	bl	80235c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80220b2:	687b      	ldr	r3, [r7, #4]
 80220b4:	791b      	ldrb	r3, [r3, #4]
 80220b6:	4619      	mov	r1, r3
 80220b8:	6878      	ldr	r0, [r7, #4]
 80220ba:	f001 fa83 	bl	80235c4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80220be:	687b      	ldr	r3, [r7, #4]
 80220c0:	2200      	movs	r2, #0
 80220c2:	701a      	strb	r2, [r3, #0]
      break;
 80220c4:	e195      	b.n	80223f2 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80220c6:	2112      	movs	r1, #18
 80220c8:	6878      	ldr	r0, [r7, #4]
 80220ca:	f000 fa8b 	bl	80225e4 <USBH_Get_DevDesc>
 80220ce:	4603      	mov	r3, r0
 80220d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80220d2:	7bbb      	ldrb	r3, [r7, #14]
 80220d4:	2b00      	cmp	r3, #0
 80220d6:	d103      	bne.n	80220e0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80220d8:	687b      	ldr	r3, [r7, #4]
 80220da:	2202      	movs	r2, #2
 80220dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80220de:	e18a      	b.n	80223f6 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80220e0:	7bbb      	ldrb	r3, [r7, #14]
 80220e2:	2b03      	cmp	r3, #3
 80220e4:	f040 8187 	bne.w	80223f6 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 80220e8:	687b      	ldr	r3, [r7, #4]
 80220ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80220ee:	3301      	adds	r3, #1
 80220f0:	b2da      	uxtb	r2, r3
 80220f2:	687b      	ldr	r3, [r7, #4]
 80220f4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80220f8:	687b      	ldr	r3, [r7, #4]
 80220fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80220fe:	2b03      	cmp	r3, #3
 8022100:	d903      	bls.n	802210a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8022102:	687b      	ldr	r3, [r7, #4]
 8022104:	220d      	movs	r2, #13
 8022106:	701a      	strb	r2, [r3, #0]
      break;
 8022108:	e175      	b.n	80223f6 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802210a:	687b      	ldr	r3, [r7, #4]
 802210c:	795b      	ldrb	r3, [r3, #5]
 802210e:	4619      	mov	r1, r3
 8022110:	6878      	ldr	r0, [r7, #4]
 8022112:	f001 fa57 	bl	80235c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8022116:	687b      	ldr	r3, [r7, #4]
 8022118:	791b      	ldrb	r3, [r3, #4]
 802211a:	4619      	mov	r1, r3
 802211c:	6878      	ldr	r0, [r7, #4]
 802211e:	f001 fa51 	bl	80235c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8022122:	687b      	ldr	r3, [r7, #4]
 8022124:	2200      	movs	r2, #0
 8022126:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8022128:	687b      	ldr	r3, [r7, #4]
 802212a:	2200      	movs	r2, #0
 802212c:	701a      	strb	r2, [r3, #0]
      break;
 802212e:	e162      	b.n	80223f6 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8022130:	2101      	movs	r1, #1
 8022132:	6878      	ldr	r0, [r7, #4]
 8022134:	f000 fb15 	bl	8022762 <USBH_SetAddress>
 8022138:	4603      	mov	r3, r0
 802213a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802213c:	7bbb      	ldrb	r3, [r7, #14]
 802213e:	2b00      	cmp	r3, #0
 8022140:	d130      	bne.n	80221a4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8022142:	2002      	movs	r0, #2
 8022144:	f008 fa14 	bl	802a570 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8022148:	687b      	ldr	r3, [r7, #4]
 802214a:	2201      	movs	r2, #1
 802214c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8022150:	687b      	ldr	r3, [r7, #4]
 8022152:	2203      	movs	r2, #3
 8022154:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8022156:	687b      	ldr	r3, [r7, #4]
 8022158:	7919      	ldrb	r1, [r3, #4]
 802215a:	687b      	ldr	r3, [r7, #4]
 802215c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8022160:	687b      	ldr	r3, [r7, #4]
 8022162:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8022166:	687a      	ldr	r2, [r7, #4]
 8022168:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802216a:	9202      	str	r2, [sp, #8]
 802216c:	2200      	movs	r2, #0
 802216e:	9201      	str	r2, [sp, #4]
 8022170:	9300      	str	r3, [sp, #0]
 8022172:	4603      	mov	r3, r0
 8022174:	2280      	movs	r2, #128	@ 0x80
 8022176:	6878      	ldr	r0, [r7, #4]
 8022178:	f001 f9d4 	bl	8023524 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802217c:	687b      	ldr	r3, [r7, #4]
 802217e:	7959      	ldrb	r1, [r3, #5]
 8022180:	687b      	ldr	r3, [r7, #4]
 8022182:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8022186:	687b      	ldr	r3, [r7, #4]
 8022188:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802218c:	687a      	ldr	r2, [r7, #4]
 802218e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8022190:	9202      	str	r2, [sp, #8]
 8022192:	2200      	movs	r2, #0
 8022194:	9201      	str	r2, [sp, #4]
 8022196:	9300      	str	r3, [sp, #0]
 8022198:	4603      	mov	r3, r0
 802219a:	2200      	movs	r2, #0
 802219c:	6878      	ldr	r0, [r7, #4]
 802219e:	f001 f9c1 	bl	8023524 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80221a2:	e12a      	b.n	80223fa <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80221a4:	7bbb      	ldrb	r3, [r7, #14]
 80221a6:	2b03      	cmp	r3, #3
 80221a8:	f040 8127 	bne.w	80223fa <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 80221ac:	687b      	ldr	r3, [r7, #4]
 80221ae:	220d      	movs	r2, #13
 80221b0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80221b2:	687b      	ldr	r3, [r7, #4]
 80221b4:	2200      	movs	r2, #0
 80221b6:	705a      	strb	r2, [r3, #1]
      break;
 80221b8:	e11f      	b.n	80223fa <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80221ba:	2109      	movs	r1, #9
 80221bc:	6878      	ldr	r0, [r7, #4]
 80221be:	f000 fa3d 	bl	802263c <USBH_Get_CfgDesc>
 80221c2:	4603      	mov	r3, r0
 80221c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80221c6:	7bbb      	ldrb	r3, [r7, #14]
 80221c8:	2b00      	cmp	r3, #0
 80221ca:	d103      	bne.n	80221d4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80221cc:	687b      	ldr	r3, [r7, #4]
 80221ce:	2204      	movs	r2, #4
 80221d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80221d2:	e114      	b.n	80223fe <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80221d4:	7bbb      	ldrb	r3, [r7, #14]
 80221d6:	2b03      	cmp	r3, #3
 80221d8:	f040 8111 	bne.w	80223fe <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80221dc:	687b      	ldr	r3, [r7, #4]
 80221de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80221e2:	3301      	adds	r3, #1
 80221e4:	b2da      	uxtb	r2, r3
 80221e6:	687b      	ldr	r3, [r7, #4]
 80221e8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80221ec:	687b      	ldr	r3, [r7, #4]
 80221ee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80221f2:	2b03      	cmp	r3, #3
 80221f4:	d903      	bls.n	80221fe <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80221f6:	687b      	ldr	r3, [r7, #4]
 80221f8:	220d      	movs	r2, #13
 80221fa:	701a      	strb	r2, [r3, #0]
      break;
 80221fc:	e0ff      	b.n	80223fe <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80221fe:	687b      	ldr	r3, [r7, #4]
 8022200:	795b      	ldrb	r3, [r3, #5]
 8022202:	4619      	mov	r1, r3
 8022204:	6878      	ldr	r0, [r7, #4]
 8022206:	f001 f9dd 	bl	80235c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802220a:	687b      	ldr	r3, [r7, #4]
 802220c:	791b      	ldrb	r3, [r3, #4]
 802220e:	4619      	mov	r1, r3
 8022210:	6878      	ldr	r0, [r7, #4]
 8022212:	f001 f9d7 	bl	80235c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8022216:	687b      	ldr	r3, [r7, #4]
 8022218:	2200      	movs	r2, #0
 802221a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802221c:	687b      	ldr	r3, [r7, #4]
 802221e:	2200      	movs	r2, #0
 8022220:	701a      	strb	r2, [r3, #0]
      break;
 8022222:	e0ec      	b.n	80223fe <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8022224:	687b      	ldr	r3, [r7, #4]
 8022226:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 802222a:	4619      	mov	r1, r3
 802222c:	6878      	ldr	r0, [r7, #4]
 802222e:	f000 fa05 	bl	802263c <USBH_Get_CfgDesc>
 8022232:	4603      	mov	r3, r0
 8022234:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8022236:	7bbb      	ldrb	r3, [r7, #14]
 8022238:	2b00      	cmp	r3, #0
 802223a:	d103      	bne.n	8022244 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 802223c:	687b      	ldr	r3, [r7, #4]
 802223e:	2205      	movs	r2, #5
 8022240:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8022242:	e0de      	b.n	8022402 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8022244:	7bbb      	ldrb	r3, [r7, #14]
 8022246:	2b03      	cmp	r3, #3
 8022248:	f040 80db 	bne.w	8022402 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 802224c:	687b      	ldr	r3, [r7, #4]
 802224e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8022252:	3301      	adds	r3, #1
 8022254:	b2da      	uxtb	r2, r3
 8022256:	687b      	ldr	r3, [r7, #4]
 8022258:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 802225c:	687b      	ldr	r3, [r7, #4]
 802225e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8022262:	2b03      	cmp	r3, #3
 8022264:	d903      	bls.n	802226e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8022266:	687b      	ldr	r3, [r7, #4]
 8022268:	220d      	movs	r2, #13
 802226a:	701a      	strb	r2, [r3, #0]
      break;
 802226c:	e0c9      	b.n	8022402 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802226e:	687b      	ldr	r3, [r7, #4]
 8022270:	795b      	ldrb	r3, [r3, #5]
 8022272:	4619      	mov	r1, r3
 8022274:	6878      	ldr	r0, [r7, #4]
 8022276:	f001 f9a5 	bl	80235c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802227a:	687b      	ldr	r3, [r7, #4]
 802227c:	791b      	ldrb	r3, [r3, #4]
 802227e:	4619      	mov	r1, r3
 8022280:	6878      	ldr	r0, [r7, #4]
 8022282:	f001 f99f 	bl	80235c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8022286:	687b      	ldr	r3, [r7, #4]
 8022288:	2200      	movs	r2, #0
 802228a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802228c:	687b      	ldr	r3, [r7, #4]
 802228e:	2200      	movs	r2, #0
 8022290:	701a      	strb	r2, [r3, #0]
      break;
 8022292:	e0b6      	b.n	8022402 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8022294:	687b      	ldr	r3, [r7, #4]
 8022296:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 802229a:	2b00      	cmp	r3, #0
 802229c:	d036      	beq.n	802230c <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802229e:	687b      	ldr	r3, [r7, #4]
 80222a0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80222a4:	687b      	ldr	r3, [r7, #4]
 80222a6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80222aa:	23ff      	movs	r3, #255	@ 0xff
 80222ac:	6878      	ldr	r0, [r7, #4]
 80222ae:	f000 f9ef 	bl	8022690 <USBH_Get_StringDesc>
 80222b2:	4603      	mov	r3, r0
 80222b4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80222b6:	7bbb      	ldrb	r3, [r7, #14]
 80222b8:	2b00      	cmp	r3, #0
 80222ba:	d111      	bne.n	80222e0 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80222bc:	687b      	ldr	r3, [r7, #4]
 80222be:	2206      	movs	r2, #6
 80222c0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80222c2:	687b      	ldr	r3, [r7, #4]
 80222c4:	2205      	movs	r2, #5
 80222c6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80222ca:	687b      	ldr	r3, [r7, #4]
 80222cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80222d0:	687b      	ldr	r3, [r7, #4]
 80222d2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80222d6:	2300      	movs	r3, #0
 80222d8:	2200      	movs	r2, #0
 80222da:	f004 facf 	bl	802687c <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80222de:	e092      	b.n	8022406 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80222e0:	7bbb      	ldrb	r3, [r7, #14]
 80222e2:	2b03      	cmp	r3, #3
 80222e4:	f040 808f 	bne.w	8022406 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80222e8:	687b      	ldr	r3, [r7, #4]
 80222ea:	2206      	movs	r2, #6
 80222ec:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80222ee:	687b      	ldr	r3, [r7, #4]
 80222f0:	2205      	movs	r2, #5
 80222f2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80222f6:	687b      	ldr	r3, [r7, #4]
 80222f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80222fc:	687b      	ldr	r3, [r7, #4]
 80222fe:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8022302:	2300      	movs	r3, #0
 8022304:	2200      	movs	r2, #0
 8022306:	f004 fab9 	bl	802687c <osMessageQueuePut>
      break;
 802230a:	e07c      	b.n	8022406 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802230c:	687b      	ldr	r3, [r7, #4]
 802230e:	2206      	movs	r2, #6
 8022310:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8022312:	687b      	ldr	r3, [r7, #4]
 8022314:	2205      	movs	r2, #5
 8022316:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 802231a:	687b      	ldr	r3, [r7, #4]
 802231c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8022320:	687b      	ldr	r3, [r7, #4]
 8022322:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8022326:	2300      	movs	r3, #0
 8022328:	2200      	movs	r2, #0
 802232a:	f004 faa7 	bl	802687c <osMessageQueuePut>
      break;
 802232e:	e06a      	b.n	8022406 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8022330:	687b      	ldr	r3, [r7, #4]
 8022332:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8022336:	2b00      	cmp	r3, #0
 8022338:	d027      	beq.n	802238a <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802233a:	687b      	ldr	r3, [r7, #4]
 802233c:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8022340:	687b      	ldr	r3, [r7, #4]
 8022342:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8022346:	23ff      	movs	r3, #255	@ 0xff
 8022348:	6878      	ldr	r0, [r7, #4]
 802234a:	f000 f9a1 	bl	8022690 <USBH_Get_StringDesc>
 802234e:	4603      	mov	r3, r0
 8022350:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8022352:	7bbb      	ldrb	r3, [r7, #14]
 8022354:	2b00      	cmp	r3, #0
 8022356:	d103      	bne.n	8022360 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8022358:	687b      	ldr	r3, [r7, #4]
 802235a:	2207      	movs	r2, #7
 802235c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802235e:	e054      	b.n	802240a <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8022360:	7bbb      	ldrb	r3, [r7, #14]
 8022362:	2b03      	cmp	r3, #3
 8022364:	d151      	bne.n	802240a <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8022366:	687b      	ldr	r3, [r7, #4]
 8022368:	2207      	movs	r2, #7
 802236a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 802236c:	687b      	ldr	r3, [r7, #4]
 802236e:	2205      	movs	r2, #5
 8022370:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8022374:	687b      	ldr	r3, [r7, #4]
 8022376:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 802237a:	687b      	ldr	r3, [r7, #4]
 802237c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8022380:	2300      	movs	r3, #0
 8022382:	2200      	movs	r2, #0
 8022384:	f004 fa7a 	bl	802687c <osMessageQueuePut>
      break;
 8022388:	e03f      	b.n	802240a <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802238a:	687b      	ldr	r3, [r7, #4]
 802238c:	2207      	movs	r2, #7
 802238e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8022390:	687b      	ldr	r3, [r7, #4]
 8022392:	2205      	movs	r2, #5
 8022394:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8022398:	687b      	ldr	r3, [r7, #4]
 802239a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 802239e:	687b      	ldr	r3, [r7, #4]
 80223a0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80223a4:	2300      	movs	r3, #0
 80223a6:	2200      	movs	r2, #0
 80223a8:	f004 fa68 	bl	802687c <osMessageQueuePut>
      break;
 80223ac:	e02d      	b.n	802240a <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80223ae:	687b      	ldr	r3, [r7, #4]
 80223b0:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80223b4:	2b00      	cmp	r3, #0
 80223b6:	d017      	beq.n	80223e8 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80223b8:	687b      	ldr	r3, [r7, #4]
 80223ba:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80223be:	687b      	ldr	r3, [r7, #4]
 80223c0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80223c4:	23ff      	movs	r3, #255	@ 0xff
 80223c6:	6878      	ldr	r0, [r7, #4]
 80223c8:	f000 f962 	bl	8022690 <USBH_Get_StringDesc>
 80223cc:	4603      	mov	r3, r0
 80223ce:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80223d0:	7bbb      	ldrb	r3, [r7, #14]
 80223d2:	2b00      	cmp	r3, #0
 80223d4:	d102      	bne.n	80223dc <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80223d6:	2300      	movs	r3, #0
 80223d8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80223da:	e018      	b.n	802240e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80223dc:	7bbb      	ldrb	r3, [r7, #14]
 80223de:	2b03      	cmp	r3, #3
 80223e0:	d115      	bne.n	802240e <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 80223e2:	2300      	movs	r3, #0
 80223e4:	73fb      	strb	r3, [r7, #15]
      break;
 80223e6:	e012      	b.n	802240e <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 80223e8:	2300      	movs	r3, #0
 80223ea:	73fb      	strb	r3, [r7, #15]
      break;
 80223ec:	e00f      	b.n	802240e <USBH_HandleEnum+0x442>

    default:
      break;
 80223ee:	bf00      	nop
 80223f0:	e00e      	b.n	8022410 <USBH_HandleEnum+0x444>
      break;
 80223f2:	bf00      	nop
 80223f4:	e00c      	b.n	8022410 <USBH_HandleEnum+0x444>
      break;
 80223f6:	bf00      	nop
 80223f8:	e00a      	b.n	8022410 <USBH_HandleEnum+0x444>
      break;
 80223fa:	bf00      	nop
 80223fc:	e008      	b.n	8022410 <USBH_HandleEnum+0x444>
      break;
 80223fe:	bf00      	nop
 8022400:	e006      	b.n	8022410 <USBH_HandleEnum+0x444>
      break;
 8022402:	bf00      	nop
 8022404:	e004      	b.n	8022410 <USBH_HandleEnum+0x444>
      break;
 8022406:	bf00      	nop
 8022408:	e002      	b.n	8022410 <USBH_HandleEnum+0x444>
      break;
 802240a:	bf00      	nop
 802240c:	e000      	b.n	8022410 <USBH_HandleEnum+0x444>
      break;
 802240e:	bf00      	nop
  }
  return Status;
 8022410:	7bfb      	ldrb	r3, [r7, #15]
}
 8022412:	4618      	mov	r0, r3
 8022414:	3710      	adds	r7, #16
 8022416:	46bd      	mov	sp, r7
 8022418:	bd80      	pop	{r7, pc}
 802241a:	bf00      	nop

0802241c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 802241c:	b480      	push	{r7}
 802241e:	b083      	sub	sp, #12
 8022420:	af00      	add	r7, sp, #0
 8022422:	6078      	str	r0, [r7, #4]
 8022424:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8022426:	687b      	ldr	r3, [r7, #4]
 8022428:	683a      	ldr	r2, [r7, #0]
 802242a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 802242e:	bf00      	nop
 8022430:	370c      	adds	r7, #12
 8022432:	46bd      	mov	sp, r7
 8022434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022438:	4770      	bx	lr

0802243a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 802243a:	b580      	push	{r7, lr}
 802243c:	b082      	sub	sp, #8
 802243e:	af00      	add	r7, sp, #0
 8022440:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8022442:	687b      	ldr	r3, [r7, #4]
 8022444:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8022448:	1c5a      	adds	r2, r3, #1
 802244a:	687b      	ldr	r3, [r7, #4]
 802244c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8022450:	6878      	ldr	r0, [r7, #4]
 8022452:	f000 f804 	bl	802245e <USBH_HandleSof>
}
 8022456:	bf00      	nop
 8022458:	3708      	adds	r7, #8
 802245a:	46bd      	mov	sp, r7
 802245c:	bd80      	pop	{r7, pc}

0802245e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 802245e:	b580      	push	{r7, lr}
 8022460:	b082      	sub	sp, #8
 8022462:	af00      	add	r7, sp, #0
 8022464:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8022466:	687b      	ldr	r3, [r7, #4]
 8022468:	781b      	ldrb	r3, [r3, #0]
 802246a:	b2db      	uxtb	r3, r3
 802246c:	2b0b      	cmp	r3, #11
 802246e:	d10a      	bne.n	8022486 <USBH_HandleSof+0x28>
 8022470:	687b      	ldr	r3, [r7, #4]
 8022472:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8022476:	2b00      	cmp	r3, #0
 8022478:	d005      	beq.n	8022486 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 802247a:	687b      	ldr	r3, [r7, #4]
 802247c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8022480:	699b      	ldr	r3, [r3, #24]
 8022482:	6878      	ldr	r0, [r7, #4]
 8022484:	4798      	blx	r3
  }
}
 8022486:	bf00      	nop
 8022488:	3708      	adds	r7, #8
 802248a:	46bd      	mov	sp, r7
 802248c:	bd80      	pop	{r7, pc}

0802248e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 802248e:	b580      	push	{r7, lr}
 8022490:	b082      	sub	sp, #8
 8022492:	af00      	add	r7, sp, #0
 8022494:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8022496:	687b      	ldr	r3, [r7, #4]
 8022498:	2201      	movs	r2, #1
 802249a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802249e:	687b      	ldr	r3, [r7, #4]
 80224a0:	2201      	movs	r2, #1
 80224a2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80224a6:	687b      	ldr	r3, [r7, #4]
 80224a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80224ac:	687b      	ldr	r3, [r7, #4]
 80224ae:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80224b2:	2300      	movs	r3, #0
 80224b4:	2200      	movs	r2, #0
 80224b6:	f004 f9e1 	bl	802687c <osMessageQueuePut>
#endif
#endif

  return;
 80224ba:	bf00      	nop
}
 80224bc:	3708      	adds	r7, #8
 80224be:	46bd      	mov	sp, r7
 80224c0:	bd80      	pop	{r7, pc}

080224c2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80224c2:	b480      	push	{r7}
 80224c4:	b083      	sub	sp, #12
 80224c6:	af00      	add	r7, sp, #0
 80224c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80224ca:	687b      	ldr	r3, [r7, #4]
 80224cc:	2200      	movs	r2, #0
 80224ce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80224d2:	bf00      	nop
}
 80224d4:	370c      	adds	r7, #12
 80224d6:	46bd      	mov	sp, r7
 80224d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224dc:	4770      	bx	lr

080224de <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80224de:	b580      	push	{r7, lr}
 80224e0:	b082      	sub	sp, #8
 80224e2:	af00      	add	r7, sp, #0
 80224e4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80224e6:	687b      	ldr	r3, [r7, #4]
 80224e8:	2201      	movs	r2, #1
 80224ea:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80224ee:	687b      	ldr	r3, [r7, #4]
 80224f0:	2200      	movs	r2, #0
 80224f2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80224f6:	687b      	ldr	r3, [r7, #4]
 80224f8:	2200      	movs	r2, #0
 80224fa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80224fe:	687b      	ldr	r3, [r7, #4]
 8022500:	2201      	movs	r2, #1
 8022502:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8022506:	687b      	ldr	r3, [r7, #4]
 8022508:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 802250c:	687b      	ldr	r3, [r7, #4]
 802250e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8022512:	2300      	movs	r3, #0
 8022514:	2200      	movs	r2, #0
 8022516:	f004 f9b1 	bl	802687c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 802251a:	2300      	movs	r3, #0
}
 802251c:	4618      	mov	r0, r3
 802251e:	3708      	adds	r7, #8
 8022520:	46bd      	mov	sp, r7
 8022522:	bd80      	pop	{r7, pc}

08022524 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8022524:	b580      	push	{r7, lr}
 8022526:	b082      	sub	sp, #8
 8022528:	af00      	add	r7, sp, #0
 802252a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 802252c:	687b      	ldr	r3, [r7, #4]
 802252e:	2201      	movs	r2, #1
 8022530:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8022534:	687b      	ldr	r3, [r7, #4]
 8022536:	2200      	movs	r2, #0
 8022538:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 802253c:	687b      	ldr	r3, [r7, #4]
 802253e:	2200      	movs	r2, #0
 8022540:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8022544:	6878      	ldr	r0, [r7, #4]
 8022546:	f007 fe94 	bl	802a272 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802254a:	687b      	ldr	r3, [r7, #4]
 802254c:	791b      	ldrb	r3, [r3, #4]
 802254e:	4619      	mov	r1, r3
 8022550:	6878      	ldr	r0, [r7, #4]
 8022552:	f001 f837 	bl	80235c4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8022556:	687b      	ldr	r3, [r7, #4]
 8022558:	795b      	ldrb	r3, [r3, #5]
 802255a:	4619      	mov	r1, r3
 802255c:	6878      	ldr	r0, [r7, #4]
 802255e:	f001 f831 	bl	80235c4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8022562:	687b      	ldr	r3, [r7, #4]
 8022564:	2201      	movs	r2, #1
 8022566:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 802256a:	687b      	ldr	r3, [r7, #4]
 802256c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8022570:	687b      	ldr	r3, [r7, #4]
 8022572:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8022576:	2300      	movs	r3, #0
 8022578:	2200      	movs	r2, #0
 802257a:	f004 f97f 	bl	802687c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 802257e:	2300      	movs	r3, #0
}
 8022580:	4618      	mov	r0, r3
 8022582:	3708      	adds	r7, #8
 8022584:	46bd      	mov	sp, r7
 8022586:	bd80      	pop	{r7, pc}

08022588 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8022588:	b580      	push	{r7, lr}
 802258a:	b084      	sub	sp, #16
 802258c:	af00      	add	r7, sp, #0
 802258e:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8022590:	687b      	ldr	r3, [r7, #4]
 8022592:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8022596:	687b      	ldr	r3, [r7, #4]
 8022598:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 802259c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80225a0:	2200      	movs	r2, #0
 80225a2:	f004 f9df 	bl	8026964 <osMessageQueueGet>
 80225a6:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 80225a8:	68fb      	ldr	r3, [r7, #12]
 80225aa:	2b00      	cmp	r3, #0
 80225ac:	d1f0      	bne.n	8022590 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80225ae:	6878      	ldr	r0, [r7, #4]
 80225b0:	f7ff faa2 	bl	8021af8 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80225b4:	e7ec      	b.n	8022590 <USBH_Process_OS+0x8>

080225b6 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80225b6:	b580      	push	{r7, lr}
 80225b8:	b082      	sub	sp, #8
 80225ba:	af00      	add	r7, sp, #0
 80225bc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80225be:	687b      	ldr	r3, [r7, #4]
 80225c0:	2201      	movs	r2, #1
 80225c2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80225c6:	687b      	ldr	r3, [r7, #4]
 80225c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80225cc:	687b      	ldr	r3, [r7, #4]
 80225ce:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80225d2:	2300      	movs	r3, #0
 80225d4:	2200      	movs	r2, #0
 80225d6:	f004 f951 	bl	802687c <osMessageQueuePut>
#endif

  return USBH_OK;
 80225da:	2300      	movs	r3, #0
}
 80225dc:	4618      	mov	r0, r3
 80225de:	3708      	adds	r7, #8
 80225e0:	46bd      	mov	sp, r7
 80225e2:	bd80      	pop	{r7, pc}

080225e4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80225e4:	b580      	push	{r7, lr}
 80225e6:	b086      	sub	sp, #24
 80225e8:	af02      	add	r7, sp, #8
 80225ea:	6078      	str	r0, [r7, #4]
 80225ec:	460b      	mov	r3, r1
 80225ee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80225f0:	887b      	ldrh	r3, [r7, #2]
 80225f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80225f6:	d901      	bls.n	80225fc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80225f8:	2303      	movs	r3, #3
 80225fa:	e01b      	b.n	8022634 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80225fc:	687b      	ldr	r3, [r7, #4]
 80225fe:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8022602:	887b      	ldrh	r3, [r7, #2]
 8022604:	9300      	str	r3, [sp, #0]
 8022606:	4613      	mov	r3, r2
 8022608:	f44f 7280 	mov.w	r2, #256	@ 0x100
 802260c:	2100      	movs	r1, #0
 802260e:	6878      	ldr	r0, [r7, #4]
 8022610:	f000 f872 	bl	80226f8 <USBH_GetDescriptor>
 8022614:	4603      	mov	r3, r0
 8022616:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8022618:	7bfb      	ldrb	r3, [r7, #15]
 802261a:	2b00      	cmp	r3, #0
 802261c:	d109      	bne.n	8022632 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 802261e:	687b      	ldr	r3, [r7, #4]
 8022620:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8022624:	887a      	ldrh	r2, [r7, #2]
 8022626:	4619      	mov	r1, r3
 8022628:	6878      	ldr	r0, [r7, #4]
 802262a:	f000 f929 	bl	8022880 <USBH_ParseDevDesc>
 802262e:	4603      	mov	r3, r0
 8022630:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8022632:	7bfb      	ldrb	r3, [r7, #15]
}
 8022634:	4618      	mov	r0, r3
 8022636:	3710      	adds	r7, #16
 8022638:	46bd      	mov	sp, r7
 802263a:	bd80      	pop	{r7, pc}

0802263c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 802263c:	b580      	push	{r7, lr}
 802263e:	b086      	sub	sp, #24
 8022640:	af02      	add	r7, sp, #8
 8022642:	6078      	str	r0, [r7, #4]
 8022644:	460b      	mov	r3, r1
 8022646:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8022648:	687b      	ldr	r3, [r7, #4]
 802264a:	331c      	adds	r3, #28
 802264c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 802264e:	887b      	ldrh	r3, [r7, #2]
 8022650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8022654:	d901      	bls.n	802265a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8022656:	2303      	movs	r3, #3
 8022658:	e016      	b.n	8022688 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 802265a:	887b      	ldrh	r3, [r7, #2]
 802265c:	9300      	str	r3, [sp, #0]
 802265e:	68bb      	ldr	r3, [r7, #8]
 8022660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8022664:	2100      	movs	r1, #0
 8022666:	6878      	ldr	r0, [r7, #4]
 8022668:	f000 f846 	bl	80226f8 <USBH_GetDescriptor>
 802266c:	4603      	mov	r3, r0
 802266e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8022670:	7bfb      	ldrb	r3, [r7, #15]
 8022672:	2b00      	cmp	r3, #0
 8022674:	d107      	bne.n	8022686 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8022676:	887b      	ldrh	r3, [r7, #2]
 8022678:	461a      	mov	r2, r3
 802267a:	68b9      	ldr	r1, [r7, #8]
 802267c:	6878      	ldr	r0, [r7, #4]
 802267e:	f000 f9af 	bl	80229e0 <USBH_ParseCfgDesc>
 8022682:	4603      	mov	r3, r0
 8022684:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8022686:	7bfb      	ldrb	r3, [r7, #15]
}
 8022688:	4618      	mov	r0, r3
 802268a:	3710      	adds	r7, #16
 802268c:	46bd      	mov	sp, r7
 802268e:	bd80      	pop	{r7, pc}

08022690 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8022690:	b580      	push	{r7, lr}
 8022692:	b088      	sub	sp, #32
 8022694:	af02      	add	r7, sp, #8
 8022696:	60f8      	str	r0, [r7, #12]
 8022698:	607a      	str	r2, [r7, #4]
 802269a:	461a      	mov	r2, r3
 802269c:	460b      	mov	r3, r1
 802269e:	72fb      	strb	r3, [r7, #11]
 80226a0:	4613      	mov	r3, r2
 80226a2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80226a4:	893b      	ldrh	r3, [r7, #8]
 80226a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80226aa:	d802      	bhi.n	80226b2 <USBH_Get_StringDesc+0x22>
 80226ac:	687b      	ldr	r3, [r7, #4]
 80226ae:	2b00      	cmp	r3, #0
 80226b0:	d101      	bne.n	80226b6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80226b2:	2303      	movs	r3, #3
 80226b4:	e01c      	b.n	80226f0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80226b6:	7afb      	ldrb	r3, [r7, #11]
 80226b8:	b29b      	uxth	r3, r3
 80226ba:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80226be:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80226c0:	68fb      	ldr	r3, [r7, #12]
 80226c2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80226c6:	893b      	ldrh	r3, [r7, #8]
 80226c8:	9300      	str	r3, [sp, #0]
 80226ca:	460b      	mov	r3, r1
 80226cc:	2100      	movs	r1, #0
 80226ce:	68f8      	ldr	r0, [r7, #12]
 80226d0:	f000 f812 	bl	80226f8 <USBH_GetDescriptor>
 80226d4:	4603      	mov	r3, r0
 80226d6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80226d8:	7dfb      	ldrb	r3, [r7, #23]
 80226da:	2b00      	cmp	r3, #0
 80226dc:	d107      	bne.n	80226ee <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80226de:	68fb      	ldr	r3, [r7, #12]
 80226e0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80226e4:	893a      	ldrh	r2, [r7, #8]
 80226e6:	6879      	ldr	r1, [r7, #4]
 80226e8:	4618      	mov	r0, r3
 80226ea:	f000 fb8d 	bl	8022e08 <USBH_ParseStringDesc>
  }

  return status;
 80226ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80226f0:	4618      	mov	r0, r3
 80226f2:	3718      	adds	r7, #24
 80226f4:	46bd      	mov	sp, r7
 80226f6:	bd80      	pop	{r7, pc}

080226f8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80226f8:	b580      	push	{r7, lr}
 80226fa:	b084      	sub	sp, #16
 80226fc:	af00      	add	r7, sp, #0
 80226fe:	60f8      	str	r0, [r7, #12]
 8022700:	607b      	str	r3, [r7, #4]
 8022702:	460b      	mov	r3, r1
 8022704:	72fb      	strb	r3, [r7, #11]
 8022706:	4613      	mov	r3, r2
 8022708:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 802270a:	68fb      	ldr	r3, [r7, #12]
 802270c:	789b      	ldrb	r3, [r3, #2]
 802270e:	2b01      	cmp	r3, #1
 8022710:	d11c      	bne.n	802274c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8022712:	7afb      	ldrb	r3, [r7, #11]
 8022714:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8022718:	b2da      	uxtb	r2, r3
 802271a:	68fb      	ldr	r3, [r7, #12]
 802271c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 802271e:	68fb      	ldr	r3, [r7, #12]
 8022720:	2206      	movs	r2, #6
 8022722:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8022724:	68fb      	ldr	r3, [r7, #12]
 8022726:	893a      	ldrh	r2, [r7, #8]
 8022728:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 802272a:	893b      	ldrh	r3, [r7, #8]
 802272c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8022730:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8022734:	d104      	bne.n	8022740 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8022736:	68fb      	ldr	r3, [r7, #12]
 8022738:	f240 4209 	movw	r2, #1033	@ 0x409
 802273c:	829a      	strh	r2, [r3, #20]
 802273e:	e002      	b.n	8022746 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8022740:	68fb      	ldr	r3, [r7, #12]
 8022742:	2200      	movs	r2, #0
 8022744:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8022746:	68fb      	ldr	r3, [r7, #12]
 8022748:	8b3a      	ldrh	r2, [r7, #24]
 802274a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 802274c:	8b3b      	ldrh	r3, [r7, #24]
 802274e:	461a      	mov	r2, r3
 8022750:	6879      	ldr	r1, [r7, #4]
 8022752:	68f8      	ldr	r0, [r7, #12]
 8022754:	f000 fba5 	bl	8022ea2 <USBH_CtlReq>
 8022758:	4603      	mov	r3, r0
}
 802275a:	4618      	mov	r0, r3
 802275c:	3710      	adds	r7, #16
 802275e:	46bd      	mov	sp, r7
 8022760:	bd80      	pop	{r7, pc}

08022762 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8022762:	b580      	push	{r7, lr}
 8022764:	b082      	sub	sp, #8
 8022766:	af00      	add	r7, sp, #0
 8022768:	6078      	str	r0, [r7, #4]
 802276a:	460b      	mov	r3, r1
 802276c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802276e:	687b      	ldr	r3, [r7, #4]
 8022770:	789b      	ldrb	r3, [r3, #2]
 8022772:	2b01      	cmp	r3, #1
 8022774:	d10f      	bne.n	8022796 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8022776:	687b      	ldr	r3, [r7, #4]
 8022778:	2200      	movs	r2, #0
 802277a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 802277c:	687b      	ldr	r3, [r7, #4]
 802277e:	2205      	movs	r2, #5
 8022780:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8022782:	78fb      	ldrb	r3, [r7, #3]
 8022784:	b29a      	uxth	r2, r3
 8022786:	687b      	ldr	r3, [r7, #4]
 8022788:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802278a:	687b      	ldr	r3, [r7, #4]
 802278c:	2200      	movs	r2, #0
 802278e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8022790:	687b      	ldr	r3, [r7, #4]
 8022792:	2200      	movs	r2, #0
 8022794:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8022796:	2200      	movs	r2, #0
 8022798:	2100      	movs	r1, #0
 802279a:	6878      	ldr	r0, [r7, #4]
 802279c:	f000 fb81 	bl	8022ea2 <USBH_CtlReq>
 80227a0:	4603      	mov	r3, r0
}
 80227a2:	4618      	mov	r0, r3
 80227a4:	3708      	adds	r7, #8
 80227a6:	46bd      	mov	sp, r7
 80227a8:	bd80      	pop	{r7, pc}

080227aa <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80227aa:	b580      	push	{r7, lr}
 80227ac:	b082      	sub	sp, #8
 80227ae:	af00      	add	r7, sp, #0
 80227b0:	6078      	str	r0, [r7, #4]
 80227b2:	460b      	mov	r3, r1
 80227b4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80227b6:	687b      	ldr	r3, [r7, #4]
 80227b8:	789b      	ldrb	r3, [r3, #2]
 80227ba:	2b01      	cmp	r3, #1
 80227bc:	d10e      	bne.n	80227dc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80227be:	687b      	ldr	r3, [r7, #4]
 80227c0:	2200      	movs	r2, #0
 80227c2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80227c4:	687b      	ldr	r3, [r7, #4]
 80227c6:	2209      	movs	r2, #9
 80227c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80227ca:	687b      	ldr	r3, [r7, #4]
 80227cc:	887a      	ldrh	r2, [r7, #2]
 80227ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80227d0:	687b      	ldr	r3, [r7, #4]
 80227d2:	2200      	movs	r2, #0
 80227d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80227d6:	687b      	ldr	r3, [r7, #4]
 80227d8:	2200      	movs	r2, #0
 80227da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80227dc:	2200      	movs	r2, #0
 80227de:	2100      	movs	r1, #0
 80227e0:	6878      	ldr	r0, [r7, #4]
 80227e2:	f000 fb5e 	bl	8022ea2 <USBH_CtlReq>
 80227e6:	4603      	mov	r3, r0
}
 80227e8:	4618      	mov	r0, r3
 80227ea:	3708      	adds	r7, #8
 80227ec:	46bd      	mov	sp, r7
 80227ee:	bd80      	pop	{r7, pc}

080227f0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80227f0:	b580      	push	{r7, lr}
 80227f2:	b082      	sub	sp, #8
 80227f4:	af00      	add	r7, sp, #0
 80227f6:	6078      	str	r0, [r7, #4]
 80227f8:	460b      	mov	r3, r1
 80227fa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80227fc:	687b      	ldr	r3, [r7, #4]
 80227fe:	789b      	ldrb	r3, [r3, #2]
 8022800:	2b01      	cmp	r3, #1
 8022802:	d10f      	bne.n	8022824 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8022804:	687b      	ldr	r3, [r7, #4]
 8022806:	2200      	movs	r2, #0
 8022808:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 802280a:	687b      	ldr	r3, [r7, #4]
 802280c:	2203      	movs	r2, #3
 802280e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8022810:	78fb      	ldrb	r3, [r7, #3]
 8022812:	b29a      	uxth	r2, r3
 8022814:	687b      	ldr	r3, [r7, #4]
 8022816:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8022818:	687b      	ldr	r3, [r7, #4]
 802281a:	2200      	movs	r2, #0
 802281c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802281e:	687b      	ldr	r3, [r7, #4]
 8022820:	2200      	movs	r2, #0
 8022822:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8022824:	2200      	movs	r2, #0
 8022826:	2100      	movs	r1, #0
 8022828:	6878      	ldr	r0, [r7, #4]
 802282a:	f000 fb3a 	bl	8022ea2 <USBH_CtlReq>
 802282e:	4603      	mov	r3, r0
}
 8022830:	4618      	mov	r0, r3
 8022832:	3708      	adds	r7, #8
 8022834:	46bd      	mov	sp, r7
 8022836:	bd80      	pop	{r7, pc}

08022838 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8022838:	b580      	push	{r7, lr}
 802283a:	b082      	sub	sp, #8
 802283c:	af00      	add	r7, sp, #0
 802283e:	6078      	str	r0, [r7, #4]
 8022840:	460b      	mov	r3, r1
 8022842:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8022844:	687b      	ldr	r3, [r7, #4]
 8022846:	789b      	ldrb	r3, [r3, #2]
 8022848:	2b01      	cmp	r3, #1
 802284a:	d10f      	bne.n	802286c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 802284c:	687b      	ldr	r3, [r7, #4]
 802284e:	2202      	movs	r2, #2
 8022850:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8022852:	687b      	ldr	r3, [r7, #4]
 8022854:	2201      	movs	r2, #1
 8022856:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8022858:	687b      	ldr	r3, [r7, #4]
 802285a:	2200      	movs	r2, #0
 802285c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 802285e:	78fb      	ldrb	r3, [r7, #3]
 8022860:	b29a      	uxth	r2, r3
 8022862:	687b      	ldr	r3, [r7, #4]
 8022864:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8022866:	687b      	ldr	r3, [r7, #4]
 8022868:	2200      	movs	r2, #0
 802286a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802286c:	2200      	movs	r2, #0
 802286e:	2100      	movs	r1, #0
 8022870:	6878      	ldr	r0, [r7, #4]
 8022872:	f000 fb16 	bl	8022ea2 <USBH_CtlReq>
 8022876:	4603      	mov	r3, r0
}
 8022878:	4618      	mov	r0, r3
 802287a:	3708      	adds	r7, #8
 802287c:	46bd      	mov	sp, r7
 802287e:	bd80      	pop	{r7, pc}

08022880 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8022880:	b480      	push	{r7}
 8022882:	b087      	sub	sp, #28
 8022884:	af00      	add	r7, sp, #0
 8022886:	60f8      	str	r0, [r7, #12]
 8022888:	60b9      	str	r1, [r7, #8]
 802288a:	4613      	mov	r3, r2
 802288c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 802288e:	68fb      	ldr	r3, [r7, #12]
 8022890:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8022894:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8022896:	2300      	movs	r3, #0
 8022898:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 802289a:	68bb      	ldr	r3, [r7, #8]
 802289c:	2b00      	cmp	r3, #0
 802289e:	d101      	bne.n	80228a4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80228a0:	2302      	movs	r3, #2
 80228a2:	e094      	b.n	80229ce <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80228a4:	68bb      	ldr	r3, [r7, #8]
 80228a6:	781a      	ldrb	r2, [r3, #0]
 80228a8:	693b      	ldr	r3, [r7, #16]
 80228aa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80228ac:	68bb      	ldr	r3, [r7, #8]
 80228ae:	785a      	ldrb	r2, [r3, #1]
 80228b0:	693b      	ldr	r3, [r7, #16]
 80228b2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80228b4:	68bb      	ldr	r3, [r7, #8]
 80228b6:	3302      	adds	r3, #2
 80228b8:	781b      	ldrb	r3, [r3, #0]
 80228ba:	461a      	mov	r2, r3
 80228bc:	68bb      	ldr	r3, [r7, #8]
 80228be:	3303      	adds	r3, #3
 80228c0:	781b      	ldrb	r3, [r3, #0]
 80228c2:	021b      	lsls	r3, r3, #8
 80228c4:	b29b      	uxth	r3, r3
 80228c6:	4313      	orrs	r3, r2
 80228c8:	b29a      	uxth	r2, r3
 80228ca:	693b      	ldr	r3, [r7, #16]
 80228cc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80228ce:	68bb      	ldr	r3, [r7, #8]
 80228d0:	791a      	ldrb	r2, [r3, #4]
 80228d2:	693b      	ldr	r3, [r7, #16]
 80228d4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80228d6:	68bb      	ldr	r3, [r7, #8]
 80228d8:	795a      	ldrb	r2, [r3, #5]
 80228da:	693b      	ldr	r3, [r7, #16]
 80228dc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80228de:	68bb      	ldr	r3, [r7, #8]
 80228e0:	799a      	ldrb	r2, [r3, #6]
 80228e2:	693b      	ldr	r3, [r7, #16]
 80228e4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80228e6:	68bb      	ldr	r3, [r7, #8]
 80228e8:	79da      	ldrb	r2, [r3, #7]
 80228ea:	693b      	ldr	r3, [r7, #16]
 80228ec:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80228ee:	68fb      	ldr	r3, [r7, #12]
 80228f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80228f4:	2b00      	cmp	r3, #0
 80228f6:	d004      	beq.n	8022902 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80228f8:	68fb      	ldr	r3, [r7, #12]
 80228fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80228fe:	2b01      	cmp	r3, #1
 8022900:	d11b      	bne.n	802293a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8022902:	693b      	ldr	r3, [r7, #16]
 8022904:	79db      	ldrb	r3, [r3, #7]
 8022906:	2b20      	cmp	r3, #32
 8022908:	dc0f      	bgt.n	802292a <USBH_ParseDevDesc+0xaa>
 802290a:	2b08      	cmp	r3, #8
 802290c:	db0f      	blt.n	802292e <USBH_ParseDevDesc+0xae>
 802290e:	3b08      	subs	r3, #8
 8022910:	4a32      	ldr	r2, [pc, #200]	@ (80229dc <USBH_ParseDevDesc+0x15c>)
 8022912:	fa22 f303 	lsr.w	r3, r2, r3
 8022916:	f003 0301 	and.w	r3, r3, #1
 802291a:	2b00      	cmp	r3, #0
 802291c:	bf14      	ite	ne
 802291e:	2301      	movne	r3, #1
 8022920:	2300      	moveq	r3, #0
 8022922:	b2db      	uxtb	r3, r3
 8022924:	2b00      	cmp	r3, #0
 8022926:	d106      	bne.n	8022936 <USBH_ParseDevDesc+0xb6>
 8022928:	e001      	b.n	802292e <USBH_ParseDevDesc+0xae>
 802292a:	2b40      	cmp	r3, #64	@ 0x40
 802292c:	d003      	beq.n	8022936 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 802292e:	693b      	ldr	r3, [r7, #16]
 8022930:	2208      	movs	r2, #8
 8022932:	71da      	strb	r2, [r3, #7]
        break;
 8022934:	e000      	b.n	8022938 <USBH_ParseDevDesc+0xb8>
        break;
 8022936:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8022938:	e00e      	b.n	8022958 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 802293a:	68fb      	ldr	r3, [r7, #12]
 802293c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8022940:	2b02      	cmp	r3, #2
 8022942:	d107      	bne.n	8022954 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8022944:	693b      	ldr	r3, [r7, #16]
 8022946:	79db      	ldrb	r3, [r3, #7]
 8022948:	2b08      	cmp	r3, #8
 802294a:	d005      	beq.n	8022958 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 802294c:	693b      	ldr	r3, [r7, #16]
 802294e:	2208      	movs	r2, #8
 8022950:	71da      	strb	r2, [r3, #7]
 8022952:	e001      	b.n	8022958 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8022954:	2303      	movs	r3, #3
 8022956:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8022958:	88fb      	ldrh	r3, [r7, #6]
 802295a:	2b08      	cmp	r3, #8
 802295c:	d936      	bls.n	80229cc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 802295e:	68bb      	ldr	r3, [r7, #8]
 8022960:	3308      	adds	r3, #8
 8022962:	781b      	ldrb	r3, [r3, #0]
 8022964:	461a      	mov	r2, r3
 8022966:	68bb      	ldr	r3, [r7, #8]
 8022968:	3309      	adds	r3, #9
 802296a:	781b      	ldrb	r3, [r3, #0]
 802296c:	021b      	lsls	r3, r3, #8
 802296e:	b29b      	uxth	r3, r3
 8022970:	4313      	orrs	r3, r2
 8022972:	b29a      	uxth	r2, r3
 8022974:	693b      	ldr	r3, [r7, #16]
 8022976:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8022978:	68bb      	ldr	r3, [r7, #8]
 802297a:	330a      	adds	r3, #10
 802297c:	781b      	ldrb	r3, [r3, #0]
 802297e:	461a      	mov	r2, r3
 8022980:	68bb      	ldr	r3, [r7, #8]
 8022982:	330b      	adds	r3, #11
 8022984:	781b      	ldrb	r3, [r3, #0]
 8022986:	021b      	lsls	r3, r3, #8
 8022988:	b29b      	uxth	r3, r3
 802298a:	4313      	orrs	r3, r2
 802298c:	b29a      	uxth	r2, r3
 802298e:	693b      	ldr	r3, [r7, #16]
 8022990:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8022992:	68bb      	ldr	r3, [r7, #8]
 8022994:	330c      	adds	r3, #12
 8022996:	781b      	ldrb	r3, [r3, #0]
 8022998:	461a      	mov	r2, r3
 802299a:	68bb      	ldr	r3, [r7, #8]
 802299c:	330d      	adds	r3, #13
 802299e:	781b      	ldrb	r3, [r3, #0]
 80229a0:	021b      	lsls	r3, r3, #8
 80229a2:	b29b      	uxth	r3, r3
 80229a4:	4313      	orrs	r3, r2
 80229a6:	b29a      	uxth	r2, r3
 80229a8:	693b      	ldr	r3, [r7, #16]
 80229aa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80229ac:	68bb      	ldr	r3, [r7, #8]
 80229ae:	7b9a      	ldrb	r2, [r3, #14]
 80229b0:	693b      	ldr	r3, [r7, #16]
 80229b2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80229b4:	68bb      	ldr	r3, [r7, #8]
 80229b6:	7bda      	ldrb	r2, [r3, #15]
 80229b8:	693b      	ldr	r3, [r7, #16]
 80229ba:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80229bc:	68bb      	ldr	r3, [r7, #8]
 80229be:	7c1a      	ldrb	r2, [r3, #16]
 80229c0:	693b      	ldr	r3, [r7, #16]
 80229c2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80229c4:	68bb      	ldr	r3, [r7, #8]
 80229c6:	7c5a      	ldrb	r2, [r3, #17]
 80229c8:	693b      	ldr	r3, [r7, #16]
 80229ca:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80229cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80229ce:	4618      	mov	r0, r3
 80229d0:	371c      	adds	r7, #28
 80229d2:	46bd      	mov	sp, r7
 80229d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229d8:	4770      	bx	lr
 80229da:	bf00      	nop
 80229dc:	01000101 	.word	0x01000101

080229e0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80229e0:	b580      	push	{r7, lr}
 80229e2:	b08c      	sub	sp, #48	@ 0x30
 80229e4:	af00      	add	r7, sp, #0
 80229e6:	60f8      	str	r0, [r7, #12]
 80229e8:	60b9      	str	r1, [r7, #8]
 80229ea:	4613      	mov	r3, r2
 80229ec:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80229ee:	68fb      	ldr	r3, [r7, #12]
 80229f0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80229f4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80229f6:	2300      	movs	r3, #0
 80229f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80229fc:	2300      	movs	r3, #0
 80229fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8022a02:	2300      	movs	r3, #0
 8022a04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8022a08:	68bb      	ldr	r3, [r7, #8]
 8022a0a:	2b00      	cmp	r3, #0
 8022a0c:	d101      	bne.n	8022a12 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8022a0e:	2302      	movs	r3, #2
 8022a10:	e0da      	b.n	8022bc8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8022a12:	68bb      	ldr	r3, [r7, #8]
 8022a14:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8022a16:	68bb      	ldr	r3, [r7, #8]
 8022a18:	781a      	ldrb	r2, [r3, #0]
 8022a1a:	6a3b      	ldr	r3, [r7, #32]
 8022a1c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8022a1e:	68bb      	ldr	r3, [r7, #8]
 8022a20:	785a      	ldrb	r2, [r3, #1]
 8022a22:	6a3b      	ldr	r3, [r7, #32]
 8022a24:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8022a26:	68bb      	ldr	r3, [r7, #8]
 8022a28:	3302      	adds	r3, #2
 8022a2a:	781b      	ldrb	r3, [r3, #0]
 8022a2c:	461a      	mov	r2, r3
 8022a2e:	68bb      	ldr	r3, [r7, #8]
 8022a30:	3303      	adds	r3, #3
 8022a32:	781b      	ldrb	r3, [r3, #0]
 8022a34:	021b      	lsls	r3, r3, #8
 8022a36:	b29b      	uxth	r3, r3
 8022a38:	4313      	orrs	r3, r2
 8022a3a:	b29b      	uxth	r3, r3
 8022a3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8022a40:	bf28      	it	cs
 8022a42:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8022a46:	b29a      	uxth	r2, r3
 8022a48:	6a3b      	ldr	r3, [r7, #32]
 8022a4a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8022a4c:	68bb      	ldr	r3, [r7, #8]
 8022a4e:	791a      	ldrb	r2, [r3, #4]
 8022a50:	6a3b      	ldr	r3, [r7, #32]
 8022a52:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8022a54:	68bb      	ldr	r3, [r7, #8]
 8022a56:	795a      	ldrb	r2, [r3, #5]
 8022a58:	6a3b      	ldr	r3, [r7, #32]
 8022a5a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8022a5c:	68bb      	ldr	r3, [r7, #8]
 8022a5e:	799a      	ldrb	r2, [r3, #6]
 8022a60:	6a3b      	ldr	r3, [r7, #32]
 8022a62:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8022a64:	68bb      	ldr	r3, [r7, #8]
 8022a66:	79da      	ldrb	r2, [r3, #7]
 8022a68:	6a3b      	ldr	r3, [r7, #32]
 8022a6a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8022a6c:	68bb      	ldr	r3, [r7, #8]
 8022a6e:	7a1a      	ldrb	r2, [r3, #8]
 8022a70:	6a3b      	ldr	r3, [r7, #32]
 8022a72:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8022a74:	6a3b      	ldr	r3, [r7, #32]
 8022a76:	781b      	ldrb	r3, [r3, #0]
 8022a78:	2b09      	cmp	r3, #9
 8022a7a:	d002      	beq.n	8022a82 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8022a7c:	6a3b      	ldr	r3, [r7, #32]
 8022a7e:	2209      	movs	r2, #9
 8022a80:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8022a82:	88fb      	ldrh	r3, [r7, #6]
 8022a84:	2b09      	cmp	r3, #9
 8022a86:	f240 809d 	bls.w	8022bc4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8022a8a:	2309      	movs	r3, #9
 8022a8c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8022a8e:	2300      	movs	r3, #0
 8022a90:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8022a92:	e081      	b.n	8022b98 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8022a94:	f107 0316 	add.w	r3, r7, #22
 8022a98:	4619      	mov	r1, r3
 8022a9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8022a9c:	f000 f9e7 	bl	8022e6e <USBH_GetNextDesc>
 8022aa0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8022aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022aa4:	785b      	ldrb	r3, [r3, #1]
 8022aa6:	2b04      	cmp	r3, #4
 8022aa8:	d176      	bne.n	8022b98 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8022aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022aac:	781b      	ldrb	r3, [r3, #0]
 8022aae:	2b09      	cmp	r3, #9
 8022ab0:	d002      	beq.n	8022ab8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8022ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022ab4:	2209      	movs	r2, #9
 8022ab6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8022ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8022abc:	221a      	movs	r2, #26
 8022abe:	fb02 f303 	mul.w	r3, r2, r3
 8022ac2:	3308      	adds	r3, #8
 8022ac4:	6a3a      	ldr	r2, [r7, #32]
 8022ac6:	4413      	add	r3, r2
 8022ac8:	3302      	adds	r3, #2
 8022aca:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8022acc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8022ace:	69f8      	ldr	r0, [r7, #28]
 8022ad0:	f000 f87e 	bl	8022bd0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8022ad4:	2300      	movs	r3, #0
 8022ad6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8022ada:	2300      	movs	r3, #0
 8022adc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8022ade:	e043      	b.n	8022b68 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8022ae0:	f107 0316 	add.w	r3, r7, #22
 8022ae4:	4619      	mov	r1, r3
 8022ae6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8022ae8:	f000 f9c1 	bl	8022e6e <USBH_GetNextDesc>
 8022aec:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8022aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022af0:	785b      	ldrb	r3, [r3, #1]
 8022af2:	2b05      	cmp	r3, #5
 8022af4:	d138      	bne.n	8022b68 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8022af6:	69fb      	ldr	r3, [r7, #28]
 8022af8:	795b      	ldrb	r3, [r3, #5]
 8022afa:	2b01      	cmp	r3, #1
 8022afc:	d113      	bne.n	8022b26 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8022afe:	69fb      	ldr	r3, [r7, #28]
 8022b00:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8022b02:	2b02      	cmp	r3, #2
 8022b04:	d003      	beq.n	8022b0e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8022b06:	69fb      	ldr	r3, [r7, #28]
 8022b08:	799b      	ldrb	r3, [r3, #6]
 8022b0a:	2b03      	cmp	r3, #3
 8022b0c:	d10b      	bne.n	8022b26 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8022b0e:	69fb      	ldr	r3, [r7, #28]
 8022b10:	79db      	ldrb	r3, [r3, #7]
 8022b12:	2b00      	cmp	r3, #0
 8022b14:	d10b      	bne.n	8022b2e <USBH_ParseCfgDesc+0x14e>
 8022b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022b18:	781b      	ldrb	r3, [r3, #0]
 8022b1a:	2b09      	cmp	r3, #9
 8022b1c:	d007      	beq.n	8022b2e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8022b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022b20:	2209      	movs	r2, #9
 8022b22:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8022b24:	e003      	b.n	8022b2e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8022b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022b28:	2207      	movs	r2, #7
 8022b2a:	701a      	strb	r2, [r3, #0]
 8022b2c:	e000      	b.n	8022b30 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8022b2e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8022b30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8022b34:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8022b38:	3201      	adds	r2, #1
 8022b3a:	00d2      	lsls	r2, r2, #3
 8022b3c:	211a      	movs	r1, #26
 8022b3e:	fb01 f303 	mul.w	r3, r1, r3
 8022b42:	4413      	add	r3, r2
 8022b44:	3308      	adds	r3, #8
 8022b46:	6a3a      	ldr	r2, [r7, #32]
 8022b48:	4413      	add	r3, r2
 8022b4a:	3304      	adds	r3, #4
 8022b4c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8022b4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022b50:	69b9      	ldr	r1, [r7, #24]
 8022b52:	68f8      	ldr	r0, [r7, #12]
 8022b54:	f000 f870 	bl	8022c38 <USBH_ParseEPDesc>
 8022b58:	4603      	mov	r3, r0
 8022b5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8022b5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8022b62:	3301      	adds	r3, #1
 8022b64:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8022b68:	69fb      	ldr	r3, [r7, #28]
 8022b6a:	791b      	ldrb	r3, [r3, #4]
 8022b6c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8022b70:	429a      	cmp	r2, r3
 8022b72:	d204      	bcs.n	8022b7e <USBH_ParseCfgDesc+0x19e>
 8022b74:	6a3b      	ldr	r3, [r7, #32]
 8022b76:	885a      	ldrh	r2, [r3, #2]
 8022b78:	8afb      	ldrh	r3, [r7, #22]
 8022b7a:	429a      	cmp	r2, r3
 8022b7c:	d8b0      	bhi.n	8022ae0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8022b7e:	69fb      	ldr	r3, [r7, #28]
 8022b80:	791b      	ldrb	r3, [r3, #4]
 8022b82:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8022b86:	429a      	cmp	r2, r3
 8022b88:	d201      	bcs.n	8022b8e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8022b8a:	2303      	movs	r3, #3
 8022b8c:	e01c      	b.n	8022bc8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8022b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8022b92:	3301      	adds	r3, #1
 8022b94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8022b98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8022b9c:	2b01      	cmp	r3, #1
 8022b9e:	d805      	bhi.n	8022bac <USBH_ParseCfgDesc+0x1cc>
 8022ba0:	6a3b      	ldr	r3, [r7, #32]
 8022ba2:	885a      	ldrh	r2, [r3, #2]
 8022ba4:	8afb      	ldrh	r3, [r7, #22]
 8022ba6:	429a      	cmp	r2, r3
 8022ba8:	f63f af74 	bhi.w	8022a94 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8022bac:	6a3b      	ldr	r3, [r7, #32]
 8022bae:	791b      	ldrb	r3, [r3, #4]
 8022bb0:	2b02      	cmp	r3, #2
 8022bb2:	bf28      	it	cs
 8022bb4:	2302      	movcs	r3, #2
 8022bb6:	b2db      	uxtb	r3, r3
 8022bb8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8022bbc:	429a      	cmp	r2, r3
 8022bbe:	d201      	bcs.n	8022bc4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8022bc0:	2303      	movs	r3, #3
 8022bc2:	e001      	b.n	8022bc8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8022bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8022bc8:	4618      	mov	r0, r3
 8022bca:	3730      	adds	r7, #48	@ 0x30
 8022bcc:	46bd      	mov	sp, r7
 8022bce:	bd80      	pop	{r7, pc}

08022bd0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8022bd0:	b480      	push	{r7}
 8022bd2:	b083      	sub	sp, #12
 8022bd4:	af00      	add	r7, sp, #0
 8022bd6:	6078      	str	r0, [r7, #4]
 8022bd8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8022bda:	683b      	ldr	r3, [r7, #0]
 8022bdc:	781a      	ldrb	r2, [r3, #0]
 8022bde:	687b      	ldr	r3, [r7, #4]
 8022be0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8022be2:	683b      	ldr	r3, [r7, #0]
 8022be4:	785a      	ldrb	r2, [r3, #1]
 8022be6:	687b      	ldr	r3, [r7, #4]
 8022be8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8022bea:	683b      	ldr	r3, [r7, #0]
 8022bec:	789a      	ldrb	r2, [r3, #2]
 8022bee:	687b      	ldr	r3, [r7, #4]
 8022bf0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8022bf2:	683b      	ldr	r3, [r7, #0]
 8022bf4:	78da      	ldrb	r2, [r3, #3]
 8022bf6:	687b      	ldr	r3, [r7, #4]
 8022bf8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8022bfa:	683b      	ldr	r3, [r7, #0]
 8022bfc:	3304      	adds	r3, #4
 8022bfe:	781b      	ldrb	r3, [r3, #0]
 8022c00:	2b02      	cmp	r3, #2
 8022c02:	bf28      	it	cs
 8022c04:	2302      	movcs	r3, #2
 8022c06:	b2da      	uxtb	r2, r3
 8022c08:	687b      	ldr	r3, [r7, #4]
 8022c0a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8022c0c:	683b      	ldr	r3, [r7, #0]
 8022c0e:	795a      	ldrb	r2, [r3, #5]
 8022c10:	687b      	ldr	r3, [r7, #4]
 8022c12:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8022c14:	683b      	ldr	r3, [r7, #0]
 8022c16:	799a      	ldrb	r2, [r3, #6]
 8022c18:	687b      	ldr	r3, [r7, #4]
 8022c1a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8022c1c:	683b      	ldr	r3, [r7, #0]
 8022c1e:	79da      	ldrb	r2, [r3, #7]
 8022c20:	687b      	ldr	r3, [r7, #4]
 8022c22:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8022c24:	683b      	ldr	r3, [r7, #0]
 8022c26:	7a1a      	ldrb	r2, [r3, #8]
 8022c28:	687b      	ldr	r3, [r7, #4]
 8022c2a:	721a      	strb	r2, [r3, #8]
}
 8022c2c:	bf00      	nop
 8022c2e:	370c      	adds	r7, #12
 8022c30:	46bd      	mov	sp, r7
 8022c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c36:	4770      	bx	lr

08022c38 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8022c38:	b480      	push	{r7}
 8022c3a:	b087      	sub	sp, #28
 8022c3c:	af00      	add	r7, sp, #0
 8022c3e:	60f8      	str	r0, [r7, #12]
 8022c40:	60b9      	str	r1, [r7, #8]
 8022c42:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8022c44:	2300      	movs	r3, #0
 8022c46:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8022c48:	687b      	ldr	r3, [r7, #4]
 8022c4a:	781a      	ldrb	r2, [r3, #0]
 8022c4c:	68bb      	ldr	r3, [r7, #8]
 8022c4e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8022c50:	687b      	ldr	r3, [r7, #4]
 8022c52:	785a      	ldrb	r2, [r3, #1]
 8022c54:	68bb      	ldr	r3, [r7, #8]
 8022c56:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8022c58:	687b      	ldr	r3, [r7, #4]
 8022c5a:	789a      	ldrb	r2, [r3, #2]
 8022c5c:	68bb      	ldr	r3, [r7, #8]
 8022c5e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8022c60:	687b      	ldr	r3, [r7, #4]
 8022c62:	78da      	ldrb	r2, [r3, #3]
 8022c64:	68bb      	ldr	r3, [r7, #8]
 8022c66:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8022c68:	687b      	ldr	r3, [r7, #4]
 8022c6a:	3304      	adds	r3, #4
 8022c6c:	781b      	ldrb	r3, [r3, #0]
 8022c6e:	461a      	mov	r2, r3
 8022c70:	687b      	ldr	r3, [r7, #4]
 8022c72:	3305      	adds	r3, #5
 8022c74:	781b      	ldrb	r3, [r3, #0]
 8022c76:	021b      	lsls	r3, r3, #8
 8022c78:	b29b      	uxth	r3, r3
 8022c7a:	4313      	orrs	r3, r2
 8022c7c:	b29a      	uxth	r2, r3
 8022c7e:	68bb      	ldr	r3, [r7, #8]
 8022c80:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8022c82:	687b      	ldr	r3, [r7, #4]
 8022c84:	799a      	ldrb	r2, [r3, #6]
 8022c86:	68bb      	ldr	r3, [r7, #8]
 8022c88:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8022c8a:	68bb      	ldr	r3, [r7, #8]
 8022c8c:	889b      	ldrh	r3, [r3, #4]
 8022c8e:	2b00      	cmp	r3, #0
 8022c90:	d009      	beq.n	8022ca6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8022c92:	68bb      	ldr	r3, [r7, #8]
 8022c94:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8022c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8022c9a:	d804      	bhi.n	8022ca6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8022c9c:	68bb      	ldr	r3, [r7, #8]
 8022c9e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8022ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022ca4:	d901      	bls.n	8022caa <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8022ca6:	2303      	movs	r3, #3
 8022ca8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8022caa:	68fb      	ldr	r3, [r7, #12]
 8022cac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8022cb0:	2b00      	cmp	r3, #0
 8022cb2:	d136      	bne.n	8022d22 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8022cb4:	68bb      	ldr	r3, [r7, #8]
 8022cb6:	78db      	ldrb	r3, [r3, #3]
 8022cb8:	f003 0303 	and.w	r3, r3, #3
 8022cbc:	2b02      	cmp	r3, #2
 8022cbe:	d108      	bne.n	8022cd2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8022cc0:	68bb      	ldr	r3, [r7, #8]
 8022cc2:	889b      	ldrh	r3, [r3, #4]
 8022cc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022cc8:	f240 8097 	bls.w	8022dfa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8022ccc:	2303      	movs	r3, #3
 8022cce:	75fb      	strb	r3, [r7, #23]
 8022cd0:	e093      	b.n	8022dfa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8022cd2:	68bb      	ldr	r3, [r7, #8]
 8022cd4:	78db      	ldrb	r3, [r3, #3]
 8022cd6:	f003 0303 	and.w	r3, r3, #3
 8022cda:	2b00      	cmp	r3, #0
 8022cdc:	d107      	bne.n	8022cee <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8022cde:	68bb      	ldr	r3, [r7, #8]
 8022ce0:	889b      	ldrh	r3, [r3, #4]
 8022ce2:	2b40      	cmp	r3, #64	@ 0x40
 8022ce4:	f240 8089 	bls.w	8022dfa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8022ce8:	2303      	movs	r3, #3
 8022cea:	75fb      	strb	r3, [r7, #23]
 8022cec:	e085      	b.n	8022dfa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8022cee:	68bb      	ldr	r3, [r7, #8]
 8022cf0:	78db      	ldrb	r3, [r3, #3]
 8022cf2:	f003 0303 	and.w	r3, r3, #3
 8022cf6:	2b01      	cmp	r3, #1
 8022cf8:	d005      	beq.n	8022d06 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8022cfa:	68bb      	ldr	r3, [r7, #8]
 8022cfc:	78db      	ldrb	r3, [r3, #3]
 8022cfe:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8022d02:	2b03      	cmp	r3, #3
 8022d04:	d10a      	bne.n	8022d1c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8022d06:	68bb      	ldr	r3, [r7, #8]
 8022d08:	799b      	ldrb	r3, [r3, #6]
 8022d0a:	2b00      	cmp	r3, #0
 8022d0c:	d003      	beq.n	8022d16 <USBH_ParseEPDesc+0xde>
 8022d0e:	68bb      	ldr	r3, [r7, #8]
 8022d10:	799b      	ldrb	r3, [r3, #6]
 8022d12:	2b10      	cmp	r3, #16
 8022d14:	d970      	bls.n	8022df8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8022d16:	2303      	movs	r3, #3
 8022d18:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8022d1a:	e06d      	b.n	8022df8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8022d1c:	2303      	movs	r3, #3
 8022d1e:	75fb      	strb	r3, [r7, #23]
 8022d20:	e06b      	b.n	8022dfa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8022d22:	68fb      	ldr	r3, [r7, #12]
 8022d24:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8022d28:	2b01      	cmp	r3, #1
 8022d2a:	d13c      	bne.n	8022da6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8022d2c:	68bb      	ldr	r3, [r7, #8]
 8022d2e:	78db      	ldrb	r3, [r3, #3]
 8022d30:	f003 0303 	and.w	r3, r3, #3
 8022d34:	2b02      	cmp	r3, #2
 8022d36:	d005      	beq.n	8022d44 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8022d38:	68bb      	ldr	r3, [r7, #8]
 8022d3a:	78db      	ldrb	r3, [r3, #3]
 8022d3c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8022d40:	2b00      	cmp	r3, #0
 8022d42:	d106      	bne.n	8022d52 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8022d44:	68bb      	ldr	r3, [r7, #8]
 8022d46:	889b      	ldrh	r3, [r3, #4]
 8022d48:	2b40      	cmp	r3, #64	@ 0x40
 8022d4a:	d956      	bls.n	8022dfa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8022d4c:	2303      	movs	r3, #3
 8022d4e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8022d50:	e053      	b.n	8022dfa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8022d52:	68bb      	ldr	r3, [r7, #8]
 8022d54:	78db      	ldrb	r3, [r3, #3]
 8022d56:	f003 0303 	and.w	r3, r3, #3
 8022d5a:	2b01      	cmp	r3, #1
 8022d5c:	d10e      	bne.n	8022d7c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8022d5e:	68bb      	ldr	r3, [r7, #8]
 8022d60:	799b      	ldrb	r3, [r3, #6]
 8022d62:	2b00      	cmp	r3, #0
 8022d64:	d007      	beq.n	8022d76 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8022d66:	68bb      	ldr	r3, [r7, #8]
 8022d68:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8022d6a:	2b10      	cmp	r3, #16
 8022d6c:	d803      	bhi.n	8022d76 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8022d6e:	68bb      	ldr	r3, [r7, #8]
 8022d70:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8022d72:	2b40      	cmp	r3, #64	@ 0x40
 8022d74:	d941      	bls.n	8022dfa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8022d76:	2303      	movs	r3, #3
 8022d78:	75fb      	strb	r3, [r7, #23]
 8022d7a:	e03e      	b.n	8022dfa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8022d7c:	68bb      	ldr	r3, [r7, #8]
 8022d7e:	78db      	ldrb	r3, [r3, #3]
 8022d80:	f003 0303 	and.w	r3, r3, #3
 8022d84:	2b03      	cmp	r3, #3
 8022d86:	d10b      	bne.n	8022da0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8022d88:	68bb      	ldr	r3, [r7, #8]
 8022d8a:	799b      	ldrb	r3, [r3, #6]
 8022d8c:	2b00      	cmp	r3, #0
 8022d8e:	d004      	beq.n	8022d9a <USBH_ParseEPDesc+0x162>
 8022d90:	68bb      	ldr	r3, [r7, #8]
 8022d92:	889b      	ldrh	r3, [r3, #4]
 8022d94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8022d98:	d32f      	bcc.n	8022dfa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8022d9a:	2303      	movs	r3, #3
 8022d9c:	75fb      	strb	r3, [r7, #23]
 8022d9e:	e02c      	b.n	8022dfa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8022da0:	2303      	movs	r3, #3
 8022da2:	75fb      	strb	r3, [r7, #23]
 8022da4:	e029      	b.n	8022dfa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8022da6:	68fb      	ldr	r3, [r7, #12]
 8022da8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8022dac:	2b02      	cmp	r3, #2
 8022dae:	d120      	bne.n	8022df2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8022db0:	68bb      	ldr	r3, [r7, #8]
 8022db2:	78db      	ldrb	r3, [r3, #3]
 8022db4:	f003 0303 	and.w	r3, r3, #3
 8022db8:	2b00      	cmp	r3, #0
 8022dba:	d106      	bne.n	8022dca <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8022dbc:	68bb      	ldr	r3, [r7, #8]
 8022dbe:	889b      	ldrh	r3, [r3, #4]
 8022dc0:	2b08      	cmp	r3, #8
 8022dc2:	d01a      	beq.n	8022dfa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8022dc4:	2303      	movs	r3, #3
 8022dc6:	75fb      	strb	r3, [r7, #23]
 8022dc8:	e017      	b.n	8022dfa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8022dca:	68bb      	ldr	r3, [r7, #8]
 8022dcc:	78db      	ldrb	r3, [r3, #3]
 8022dce:	f003 0303 	and.w	r3, r3, #3
 8022dd2:	2b03      	cmp	r3, #3
 8022dd4:	d10a      	bne.n	8022dec <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8022dd6:	68bb      	ldr	r3, [r7, #8]
 8022dd8:	799b      	ldrb	r3, [r3, #6]
 8022dda:	2b00      	cmp	r3, #0
 8022ddc:	d003      	beq.n	8022de6 <USBH_ParseEPDesc+0x1ae>
 8022dde:	68bb      	ldr	r3, [r7, #8]
 8022de0:	889b      	ldrh	r3, [r3, #4]
 8022de2:	2b08      	cmp	r3, #8
 8022de4:	d909      	bls.n	8022dfa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8022de6:	2303      	movs	r3, #3
 8022de8:	75fb      	strb	r3, [r7, #23]
 8022dea:	e006      	b.n	8022dfa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8022dec:	2303      	movs	r3, #3
 8022dee:	75fb      	strb	r3, [r7, #23]
 8022df0:	e003      	b.n	8022dfa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8022df2:	2303      	movs	r3, #3
 8022df4:	75fb      	strb	r3, [r7, #23]
 8022df6:	e000      	b.n	8022dfa <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8022df8:	bf00      	nop
  }

  return status;
 8022dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8022dfc:	4618      	mov	r0, r3
 8022dfe:	371c      	adds	r7, #28
 8022e00:	46bd      	mov	sp, r7
 8022e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e06:	4770      	bx	lr

08022e08 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8022e08:	b480      	push	{r7}
 8022e0a:	b087      	sub	sp, #28
 8022e0c:	af00      	add	r7, sp, #0
 8022e0e:	60f8      	str	r0, [r7, #12]
 8022e10:	60b9      	str	r1, [r7, #8]
 8022e12:	4613      	mov	r3, r2
 8022e14:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8022e16:	68fb      	ldr	r3, [r7, #12]
 8022e18:	3301      	adds	r3, #1
 8022e1a:	781b      	ldrb	r3, [r3, #0]
 8022e1c:	2b03      	cmp	r3, #3
 8022e1e:	d120      	bne.n	8022e62 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8022e20:	68fb      	ldr	r3, [r7, #12]
 8022e22:	781b      	ldrb	r3, [r3, #0]
 8022e24:	1e9a      	subs	r2, r3, #2
 8022e26:	88fb      	ldrh	r3, [r7, #6]
 8022e28:	4293      	cmp	r3, r2
 8022e2a:	bf28      	it	cs
 8022e2c:	4613      	movcs	r3, r2
 8022e2e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8022e30:	68fb      	ldr	r3, [r7, #12]
 8022e32:	3302      	adds	r3, #2
 8022e34:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8022e36:	2300      	movs	r3, #0
 8022e38:	82fb      	strh	r3, [r7, #22]
 8022e3a:	e00b      	b.n	8022e54 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8022e3c:	8afb      	ldrh	r3, [r7, #22]
 8022e3e:	68fa      	ldr	r2, [r7, #12]
 8022e40:	4413      	add	r3, r2
 8022e42:	781a      	ldrb	r2, [r3, #0]
 8022e44:	68bb      	ldr	r3, [r7, #8]
 8022e46:	701a      	strb	r2, [r3, #0]
      pdest++;
 8022e48:	68bb      	ldr	r3, [r7, #8]
 8022e4a:	3301      	adds	r3, #1
 8022e4c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8022e4e:	8afb      	ldrh	r3, [r7, #22]
 8022e50:	3302      	adds	r3, #2
 8022e52:	82fb      	strh	r3, [r7, #22]
 8022e54:	8afa      	ldrh	r2, [r7, #22]
 8022e56:	8abb      	ldrh	r3, [r7, #20]
 8022e58:	429a      	cmp	r2, r3
 8022e5a:	d3ef      	bcc.n	8022e3c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8022e5c:	68bb      	ldr	r3, [r7, #8]
 8022e5e:	2200      	movs	r2, #0
 8022e60:	701a      	strb	r2, [r3, #0]
  }
}
 8022e62:	bf00      	nop
 8022e64:	371c      	adds	r7, #28
 8022e66:	46bd      	mov	sp, r7
 8022e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e6c:	4770      	bx	lr

08022e6e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8022e6e:	b480      	push	{r7}
 8022e70:	b085      	sub	sp, #20
 8022e72:	af00      	add	r7, sp, #0
 8022e74:	6078      	str	r0, [r7, #4]
 8022e76:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8022e78:	683b      	ldr	r3, [r7, #0]
 8022e7a:	881b      	ldrh	r3, [r3, #0]
 8022e7c:	687a      	ldr	r2, [r7, #4]
 8022e7e:	7812      	ldrb	r2, [r2, #0]
 8022e80:	4413      	add	r3, r2
 8022e82:	b29a      	uxth	r2, r3
 8022e84:	683b      	ldr	r3, [r7, #0]
 8022e86:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8022e88:	687b      	ldr	r3, [r7, #4]
 8022e8a:	781b      	ldrb	r3, [r3, #0]
 8022e8c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8022e8e:	687b      	ldr	r3, [r7, #4]
 8022e90:	4413      	add	r3, r2
 8022e92:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8022e94:	68fb      	ldr	r3, [r7, #12]
}
 8022e96:	4618      	mov	r0, r3
 8022e98:	3714      	adds	r7, #20
 8022e9a:	46bd      	mov	sp, r7
 8022e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ea0:	4770      	bx	lr

08022ea2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8022ea2:	b580      	push	{r7, lr}
 8022ea4:	b086      	sub	sp, #24
 8022ea6:	af00      	add	r7, sp, #0
 8022ea8:	60f8      	str	r0, [r7, #12]
 8022eaa:	60b9      	str	r1, [r7, #8]
 8022eac:	4613      	mov	r3, r2
 8022eae:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8022eb0:	2301      	movs	r3, #1
 8022eb2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8022eb4:	68fb      	ldr	r3, [r7, #12]
 8022eb6:	789b      	ldrb	r3, [r3, #2]
 8022eb8:	2b01      	cmp	r3, #1
 8022eba:	d002      	beq.n	8022ec2 <USBH_CtlReq+0x20>
 8022ebc:	2b02      	cmp	r3, #2
 8022ebe:	d01d      	beq.n	8022efc <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8022ec0:	e043      	b.n	8022f4a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8022ec2:	68fb      	ldr	r3, [r7, #12]
 8022ec4:	68ba      	ldr	r2, [r7, #8]
 8022ec6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8022ec8:	68fb      	ldr	r3, [r7, #12]
 8022eca:	88fa      	ldrh	r2, [r7, #6]
 8022ecc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8022ece:	68fb      	ldr	r3, [r7, #12]
 8022ed0:	2201      	movs	r2, #1
 8022ed2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8022ed4:	68fb      	ldr	r3, [r7, #12]
 8022ed6:	2202      	movs	r2, #2
 8022ed8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8022eda:	2301      	movs	r3, #1
 8022edc:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8022ede:	68fb      	ldr	r3, [r7, #12]
 8022ee0:	2203      	movs	r2, #3
 8022ee2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8022ee6:	68fb      	ldr	r3, [r7, #12]
 8022ee8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8022eec:	68fb      	ldr	r3, [r7, #12]
 8022eee:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8022ef2:	2300      	movs	r3, #0
 8022ef4:	2200      	movs	r2, #0
 8022ef6:	f003 fcc1 	bl	802687c <osMessageQueuePut>
      break;
 8022efa:	e026      	b.n	8022f4a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8022efc:	68f8      	ldr	r0, [r7, #12]
 8022efe:	f000 f829 	bl	8022f54 <USBH_HandleControl>
 8022f02:	4603      	mov	r3, r0
 8022f04:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8022f06:	7dfb      	ldrb	r3, [r7, #23]
 8022f08:	2b00      	cmp	r3, #0
 8022f0a:	d002      	beq.n	8022f12 <USBH_CtlReq+0x70>
 8022f0c:	7dfb      	ldrb	r3, [r7, #23]
 8022f0e:	2b03      	cmp	r3, #3
 8022f10:	d106      	bne.n	8022f20 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8022f12:	68fb      	ldr	r3, [r7, #12]
 8022f14:	2201      	movs	r2, #1
 8022f16:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8022f18:	68fb      	ldr	r3, [r7, #12]
 8022f1a:	2200      	movs	r2, #0
 8022f1c:	761a      	strb	r2, [r3, #24]
 8022f1e:	e005      	b.n	8022f2c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8022f20:	7dfb      	ldrb	r3, [r7, #23]
 8022f22:	2b02      	cmp	r3, #2
 8022f24:	d102      	bne.n	8022f2c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8022f26:	68fb      	ldr	r3, [r7, #12]
 8022f28:	2201      	movs	r2, #1
 8022f2a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8022f2c:	68fb      	ldr	r3, [r7, #12]
 8022f2e:	2203      	movs	r2, #3
 8022f30:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8022f34:	68fb      	ldr	r3, [r7, #12]
 8022f36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8022f3a:	68fb      	ldr	r3, [r7, #12]
 8022f3c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8022f40:	2300      	movs	r3, #0
 8022f42:	2200      	movs	r2, #0
 8022f44:	f003 fc9a 	bl	802687c <osMessageQueuePut>
      break;
 8022f48:	bf00      	nop
  }
  return status;
 8022f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8022f4c:	4618      	mov	r0, r3
 8022f4e:	3718      	adds	r7, #24
 8022f50:	46bd      	mov	sp, r7
 8022f52:	bd80      	pop	{r7, pc}

08022f54 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8022f54:	b580      	push	{r7, lr}
 8022f56:	b086      	sub	sp, #24
 8022f58:	af02      	add	r7, sp, #8
 8022f5a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8022f5c:	2301      	movs	r3, #1
 8022f5e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8022f60:	2300      	movs	r3, #0
 8022f62:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8022f64:	687b      	ldr	r3, [r7, #4]
 8022f66:	7e1b      	ldrb	r3, [r3, #24]
 8022f68:	3b01      	subs	r3, #1
 8022f6a:	2b0a      	cmp	r3, #10
 8022f6c:	f200 8229 	bhi.w	80233c2 <USBH_HandleControl+0x46e>
 8022f70:	a201      	add	r2, pc, #4	@ (adr r2, 8022f78 <USBH_HandleControl+0x24>)
 8022f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022f76:	bf00      	nop
 8022f78:	08022fa5 	.word	0x08022fa5
 8022f7c:	08022fbf 	.word	0x08022fbf
 8022f80:	08023061 	.word	0x08023061
 8022f84:	08023087 	.word	0x08023087
 8022f88:	08023113 	.word	0x08023113
 8022f8c:	0802313d 	.word	0x0802313d
 8022f90:	080231ff 	.word	0x080231ff
 8022f94:	08023221 	.word	0x08023221
 8022f98:	080232b3 	.word	0x080232b3
 8022f9c:	080232d9 	.word	0x080232d9
 8022fa0:	0802336b 	.word	0x0802336b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8022fa4:	687b      	ldr	r3, [r7, #4]
 8022fa6:	f103 0110 	add.w	r1, r3, #16
 8022faa:	687b      	ldr	r3, [r7, #4]
 8022fac:	795b      	ldrb	r3, [r3, #5]
 8022fae:	461a      	mov	r2, r3
 8022fb0:	6878      	ldr	r0, [r7, #4]
 8022fb2:	f000 fa17 	bl	80233e4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8022fb6:	687b      	ldr	r3, [r7, #4]
 8022fb8:	2202      	movs	r2, #2
 8022fba:	761a      	strb	r2, [r3, #24]
      break;
 8022fbc:	e20c      	b.n	80233d8 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8022fbe:	687b      	ldr	r3, [r7, #4]
 8022fc0:	795b      	ldrb	r3, [r3, #5]
 8022fc2:	4619      	mov	r1, r3
 8022fc4:	6878      	ldr	r0, [r7, #4]
 8022fc6:	f007 fa43 	bl	802a450 <USBH_LL_GetURBState>
 8022fca:	4603      	mov	r3, r0
 8022fcc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8022fce:	7bbb      	ldrb	r3, [r7, #14]
 8022fd0:	2b01      	cmp	r3, #1
 8022fd2:	d12c      	bne.n	802302e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8022fd4:	687b      	ldr	r3, [r7, #4]
 8022fd6:	7c1b      	ldrb	r3, [r3, #16]
 8022fd8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8022fdc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8022fde:	687b      	ldr	r3, [r7, #4]
 8022fe0:	8adb      	ldrh	r3, [r3, #22]
 8022fe2:	2b00      	cmp	r3, #0
 8022fe4:	d00a      	beq.n	8022ffc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8022fe6:	7b7b      	ldrb	r3, [r7, #13]
 8022fe8:	2b80      	cmp	r3, #128	@ 0x80
 8022fea:	d103      	bne.n	8022ff4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8022fec:	687b      	ldr	r3, [r7, #4]
 8022fee:	2203      	movs	r2, #3
 8022ff0:	761a      	strb	r2, [r3, #24]
 8022ff2:	e00d      	b.n	8023010 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8022ff4:	687b      	ldr	r3, [r7, #4]
 8022ff6:	2205      	movs	r2, #5
 8022ff8:	761a      	strb	r2, [r3, #24]
 8022ffa:	e009      	b.n	8023010 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8022ffc:	7b7b      	ldrb	r3, [r7, #13]
 8022ffe:	2b80      	cmp	r3, #128	@ 0x80
 8023000:	d103      	bne.n	802300a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8023002:	687b      	ldr	r3, [r7, #4]
 8023004:	2209      	movs	r2, #9
 8023006:	761a      	strb	r2, [r3, #24]
 8023008:	e002      	b.n	8023010 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 802300a:	687b      	ldr	r3, [r7, #4]
 802300c:	2207      	movs	r2, #7
 802300e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8023010:	687b      	ldr	r3, [r7, #4]
 8023012:	2203      	movs	r2, #3
 8023014:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8023018:	687b      	ldr	r3, [r7, #4]
 802301a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 802301e:	687b      	ldr	r3, [r7, #4]
 8023020:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8023024:	2300      	movs	r3, #0
 8023026:	2200      	movs	r2, #0
 8023028:	f003 fc28 	bl	802687c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802302c:	e1cb      	b.n	80233c6 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 802302e:	7bbb      	ldrb	r3, [r7, #14]
 8023030:	2b04      	cmp	r3, #4
 8023032:	d003      	beq.n	802303c <USBH_HandleControl+0xe8>
 8023034:	7bbb      	ldrb	r3, [r7, #14]
 8023036:	2b02      	cmp	r3, #2
 8023038:	f040 81c5 	bne.w	80233c6 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 802303c:	687b      	ldr	r3, [r7, #4]
 802303e:	220b      	movs	r2, #11
 8023040:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8023042:	687b      	ldr	r3, [r7, #4]
 8023044:	2203      	movs	r2, #3
 8023046:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 802304a:	687b      	ldr	r3, [r7, #4]
 802304c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8023050:	687b      	ldr	r3, [r7, #4]
 8023052:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8023056:	2300      	movs	r3, #0
 8023058:	2200      	movs	r2, #0
 802305a:	f003 fc0f 	bl	802687c <osMessageQueuePut>
      break;
 802305e:	e1b2      	b.n	80233c6 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8023060:	687b      	ldr	r3, [r7, #4]
 8023062:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8023066:	b29a      	uxth	r2, r3
 8023068:	687b      	ldr	r3, [r7, #4]
 802306a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 802306c:	687b      	ldr	r3, [r7, #4]
 802306e:	6899      	ldr	r1, [r3, #8]
 8023070:	687b      	ldr	r3, [r7, #4]
 8023072:	899a      	ldrh	r2, [r3, #12]
 8023074:	687b      	ldr	r3, [r7, #4]
 8023076:	791b      	ldrb	r3, [r3, #4]
 8023078:	6878      	ldr	r0, [r7, #4]
 802307a:	f000 f9f2 	bl	8023462 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 802307e:	687b      	ldr	r3, [r7, #4]
 8023080:	2204      	movs	r2, #4
 8023082:	761a      	strb	r2, [r3, #24]
      break;
 8023084:	e1a8      	b.n	80233d8 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8023086:	687b      	ldr	r3, [r7, #4]
 8023088:	791b      	ldrb	r3, [r3, #4]
 802308a:	4619      	mov	r1, r3
 802308c:	6878      	ldr	r0, [r7, #4]
 802308e:	f007 f9df 	bl	802a450 <USBH_LL_GetURBState>
 8023092:	4603      	mov	r3, r0
 8023094:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8023096:	7bbb      	ldrb	r3, [r7, #14]
 8023098:	2b01      	cmp	r3, #1
 802309a:	d110      	bne.n	80230be <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 802309c:	687b      	ldr	r3, [r7, #4]
 802309e:	2209      	movs	r2, #9
 80230a0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80230a2:	687b      	ldr	r3, [r7, #4]
 80230a4:	2203      	movs	r2, #3
 80230a6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80230aa:	687b      	ldr	r3, [r7, #4]
 80230ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80230b0:	687b      	ldr	r3, [r7, #4]
 80230b2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80230b6:	2300      	movs	r3, #0
 80230b8:	2200      	movs	r2, #0
 80230ba:	f003 fbdf 	bl	802687c <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80230be:	7bbb      	ldrb	r3, [r7, #14]
 80230c0:	2b05      	cmp	r3, #5
 80230c2:	d110      	bne.n	80230e6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80230c4:	2303      	movs	r3, #3
 80230c6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80230c8:	687b      	ldr	r3, [r7, #4]
 80230ca:	2203      	movs	r2, #3
 80230cc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80230d0:	687b      	ldr	r3, [r7, #4]
 80230d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80230d6:	687b      	ldr	r3, [r7, #4]
 80230d8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80230dc:	2300      	movs	r3, #0
 80230de:	2200      	movs	r2, #0
 80230e0:	f003 fbcc 	bl	802687c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80230e4:	e171      	b.n	80233ca <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80230e6:	7bbb      	ldrb	r3, [r7, #14]
 80230e8:	2b04      	cmp	r3, #4
 80230ea:	f040 816e 	bne.w	80233ca <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80230ee:	687b      	ldr	r3, [r7, #4]
 80230f0:	220b      	movs	r2, #11
 80230f2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80230f4:	687b      	ldr	r3, [r7, #4]
 80230f6:	2203      	movs	r2, #3
 80230f8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80230fc:	687b      	ldr	r3, [r7, #4]
 80230fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8023102:	687b      	ldr	r3, [r7, #4]
 8023104:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8023108:	2300      	movs	r3, #0
 802310a:	2200      	movs	r2, #0
 802310c:	f003 fbb6 	bl	802687c <osMessageQueuePut>
      break;
 8023110:	e15b      	b.n	80233ca <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8023112:	687b      	ldr	r3, [r7, #4]
 8023114:	6899      	ldr	r1, [r3, #8]
 8023116:	687b      	ldr	r3, [r7, #4]
 8023118:	899a      	ldrh	r2, [r3, #12]
 802311a:	687b      	ldr	r3, [r7, #4]
 802311c:	795b      	ldrb	r3, [r3, #5]
 802311e:	2001      	movs	r0, #1
 8023120:	9000      	str	r0, [sp, #0]
 8023122:	6878      	ldr	r0, [r7, #4]
 8023124:	f000 f978 	bl	8023418 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8023128:	687b      	ldr	r3, [r7, #4]
 802312a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 802312e:	b29a      	uxth	r2, r3
 8023130:	687b      	ldr	r3, [r7, #4]
 8023132:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8023134:	687b      	ldr	r3, [r7, #4]
 8023136:	2206      	movs	r2, #6
 8023138:	761a      	strb	r2, [r3, #24]
      break;
 802313a:	e14d      	b.n	80233d8 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802313c:	687b      	ldr	r3, [r7, #4]
 802313e:	795b      	ldrb	r3, [r3, #5]
 8023140:	4619      	mov	r1, r3
 8023142:	6878      	ldr	r0, [r7, #4]
 8023144:	f007 f984 	bl	802a450 <USBH_LL_GetURBState>
 8023148:	4603      	mov	r3, r0
 802314a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802314c:	7bbb      	ldrb	r3, [r7, #14]
 802314e:	2b01      	cmp	r3, #1
 8023150:	d111      	bne.n	8023176 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8023152:	687b      	ldr	r3, [r7, #4]
 8023154:	2207      	movs	r2, #7
 8023156:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8023158:	687b      	ldr	r3, [r7, #4]
 802315a:	2203      	movs	r2, #3
 802315c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8023160:	687b      	ldr	r3, [r7, #4]
 8023162:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8023166:	687b      	ldr	r3, [r7, #4]
 8023168:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 802316c:	2300      	movs	r3, #0
 802316e:	2200      	movs	r2, #0
 8023170:	f003 fb84 	bl	802687c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8023174:	e12b      	b.n	80233ce <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8023176:	7bbb      	ldrb	r3, [r7, #14]
 8023178:	2b05      	cmp	r3, #5
 802317a:	d113      	bne.n	80231a4 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 802317c:	687b      	ldr	r3, [r7, #4]
 802317e:	220c      	movs	r2, #12
 8023180:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8023182:	2303      	movs	r3, #3
 8023184:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8023186:	687b      	ldr	r3, [r7, #4]
 8023188:	2203      	movs	r2, #3
 802318a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 802318e:	687b      	ldr	r3, [r7, #4]
 8023190:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8023194:	687b      	ldr	r3, [r7, #4]
 8023196:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 802319a:	2300      	movs	r3, #0
 802319c:	2200      	movs	r2, #0
 802319e:	f003 fb6d 	bl	802687c <osMessageQueuePut>
      break;
 80231a2:	e114      	b.n	80233ce <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80231a4:	7bbb      	ldrb	r3, [r7, #14]
 80231a6:	2b02      	cmp	r3, #2
 80231a8:	d111      	bne.n	80231ce <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80231aa:	687b      	ldr	r3, [r7, #4]
 80231ac:	2205      	movs	r2, #5
 80231ae:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80231b0:	687b      	ldr	r3, [r7, #4]
 80231b2:	2203      	movs	r2, #3
 80231b4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80231b8:	687b      	ldr	r3, [r7, #4]
 80231ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80231be:	687b      	ldr	r3, [r7, #4]
 80231c0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80231c4:	2300      	movs	r3, #0
 80231c6:	2200      	movs	r2, #0
 80231c8:	f003 fb58 	bl	802687c <osMessageQueuePut>
      break;
 80231cc:	e0ff      	b.n	80233ce <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80231ce:	7bbb      	ldrb	r3, [r7, #14]
 80231d0:	2b04      	cmp	r3, #4
 80231d2:	f040 80fc 	bne.w	80233ce <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80231d6:	687b      	ldr	r3, [r7, #4]
 80231d8:	220b      	movs	r2, #11
 80231da:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80231dc:	2302      	movs	r3, #2
 80231de:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80231e0:	687b      	ldr	r3, [r7, #4]
 80231e2:	2203      	movs	r2, #3
 80231e4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80231e8:	687b      	ldr	r3, [r7, #4]
 80231ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80231ee:	687b      	ldr	r3, [r7, #4]
 80231f0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80231f4:	2300      	movs	r3, #0
 80231f6:	2200      	movs	r2, #0
 80231f8:	f003 fb40 	bl	802687c <osMessageQueuePut>
      break;
 80231fc:	e0e7      	b.n	80233ce <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80231fe:	687b      	ldr	r3, [r7, #4]
 8023200:	791b      	ldrb	r3, [r3, #4]
 8023202:	2200      	movs	r2, #0
 8023204:	2100      	movs	r1, #0
 8023206:	6878      	ldr	r0, [r7, #4]
 8023208:	f000 f92b 	bl	8023462 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802320c:	687b      	ldr	r3, [r7, #4]
 802320e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8023212:	b29a      	uxth	r2, r3
 8023214:	687b      	ldr	r3, [r7, #4]
 8023216:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8023218:	687b      	ldr	r3, [r7, #4]
 802321a:	2208      	movs	r2, #8
 802321c:	761a      	strb	r2, [r3, #24]

      break;
 802321e:	e0db      	b.n	80233d8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8023220:	687b      	ldr	r3, [r7, #4]
 8023222:	791b      	ldrb	r3, [r3, #4]
 8023224:	4619      	mov	r1, r3
 8023226:	6878      	ldr	r0, [r7, #4]
 8023228:	f007 f912 	bl	802a450 <USBH_LL_GetURBState>
 802322c:	4603      	mov	r3, r0
 802322e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8023230:	7bbb      	ldrb	r3, [r7, #14]
 8023232:	2b01      	cmp	r3, #1
 8023234:	d113      	bne.n	802325e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8023236:	687b      	ldr	r3, [r7, #4]
 8023238:	220d      	movs	r2, #13
 802323a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 802323c:	2300      	movs	r3, #0
 802323e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8023240:	687b      	ldr	r3, [r7, #4]
 8023242:	2203      	movs	r2, #3
 8023244:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8023248:	687b      	ldr	r3, [r7, #4]
 802324a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 802324e:	687b      	ldr	r3, [r7, #4]
 8023250:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8023254:	2300      	movs	r3, #0
 8023256:	2200      	movs	r2, #0
 8023258:	f003 fb10 	bl	802687c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802325c:	e0b9      	b.n	80233d2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 802325e:	7bbb      	ldrb	r3, [r7, #14]
 8023260:	2b04      	cmp	r3, #4
 8023262:	d111      	bne.n	8023288 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8023264:	687b      	ldr	r3, [r7, #4]
 8023266:	220b      	movs	r2, #11
 8023268:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802326a:	687b      	ldr	r3, [r7, #4]
 802326c:	2203      	movs	r2, #3
 802326e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8023272:	687b      	ldr	r3, [r7, #4]
 8023274:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8023278:	687b      	ldr	r3, [r7, #4]
 802327a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 802327e:	2300      	movs	r3, #0
 8023280:	2200      	movs	r2, #0
 8023282:	f003 fafb 	bl	802687c <osMessageQueuePut>
      break;
 8023286:	e0a4      	b.n	80233d2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8023288:	7bbb      	ldrb	r3, [r7, #14]
 802328a:	2b05      	cmp	r3, #5
 802328c:	f040 80a1 	bne.w	80233d2 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8023290:	2303      	movs	r3, #3
 8023292:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8023294:	687b      	ldr	r3, [r7, #4]
 8023296:	2203      	movs	r2, #3
 8023298:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 802329c:	687b      	ldr	r3, [r7, #4]
 802329e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80232a2:	687b      	ldr	r3, [r7, #4]
 80232a4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80232a8:	2300      	movs	r3, #0
 80232aa:	2200      	movs	r2, #0
 80232ac:	f003 fae6 	bl	802687c <osMessageQueuePut>
      break;
 80232b0:	e08f      	b.n	80233d2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80232b2:	687b      	ldr	r3, [r7, #4]
 80232b4:	795b      	ldrb	r3, [r3, #5]
 80232b6:	2201      	movs	r2, #1
 80232b8:	9200      	str	r2, [sp, #0]
 80232ba:	2200      	movs	r2, #0
 80232bc:	2100      	movs	r1, #0
 80232be:	6878      	ldr	r0, [r7, #4]
 80232c0:	f000 f8aa 	bl	8023418 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80232c4:	687b      	ldr	r3, [r7, #4]
 80232c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80232ca:	b29a      	uxth	r2, r3
 80232cc:	687b      	ldr	r3, [r7, #4]
 80232ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80232d0:	687b      	ldr	r3, [r7, #4]
 80232d2:	220a      	movs	r2, #10
 80232d4:	761a      	strb	r2, [r3, #24]
      break;
 80232d6:	e07f      	b.n	80233d8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80232d8:	687b      	ldr	r3, [r7, #4]
 80232da:	795b      	ldrb	r3, [r3, #5]
 80232dc:	4619      	mov	r1, r3
 80232de:	6878      	ldr	r0, [r7, #4]
 80232e0:	f007 f8b6 	bl	802a450 <USBH_LL_GetURBState>
 80232e4:	4603      	mov	r3, r0
 80232e6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80232e8:	7bbb      	ldrb	r3, [r7, #14]
 80232ea:	2b01      	cmp	r3, #1
 80232ec:	d113      	bne.n	8023316 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80232ee:	2300      	movs	r3, #0
 80232f0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80232f2:	687b      	ldr	r3, [r7, #4]
 80232f4:	220d      	movs	r2, #13
 80232f6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80232f8:	687b      	ldr	r3, [r7, #4]
 80232fa:	2203      	movs	r2, #3
 80232fc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8023300:	687b      	ldr	r3, [r7, #4]
 8023302:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8023306:	687b      	ldr	r3, [r7, #4]
 8023308:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 802330c:	2300      	movs	r3, #0
 802330e:	2200      	movs	r2, #0
 8023310:	f003 fab4 	bl	802687c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8023314:	e05f      	b.n	80233d6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8023316:	7bbb      	ldrb	r3, [r7, #14]
 8023318:	2b02      	cmp	r3, #2
 802331a:	d111      	bne.n	8023340 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 802331c:	687b      	ldr	r3, [r7, #4]
 802331e:	2209      	movs	r2, #9
 8023320:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8023322:	687b      	ldr	r3, [r7, #4]
 8023324:	2203      	movs	r2, #3
 8023326:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 802332a:	687b      	ldr	r3, [r7, #4]
 802332c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8023330:	687b      	ldr	r3, [r7, #4]
 8023332:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8023336:	2300      	movs	r3, #0
 8023338:	2200      	movs	r2, #0
 802333a:	f003 fa9f 	bl	802687c <osMessageQueuePut>
      break;
 802333e:	e04a      	b.n	80233d6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8023340:	7bbb      	ldrb	r3, [r7, #14]
 8023342:	2b04      	cmp	r3, #4
 8023344:	d147      	bne.n	80233d6 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8023346:	687b      	ldr	r3, [r7, #4]
 8023348:	220b      	movs	r2, #11
 802334a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802334c:	687b      	ldr	r3, [r7, #4]
 802334e:	2203      	movs	r2, #3
 8023350:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8023354:	687b      	ldr	r3, [r7, #4]
 8023356:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 802335a:	687b      	ldr	r3, [r7, #4]
 802335c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8023360:	2300      	movs	r3, #0
 8023362:	2200      	movs	r2, #0
 8023364:	f003 fa8a 	bl	802687c <osMessageQueuePut>
      break;
 8023368:	e035      	b.n	80233d6 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 802336a:	687b      	ldr	r3, [r7, #4]
 802336c:	7e5b      	ldrb	r3, [r3, #25]
 802336e:	3301      	adds	r3, #1
 8023370:	b2da      	uxtb	r2, r3
 8023372:	687b      	ldr	r3, [r7, #4]
 8023374:	765a      	strb	r2, [r3, #25]
 8023376:	687b      	ldr	r3, [r7, #4]
 8023378:	7e5b      	ldrb	r3, [r3, #25]
 802337a:	2b02      	cmp	r3, #2
 802337c:	d806      	bhi.n	802338c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 802337e:	687b      	ldr	r3, [r7, #4]
 8023380:	2201      	movs	r2, #1
 8023382:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8023384:	687b      	ldr	r3, [r7, #4]
 8023386:	2201      	movs	r2, #1
 8023388:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 802338a:	e025      	b.n	80233d8 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 802338c:	687b      	ldr	r3, [r7, #4]
 802338e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8023392:	2106      	movs	r1, #6
 8023394:	6878      	ldr	r0, [r7, #4]
 8023396:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8023398:	687b      	ldr	r3, [r7, #4]
 802339a:	2200      	movs	r2, #0
 802339c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802339e:	687b      	ldr	r3, [r7, #4]
 80233a0:	795b      	ldrb	r3, [r3, #5]
 80233a2:	4619      	mov	r1, r3
 80233a4:	6878      	ldr	r0, [r7, #4]
 80233a6:	f000 f90d 	bl	80235c4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80233aa:	687b      	ldr	r3, [r7, #4]
 80233ac:	791b      	ldrb	r3, [r3, #4]
 80233ae:	4619      	mov	r1, r3
 80233b0:	6878      	ldr	r0, [r7, #4]
 80233b2:	f000 f907 	bl	80235c4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80233b6:	687b      	ldr	r3, [r7, #4]
 80233b8:	2200      	movs	r2, #0
 80233ba:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80233bc:	2302      	movs	r3, #2
 80233be:	73fb      	strb	r3, [r7, #15]
      break;
 80233c0:	e00a      	b.n	80233d8 <USBH_HandleControl+0x484>

    default:
      break;
 80233c2:	bf00      	nop
 80233c4:	e008      	b.n	80233d8 <USBH_HandleControl+0x484>
      break;
 80233c6:	bf00      	nop
 80233c8:	e006      	b.n	80233d8 <USBH_HandleControl+0x484>
      break;
 80233ca:	bf00      	nop
 80233cc:	e004      	b.n	80233d8 <USBH_HandleControl+0x484>
      break;
 80233ce:	bf00      	nop
 80233d0:	e002      	b.n	80233d8 <USBH_HandleControl+0x484>
      break;
 80233d2:	bf00      	nop
 80233d4:	e000      	b.n	80233d8 <USBH_HandleControl+0x484>
      break;
 80233d6:	bf00      	nop
  }

  return status;
 80233d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80233da:	4618      	mov	r0, r3
 80233dc:	3710      	adds	r7, #16
 80233de:	46bd      	mov	sp, r7
 80233e0:	bd80      	pop	{r7, pc}
 80233e2:	bf00      	nop

080233e4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80233e4:	b580      	push	{r7, lr}
 80233e6:	b088      	sub	sp, #32
 80233e8:	af04      	add	r7, sp, #16
 80233ea:	60f8      	str	r0, [r7, #12]
 80233ec:	60b9      	str	r1, [r7, #8]
 80233ee:	4613      	mov	r3, r2
 80233f0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80233f2:	79f9      	ldrb	r1, [r7, #7]
 80233f4:	2300      	movs	r3, #0
 80233f6:	9303      	str	r3, [sp, #12]
 80233f8:	2308      	movs	r3, #8
 80233fa:	9302      	str	r3, [sp, #8]
 80233fc:	68bb      	ldr	r3, [r7, #8]
 80233fe:	9301      	str	r3, [sp, #4]
 8023400:	2300      	movs	r3, #0
 8023402:	9300      	str	r3, [sp, #0]
 8023404:	2300      	movs	r3, #0
 8023406:	2200      	movs	r2, #0
 8023408:	68f8      	ldr	r0, [r7, #12]
 802340a:	f006 fff0 	bl	802a3ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 802340e:	2300      	movs	r3, #0
}
 8023410:	4618      	mov	r0, r3
 8023412:	3710      	adds	r7, #16
 8023414:	46bd      	mov	sp, r7
 8023416:	bd80      	pop	{r7, pc}

08023418 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8023418:	b580      	push	{r7, lr}
 802341a:	b088      	sub	sp, #32
 802341c:	af04      	add	r7, sp, #16
 802341e:	60f8      	str	r0, [r7, #12]
 8023420:	60b9      	str	r1, [r7, #8]
 8023422:	4611      	mov	r1, r2
 8023424:	461a      	mov	r2, r3
 8023426:	460b      	mov	r3, r1
 8023428:	80fb      	strh	r3, [r7, #6]
 802342a:	4613      	mov	r3, r2
 802342c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802342e:	68fb      	ldr	r3, [r7, #12]
 8023430:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8023434:	2b00      	cmp	r3, #0
 8023436:	d001      	beq.n	802343c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8023438:	2300      	movs	r3, #0
 802343a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802343c:	7979      	ldrb	r1, [r7, #5]
 802343e:	7e3b      	ldrb	r3, [r7, #24]
 8023440:	9303      	str	r3, [sp, #12]
 8023442:	88fb      	ldrh	r3, [r7, #6]
 8023444:	9302      	str	r3, [sp, #8]
 8023446:	68bb      	ldr	r3, [r7, #8]
 8023448:	9301      	str	r3, [sp, #4]
 802344a:	2301      	movs	r3, #1
 802344c:	9300      	str	r3, [sp, #0]
 802344e:	2300      	movs	r3, #0
 8023450:	2200      	movs	r2, #0
 8023452:	68f8      	ldr	r0, [r7, #12]
 8023454:	f006 ffcb 	bl	802a3ee <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8023458:	2300      	movs	r3, #0
}
 802345a:	4618      	mov	r0, r3
 802345c:	3710      	adds	r7, #16
 802345e:	46bd      	mov	sp, r7
 8023460:	bd80      	pop	{r7, pc}

08023462 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8023462:	b580      	push	{r7, lr}
 8023464:	b088      	sub	sp, #32
 8023466:	af04      	add	r7, sp, #16
 8023468:	60f8      	str	r0, [r7, #12]
 802346a:	60b9      	str	r1, [r7, #8]
 802346c:	4611      	mov	r1, r2
 802346e:	461a      	mov	r2, r3
 8023470:	460b      	mov	r3, r1
 8023472:	80fb      	strh	r3, [r7, #6]
 8023474:	4613      	mov	r3, r2
 8023476:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8023478:	7979      	ldrb	r1, [r7, #5]
 802347a:	2300      	movs	r3, #0
 802347c:	9303      	str	r3, [sp, #12]
 802347e:	88fb      	ldrh	r3, [r7, #6]
 8023480:	9302      	str	r3, [sp, #8]
 8023482:	68bb      	ldr	r3, [r7, #8]
 8023484:	9301      	str	r3, [sp, #4]
 8023486:	2301      	movs	r3, #1
 8023488:	9300      	str	r3, [sp, #0]
 802348a:	2300      	movs	r3, #0
 802348c:	2201      	movs	r2, #1
 802348e:	68f8      	ldr	r0, [r7, #12]
 8023490:	f006 ffad 	bl	802a3ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8023494:	2300      	movs	r3, #0

}
 8023496:	4618      	mov	r0, r3
 8023498:	3710      	adds	r7, #16
 802349a:	46bd      	mov	sp, r7
 802349c:	bd80      	pop	{r7, pc}

0802349e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 802349e:	b580      	push	{r7, lr}
 80234a0:	b088      	sub	sp, #32
 80234a2:	af04      	add	r7, sp, #16
 80234a4:	60f8      	str	r0, [r7, #12]
 80234a6:	60b9      	str	r1, [r7, #8]
 80234a8:	4611      	mov	r1, r2
 80234aa:	461a      	mov	r2, r3
 80234ac:	460b      	mov	r3, r1
 80234ae:	80fb      	strh	r3, [r7, #6]
 80234b0:	4613      	mov	r3, r2
 80234b2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80234b4:	68fb      	ldr	r3, [r7, #12]
 80234b6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80234ba:	2b00      	cmp	r3, #0
 80234bc:	d001      	beq.n	80234c2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80234be:	2300      	movs	r3, #0
 80234c0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80234c2:	7979      	ldrb	r1, [r7, #5]
 80234c4:	7e3b      	ldrb	r3, [r7, #24]
 80234c6:	9303      	str	r3, [sp, #12]
 80234c8:	88fb      	ldrh	r3, [r7, #6]
 80234ca:	9302      	str	r3, [sp, #8]
 80234cc:	68bb      	ldr	r3, [r7, #8]
 80234ce:	9301      	str	r3, [sp, #4]
 80234d0:	2301      	movs	r3, #1
 80234d2:	9300      	str	r3, [sp, #0]
 80234d4:	2302      	movs	r3, #2
 80234d6:	2200      	movs	r2, #0
 80234d8:	68f8      	ldr	r0, [r7, #12]
 80234da:	f006 ff88 	bl	802a3ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80234de:	2300      	movs	r3, #0
}
 80234e0:	4618      	mov	r0, r3
 80234e2:	3710      	adds	r7, #16
 80234e4:	46bd      	mov	sp, r7
 80234e6:	bd80      	pop	{r7, pc}

080234e8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80234e8:	b580      	push	{r7, lr}
 80234ea:	b088      	sub	sp, #32
 80234ec:	af04      	add	r7, sp, #16
 80234ee:	60f8      	str	r0, [r7, #12]
 80234f0:	60b9      	str	r1, [r7, #8]
 80234f2:	4611      	mov	r1, r2
 80234f4:	461a      	mov	r2, r3
 80234f6:	460b      	mov	r3, r1
 80234f8:	80fb      	strh	r3, [r7, #6]
 80234fa:	4613      	mov	r3, r2
 80234fc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80234fe:	7979      	ldrb	r1, [r7, #5]
 8023500:	2300      	movs	r3, #0
 8023502:	9303      	str	r3, [sp, #12]
 8023504:	88fb      	ldrh	r3, [r7, #6]
 8023506:	9302      	str	r3, [sp, #8]
 8023508:	68bb      	ldr	r3, [r7, #8]
 802350a:	9301      	str	r3, [sp, #4]
 802350c:	2301      	movs	r3, #1
 802350e:	9300      	str	r3, [sp, #0]
 8023510:	2302      	movs	r3, #2
 8023512:	2201      	movs	r2, #1
 8023514:	68f8      	ldr	r0, [r7, #12]
 8023516:	f006 ff6a 	bl	802a3ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802351a:	2300      	movs	r3, #0
}
 802351c:	4618      	mov	r0, r3
 802351e:	3710      	adds	r7, #16
 8023520:	46bd      	mov	sp, r7
 8023522:	bd80      	pop	{r7, pc}

08023524 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8023524:	b580      	push	{r7, lr}
 8023526:	b086      	sub	sp, #24
 8023528:	af04      	add	r7, sp, #16
 802352a:	6078      	str	r0, [r7, #4]
 802352c:	4608      	mov	r0, r1
 802352e:	4611      	mov	r1, r2
 8023530:	461a      	mov	r2, r3
 8023532:	4603      	mov	r3, r0
 8023534:	70fb      	strb	r3, [r7, #3]
 8023536:	460b      	mov	r3, r1
 8023538:	70bb      	strb	r3, [r7, #2]
 802353a:	4613      	mov	r3, r2
 802353c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 802353e:	7878      	ldrb	r0, [r7, #1]
 8023540:	78ba      	ldrb	r2, [r7, #2]
 8023542:	78f9      	ldrb	r1, [r7, #3]
 8023544:	8b3b      	ldrh	r3, [r7, #24]
 8023546:	9302      	str	r3, [sp, #8]
 8023548:	7d3b      	ldrb	r3, [r7, #20]
 802354a:	9301      	str	r3, [sp, #4]
 802354c:	7c3b      	ldrb	r3, [r7, #16]
 802354e:	9300      	str	r3, [sp, #0]
 8023550:	4603      	mov	r3, r0
 8023552:	6878      	ldr	r0, [r7, #4]
 8023554:	f006 fefd 	bl	802a352 <USBH_LL_OpenPipe>

  return USBH_OK;
 8023558:	2300      	movs	r3, #0
}
 802355a:	4618      	mov	r0, r3
 802355c:	3708      	adds	r7, #8
 802355e:	46bd      	mov	sp, r7
 8023560:	bd80      	pop	{r7, pc}

08023562 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8023562:	b580      	push	{r7, lr}
 8023564:	b082      	sub	sp, #8
 8023566:	af00      	add	r7, sp, #0
 8023568:	6078      	str	r0, [r7, #4]
 802356a:	460b      	mov	r3, r1
 802356c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 802356e:	78fb      	ldrb	r3, [r7, #3]
 8023570:	4619      	mov	r1, r3
 8023572:	6878      	ldr	r0, [r7, #4]
 8023574:	f006 ff1c 	bl	802a3b0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8023578:	2300      	movs	r3, #0
}
 802357a:	4618      	mov	r0, r3
 802357c:	3708      	adds	r7, #8
 802357e:	46bd      	mov	sp, r7
 8023580:	bd80      	pop	{r7, pc}

08023582 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8023582:	b580      	push	{r7, lr}
 8023584:	b084      	sub	sp, #16
 8023586:	af00      	add	r7, sp, #0
 8023588:	6078      	str	r0, [r7, #4]
 802358a:	460b      	mov	r3, r1
 802358c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 802358e:	6878      	ldr	r0, [r7, #4]
 8023590:	f000 f836 	bl	8023600 <USBH_GetFreePipe>
 8023594:	4603      	mov	r3, r0
 8023596:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8023598:	89fb      	ldrh	r3, [r7, #14]
 802359a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802359e:	4293      	cmp	r3, r2
 80235a0:	d00a      	beq.n	80235b8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80235a2:	78fa      	ldrb	r2, [r7, #3]
 80235a4:	89fb      	ldrh	r3, [r7, #14]
 80235a6:	f003 030f 	and.w	r3, r3, #15
 80235aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80235ae:	6879      	ldr	r1, [r7, #4]
 80235b0:	33e0      	adds	r3, #224	@ 0xe0
 80235b2:	009b      	lsls	r3, r3, #2
 80235b4:	440b      	add	r3, r1
 80235b6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80235b8:	89fb      	ldrh	r3, [r7, #14]
 80235ba:	b2db      	uxtb	r3, r3
}
 80235bc:	4618      	mov	r0, r3
 80235be:	3710      	adds	r7, #16
 80235c0:	46bd      	mov	sp, r7
 80235c2:	bd80      	pop	{r7, pc}

080235c4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80235c4:	b480      	push	{r7}
 80235c6:	b083      	sub	sp, #12
 80235c8:	af00      	add	r7, sp, #0
 80235ca:	6078      	str	r0, [r7, #4]
 80235cc:	460b      	mov	r3, r1
 80235ce:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80235d0:	78fb      	ldrb	r3, [r7, #3]
 80235d2:	2b0f      	cmp	r3, #15
 80235d4:	d80d      	bhi.n	80235f2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80235d6:	78fb      	ldrb	r3, [r7, #3]
 80235d8:	687a      	ldr	r2, [r7, #4]
 80235da:	33e0      	adds	r3, #224	@ 0xe0
 80235dc:	009b      	lsls	r3, r3, #2
 80235de:	4413      	add	r3, r2
 80235e0:	685a      	ldr	r2, [r3, #4]
 80235e2:	78fb      	ldrb	r3, [r7, #3]
 80235e4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80235e8:	6879      	ldr	r1, [r7, #4]
 80235ea:	33e0      	adds	r3, #224	@ 0xe0
 80235ec:	009b      	lsls	r3, r3, #2
 80235ee:	440b      	add	r3, r1
 80235f0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80235f2:	2300      	movs	r3, #0
}
 80235f4:	4618      	mov	r0, r3
 80235f6:	370c      	adds	r7, #12
 80235f8:	46bd      	mov	sp, r7
 80235fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235fe:	4770      	bx	lr

08023600 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8023600:	b480      	push	{r7}
 8023602:	b085      	sub	sp, #20
 8023604:	af00      	add	r7, sp, #0
 8023606:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8023608:	2300      	movs	r3, #0
 802360a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 802360c:	2300      	movs	r3, #0
 802360e:	73fb      	strb	r3, [r7, #15]
 8023610:	e00f      	b.n	8023632 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8023612:	7bfb      	ldrb	r3, [r7, #15]
 8023614:	687a      	ldr	r2, [r7, #4]
 8023616:	33e0      	adds	r3, #224	@ 0xe0
 8023618:	009b      	lsls	r3, r3, #2
 802361a:	4413      	add	r3, r2
 802361c:	685b      	ldr	r3, [r3, #4]
 802361e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8023622:	2b00      	cmp	r3, #0
 8023624:	d102      	bne.n	802362c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8023626:	7bfb      	ldrb	r3, [r7, #15]
 8023628:	b29b      	uxth	r3, r3
 802362a:	e007      	b.n	802363c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 802362c:	7bfb      	ldrb	r3, [r7, #15]
 802362e:	3301      	adds	r3, #1
 8023630:	73fb      	strb	r3, [r7, #15]
 8023632:	7bfb      	ldrb	r3, [r7, #15]
 8023634:	2b0f      	cmp	r3, #15
 8023636:	d9ec      	bls.n	8023612 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8023638:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 802363c:	4618      	mov	r0, r3
 802363e:	3714      	adds	r7, #20
 8023640:	46bd      	mov	sp, r7
 8023642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023646:	4770      	bx	lr

08023648 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8023648:	b580      	push	{r7, lr}
 802364a:	b084      	sub	sp, #16
 802364c:	af00      	add	r7, sp, #0
 802364e:	4603      	mov	r3, r0
 8023650:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8023652:	79fb      	ldrb	r3, [r7, #7]
 8023654:	4a08      	ldr	r2, [pc, #32]	@ (8023678 <disk_status+0x30>)
 8023656:	009b      	lsls	r3, r3, #2
 8023658:	4413      	add	r3, r2
 802365a:	685b      	ldr	r3, [r3, #4]
 802365c:	685b      	ldr	r3, [r3, #4]
 802365e:	79fa      	ldrb	r2, [r7, #7]
 8023660:	4905      	ldr	r1, [pc, #20]	@ (8023678 <disk_status+0x30>)
 8023662:	440a      	add	r2, r1
 8023664:	7a12      	ldrb	r2, [r2, #8]
 8023666:	4610      	mov	r0, r2
 8023668:	4798      	blx	r3
 802366a:	4603      	mov	r3, r0
 802366c:	73fb      	strb	r3, [r7, #15]
  return stat;
 802366e:	7bfb      	ldrb	r3, [r7, #15]
}
 8023670:	4618      	mov	r0, r3
 8023672:	3710      	adds	r7, #16
 8023674:	46bd      	mov	sp, r7
 8023676:	bd80      	pop	{r7, pc}
 8023678:	2001d0f8 	.word	0x2001d0f8

0802367c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 802367c:	b580      	push	{r7, lr}
 802367e:	b084      	sub	sp, #16
 8023680:	af00      	add	r7, sp, #0
 8023682:	4603      	mov	r3, r0
 8023684:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8023686:	2300      	movs	r3, #0
 8023688:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 802368a:	79fb      	ldrb	r3, [r7, #7]
 802368c:	4a0d      	ldr	r2, [pc, #52]	@ (80236c4 <disk_initialize+0x48>)
 802368e:	5cd3      	ldrb	r3, [r2, r3]
 8023690:	2b00      	cmp	r3, #0
 8023692:	d111      	bne.n	80236b8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8023694:	79fb      	ldrb	r3, [r7, #7]
 8023696:	4a0b      	ldr	r2, [pc, #44]	@ (80236c4 <disk_initialize+0x48>)
 8023698:	2101      	movs	r1, #1
 802369a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 802369c:	79fb      	ldrb	r3, [r7, #7]
 802369e:	4a09      	ldr	r2, [pc, #36]	@ (80236c4 <disk_initialize+0x48>)
 80236a0:	009b      	lsls	r3, r3, #2
 80236a2:	4413      	add	r3, r2
 80236a4:	685b      	ldr	r3, [r3, #4]
 80236a6:	681b      	ldr	r3, [r3, #0]
 80236a8:	79fa      	ldrb	r2, [r7, #7]
 80236aa:	4906      	ldr	r1, [pc, #24]	@ (80236c4 <disk_initialize+0x48>)
 80236ac:	440a      	add	r2, r1
 80236ae:	7a12      	ldrb	r2, [r2, #8]
 80236b0:	4610      	mov	r0, r2
 80236b2:	4798      	blx	r3
 80236b4:	4603      	mov	r3, r0
 80236b6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80236b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80236ba:	4618      	mov	r0, r3
 80236bc:	3710      	adds	r7, #16
 80236be:	46bd      	mov	sp, r7
 80236c0:	bd80      	pop	{r7, pc}
 80236c2:	bf00      	nop
 80236c4:	2001d0f8 	.word	0x2001d0f8

080236c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80236c8:	b590      	push	{r4, r7, lr}
 80236ca:	b087      	sub	sp, #28
 80236cc:	af00      	add	r7, sp, #0
 80236ce:	60b9      	str	r1, [r7, #8]
 80236d0:	607a      	str	r2, [r7, #4]
 80236d2:	603b      	str	r3, [r7, #0]
 80236d4:	4603      	mov	r3, r0
 80236d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80236d8:	7bfb      	ldrb	r3, [r7, #15]
 80236da:	4a0a      	ldr	r2, [pc, #40]	@ (8023704 <disk_read+0x3c>)
 80236dc:	009b      	lsls	r3, r3, #2
 80236de:	4413      	add	r3, r2
 80236e0:	685b      	ldr	r3, [r3, #4]
 80236e2:	689c      	ldr	r4, [r3, #8]
 80236e4:	7bfb      	ldrb	r3, [r7, #15]
 80236e6:	4a07      	ldr	r2, [pc, #28]	@ (8023704 <disk_read+0x3c>)
 80236e8:	4413      	add	r3, r2
 80236ea:	7a18      	ldrb	r0, [r3, #8]
 80236ec:	683b      	ldr	r3, [r7, #0]
 80236ee:	687a      	ldr	r2, [r7, #4]
 80236f0:	68b9      	ldr	r1, [r7, #8]
 80236f2:	47a0      	blx	r4
 80236f4:	4603      	mov	r3, r0
 80236f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80236f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80236fa:	4618      	mov	r0, r3
 80236fc:	371c      	adds	r7, #28
 80236fe:	46bd      	mov	sp, r7
 8023700:	bd90      	pop	{r4, r7, pc}
 8023702:	bf00      	nop
 8023704:	2001d0f8 	.word	0x2001d0f8

08023708 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8023708:	b590      	push	{r4, r7, lr}
 802370a:	b087      	sub	sp, #28
 802370c:	af00      	add	r7, sp, #0
 802370e:	60b9      	str	r1, [r7, #8]
 8023710:	607a      	str	r2, [r7, #4]
 8023712:	603b      	str	r3, [r7, #0]
 8023714:	4603      	mov	r3, r0
 8023716:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8023718:	7bfb      	ldrb	r3, [r7, #15]
 802371a:	4a0a      	ldr	r2, [pc, #40]	@ (8023744 <disk_write+0x3c>)
 802371c:	009b      	lsls	r3, r3, #2
 802371e:	4413      	add	r3, r2
 8023720:	685b      	ldr	r3, [r3, #4]
 8023722:	68dc      	ldr	r4, [r3, #12]
 8023724:	7bfb      	ldrb	r3, [r7, #15]
 8023726:	4a07      	ldr	r2, [pc, #28]	@ (8023744 <disk_write+0x3c>)
 8023728:	4413      	add	r3, r2
 802372a:	7a18      	ldrb	r0, [r3, #8]
 802372c:	683b      	ldr	r3, [r7, #0]
 802372e:	687a      	ldr	r2, [r7, #4]
 8023730:	68b9      	ldr	r1, [r7, #8]
 8023732:	47a0      	blx	r4
 8023734:	4603      	mov	r3, r0
 8023736:	75fb      	strb	r3, [r7, #23]
  return res;
 8023738:	7dfb      	ldrb	r3, [r7, #23]
}
 802373a:	4618      	mov	r0, r3
 802373c:	371c      	adds	r7, #28
 802373e:	46bd      	mov	sp, r7
 8023740:	bd90      	pop	{r4, r7, pc}
 8023742:	bf00      	nop
 8023744:	2001d0f8 	.word	0x2001d0f8

08023748 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8023748:	b580      	push	{r7, lr}
 802374a:	b084      	sub	sp, #16
 802374c:	af00      	add	r7, sp, #0
 802374e:	4603      	mov	r3, r0
 8023750:	603a      	str	r2, [r7, #0]
 8023752:	71fb      	strb	r3, [r7, #7]
 8023754:	460b      	mov	r3, r1
 8023756:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8023758:	79fb      	ldrb	r3, [r7, #7]
 802375a:	4a09      	ldr	r2, [pc, #36]	@ (8023780 <disk_ioctl+0x38>)
 802375c:	009b      	lsls	r3, r3, #2
 802375e:	4413      	add	r3, r2
 8023760:	685b      	ldr	r3, [r3, #4]
 8023762:	691b      	ldr	r3, [r3, #16]
 8023764:	79fa      	ldrb	r2, [r7, #7]
 8023766:	4906      	ldr	r1, [pc, #24]	@ (8023780 <disk_ioctl+0x38>)
 8023768:	440a      	add	r2, r1
 802376a:	7a10      	ldrb	r0, [r2, #8]
 802376c:	79b9      	ldrb	r1, [r7, #6]
 802376e:	683a      	ldr	r2, [r7, #0]
 8023770:	4798      	blx	r3
 8023772:	4603      	mov	r3, r0
 8023774:	73fb      	strb	r3, [r7, #15]
  return res;
 8023776:	7bfb      	ldrb	r3, [r7, #15]
}
 8023778:	4618      	mov	r0, r3
 802377a:	3710      	adds	r7, #16
 802377c:	46bd      	mov	sp, r7
 802377e:	bd80      	pop	{r7, pc}
 8023780:	2001d0f8 	.word	0x2001d0f8

08023784 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8023784:	b480      	push	{r7}
 8023786:	b085      	sub	sp, #20
 8023788:	af00      	add	r7, sp, #0
 802378a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 802378c:	687b      	ldr	r3, [r7, #4]
 802378e:	3301      	adds	r3, #1
 8023790:	781b      	ldrb	r3, [r3, #0]
 8023792:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8023794:	89fb      	ldrh	r3, [r7, #14]
 8023796:	021b      	lsls	r3, r3, #8
 8023798:	b21a      	sxth	r2, r3
 802379a:	687b      	ldr	r3, [r7, #4]
 802379c:	781b      	ldrb	r3, [r3, #0]
 802379e:	b21b      	sxth	r3, r3
 80237a0:	4313      	orrs	r3, r2
 80237a2:	b21b      	sxth	r3, r3
 80237a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80237a6:	89fb      	ldrh	r3, [r7, #14]
}
 80237a8:	4618      	mov	r0, r3
 80237aa:	3714      	adds	r7, #20
 80237ac:	46bd      	mov	sp, r7
 80237ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237b2:	4770      	bx	lr

080237b4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80237b4:	b480      	push	{r7}
 80237b6:	b085      	sub	sp, #20
 80237b8:	af00      	add	r7, sp, #0
 80237ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80237bc:	687b      	ldr	r3, [r7, #4]
 80237be:	3303      	adds	r3, #3
 80237c0:	781b      	ldrb	r3, [r3, #0]
 80237c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80237c4:	68fb      	ldr	r3, [r7, #12]
 80237c6:	021b      	lsls	r3, r3, #8
 80237c8:	687a      	ldr	r2, [r7, #4]
 80237ca:	3202      	adds	r2, #2
 80237cc:	7812      	ldrb	r2, [r2, #0]
 80237ce:	4313      	orrs	r3, r2
 80237d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80237d2:	68fb      	ldr	r3, [r7, #12]
 80237d4:	021b      	lsls	r3, r3, #8
 80237d6:	687a      	ldr	r2, [r7, #4]
 80237d8:	3201      	adds	r2, #1
 80237da:	7812      	ldrb	r2, [r2, #0]
 80237dc:	4313      	orrs	r3, r2
 80237de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80237e0:	68fb      	ldr	r3, [r7, #12]
 80237e2:	021b      	lsls	r3, r3, #8
 80237e4:	687a      	ldr	r2, [r7, #4]
 80237e6:	7812      	ldrb	r2, [r2, #0]
 80237e8:	4313      	orrs	r3, r2
 80237ea:	60fb      	str	r3, [r7, #12]
	return rv;
 80237ec:	68fb      	ldr	r3, [r7, #12]
}
 80237ee:	4618      	mov	r0, r3
 80237f0:	3714      	adds	r7, #20
 80237f2:	46bd      	mov	sp, r7
 80237f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237f8:	4770      	bx	lr

080237fa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80237fa:	b480      	push	{r7}
 80237fc:	b083      	sub	sp, #12
 80237fe:	af00      	add	r7, sp, #0
 8023800:	6078      	str	r0, [r7, #4]
 8023802:	460b      	mov	r3, r1
 8023804:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8023806:	687b      	ldr	r3, [r7, #4]
 8023808:	1c5a      	adds	r2, r3, #1
 802380a:	607a      	str	r2, [r7, #4]
 802380c:	887a      	ldrh	r2, [r7, #2]
 802380e:	b2d2      	uxtb	r2, r2
 8023810:	701a      	strb	r2, [r3, #0]
 8023812:	887b      	ldrh	r3, [r7, #2]
 8023814:	0a1b      	lsrs	r3, r3, #8
 8023816:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8023818:	687b      	ldr	r3, [r7, #4]
 802381a:	1c5a      	adds	r2, r3, #1
 802381c:	607a      	str	r2, [r7, #4]
 802381e:	887a      	ldrh	r2, [r7, #2]
 8023820:	b2d2      	uxtb	r2, r2
 8023822:	701a      	strb	r2, [r3, #0]
}
 8023824:	bf00      	nop
 8023826:	370c      	adds	r7, #12
 8023828:	46bd      	mov	sp, r7
 802382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802382e:	4770      	bx	lr

08023830 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8023830:	b480      	push	{r7}
 8023832:	b083      	sub	sp, #12
 8023834:	af00      	add	r7, sp, #0
 8023836:	6078      	str	r0, [r7, #4]
 8023838:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 802383a:	687b      	ldr	r3, [r7, #4]
 802383c:	1c5a      	adds	r2, r3, #1
 802383e:	607a      	str	r2, [r7, #4]
 8023840:	683a      	ldr	r2, [r7, #0]
 8023842:	b2d2      	uxtb	r2, r2
 8023844:	701a      	strb	r2, [r3, #0]
 8023846:	683b      	ldr	r3, [r7, #0]
 8023848:	0a1b      	lsrs	r3, r3, #8
 802384a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 802384c:	687b      	ldr	r3, [r7, #4]
 802384e:	1c5a      	adds	r2, r3, #1
 8023850:	607a      	str	r2, [r7, #4]
 8023852:	683a      	ldr	r2, [r7, #0]
 8023854:	b2d2      	uxtb	r2, r2
 8023856:	701a      	strb	r2, [r3, #0]
 8023858:	683b      	ldr	r3, [r7, #0]
 802385a:	0a1b      	lsrs	r3, r3, #8
 802385c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 802385e:	687b      	ldr	r3, [r7, #4]
 8023860:	1c5a      	adds	r2, r3, #1
 8023862:	607a      	str	r2, [r7, #4]
 8023864:	683a      	ldr	r2, [r7, #0]
 8023866:	b2d2      	uxtb	r2, r2
 8023868:	701a      	strb	r2, [r3, #0]
 802386a:	683b      	ldr	r3, [r7, #0]
 802386c:	0a1b      	lsrs	r3, r3, #8
 802386e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8023870:	687b      	ldr	r3, [r7, #4]
 8023872:	1c5a      	adds	r2, r3, #1
 8023874:	607a      	str	r2, [r7, #4]
 8023876:	683a      	ldr	r2, [r7, #0]
 8023878:	b2d2      	uxtb	r2, r2
 802387a:	701a      	strb	r2, [r3, #0]
}
 802387c:	bf00      	nop
 802387e:	370c      	adds	r7, #12
 8023880:	46bd      	mov	sp, r7
 8023882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023886:	4770      	bx	lr

08023888 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8023888:	b480      	push	{r7}
 802388a:	b087      	sub	sp, #28
 802388c:	af00      	add	r7, sp, #0
 802388e:	60f8      	str	r0, [r7, #12]
 8023890:	60b9      	str	r1, [r7, #8]
 8023892:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8023894:	68fb      	ldr	r3, [r7, #12]
 8023896:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8023898:	68bb      	ldr	r3, [r7, #8]
 802389a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 802389c:	687b      	ldr	r3, [r7, #4]
 802389e:	2b00      	cmp	r3, #0
 80238a0:	d00d      	beq.n	80238be <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80238a2:	693a      	ldr	r2, [r7, #16]
 80238a4:	1c53      	adds	r3, r2, #1
 80238a6:	613b      	str	r3, [r7, #16]
 80238a8:	697b      	ldr	r3, [r7, #20]
 80238aa:	1c59      	adds	r1, r3, #1
 80238ac:	6179      	str	r1, [r7, #20]
 80238ae:	7812      	ldrb	r2, [r2, #0]
 80238b0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80238b2:	687b      	ldr	r3, [r7, #4]
 80238b4:	3b01      	subs	r3, #1
 80238b6:	607b      	str	r3, [r7, #4]
 80238b8:	687b      	ldr	r3, [r7, #4]
 80238ba:	2b00      	cmp	r3, #0
 80238bc:	d1f1      	bne.n	80238a2 <mem_cpy+0x1a>
	}
}
 80238be:	bf00      	nop
 80238c0:	371c      	adds	r7, #28
 80238c2:	46bd      	mov	sp, r7
 80238c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238c8:	4770      	bx	lr

080238ca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80238ca:	b480      	push	{r7}
 80238cc:	b087      	sub	sp, #28
 80238ce:	af00      	add	r7, sp, #0
 80238d0:	60f8      	str	r0, [r7, #12]
 80238d2:	60b9      	str	r1, [r7, #8]
 80238d4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80238d6:	68fb      	ldr	r3, [r7, #12]
 80238d8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80238da:	697b      	ldr	r3, [r7, #20]
 80238dc:	1c5a      	adds	r2, r3, #1
 80238de:	617a      	str	r2, [r7, #20]
 80238e0:	68ba      	ldr	r2, [r7, #8]
 80238e2:	b2d2      	uxtb	r2, r2
 80238e4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80238e6:	687b      	ldr	r3, [r7, #4]
 80238e8:	3b01      	subs	r3, #1
 80238ea:	607b      	str	r3, [r7, #4]
 80238ec:	687b      	ldr	r3, [r7, #4]
 80238ee:	2b00      	cmp	r3, #0
 80238f0:	d1f3      	bne.n	80238da <mem_set+0x10>
}
 80238f2:	bf00      	nop
 80238f4:	bf00      	nop
 80238f6:	371c      	adds	r7, #28
 80238f8:	46bd      	mov	sp, r7
 80238fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238fe:	4770      	bx	lr

08023900 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8023900:	b480      	push	{r7}
 8023902:	b089      	sub	sp, #36	@ 0x24
 8023904:	af00      	add	r7, sp, #0
 8023906:	60f8      	str	r0, [r7, #12]
 8023908:	60b9      	str	r1, [r7, #8]
 802390a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 802390c:	68fb      	ldr	r3, [r7, #12]
 802390e:	61fb      	str	r3, [r7, #28]
 8023910:	68bb      	ldr	r3, [r7, #8]
 8023912:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8023914:	2300      	movs	r3, #0
 8023916:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8023918:	69fb      	ldr	r3, [r7, #28]
 802391a:	1c5a      	adds	r2, r3, #1
 802391c:	61fa      	str	r2, [r7, #28]
 802391e:	781b      	ldrb	r3, [r3, #0]
 8023920:	4619      	mov	r1, r3
 8023922:	69bb      	ldr	r3, [r7, #24]
 8023924:	1c5a      	adds	r2, r3, #1
 8023926:	61ba      	str	r2, [r7, #24]
 8023928:	781b      	ldrb	r3, [r3, #0]
 802392a:	1acb      	subs	r3, r1, r3
 802392c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 802392e:	687b      	ldr	r3, [r7, #4]
 8023930:	3b01      	subs	r3, #1
 8023932:	607b      	str	r3, [r7, #4]
 8023934:	687b      	ldr	r3, [r7, #4]
 8023936:	2b00      	cmp	r3, #0
 8023938:	d002      	beq.n	8023940 <mem_cmp+0x40>
 802393a:	697b      	ldr	r3, [r7, #20]
 802393c:	2b00      	cmp	r3, #0
 802393e:	d0eb      	beq.n	8023918 <mem_cmp+0x18>

	return r;
 8023940:	697b      	ldr	r3, [r7, #20]
}
 8023942:	4618      	mov	r0, r3
 8023944:	3724      	adds	r7, #36	@ 0x24
 8023946:	46bd      	mov	sp, r7
 8023948:	f85d 7b04 	ldr.w	r7, [sp], #4
 802394c:	4770      	bx	lr

0802394e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 802394e:	b480      	push	{r7}
 8023950:	b083      	sub	sp, #12
 8023952:	af00      	add	r7, sp, #0
 8023954:	6078      	str	r0, [r7, #4]
 8023956:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8023958:	e002      	b.n	8023960 <chk_chr+0x12>
 802395a:	687b      	ldr	r3, [r7, #4]
 802395c:	3301      	adds	r3, #1
 802395e:	607b      	str	r3, [r7, #4]
 8023960:	687b      	ldr	r3, [r7, #4]
 8023962:	781b      	ldrb	r3, [r3, #0]
 8023964:	2b00      	cmp	r3, #0
 8023966:	d005      	beq.n	8023974 <chk_chr+0x26>
 8023968:	687b      	ldr	r3, [r7, #4]
 802396a:	781b      	ldrb	r3, [r3, #0]
 802396c:	461a      	mov	r2, r3
 802396e:	683b      	ldr	r3, [r7, #0]
 8023970:	4293      	cmp	r3, r2
 8023972:	d1f2      	bne.n	802395a <chk_chr+0xc>
	return *str;
 8023974:	687b      	ldr	r3, [r7, #4]
 8023976:	781b      	ldrb	r3, [r3, #0]
}
 8023978:	4618      	mov	r0, r3
 802397a:	370c      	adds	r7, #12
 802397c:	46bd      	mov	sp, r7
 802397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023982:	4770      	bx	lr

08023984 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8023984:	b580      	push	{r7, lr}
 8023986:	b082      	sub	sp, #8
 8023988:	af00      	add	r7, sp, #0
 802398a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 802398c:	687b      	ldr	r3, [r7, #4]
 802398e:	2b00      	cmp	r3, #0
 8023990:	d009      	beq.n	80239a6 <lock_fs+0x22>
 8023992:	687b      	ldr	r3, [r7, #4]
 8023994:	691b      	ldr	r3, [r3, #16]
 8023996:	4618      	mov	r0, r3
 8023998:	f002 fbf4 	bl	8026184 <ff_req_grant>
 802399c:	4603      	mov	r3, r0
 802399e:	2b00      	cmp	r3, #0
 80239a0:	d001      	beq.n	80239a6 <lock_fs+0x22>
 80239a2:	2301      	movs	r3, #1
 80239a4:	e000      	b.n	80239a8 <lock_fs+0x24>
 80239a6:	2300      	movs	r3, #0
}
 80239a8:	4618      	mov	r0, r3
 80239aa:	3708      	adds	r7, #8
 80239ac:	46bd      	mov	sp, r7
 80239ae:	bd80      	pop	{r7, pc}

080239b0 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80239b0:	b580      	push	{r7, lr}
 80239b2:	b082      	sub	sp, #8
 80239b4:	af00      	add	r7, sp, #0
 80239b6:	6078      	str	r0, [r7, #4]
 80239b8:	460b      	mov	r3, r1
 80239ba:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80239bc:	687b      	ldr	r3, [r7, #4]
 80239be:	2b00      	cmp	r3, #0
 80239c0:	d00d      	beq.n	80239de <unlock_fs+0x2e>
 80239c2:	78fb      	ldrb	r3, [r7, #3]
 80239c4:	2b0c      	cmp	r3, #12
 80239c6:	d00a      	beq.n	80239de <unlock_fs+0x2e>
 80239c8:	78fb      	ldrb	r3, [r7, #3]
 80239ca:	2b0b      	cmp	r3, #11
 80239cc:	d007      	beq.n	80239de <unlock_fs+0x2e>
 80239ce:	78fb      	ldrb	r3, [r7, #3]
 80239d0:	2b0f      	cmp	r3, #15
 80239d2:	d004      	beq.n	80239de <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80239d4:	687b      	ldr	r3, [r7, #4]
 80239d6:	691b      	ldr	r3, [r3, #16]
 80239d8:	4618      	mov	r0, r3
 80239da:	f002 fbe8 	bl	80261ae <ff_rel_grant>
	}
}
 80239de:	bf00      	nop
 80239e0:	3708      	adds	r7, #8
 80239e2:	46bd      	mov	sp, r7
 80239e4:	bd80      	pop	{r7, pc}
	...

080239e8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80239e8:	b480      	push	{r7}
 80239ea:	b085      	sub	sp, #20
 80239ec:	af00      	add	r7, sp, #0
 80239ee:	6078      	str	r0, [r7, #4]
 80239f0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80239f2:	2300      	movs	r3, #0
 80239f4:	60bb      	str	r3, [r7, #8]
 80239f6:	68bb      	ldr	r3, [r7, #8]
 80239f8:	60fb      	str	r3, [r7, #12]
 80239fa:	e029      	b.n	8023a50 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80239fc:	4a27      	ldr	r2, [pc, #156]	@ (8023a9c <chk_lock+0xb4>)
 80239fe:	68fb      	ldr	r3, [r7, #12]
 8023a00:	011b      	lsls	r3, r3, #4
 8023a02:	4413      	add	r3, r2
 8023a04:	681b      	ldr	r3, [r3, #0]
 8023a06:	2b00      	cmp	r3, #0
 8023a08:	d01d      	beq.n	8023a46 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8023a0a:	4a24      	ldr	r2, [pc, #144]	@ (8023a9c <chk_lock+0xb4>)
 8023a0c:	68fb      	ldr	r3, [r7, #12]
 8023a0e:	011b      	lsls	r3, r3, #4
 8023a10:	4413      	add	r3, r2
 8023a12:	681a      	ldr	r2, [r3, #0]
 8023a14:	687b      	ldr	r3, [r7, #4]
 8023a16:	681b      	ldr	r3, [r3, #0]
 8023a18:	429a      	cmp	r2, r3
 8023a1a:	d116      	bne.n	8023a4a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8023a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8023a9c <chk_lock+0xb4>)
 8023a1e:	68fb      	ldr	r3, [r7, #12]
 8023a20:	011b      	lsls	r3, r3, #4
 8023a22:	4413      	add	r3, r2
 8023a24:	3304      	adds	r3, #4
 8023a26:	681a      	ldr	r2, [r3, #0]
 8023a28:	687b      	ldr	r3, [r7, #4]
 8023a2a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8023a2c:	429a      	cmp	r2, r3
 8023a2e:	d10c      	bne.n	8023a4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8023a30:	4a1a      	ldr	r2, [pc, #104]	@ (8023a9c <chk_lock+0xb4>)
 8023a32:	68fb      	ldr	r3, [r7, #12]
 8023a34:	011b      	lsls	r3, r3, #4
 8023a36:	4413      	add	r3, r2
 8023a38:	3308      	adds	r3, #8
 8023a3a:	681a      	ldr	r2, [r3, #0]
 8023a3c:	687b      	ldr	r3, [r7, #4]
 8023a3e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8023a40:	429a      	cmp	r2, r3
 8023a42:	d102      	bne.n	8023a4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8023a44:	e007      	b.n	8023a56 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8023a46:	2301      	movs	r3, #1
 8023a48:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8023a4a:	68fb      	ldr	r3, [r7, #12]
 8023a4c:	3301      	adds	r3, #1
 8023a4e:	60fb      	str	r3, [r7, #12]
 8023a50:	68fb      	ldr	r3, [r7, #12]
 8023a52:	2b01      	cmp	r3, #1
 8023a54:	d9d2      	bls.n	80239fc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8023a56:	68fb      	ldr	r3, [r7, #12]
 8023a58:	2b02      	cmp	r3, #2
 8023a5a:	d109      	bne.n	8023a70 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8023a5c:	68bb      	ldr	r3, [r7, #8]
 8023a5e:	2b00      	cmp	r3, #0
 8023a60:	d102      	bne.n	8023a68 <chk_lock+0x80>
 8023a62:	683b      	ldr	r3, [r7, #0]
 8023a64:	2b02      	cmp	r3, #2
 8023a66:	d101      	bne.n	8023a6c <chk_lock+0x84>
 8023a68:	2300      	movs	r3, #0
 8023a6a:	e010      	b.n	8023a8e <chk_lock+0xa6>
 8023a6c:	2312      	movs	r3, #18
 8023a6e:	e00e      	b.n	8023a8e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8023a70:	683b      	ldr	r3, [r7, #0]
 8023a72:	2b00      	cmp	r3, #0
 8023a74:	d108      	bne.n	8023a88 <chk_lock+0xa0>
 8023a76:	4a09      	ldr	r2, [pc, #36]	@ (8023a9c <chk_lock+0xb4>)
 8023a78:	68fb      	ldr	r3, [r7, #12]
 8023a7a:	011b      	lsls	r3, r3, #4
 8023a7c:	4413      	add	r3, r2
 8023a7e:	330c      	adds	r3, #12
 8023a80:	881b      	ldrh	r3, [r3, #0]
 8023a82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8023a86:	d101      	bne.n	8023a8c <chk_lock+0xa4>
 8023a88:	2310      	movs	r3, #16
 8023a8a:	e000      	b.n	8023a8e <chk_lock+0xa6>
 8023a8c:	2300      	movs	r3, #0
}
 8023a8e:	4618      	mov	r0, r3
 8023a90:	3714      	adds	r7, #20
 8023a92:	46bd      	mov	sp, r7
 8023a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a98:	4770      	bx	lr
 8023a9a:	bf00      	nop
 8023a9c:	2001d0d8 	.word	0x2001d0d8

08023aa0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8023aa0:	b480      	push	{r7}
 8023aa2:	b083      	sub	sp, #12
 8023aa4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8023aa6:	2300      	movs	r3, #0
 8023aa8:	607b      	str	r3, [r7, #4]
 8023aaa:	e002      	b.n	8023ab2 <enq_lock+0x12>
 8023aac:	687b      	ldr	r3, [r7, #4]
 8023aae:	3301      	adds	r3, #1
 8023ab0:	607b      	str	r3, [r7, #4]
 8023ab2:	687b      	ldr	r3, [r7, #4]
 8023ab4:	2b01      	cmp	r3, #1
 8023ab6:	d806      	bhi.n	8023ac6 <enq_lock+0x26>
 8023ab8:	4a09      	ldr	r2, [pc, #36]	@ (8023ae0 <enq_lock+0x40>)
 8023aba:	687b      	ldr	r3, [r7, #4]
 8023abc:	011b      	lsls	r3, r3, #4
 8023abe:	4413      	add	r3, r2
 8023ac0:	681b      	ldr	r3, [r3, #0]
 8023ac2:	2b00      	cmp	r3, #0
 8023ac4:	d1f2      	bne.n	8023aac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8023ac6:	687b      	ldr	r3, [r7, #4]
 8023ac8:	2b02      	cmp	r3, #2
 8023aca:	bf14      	ite	ne
 8023acc:	2301      	movne	r3, #1
 8023ace:	2300      	moveq	r3, #0
 8023ad0:	b2db      	uxtb	r3, r3
}
 8023ad2:	4618      	mov	r0, r3
 8023ad4:	370c      	adds	r7, #12
 8023ad6:	46bd      	mov	sp, r7
 8023ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023adc:	4770      	bx	lr
 8023ade:	bf00      	nop
 8023ae0:	2001d0d8 	.word	0x2001d0d8

08023ae4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8023ae4:	b480      	push	{r7}
 8023ae6:	b085      	sub	sp, #20
 8023ae8:	af00      	add	r7, sp, #0
 8023aea:	6078      	str	r0, [r7, #4]
 8023aec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8023aee:	2300      	movs	r3, #0
 8023af0:	60fb      	str	r3, [r7, #12]
 8023af2:	e01f      	b.n	8023b34 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8023af4:	4a41      	ldr	r2, [pc, #260]	@ (8023bfc <inc_lock+0x118>)
 8023af6:	68fb      	ldr	r3, [r7, #12]
 8023af8:	011b      	lsls	r3, r3, #4
 8023afa:	4413      	add	r3, r2
 8023afc:	681a      	ldr	r2, [r3, #0]
 8023afe:	687b      	ldr	r3, [r7, #4]
 8023b00:	681b      	ldr	r3, [r3, #0]
 8023b02:	429a      	cmp	r2, r3
 8023b04:	d113      	bne.n	8023b2e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8023b06:	4a3d      	ldr	r2, [pc, #244]	@ (8023bfc <inc_lock+0x118>)
 8023b08:	68fb      	ldr	r3, [r7, #12]
 8023b0a:	011b      	lsls	r3, r3, #4
 8023b0c:	4413      	add	r3, r2
 8023b0e:	3304      	adds	r3, #4
 8023b10:	681a      	ldr	r2, [r3, #0]
 8023b12:	687b      	ldr	r3, [r7, #4]
 8023b14:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8023b16:	429a      	cmp	r2, r3
 8023b18:	d109      	bne.n	8023b2e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8023b1a:	4a38      	ldr	r2, [pc, #224]	@ (8023bfc <inc_lock+0x118>)
 8023b1c:	68fb      	ldr	r3, [r7, #12]
 8023b1e:	011b      	lsls	r3, r3, #4
 8023b20:	4413      	add	r3, r2
 8023b22:	3308      	adds	r3, #8
 8023b24:	681a      	ldr	r2, [r3, #0]
 8023b26:	687b      	ldr	r3, [r7, #4]
 8023b28:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8023b2a:	429a      	cmp	r2, r3
 8023b2c:	d006      	beq.n	8023b3c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8023b2e:	68fb      	ldr	r3, [r7, #12]
 8023b30:	3301      	adds	r3, #1
 8023b32:	60fb      	str	r3, [r7, #12]
 8023b34:	68fb      	ldr	r3, [r7, #12]
 8023b36:	2b01      	cmp	r3, #1
 8023b38:	d9dc      	bls.n	8023af4 <inc_lock+0x10>
 8023b3a:	e000      	b.n	8023b3e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8023b3c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8023b3e:	68fb      	ldr	r3, [r7, #12]
 8023b40:	2b02      	cmp	r3, #2
 8023b42:	d132      	bne.n	8023baa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8023b44:	2300      	movs	r3, #0
 8023b46:	60fb      	str	r3, [r7, #12]
 8023b48:	e002      	b.n	8023b50 <inc_lock+0x6c>
 8023b4a:	68fb      	ldr	r3, [r7, #12]
 8023b4c:	3301      	adds	r3, #1
 8023b4e:	60fb      	str	r3, [r7, #12]
 8023b50:	68fb      	ldr	r3, [r7, #12]
 8023b52:	2b01      	cmp	r3, #1
 8023b54:	d806      	bhi.n	8023b64 <inc_lock+0x80>
 8023b56:	4a29      	ldr	r2, [pc, #164]	@ (8023bfc <inc_lock+0x118>)
 8023b58:	68fb      	ldr	r3, [r7, #12]
 8023b5a:	011b      	lsls	r3, r3, #4
 8023b5c:	4413      	add	r3, r2
 8023b5e:	681b      	ldr	r3, [r3, #0]
 8023b60:	2b00      	cmp	r3, #0
 8023b62:	d1f2      	bne.n	8023b4a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8023b64:	68fb      	ldr	r3, [r7, #12]
 8023b66:	2b02      	cmp	r3, #2
 8023b68:	d101      	bne.n	8023b6e <inc_lock+0x8a>
 8023b6a:	2300      	movs	r3, #0
 8023b6c:	e040      	b.n	8023bf0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8023b6e:	687b      	ldr	r3, [r7, #4]
 8023b70:	681a      	ldr	r2, [r3, #0]
 8023b72:	4922      	ldr	r1, [pc, #136]	@ (8023bfc <inc_lock+0x118>)
 8023b74:	68fb      	ldr	r3, [r7, #12]
 8023b76:	011b      	lsls	r3, r3, #4
 8023b78:	440b      	add	r3, r1
 8023b7a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8023b7c:	687b      	ldr	r3, [r7, #4]
 8023b7e:	689a      	ldr	r2, [r3, #8]
 8023b80:	491e      	ldr	r1, [pc, #120]	@ (8023bfc <inc_lock+0x118>)
 8023b82:	68fb      	ldr	r3, [r7, #12]
 8023b84:	011b      	lsls	r3, r3, #4
 8023b86:	440b      	add	r3, r1
 8023b88:	3304      	adds	r3, #4
 8023b8a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8023b8c:	687b      	ldr	r3, [r7, #4]
 8023b8e:	695a      	ldr	r2, [r3, #20]
 8023b90:	491a      	ldr	r1, [pc, #104]	@ (8023bfc <inc_lock+0x118>)
 8023b92:	68fb      	ldr	r3, [r7, #12]
 8023b94:	011b      	lsls	r3, r3, #4
 8023b96:	440b      	add	r3, r1
 8023b98:	3308      	adds	r3, #8
 8023b9a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8023b9c:	4a17      	ldr	r2, [pc, #92]	@ (8023bfc <inc_lock+0x118>)
 8023b9e:	68fb      	ldr	r3, [r7, #12]
 8023ba0:	011b      	lsls	r3, r3, #4
 8023ba2:	4413      	add	r3, r2
 8023ba4:	330c      	adds	r3, #12
 8023ba6:	2200      	movs	r2, #0
 8023ba8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8023baa:	683b      	ldr	r3, [r7, #0]
 8023bac:	2b00      	cmp	r3, #0
 8023bae:	d009      	beq.n	8023bc4 <inc_lock+0xe0>
 8023bb0:	4a12      	ldr	r2, [pc, #72]	@ (8023bfc <inc_lock+0x118>)
 8023bb2:	68fb      	ldr	r3, [r7, #12]
 8023bb4:	011b      	lsls	r3, r3, #4
 8023bb6:	4413      	add	r3, r2
 8023bb8:	330c      	adds	r3, #12
 8023bba:	881b      	ldrh	r3, [r3, #0]
 8023bbc:	2b00      	cmp	r3, #0
 8023bbe:	d001      	beq.n	8023bc4 <inc_lock+0xe0>
 8023bc0:	2300      	movs	r3, #0
 8023bc2:	e015      	b.n	8023bf0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8023bc4:	683b      	ldr	r3, [r7, #0]
 8023bc6:	2b00      	cmp	r3, #0
 8023bc8:	d108      	bne.n	8023bdc <inc_lock+0xf8>
 8023bca:	4a0c      	ldr	r2, [pc, #48]	@ (8023bfc <inc_lock+0x118>)
 8023bcc:	68fb      	ldr	r3, [r7, #12]
 8023bce:	011b      	lsls	r3, r3, #4
 8023bd0:	4413      	add	r3, r2
 8023bd2:	330c      	adds	r3, #12
 8023bd4:	881b      	ldrh	r3, [r3, #0]
 8023bd6:	3301      	adds	r3, #1
 8023bd8:	b29a      	uxth	r2, r3
 8023bda:	e001      	b.n	8023be0 <inc_lock+0xfc>
 8023bdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8023be0:	4906      	ldr	r1, [pc, #24]	@ (8023bfc <inc_lock+0x118>)
 8023be2:	68fb      	ldr	r3, [r7, #12]
 8023be4:	011b      	lsls	r3, r3, #4
 8023be6:	440b      	add	r3, r1
 8023be8:	330c      	adds	r3, #12
 8023bea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8023bec:	68fb      	ldr	r3, [r7, #12]
 8023bee:	3301      	adds	r3, #1
}
 8023bf0:	4618      	mov	r0, r3
 8023bf2:	3714      	adds	r7, #20
 8023bf4:	46bd      	mov	sp, r7
 8023bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023bfa:	4770      	bx	lr
 8023bfc:	2001d0d8 	.word	0x2001d0d8

08023c00 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8023c00:	b480      	push	{r7}
 8023c02:	b085      	sub	sp, #20
 8023c04:	af00      	add	r7, sp, #0
 8023c06:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8023c08:	687b      	ldr	r3, [r7, #4]
 8023c0a:	3b01      	subs	r3, #1
 8023c0c:	607b      	str	r3, [r7, #4]
 8023c0e:	687b      	ldr	r3, [r7, #4]
 8023c10:	2b01      	cmp	r3, #1
 8023c12:	d825      	bhi.n	8023c60 <dec_lock+0x60>
		n = Files[i].ctr;
 8023c14:	4a17      	ldr	r2, [pc, #92]	@ (8023c74 <dec_lock+0x74>)
 8023c16:	687b      	ldr	r3, [r7, #4]
 8023c18:	011b      	lsls	r3, r3, #4
 8023c1a:	4413      	add	r3, r2
 8023c1c:	330c      	adds	r3, #12
 8023c1e:	881b      	ldrh	r3, [r3, #0]
 8023c20:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8023c22:	89fb      	ldrh	r3, [r7, #14]
 8023c24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8023c28:	d101      	bne.n	8023c2e <dec_lock+0x2e>
 8023c2a:	2300      	movs	r3, #0
 8023c2c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8023c2e:	89fb      	ldrh	r3, [r7, #14]
 8023c30:	2b00      	cmp	r3, #0
 8023c32:	d002      	beq.n	8023c3a <dec_lock+0x3a>
 8023c34:	89fb      	ldrh	r3, [r7, #14]
 8023c36:	3b01      	subs	r3, #1
 8023c38:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8023c3a:	4a0e      	ldr	r2, [pc, #56]	@ (8023c74 <dec_lock+0x74>)
 8023c3c:	687b      	ldr	r3, [r7, #4]
 8023c3e:	011b      	lsls	r3, r3, #4
 8023c40:	4413      	add	r3, r2
 8023c42:	330c      	adds	r3, #12
 8023c44:	89fa      	ldrh	r2, [r7, #14]
 8023c46:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8023c48:	89fb      	ldrh	r3, [r7, #14]
 8023c4a:	2b00      	cmp	r3, #0
 8023c4c:	d105      	bne.n	8023c5a <dec_lock+0x5a>
 8023c4e:	4a09      	ldr	r2, [pc, #36]	@ (8023c74 <dec_lock+0x74>)
 8023c50:	687b      	ldr	r3, [r7, #4]
 8023c52:	011b      	lsls	r3, r3, #4
 8023c54:	4413      	add	r3, r2
 8023c56:	2200      	movs	r2, #0
 8023c58:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8023c5a:	2300      	movs	r3, #0
 8023c5c:	737b      	strb	r3, [r7, #13]
 8023c5e:	e001      	b.n	8023c64 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8023c60:	2302      	movs	r3, #2
 8023c62:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8023c64:	7b7b      	ldrb	r3, [r7, #13]
}
 8023c66:	4618      	mov	r0, r3
 8023c68:	3714      	adds	r7, #20
 8023c6a:	46bd      	mov	sp, r7
 8023c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c70:	4770      	bx	lr
 8023c72:	bf00      	nop
 8023c74:	2001d0d8 	.word	0x2001d0d8

08023c78 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8023c78:	b480      	push	{r7}
 8023c7a:	b085      	sub	sp, #20
 8023c7c:	af00      	add	r7, sp, #0
 8023c7e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8023c80:	2300      	movs	r3, #0
 8023c82:	60fb      	str	r3, [r7, #12]
 8023c84:	e010      	b.n	8023ca8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8023c86:	4a0d      	ldr	r2, [pc, #52]	@ (8023cbc <clear_lock+0x44>)
 8023c88:	68fb      	ldr	r3, [r7, #12]
 8023c8a:	011b      	lsls	r3, r3, #4
 8023c8c:	4413      	add	r3, r2
 8023c8e:	681b      	ldr	r3, [r3, #0]
 8023c90:	687a      	ldr	r2, [r7, #4]
 8023c92:	429a      	cmp	r2, r3
 8023c94:	d105      	bne.n	8023ca2 <clear_lock+0x2a>
 8023c96:	4a09      	ldr	r2, [pc, #36]	@ (8023cbc <clear_lock+0x44>)
 8023c98:	68fb      	ldr	r3, [r7, #12]
 8023c9a:	011b      	lsls	r3, r3, #4
 8023c9c:	4413      	add	r3, r2
 8023c9e:	2200      	movs	r2, #0
 8023ca0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8023ca2:	68fb      	ldr	r3, [r7, #12]
 8023ca4:	3301      	adds	r3, #1
 8023ca6:	60fb      	str	r3, [r7, #12]
 8023ca8:	68fb      	ldr	r3, [r7, #12]
 8023caa:	2b01      	cmp	r3, #1
 8023cac:	d9eb      	bls.n	8023c86 <clear_lock+0xe>
	}
}
 8023cae:	bf00      	nop
 8023cb0:	bf00      	nop
 8023cb2:	3714      	adds	r7, #20
 8023cb4:	46bd      	mov	sp, r7
 8023cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cba:	4770      	bx	lr
 8023cbc:	2001d0d8 	.word	0x2001d0d8

08023cc0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8023cc0:	b580      	push	{r7, lr}
 8023cc2:	b086      	sub	sp, #24
 8023cc4:	af00      	add	r7, sp, #0
 8023cc6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8023cc8:	2300      	movs	r3, #0
 8023cca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8023ccc:	687b      	ldr	r3, [r7, #4]
 8023cce:	78db      	ldrb	r3, [r3, #3]
 8023cd0:	2b00      	cmp	r3, #0
 8023cd2:	d034      	beq.n	8023d3e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8023cd4:	687b      	ldr	r3, [r7, #4]
 8023cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023cd8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8023cda:	687b      	ldr	r3, [r7, #4]
 8023cdc:	7858      	ldrb	r0, [r3, #1]
 8023cde:	687b      	ldr	r3, [r7, #4]
 8023ce0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8023ce4:	2301      	movs	r3, #1
 8023ce6:	697a      	ldr	r2, [r7, #20]
 8023ce8:	f7ff fd0e 	bl	8023708 <disk_write>
 8023cec:	4603      	mov	r3, r0
 8023cee:	2b00      	cmp	r3, #0
 8023cf0:	d002      	beq.n	8023cf8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8023cf2:	2301      	movs	r3, #1
 8023cf4:	73fb      	strb	r3, [r7, #15]
 8023cf6:	e022      	b.n	8023d3e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8023cf8:	687b      	ldr	r3, [r7, #4]
 8023cfa:	2200      	movs	r2, #0
 8023cfc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8023cfe:	687b      	ldr	r3, [r7, #4]
 8023d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023d02:	697a      	ldr	r2, [r7, #20]
 8023d04:	1ad2      	subs	r2, r2, r3
 8023d06:	687b      	ldr	r3, [r7, #4]
 8023d08:	6a1b      	ldr	r3, [r3, #32]
 8023d0a:	429a      	cmp	r2, r3
 8023d0c:	d217      	bcs.n	8023d3e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8023d0e:	687b      	ldr	r3, [r7, #4]
 8023d10:	789b      	ldrb	r3, [r3, #2]
 8023d12:	613b      	str	r3, [r7, #16]
 8023d14:	e010      	b.n	8023d38 <sync_window+0x78>
					wsect += fs->fsize;
 8023d16:	687b      	ldr	r3, [r7, #4]
 8023d18:	6a1b      	ldr	r3, [r3, #32]
 8023d1a:	697a      	ldr	r2, [r7, #20]
 8023d1c:	4413      	add	r3, r2
 8023d1e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8023d20:	687b      	ldr	r3, [r7, #4]
 8023d22:	7858      	ldrb	r0, [r3, #1]
 8023d24:	687b      	ldr	r3, [r7, #4]
 8023d26:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8023d2a:	2301      	movs	r3, #1
 8023d2c:	697a      	ldr	r2, [r7, #20]
 8023d2e:	f7ff fceb 	bl	8023708 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8023d32:	693b      	ldr	r3, [r7, #16]
 8023d34:	3b01      	subs	r3, #1
 8023d36:	613b      	str	r3, [r7, #16]
 8023d38:	693b      	ldr	r3, [r7, #16]
 8023d3a:	2b01      	cmp	r3, #1
 8023d3c:	d8eb      	bhi.n	8023d16 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8023d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8023d40:	4618      	mov	r0, r3
 8023d42:	3718      	adds	r7, #24
 8023d44:	46bd      	mov	sp, r7
 8023d46:	bd80      	pop	{r7, pc}

08023d48 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8023d48:	b580      	push	{r7, lr}
 8023d4a:	b084      	sub	sp, #16
 8023d4c:	af00      	add	r7, sp, #0
 8023d4e:	6078      	str	r0, [r7, #4]
 8023d50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8023d52:	2300      	movs	r3, #0
 8023d54:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8023d56:	687b      	ldr	r3, [r7, #4]
 8023d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023d5a:	683a      	ldr	r2, [r7, #0]
 8023d5c:	429a      	cmp	r2, r3
 8023d5e:	d01b      	beq.n	8023d98 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8023d60:	6878      	ldr	r0, [r7, #4]
 8023d62:	f7ff ffad 	bl	8023cc0 <sync_window>
 8023d66:	4603      	mov	r3, r0
 8023d68:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8023d6a:	7bfb      	ldrb	r3, [r7, #15]
 8023d6c:	2b00      	cmp	r3, #0
 8023d6e:	d113      	bne.n	8023d98 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8023d70:	687b      	ldr	r3, [r7, #4]
 8023d72:	7858      	ldrb	r0, [r3, #1]
 8023d74:	687b      	ldr	r3, [r7, #4]
 8023d76:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8023d7a:	2301      	movs	r3, #1
 8023d7c:	683a      	ldr	r2, [r7, #0]
 8023d7e:	f7ff fca3 	bl	80236c8 <disk_read>
 8023d82:	4603      	mov	r3, r0
 8023d84:	2b00      	cmp	r3, #0
 8023d86:	d004      	beq.n	8023d92 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8023d88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8023d8c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8023d8e:	2301      	movs	r3, #1
 8023d90:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8023d92:	687b      	ldr	r3, [r7, #4]
 8023d94:	683a      	ldr	r2, [r7, #0]
 8023d96:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8023d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8023d9a:	4618      	mov	r0, r3
 8023d9c:	3710      	adds	r7, #16
 8023d9e:	46bd      	mov	sp, r7
 8023da0:	bd80      	pop	{r7, pc}
	...

08023da4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8023da4:	b580      	push	{r7, lr}
 8023da6:	b084      	sub	sp, #16
 8023da8:	af00      	add	r7, sp, #0
 8023daa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8023dac:	6878      	ldr	r0, [r7, #4]
 8023dae:	f7ff ff87 	bl	8023cc0 <sync_window>
 8023db2:	4603      	mov	r3, r0
 8023db4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8023db6:	7bfb      	ldrb	r3, [r7, #15]
 8023db8:	2b00      	cmp	r3, #0
 8023dba:	d159      	bne.n	8023e70 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8023dbc:	687b      	ldr	r3, [r7, #4]
 8023dbe:	781b      	ldrb	r3, [r3, #0]
 8023dc0:	2b03      	cmp	r3, #3
 8023dc2:	d149      	bne.n	8023e58 <sync_fs+0xb4>
 8023dc4:	687b      	ldr	r3, [r7, #4]
 8023dc6:	791b      	ldrb	r3, [r3, #4]
 8023dc8:	2b01      	cmp	r3, #1
 8023dca:	d145      	bne.n	8023e58 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8023dcc:	687b      	ldr	r3, [r7, #4]
 8023dce:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8023dd2:	687b      	ldr	r3, [r7, #4]
 8023dd4:	899b      	ldrh	r3, [r3, #12]
 8023dd6:	461a      	mov	r2, r3
 8023dd8:	2100      	movs	r1, #0
 8023dda:	f7ff fd76 	bl	80238ca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8023dde:	687b      	ldr	r3, [r7, #4]
 8023de0:	3338      	adds	r3, #56	@ 0x38
 8023de2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8023de6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8023dea:	4618      	mov	r0, r3
 8023dec:	f7ff fd05 	bl	80237fa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8023df0:	687b      	ldr	r3, [r7, #4]
 8023df2:	3338      	adds	r3, #56	@ 0x38
 8023df4:	4921      	ldr	r1, [pc, #132]	@ (8023e7c <sync_fs+0xd8>)
 8023df6:	4618      	mov	r0, r3
 8023df8:	f7ff fd1a 	bl	8023830 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8023dfc:	687b      	ldr	r3, [r7, #4]
 8023dfe:	3338      	adds	r3, #56	@ 0x38
 8023e00:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8023e04:	491e      	ldr	r1, [pc, #120]	@ (8023e80 <sync_fs+0xdc>)
 8023e06:	4618      	mov	r0, r3
 8023e08:	f7ff fd12 	bl	8023830 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8023e0c:	687b      	ldr	r3, [r7, #4]
 8023e0e:	3338      	adds	r3, #56	@ 0x38
 8023e10:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8023e14:	687b      	ldr	r3, [r7, #4]
 8023e16:	699b      	ldr	r3, [r3, #24]
 8023e18:	4619      	mov	r1, r3
 8023e1a:	4610      	mov	r0, r2
 8023e1c:	f7ff fd08 	bl	8023830 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8023e20:	687b      	ldr	r3, [r7, #4]
 8023e22:	3338      	adds	r3, #56	@ 0x38
 8023e24:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8023e28:	687b      	ldr	r3, [r7, #4]
 8023e2a:	695b      	ldr	r3, [r3, #20]
 8023e2c:	4619      	mov	r1, r3
 8023e2e:	4610      	mov	r0, r2
 8023e30:	f7ff fcfe 	bl	8023830 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8023e34:	687b      	ldr	r3, [r7, #4]
 8023e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023e38:	1c5a      	adds	r2, r3, #1
 8023e3a:	687b      	ldr	r3, [r7, #4]
 8023e3c:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8023e3e:	687b      	ldr	r3, [r7, #4]
 8023e40:	7858      	ldrb	r0, [r3, #1]
 8023e42:	687b      	ldr	r3, [r7, #4]
 8023e44:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8023e48:	687b      	ldr	r3, [r7, #4]
 8023e4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8023e4c:	2301      	movs	r3, #1
 8023e4e:	f7ff fc5b 	bl	8023708 <disk_write>
			fs->fsi_flag = 0;
 8023e52:	687b      	ldr	r3, [r7, #4]
 8023e54:	2200      	movs	r2, #0
 8023e56:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8023e58:	687b      	ldr	r3, [r7, #4]
 8023e5a:	785b      	ldrb	r3, [r3, #1]
 8023e5c:	2200      	movs	r2, #0
 8023e5e:	2100      	movs	r1, #0
 8023e60:	4618      	mov	r0, r3
 8023e62:	f7ff fc71 	bl	8023748 <disk_ioctl>
 8023e66:	4603      	mov	r3, r0
 8023e68:	2b00      	cmp	r3, #0
 8023e6a:	d001      	beq.n	8023e70 <sync_fs+0xcc>
 8023e6c:	2301      	movs	r3, #1
 8023e6e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8023e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8023e72:	4618      	mov	r0, r3
 8023e74:	3710      	adds	r7, #16
 8023e76:	46bd      	mov	sp, r7
 8023e78:	bd80      	pop	{r7, pc}
 8023e7a:	bf00      	nop
 8023e7c:	41615252 	.word	0x41615252
 8023e80:	61417272 	.word	0x61417272

08023e84 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8023e84:	b480      	push	{r7}
 8023e86:	b083      	sub	sp, #12
 8023e88:	af00      	add	r7, sp, #0
 8023e8a:	6078      	str	r0, [r7, #4]
 8023e8c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8023e8e:	683b      	ldr	r3, [r7, #0]
 8023e90:	3b02      	subs	r3, #2
 8023e92:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8023e94:	687b      	ldr	r3, [r7, #4]
 8023e96:	69db      	ldr	r3, [r3, #28]
 8023e98:	3b02      	subs	r3, #2
 8023e9a:	683a      	ldr	r2, [r7, #0]
 8023e9c:	429a      	cmp	r2, r3
 8023e9e:	d301      	bcc.n	8023ea4 <clust2sect+0x20>
 8023ea0:	2300      	movs	r3, #0
 8023ea2:	e008      	b.n	8023eb6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8023ea4:	687b      	ldr	r3, [r7, #4]
 8023ea6:	895b      	ldrh	r3, [r3, #10]
 8023ea8:	461a      	mov	r2, r3
 8023eaa:	683b      	ldr	r3, [r7, #0]
 8023eac:	fb03 f202 	mul.w	r2, r3, r2
 8023eb0:	687b      	ldr	r3, [r7, #4]
 8023eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023eb4:	4413      	add	r3, r2
}
 8023eb6:	4618      	mov	r0, r3
 8023eb8:	370c      	adds	r7, #12
 8023eba:	46bd      	mov	sp, r7
 8023ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ec0:	4770      	bx	lr

08023ec2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8023ec2:	b580      	push	{r7, lr}
 8023ec4:	b086      	sub	sp, #24
 8023ec6:	af00      	add	r7, sp, #0
 8023ec8:	6078      	str	r0, [r7, #4]
 8023eca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8023ecc:	687b      	ldr	r3, [r7, #4]
 8023ece:	681b      	ldr	r3, [r3, #0]
 8023ed0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8023ed2:	683b      	ldr	r3, [r7, #0]
 8023ed4:	2b01      	cmp	r3, #1
 8023ed6:	d904      	bls.n	8023ee2 <get_fat+0x20>
 8023ed8:	693b      	ldr	r3, [r7, #16]
 8023eda:	69db      	ldr	r3, [r3, #28]
 8023edc:	683a      	ldr	r2, [r7, #0]
 8023ede:	429a      	cmp	r2, r3
 8023ee0:	d302      	bcc.n	8023ee8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8023ee2:	2301      	movs	r3, #1
 8023ee4:	617b      	str	r3, [r7, #20]
 8023ee6:	e0ba      	b.n	802405e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8023ee8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8023eec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8023eee:	693b      	ldr	r3, [r7, #16]
 8023ef0:	781b      	ldrb	r3, [r3, #0]
 8023ef2:	2b03      	cmp	r3, #3
 8023ef4:	f000 8082 	beq.w	8023ffc <get_fat+0x13a>
 8023ef8:	2b03      	cmp	r3, #3
 8023efa:	f300 80a6 	bgt.w	802404a <get_fat+0x188>
 8023efe:	2b01      	cmp	r3, #1
 8023f00:	d002      	beq.n	8023f08 <get_fat+0x46>
 8023f02:	2b02      	cmp	r3, #2
 8023f04:	d055      	beq.n	8023fb2 <get_fat+0xf0>
 8023f06:	e0a0      	b.n	802404a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8023f08:	683b      	ldr	r3, [r7, #0]
 8023f0a:	60fb      	str	r3, [r7, #12]
 8023f0c:	68fb      	ldr	r3, [r7, #12]
 8023f0e:	085b      	lsrs	r3, r3, #1
 8023f10:	68fa      	ldr	r2, [r7, #12]
 8023f12:	4413      	add	r3, r2
 8023f14:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8023f16:	693b      	ldr	r3, [r7, #16]
 8023f18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8023f1a:	693b      	ldr	r3, [r7, #16]
 8023f1c:	899b      	ldrh	r3, [r3, #12]
 8023f1e:	4619      	mov	r1, r3
 8023f20:	68fb      	ldr	r3, [r7, #12]
 8023f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8023f26:	4413      	add	r3, r2
 8023f28:	4619      	mov	r1, r3
 8023f2a:	6938      	ldr	r0, [r7, #16]
 8023f2c:	f7ff ff0c 	bl	8023d48 <move_window>
 8023f30:	4603      	mov	r3, r0
 8023f32:	2b00      	cmp	r3, #0
 8023f34:	f040 808c 	bne.w	8024050 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8023f38:	68fb      	ldr	r3, [r7, #12]
 8023f3a:	1c5a      	adds	r2, r3, #1
 8023f3c:	60fa      	str	r2, [r7, #12]
 8023f3e:	693a      	ldr	r2, [r7, #16]
 8023f40:	8992      	ldrh	r2, [r2, #12]
 8023f42:	fbb3 f1f2 	udiv	r1, r3, r2
 8023f46:	fb01 f202 	mul.w	r2, r1, r2
 8023f4a:	1a9b      	subs	r3, r3, r2
 8023f4c:	693a      	ldr	r2, [r7, #16]
 8023f4e:	4413      	add	r3, r2
 8023f50:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8023f54:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8023f56:	693b      	ldr	r3, [r7, #16]
 8023f58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8023f5a:	693b      	ldr	r3, [r7, #16]
 8023f5c:	899b      	ldrh	r3, [r3, #12]
 8023f5e:	4619      	mov	r1, r3
 8023f60:	68fb      	ldr	r3, [r7, #12]
 8023f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8023f66:	4413      	add	r3, r2
 8023f68:	4619      	mov	r1, r3
 8023f6a:	6938      	ldr	r0, [r7, #16]
 8023f6c:	f7ff feec 	bl	8023d48 <move_window>
 8023f70:	4603      	mov	r3, r0
 8023f72:	2b00      	cmp	r3, #0
 8023f74:	d16e      	bne.n	8024054 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8023f76:	693b      	ldr	r3, [r7, #16]
 8023f78:	899b      	ldrh	r3, [r3, #12]
 8023f7a:	461a      	mov	r2, r3
 8023f7c:	68fb      	ldr	r3, [r7, #12]
 8023f7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8023f82:	fb01 f202 	mul.w	r2, r1, r2
 8023f86:	1a9b      	subs	r3, r3, r2
 8023f88:	693a      	ldr	r2, [r7, #16]
 8023f8a:	4413      	add	r3, r2
 8023f8c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8023f90:	021b      	lsls	r3, r3, #8
 8023f92:	68ba      	ldr	r2, [r7, #8]
 8023f94:	4313      	orrs	r3, r2
 8023f96:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8023f98:	683b      	ldr	r3, [r7, #0]
 8023f9a:	f003 0301 	and.w	r3, r3, #1
 8023f9e:	2b00      	cmp	r3, #0
 8023fa0:	d002      	beq.n	8023fa8 <get_fat+0xe6>
 8023fa2:	68bb      	ldr	r3, [r7, #8]
 8023fa4:	091b      	lsrs	r3, r3, #4
 8023fa6:	e002      	b.n	8023fae <get_fat+0xec>
 8023fa8:	68bb      	ldr	r3, [r7, #8]
 8023faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023fae:	617b      	str	r3, [r7, #20]
			break;
 8023fb0:	e055      	b.n	802405e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8023fb2:	693b      	ldr	r3, [r7, #16]
 8023fb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8023fb6:	693b      	ldr	r3, [r7, #16]
 8023fb8:	899b      	ldrh	r3, [r3, #12]
 8023fba:	085b      	lsrs	r3, r3, #1
 8023fbc:	b29b      	uxth	r3, r3
 8023fbe:	4619      	mov	r1, r3
 8023fc0:	683b      	ldr	r3, [r7, #0]
 8023fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8023fc6:	4413      	add	r3, r2
 8023fc8:	4619      	mov	r1, r3
 8023fca:	6938      	ldr	r0, [r7, #16]
 8023fcc:	f7ff febc 	bl	8023d48 <move_window>
 8023fd0:	4603      	mov	r3, r0
 8023fd2:	2b00      	cmp	r3, #0
 8023fd4:	d140      	bne.n	8024058 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8023fd6:	693b      	ldr	r3, [r7, #16]
 8023fd8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8023fdc:	683b      	ldr	r3, [r7, #0]
 8023fde:	005b      	lsls	r3, r3, #1
 8023fe0:	693a      	ldr	r2, [r7, #16]
 8023fe2:	8992      	ldrh	r2, [r2, #12]
 8023fe4:	fbb3 f0f2 	udiv	r0, r3, r2
 8023fe8:	fb00 f202 	mul.w	r2, r0, r2
 8023fec:	1a9b      	subs	r3, r3, r2
 8023fee:	440b      	add	r3, r1
 8023ff0:	4618      	mov	r0, r3
 8023ff2:	f7ff fbc7 	bl	8023784 <ld_word>
 8023ff6:	4603      	mov	r3, r0
 8023ff8:	617b      	str	r3, [r7, #20]
			break;
 8023ffa:	e030      	b.n	802405e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8023ffc:	693b      	ldr	r3, [r7, #16]
 8023ffe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8024000:	693b      	ldr	r3, [r7, #16]
 8024002:	899b      	ldrh	r3, [r3, #12]
 8024004:	089b      	lsrs	r3, r3, #2
 8024006:	b29b      	uxth	r3, r3
 8024008:	4619      	mov	r1, r3
 802400a:	683b      	ldr	r3, [r7, #0]
 802400c:	fbb3 f3f1 	udiv	r3, r3, r1
 8024010:	4413      	add	r3, r2
 8024012:	4619      	mov	r1, r3
 8024014:	6938      	ldr	r0, [r7, #16]
 8024016:	f7ff fe97 	bl	8023d48 <move_window>
 802401a:	4603      	mov	r3, r0
 802401c:	2b00      	cmp	r3, #0
 802401e:	d11d      	bne.n	802405c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8024020:	693b      	ldr	r3, [r7, #16]
 8024022:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8024026:	683b      	ldr	r3, [r7, #0]
 8024028:	009b      	lsls	r3, r3, #2
 802402a:	693a      	ldr	r2, [r7, #16]
 802402c:	8992      	ldrh	r2, [r2, #12]
 802402e:	fbb3 f0f2 	udiv	r0, r3, r2
 8024032:	fb00 f202 	mul.w	r2, r0, r2
 8024036:	1a9b      	subs	r3, r3, r2
 8024038:	440b      	add	r3, r1
 802403a:	4618      	mov	r0, r3
 802403c:	f7ff fbba 	bl	80237b4 <ld_dword>
 8024040:	4603      	mov	r3, r0
 8024042:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8024046:	617b      	str	r3, [r7, #20]
			break;
 8024048:	e009      	b.n	802405e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 802404a:	2301      	movs	r3, #1
 802404c:	617b      	str	r3, [r7, #20]
 802404e:	e006      	b.n	802405e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8024050:	bf00      	nop
 8024052:	e004      	b.n	802405e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8024054:	bf00      	nop
 8024056:	e002      	b.n	802405e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8024058:	bf00      	nop
 802405a:	e000      	b.n	802405e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 802405c:	bf00      	nop
		}
	}

	return val;
 802405e:	697b      	ldr	r3, [r7, #20]
}
 8024060:	4618      	mov	r0, r3
 8024062:	3718      	adds	r7, #24
 8024064:	46bd      	mov	sp, r7
 8024066:	bd80      	pop	{r7, pc}

08024068 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8024068:	b590      	push	{r4, r7, lr}
 802406a:	b089      	sub	sp, #36	@ 0x24
 802406c:	af00      	add	r7, sp, #0
 802406e:	60f8      	str	r0, [r7, #12]
 8024070:	60b9      	str	r1, [r7, #8]
 8024072:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8024074:	2302      	movs	r3, #2
 8024076:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8024078:	68bb      	ldr	r3, [r7, #8]
 802407a:	2b01      	cmp	r3, #1
 802407c:	f240 8109 	bls.w	8024292 <put_fat+0x22a>
 8024080:	68fb      	ldr	r3, [r7, #12]
 8024082:	69db      	ldr	r3, [r3, #28]
 8024084:	68ba      	ldr	r2, [r7, #8]
 8024086:	429a      	cmp	r2, r3
 8024088:	f080 8103 	bcs.w	8024292 <put_fat+0x22a>
		switch (fs->fs_type) {
 802408c:	68fb      	ldr	r3, [r7, #12]
 802408e:	781b      	ldrb	r3, [r3, #0]
 8024090:	2b03      	cmp	r3, #3
 8024092:	f000 80b6 	beq.w	8024202 <put_fat+0x19a>
 8024096:	2b03      	cmp	r3, #3
 8024098:	f300 80fb 	bgt.w	8024292 <put_fat+0x22a>
 802409c:	2b01      	cmp	r3, #1
 802409e:	d003      	beq.n	80240a8 <put_fat+0x40>
 80240a0:	2b02      	cmp	r3, #2
 80240a2:	f000 8083 	beq.w	80241ac <put_fat+0x144>
 80240a6:	e0f4      	b.n	8024292 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80240a8:	68bb      	ldr	r3, [r7, #8]
 80240aa:	61bb      	str	r3, [r7, #24]
 80240ac:	69bb      	ldr	r3, [r7, #24]
 80240ae:	085b      	lsrs	r3, r3, #1
 80240b0:	69ba      	ldr	r2, [r7, #24]
 80240b2:	4413      	add	r3, r2
 80240b4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80240b6:	68fb      	ldr	r3, [r7, #12]
 80240b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80240ba:	68fb      	ldr	r3, [r7, #12]
 80240bc:	899b      	ldrh	r3, [r3, #12]
 80240be:	4619      	mov	r1, r3
 80240c0:	69bb      	ldr	r3, [r7, #24]
 80240c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80240c6:	4413      	add	r3, r2
 80240c8:	4619      	mov	r1, r3
 80240ca:	68f8      	ldr	r0, [r7, #12]
 80240cc:	f7ff fe3c 	bl	8023d48 <move_window>
 80240d0:	4603      	mov	r3, r0
 80240d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80240d4:	7ffb      	ldrb	r3, [r7, #31]
 80240d6:	2b00      	cmp	r3, #0
 80240d8:	f040 80d4 	bne.w	8024284 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80240dc:	68fb      	ldr	r3, [r7, #12]
 80240de:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80240e2:	69bb      	ldr	r3, [r7, #24]
 80240e4:	1c5a      	adds	r2, r3, #1
 80240e6:	61ba      	str	r2, [r7, #24]
 80240e8:	68fa      	ldr	r2, [r7, #12]
 80240ea:	8992      	ldrh	r2, [r2, #12]
 80240ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80240f0:	fb00 f202 	mul.w	r2, r0, r2
 80240f4:	1a9b      	subs	r3, r3, r2
 80240f6:	440b      	add	r3, r1
 80240f8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80240fa:	68bb      	ldr	r3, [r7, #8]
 80240fc:	f003 0301 	and.w	r3, r3, #1
 8024100:	2b00      	cmp	r3, #0
 8024102:	d00d      	beq.n	8024120 <put_fat+0xb8>
 8024104:	697b      	ldr	r3, [r7, #20]
 8024106:	781b      	ldrb	r3, [r3, #0]
 8024108:	b25b      	sxtb	r3, r3
 802410a:	f003 030f 	and.w	r3, r3, #15
 802410e:	b25a      	sxtb	r2, r3
 8024110:	687b      	ldr	r3, [r7, #4]
 8024112:	b2db      	uxtb	r3, r3
 8024114:	011b      	lsls	r3, r3, #4
 8024116:	b25b      	sxtb	r3, r3
 8024118:	4313      	orrs	r3, r2
 802411a:	b25b      	sxtb	r3, r3
 802411c:	b2db      	uxtb	r3, r3
 802411e:	e001      	b.n	8024124 <put_fat+0xbc>
 8024120:	687b      	ldr	r3, [r7, #4]
 8024122:	b2db      	uxtb	r3, r3
 8024124:	697a      	ldr	r2, [r7, #20]
 8024126:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8024128:	68fb      	ldr	r3, [r7, #12]
 802412a:	2201      	movs	r2, #1
 802412c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 802412e:	68fb      	ldr	r3, [r7, #12]
 8024130:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8024132:	68fb      	ldr	r3, [r7, #12]
 8024134:	899b      	ldrh	r3, [r3, #12]
 8024136:	4619      	mov	r1, r3
 8024138:	69bb      	ldr	r3, [r7, #24]
 802413a:	fbb3 f3f1 	udiv	r3, r3, r1
 802413e:	4413      	add	r3, r2
 8024140:	4619      	mov	r1, r3
 8024142:	68f8      	ldr	r0, [r7, #12]
 8024144:	f7ff fe00 	bl	8023d48 <move_window>
 8024148:	4603      	mov	r3, r0
 802414a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 802414c:	7ffb      	ldrb	r3, [r7, #31]
 802414e:	2b00      	cmp	r3, #0
 8024150:	f040 809a 	bne.w	8024288 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8024154:	68fb      	ldr	r3, [r7, #12]
 8024156:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 802415a:	68fb      	ldr	r3, [r7, #12]
 802415c:	899b      	ldrh	r3, [r3, #12]
 802415e:	461a      	mov	r2, r3
 8024160:	69bb      	ldr	r3, [r7, #24]
 8024162:	fbb3 f0f2 	udiv	r0, r3, r2
 8024166:	fb00 f202 	mul.w	r2, r0, r2
 802416a:	1a9b      	subs	r3, r3, r2
 802416c:	440b      	add	r3, r1
 802416e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8024170:	68bb      	ldr	r3, [r7, #8]
 8024172:	f003 0301 	and.w	r3, r3, #1
 8024176:	2b00      	cmp	r3, #0
 8024178:	d003      	beq.n	8024182 <put_fat+0x11a>
 802417a:	687b      	ldr	r3, [r7, #4]
 802417c:	091b      	lsrs	r3, r3, #4
 802417e:	b2db      	uxtb	r3, r3
 8024180:	e00e      	b.n	80241a0 <put_fat+0x138>
 8024182:	697b      	ldr	r3, [r7, #20]
 8024184:	781b      	ldrb	r3, [r3, #0]
 8024186:	b25b      	sxtb	r3, r3
 8024188:	f023 030f 	bic.w	r3, r3, #15
 802418c:	b25a      	sxtb	r2, r3
 802418e:	687b      	ldr	r3, [r7, #4]
 8024190:	0a1b      	lsrs	r3, r3, #8
 8024192:	b25b      	sxtb	r3, r3
 8024194:	f003 030f 	and.w	r3, r3, #15
 8024198:	b25b      	sxtb	r3, r3
 802419a:	4313      	orrs	r3, r2
 802419c:	b25b      	sxtb	r3, r3
 802419e:	b2db      	uxtb	r3, r3
 80241a0:	697a      	ldr	r2, [r7, #20]
 80241a2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80241a4:	68fb      	ldr	r3, [r7, #12]
 80241a6:	2201      	movs	r2, #1
 80241a8:	70da      	strb	r2, [r3, #3]
			break;
 80241aa:	e072      	b.n	8024292 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80241ac:	68fb      	ldr	r3, [r7, #12]
 80241ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80241b0:	68fb      	ldr	r3, [r7, #12]
 80241b2:	899b      	ldrh	r3, [r3, #12]
 80241b4:	085b      	lsrs	r3, r3, #1
 80241b6:	b29b      	uxth	r3, r3
 80241b8:	4619      	mov	r1, r3
 80241ba:	68bb      	ldr	r3, [r7, #8]
 80241bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80241c0:	4413      	add	r3, r2
 80241c2:	4619      	mov	r1, r3
 80241c4:	68f8      	ldr	r0, [r7, #12]
 80241c6:	f7ff fdbf 	bl	8023d48 <move_window>
 80241ca:	4603      	mov	r3, r0
 80241cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80241ce:	7ffb      	ldrb	r3, [r7, #31]
 80241d0:	2b00      	cmp	r3, #0
 80241d2:	d15b      	bne.n	802428c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80241d4:	68fb      	ldr	r3, [r7, #12]
 80241d6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80241da:	68bb      	ldr	r3, [r7, #8]
 80241dc:	005b      	lsls	r3, r3, #1
 80241de:	68fa      	ldr	r2, [r7, #12]
 80241e0:	8992      	ldrh	r2, [r2, #12]
 80241e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80241e6:	fb00 f202 	mul.w	r2, r0, r2
 80241ea:	1a9b      	subs	r3, r3, r2
 80241ec:	440b      	add	r3, r1
 80241ee:	687a      	ldr	r2, [r7, #4]
 80241f0:	b292      	uxth	r2, r2
 80241f2:	4611      	mov	r1, r2
 80241f4:	4618      	mov	r0, r3
 80241f6:	f7ff fb00 	bl	80237fa <st_word>
			fs->wflag = 1;
 80241fa:	68fb      	ldr	r3, [r7, #12]
 80241fc:	2201      	movs	r2, #1
 80241fe:	70da      	strb	r2, [r3, #3]
			break;
 8024200:	e047      	b.n	8024292 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8024202:	68fb      	ldr	r3, [r7, #12]
 8024204:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8024206:	68fb      	ldr	r3, [r7, #12]
 8024208:	899b      	ldrh	r3, [r3, #12]
 802420a:	089b      	lsrs	r3, r3, #2
 802420c:	b29b      	uxth	r3, r3
 802420e:	4619      	mov	r1, r3
 8024210:	68bb      	ldr	r3, [r7, #8]
 8024212:	fbb3 f3f1 	udiv	r3, r3, r1
 8024216:	4413      	add	r3, r2
 8024218:	4619      	mov	r1, r3
 802421a:	68f8      	ldr	r0, [r7, #12]
 802421c:	f7ff fd94 	bl	8023d48 <move_window>
 8024220:	4603      	mov	r3, r0
 8024222:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8024224:	7ffb      	ldrb	r3, [r7, #31]
 8024226:	2b00      	cmp	r3, #0
 8024228:	d132      	bne.n	8024290 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 802422a:	687b      	ldr	r3, [r7, #4]
 802422c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8024230:	68fb      	ldr	r3, [r7, #12]
 8024232:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8024236:	68bb      	ldr	r3, [r7, #8]
 8024238:	009b      	lsls	r3, r3, #2
 802423a:	68fa      	ldr	r2, [r7, #12]
 802423c:	8992      	ldrh	r2, [r2, #12]
 802423e:	fbb3 f0f2 	udiv	r0, r3, r2
 8024242:	fb00 f202 	mul.w	r2, r0, r2
 8024246:	1a9b      	subs	r3, r3, r2
 8024248:	440b      	add	r3, r1
 802424a:	4618      	mov	r0, r3
 802424c:	f7ff fab2 	bl	80237b4 <ld_dword>
 8024250:	4603      	mov	r3, r0
 8024252:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8024256:	4323      	orrs	r3, r4
 8024258:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 802425a:	68fb      	ldr	r3, [r7, #12]
 802425c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8024260:	68bb      	ldr	r3, [r7, #8]
 8024262:	009b      	lsls	r3, r3, #2
 8024264:	68fa      	ldr	r2, [r7, #12]
 8024266:	8992      	ldrh	r2, [r2, #12]
 8024268:	fbb3 f0f2 	udiv	r0, r3, r2
 802426c:	fb00 f202 	mul.w	r2, r0, r2
 8024270:	1a9b      	subs	r3, r3, r2
 8024272:	440b      	add	r3, r1
 8024274:	6879      	ldr	r1, [r7, #4]
 8024276:	4618      	mov	r0, r3
 8024278:	f7ff fada 	bl	8023830 <st_dword>
			fs->wflag = 1;
 802427c:	68fb      	ldr	r3, [r7, #12]
 802427e:	2201      	movs	r2, #1
 8024280:	70da      	strb	r2, [r3, #3]
			break;
 8024282:	e006      	b.n	8024292 <put_fat+0x22a>
			if (res != FR_OK) break;
 8024284:	bf00      	nop
 8024286:	e004      	b.n	8024292 <put_fat+0x22a>
			if (res != FR_OK) break;
 8024288:	bf00      	nop
 802428a:	e002      	b.n	8024292 <put_fat+0x22a>
			if (res != FR_OK) break;
 802428c:	bf00      	nop
 802428e:	e000      	b.n	8024292 <put_fat+0x22a>
			if (res != FR_OK) break;
 8024290:	bf00      	nop
		}
	}
	return res;
 8024292:	7ffb      	ldrb	r3, [r7, #31]
}
 8024294:	4618      	mov	r0, r3
 8024296:	3724      	adds	r7, #36	@ 0x24
 8024298:	46bd      	mov	sp, r7
 802429a:	bd90      	pop	{r4, r7, pc}

0802429c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 802429c:	b580      	push	{r7, lr}
 802429e:	b088      	sub	sp, #32
 80242a0:	af00      	add	r7, sp, #0
 80242a2:	60f8      	str	r0, [r7, #12]
 80242a4:	60b9      	str	r1, [r7, #8]
 80242a6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80242a8:	2300      	movs	r3, #0
 80242aa:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80242ac:	68fb      	ldr	r3, [r7, #12]
 80242ae:	681b      	ldr	r3, [r3, #0]
 80242b0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80242b2:	68bb      	ldr	r3, [r7, #8]
 80242b4:	2b01      	cmp	r3, #1
 80242b6:	d904      	bls.n	80242c2 <remove_chain+0x26>
 80242b8:	69bb      	ldr	r3, [r7, #24]
 80242ba:	69db      	ldr	r3, [r3, #28]
 80242bc:	68ba      	ldr	r2, [r7, #8]
 80242be:	429a      	cmp	r2, r3
 80242c0:	d301      	bcc.n	80242c6 <remove_chain+0x2a>
 80242c2:	2302      	movs	r3, #2
 80242c4:	e04b      	b.n	802435e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80242c6:	687b      	ldr	r3, [r7, #4]
 80242c8:	2b00      	cmp	r3, #0
 80242ca:	d00c      	beq.n	80242e6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80242cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80242d0:	6879      	ldr	r1, [r7, #4]
 80242d2:	69b8      	ldr	r0, [r7, #24]
 80242d4:	f7ff fec8 	bl	8024068 <put_fat>
 80242d8:	4603      	mov	r3, r0
 80242da:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80242dc:	7ffb      	ldrb	r3, [r7, #31]
 80242de:	2b00      	cmp	r3, #0
 80242e0:	d001      	beq.n	80242e6 <remove_chain+0x4a>
 80242e2:	7ffb      	ldrb	r3, [r7, #31]
 80242e4:	e03b      	b.n	802435e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80242e6:	68b9      	ldr	r1, [r7, #8]
 80242e8:	68f8      	ldr	r0, [r7, #12]
 80242ea:	f7ff fdea 	bl	8023ec2 <get_fat>
 80242ee:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80242f0:	697b      	ldr	r3, [r7, #20]
 80242f2:	2b00      	cmp	r3, #0
 80242f4:	d031      	beq.n	802435a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80242f6:	697b      	ldr	r3, [r7, #20]
 80242f8:	2b01      	cmp	r3, #1
 80242fa:	d101      	bne.n	8024300 <remove_chain+0x64>
 80242fc:	2302      	movs	r3, #2
 80242fe:	e02e      	b.n	802435e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8024300:	697b      	ldr	r3, [r7, #20]
 8024302:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8024306:	d101      	bne.n	802430c <remove_chain+0x70>
 8024308:	2301      	movs	r3, #1
 802430a:	e028      	b.n	802435e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 802430c:	2200      	movs	r2, #0
 802430e:	68b9      	ldr	r1, [r7, #8]
 8024310:	69b8      	ldr	r0, [r7, #24]
 8024312:	f7ff fea9 	bl	8024068 <put_fat>
 8024316:	4603      	mov	r3, r0
 8024318:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 802431a:	7ffb      	ldrb	r3, [r7, #31]
 802431c:	2b00      	cmp	r3, #0
 802431e:	d001      	beq.n	8024324 <remove_chain+0x88>
 8024320:	7ffb      	ldrb	r3, [r7, #31]
 8024322:	e01c      	b.n	802435e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8024324:	69bb      	ldr	r3, [r7, #24]
 8024326:	699a      	ldr	r2, [r3, #24]
 8024328:	69bb      	ldr	r3, [r7, #24]
 802432a:	69db      	ldr	r3, [r3, #28]
 802432c:	3b02      	subs	r3, #2
 802432e:	429a      	cmp	r2, r3
 8024330:	d20b      	bcs.n	802434a <remove_chain+0xae>
			fs->free_clst++;
 8024332:	69bb      	ldr	r3, [r7, #24]
 8024334:	699b      	ldr	r3, [r3, #24]
 8024336:	1c5a      	adds	r2, r3, #1
 8024338:	69bb      	ldr	r3, [r7, #24]
 802433a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 802433c:	69bb      	ldr	r3, [r7, #24]
 802433e:	791b      	ldrb	r3, [r3, #4]
 8024340:	f043 0301 	orr.w	r3, r3, #1
 8024344:	b2da      	uxtb	r2, r3
 8024346:	69bb      	ldr	r3, [r7, #24]
 8024348:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 802434a:	697b      	ldr	r3, [r7, #20]
 802434c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 802434e:	69bb      	ldr	r3, [r7, #24]
 8024350:	69db      	ldr	r3, [r3, #28]
 8024352:	68ba      	ldr	r2, [r7, #8]
 8024354:	429a      	cmp	r2, r3
 8024356:	d3c6      	bcc.n	80242e6 <remove_chain+0x4a>
 8024358:	e000      	b.n	802435c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 802435a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 802435c:	2300      	movs	r3, #0
}
 802435e:	4618      	mov	r0, r3
 8024360:	3720      	adds	r7, #32
 8024362:	46bd      	mov	sp, r7
 8024364:	bd80      	pop	{r7, pc}

08024366 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8024366:	b580      	push	{r7, lr}
 8024368:	b088      	sub	sp, #32
 802436a:	af00      	add	r7, sp, #0
 802436c:	6078      	str	r0, [r7, #4]
 802436e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8024370:	687b      	ldr	r3, [r7, #4]
 8024372:	681b      	ldr	r3, [r3, #0]
 8024374:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8024376:	683b      	ldr	r3, [r7, #0]
 8024378:	2b00      	cmp	r3, #0
 802437a:	d10d      	bne.n	8024398 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 802437c:	693b      	ldr	r3, [r7, #16]
 802437e:	695b      	ldr	r3, [r3, #20]
 8024380:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8024382:	69bb      	ldr	r3, [r7, #24]
 8024384:	2b00      	cmp	r3, #0
 8024386:	d004      	beq.n	8024392 <create_chain+0x2c>
 8024388:	693b      	ldr	r3, [r7, #16]
 802438a:	69db      	ldr	r3, [r3, #28]
 802438c:	69ba      	ldr	r2, [r7, #24]
 802438e:	429a      	cmp	r2, r3
 8024390:	d31b      	bcc.n	80243ca <create_chain+0x64>
 8024392:	2301      	movs	r3, #1
 8024394:	61bb      	str	r3, [r7, #24]
 8024396:	e018      	b.n	80243ca <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8024398:	6839      	ldr	r1, [r7, #0]
 802439a:	6878      	ldr	r0, [r7, #4]
 802439c:	f7ff fd91 	bl	8023ec2 <get_fat>
 80243a0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80243a2:	68fb      	ldr	r3, [r7, #12]
 80243a4:	2b01      	cmp	r3, #1
 80243a6:	d801      	bhi.n	80243ac <create_chain+0x46>
 80243a8:	2301      	movs	r3, #1
 80243aa:	e070      	b.n	802448e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80243ac:	68fb      	ldr	r3, [r7, #12]
 80243ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80243b2:	d101      	bne.n	80243b8 <create_chain+0x52>
 80243b4:	68fb      	ldr	r3, [r7, #12]
 80243b6:	e06a      	b.n	802448e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80243b8:	693b      	ldr	r3, [r7, #16]
 80243ba:	69db      	ldr	r3, [r3, #28]
 80243bc:	68fa      	ldr	r2, [r7, #12]
 80243be:	429a      	cmp	r2, r3
 80243c0:	d201      	bcs.n	80243c6 <create_chain+0x60>
 80243c2:	68fb      	ldr	r3, [r7, #12]
 80243c4:	e063      	b.n	802448e <create_chain+0x128>
		scl = clst;
 80243c6:	683b      	ldr	r3, [r7, #0]
 80243c8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80243ca:	69bb      	ldr	r3, [r7, #24]
 80243cc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80243ce:	69fb      	ldr	r3, [r7, #28]
 80243d0:	3301      	adds	r3, #1
 80243d2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80243d4:	693b      	ldr	r3, [r7, #16]
 80243d6:	69db      	ldr	r3, [r3, #28]
 80243d8:	69fa      	ldr	r2, [r7, #28]
 80243da:	429a      	cmp	r2, r3
 80243dc:	d307      	bcc.n	80243ee <create_chain+0x88>
				ncl = 2;
 80243de:	2302      	movs	r3, #2
 80243e0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80243e2:	69fa      	ldr	r2, [r7, #28]
 80243e4:	69bb      	ldr	r3, [r7, #24]
 80243e6:	429a      	cmp	r2, r3
 80243e8:	d901      	bls.n	80243ee <create_chain+0x88>
 80243ea:	2300      	movs	r3, #0
 80243ec:	e04f      	b.n	802448e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80243ee:	69f9      	ldr	r1, [r7, #28]
 80243f0:	6878      	ldr	r0, [r7, #4]
 80243f2:	f7ff fd66 	bl	8023ec2 <get_fat>
 80243f6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80243f8:	68fb      	ldr	r3, [r7, #12]
 80243fa:	2b00      	cmp	r3, #0
 80243fc:	d00e      	beq.n	802441c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80243fe:	68fb      	ldr	r3, [r7, #12]
 8024400:	2b01      	cmp	r3, #1
 8024402:	d003      	beq.n	802440c <create_chain+0xa6>
 8024404:	68fb      	ldr	r3, [r7, #12]
 8024406:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802440a:	d101      	bne.n	8024410 <create_chain+0xaa>
 802440c:	68fb      	ldr	r3, [r7, #12]
 802440e:	e03e      	b.n	802448e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8024410:	69fa      	ldr	r2, [r7, #28]
 8024412:	69bb      	ldr	r3, [r7, #24]
 8024414:	429a      	cmp	r2, r3
 8024416:	d1da      	bne.n	80243ce <create_chain+0x68>
 8024418:	2300      	movs	r3, #0
 802441a:	e038      	b.n	802448e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 802441c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 802441e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8024422:	69f9      	ldr	r1, [r7, #28]
 8024424:	6938      	ldr	r0, [r7, #16]
 8024426:	f7ff fe1f 	bl	8024068 <put_fat>
 802442a:	4603      	mov	r3, r0
 802442c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 802442e:	7dfb      	ldrb	r3, [r7, #23]
 8024430:	2b00      	cmp	r3, #0
 8024432:	d109      	bne.n	8024448 <create_chain+0xe2>
 8024434:	683b      	ldr	r3, [r7, #0]
 8024436:	2b00      	cmp	r3, #0
 8024438:	d006      	beq.n	8024448 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 802443a:	69fa      	ldr	r2, [r7, #28]
 802443c:	6839      	ldr	r1, [r7, #0]
 802443e:	6938      	ldr	r0, [r7, #16]
 8024440:	f7ff fe12 	bl	8024068 <put_fat>
 8024444:	4603      	mov	r3, r0
 8024446:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8024448:	7dfb      	ldrb	r3, [r7, #23]
 802444a:	2b00      	cmp	r3, #0
 802444c:	d116      	bne.n	802447c <create_chain+0x116>
		fs->last_clst = ncl;
 802444e:	693b      	ldr	r3, [r7, #16]
 8024450:	69fa      	ldr	r2, [r7, #28]
 8024452:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8024454:	693b      	ldr	r3, [r7, #16]
 8024456:	699a      	ldr	r2, [r3, #24]
 8024458:	693b      	ldr	r3, [r7, #16]
 802445a:	69db      	ldr	r3, [r3, #28]
 802445c:	3b02      	subs	r3, #2
 802445e:	429a      	cmp	r2, r3
 8024460:	d804      	bhi.n	802446c <create_chain+0x106>
 8024462:	693b      	ldr	r3, [r7, #16]
 8024464:	699b      	ldr	r3, [r3, #24]
 8024466:	1e5a      	subs	r2, r3, #1
 8024468:	693b      	ldr	r3, [r7, #16]
 802446a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 802446c:	693b      	ldr	r3, [r7, #16]
 802446e:	791b      	ldrb	r3, [r3, #4]
 8024470:	f043 0301 	orr.w	r3, r3, #1
 8024474:	b2da      	uxtb	r2, r3
 8024476:	693b      	ldr	r3, [r7, #16]
 8024478:	711a      	strb	r2, [r3, #4]
 802447a:	e007      	b.n	802448c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 802447c:	7dfb      	ldrb	r3, [r7, #23]
 802447e:	2b01      	cmp	r3, #1
 8024480:	d102      	bne.n	8024488 <create_chain+0x122>
 8024482:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8024486:	e000      	b.n	802448a <create_chain+0x124>
 8024488:	2301      	movs	r3, #1
 802448a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 802448c:	69fb      	ldr	r3, [r7, #28]
}
 802448e:	4618      	mov	r0, r3
 8024490:	3720      	adds	r7, #32
 8024492:	46bd      	mov	sp, r7
 8024494:	bd80      	pop	{r7, pc}

08024496 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8024496:	b480      	push	{r7}
 8024498:	b087      	sub	sp, #28
 802449a:	af00      	add	r7, sp, #0
 802449c:	6078      	str	r0, [r7, #4]
 802449e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80244a0:	687b      	ldr	r3, [r7, #4]
 80244a2:	681b      	ldr	r3, [r3, #0]
 80244a4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80244a6:	687b      	ldr	r3, [r7, #4]
 80244a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80244aa:	3304      	adds	r3, #4
 80244ac:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80244ae:	68fb      	ldr	r3, [r7, #12]
 80244b0:	899b      	ldrh	r3, [r3, #12]
 80244b2:	461a      	mov	r2, r3
 80244b4:	683b      	ldr	r3, [r7, #0]
 80244b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80244ba:	68fa      	ldr	r2, [r7, #12]
 80244bc:	8952      	ldrh	r2, [r2, #10]
 80244be:	fbb3 f3f2 	udiv	r3, r3, r2
 80244c2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80244c4:	693b      	ldr	r3, [r7, #16]
 80244c6:	1d1a      	adds	r2, r3, #4
 80244c8:	613a      	str	r2, [r7, #16]
 80244ca:	681b      	ldr	r3, [r3, #0]
 80244cc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80244ce:	68bb      	ldr	r3, [r7, #8]
 80244d0:	2b00      	cmp	r3, #0
 80244d2:	d101      	bne.n	80244d8 <clmt_clust+0x42>
 80244d4:	2300      	movs	r3, #0
 80244d6:	e010      	b.n	80244fa <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80244d8:	697a      	ldr	r2, [r7, #20]
 80244da:	68bb      	ldr	r3, [r7, #8]
 80244dc:	429a      	cmp	r2, r3
 80244de:	d307      	bcc.n	80244f0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80244e0:	697a      	ldr	r2, [r7, #20]
 80244e2:	68bb      	ldr	r3, [r7, #8]
 80244e4:	1ad3      	subs	r3, r2, r3
 80244e6:	617b      	str	r3, [r7, #20]
 80244e8:	693b      	ldr	r3, [r7, #16]
 80244ea:	3304      	adds	r3, #4
 80244ec:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80244ee:	e7e9      	b.n	80244c4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80244f0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80244f2:	693b      	ldr	r3, [r7, #16]
 80244f4:	681a      	ldr	r2, [r3, #0]
 80244f6:	697b      	ldr	r3, [r7, #20]
 80244f8:	4413      	add	r3, r2
}
 80244fa:	4618      	mov	r0, r3
 80244fc:	371c      	adds	r7, #28
 80244fe:	46bd      	mov	sp, r7
 8024500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024504:	4770      	bx	lr

08024506 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8024506:	b580      	push	{r7, lr}
 8024508:	b086      	sub	sp, #24
 802450a:	af00      	add	r7, sp, #0
 802450c:	6078      	str	r0, [r7, #4]
 802450e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8024510:	687b      	ldr	r3, [r7, #4]
 8024512:	681b      	ldr	r3, [r3, #0]
 8024514:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8024516:	683b      	ldr	r3, [r7, #0]
 8024518:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 802451c:	d204      	bcs.n	8024528 <dir_sdi+0x22>
 802451e:	683b      	ldr	r3, [r7, #0]
 8024520:	f003 031f 	and.w	r3, r3, #31
 8024524:	2b00      	cmp	r3, #0
 8024526:	d001      	beq.n	802452c <dir_sdi+0x26>
		return FR_INT_ERR;
 8024528:	2302      	movs	r3, #2
 802452a:	e071      	b.n	8024610 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 802452c:	687b      	ldr	r3, [r7, #4]
 802452e:	683a      	ldr	r2, [r7, #0]
 8024530:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8024532:	687b      	ldr	r3, [r7, #4]
 8024534:	689b      	ldr	r3, [r3, #8]
 8024536:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8024538:	697b      	ldr	r3, [r7, #20]
 802453a:	2b00      	cmp	r3, #0
 802453c:	d106      	bne.n	802454c <dir_sdi+0x46>
 802453e:	693b      	ldr	r3, [r7, #16]
 8024540:	781b      	ldrb	r3, [r3, #0]
 8024542:	2b02      	cmp	r3, #2
 8024544:	d902      	bls.n	802454c <dir_sdi+0x46>
		clst = fs->dirbase;
 8024546:	693b      	ldr	r3, [r7, #16]
 8024548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802454a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 802454c:	697b      	ldr	r3, [r7, #20]
 802454e:	2b00      	cmp	r3, #0
 8024550:	d10c      	bne.n	802456c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8024552:	683b      	ldr	r3, [r7, #0]
 8024554:	095b      	lsrs	r3, r3, #5
 8024556:	693a      	ldr	r2, [r7, #16]
 8024558:	8912      	ldrh	r2, [r2, #8]
 802455a:	4293      	cmp	r3, r2
 802455c:	d301      	bcc.n	8024562 <dir_sdi+0x5c>
 802455e:	2302      	movs	r3, #2
 8024560:	e056      	b.n	8024610 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8024562:	693b      	ldr	r3, [r7, #16]
 8024564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8024566:	687b      	ldr	r3, [r7, #4]
 8024568:	61da      	str	r2, [r3, #28]
 802456a:	e02d      	b.n	80245c8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 802456c:	693b      	ldr	r3, [r7, #16]
 802456e:	895b      	ldrh	r3, [r3, #10]
 8024570:	461a      	mov	r2, r3
 8024572:	693b      	ldr	r3, [r7, #16]
 8024574:	899b      	ldrh	r3, [r3, #12]
 8024576:	fb02 f303 	mul.w	r3, r2, r3
 802457a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 802457c:	e019      	b.n	80245b2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 802457e:	687b      	ldr	r3, [r7, #4]
 8024580:	6979      	ldr	r1, [r7, #20]
 8024582:	4618      	mov	r0, r3
 8024584:	f7ff fc9d 	bl	8023ec2 <get_fat>
 8024588:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 802458a:	697b      	ldr	r3, [r7, #20]
 802458c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8024590:	d101      	bne.n	8024596 <dir_sdi+0x90>
 8024592:	2301      	movs	r3, #1
 8024594:	e03c      	b.n	8024610 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8024596:	697b      	ldr	r3, [r7, #20]
 8024598:	2b01      	cmp	r3, #1
 802459a:	d904      	bls.n	80245a6 <dir_sdi+0xa0>
 802459c:	693b      	ldr	r3, [r7, #16]
 802459e:	69db      	ldr	r3, [r3, #28]
 80245a0:	697a      	ldr	r2, [r7, #20]
 80245a2:	429a      	cmp	r2, r3
 80245a4:	d301      	bcc.n	80245aa <dir_sdi+0xa4>
 80245a6:	2302      	movs	r3, #2
 80245a8:	e032      	b.n	8024610 <dir_sdi+0x10a>
			ofs -= csz;
 80245aa:	683a      	ldr	r2, [r7, #0]
 80245ac:	68fb      	ldr	r3, [r7, #12]
 80245ae:	1ad3      	subs	r3, r2, r3
 80245b0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80245b2:	683a      	ldr	r2, [r7, #0]
 80245b4:	68fb      	ldr	r3, [r7, #12]
 80245b6:	429a      	cmp	r2, r3
 80245b8:	d2e1      	bcs.n	802457e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80245ba:	6979      	ldr	r1, [r7, #20]
 80245bc:	6938      	ldr	r0, [r7, #16]
 80245be:	f7ff fc61 	bl	8023e84 <clust2sect>
 80245c2:	4602      	mov	r2, r0
 80245c4:	687b      	ldr	r3, [r7, #4]
 80245c6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80245c8:	687b      	ldr	r3, [r7, #4]
 80245ca:	697a      	ldr	r2, [r7, #20]
 80245cc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80245ce:	687b      	ldr	r3, [r7, #4]
 80245d0:	69db      	ldr	r3, [r3, #28]
 80245d2:	2b00      	cmp	r3, #0
 80245d4:	d101      	bne.n	80245da <dir_sdi+0xd4>
 80245d6:	2302      	movs	r3, #2
 80245d8:	e01a      	b.n	8024610 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80245da:	687b      	ldr	r3, [r7, #4]
 80245dc:	69da      	ldr	r2, [r3, #28]
 80245de:	693b      	ldr	r3, [r7, #16]
 80245e0:	899b      	ldrh	r3, [r3, #12]
 80245e2:	4619      	mov	r1, r3
 80245e4:	683b      	ldr	r3, [r7, #0]
 80245e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80245ea:	441a      	add	r2, r3
 80245ec:	687b      	ldr	r3, [r7, #4]
 80245ee:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80245f0:	693b      	ldr	r3, [r7, #16]
 80245f2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80245f6:	693b      	ldr	r3, [r7, #16]
 80245f8:	899b      	ldrh	r3, [r3, #12]
 80245fa:	461a      	mov	r2, r3
 80245fc:	683b      	ldr	r3, [r7, #0]
 80245fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8024602:	fb00 f202 	mul.w	r2, r0, r2
 8024606:	1a9b      	subs	r3, r3, r2
 8024608:	18ca      	adds	r2, r1, r3
 802460a:	687b      	ldr	r3, [r7, #4]
 802460c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 802460e:	2300      	movs	r3, #0
}
 8024610:	4618      	mov	r0, r3
 8024612:	3718      	adds	r7, #24
 8024614:	46bd      	mov	sp, r7
 8024616:	bd80      	pop	{r7, pc}

08024618 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8024618:	b580      	push	{r7, lr}
 802461a:	b086      	sub	sp, #24
 802461c:	af00      	add	r7, sp, #0
 802461e:	6078      	str	r0, [r7, #4]
 8024620:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8024622:	687b      	ldr	r3, [r7, #4]
 8024624:	681b      	ldr	r3, [r3, #0]
 8024626:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8024628:	687b      	ldr	r3, [r7, #4]
 802462a:	695b      	ldr	r3, [r3, #20]
 802462c:	3320      	adds	r3, #32
 802462e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8024630:	687b      	ldr	r3, [r7, #4]
 8024632:	69db      	ldr	r3, [r3, #28]
 8024634:	2b00      	cmp	r3, #0
 8024636:	d003      	beq.n	8024640 <dir_next+0x28>
 8024638:	68bb      	ldr	r3, [r7, #8]
 802463a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 802463e:	d301      	bcc.n	8024644 <dir_next+0x2c>
 8024640:	2304      	movs	r3, #4
 8024642:	e0bb      	b.n	80247bc <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8024644:	68fb      	ldr	r3, [r7, #12]
 8024646:	899b      	ldrh	r3, [r3, #12]
 8024648:	461a      	mov	r2, r3
 802464a:	68bb      	ldr	r3, [r7, #8]
 802464c:	fbb3 f1f2 	udiv	r1, r3, r2
 8024650:	fb01 f202 	mul.w	r2, r1, r2
 8024654:	1a9b      	subs	r3, r3, r2
 8024656:	2b00      	cmp	r3, #0
 8024658:	f040 809d 	bne.w	8024796 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 802465c:	687b      	ldr	r3, [r7, #4]
 802465e:	69db      	ldr	r3, [r3, #28]
 8024660:	1c5a      	adds	r2, r3, #1
 8024662:	687b      	ldr	r3, [r7, #4]
 8024664:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8024666:	687b      	ldr	r3, [r7, #4]
 8024668:	699b      	ldr	r3, [r3, #24]
 802466a:	2b00      	cmp	r3, #0
 802466c:	d10b      	bne.n	8024686 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 802466e:	68bb      	ldr	r3, [r7, #8]
 8024670:	095b      	lsrs	r3, r3, #5
 8024672:	68fa      	ldr	r2, [r7, #12]
 8024674:	8912      	ldrh	r2, [r2, #8]
 8024676:	4293      	cmp	r3, r2
 8024678:	f0c0 808d 	bcc.w	8024796 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 802467c:	687b      	ldr	r3, [r7, #4]
 802467e:	2200      	movs	r2, #0
 8024680:	61da      	str	r2, [r3, #28]
 8024682:	2304      	movs	r3, #4
 8024684:	e09a      	b.n	80247bc <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8024686:	68fb      	ldr	r3, [r7, #12]
 8024688:	899b      	ldrh	r3, [r3, #12]
 802468a:	461a      	mov	r2, r3
 802468c:	68bb      	ldr	r3, [r7, #8]
 802468e:	fbb3 f3f2 	udiv	r3, r3, r2
 8024692:	68fa      	ldr	r2, [r7, #12]
 8024694:	8952      	ldrh	r2, [r2, #10]
 8024696:	3a01      	subs	r2, #1
 8024698:	4013      	ands	r3, r2
 802469a:	2b00      	cmp	r3, #0
 802469c:	d17b      	bne.n	8024796 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 802469e:	687a      	ldr	r2, [r7, #4]
 80246a0:	687b      	ldr	r3, [r7, #4]
 80246a2:	699b      	ldr	r3, [r3, #24]
 80246a4:	4619      	mov	r1, r3
 80246a6:	4610      	mov	r0, r2
 80246a8:	f7ff fc0b 	bl	8023ec2 <get_fat>
 80246ac:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80246ae:	697b      	ldr	r3, [r7, #20]
 80246b0:	2b01      	cmp	r3, #1
 80246b2:	d801      	bhi.n	80246b8 <dir_next+0xa0>
 80246b4:	2302      	movs	r3, #2
 80246b6:	e081      	b.n	80247bc <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80246b8:	697b      	ldr	r3, [r7, #20]
 80246ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80246be:	d101      	bne.n	80246c4 <dir_next+0xac>
 80246c0:	2301      	movs	r3, #1
 80246c2:	e07b      	b.n	80247bc <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80246c4:	68fb      	ldr	r3, [r7, #12]
 80246c6:	69db      	ldr	r3, [r3, #28]
 80246c8:	697a      	ldr	r2, [r7, #20]
 80246ca:	429a      	cmp	r2, r3
 80246cc:	d359      	bcc.n	8024782 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80246ce:	683b      	ldr	r3, [r7, #0]
 80246d0:	2b00      	cmp	r3, #0
 80246d2:	d104      	bne.n	80246de <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80246d4:	687b      	ldr	r3, [r7, #4]
 80246d6:	2200      	movs	r2, #0
 80246d8:	61da      	str	r2, [r3, #28]
 80246da:	2304      	movs	r3, #4
 80246dc:	e06e      	b.n	80247bc <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80246de:	687a      	ldr	r2, [r7, #4]
 80246e0:	687b      	ldr	r3, [r7, #4]
 80246e2:	699b      	ldr	r3, [r3, #24]
 80246e4:	4619      	mov	r1, r3
 80246e6:	4610      	mov	r0, r2
 80246e8:	f7ff fe3d 	bl	8024366 <create_chain>
 80246ec:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80246ee:	697b      	ldr	r3, [r7, #20]
 80246f0:	2b00      	cmp	r3, #0
 80246f2:	d101      	bne.n	80246f8 <dir_next+0xe0>
 80246f4:	2307      	movs	r3, #7
 80246f6:	e061      	b.n	80247bc <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80246f8:	697b      	ldr	r3, [r7, #20]
 80246fa:	2b01      	cmp	r3, #1
 80246fc:	d101      	bne.n	8024702 <dir_next+0xea>
 80246fe:	2302      	movs	r3, #2
 8024700:	e05c      	b.n	80247bc <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8024702:	697b      	ldr	r3, [r7, #20]
 8024704:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8024708:	d101      	bne.n	802470e <dir_next+0xf6>
 802470a:	2301      	movs	r3, #1
 802470c:	e056      	b.n	80247bc <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 802470e:	68f8      	ldr	r0, [r7, #12]
 8024710:	f7ff fad6 	bl	8023cc0 <sync_window>
 8024714:	4603      	mov	r3, r0
 8024716:	2b00      	cmp	r3, #0
 8024718:	d001      	beq.n	802471e <dir_next+0x106>
 802471a:	2301      	movs	r3, #1
 802471c:	e04e      	b.n	80247bc <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 802471e:	68fb      	ldr	r3, [r7, #12]
 8024720:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8024724:	68fb      	ldr	r3, [r7, #12]
 8024726:	899b      	ldrh	r3, [r3, #12]
 8024728:	461a      	mov	r2, r3
 802472a:	2100      	movs	r1, #0
 802472c:	f7ff f8cd 	bl	80238ca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8024730:	2300      	movs	r3, #0
 8024732:	613b      	str	r3, [r7, #16]
 8024734:	6979      	ldr	r1, [r7, #20]
 8024736:	68f8      	ldr	r0, [r7, #12]
 8024738:	f7ff fba4 	bl	8023e84 <clust2sect>
 802473c:	4602      	mov	r2, r0
 802473e:	68fb      	ldr	r3, [r7, #12]
 8024740:	635a      	str	r2, [r3, #52]	@ 0x34
 8024742:	e012      	b.n	802476a <dir_next+0x152>
						fs->wflag = 1;
 8024744:	68fb      	ldr	r3, [r7, #12]
 8024746:	2201      	movs	r2, #1
 8024748:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 802474a:	68f8      	ldr	r0, [r7, #12]
 802474c:	f7ff fab8 	bl	8023cc0 <sync_window>
 8024750:	4603      	mov	r3, r0
 8024752:	2b00      	cmp	r3, #0
 8024754:	d001      	beq.n	802475a <dir_next+0x142>
 8024756:	2301      	movs	r3, #1
 8024758:	e030      	b.n	80247bc <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 802475a:	693b      	ldr	r3, [r7, #16]
 802475c:	3301      	adds	r3, #1
 802475e:	613b      	str	r3, [r7, #16]
 8024760:	68fb      	ldr	r3, [r7, #12]
 8024762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8024764:	1c5a      	adds	r2, r3, #1
 8024766:	68fb      	ldr	r3, [r7, #12]
 8024768:	635a      	str	r2, [r3, #52]	@ 0x34
 802476a:	68fb      	ldr	r3, [r7, #12]
 802476c:	895b      	ldrh	r3, [r3, #10]
 802476e:	461a      	mov	r2, r3
 8024770:	693b      	ldr	r3, [r7, #16]
 8024772:	4293      	cmp	r3, r2
 8024774:	d3e6      	bcc.n	8024744 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8024776:	68fb      	ldr	r3, [r7, #12]
 8024778:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802477a:	693b      	ldr	r3, [r7, #16]
 802477c:	1ad2      	subs	r2, r2, r3
 802477e:	68fb      	ldr	r3, [r7, #12]
 8024780:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8024782:	687b      	ldr	r3, [r7, #4]
 8024784:	697a      	ldr	r2, [r7, #20]
 8024786:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8024788:	6979      	ldr	r1, [r7, #20]
 802478a:	68f8      	ldr	r0, [r7, #12]
 802478c:	f7ff fb7a 	bl	8023e84 <clust2sect>
 8024790:	4602      	mov	r2, r0
 8024792:	687b      	ldr	r3, [r7, #4]
 8024794:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8024796:	687b      	ldr	r3, [r7, #4]
 8024798:	68ba      	ldr	r2, [r7, #8]
 802479a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 802479c:	68fb      	ldr	r3, [r7, #12]
 802479e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80247a2:	68fb      	ldr	r3, [r7, #12]
 80247a4:	899b      	ldrh	r3, [r3, #12]
 80247a6:	461a      	mov	r2, r3
 80247a8:	68bb      	ldr	r3, [r7, #8]
 80247aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80247ae:	fb00 f202 	mul.w	r2, r0, r2
 80247b2:	1a9b      	subs	r3, r3, r2
 80247b4:	18ca      	adds	r2, r1, r3
 80247b6:	687b      	ldr	r3, [r7, #4]
 80247b8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80247ba:	2300      	movs	r3, #0
}
 80247bc:	4618      	mov	r0, r3
 80247be:	3718      	adds	r7, #24
 80247c0:	46bd      	mov	sp, r7
 80247c2:	bd80      	pop	{r7, pc}

080247c4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80247c4:	b580      	push	{r7, lr}
 80247c6:	b086      	sub	sp, #24
 80247c8:	af00      	add	r7, sp, #0
 80247ca:	6078      	str	r0, [r7, #4]
 80247cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80247ce:	687b      	ldr	r3, [r7, #4]
 80247d0:	681b      	ldr	r3, [r3, #0]
 80247d2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80247d4:	2100      	movs	r1, #0
 80247d6:	6878      	ldr	r0, [r7, #4]
 80247d8:	f7ff fe95 	bl	8024506 <dir_sdi>
 80247dc:	4603      	mov	r3, r0
 80247de:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80247e0:	7dfb      	ldrb	r3, [r7, #23]
 80247e2:	2b00      	cmp	r3, #0
 80247e4:	d12b      	bne.n	802483e <dir_alloc+0x7a>
		n = 0;
 80247e6:	2300      	movs	r3, #0
 80247e8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80247ea:	687b      	ldr	r3, [r7, #4]
 80247ec:	69db      	ldr	r3, [r3, #28]
 80247ee:	4619      	mov	r1, r3
 80247f0:	68f8      	ldr	r0, [r7, #12]
 80247f2:	f7ff faa9 	bl	8023d48 <move_window>
 80247f6:	4603      	mov	r3, r0
 80247f8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80247fa:	7dfb      	ldrb	r3, [r7, #23]
 80247fc:	2b00      	cmp	r3, #0
 80247fe:	d11d      	bne.n	802483c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8024800:	687b      	ldr	r3, [r7, #4]
 8024802:	6a1b      	ldr	r3, [r3, #32]
 8024804:	781b      	ldrb	r3, [r3, #0]
 8024806:	2be5      	cmp	r3, #229	@ 0xe5
 8024808:	d004      	beq.n	8024814 <dir_alloc+0x50>
 802480a:	687b      	ldr	r3, [r7, #4]
 802480c:	6a1b      	ldr	r3, [r3, #32]
 802480e:	781b      	ldrb	r3, [r3, #0]
 8024810:	2b00      	cmp	r3, #0
 8024812:	d107      	bne.n	8024824 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8024814:	693b      	ldr	r3, [r7, #16]
 8024816:	3301      	adds	r3, #1
 8024818:	613b      	str	r3, [r7, #16]
 802481a:	693a      	ldr	r2, [r7, #16]
 802481c:	683b      	ldr	r3, [r7, #0]
 802481e:	429a      	cmp	r2, r3
 8024820:	d102      	bne.n	8024828 <dir_alloc+0x64>
 8024822:	e00c      	b.n	802483e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8024824:	2300      	movs	r3, #0
 8024826:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8024828:	2101      	movs	r1, #1
 802482a:	6878      	ldr	r0, [r7, #4]
 802482c:	f7ff fef4 	bl	8024618 <dir_next>
 8024830:	4603      	mov	r3, r0
 8024832:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8024834:	7dfb      	ldrb	r3, [r7, #23]
 8024836:	2b00      	cmp	r3, #0
 8024838:	d0d7      	beq.n	80247ea <dir_alloc+0x26>
 802483a:	e000      	b.n	802483e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 802483c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 802483e:	7dfb      	ldrb	r3, [r7, #23]
 8024840:	2b04      	cmp	r3, #4
 8024842:	d101      	bne.n	8024848 <dir_alloc+0x84>
 8024844:	2307      	movs	r3, #7
 8024846:	75fb      	strb	r3, [r7, #23]
	return res;
 8024848:	7dfb      	ldrb	r3, [r7, #23]
}
 802484a:	4618      	mov	r0, r3
 802484c:	3718      	adds	r7, #24
 802484e:	46bd      	mov	sp, r7
 8024850:	bd80      	pop	{r7, pc}

08024852 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8024852:	b580      	push	{r7, lr}
 8024854:	b084      	sub	sp, #16
 8024856:	af00      	add	r7, sp, #0
 8024858:	6078      	str	r0, [r7, #4]
 802485a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 802485c:	683b      	ldr	r3, [r7, #0]
 802485e:	331a      	adds	r3, #26
 8024860:	4618      	mov	r0, r3
 8024862:	f7fe ff8f 	bl	8023784 <ld_word>
 8024866:	4603      	mov	r3, r0
 8024868:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 802486a:	687b      	ldr	r3, [r7, #4]
 802486c:	781b      	ldrb	r3, [r3, #0]
 802486e:	2b03      	cmp	r3, #3
 8024870:	d109      	bne.n	8024886 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8024872:	683b      	ldr	r3, [r7, #0]
 8024874:	3314      	adds	r3, #20
 8024876:	4618      	mov	r0, r3
 8024878:	f7fe ff84 	bl	8023784 <ld_word>
 802487c:	4603      	mov	r3, r0
 802487e:	041b      	lsls	r3, r3, #16
 8024880:	68fa      	ldr	r2, [r7, #12]
 8024882:	4313      	orrs	r3, r2
 8024884:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8024886:	68fb      	ldr	r3, [r7, #12]
}
 8024888:	4618      	mov	r0, r3
 802488a:	3710      	adds	r7, #16
 802488c:	46bd      	mov	sp, r7
 802488e:	bd80      	pop	{r7, pc}

08024890 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8024890:	b580      	push	{r7, lr}
 8024892:	b084      	sub	sp, #16
 8024894:	af00      	add	r7, sp, #0
 8024896:	60f8      	str	r0, [r7, #12]
 8024898:	60b9      	str	r1, [r7, #8]
 802489a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 802489c:	68bb      	ldr	r3, [r7, #8]
 802489e:	331a      	adds	r3, #26
 80248a0:	687a      	ldr	r2, [r7, #4]
 80248a2:	b292      	uxth	r2, r2
 80248a4:	4611      	mov	r1, r2
 80248a6:	4618      	mov	r0, r3
 80248a8:	f7fe ffa7 	bl	80237fa <st_word>
	if (fs->fs_type == FS_FAT32) {
 80248ac:	68fb      	ldr	r3, [r7, #12]
 80248ae:	781b      	ldrb	r3, [r3, #0]
 80248b0:	2b03      	cmp	r3, #3
 80248b2:	d109      	bne.n	80248c8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80248b4:	68bb      	ldr	r3, [r7, #8]
 80248b6:	f103 0214 	add.w	r2, r3, #20
 80248ba:	687b      	ldr	r3, [r7, #4]
 80248bc:	0c1b      	lsrs	r3, r3, #16
 80248be:	b29b      	uxth	r3, r3
 80248c0:	4619      	mov	r1, r3
 80248c2:	4610      	mov	r0, r2
 80248c4:	f7fe ff99 	bl	80237fa <st_word>
	}
}
 80248c8:	bf00      	nop
 80248ca:	3710      	adds	r7, #16
 80248cc:	46bd      	mov	sp, r7
 80248ce:	bd80      	pop	{r7, pc}

080248d0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80248d0:	b580      	push	{r7, lr}
 80248d2:	b086      	sub	sp, #24
 80248d4:	af00      	add	r7, sp, #0
 80248d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80248d8:	687b      	ldr	r3, [r7, #4]
 80248da:	681b      	ldr	r3, [r3, #0]
 80248dc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80248de:	2100      	movs	r1, #0
 80248e0:	6878      	ldr	r0, [r7, #4]
 80248e2:	f7ff fe10 	bl	8024506 <dir_sdi>
 80248e6:	4603      	mov	r3, r0
 80248e8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80248ea:	7dfb      	ldrb	r3, [r7, #23]
 80248ec:	2b00      	cmp	r3, #0
 80248ee:	d001      	beq.n	80248f4 <dir_find+0x24>
 80248f0:	7dfb      	ldrb	r3, [r7, #23]
 80248f2:	e03e      	b.n	8024972 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80248f4:	687b      	ldr	r3, [r7, #4]
 80248f6:	69db      	ldr	r3, [r3, #28]
 80248f8:	4619      	mov	r1, r3
 80248fa:	6938      	ldr	r0, [r7, #16]
 80248fc:	f7ff fa24 	bl	8023d48 <move_window>
 8024900:	4603      	mov	r3, r0
 8024902:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8024904:	7dfb      	ldrb	r3, [r7, #23]
 8024906:	2b00      	cmp	r3, #0
 8024908:	d12f      	bne.n	802496a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 802490a:	687b      	ldr	r3, [r7, #4]
 802490c:	6a1b      	ldr	r3, [r3, #32]
 802490e:	781b      	ldrb	r3, [r3, #0]
 8024910:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8024912:	7bfb      	ldrb	r3, [r7, #15]
 8024914:	2b00      	cmp	r3, #0
 8024916:	d102      	bne.n	802491e <dir_find+0x4e>
 8024918:	2304      	movs	r3, #4
 802491a:	75fb      	strb	r3, [r7, #23]
 802491c:	e028      	b.n	8024970 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 802491e:	687b      	ldr	r3, [r7, #4]
 8024920:	6a1b      	ldr	r3, [r3, #32]
 8024922:	330b      	adds	r3, #11
 8024924:	781b      	ldrb	r3, [r3, #0]
 8024926:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802492a:	b2da      	uxtb	r2, r3
 802492c:	687b      	ldr	r3, [r7, #4]
 802492e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8024930:	687b      	ldr	r3, [r7, #4]
 8024932:	6a1b      	ldr	r3, [r3, #32]
 8024934:	330b      	adds	r3, #11
 8024936:	781b      	ldrb	r3, [r3, #0]
 8024938:	f003 0308 	and.w	r3, r3, #8
 802493c:	2b00      	cmp	r3, #0
 802493e:	d10a      	bne.n	8024956 <dir_find+0x86>
 8024940:	687b      	ldr	r3, [r7, #4]
 8024942:	6a18      	ldr	r0, [r3, #32]
 8024944:	687b      	ldr	r3, [r7, #4]
 8024946:	3324      	adds	r3, #36	@ 0x24
 8024948:	220b      	movs	r2, #11
 802494a:	4619      	mov	r1, r3
 802494c:	f7fe ffd8 	bl	8023900 <mem_cmp>
 8024950:	4603      	mov	r3, r0
 8024952:	2b00      	cmp	r3, #0
 8024954:	d00b      	beq.n	802496e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8024956:	2100      	movs	r1, #0
 8024958:	6878      	ldr	r0, [r7, #4]
 802495a:	f7ff fe5d 	bl	8024618 <dir_next>
 802495e:	4603      	mov	r3, r0
 8024960:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8024962:	7dfb      	ldrb	r3, [r7, #23]
 8024964:	2b00      	cmp	r3, #0
 8024966:	d0c5      	beq.n	80248f4 <dir_find+0x24>
 8024968:	e002      	b.n	8024970 <dir_find+0xa0>
		if (res != FR_OK) break;
 802496a:	bf00      	nop
 802496c:	e000      	b.n	8024970 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 802496e:	bf00      	nop

	return res;
 8024970:	7dfb      	ldrb	r3, [r7, #23]
}
 8024972:	4618      	mov	r0, r3
 8024974:	3718      	adds	r7, #24
 8024976:	46bd      	mov	sp, r7
 8024978:	bd80      	pop	{r7, pc}

0802497a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 802497a:	b580      	push	{r7, lr}
 802497c:	b084      	sub	sp, #16
 802497e:	af00      	add	r7, sp, #0
 8024980:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8024982:	687b      	ldr	r3, [r7, #4]
 8024984:	681b      	ldr	r3, [r3, #0]
 8024986:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8024988:	2101      	movs	r1, #1
 802498a:	6878      	ldr	r0, [r7, #4]
 802498c:	f7ff ff1a 	bl	80247c4 <dir_alloc>
 8024990:	4603      	mov	r3, r0
 8024992:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8024994:	7bfb      	ldrb	r3, [r7, #15]
 8024996:	2b00      	cmp	r3, #0
 8024998:	d11c      	bne.n	80249d4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 802499a:	687b      	ldr	r3, [r7, #4]
 802499c:	69db      	ldr	r3, [r3, #28]
 802499e:	4619      	mov	r1, r3
 80249a0:	68b8      	ldr	r0, [r7, #8]
 80249a2:	f7ff f9d1 	bl	8023d48 <move_window>
 80249a6:	4603      	mov	r3, r0
 80249a8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80249aa:	7bfb      	ldrb	r3, [r7, #15]
 80249ac:	2b00      	cmp	r3, #0
 80249ae:	d111      	bne.n	80249d4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80249b0:	687b      	ldr	r3, [r7, #4]
 80249b2:	6a1b      	ldr	r3, [r3, #32]
 80249b4:	2220      	movs	r2, #32
 80249b6:	2100      	movs	r1, #0
 80249b8:	4618      	mov	r0, r3
 80249ba:	f7fe ff86 	bl	80238ca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80249be:	687b      	ldr	r3, [r7, #4]
 80249c0:	6a18      	ldr	r0, [r3, #32]
 80249c2:	687b      	ldr	r3, [r7, #4]
 80249c4:	3324      	adds	r3, #36	@ 0x24
 80249c6:	220b      	movs	r2, #11
 80249c8:	4619      	mov	r1, r3
 80249ca:	f7fe ff5d 	bl	8023888 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80249ce:	68bb      	ldr	r3, [r7, #8]
 80249d0:	2201      	movs	r2, #1
 80249d2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80249d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80249d6:	4618      	mov	r0, r3
 80249d8:	3710      	adds	r7, #16
 80249da:	46bd      	mov	sp, r7
 80249dc:	bd80      	pop	{r7, pc}

080249de <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80249de:	b580      	push	{r7, lr}
 80249e0:	b086      	sub	sp, #24
 80249e2:	af00      	add	r7, sp, #0
 80249e4:	6078      	str	r0, [r7, #4]
 80249e6:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80249e8:	683b      	ldr	r3, [r7, #0]
 80249ea:	2200      	movs	r2, #0
 80249ec:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80249ee:	687b      	ldr	r3, [r7, #4]
 80249f0:	69db      	ldr	r3, [r3, #28]
 80249f2:	2b00      	cmp	r3, #0
 80249f4:	d04f      	beq.n	8024a96 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80249f6:	2300      	movs	r3, #0
 80249f8:	613b      	str	r3, [r7, #16]
 80249fa:	693b      	ldr	r3, [r7, #16]
 80249fc:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80249fe:	e022      	b.n	8024a46 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 8024a00:	687b      	ldr	r3, [r7, #4]
 8024a02:	6a1a      	ldr	r2, [r3, #32]
 8024a04:	697b      	ldr	r3, [r7, #20]
 8024a06:	1c59      	adds	r1, r3, #1
 8024a08:	6179      	str	r1, [r7, #20]
 8024a0a:	4413      	add	r3, r2
 8024a0c:	781b      	ldrb	r3, [r3, #0]
 8024a0e:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8024a10:	7bfb      	ldrb	r3, [r7, #15]
 8024a12:	2b20      	cmp	r3, #32
 8024a14:	d016      	beq.n	8024a44 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8024a16:	7bfb      	ldrb	r3, [r7, #15]
 8024a18:	2b05      	cmp	r3, #5
 8024a1a:	d101      	bne.n	8024a20 <get_fileinfo+0x42>
 8024a1c:	23e5      	movs	r3, #229	@ 0xe5
 8024a1e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8024a20:	697b      	ldr	r3, [r7, #20]
 8024a22:	2b09      	cmp	r3, #9
 8024a24:	d106      	bne.n	8024a34 <get_fileinfo+0x56>
 8024a26:	693b      	ldr	r3, [r7, #16]
 8024a28:	1c5a      	adds	r2, r3, #1
 8024a2a:	613a      	str	r2, [r7, #16]
 8024a2c:	683a      	ldr	r2, [r7, #0]
 8024a2e:	4413      	add	r3, r2
 8024a30:	222e      	movs	r2, #46	@ 0x2e
 8024a32:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8024a34:	693b      	ldr	r3, [r7, #16]
 8024a36:	1c5a      	adds	r2, r3, #1
 8024a38:	613a      	str	r2, [r7, #16]
 8024a3a:	683a      	ldr	r2, [r7, #0]
 8024a3c:	4413      	add	r3, r2
 8024a3e:	7bfa      	ldrb	r2, [r7, #15]
 8024a40:	725a      	strb	r2, [r3, #9]
 8024a42:	e000      	b.n	8024a46 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 8024a44:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8024a46:	697b      	ldr	r3, [r7, #20]
 8024a48:	2b0a      	cmp	r3, #10
 8024a4a:	d9d9      	bls.n	8024a00 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8024a4c:	683a      	ldr	r2, [r7, #0]
 8024a4e:	693b      	ldr	r3, [r7, #16]
 8024a50:	4413      	add	r3, r2
 8024a52:	3309      	adds	r3, #9
 8024a54:	2200      	movs	r2, #0
 8024a56:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8024a58:	687b      	ldr	r3, [r7, #4]
 8024a5a:	6a1b      	ldr	r3, [r3, #32]
 8024a5c:	7ada      	ldrb	r2, [r3, #11]
 8024a5e:	683b      	ldr	r3, [r7, #0]
 8024a60:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8024a62:	687b      	ldr	r3, [r7, #4]
 8024a64:	6a1b      	ldr	r3, [r3, #32]
 8024a66:	331c      	adds	r3, #28
 8024a68:	4618      	mov	r0, r3
 8024a6a:	f7fe fea3 	bl	80237b4 <ld_dword>
 8024a6e:	4602      	mov	r2, r0
 8024a70:	683b      	ldr	r3, [r7, #0]
 8024a72:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8024a74:	687b      	ldr	r3, [r7, #4]
 8024a76:	6a1b      	ldr	r3, [r3, #32]
 8024a78:	3316      	adds	r3, #22
 8024a7a:	4618      	mov	r0, r3
 8024a7c:	f7fe fe9a 	bl	80237b4 <ld_dword>
 8024a80:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8024a82:	68bb      	ldr	r3, [r7, #8]
 8024a84:	b29a      	uxth	r2, r3
 8024a86:	683b      	ldr	r3, [r7, #0]
 8024a88:	80da      	strh	r2, [r3, #6]
 8024a8a:	68bb      	ldr	r3, [r7, #8]
 8024a8c:	0c1b      	lsrs	r3, r3, #16
 8024a8e:	b29a      	uxth	r2, r3
 8024a90:	683b      	ldr	r3, [r7, #0]
 8024a92:	809a      	strh	r2, [r3, #4]
 8024a94:	e000      	b.n	8024a98 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8024a96:	bf00      	nop
}
 8024a98:	3718      	adds	r7, #24
 8024a9a:	46bd      	mov	sp, r7
 8024a9c:	bd80      	pop	{r7, pc}
	...

08024aa0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8024aa0:	b580      	push	{r7, lr}
 8024aa2:	b088      	sub	sp, #32
 8024aa4:	af00      	add	r7, sp, #0
 8024aa6:	6078      	str	r0, [r7, #4]
 8024aa8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8024aaa:	683b      	ldr	r3, [r7, #0]
 8024aac:	681b      	ldr	r3, [r3, #0]
 8024aae:	60fb      	str	r3, [r7, #12]
 8024ab0:	687b      	ldr	r3, [r7, #4]
 8024ab2:	3324      	adds	r3, #36	@ 0x24
 8024ab4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8024ab6:	220b      	movs	r2, #11
 8024ab8:	2120      	movs	r1, #32
 8024aba:	68b8      	ldr	r0, [r7, #8]
 8024abc:	f7fe ff05 	bl	80238ca <mem_set>
	si = i = 0; ni = 8;
 8024ac0:	2300      	movs	r3, #0
 8024ac2:	613b      	str	r3, [r7, #16]
 8024ac4:	693b      	ldr	r3, [r7, #16]
 8024ac6:	61fb      	str	r3, [r7, #28]
 8024ac8:	2308      	movs	r3, #8
 8024aca:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8024acc:	69fb      	ldr	r3, [r7, #28]
 8024ace:	1c5a      	adds	r2, r3, #1
 8024ad0:	61fa      	str	r2, [r7, #28]
 8024ad2:	68fa      	ldr	r2, [r7, #12]
 8024ad4:	4413      	add	r3, r2
 8024ad6:	781b      	ldrb	r3, [r3, #0]
 8024ad8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8024ada:	7efb      	ldrb	r3, [r7, #27]
 8024adc:	2b20      	cmp	r3, #32
 8024ade:	d94e      	bls.n	8024b7e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8024ae0:	7efb      	ldrb	r3, [r7, #27]
 8024ae2:	2b2f      	cmp	r3, #47	@ 0x2f
 8024ae4:	d006      	beq.n	8024af4 <create_name+0x54>
 8024ae6:	7efb      	ldrb	r3, [r7, #27]
 8024ae8:	2b5c      	cmp	r3, #92	@ 0x5c
 8024aea:	d110      	bne.n	8024b0e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8024aec:	e002      	b.n	8024af4 <create_name+0x54>
 8024aee:	69fb      	ldr	r3, [r7, #28]
 8024af0:	3301      	adds	r3, #1
 8024af2:	61fb      	str	r3, [r7, #28]
 8024af4:	68fa      	ldr	r2, [r7, #12]
 8024af6:	69fb      	ldr	r3, [r7, #28]
 8024af8:	4413      	add	r3, r2
 8024afa:	781b      	ldrb	r3, [r3, #0]
 8024afc:	2b2f      	cmp	r3, #47	@ 0x2f
 8024afe:	d0f6      	beq.n	8024aee <create_name+0x4e>
 8024b00:	68fa      	ldr	r2, [r7, #12]
 8024b02:	69fb      	ldr	r3, [r7, #28]
 8024b04:	4413      	add	r3, r2
 8024b06:	781b      	ldrb	r3, [r3, #0]
 8024b08:	2b5c      	cmp	r3, #92	@ 0x5c
 8024b0a:	d0f0      	beq.n	8024aee <create_name+0x4e>
			break;
 8024b0c:	e038      	b.n	8024b80 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8024b0e:	7efb      	ldrb	r3, [r7, #27]
 8024b10:	2b2e      	cmp	r3, #46	@ 0x2e
 8024b12:	d003      	beq.n	8024b1c <create_name+0x7c>
 8024b14:	693a      	ldr	r2, [r7, #16]
 8024b16:	697b      	ldr	r3, [r7, #20]
 8024b18:	429a      	cmp	r2, r3
 8024b1a:	d30c      	bcc.n	8024b36 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8024b1c:	697b      	ldr	r3, [r7, #20]
 8024b1e:	2b0b      	cmp	r3, #11
 8024b20:	d002      	beq.n	8024b28 <create_name+0x88>
 8024b22:	7efb      	ldrb	r3, [r7, #27]
 8024b24:	2b2e      	cmp	r3, #46	@ 0x2e
 8024b26:	d001      	beq.n	8024b2c <create_name+0x8c>
 8024b28:	2306      	movs	r3, #6
 8024b2a:	e044      	b.n	8024bb6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8024b2c:	2308      	movs	r3, #8
 8024b2e:	613b      	str	r3, [r7, #16]
 8024b30:	230b      	movs	r3, #11
 8024b32:	617b      	str	r3, [r7, #20]
			continue;
 8024b34:	e022      	b.n	8024b7c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8024b36:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8024b3a:	2b00      	cmp	r3, #0
 8024b3c:	da04      	bge.n	8024b48 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8024b3e:	7efb      	ldrb	r3, [r7, #27]
 8024b40:	3b80      	subs	r3, #128	@ 0x80
 8024b42:	4a1f      	ldr	r2, [pc, #124]	@ (8024bc0 <create_name+0x120>)
 8024b44:	5cd3      	ldrb	r3, [r2, r3]
 8024b46:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8024b48:	7efb      	ldrb	r3, [r7, #27]
 8024b4a:	4619      	mov	r1, r3
 8024b4c:	481d      	ldr	r0, [pc, #116]	@ (8024bc4 <create_name+0x124>)
 8024b4e:	f7fe fefe 	bl	802394e <chk_chr>
 8024b52:	4603      	mov	r3, r0
 8024b54:	2b00      	cmp	r3, #0
 8024b56:	d001      	beq.n	8024b5c <create_name+0xbc>
 8024b58:	2306      	movs	r3, #6
 8024b5a:	e02c      	b.n	8024bb6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8024b5c:	7efb      	ldrb	r3, [r7, #27]
 8024b5e:	2b60      	cmp	r3, #96	@ 0x60
 8024b60:	d905      	bls.n	8024b6e <create_name+0xce>
 8024b62:	7efb      	ldrb	r3, [r7, #27]
 8024b64:	2b7a      	cmp	r3, #122	@ 0x7a
 8024b66:	d802      	bhi.n	8024b6e <create_name+0xce>
 8024b68:	7efb      	ldrb	r3, [r7, #27]
 8024b6a:	3b20      	subs	r3, #32
 8024b6c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8024b6e:	693b      	ldr	r3, [r7, #16]
 8024b70:	1c5a      	adds	r2, r3, #1
 8024b72:	613a      	str	r2, [r7, #16]
 8024b74:	68ba      	ldr	r2, [r7, #8]
 8024b76:	4413      	add	r3, r2
 8024b78:	7efa      	ldrb	r2, [r7, #27]
 8024b7a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8024b7c:	e7a6      	b.n	8024acc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8024b7e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8024b80:	68fa      	ldr	r2, [r7, #12]
 8024b82:	69fb      	ldr	r3, [r7, #28]
 8024b84:	441a      	add	r2, r3
 8024b86:	683b      	ldr	r3, [r7, #0]
 8024b88:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8024b8a:	693b      	ldr	r3, [r7, #16]
 8024b8c:	2b00      	cmp	r3, #0
 8024b8e:	d101      	bne.n	8024b94 <create_name+0xf4>
 8024b90:	2306      	movs	r3, #6
 8024b92:	e010      	b.n	8024bb6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8024b94:	68bb      	ldr	r3, [r7, #8]
 8024b96:	781b      	ldrb	r3, [r3, #0]
 8024b98:	2be5      	cmp	r3, #229	@ 0xe5
 8024b9a:	d102      	bne.n	8024ba2 <create_name+0x102>
 8024b9c:	68bb      	ldr	r3, [r7, #8]
 8024b9e:	2205      	movs	r2, #5
 8024ba0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8024ba2:	7efb      	ldrb	r3, [r7, #27]
 8024ba4:	2b20      	cmp	r3, #32
 8024ba6:	d801      	bhi.n	8024bac <create_name+0x10c>
 8024ba8:	2204      	movs	r2, #4
 8024baa:	e000      	b.n	8024bae <create_name+0x10e>
 8024bac:	2200      	movs	r2, #0
 8024bae:	68bb      	ldr	r3, [r7, #8]
 8024bb0:	330b      	adds	r3, #11
 8024bb2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8024bb4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8024bb6:	4618      	mov	r0, r3
 8024bb8:	3720      	adds	r7, #32
 8024bba:	46bd      	mov	sp, r7
 8024bbc:	bd80      	pop	{r7, pc}
 8024bbe:	bf00      	nop
 8024bc0:	0803a2cc 	.word	0x0803a2cc
 8024bc4:	08031564 	.word	0x08031564

08024bc8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8024bc8:	b580      	push	{r7, lr}
 8024bca:	b086      	sub	sp, #24
 8024bcc:	af00      	add	r7, sp, #0
 8024bce:	6078      	str	r0, [r7, #4]
 8024bd0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8024bd2:	687b      	ldr	r3, [r7, #4]
 8024bd4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8024bd6:	693b      	ldr	r3, [r7, #16]
 8024bd8:	681b      	ldr	r3, [r3, #0]
 8024bda:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8024bdc:	e002      	b.n	8024be4 <follow_path+0x1c>
 8024bde:	683b      	ldr	r3, [r7, #0]
 8024be0:	3301      	adds	r3, #1
 8024be2:	603b      	str	r3, [r7, #0]
 8024be4:	683b      	ldr	r3, [r7, #0]
 8024be6:	781b      	ldrb	r3, [r3, #0]
 8024be8:	2b2f      	cmp	r3, #47	@ 0x2f
 8024bea:	d0f8      	beq.n	8024bde <follow_path+0x16>
 8024bec:	683b      	ldr	r3, [r7, #0]
 8024bee:	781b      	ldrb	r3, [r3, #0]
 8024bf0:	2b5c      	cmp	r3, #92	@ 0x5c
 8024bf2:	d0f4      	beq.n	8024bde <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8024bf4:	693b      	ldr	r3, [r7, #16]
 8024bf6:	2200      	movs	r2, #0
 8024bf8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8024bfa:	683b      	ldr	r3, [r7, #0]
 8024bfc:	781b      	ldrb	r3, [r3, #0]
 8024bfe:	2b1f      	cmp	r3, #31
 8024c00:	d80a      	bhi.n	8024c18 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8024c02:	687b      	ldr	r3, [r7, #4]
 8024c04:	2280      	movs	r2, #128	@ 0x80
 8024c06:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8024c0a:	2100      	movs	r1, #0
 8024c0c:	6878      	ldr	r0, [r7, #4]
 8024c0e:	f7ff fc7a 	bl	8024506 <dir_sdi>
 8024c12:	4603      	mov	r3, r0
 8024c14:	75fb      	strb	r3, [r7, #23]
 8024c16:	e048      	b.n	8024caa <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8024c18:	463b      	mov	r3, r7
 8024c1a:	4619      	mov	r1, r3
 8024c1c:	6878      	ldr	r0, [r7, #4]
 8024c1e:	f7ff ff3f 	bl	8024aa0 <create_name>
 8024c22:	4603      	mov	r3, r0
 8024c24:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8024c26:	7dfb      	ldrb	r3, [r7, #23]
 8024c28:	2b00      	cmp	r3, #0
 8024c2a:	d139      	bne.n	8024ca0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8024c2c:	6878      	ldr	r0, [r7, #4]
 8024c2e:	f7ff fe4f 	bl	80248d0 <dir_find>
 8024c32:	4603      	mov	r3, r0
 8024c34:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8024c36:	687b      	ldr	r3, [r7, #4]
 8024c38:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8024c3c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8024c3e:	7dfb      	ldrb	r3, [r7, #23]
 8024c40:	2b00      	cmp	r3, #0
 8024c42:	d00a      	beq.n	8024c5a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8024c44:	7dfb      	ldrb	r3, [r7, #23]
 8024c46:	2b04      	cmp	r3, #4
 8024c48:	d12c      	bne.n	8024ca4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8024c4a:	7afb      	ldrb	r3, [r7, #11]
 8024c4c:	f003 0304 	and.w	r3, r3, #4
 8024c50:	2b00      	cmp	r3, #0
 8024c52:	d127      	bne.n	8024ca4 <follow_path+0xdc>
 8024c54:	2305      	movs	r3, #5
 8024c56:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8024c58:	e024      	b.n	8024ca4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8024c5a:	7afb      	ldrb	r3, [r7, #11]
 8024c5c:	f003 0304 	and.w	r3, r3, #4
 8024c60:	2b00      	cmp	r3, #0
 8024c62:	d121      	bne.n	8024ca8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8024c64:	693b      	ldr	r3, [r7, #16]
 8024c66:	799b      	ldrb	r3, [r3, #6]
 8024c68:	f003 0310 	and.w	r3, r3, #16
 8024c6c:	2b00      	cmp	r3, #0
 8024c6e:	d102      	bne.n	8024c76 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8024c70:	2305      	movs	r3, #5
 8024c72:	75fb      	strb	r3, [r7, #23]
 8024c74:	e019      	b.n	8024caa <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8024c76:	68fb      	ldr	r3, [r7, #12]
 8024c78:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8024c7c:	687b      	ldr	r3, [r7, #4]
 8024c7e:	695b      	ldr	r3, [r3, #20]
 8024c80:	68fa      	ldr	r2, [r7, #12]
 8024c82:	8992      	ldrh	r2, [r2, #12]
 8024c84:	fbb3 f0f2 	udiv	r0, r3, r2
 8024c88:	fb00 f202 	mul.w	r2, r0, r2
 8024c8c:	1a9b      	subs	r3, r3, r2
 8024c8e:	440b      	add	r3, r1
 8024c90:	4619      	mov	r1, r3
 8024c92:	68f8      	ldr	r0, [r7, #12]
 8024c94:	f7ff fddd 	bl	8024852 <ld_clust>
 8024c98:	4602      	mov	r2, r0
 8024c9a:	693b      	ldr	r3, [r7, #16]
 8024c9c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8024c9e:	e7bb      	b.n	8024c18 <follow_path+0x50>
			if (res != FR_OK) break;
 8024ca0:	bf00      	nop
 8024ca2:	e002      	b.n	8024caa <follow_path+0xe2>
				break;
 8024ca4:	bf00      	nop
 8024ca6:	e000      	b.n	8024caa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8024ca8:	bf00      	nop
			}
		}
	}

	return res;
 8024caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8024cac:	4618      	mov	r0, r3
 8024cae:	3718      	adds	r7, #24
 8024cb0:	46bd      	mov	sp, r7
 8024cb2:	bd80      	pop	{r7, pc}

08024cb4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8024cb4:	b480      	push	{r7}
 8024cb6:	b087      	sub	sp, #28
 8024cb8:	af00      	add	r7, sp, #0
 8024cba:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8024cbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8024cc0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8024cc2:	687b      	ldr	r3, [r7, #4]
 8024cc4:	681b      	ldr	r3, [r3, #0]
 8024cc6:	2b00      	cmp	r3, #0
 8024cc8:	d031      	beq.n	8024d2e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8024cca:	687b      	ldr	r3, [r7, #4]
 8024ccc:	681b      	ldr	r3, [r3, #0]
 8024cce:	617b      	str	r3, [r7, #20]
 8024cd0:	e002      	b.n	8024cd8 <get_ldnumber+0x24>
 8024cd2:	697b      	ldr	r3, [r7, #20]
 8024cd4:	3301      	adds	r3, #1
 8024cd6:	617b      	str	r3, [r7, #20]
 8024cd8:	697b      	ldr	r3, [r7, #20]
 8024cda:	781b      	ldrb	r3, [r3, #0]
 8024cdc:	2b20      	cmp	r3, #32
 8024cde:	d903      	bls.n	8024ce8 <get_ldnumber+0x34>
 8024ce0:	697b      	ldr	r3, [r7, #20]
 8024ce2:	781b      	ldrb	r3, [r3, #0]
 8024ce4:	2b3a      	cmp	r3, #58	@ 0x3a
 8024ce6:	d1f4      	bne.n	8024cd2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8024ce8:	697b      	ldr	r3, [r7, #20]
 8024cea:	781b      	ldrb	r3, [r3, #0]
 8024cec:	2b3a      	cmp	r3, #58	@ 0x3a
 8024cee:	d11c      	bne.n	8024d2a <get_ldnumber+0x76>
			tp = *path;
 8024cf0:	687b      	ldr	r3, [r7, #4]
 8024cf2:	681b      	ldr	r3, [r3, #0]
 8024cf4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8024cf6:	68fb      	ldr	r3, [r7, #12]
 8024cf8:	1c5a      	adds	r2, r3, #1
 8024cfa:	60fa      	str	r2, [r7, #12]
 8024cfc:	781b      	ldrb	r3, [r3, #0]
 8024cfe:	3b30      	subs	r3, #48	@ 0x30
 8024d00:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8024d02:	68bb      	ldr	r3, [r7, #8]
 8024d04:	2b09      	cmp	r3, #9
 8024d06:	d80e      	bhi.n	8024d26 <get_ldnumber+0x72>
 8024d08:	68fa      	ldr	r2, [r7, #12]
 8024d0a:	697b      	ldr	r3, [r7, #20]
 8024d0c:	429a      	cmp	r2, r3
 8024d0e:	d10a      	bne.n	8024d26 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8024d10:	68bb      	ldr	r3, [r7, #8]
 8024d12:	2b00      	cmp	r3, #0
 8024d14:	d107      	bne.n	8024d26 <get_ldnumber+0x72>
					vol = (int)i;
 8024d16:	68bb      	ldr	r3, [r7, #8]
 8024d18:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8024d1a:	697b      	ldr	r3, [r7, #20]
 8024d1c:	3301      	adds	r3, #1
 8024d1e:	617b      	str	r3, [r7, #20]
 8024d20:	687b      	ldr	r3, [r7, #4]
 8024d22:	697a      	ldr	r2, [r7, #20]
 8024d24:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8024d26:	693b      	ldr	r3, [r7, #16]
 8024d28:	e002      	b.n	8024d30 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8024d2a:	2300      	movs	r3, #0
 8024d2c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8024d2e:	693b      	ldr	r3, [r7, #16]
}
 8024d30:	4618      	mov	r0, r3
 8024d32:	371c      	adds	r7, #28
 8024d34:	46bd      	mov	sp, r7
 8024d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d3a:	4770      	bx	lr

08024d3c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8024d3c:	b580      	push	{r7, lr}
 8024d3e:	b082      	sub	sp, #8
 8024d40:	af00      	add	r7, sp, #0
 8024d42:	6078      	str	r0, [r7, #4]
 8024d44:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8024d46:	687b      	ldr	r3, [r7, #4]
 8024d48:	2200      	movs	r2, #0
 8024d4a:	70da      	strb	r2, [r3, #3]
 8024d4c:	687b      	ldr	r3, [r7, #4]
 8024d4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8024d52:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8024d54:	6839      	ldr	r1, [r7, #0]
 8024d56:	6878      	ldr	r0, [r7, #4]
 8024d58:	f7fe fff6 	bl	8023d48 <move_window>
 8024d5c:	4603      	mov	r3, r0
 8024d5e:	2b00      	cmp	r3, #0
 8024d60:	d001      	beq.n	8024d66 <check_fs+0x2a>
 8024d62:	2304      	movs	r3, #4
 8024d64:	e038      	b.n	8024dd8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8024d66:	687b      	ldr	r3, [r7, #4]
 8024d68:	3338      	adds	r3, #56	@ 0x38
 8024d6a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8024d6e:	4618      	mov	r0, r3
 8024d70:	f7fe fd08 	bl	8023784 <ld_word>
 8024d74:	4603      	mov	r3, r0
 8024d76:	461a      	mov	r2, r3
 8024d78:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8024d7c:	429a      	cmp	r2, r3
 8024d7e:	d001      	beq.n	8024d84 <check_fs+0x48>
 8024d80:	2303      	movs	r3, #3
 8024d82:	e029      	b.n	8024dd8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8024d84:	687b      	ldr	r3, [r7, #4]
 8024d86:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8024d8a:	2be9      	cmp	r3, #233	@ 0xe9
 8024d8c:	d009      	beq.n	8024da2 <check_fs+0x66>
 8024d8e:	687b      	ldr	r3, [r7, #4]
 8024d90:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8024d94:	2beb      	cmp	r3, #235	@ 0xeb
 8024d96:	d11e      	bne.n	8024dd6 <check_fs+0x9a>
 8024d98:	687b      	ldr	r3, [r7, #4]
 8024d9a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8024d9e:	2b90      	cmp	r3, #144	@ 0x90
 8024da0:	d119      	bne.n	8024dd6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8024da2:	687b      	ldr	r3, [r7, #4]
 8024da4:	3338      	adds	r3, #56	@ 0x38
 8024da6:	3336      	adds	r3, #54	@ 0x36
 8024da8:	4618      	mov	r0, r3
 8024daa:	f7fe fd03 	bl	80237b4 <ld_dword>
 8024dae:	4603      	mov	r3, r0
 8024db0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8024db4:	4a0a      	ldr	r2, [pc, #40]	@ (8024de0 <check_fs+0xa4>)
 8024db6:	4293      	cmp	r3, r2
 8024db8:	d101      	bne.n	8024dbe <check_fs+0x82>
 8024dba:	2300      	movs	r3, #0
 8024dbc:	e00c      	b.n	8024dd8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8024dbe:	687b      	ldr	r3, [r7, #4]
 8024dc0:	3338      	adds	r3, #56	@ 0x38
 8024dc2:	3352      	adds	r3, #82	@ 0x52
 8024dc4:	4618      	mov	r0, r3
 8024dc6:	f7fe fcf5 	bl	80237b4 <ld_dword>
 8024dca:	4603      	mov	r3, r0
 8024dcc:	4a05      	ldr	r2, [pc, #20]	@ (8024de4 <check_fs+0xa8>)
 8024dce:	4293      	cmp	r3, r2
 8024dd0:	d101      	bne.n	8024dd6 <check_fs+0x9a>
 8024dd2:	2300      	movs	r3, #0
 8024dd4:	e000      	b.n	8024dd8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8024dd6:	2302      	movs	r3, #2
}
 8024dd8:	4618      	mov	r0, r3
 8024dda:	3708      	adds	r7, #8
 8024ddc:	46bd      	mov	sp, r7
 8024dde:	bd80      	pop	{r7, pc}
 8024de0:	00544146 	.word	0x00544146
 8024de4:	33544146 	.word	0x33544146

08024de8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8024de8:	b580      	push	{r7, lr}
 8024dea:	b096      	sub	sp, #88	@ 0x58
 8024dec:	af00      	add	r7, sp, #0
 8024dee:	60f8      	str	r0, [r7, #12]
 8024df0:	60b9      	str	r1, [r7, #8]
 8024df2:	4613      	mov	r3, r2
 8024df4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8024df6:	68bb      	ldr	r3, [r7, #8]
 8024df8:	2200      	movs	r2, #0
 8024dfa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8024dfc:	68f8      	ldr	r0, [r7, #12]
 8024dfe:	f7ff ff59 	bl	8024cb4 <get_ldnumber>
 8024e02:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8024e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024e06:	2b00      	cmp	r3, #0
 8024e08:	da01      	bge.n	8024e0e <find_volume+0x26>
 8024e0a:	230b      	movs	r3, #11
 8024e0c:	e26a      	b.n	80252e4 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8024e0e:	4aa3      	ldr	r2, [pc, #652]	@ (802509c <find_volume+0x2b4>)
 8024e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024e16:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8024e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024e1a:	2b00      	cmp	r3, #0
 8024e1c:	d101      	bne.n	8024e22 <find_volume+0x3a>
 8024e1e:	230c      	movs	r3, #12
 8024e20:	e260      	b.n	80252e4 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 8024e22:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8024e24:	f7fe fdae 	bl	8023984 <lock_fs>
 8024e28:	4603      	mov	r3, r0
 8024e2a:	2b00      	cmp	r3, #0
 8024e2c:	d101      	bne.n	8024e32 <find_volume+0x4a>
 8024e2e:	230f      	movs	r3, #15
 8024e30:	e258      	b.n	80252e4 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 8024e32:	68bb      	ldr	r3, [r7, #8]
 8024e34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8024e36:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8024e38:	79fb      	ldrb	r3, [r7, #7]
 8024e3a:	f023 0301 	bic.w	r3, r3, #1
 8024e3e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8024e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024e42:	781b      	ldrb	r3, [r3, #0]
 8024e44:	2b00      	cmp	r3, #0
 8024e46:	d01a      	beq.n	8024e7e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8024e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024e4a:	785b      	ldrb	r3, [r3, #1]
 8024e4c:	4618      	mov	r0, r3
 8024e4e:	f7fe fbfb 	bl	8023648 <disk_status>
 8024e52:	4603      	mov	r3, r0
 8024e54:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8024e58:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8024e5c:	f003 0301 	and.w	r3, r3, #1
 8024e60:	2b00      	cmp	r3, #0
 8024e62:	d10c      	bne.n	8024e7e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8024e64:	79fb      	ldrb	r3, [r7, #7]
 8024e66:	2b00      	cmp	r3, #0
 8024e68:	d007      	beq.n	8024e7a <find_volume+0x92>
 8024e6a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8024e6e:	f003 0304 	and.w	r3, r3, #4
 8024e72:	2b00      	cmp	r3, #0
 8024e74:	d001      	beq.n	8024e7a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8024e76:	230a      	movs	r3, #10
 8024e78:	e234      	b.n	80252e4 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 8024e7a:	2300      	movs	r3, #0
 8024e7c:	e232      	b.n	80252e4 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8024e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024e80:	2200      	movs	r2, #0
 8024e82:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8024e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024e86:	b2da      	uxtb	r2, r3
 8024e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024e8a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8024e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024e8e:	785b      	ldrb	r3, [r3, #1]
 8024e90:	4618      	mov	r0, r3
 8024e92:	f7fe fbf3 	bl	802367c <disk_initialize>
 8024e96:	4603      	mov	r3, r0
 8024e98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8024e9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8024ea0:	f003 0301 	and.w	r3, r3, #1
 8024ea4:	2b00      	cmp	r3, #0
 8024ea6:	d001      	beq.n	8024eac <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8024ea8:	2303      	movs	r3, #3
 8024eaa:	e21b      	b.n	80252e4 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8024eac:	79fb      	ldrb	r3, [r7, #7]
 8024eae:	2b00      	cmp	r3, #0
 8024eb0:	d007      	beq.n	8024ec2 <find_volume+0xda>
 8024eb2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8024eb6:	f003 0304 	and.w	r3, r3, #4
 8024eba:	2b00      	cmp	r3, #0
 8024ebc:	d001      	beq.n	8024ec2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8024ebe:	230a      	movs	r3, #10
 8024ec0:	e210      	b.n	80252e4 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8024ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024ec4:	7858      	ldrb	r0, [r3, #1]
 8024ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024ec8:	330c      	adds	r3, #12
 8024eca:	461a      	mov	r2, r3
 8024ecc:	2102      	movs	r1, #2
 8024ece:	f7fe fc3b 	bl	8023748 <disk_ioctl>
 8024ed2:	4603      	mov	r3, r0
 8024ed4:	2b00      	cmp	r3, #0
 8024ed6:	d001      	beq.n	8024edc <find_volume+0xf4>
 8024ed8:	2301      	movs	r3, #1
 8024eda:	e203      	b.n	80252e4 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8024edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024ede:	899b      	ldrh	r3, [r3, #12]
 8024ee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8024ee4:	d80d      	bhi.n	8024f02 <find_volume+0x11a>
 8024ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024ee8:	899b      	ldrh	r3, [r3, #12]
 8024eea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8024eee:	d308      	bcc.n	8024f02 <find_volume+0x11a>
 8024ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024ef2:	899b      	ldrh	r3, [r3, #12]
 8024ef4:	461a      	mov	r2, r3
 8024ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024ef8:	899b      	ldrh	r3, [r3, #12]
 8024efa:	3b01      	subs	r3, #1
 8024efc:	4013      	ands	r3, r2
 8024efe:	2b00      	cmp	r3, #0
 8024f00:	d001      	beq.n	8024f06 <find_volume+0x11e>
 8024f02:	2301      	movs	r3, #1
 8024f04:	e1ee      	b.n	80252e4 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8024f06:	2300      	movs	r3, #0
 8024f08:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8024f0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8024f0c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8024f0e:	f7ff ff15 	bl	8024d3c <check_fs>
 8024f12:	4603      	mov	r3, r0
 8024f14:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8024f18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8024f1c:	2b02      	cmp	r3, #2
 8024f1e:	d149      	bne.n	8024fb4 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8024f20:	2300      	movs	r3, #0
 8024f22:	643b      	str	r3, [r7, #64]	@ 0x40
 8024f24:	e01e      	b.n	8024f64 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8024f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024f28:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8024f2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8024f2e:	011b      	lsls	r3, r3, #4
 8024f30:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8024f34:	4413      	add	r3, r2
 8024f36:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8024f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024f3a:	3304      	adds	r3, #4
 8024f3c:	781b      	ldrb	r3, [r3, #0]
 8024f3e:	2b00      	cmp	r3, #0
 8024f40:	d006      	beq.n	8024f50 <find_volume+0x168>
 8024f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024f44:	3308      	adds	r3, #8
 8024f46:	4618      	mov	r0, r3
 8024f48:	f7fe fc34 	bl	80237b4 <ld_dword>
 8024f4c:	4602      	mov	r2, r0
 8024f4e:	e000      	b.n	8024f52 <find_volume+0x16a>
 8024f50:	2200      	movs	r2, #0
 8024f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8024f54:	009b      	lsls	r3, r3, #2
 8024f56:	3358      	adds	r3, #88	@ 0x58
 8024f58:	443b      	add	r3, r7
 8024f5a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8024f5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8024f60:	3301      	adds	r3, #1
 8024f62:	643b      	str	r3, [r7, #64]	@ 0x40
 8024f64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8024f66:	2b03      	cmp	r3, #3
 8024f68:	d9dd      	bls.n	8024f26 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8024f6a:	2300      	movs	r3, #0
 8024f6c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8024f6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8024f70:	2b00      	cmp	r3, #0
 8024f72:	d002      	beq.n	8024f7a <find_volume+0x192>
 8024f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8024f76:	3b01      	subs	r3, #1
 8024f78:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8024f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8024f7c:	009b      	lsls	r3, r3, #2
 8024f7e:	3358      	adds	r3, #88	@ 0x58
 8024f80:	443b      	add	r3, r7
 8024f82:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8024f86:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8024f88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8024f8a:	2b00      	cmp	r3, #0
 8024f8c:	d005      	beq.n	8024f9a <find_volume+0x1b2>
 8024f8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8024f90:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8024f92:	f7ff fed3 	bl	8024d3c <check_fs>
 8024f96:	4603      	mov	r3, r0
 8024f98:	e000      	b.n	8024f9c <find_volume+0x1b4>
 8024f9a:	2303      	movs	r3, #3
 8024f9c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8024fa0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8024fa4:	2b01      	cmp	r3, #1
 8024fa6:	d905      	bls.n	8024fb4 <find_volume+0x1cc>
 8024fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8024faa:	3301      	adds	r3, #1
 8024fac:	643b      	str	r3, [r7, #64]	@ 0x40
 8024fae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8024fb0:	2b03      	cmp	r3, #3
 8024fb2:	d9e2      	bls.n	8024f7a <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8024fb4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8024fb8:	2b04      	cmp	r3, #4
 8024fba:	d101      	bne.n	8024fc0 <find_volume+0x1d8>
 8024fbc:	2301      	movs	r3, #1
 8024fbe:	e191      	b.n	80252e4 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8024fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8024fc4:	2b01      	cmp	r3, #1
 8024fc6:	d901      	bls.n	8024fcc <find_volume+0x1e4>
 8024fc8:	230d      	movs	r3, #13
 8024fca:	e18b      	b.n	80252e4 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8024fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024fce:	3338      	adds	r3, #56	@ 0x38
 8024fd0:	330b      	adds	r3, #11
 8024fd2:	4618      	mov	r0, r3
 8024fd4:	f7fe fbd6 	bl	8023784 <ld_word>
 8024fd8:	4603      	mov	r3, r0
 8024fda:	461a      	mov	r2, r3
 8024fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024fde:	899b      	ldrh	r3, [r3, #12]
 8024fe0:	429a      	cmp	r2, r3
 8024fe2:	d001      	beq.n	8024fe8 <find_volume+0x200>
 8024fe4:	230d      	movs	r3, #13
 8024fe6:	e17d      	b.n	80252e4 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8024fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024fea:	3338      	adds	r3, #56	@ 0x38
 8024fec:	3316      	adds	r3, #22
 8024fee:	4618      	mov	r0, r3
 8024ff0:	f7fe fbc8 	bl	8023784 <ld_word>
 8024ff4:	4603      	mov	r3, r0
 8024ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8024ff8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8024ffa:	2b00      	cmp	r3, #0
 8024ffc:	d106      	bne.n	802500c <find_volume+0x224>
 8024ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025000:	3338      	adds	r3, #56	@ 0x38
 8025002:	3324      	adds	r3, #36	@ 0x24
 8025004:	4618      	mov	r0, r3
 8025006:	f7fe fbd5 	bl	80237b4 <ld_dword>
 802500a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 802500c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802500e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8025010:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8025012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025014:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8025018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802501a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 802501c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802501e:	789b      	ldrb	r3, [r3, #2]
 8025020:	2b01      	cmp	r3, #1
 8025022:	d005      	beq.n	8025030 <find_volume+0x248>
 8025024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025026:	789b      	ldrb	r3, [r3, #2]
 8025028:	2b02      	cmp	r3, #2
 802502a:	d001      	beq.n	8025030 <find_volume+0x248>
 802502c:	230d      	movs	r3, #13
 802502e:	e159      	b.n	80252e4 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8025030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025032:	789b      	ldrb	r3, [r3, #2]
 8025034:	461a      	mov	r2, r3
 8025036:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8025038:	fb02 f303 	mul.w	r3, r2, r3
 802503c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 802503e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025040:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8025044:	461a      	mov	r2, r3
 8025046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025048:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 802504a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802504c:	895b      	ldrh	r3, [r3, #10]
 802504e:	2b00      	cmp	r3, #0
 8025050:	d008      	beq.n	8025064 <find_volume+0x27c>
 8025052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025054:	895b      	ldrh	r3, [r3, #10]
 8025056:	461a      	mov	r2, r3
 8025058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802505a:	895b      	ldrh	r3, [r3, #10]
 802505c:	3b01      	subs	r3, #1
 802505e:	4013      	ands	r3, r2
 8025060:	2b00      	cmp	r3, #0
 8025062:	d001      	beq.n	8025068 <find_volume+0x280>
 8025064:	230d      	movs	r3, #13
 8025066:	e13d      	b.n	80252e4 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8025068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802506a:	3338      	adds	r3, #56	@ 0x38
 802506c:	3311      	adds	r3, #17
 802506e:	4618      	mov	r0, r3
 8025070:	f7fe fb88 	bl	8023784 <ld_word>
 8025074:	4603      	mov	r3, r0
 8025076:	461a      	mov	r2, r3
 8025078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802507a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 802507c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802507e:	891b      	ldrh	r3, [r3, #8]
 8025080:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8025082:	8992      	ldrh	r2, [r2, #12]
 8025084:	0952      	lsrs	r2, r2, #5
 8025086:	b292      	uxth	r2, r2
 8025088:	fbb3 f1f2 	udiv	r1, r3, r2
 802508c:	fb01 f202 	mul.w	r2, r1, r2
 8025090:	1a9b      	subs	r3, r3, r2
 8025092:	b29b      	uxth	r3, r3
 8025094:	2b00      	cmp	r3, #0
 8025096:	d003      	beq.n	80250a0 <find_volume+0x2b8>
 8025098:	230d      	movs	r3, #13
 802509a:	e123      	b.n	80252e4 <find_volume+0x4fc>
 802509c:	2001d0d0 	.word	0x2001d0d0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80250a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80250a2:	3338      	adds	r3, #56	@ 0x38
 80250a4:	3313      	adds	r3, #19
 80250a6:	4618      	mov	r0, r3
 80250a8:	f7fe fb6c 	bl	8023784 <ld_word>
 80250ac:	4603      	mov	r3, r0
 80250ae:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80250b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80250b2:	2b00      	cmp	r3, #0
 80250b4:	d106      	bne.n	80250c4 <find_volume+0x2dc>
 80250b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80250b8:	3338      	adds	r3, #56	@ 0x38
 80250ba:	3320      	adds	r3, #32
 80250bc:	4618      	mov	r0, r3
 80250be:	f7fe fb79 	bl	80237b4 <ld_dword>
 80250c2:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80250c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80250c6:	3338      	adds	r3, #56	@ 0x38
 80250c8:	330e      	adds	r3, #14
 80250ca:	4618      	mov	r0, r3
 80250cc:	f7fe fb5a 	bl	8023784 <ld_word>
 80250d0:	4603      	mov	r3, r0
 80250d2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80250d4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80250d6:	2b00      	cmp	r3, #0
 80250d8:	d101      	bne.n	80250de <find_volume+0x2f6>
 80250da:	230d      	movs	r3, #13
 80250dc:	e102      	b.n	80252e4 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80250de:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80250e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80250e2:	4413      	add	r3, r2
 80250e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80250e6:	8911      	ldrh	r1, [r2, #8]
 80250e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80250ea:	8992      	ldrh	r2, [r2, #12]
 80250ec:	0952      	lsrs	r2, r2, #5
 80250ee:	b292      	uxth	r2, r2
 80250f0:	fbb1 f2f2 	udiv	r2, r1, r2
 80250f4:	b292      	uxth	r2, r2
 80250f6:	4413      	add	r3, r2
 80250f8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80250fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80250fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80250fe:	429a      	cmp	r2, r3
 8025100:	d201      	bcs.n	8025106 <find_volume+0x31e>
 8025102:	230d      	movs	r3, #13
 8025104:	e0ee      	b.n	80252e4 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8025106:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8025108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802510a:	1ad3      	subs	r3, r2, r3
 802510c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802510e:	8952      	ldrh	r2, [r2, #10]
 8025110:	fbb3 f3f2 	udiv	r3, r3, r2
 8025114:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8025116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025118:	2b00      	cmp	r3, #0
 802511a:	d101      	bne.n	8025120 <find_volume+0x338>
 802511c:	230d      	movs	r3, #13
 802511e:	e0e1      	b.n	80252e4 <find_volume+0x4fc>
		fmt = FS_FAT32;
 8025120:	2303      	movs	r3, #3
 8025122:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8025126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025128:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 802512c:	4293      	cmp	r3, r2
 802512e:	d802      	bhi.n	8025136 <find_volume+0x34e>
 8025130:	2302      	movs	r3, #2
 8025132:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8025136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025138:	f640 72f5 	movw	r2, #4085	@ 0xff5
 802513c:	4293      	cmp	r3, r2
 802513e:	d802      	bhi.n	8025146 <find_volume+0x35e>
 8025140:	2301      	movs	r3, #1
 8025142:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8025146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025148:	1c9a      	adds	r2, r3, #2
 802514a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802514c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 802514e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025150:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8025152:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8025154:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8025156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8025158:	441a      	add	r2, r3
 802515a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802515c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 802515e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8025160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025162:	441a      	add	r2, r3
 8025164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025166:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8025168:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 802516c:	2b03      	cmp	r3, #3
 802516e:	d11e      	bne.n	80251ae <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8025170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025172:	3338      	adds	r3, #56	@ 0x38
 8025174:	332a      	adds	r3, #42	@ 0x2a
 8025176:	4618      	mov	r0, r3
 8025178:	f7fe fb04 	bl	8023784 <ld_word>
 802517c:	4603      	mov	r3, r0
 802517e:	2b00      	cmp	r3, #0
 8025180:	d001      	beq.n	8025186 <find_volume+0x39e>
 8025182:	230d      	movs	r3, #13
 8025184:	e0ae      	b.n	80252e4 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8025186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025188:	891b      	ldrh	r3, [r3, #8]
 802518a:	2b00      	cmp	r3, #0
 802518c:	d001      	beq.n	8025192 <find_volume+0x3aa>
 802518e:	230d      	movs	r3, #13
 8025190:	e0a8      	b.n	80252e4 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8025192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025194:	3338      	adds	r3, #56	@ 0x38
 8025196:	332c      	adds	r3, #44	@ 0x2c
 8025198:	4618      	mov	r0, r3
 802519a:	f7fe fb0b 	bl	80237b4 <ld_dword>
 802519e:	4602      	mov	r2, r0
 80251a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80251a2:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80251a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80251a6:	69db      	ldr	r3, [r3, #28]
 80251a8:	009b      	lsls	r3, r3, #2
 80251aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80251ac:	e01f      	b.n	80251ee <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80251ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80251b0:	891b      	ldrh	r3, [r3, #8]
 80251b2:	2b00      	cmp	r3, #0
 80251b4:	d101      	bne.n	80251ba <find_volume+0x3d2>
 80251b6:	230d      	movs	r3, #13
 80251b8:	e094      	b.n	80252e4 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80251ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80251bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80251be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80251c0:	441a      	add	r2, r3
 80251c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80251c4:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80251c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80251ca:	2b02      	cmp	r3, #2
 80251cc:	d103      	bne.n	80251d6 <find_volume+0x3ee>
 80251ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80251d0:	69db      	ldr	r3, [r3, #28]
 80251d2:	005b      	lsls	r3, r3, #1
 80251d4:	e00a      	b.n	80251ec <find_volume+0x404>
 80251d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80251d8:	69da      	ldr	r2, [r3, #28]
 80251da:	4613      	mov	r3, r2
 80251dc:	005b      	lsls	r3, r3, #1
 80251de:	4413      	add	r3, r2
 80251e0:	085a      	lsrs	r2, r3, #1
 80251e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80251e4:	69db      	ldr	r3, [r3, #28]
 80251e6:	f003 0301 	and.w	r3, r3, #1
 80251ea:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80251ec:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80251ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80251f0:	6a1a      	ldr	r2, [r3, #32]
 80251f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80251f4:	899b      	ldrh	r3, [r3, #12]
 80251f6:	4619      	mov	r1, r3
 80251f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80251fa:	440b      	add	r3, r1
 80251fc:	3b01      	subs	r3, #1
 80251fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8025200:	8989      	ldrh	r1, [r1, #12]
 8025202:	fbb3 f3f1 	udiv	r3, r3, r1
 8025206:	429a      	cmp	r2, r3
 8025208:	d201      	bcs.n	802520e <find_volume+0x426>
 802520a:	230d      	movs	r3, #13
 802520c:	e06a      	b.n	80252e4 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 802520e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025210:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8025214:	619a      	str	r2, [r3, #24]
 8025216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025218:	699a      	ldr	r2, [r3, #24]
 802521a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802521c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 802521e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025220:	2280      	movs	r2, #128	@ 0x80
 8025222:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8025224:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8025228:	2b03      	cmp	r3, #3
 802522a:	d149      	bne.n	80252c0 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 802522c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802522e:	3338      	adds	r3, #56	@ 0x38
 8025230:	3330      	adds	r3, #48	@ 0x30
 8025232:	4618      	mov	r0, r3
 8025234:	f7fe faa6 	bl	8023784 <ld_word>
 8025238:	4603      	mov	r3, r0
 802523a:	2b01      	cmp	r3, #1
 802523c:	d140      	bne.n	80252c0 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 802523e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8025240:	3301      	adds	r3, #1
 8025242:	4619      	mov	r1, r3
 8025244:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8025246:	f7fe fd7f 	bl	8023d48 <move_window>
 802524a:	4603      	mov	r3, r0
 802524c:	2b00      	cmp	r3, #0
 802524e:	d137      	bne.n	80252c0 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 8025250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025252:	2200      	movs	r2, #0
 8025254:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8025256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025258:	3338      	adds	r3, #56	@ 0x38
 802525a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 802525e:	4618      	mov	r0, r3
 8025260:	f7fe fa90 	bl	8023784 <ld_word>
 8025264:	4603      	mov	r3, r0
 8025266:	461a      	mov	r2, r3
 8025268:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 802526c:	429a      	cmp	r2, r3
 802526e:	d127      	bne.n	80252c0 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8025270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025272:	3338      	adds	r3, #56	@ 0x38
 8025274:	4618      	mov	r0, r3
 8025276:	f7fe fa9d 	bl	80237b4 <ld_dword>
 802527a:	4603      	mov	r3, r0
 802527c:	4a1b      	ldr	r2, [pc, #108]	@ (80252ec <find_volume+0x504>)
 802527e:	4293      	cmp	r3, r2
 8025280:	d11e      	bne.n	80252c0 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8025282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025284:	3338      	adds	r3, #56	@ 0x38
 8025286:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 802528a:	4618      	mov	r0, r3
 802528c:	f7fe fa92 	bl	80237b4 <ld_dword>
 8025290:	4603      	mov	r3, r0
 8025292:	4a17      	ldr	r2, [pc, #92]	@ (80252f0 <find_volume+0x508>)
 8025294:	4293      	cmp	r3, r2
 8025296:	d113      	bne.n	80252c0 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8025298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802529a:	3338      	adds	r3, #56	@ 0x38
 802529c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80252a0:	4618      	mov	r0, r3
 80252a2:	f7fe fa87 	bl	80237b4 <ld_dword>
 80252a6:	4602      	mov	r2, r0
 80252a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80252aa:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80252ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80252ae:	3338      	adds	r3, #56	@ 0x38
 80252b0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80252b4:	4618      	mov	r0, r3
 80252b6:	f7fe fa7d 	bl	80237b4 <ld_dword>
 80252ba:	4602      	mov	r2, r0
 80252bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80252be:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80252c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80252c2:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80252c6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80252c8:	4b0a      	ldr	r3, [pc, #40]	@ (80252f4 <find_volume+0x50c>)
 80252ca:	881b      	ldrh	r3, [r3, #0]
 80252cc:	3301      	adds	r3, #1
 80252ce:	b29a      	uxth	r2, r3
 80252d0:	4b08      	ldr	r3, [pc, #32]	@ (80252f4 <find_volume+0x50c>)
 80252d2:	801a      	strh	r2, [r3, #0]
 80252d4:	4b07      	ldr	r3, [pc, #28]	@ (80252f4 <find_volume+0x50c>)
 80252d6:	881a      	ldrh	r2, [r3, #0]
 80252d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80252da:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80252dc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80252de:	f7fe fccb 	bl	8023c78 <clear_lock>
#endif
	return FR_OK;
 80252e2:	2300      	movs	r3, #0
}
 80252e4:	4618      	mov	r0, r3
 80252e6:	3758      	adds	r7, #88	@ 0x58
 80252e8:	46bd      	mov	sp, r7
 80252ea:	bd80      	pop	{r7, pc}
 80252ec:	41615252 	.word	0x41615252
 80252f0:	61417272 	.word	0x61417272
 80252f4:	2001d0d4 	.word	0x2001d0d4

080252f8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80252f8:	b580      	push	{r7, lr}
 80252fa:	b084      	sub	sp, #16
 80252fc:	af00      	add	r7, sp, #0
 80252fe:	6078      	str	r0, [r7, #4]
 8025300:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8025302:	2309      	movs	r3, #9
 8025304:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8025306:	687b      	ldr	r3, [r7, #4]
 8025308:	2b00      	cmp	r3, #0
 802530a:	d02e      	beq.n	802536a <validate+0x72>
 802530c:	687b      	ldr	r3, [r7, #4]
 802530e:	681b      	ldr	r3, [r3, #0]
 8025310:	2b00      	cmp	r3, #0
 8025312:	d02a      	beq.n	802536a <validate+0x72>
 8025314:	687b      	ldr	r3, [r7, #4]
 8025316:	681b      	ldr	r3, [r3, #0]
 8025318:	781b      	ldrb	r3, [r3, #0]
 802531a:	2b00      	cmp	r3, #0
 802531c:	d025      	beq.n	802536a <validate+0x72>
 802531e:	687b      	ldr	r3, [r7, #4]
 8025320:	889a      	ldrh	r2, [r3, #4]
 8025322:	687b      	ldr	r3, [r7, #4]
 8025324:	681b      	ldr	r3, [r3, #0]
 8025326:	88db      	ldrh	r3, [r3, #6]
 8025328:	429a      	cmp	r2, r3
 802532a:	d11e      	bne.n	802536a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 802532c:	687b      	ldr	r3, [r7, #4]
 802532e:	681b      	ldr	r3, [r3, #0]
 8025330:	4618      	mov	r0, r3
 8025332:	f7fe fb27 	bl	8023984 <lock_fs>
 8025336:	4603      	mov	r3, r0
 8025338:	2b00      	cmp	r3, #0
 802533a:	d014      	beq.n	8025366 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 802533c:	687b      	ldr	r3, [r7, #4]
 802533e:	681b      	ldr	r3, [r3, #0]
 8025340:	785b      	ldrb	r3, [r3, #1]
 8025342:	4618      	mov	r0, r3
 8025344:	f7fe f980 	bl	8023648 <disk_status>
 8025348:	4603      	mov	r3, r0
 802534a:	f003 0301 	and.w	r3, r3, #1
 802534e:	2b00      	cmp	r3, #0
 8025350:	d102      	bne.n	8025358 <validate+0x60>
				res = FR_OK;
 8025352:	2300      	movs	r3, #0
 8025354:	73fb      	strb	r3, [r7, #15]
 8025356:	e008      	b.n	802536a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8025358:	687b      	ldr	r3, [r7, #4]
 802535a:	681b      	ldr	r3, [r3, #0]
 802535c:	2100      	movs	r1, #0
 802535e:	4618      	mov	r0, r3
 8025360:	f7fe fb26 	bl	80239b0 <unlock_fs>
 8025364:	e001      	b.n	802536a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8025366:	230f      	movs	r3, #15
 8025368:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 802536a:	7bfb      	ldrb	r3, [r7, #15]
 802536c:	2b00      	cmp	r3, #0
 802536e:	d102      	bne.n	8025376 <validate+0x7e>
 8025370:	687b      	ldr	r3, [r7, #4]
 8025372:	681b      	ldr	r3, [r3, #0]
 8025374:	e000      	b.n	8025378 <validate+0x80>
 8025376:	2300      	movs	r3, #0
 8025378:	683a      	ldr	r2, [r7, #0]
 802537a:	6013      	str	r3, [r2, #0]
	return res;
 802537c:	7bfb      	ldrb	r3, [r7, #15]
}
 802537e:	4618      	mov	r0, r3
 8025380:	3710      	adds	r7, #16
 8025382:	46bd      	mov	sp, r7
 8025384:	bd80      	pop	{r7, pc}
	...

08025388 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8025388:	b580      	push	{r7, lr}
 802538a:	b088      	sub	sp, #32
 802538c:	af00      	add	r7, sp, #0
 802538e:	60f8      	str	r0, [r7, #12]
 8025390:	60b9      	str	r1, [r7, #8]
 8025392:	4613      	mov	r3, r2
 8025394:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8025396:	68bb      	ldr	r3, [r7, #8]
 8025398:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 802539a:	f107 0310 	add.w	r3, r7, #16
 802539e:	4618      	mov	r0, r3
 80253a0:	f7ff fc88 	bl	8024cb4 <get_ldnumber>
 80253a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80253a6:	69fb      	ldr	r3, [r7, #28]
 80253a8:	2b00      	cmp	r3, #0
 80253aa:	da01      	bge.n	80253b0 <f_mount+0x28>
 80253ac:	230b      	movs	r3, #11
 80253ae:	e048      	b.n	8025442 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80253b0:	4a26      	ldr	r2, [pc, #152]	@ (802544c <f_mount+0xc4>)
 80253b2:	69fb      	ldr	r3, [r7, #28]
 80253b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80253b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80253ba:	69bb      	ldr	r3, [r7, #24]
 80253bc:	2b00      	cmp	r3, #0
 80253be:	d00f      	beq.n	80253e0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80253c0:	69b8      	ldr	r0, [r7, #24]
 80253c2:	f7fe fc59 	bl	8023c78 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80253c6:	69bb      	ldr	r3, [r7, #24]
 80253c8:	691b      	ldr	r3, [r3, #16]
 80253ca:	4618      	mov	r0, r3
 80253cc:	f000 fece 	bl	802616c <ff_del_syncobj>
 80253d0:	4603      	mov	r3, r0
 80253d2:	2b00      	cmp	r3, #0
 80253d4:	d101      	bne.n	80253da <f_mount+0x52>
 80253d6:	2302      	movs	r3, #2
 80253d8:	e033      	b.n	8025442 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80253da:	69bb      	ldr	r3, [r7, #24]
 80253dc:	2200      	movs	r2, #0
 80253de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80253e0:	68fb      	ldr	r3, [r7, #12]
 80253e2:	2b00      	cmp	r3, #0
 80253e4:	d00f      	beq.n	8025406 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80253e6:	68fb      	ldr	r3, [r7, #12]
 80253e8:	2200      	movs	r2, #0
 80253ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80253ec:	69fb      	ldr	r3, [r7, #28]
 80253ee:	b2da      	uxtb	r2, r3
 80253f0:	68fb      	ldr	r3, [r7, #12]
 80253f2:	3310      	adds	r3, #16
 80253f4:	4619      	mov	r1, r3
 80253f6:	4610      	mov	r0, r2
 80253f8:	f000 fe9d 	bl	8026136 <ff_cre_syncobj>
 80253fc:	4603      	mov	r3, r0
 80253fe:	2b00      	cmp	r3, #0
 8025400:	d101      	bne.n	8025406 <f_mount+0x7e>
 8025402:	2302      	movs	r3, #2
 8025404:	e01d      	b.n	8025442 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8025406:	68fa      	ldr	r2, [r7, #12]
 8025408:	4910      	ldr	r1, [pc, #64]	@ (802544c <f_mount+0xc4>)
 802540a:	69fb      	ldr	r3, [r7, #28]
 802540c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8025410:	68fb      	ldr	r3, [r7, #12]
 8025412:	2b00      	cmp	r3, #0
 8025414:	d002      	beq.n	802541c <f_mount+0x94>
 8025416:	79fb      	ldrb	r3, [r7, #7]
 8025418:	2b01      	cmp	r3, #1
 802541a:	d001      	beq.n	8025420 <f_mount+0x98>
 802541c:	2300      	movs	r3, #0
 802541e:	e010      	b.n	8025442 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8025420:	f107 010c 	add.w	r1, r7, #12
 8025424:	f107 0308 	add.w	r3, r7, #8
 8025428:	2200      	movs	r2, #0
 802542a:	4618      	mov	r0, r3
 802542c:	f7ff fcdc 	bl	8024de8 <find_volume>
 8025430:	4603      	mov	r3, r0
 8025432:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8025434:	68fb      	ldr	r3, [r7, #12]
 8025436:	7dfa      	ldrb	r2, [r7, #23]
 8025438:	4611      	mov	r1, r2
 802543a:	4618      	mov	r0, r3
 802543c:	f7fe fab8 	bl	80239b0 <unlock_fs>
 8025440:	7dfb      	ldrb	r3, [r7, #23]
}
 8025442:	4618      	mov	r0, r3
 8025444:	3720      	adds	r7, #32
 8025446:	46bd      	mov	sp, r7
 8025448:	bd80      	pop	{r7, pc}
 802544a:	bf00      	nop
 802544c:	2001d0d0 	.word	0x2001d0d0

08025450 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8025450:	b580      	push	{r7, lr}
 8025452:	b098      	sub	sp, #96	@ 0x60
 8025454:	af00      	add	r7, sp, #0
 8025456:	60f8      	str	r0, [r7, #12]
 8025458:	60b9      	str	r1, [r7, #8]
 802545a:	4613      	mov	r3, r2
 802545c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 802545e:	68fb      	ldr	r3, [r7, #12]
 8025460:	2b00      	cmp	r3, #0
 8025462:	d101      	bne.n	8025468 <f_open+0x18>
 8025464:	2309      	movs	r3, #9
 8025466:	e1be      	b.n	80257e6 <f_open+0x396>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8025468:	79fb      	ldrb	r3, [r7, #7]
 802546a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802546e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8025470:	79fa      	ldrb	r2, [r7, #7]
 8025472:	f107 0110 	add.w	r1, r7, #16
 8025476:	f107 0308 	add.w	r3, r7, #8
 802547a:	4618      	mov	r0, r3
 802547c:	f7ff fcb4 	bl	8024de8 <find_volume>
 8025480:	4603      	mov	r3, r0
 8025482:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8025486:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 802548a:	2b00      	cmp	r3, #0
 802548c:	f040 819b 	bne.w	80257c6 <f_open+0x376>
		dj.obj.fs = fs;
 8025490:	693b      	ldr	r3, [r7, #16]
 8025492:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8025494:	68ba      	ldr	r2, [r7, #8]
 8025496:	f107 0314 	add.w	r3, r7, #20
 802549a:	4611      	mov	r1, r2
 802549c:	4618      	mov	r0, r3
 802549e:	f7ff fb93 	bl	8024bc8 <follow_path>
 80254a2:	4603      	mov	r3, r0
 80254a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80254a8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80254ac:	2b00      	cmp	r3, #0
 80254ae:	d118      	bne.n	80254e2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80254b0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80254b4:	b25b      	sxtb	r3, r3
 80254b6:	2b00      	cmp	r3, #0
 80254b8:	da03      	bge.n	80254c2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80254ba:	2306      	movs	r3, #6
 80254bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80254c0:	e00f      	b.n	80254e2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80254c2:	79fb      	ldrb	r3, [r7, #7]
 80254c4:	2b01      	cmp	r3, #1
 80254c6:	bf8c      	ite	hi
 80254c8:	2301      	movhi	r3, #1
 80254ca:	2300      	movls	r3, #0
 80254cc:	b2db      	uxtb	r3, r3
 80254ce:	461a      	mov	r2, r3
 80254d0:	f107 0314 	add.w	r3, r7, #20
 80254d4:	4611      	mov	r1, r2
 80254d6:	4618      	mov	r0, r3
 80254d8:	f7fe fa86 	bl	80239e8 <chk_lock>
 80254dc:	4603      	mov	r3, r0
 80254de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80254e2:	79fb      	ldrb	r3, [r7, #7]
 80254e4:	f003 031c 	and.w	r3, r3, #28
 80254e8:	2b00      	cmp	r3, #0
 80254ea:	d07f      	beq.n	80255ec <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80254ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80254f0:	2b00      	cmp	r3, #0
 80254f2:	d017      	beq.n	8025524 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80254f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80254f8:	2b04      	cmp	r3, #4
 80254fa:	d10e      	bne.n	802551a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80254fc:	f7fe fad0 	bl	8023aa0 <enq_lock>
 8025500:	4603      	mov	r3, r0
 8025502:	2b00      	cmp	r3, #0
 8025504:	d006      	beq.n	8025514 <f_open+0xc4>
 8025506:	f107 0314 	add.w	r3, r7, #20
 802550a:	4618      	mov	r0, r3
 802550c:	f7ff fa35 	bl	802497a <dir_register>
 8025510:	4603      	mov	r3, r0
 8025512:	e000      	b.n	8025516 <f_open+0xc6>
 8025514:	2312      	movs	r3, #18
 8025516:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 802551a:	79fb      	ldrb	r3, [r7, #7]
 802551c:	f043 0308 	orr.w	r3, r3, #8
 8025520:	71fb      	strb	r3, [r7, #7]
 8025522:	e010      	b.n	8025546 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8025524:	7ebb      	ldrb	r3, [r7, #26]
 8025526:	f003 0311 	and.w	r3, r3, #17
 802552a:	2b00      	cmp	r3, #0
 802552c:	d003      	beq.n	8025536 <f_open+0xe6>
					res = FR_DENIED;
 802552e:	2307      	movs	r3, #7
 8025530:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8025534:	e007      	b.n	8025546 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8025536:	79fb      	ldrb	r3, [r7, #7]
 8025538:	f003 0304 	and.w	r3, r3, #4
 802553c:	2b00      	cmp	r3, #0
 802553e:	d002      	beq.n	8025546 <f_open+0xf6>
 8025540:	2308      	movs	r3, #8
 8025542:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8025546:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 802554a:	2b00      	cmp	r3, #0
 802554c:	d168      	bne.n	8025620 <f_open+0x1d0>
 802554e:	79fb      	ldrb	r3, [r7, #7]
 8025550:	f003 0308 	and.w	r3, r3, #8
 8025554:	2b00      	cmp	r3, #0
 8025556:	d063      	beq.n	8025620 <f_open+0x1d0>
				dw = GET_FATTIME();
 8025558:	f7fa fbdc 	bl	801fd14 <get_fattime>
 802555c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 802555e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025560:	330e      	adds	r3, #14
 8025562:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8025564:	4618      	mov	r0, r3
 8025566:	f7fe f963 	bl	8023830 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 802556a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802556c:	3316      	adds	r3, #22
 802556e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8025570:	4618      	mov	r0, r3
 8025572:	f7fe f95d 	bl	8023830 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8025576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025578:	330b      	adds	r3, #11
 802557a:	2220      	movs	r2, #32
 802557c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 802557e:	693b      	ldr	r3, [r7, #16]
 8025580:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8025582:	4611      	mov	r1, r2
 8025584:	4618      	mov	r0, r3
 8025586:	f7ff f964 	bl	8024852 <ld_clust>
 802558a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 802558c:	693b      	ldr	r3, [r7, #16]
 802558e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8025590:	2200      	movs	r2, #0
 8025592:	4618      	mov	r0, r3
 8025594:	f7ff f97c 	bl	8024890 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8025598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802559a:	331c      	adds	r3, #28
 802559c:	2100      	movs	r1, #0
 802559e:	4618      	mov	r0, r3
 80255a0:	f7fe f946 	bl	8023830 <st_dword>
					fs->wflag = 1;
 80255a4:	693b      	ldr	r3, [r7, #16]
 80255a6:	2201      	movs	r2, #1
 80255a8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80255aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80255ac:	2b00      	cmp	r3, #0
 80255ae:	d037      	beq.n	8025620 <f_open+0x1d0>
						dw = fs->winsect;
 80255b0:	693b      	ldr	r3, [r7, #16]
 80255b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80255b4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80255b6:	f107 0314 	add.w	r3, r7, #20
 80255ba:	2200      	movs	r2, #0
 80255bc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80255be:	4618      	mov	r0, r3
 80255c0:	f7fe fe6c 	bl	802429c <remove_chain>
 80255c4:	4603      	mov	r3, r0
 80255c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80255ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80255ce:	2b00      	cmp	r3, #0
 80255d0:	d126      	bne.n	8025620 <f_open+0x1d0>
							res = move_window(fs, dw);
 80255d2:	693b      	ldr	r3, [r7, #16]
 80255d4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80255d6:	4618      	mov	r0, r3
 80255d8:	f7fe fbb6 	bl	8023d48 <move_window>
 80255dc:	4603      	mov	r3, r0
 80255de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80255e2:	693b      	ldr	r3, [r7, #16]
 80255e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80255e6:	3a01      	subs	r2, #1
 80255e8:	615a      	str	r2, [r3, #20]
 80255ea:	e019      	b.n	8025620 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80255ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80255f0:	2b00      	cmp	r3, #0
 80255f2:	d115      	bne.n	8025620 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80255f4:	7ebb      	ldrb	r3, [r7, #26]
 80255f6:	f003 0310 	and.w	r3, r3, #16
 80255fa:	2b00      	cmp	r3, #0
 80255fc:	d003      	beq.n	8025606 <f_open+0x1b6>
					res = FR_NO_FILE;
 80255fe:	2304      	movs	r3, #4
 8025600:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8025604:	e00c      	b.n	8025620 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8025606:	79fb      	ldrb	r3, [r7, #7]
 8025608:	f003 0302 	and.w	r3, r3, #2
 802560c:	2b00      	cmp	r3, #0
 802560e:	d007      	beq.n	8025620 <f_open+0x1d0>
 8025610:	7ebb      	ldrb	r3, [r7, #26]
 8025612:	f003 0301 	and.w	r3, r3, #1
 8025616:	2b00      	cmp	r3, #0
 8025618:	d002      	beq.n	8025620 <f_open+0x1d0>
						res = FR_DENIED;
 802561a:	2307      	movs	r3, #7
 802561c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8025620:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8025624:	2b00      	cmp	r3, #0
 8025626:	d126      	bne.n	8025676 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8025628:	79fb      	ldrb	r3, [r7, #7]
 802562a:	f003 0308 	and.w	r3, r3, #8
 802562e:	2b00      	cmp	r3, #0
 8025630:	d003      	beq.n	802563a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8025632:	79fb      	ldrb	r3, [r7, #7]
 8025634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025638:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 802563a:	693b      	ldr	r3, [r7, #16]
 802563c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802563e:	68fb      	ldr	r3, [r7, #12]
 8025640:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8025642:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8025644:	68fb      	ldr	r3, [r7, #12]
 8025646:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8025648:	79fb      	ldrb	r3, [r7, #7]
 802564a:	2b01      	cmp	r3, #1
 802564c:	bf8c      	ite	hi
 802564e:	2301      	movhi	r3, #1
 8025650:	2300      	movls	r3, #0
 8025652:	b2db      	uxtb	r3, r3
 8025654:	461a      	mov	r2, r3
 8025656:	f107 0314 	add.w	r3, r7, #20
 802565a:	4611      	mov	r1, r2
 802565c:	4618      	mov	r0, r3
 802565e:	f7fe fa41 	bl	8023ae4 <inc_lock>
 8025662:	4602      	mov	r2, r0
 8025664:	68fb      	ldr	r3, [r7, #12]
 8025666:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8025668:	68fb      	ldr	r3, [r7, #12]
 802566a:	691b      	ldr	r3, [r3, #16]
 802566c:	2b00      	cmp	r3, #0
 802566e:	d102      	bne.n	8025676 <f_open+0x226>
 8025670:	2302      	movs	r3, #2
 8025672:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8025676:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 802567a:	2b00      	cmp	r3, #0
 802567c:	f040 80a3 	bne.w	80257c6 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8025680:	693b      	ldr	r3, [r7, #16]
 8025682:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8025684:	4611      	mov	r1, r2
 8025686:	4618      	mov	r0, r3
 8025688:	f7ff f8e3 	bl	8024852 <ld_clust>
 802568c:	4602      	mov	r2, r0
 802568e:	68fb      	ldr	r3, [r7, #12]
 8025690:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8025692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025694:	331c      	adds	r3, #28
 8025696:	4618      	mov	r0, r3
 8025698:	f7fe f88c 	bl	80237b4 <ld_dword>
 802569c:	4602      	mov	r2, r0
 802569e:	68fb      	ldr	r3, [r7, #12]
 80256a0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80256a2:	68fb      	ldr	r3, [r7, #12]
 80256a4:	2200      	movs	r2, #0
 80256a6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80256a8:	693a      	ldr	r2, [r7, #16]
 80256aa:	68fb      	ldr	r3, [r7, #12]
 80256ac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80256ae:	693b      	ldr	r3, [r7, #16]
 80256b0:	88da      	ldrh	r2, [r3, #6]
 80256b2:	68fb      	ldr	r3, [r7, #12]
 80256b4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80256b6:	68fb      	ldr	r3, [r7, #12]
 80256b8:	79fa      	ldrb	r2, [r7, #7]
 80256ba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80256bc:	68fb      	ldr	r3, [r7, #12]
 80256be:	2200      	movs	r2, #0
 80256c0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80256c2:	68fb      	ldr	r3, [r7, #12]
 80256c4:	2200      	movs	r2, #0
 80256c6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80256c8:	68fb      	ldr	r3, [r7, #12]
 80256ca:	2200      	movs	r2, #0
 80256cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80256ce:	68fb      	ldr	r3, [r7, #12]
 80256d0:	3330      	adds	r3, #48	@ 0x30
 80256d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80256d6:	2100      	movs	r1, #0
 80256d8:	4618      	mov	r0, r3
 80256da:	f7fe f8f6 	bl	80238ca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80256de:	79fb      	ldrb	r3, [r7, #7]
 80256e0:	f003 0320 	and.w	r3, r3, #32
 80256e4:	2b00      	cmp	r3, #0
 80256e6:	d06e      	beq.n	80257c6 <f_open+0x376>
 80256e8:	68fb      	ldr	r3, [r7, #12]
 80256ea:	68db      	ldr	r3, [r3, #12]
 80256ec:	2b00      	cmp	r3, #0
 80256ee:	d06a      	beq.n	80257c6 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80256f0:	68fb      	ldr	r3, [r7, #12]
 80256f2:	68da      	ldr	r2, [r3, #12]
 80256f4:	68fb      	ldr	r3, [r7, #12]
 80256f6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80256f8:	693b      	ldr	r3, [r7, #16]
 80256fa:	895b      	ldrh	r3, [r3, #10]
 80256fc:	461a      	mov	r2, r3
 80256fe:	693b      	ldr	r3, [r7, #16]
 8025700:	899b      	ldrh	r3, [r3, #12]
 8025702:	fb02 f303 	mul.w	r3, r2, r3
 8025706:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8025708:	68fb      	ldr	r3, [r7, #12]
 802570a:	689b      	ldr	r3, [r3, #8]
 802570c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 802570e:	68fb      	ldr	r3, [r7, #12]
 8025710:	68db      	ldr	r3, [r3, #12]
 8025712:	657b      	str	r3, [r7, #84]	@ 0x54
 8025714:	e016      	b.n	8025744 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8025716:	68fb      	ldr	r3, [r7, #12]
 8025718:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 802571a:	4618      	mov	r0, r3
 802571c:	f7fe fbd1 	bl	8023ec2 <get_fat>
 8025720:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8025722:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8025724:	2b01      	cmp	r3, #1
 8025726:	d802      	bhi.n	802572e <f_open+0x2de>
 8025728:	2302      	movs	r3, #2
 802572a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 802572e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8025730:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8025734:	d102      	bne.n	802573c <f_open+0x2ec>
 8025736:	2301      	movs	r3, #1
 8025738:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 802573c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802573e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8025740:	1ad3      	subs	r3, r2, r3
 8025742:	657b      	str	r3, [r7, #84]	@ 0x54
 8025744:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8025748:	2b00      	cmp	r3, #0
 802574a:	d103      	bne.n	8025754 <f_open+0x304>
 802574c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802574e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8025750:	429a      	cmp	r2, r3
 8025752:	d8e0      	bhi.n	8025716 <f_open+0x2c6>
				}
				fp->clust = clst;
 8025754:	68fb      	ldr	r3, [r7, #12]
 8025756:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8025758:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 802575a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 802575e:	2b00      	cmp	r3, #0
 8025760:	d131      	bne.n	80257c6 <f_open+0x376>
 8025762:	693b      	ldr	r3, [r7, #16]
 8025764:	899b      	ldrh	r3, [r3, #12]
 8025766:	461a      	mov	r2, r3
 8025768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802576a:	fbb3 f1f2 	udiv	r1, r3, r2
 802576e:	fb01 f202 	mul.w	r2, r1, r2
 8025772:	1a9b      	subs	r3, r3, r2
 8025774:	2b00      	cmp	r3, #0
 8025776:	d026      	beq.n	80257c6 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8025778:	693b      	ldr	r3, [r7, #16]
 802577a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 802577c:	4618      	mov	r0, r3
 802577e:	f7fe fb81 	bl	8023e84 <clust2sect>
 8025782:	6478      	str	r0, [r7, #68]	@ 0x44
 8025784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8025786:	2b00      	cmp	r3, #0
 8025788:	d103      	bne.n	8025792 <f_open+0x342>
						res = FR_INT_ERR;
 802578a:	2302      	movs	r3, #2
 802578c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8025790:	e019      	b.n	80257c6 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8025792:	693b      	ldr	r3, [r7, #16]
 8025794:	899b      	ldrh	r3, [r3, #12]
 8025796:	461a      	mov	r2, r3
 8025798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802579a:	fbb3 f2f2 	udiv	r2, r3, r2
 802579e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80257a0:	441a      	add	r2, r3
 80257a2:	68fb      	ldr	r3, [r7, #12]
 80257a4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80257a6:	693b      	ldr	r3, [r7, #16]
 80257a8:	7858      	ldrb	r0, [r3, #1]
 80257aa:	68fb      	ldr	r3, [r7, #12]
 80257ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80257b0:	68fb      	ldr	r3, [r7, #12]
 80257b2:	6a1a      	ldr	r2, [r3, #32]
 80257b4:	2301      	movs	r3, #1
 80257b6:	f7fd ff87 	bl	80236c8 <disk_read>
 80257ba:	4603      	mov	r3, r0
 80257bc:	2b00      	cmp	r3, #0
 80257be:	d002      	beq.n	80257c6 <f_open+0x376>
 80257c0:	2301      	movs	r3, #1
 80257c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80257c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80257ca:	2b00      	cmp	r3, #0
 80257cc:	d002      	beq.n	80257d4 <f_open+0x384>
 80257ce:	68fb      	ldr	r3, [r7, #12]
 80257d0:	2200      	movs	r2, #0
 80257d2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80257d4:	693b      	ldr	r3, [r7, #16]
 80257d6:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80257da:	4611      	mov	r1, r2
 80257dc:	4618      	mov	r0, r3
 80257de:	f7fe f8e7 	bl	80239b0 <unlock_fs>
 80257e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80257e6:	4618      	mov	r0, r3
 80257e8:	3760      	adds	r7, #96	@ 0x60
 80257ea:	46bd      	mov	sp, r7
 80257ec:	bd80      	pop	{r7, pc}

080257ee <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80257ee:	b580      	push	{r7, lr}
 80257f0:	b08e      	sub	sp, #56	@ 0x38
 80257f2:	af00      	add	r7, sp, #0
 80257f4:	60f8      	str	r0, [r7, #12]
 80257f6:	60b9      	str	r1, [r7, #8]
 80257f8:	607a      	str	r2, [r7, #4]
 80257fa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80257fc:	68bb      	ldr	r3, [r7, #8]
 80257fe:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8025800:	683b      	ldr	r3, [r7, #0]
 8025802:	2200      	movs	r2, #0
 8025804:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8025806:	68fb      	ldr	r3, [r7, #12]
 8025808:	f107 0214 	add.w	r2, r7, #20
 802580c:	4611      	mov	r1, r2
 802580e:	4618      	mov	r0, r3
 8025810:	f7ff fd72 	bl	80252f8 <validate>
 8025814:	4603      	mov	r3, r0
 8025816:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 802581a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 802581e:	2b00      	cmp	r3, #0
 8025820:	d107      	bne.n	8025832 <f_read+0x44>
 8025822:	68fb      	ldr	r3, [r7, #12]
 8025824:	7d5b      	ldrb	r3, [r3, #21]
 8025826:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 802582a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 802582e:	2b00      	cmp	r3, #0
 8025830:	d009      	beq.n	8025846 <f_read+0x58>
 8025832:	697b      	ldr	r3, [r7, #20]
 8025834:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8025838:	4611      	mov	r1, r2
 802583a:	4618      	mov	r0, r3
 802583c:	f7fe f8b8 	bl	80239b0 <unlock_fs>
 8025840:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8025844:	e15d      	b.n	8025b02 <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8025846:	68fb      	ldr	r3, [r7, #12]
 8025848:	7d1b      	ldrb	r3, [r3, #20]
 802584a:	f003 0301 	and.w	r3, r3, #1
 802584e:	2b00      	cmp	r3, #0
 8025850:	d106      	bne.n	8025860 <f_read+0x72>
 8025852:	697b      	ldr	r3, [r7, #20]
 8025854:	2107      	movs	r1, #7
 8025856:	4618      	mov	r0, r3
 8025858:	f7fe f8aa 	bl	80239b0 <unlock_fs>
 802585c:	2307      	movs	r3, #7
 802585e:	e150      	b.n	8025b02 <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 8025860:	68fb      	ldr	r3, [r7, #12]
 8025862:	68da      	ldr	r2, [r3, #12]
 8025864:	68fb      	ldr	r3, [r7, #12]
 8025866:	699b      	ldr	r3, [r3, #24]
 8025868:	1ad3      	subs	r3, r2, r3
 802586a:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 802586c:	687a      	ldr	r2, [r7, #4]
 802586e:	6a3b      	ldr	r3, [r7, #32]
 8025870:	429a      	cmp	r2, r3
 8025872:	f240 813c 	bls.w	8025aee <f_read+0x300>
 8025876:	6a3b      	ldr	r3, [r7, #32]
 8025878:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 802587a:	e138      	b.n	8025aee <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 802587c:	68fb      	ldr	r3, [r7, #12]
 802587e:	699b      	ldr	r3, [r3, #24]
 8025880:	697a      	ldr	r2, [r7, #20]
 8025882:	8992      	ldrh	r2, [r2, #12]
 8025884:	fbb3 f1f2 	udiv	r1, r3, r2
 8025888:	fb01 f202 	mul.w	r2, r1, r2
 802588c:	1a9b      	subs	r3, r3, r2
 802588e:	2b00      	cmp	r3, #0
 8025890:	f040 80f3 	bne.w	8025a7a <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8025894:	68fb      	ldr	r3, [r7, #12]
 8025896:	699b      	ldr	r3, [r3, #24]
 8025898:	697a      	ldr	r2, [r7, #20]
 802589a:	8992      	ldrh	r2, [r2, #12]
 802589c:	fbb3 f3f2 	udiv	r3, r3, r2
 80258a0:	697a      	ldr	r2, [r7, #20]
 80258a2:	8952      	ldrh	r2, [r2, #10]
 80258a4:	3a01      	subs	r2, #1
 80258a6:	4013      	ands	r3, r2
 80258a8:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80258aa:	69fb      	ldr	r3, [r7, #28]
 80258ac:	2b00      	cmp	r3, #0
 80258ae:	d139      	bne.n	8025924 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80258b0:	68fb      	ldr	r3, [r7, #12]
 80258b2:	699b      	ldr	r3, [r3, #24]
 80258b4:	2b00      	cmp	r3, #0
 80258b6:	d103      	bne.n	80258c0 <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80258b8:	68fb      	ldr	r3, [r7, #12]
 80258ba:	689b      	ldr	r3, [r3, #8]
 80258bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80258be:	e013      	b.n	80258e8 <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80258c0:	68fb      	ldr	r3, [r7, #12]
 80258c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80258c4:	2b00      	cmp	r3, #0
 80258c6:	d007      	beq.n	80258d8 <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80258c8:	68fb      	ldr	r3, [r7, #12]
 80258ca:	699b      	ldr	r3, [r3, #24]
 80258cc:	4619      	mov	r1, r3
 80258ce:	68f8      	ldr	r0, [r7, #12]
 80258d0:	f7fe fde1 	bl	8024496 <clmt_clust>
 80258d4:	6338      	str	r0, [r7, #48]	@ 0x30
 80258d6:	e007      	b.n	80258e8 <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80258d8:	68fa      	ldr	r2, [r7, #12]
 80258da:	68fb      	ldr	r3, [r7, #12]
 80258dc:	69db      	ldr	r3, [r3, #28]
 80258de:	4619      	mov	r1, r3
 80258e0:	4610      	mov	r0, r2
 80258e2:	f7fe faee 	bl	8023ec2 <get_fat>
 80258e6:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80258e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80258ea:	2b01      	cmp	r3, #1
 80258ec:	d809      	bhi.n	8025902 <f_read+0x114>
 80258ee:	68fb      	ldr	r3, [r7, #12]
 80258f0:	2202      	movs	r2, #2
 80258f2:	755a      	strb	r2, [r3, #21]
 80258f4:	697b      	ldr	r3, [r7, #20]
 80258f6:	2102      	movs	r1, #2
 80258f8:	4618      	mov	r0, r3
 80258fa:	f7fe f859 	bl	80239b0 <unlock_fs>
 80258fe:	2302      	movs	r3, #2
 8025900:	e0ff      	b.n	8025b02 <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8025902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025904:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8025908:	d109      	bne.n	802591e <f_read+0x130>
 802590a:	68fb      	ldr	r3, [r7, #12]
 802590c:	2201      	movs	r2, #1
 802590e:	755a      	strb	r2, [r3, #21]
 8025910:	697b      	ldr	r3, [r7, #20]
 8025912:	2101      	movs	r1, #1
 8025914:	4618      	mov	r0, r3
 8025916:	f7fe f84b 	bl	80239b0 <unlock_fs>
 802591a:	2301      	movs	r3, #1
 802591c:	e0f1      	b.n	8025b02 <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 802591e:	68fb      	ldr	r3, [r7, #12]
 8025920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8025922:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8025924:	697a      	ldr	r2, [r7, #20]
 8025926:	68fb      	ldr	r3, [r7, #12]
 8025928:	69db      	ldr	r3, [r3, #28]
 802592a:	4619      	mov	r1, r3
 802592c:	4610      	mov	r0, r2
 802592e:	f7fe faa9 	bl	8023e84 <clust2sect>
 8025932:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8025934:	69bb      	ldr	r3, [r7, #24]
 8025936:	2b00      	cmp	r3, #0
 8025938:	d109      	bne.n	802594e <f_read+0x160>
 802593a:	68fb      	ldr	r3, [r7, #12]
 802593c:	2202      	movs	r2, #2
 802593e:	755a      	strb	r2, [r3, #21]
 8025940:	697b      	ldr	r3, [r7, #20]
 8025942:	2102      	movs	r1, #2
 8025944:	4618      	mov	r0, r3
 8025946:	f7fe f833 	bl	80239b0 <unlock_fs>
 802594a:	2302      	movs	r3, #2
 802594c:	e0d9      	b.n	8025b02 <f_read+0x314>
			sect += csect;
 802594e:	69ba      	ldr	r2, [r7, #24]
 8025950:	69fb      	ldr	r3, [r7, #28]
 8025952:	4413      	add	r3, r2
 8025954:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8025956:	697b      	ldr	r3, [r7, #20]
 8025958:	899b      	ldrh	r3, [r3, #12]
 802595a:	461a      	mov	r2, r3
 802595c:	687b      	ldr	r3, [r7, #4]
 802595e:	fbb3 f3f2 	udiv	r3, r3, r2
 8025962:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8025964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025966:	2b00      	cmp	r3, #0
 8025968:	d046      	beq.n	80259f8 <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 802596a:	69fa      	ldr	r2, [r7, #28]
 802596c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802596e:	4413      	add	r3, r2
 8025970:	697a      	ldr	r2, [r7, #20]
 8025972:	8952      	ldrh	r2, [r2, #10]
 8025974:	4293      	cmp	r3, r2
 8025976:	d905      	bls.n	8025984 <f_read+0x196>
					cc = fs->csize - csect;
 8025978:	697b      	ldr	r3, [r7, #20]
 802597a:	895b      	ldrh	r3, [r3, #10]
 802597c:	461a      	mov	r2, r3
 802597e:	69fb      	ldr	r3, [r7, #28]
 8025980:	1ad3      	subs	r3, r2, r3
 8025982:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8025984:	697b      	ldr	r3, [r7, #20]
 8025986:	7858      	ldrb	r0, [r3, #1]
 8025988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802598a:	69ba      	ldr	r2, [r7, #24]
 802598c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 802598e:	f7fd fe9b 	bl	80236c8 <disk_read>
 8025992:	4603      	mov	r3, r0
 8025994:	2b00      	cmp	r3, #0
 8025996:	d009      	beq.n	80259ac <f_read+0x1be>
 8025998:	68fb      	ldr	r3, [r7, #12]
 802599a:	2201      	movs	r2, #1
 802599c:	755a      	strb	r2, [r3, #21]
 802599e:	697b      	ldr	r3, [r7, #20]
 80259a0:	2101      	movs	r1, #1
 80259a2:	4618      	mov	r0, r3
 80259a4:	f7fe f804 	bl	80239b0 <unlock_fs>
 80259a8:	2301      	movs	r3, #1
 80259aa:	e0aa      	b.n	8025b02 <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80259ac:	68fb      	ldr	r3, [r7, #12]
 80259ae:	7d1b      	ldrb	r3, [r3, #20]
 80259b0:	b25b      	sxtb	r3, r3
 80259b2:	2b00      	cmp	r3, #0
 80259b4:	da18      	bge.n	80259e8 <f_read+0x1fa>
 80259b6:	68fb      	ldr	r3, [r7, #12]
 80259b8:	6a1a      	ldr	r2, [r3, #32]
 80259ba:	69bb      	ldr	r3, [r7, #24]
 80259bc:	1ad3      	subs	r3, r2, r3
 80259be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80259c0:	429a      	cmp	r2, r3
 80259c2:	d911      	bls.n	80259e8 <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80259c4:	68fb      	ldr	r3, [r7, #12]
 80259c6:	6a1a      	ldr	r2, [r3, #32]
 80259c8:	69bb      	ldr	r3, [r7, #24]
 80259ca:	1ad3      	subs	r3, r2, r3
 80259cc:	697a      	ldr	r2, [r7, #20]
 80259ce:	8992      	ldrh	r2, [r2, #12]
 80259d0:	fb02 f303 	mul.w	r3, r2, r3
 80259d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80259d6:	18d0      	adds	r0, r2, r3
 80259d8:	68fb      	ldr	r3, [r7, #12]
 80259da:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80259de:	697b      	ldr	r3, [r7, #20]
 80259e0:	899b      	ldrh	r3, [r3, #12]
 80259e2:	461a      	mov	r2, r3
 80259e4:	f7fd ff50 	bl	8023888 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80259e8:	697b      	ldr	r3, [r7, #20]
 80259ea:	899b      	ldrh	r3, [r3, #12]
 80259ec:	461a      	mov	r2, r3
 80259ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80259f0:	fb02 f303 	mul.w	r3, r2, r3
 80259f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80259f6:	e066      	b.n	8025ac6 <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80259f8:	68fb      	ldr	r3, [r7, #12]
 80259fa:	6a1b      	ldr	r3, [r3, #32]
 80259fc:	69ba      	ldr	r2, [r7, #24]
 80259fe:	429a      	cmp	r2, r3
 8025a00:	d038      	beq.n	8025a74 <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8025a02:	68fb      	ldr	r3, [r7, #12]
 8025a04:	7d1b      	ldrb	r3, [r3, #20]
 8025a06:	b25b      	sxtb	r3, r3
 8025a08:	2b00      	cmp	r3, #0
 8025a0a:	da1d      	bge.n	8025a48 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8025a0c:	697b      	ldr	r3, [r7, #20]
 8025a0e:	7858      	ldrb	r0, [r3, #1]
 8025a10:	68fb      	ldr	r3, [r7, #12]
 8025a12:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8025a16:	68fb      	ldr	r3, [r7, #12]
 8025a18:	6a1a      	ldr	r2, [r3, #32]
 8025a1a:	2301      	movs	r3, #1
 8025a1c:	f7fd fe74 	bl	8023708 <disk_write>
 8025a20:	4603      	mov	r3, r0
 8025a22:	2b00      	cmp	r3, #0
 8025a24:	d009      	beq.n	8025a3a <f_read+0x24c>
 8025a26:	68fb      	ldr	r3, [r7, #12]
 8025a28:	2201      	movs	r2, #1
 8025a2a:	755a      	strb	r2, [r3, #21]
 8025a2c:	697b      	ldr	r3, [r7, #20]
 8025a2e:	2101      	movs	r1, #1
 8025a30:	4618      	mov	r0, r3
 8025a32:	f7fd ffbd 	bl	80239b0 <unlock_fs>
 8025a36:	2301      	movs	r3, #1
 8025a38:	e063      	b.n	8025b02 <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 8025a3a:	68fb      	ldr	r3, [r7, #12]
 8025a3c:	7d1b      	ldrb	r3, [r3, #20]
 8025a3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8025a42:	b2da      	uxtb	r2, r3
 8025a44:	68fb      	ldr	r3, [r7, #12]
 8025a46:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8025a48:	697b      	ldr	r3, [r7, #20]
 8025a4a:	7858      	ldrb	r0, [r3, #1]
 8025a4c:	68fb      	ldr	r3, [r7, #12]
 8025a4e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8025a52:	2301      	movs	r3, #1
 8025a54:	69ba      	ldr	r2, [r7, #24]
 8025a56:	f7fd fe37 	bl	80236c8 <disk_read>
 8025a5a:	4603      	mov	r3, r0
 8025a5c:	2b00      	cmp	r3, #0
 8025a5e:	d009      	beq.n	8025a74 <f_read+0x286>
 8025a60:	68fb      	ldr	r3, [r7, #12]
 8025a62:	2201      	movs	r2, #1
 8025a64:	755a      	strb	r2, [r3, #21]
 8025a66:	697b      	ldr	r3, [r7, #20]
 8025a68:	2101      	movs	r1, #1
 8025a6a:	4618      	mov	r0, r3
 8025a6c:	f7fd ffa0 	bl	80239b0 <unlock_fs>
 8025a70:	2301      	movs	r3, #1
 8025a72:	e046      	b.n	8025b02 <f_read+0x314>
			}
#endif
			fp->sect = sect;
 8025a74:	68fb      	ldr	r3, [r7, #12]
 8025a76:	69ba      	ldr	r2, [r7, #24]
 8025a78:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8025a7a:	697b      	ldr	r3, [r7, #20]
 8025a7c:	899b      	ldrh	r3, [r3, #12]
 8025a7e:	4618      	mov	r0, r3
 8025a80:	68fb      	ldr	r3, [r7, #12]
 8025a82:	699b      	ldr	r3, [r3, #24]
 8025a84:	697a      	ldr	r2, [r7, #20]
 8025a86:	8992      	ldrh	r2, [r2, #12]
 8025a88:	fbb3 f1f2 	udiv	r1, r3, r2
 8025a8c:	fb01 f202 	mul.w	r2, r1, r2
 8025a90:	1a9b      	subs	r3, r3, r2
 8025a92:	1ac3      	subs	r3, r0, r3
 8025a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8025a96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8025a98:	687b      	ldr	r3, [r7, #4]
 8025a9a:	429a      	cmp	r2, r3
 8025a9c:	d901      	bls.n	8025aa2 <f_read+0x2b4>
 8025a9e:	687b      	ldr	r3, [r7, #4]
 8025aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8025aa2:	68fb      	ldr	r3, [r7, #12]
 8025aa4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8025aa8:	68fb      	ldr	r3, [r7, #12]
 8025aaa:	699b      	ldr	r3, [r3, #24]
 8025aac:	697a      	ldr	r2, [r7, #20]
 8025aae:	8992      	ldrh	r2, [r2, #12]
 8025ab0:	fbb3 f0f2 	udiv	r0, r3, r2
 8025ab4:	fb00 f202 	mul.w	r2, r0, r2
 8025ab8:	1a9b      	subs	r3, r3, r2
 8025aba:	440b      	add	r3, r1
 8025abc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8025abe:	4619      	mov	r1, r3
 8025ac0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8025ac2:	f7fd fee1 	bl	8023888 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8025ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025aca:	4413      	add	r3, r2
 8025acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8025ace:	68fb      	ldr	r3, [r7, #12]
 8025ad0:	699a      	ldr	r2, [r3, #24]
 8025ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025ad4:	441a      	add	r2, r3
 8025ad6:	68fb      	ldr	r3, [r7, #12]
 8025ad8:	619a      	str	r2, [r3, #24]
 8025ada:	683b      	ldr	r3, [r7, #0]
 8025adc:	681a      	ldr	r2, [r3, #0]
 8025ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025ae0:	441a      	add	r2, r3
 8025ae2:	683b      	ldr	r3, [r7, #0]
 8025ae4:	601a      	str	r2, [r3, #0]
 8025ae6:	687a      	ldr	r2, [r7, #4]
 8025ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025aea:	1ad3      	subs	r3, r2, r3
 8025aec:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8025aee:	687b      	ldr	r3, [r7, #4]
 8025af0:	2b00      	cmp	r3, #0
 8025af2:	f47f aec3 	bne.w	802587c <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8025af6:	697b      	ldr	r3, [r7, #20]
 8025af8:	2100      	movs	r1, #0
 8025afa:	4618      	mov	r0, r3
 8025afc:	f7fd ff58 	bl	80239b0 <unlock_fs>
 8025b00:	2300      	movs	r3, #0
}
 8025b02:	4618      	mov	r0, r3
 8025b04:	3738      	adds	r7, #56	@ 0x38
 8025b06:	46bd      	mov	sp, r7
 8025b08:	bd80      	pop	{r7, pc}

08025b0a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8025b0a:	b580      	push	{r7, lr}
 8025b0c:	b08c      	sub	sp, #48	@ 0x30
 8025b0e:	af00      	add	r7, sp, #0
 8025b10:	60f8      	str	r0, [r7, #12]
 8025b12:	60b9      	str	r1, [r7, #8]
 8025b14:	607a      	str	r2, [r7, #4]
 8025b16:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8025b18:	68bb      	ldr	r3, [r7, #8]
 8025b1a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8025b1c:	683b      	ldr	r3, [r7, #0]
 8025b1e:	2200      	movs	r2, #0
 8025b20:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8025b22:	68fb      	ldr	r3, [r7, #12]
 8025b24:	f107 0210 	add.w	r2, r7, #16
 8025b28:	4611      	mov	r1, r2
 8025b2a:	4618      	mov	r0, r3
 8025b2c:	f7ff fbe4 	bl	80252f8 <validate>
 8025b30:	4603      	mov	r3, r0
 8025b32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8025b36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8025b3a:	2b00      	cmp	r3, #0
 8025b3c:	d107      	bne.n	8025b4e <f_write+0x44>
 8025b3e:	68fb      	ldr	r3, [r7, #12]
 8025b40:	7d5b      	ldrb	r3, [r3, #21]
 8025b42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8025b46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8025b4a:	2b00      	cmp	r3, #0
 8025b4c:	d009      	beq.n	8025b62 <f_write+0x58>
 8025b4e:	693b      	ldr	r3, [r7, #16]
 8025b50:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8025b54:	4611      	mov	r1, r2
 8025b56:	4618      	mov	r0, r3
 8025b58:	f7fd ff2a 	bl	80239b0 <unlock_fs>
 8025b5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8025b60:	e192      	b.n	8025e88 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8025b62:	68fb      	ldr	r3, [r7, #12]
 8025b64:	7d1b      	ldrb	r3, [r3, #20]
 8025b66:	f003 0302 	and.w	r3, r3, #2
 8025b6a:	2b00      	cmp	r3, #0
 8025b6c:	d106      	bne.n	8025b7c <f_write+0x72>
 8025b6e:	693b      	ldr	r3, [r7, #16]
 8025b70:	2107      	movs	r1, #7
 8025b72:	4618      	mov	r0, r3
 8025b74:	f7fd ff1c 	bl	80239b0 <unlock_fs>
 8025b78:	2307      	movs	r3, #7
 8025b7a:	e185      	b.n	8025e88 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8025b7c:	68fb      	ldr	r3, [r7, #12]
 8025b7e:	699a      	ldr	r2, [r3, #24]
 8025b80:	687b      	ldr	r3, [r7, #4]
 8025b82:	441a      	add	r2, r3
 8025b84:	68fb      	ldr	r3, [r7, #12]
 8025b86:	699b      	ldr	r3, [r3, #24]
 8025b88:	429a      	cmp	r2, r3
 8025b8a:	f080 816a 	bcs.w	8025e62 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8025b8e:	68fb      	ldr	r3, [r7, #12]
 8025b90:	699b      	ldr	r3, [r3, #24]
 8025b92:	43db      	mvns	r3, r3
 8025b94:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8025b96:	e164      	b.n	8025e62 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8025b98:	68fb      	ldr	r3, [r7, #12]
 8025b9a:	699b      	ldr	r3, [r3, #24]
 8025b9c:	693a      	ldr	r2, [r7, #16]
 8025b9e:	8992      	ldrh	r2, [r2, #12]
 8025ba0:	fbb3 f1f2 	udiv	r1, r3, r2
 8025ba4:	fb01 f202 	mul.w	r2, r1, r2
 8025ba8:	1a9b      	subs	r3, r3, r2
 8025baa:	2b00      	cmp	r3, #0
 8025bac:	f040 810f 	bne.w	8025dce <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8025bb0:	68fb      	ldr	r3, [r7, #12]
 8025bb2:	699b      	ldr	r3, [r3, #24]
 8025bb4:	693a      	ldr	r2, [r7, #16]
 8025bb6:	8992      	ldrh	r2, [r2, #12]
 8025bb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8025bbc:	693a      	ldr	r2, [r7, #16]
 8025bbe:	8952      	ldrh	r2, [r2, #10]
 8025bc0:	3a01      	subs	r2, #1
 8025bc2:	4013      	ands	r3, r2
 8025bc4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8025bc6:	69bb      	ldr	r3, [r7, #24]
 8025bc8:	2b00      	cmp	r3, #0
 8025bca:	d14d      	bne.n	8025c68 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8025bcc:	68fb      	ldr	r3, [r7, #12]
 8025bce:	699b      	ldr	r3, [r3, #24]
 8025bd0:	2b00      	cmp	r3, #0
 8025bd2:	d10c      	bne.n	8025bee <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8025bd4:	68fb      	ldr	r3, [r7, #12]
 8025bd6:	689b      	ldr	r3, [r3, #8]
 8025bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8025bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025bdc:	2b00      	cmp	r3, #0
 8025bde:	d11a      	bne.n	8025c16 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8025be0:	68fb      	ldr	r3, [r7, #12]
 8025be2:	2100      	movs	r1, #0
 8025be4:	4618      	mov	r0, r3
 8025be6:	f7fe fbbe 	bl	8024366 <create_chain>
 8025bea:	62b8      	str	r0, [r7, #40]	@ 0x28
 8025bec:	e013      	b.n	8025c16 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8025bee:	68fb      	ldr	r3, [r7, #12]
 8025bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025bf2:	2b00      	cmp	r3, #0
 8025bf4:	d007      	beq.n	8025c06 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8025bf6:	68fb      	ldr	r3, [r7, #12]
 8025bf8:	699b      	ldr	r3, [r3, #24]
 8025bfa:	4619      	mov	r1, r3
 8025bfc:	68f8      	ldr	r0, [r7, #12]
 8025bfe:	f7fe fc4a 	bl	8024496 <clmt_clust>
 8025c02:	62b8      	str	r0, [r7, #40]	@ 0x28
 8025c04:	e007      	b.n	8025c16 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8025c06:	68fa      	ldr	r2, [r7, #12]
 8025c08:	68fb      	ldr	r3, [r7, #12]
 8025c0a:	69db      	ldr	r3, [r3, #28]
 8025c0c:	4619      	mov	r1, r3
 8025c0e:	4610      	mov	r0, r2
 8025c10:	f7fe fba9 	bl	8024366 <create_chain>
 8025c14:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8025c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025c18:	2b00      	cmp	r3, #0
 8025c1a:	f000 8127 	beq.w	8025e6c <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8025c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025c20:	2b01      	cmp	r3, #1
 8025c22:	d109      	bne.n	8025c38 <f_write+0x12e>
 8025c24:	68fb      	ldr	r3, [r7, #12]
 8025c26:	2202      	movs	r2, #2
 8025c28:	755a      	strb	r2, [r3, #21]
 8025c2a:	693b      	ldr	r3, [r7, #16]
 8025c2c:	2102      	movs	r1, #2
 8025c2e:	4618      	mov	r0, r3
 8025c30:	f7fd febe 	bl	80239b0 <unlock_fs>
 8025c34:	2302      	movs	r3, #2
 8025c36:	e127      	b.n	8025e88 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8025c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8025c3e:	d109      	bne.n	8025c54 <f_write+0x14a>
 8025c40:	68fb      	ldr	r3, [r7, #12]
 8025c42:	2201      	movs	r2, #1
 8025c44:	755a      	strb	r2, [r3, #21]
 8025c46:	693b      	ldr	r3, [r7, #16]
 8025c48:	2101      	movs	r1, #1
 8025c4a:	4618      	mov	r0, r3
 8025c4c:	f7fd feb0 	bl	80239b0 <unlock_fs>
 8025c50:	2301      	movs	r3, #1
 8025c52:	e119      	b.n	8025e88 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8025c54:	68fb      	ldr	r3, [r7, #12]
 8025c56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8025c58:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8025c5a:	68fb      	ldr	r3, [r7, #12]
 8025c5c:	689b      	ldr	r3, [r3, #8]
 8025c5e:	2b00      	cmp	r3, #0
 8025c60:	d102      	bne.n	8025c68 <f_write+0x15e>
 8025c62:	68fb      	ldr	r3, [r7, #12]
 8025c64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8025c66:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8025c68:	68fb      	ldr	r3, [r7, #12]
 8025c6a:	7d1b      	ldrb	r3, [r3, #20]
 8025c6c:	b25b      	sxtb	r3, r3
 8025c6e:	2b00      	cmp	r3, #0
 8025c70:	da1d      	bge.n	8025cae <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8025c72:	693b      	ldr	r3, [r7, #16]
 8025c74:	7858      	ldrb	r0, [r3, #1]
 8025c76:	68fb      	ldr	r3, [r7, #12]
 8025c78:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8025c7c:	68fb      	ldr	r3, [r7, #12]
 8025c7e:	6a1a      	ldr	r2, [r3, #32]
 8025c80:	2301      	movs	r3, #1
 8025c82:	f7fd fd41 	bl	8023708 <disk_write>
 8025c86:	4603      	mov	r3, r0
 8025c88:	2b00      	cmp	r3, #0
 8025c8a:	d009      	beq.n	8025ca0 <f_write+0x196>
 8025c8c:	68fb      	ldr	r3, [r7, #12]
 8025c8e:	2201      	movs	r2, #1
 8025c90:	755a      	strb	r2, [r3, #21]
 8025c92:	693b      	ldr	r3, [r7, #16]
 8025c94:	2101      	movs	r1, #1
 8025c96:	4618      	mov	r0, r3
 8025c98:	f7fd fe8a 	bl	80239b0 <unlock_fs>
 8025c9c:	2301      	movs	r3, #1
 8025c9e:	e0f3      	b.n	8025e88 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8025ca0:	68fb      	ldr	r3, [r7, #12]
 8025ca2:	7d1b      	ldrb	r3, [r3, #20]
 8025ca4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8025ca8:	b2da      	uxtb	r2, r3
 8025caa:	68fb      	ldr	r3, [r7, #12]
 8025cac:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8025cae:	693a      	ldr	r2, [r7, #16]
 8025cb0:	68fb      	ldr	r3, [r7, #12]
 8025cb2:	69db      	ldr	r3, [r3, #28]
 8025cb4:	4619      	mov	r1, r3
 8025cb6:	4610      	mov	r0, r2
 8025cb8:	f7fe f8e4 	bl	8023e84 <clust2sect>
 8025cbc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8025cbe:	697b      	ldr	r3, [r7, #20]
 8025cc0:	2b00      	cmp	r3, #0
 8025cc2:	d109      	bne.n	8025cd8 <f_write+0x1ce>
 8025cc4:	68fb      	ldr	r3, [r7, #12]
 8025cc6:	2202      	movs	r2, #2
 8025cc8:	755a      	strb	r2, [r3, #21]
 8025cca:	693b      	ldr	r3, [r7, #16]
 8025ccc:	2102      	movs	r1, #2
 8025cce:	4618      	mov	r0, r3
 8025cd0:	f7fd fe6e 	bl	80239b0 <unlock_fs>
 8025cd4:	2302      	movs	r3, #2
 8025cd6:	e0d7      	b.n	8025e88 <f_write+0x37e>
			sect += csect;
 8025cd8:	697a      	ldr	r2, [r7, #20]
 8025cda:	69bb      	ldr	r3, [r7, #24]
 8025cdc:	4413      	add	r3, r2
 8025cde:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8025ce0:	693b      	ldr	r3, [r7, #16]
 8025ce2:	899b      	ldrh	r3, [r3, #12]
 8025ce4:	461a      	mov	r2, r3
 8025ce6:	687b      	ldr	r3, [r7, #4]
 8025ce8:	fbb3 f3f2 	udiv	r3, r3, r2
 8025cec:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8025cee:	6a3b      	ldr	r3, [r7, #32]
 8025cf0:	2b00      	cmp	r3, #0
 8025cf2:	d048      	beq.n	8025d86 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8025cf4:	69ba      	ldr	r2, [r7, #24]
 8025cf6:	6a3b      	ldr	r3, [r7, #32]
 8025cf8:	4413      	add	r3, r2
 8025cfa:	693a      	ldr	r2, [r7, #16]
 8025cfc:	8952      	ldrh	r2, [r2, #10]
 8025cfe:	4293      	cmp	r3, r2
 8025d00:	d905      	bls.n	8025d0e <f_write+0x204>
					cc = fs->csize - csect;
 8025d02:	693b      	ldr	r3, [r7, #16]
 8025d04:	895b      	ldrh	r3, [r3, #10]
 8025d06:	461a      	mov	r2, r3
 8025d08:	69bb      	ldr	r3, [r7, #24]
 8025d0a:	1ad3      	subs	r3, r2, r3
 8025d0c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8025d0e:	693b      	ldr	r3, [r7, #16]
 8025d10:	7858      	ldrb	r0, [r3, #1]
 8025d12:	6a3b      	ldr	r3, [r7, #32]
 8025d14:	697a      	ldr	r2, [r7, #20]
 8025d16:	69f9      	ldr	r1, [r7, #28]
 8025d18:	f7fd fcf6 	bl	8023708 <disk_write>
 8025d1c:	4603      	mov	r3, r0
 8025d1e:	2b00      	cmp	r3, #0
 8025d20:	d009      	beq.n	8025d36 <f_write+0x22c>
 8025d22:	68fb      	ldr	r3, [r7, #12]
 8025d24:	2201      	movs	r2, #1
 8025d26:	755a      	strb	r2, [r3, #21]
 8025d28:	693b      	ldr	r3, [r7, #16]
 8025d2a:	2101      	movs	r1, #1
 8025d2c:	4618      	mov	r0, r3
 8025d2e:	f7fd fe3f 	bl	80239b0 <unlock_fs>
 8025d32:	2301      	movs	r3, #1
 8025d34:	e0a8      	b.n	8025e88 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8025d36:	68fb      	ldr	r3, [r7, #12]
 8025d38:	6a1a      	ldr	r2, [r3, #32]
 8025d3a:	697b      	ldr	r3, [r7, #20]
 8025d3c:	1ad3      	subs	r3, r2, r3
 8025d3e:	6a3a      	ldr	r2, [r7, #32]
 8025d40:	429a      	cmp	r2, r3
 8025d42:	d918      	bls.n	8025d76 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8025d44:	68fb      	ldr	r3, [r7, #12]
 8025d46:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8025d4a:	68fb      	ldr	r3, [r7, #12]
 8025d4c:	6a1a      	ldr	r2, [r3, #32]
 8025d4e:	697b      	ldr	r3, [r7, #20]
 8025d50:	1ad3      	subs	r3, r2, r3
 8025d52:	693a      	ldr	r2, [r7, #16]
 8025d54:	8992      	ldrh	r2, [r2, #12]
 8025d56:	fb02 f303 	mul.w	r3, r2, r3
 8025d5a:	69fa      	ldr	r2, [r7, #28]
 8025d5c:	18d1      	adds	r1, r2, r3
 8025d5e:	693b      	ldr	r3, [r7, #16]
 8025d60:	899b      	ldrh	r3, [r3, #12]
 8025d62:	461a      	mov	r2, r3
 8025d64:	f7fd fd90 	bl	8023888 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8025d68:	68fb      	ldr	r3, [r7, #12]
 8025d6a:	7d1b      	ldrb	r3, [r3, #20]
 8025d6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8025d70:	b2da      	uxtb	r2, r3
 8025d72:	68fb      	ldr	r3, [r7, #12]
 8025d74:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8025d76:	693b      	ldr	r3, [r7, #16]
 8025d78:	899b      	ldrh	r3, [r3, #12]
 8025d7a:	461a      	mov	r2, r3
 8025d7c:	6a3b      	ldr	r3, [r7, #32]
 8025d7e:	fb02 f303 	mul.w	r3, r2, r3
 8025d82:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8025d84:	e050      	b.n	8025e28 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8025d86:	68fb      	ldr	r3, [r7, #12]
 8025d88:	6a1b      	ldr	r3, [r3, #32]
 8025d8a:	697a      	ldr	r2, [r7, #20]
 8025d8c:	429a      	cmp	r2, r3
 8025d8e:	d01b      	beq.n	8025dc8 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8025d90:	68fb      	ldr	r3, [r7, #12]
 8025d92:	699a      	ldr	r2, [r3, #24]
 8025d94:	68fb      	ldr	r3, [r7, #12]
 8025d96:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8025d98:	429a      	cmp	r2, r3
 8025d9a:	d215      	bcs.n	8025dc8 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8025d9c:	693b      	ldr	r3, [r7, #16]
 8025d9e:	7858      	ldrb	r0, [r3, #1]
 8025da0:	68fb      	ldr	r3, [r7, #12]
 8025da2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8025da6:	2301      	movs	r3, #1
 8025da8:	697a      	ldr	r2, [r7, #20]
 8025daa:	f7fd fc8d 	bl	80236c8 <disk_read>
 8025dae:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8025db0:	2b00      	cmp	r3, #0
 8025db2:	d009      	beq.n	8025dc8 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8025db4:	68fb      	ldr	r3, [r7, #12]
 8025db6:	2201      	movs	r2, #1
 8025db8:	755a      	strb	r2, [r3, #21]
 8025dba:	693b      	ldr	r3, [r7, #16]
 8025dbc:	2101      	movs	r1, #1
 8025dbe:	4618      	mov	r0, r3
 8025dc0:	f7fd fdf6 	bl	80239b0 <unlock_fs>
 8025dc4:	2301      	movs	r3, #1
 8025dc6:	e05f      	b.n	8025e88 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8025dc8:	68fb      	ldr	r3, [r7, #12]
 8025dca:	697a      	ldr	r2, [r7, #20]
 8025dcc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8025dce:	693b      	ldr	r3, [r7, #16]
 8025dd0:	899b      	ldrh	r3, [r3, #12]
 8025dd2:	4618      	mov	r0, r3
 8025dd4:	68fb      	ldr	r3, [r7, #12]
 8025dd6:	699b      	ldr	r3, [r3, #24]
 8025dd8:	693a      	ldr	r2, [r7, #16]
 8025dda:	8992      	ldrh	r2, [r2, #12]
 8025ddc:	fbb3 f1f2 	udiv	r1, r3, r2
 8025de0:	fb01 f202 	mul.w	r2, r1, r2
 8025de4:	1a9b      	subs	r3, r3, r2
 8025de6:	1ac3      	subs	r3, r0, r3
 8025de8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8025dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025dec:	687b      	ldr	r3, [r7, #4]
 8025dee:	429a      	cmp	r2, r3
 8025df0:	d901      	bls.n	8025df6 <f_write+0x2ec>
 8025df2:	687b      	ldr	r3, [r7, #4]
 8025df4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8025df6:	68fb      	ldr	r3, [r7, #12]
 8025df8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8025dfc:	68fb      	ldr	r3, [r7, #12]
 8025dfe:	699b      	ldr	r3, [r3, #24]
 8025e00:	693a      	ldr	r2, [r7, #16]
 8025e02:	8992      	ldrh	r2, [r2, #12]
 8025e04:	fbb3 f0f2 	udiv	r0, r3, r2
 8025e08:	fb00 f202 	mul.w	r2, r0, r2
 8025e0c:	1a9b      	subs	r3, r3, r2
 8025e0e:	440b      	add	r3, r1
 8025e10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025e12:	69f9      	ldr	r1, [r7, #28]
 8025e14:	4618      	mov	r0, r3
 8025e16:	f7fd fd37 	bl	8023888 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8025e1a:	68fb      	ldr	r3, [r7, #12]
 8025e1c:	7d1b      	ldrb	r3, [r3, #20]
 8025e1e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8025e22:	b2da      	uxtb	r2, r3
 8025e24:	68fb      	ldr	r3, [r7, #12]
 8025e26:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8025e28:	69fa      	ldr	r2, [r7, #28]
 8025e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025e2c:	4413      	add	r3, r2
 8025e2e:	61fb      	str	r3, [r7, #28]
 8025e30:	68fb      	ldr	r3, [r7, #12]
 8025e32:	699a      	ldr	r2, [r3, #24]
 8025e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025e36:	441a      	add	r2, r3
 8025e38:	68fb      	ldr	r3, [r7, #12]
 8025e3a:	619a      	str	r2, [r3, #24]
 8025e3c:	68fb      	ldr	r3, [r7, #12]
 8025e3e:	68da      	ldr	r2, [r3, #12]
 8025e40:	68fb      	ldr	r3, [r7, #12]
 8025e42:	699b      	ldr	r3, [r3, #24]
 8025e44:	429a      	cmp	r2, r3
 8025e46:	bf38      	it	cc
 8025e48:	461a      	movcc	r2, r3
 8025e4a:	68fb      	ldr	r3, [r7, #12]
 8025e4c:	60da      	str	r2, [r3, #12]
 8025e4e:	683b      	ldr	r3, [r7, #0]
 8025e50:	681a      	ldr	r2, [r3, #0]
 8025e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025e54:	441a      	add	r2, r3
 8025e56:	683b      	ldr	r3, [r7, #0]
 8025e58:	601a      	str	r2, [r3, #0]
 8025e5a:	687a      	ldr	r2, [r7, #4]
 8025e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025e5e:	1ad3      	subs	r3, r2, r3
 8025e60:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8025e62:	687b      	ldr	r3, [r7, #4]
 8025e64:	2b00      	cmp	r3, #0
 8025e66:	f47f ae97 	bne.w	8025b98 <f_write+0x8e>
 8025e6a:	e000      	b.n	8025e6e <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8025e6c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8025e6e:	68fb      	ldr	r3, [r7, #12]
 8025e70:	7d1b      	ldrb	r3, [r3, #20]
 8025e72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025e76:	b2da      	uxtb	r2, r3
 8025e78:	68fb      	ldr	r3, [r7, #12]
 8025e7a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8025e7c:	693b      	ldr	r3, [r7, #16]
 8025e7e:	2100      	movs	r1, #0
 8025e80:	4618      	mov	r0, r3
 8025e82:	f7fd fd95 	bl	80239b0 <unlock_fs>
 8025e86:	2300      	movs	r3, #0
}
 8025e88:	4618      	mov	r0, r3
 8025e8a:	3730      	adds	r7, #48	@ 0x30
 8025e8c:	46bd      	mov	sp, r7
 8025e8e:	bd80      	pop	{r7, pc}

08025e90 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8025e90:	b580      	push	{r7, lr}
 8025e92:	b086      	sub	sp, #24
 8025e94:	af00      	add	r7, sp, #0
 8025e96:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8025e98:	687b      	ldr	r3, [r7, #4]
 8025e9a:	f107 0208 	add.w	r2, r7, #8
 8025e9e:	4611      	mov	r1, r2
 8025ea0:	4618      	mov	r0, r3
 8025ea2:	f7ff fa29 	bl	80252f8 <validate>
 8025ea6:	4603      	mov	r3, r0
 8025ea8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8025eaa:	7dfb      	ldrb	r3, [r7, #23]
 8025eac:	2b00      	cmp	r3, #0
 8025eae:	d16d      	bne.n	8025f8c <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8025eb0:	687b      	ldr	r3, [r7, #4]
 8025eb2:	7d1b      	ldrb	r3, [r3, #20]
 8025eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8025eb8:	2b00      	cmp	r3, #0
 8025eba:	d067      	beq.n	8025f8c <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8025ebc:	687b      	ldr	r3, [r7, #4]
 8025ebe:	7d1b      	ldrb	r3, [r3, #20]
 8025ec0:	b25b      	sxtb	r3, r3
 8025ec2:	2b00      	cmp	r3, #0
 8025ec4:	da1a      	bge.n	8025efc <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8025ec6:	68bb      	ldr	r3, [r7, #8]
 8025ec8:	7858      	ldrb	r0, [r3, #1]
 8025eca:	687b      	ldr	r3, [r7, #4]
 8025ecc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8025ed0:	687b      	ldr	r3, [r7, #4]
 8025ed2:	6a1a      	ldr	r2, [r3, #32]
 8025ed4:	2301      	movs	r3, #1
 8025ed6:	f7fd fc17 	bl	8023708 <disk_write>
 8025eda:	4603      	mov	r3, r0
 8025edc:	2b00      	cmp	r3, #0
 8025ede:	d006      	beq.n	8025eee <f_sync+0x5e>
 8025ee0:	68bb      	ldr	r3, [r7, #8]
 8025ee2:	2101      	movs	r1, #1
 8025ee4:	4618      	mov	r0, r3
 8025ee6:	f7fd fd63 	bl	80239b0 <unlock_fs>
 8025eea:	2301      	movs	r3, #1
 8025eec:	e055      	b.n	8025f9a <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8025eee:	687b      	ldr	r3, [r7, #4]
 8025ef0:	7d1b      	ldrb	r3, [r3, #20]
 8025ef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8025ef6:	b2da      	uxtb	r2, r3
 8025ef8:	687b      	ldr	r3, [r7, #4]
 8025efa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8025efc:	f7f9 ff0a 	bl	801fd14 <get_fattime>
 8025f00:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8025f02:	68ba      	ldr	r2, [r7, #8]
 8025f04:	687b      	ldr	r3, [r7, #4]
 8025f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8025f08:	4619      	mov	r1, r3
 8025f0a:	4610      	mov	r0, r2
 8025f0c:	f7fd ff1c 	bl	8023d48 <move_window>
 8025f10:	4603      	mov	r3, r0
 8025f12:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8025f14:	7dfb      	ldrb	r3, [r7, #23]
 8025f16:	2b00      	cmp	r3, #0
 8025f18:	d138      	bne.n	8025f8c <f_sync+0xfc>
					dir = fp->dir_ptr;
 8025f1a:	687b      	ldr	r3, [r7, #4]
 8025f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8025f1e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8025f20:	68fb      	ldr	r3, [r7, #12]
 8025f22:	330b      	adds	r3, #11
 8025f24:	781a      	ldrb	r2, [r3, #0]
 8025f26:	68fb      	ldr	r3, [r7, #12]
 8025f28:	330b      	adds	r3, #11
 8025f2a:	f042 0220 	orr.w	r2, r2, #32
 8025f2e:	b2d2      	uxtb	r2, r2
 8025f30:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8025f32:	687b      	ldr	r3, [r7, #4]
 8025f34:	6818      	ldr	r0, [r3, #0]
 8025f36:	687b      	ldr	r3, [r7, #4]
 8025f38:	689b      	ldr	r3, [r3, #8]
 8025f3a:	461a      	mov	r2, r3
 8025f3c:	68f9      	ldr	r1, [r7, #12]
 8025f3e:	f7fe fca7 	bl	8024890 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8025f42:	68fb      	ldr	r3, [r7, #12]
 8025f44:	f103 021c 	add.w	r2, r3, #28
 8025f48:	687b      	ldr	r3, [r7, #4]
 8025f4a:	68db      	ldr	r3, [r3, #12]
 8025f4c:	4619      	mov	r1, r3
 8025f4e:	4610      	mov	r0, r2
 8025f50:	f7fd fc6e 	bl	8023830 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8025f54:	68fb      	ldr	r3, [r7, #12]
 8025f56:	3316      	adds	r3, #22
 8025f58:	6939      	ldr	r1, [r7, #16]
 8025f5a:	4618      	mov	r0, r3
 8025f5c:	f7fd fc68 	bl	8023830 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8025f60:	68fb      	ldr	r3, [r7, #12]
 8025f62:	3312      	adds	r3, #18
 8025f64:	2100      	movs	r1, #0
 8025f66:	4618      	mov	r0, r3
 8025f68:	f7fd fc47 	bl	80237fa <st_word>
					fs->wflag = 1;
 8025f6c:	68bb      	ldr	r3, [r7, #8]
 8025f6e:	2201      	movs	r2, #1
 8025f70:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8025f72:	68bb      	ldr	r3, [r7, #8]
 8025f74:	4618      	mov	r0, r3
 8025f76:	f7fd ff15 	bl	8023da4 <sync_fs>
 8025f7a:	4603      	mov	r3, r0
 8025f7c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8025f7e:	687b      	ldr	r3, [r7, #4]
 8025f80:	7d1b      	ldrb	r3, [r3, #20]
 8025f82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8025f86:	b2da      	uxtb	r2, r3
 8025f88:	687b      	ldr	r3, [r7, #4]
 8025f8a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8025f8c:	68bb      	ldr	r3, [r7, #8]
 8025f8e:	7dfa      	ldrb	r2, [r7, #23]
 8025f90:	4611      	mov	r1, r2
 8025f92:	4618      	mov	r0, r3
 8025f94:	f7fd fd0c 	bl	80239b0 <unlock_fs>
 8025f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8025f9a:	4618      	mov	r0, r3
 8025f9c:	3718      	adds	r7, #24
 8025f9e:	46bd      	mov	sp, r7
 8025fa0:	bd80      	pop	{r7, pc}

08025fa2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8025fa2:	b580      	push	{r7, lr}
 8025fa4:	b084      	sub	sp, #16
 8025fa6:	af00      	add	r7, sp, #0
 8025fa8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8025faa:	6878      	ldr	r0, [r7, #4]
 8025fac:	f7ff ff70 	bl	8025e90 <f_sync>
 8025fb0:	4603      	mov	r3, r0
 8025fb2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8025fb4:	7bfb      	ldrb	r3, [r7, #15]
 8025fb6:	2b00      	cmp	r3, #0
 8025fb8:	d11d      	bne.n	8025ff6 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8025fba:	687b      	ldr	r3, [r7, #4]
 8025fbc:	f107 0208 	add.w	r2, r7, #8
 8025fc0:	4611      	mov	r1, r2
 8025fc2:	4618      	mov	r0, r3
 8025fc4:	f7ff f998 	bl	80252f8 <validate>
 8025fc8:	4603      	mov	r3, r0
 8025fca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8025fcc:	7bfb      	ldrb	r3, [r7, #15]
 8025fce:	2b00      	cmp	r3, #0
 8025fd0:	d111      	bne.n	8025ff6 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8025fd2:	687b      	ldr	r3, [r7, #4]
 8025fd4:	691b      	ldr	r3, [r3, #16]
 8025fd6:	4618      	mov	r0, r3
 8025fd8:	f7fd fe12 	bl	8023c00 <dec_lock>
 8025fdc:	4603      	mov	r3, r0
 8025fde:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8025fe0:	7bfb      	ldrb	r3, [r7, #15]
 8025fe2:	2b00      	cmp	r3, #0
 8025fe4:	d102      	bne.n	8025fec <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8025fe6:	687b      	ldr	r3, [r7, #4]
 8025fe8:	2200      	movs	r2, #0
 8025fea:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8025fec:	68bb      	ldr	r3, [r7, #8]
 8025fee:	2100      	movs	r1, #0
 8025ff0:	4618      	mov	r0, r3
 8025ff2:	f7fd fcdd 	bl	80239b0 <unlock_fs>
#endif
		}
	}
	return res;
 8025ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8025ff8:	4618      	mov	r0, r3
 8025ffa:	3710      	adds	r7, #16
 8025ffc:	46bd      	mov	sp, r7
 8025ffe:	bd80      	pop	{r7, pc}

08026000 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8026000:	b580      	push	{r7, lr}
 8026002:	b090      	sub	sp, #64	@ 0x40
 8026004:	af00      	add	r7, sp, #0
 8026006:	6078      	str	r0, [r7, #4]
 8026008:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 802600a:	f107 010c 	add.w	r1, r7, #12
 802600e:	1d3b      	adds	r3, r7, #4
 8026010:	2200      	movs	r2, #0
 8026012:	4618      	mov	r0, r3
 8026014:	f7fe fee8 	bl	8024de8 <find_volume>
 8026018:	4603      	mov	r3, r0
 802601a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 802601e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8026022:	2b00      	cmp	r3, #0
 8026024:	d11f      	bne.n	8026066 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8026026:	687a      	ldr	r2, [r7, #4]
 8026028:	f107 030c 	add.w	r3, r7, #12
 802602c:	4611      	mov	r1, r2
 802602e:	4618      	mov	r0, r3
 8026030:	f7fe fdca 	bl	8024bc8 <follow_path>
 8026034:	4603      	mov	r3, r0
 8026036:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 802603a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802603e:	2b00      	cmp	r3, #0
 8026040:	d111      	bne.n	8026066 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8026042:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8026046:	b25b      	sxtb	r3, r3
 8026048:	2b00      	cmp	r3, #0
 802604a:	da03      	bge.n	8026054 <f_stat+0x54>
				res = FR_INVALID_NAME;
 802604c:	2306      	movs	r3, #6
 802604e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8026052:	e008      	b.n	8026066 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8026054:	683b      	ldr	r3, [r7, #0]
 8026056:	2b00      	cmp	r3, #0
 8026058:	d005      	beq.n	8026066 <f_stat+0x66>
 802605a:	f107 030c 	add.w	r3, r7, #12
 802605e:	6839      	ldr	r1, [r7, #0]
 8026060:	4618      	mov	r0, r3
 8026062:	f7fe fcbc 	bl	80249de <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8026066:	68fb      	ldr	r3, [r7, #12]
 8026068:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 802606c:	4611      	mov	r1, r2
 802606e:	4618      	mov	r0, r3
 8026070:	f7fd fc9e 	bl	80239b0 <unlock_fs>
 8026074:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8026078:	4618      	mov	r0, r3
 802607a:	3740      	adds	r7, #64	@ 0x40
 802607c:	46bd      	mov	sp, r7
 802607e:	bd80      	pop	{r7, pc}

08026080 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8026080:	b480      	push	{r7}
 8026082:	b087      	sub	sp, #28
 8026084:	af00      	add	r7, sp, #0
 8026086:	60f8      	str	r0, [r7, #12]
 8026088:	60b9      	str	r1, [r7, #8]
 802608a:	4613      	mov	r3, r2
 802608c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 802608e:	2301      	movs	r3, #1
 8026090:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8026092:	2300      	movs	r3, #0
 8026094:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8026096:	4b1f      	ldr	r3, [pc, #124]	@ (8026114 <FATFS_LinkDriverEx+0x94>)
 8026098:	7a5b      	ldrb	r3, [r3, #9]
 802609a:	b2db      	uxtb	r3, r3
 802609c:	2b00      	cmp	r3, #0
 802609e:	d131      	bne.n	8026104 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80260a0:	4b1c      	ldr	r3, [pc, #112]	@ (8026114 <FATFS_LinkDriverEx+0x94>)
 80260a2:	7a5b      	ldrb	r3, [r3, #9]
 80260a4:	b2db      	uxtb	r3, r3
 80260a6:	461a      	mov	r2, r3
 80260a8:	4b1a      	ldr	r3, [pc, #104]	@ (8026114 <FATFS_LinkDriverEx+0x94>)
 80260aa:	2100      	movs	r1, #0
 80260ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80260ae:	4b19      	ldr	r3, [pc, #100]	@ (8026114 <FATFS_LinkDriverEx+0x94>)
 80260b0:	7a5b      	ldrb	r3, [r3, #9]
 80260b2:	b2db      	uxtb	r3, r3
 80260b4:	4a17      	ldr	r2, [pc, #92]	@ (8026114 <FATFS_LinkDriverEx+0x94>)
 80260b6:	009b      	lsls	r3, r3, #2
 80260b8:	4413      	add	r3, r2
 80260ba:	68fa      	ldr	r2, [r7, #12]
 80260bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80260be:	4b15      	ldr	r3, [pc, #84]	@ (8026114 <FATFS_LinkDriverEx+0x94>)
 80260c0:	7a5b      	ldrb	r3, [r3, #9]
 80260c2:	b2db      	uxtb	r3, r3
 80260c4:	461a      	mov	r2, r3
 80260c6:	4b13      	ldr	r3, [pc, #76]	@ (8026114 <FATFS_LinkDriverEx+0x94>)
 80260c8:	4413      	add	r3, r2
 80260ca:	79fa      	ldrb	r2, [r7, #7]
 80260cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80260ce:	4b11      	ldr	r3, [pc, #68]	@ (8026114 <FATFS_LinkDriverEx+0x94>)
 80260d0:	7a5b      	ldrb	r3, [r3, #9]
 80260d2:	b2db      	uxtb	r3, r3
 80260d4:	1c5a      	adds	r2, r3, #1
 80260d6:	b2d1      	uxtb	r1, r2
 80260d8:	4a0e      	ldr	r2, [pc, #56]	@ (8026114 <FATFS_LinkDriverEx+0x94>)
 80260da:	7251      	strb	r1, [r2, #9]
 80260dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80260de:	7dbb      	ldrb	r3, [r7, #22]
 80260e0:	3330      	adds	r3, #48	@ 0x30
 80260e2:	b2da      	uxtb	r2, r3
 80260e4:	68bb      	ldr	r3, [r7, #8]
 80260e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80260e8:	68bb      	ldr	r3, [r7, #8]
 80260ea:	3301      	adds	r3, #1
 80260ec:	223a      	movs	r2, #58	@ 0x3a
 80260ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80260f0:	68bb      	ldr	r3, [r7, #8]
 80260f2:	3302      	adds	r3, #2
 80260f4:	222f      	movs	r2, #47	@ 0x2f
 80260f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80260f8:	68bb      	ldr	r3, [r7, #8]
 80260fa:	3303      	adds	r3, #3
 80260fc:	2200      	movs	r2, #0
 80260fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8026100:	2300      	movs	r3, #0
 8026102:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8026104:	7dfb      	ldrb	r3, [r7, #23]
}
 8026106:	4618      	mov	r0, r3
 8026108:	371c      	adds	r7, #28
 802610a:	46bd      	mov	sp, r7
 802610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026110:	4770      	bx	lr
 8026112:	bf00      	nop
 8026114:	2001d0f8 	.word	0x2001d0f8

08026118 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8026118:	b580      	push	{r7, lr}
 802611a:	b082      	sub	sp, #8
 802611c:	af00      	add	r7, sp, #0
 802611e:	6078      	str	r0, [r7, #4]
 8026120:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8026122:	2200      	movs	r2, #0
 8026124:	6839      	ldr	r1, [r7, #0]
 8026126:	6878      	ldr	r0, [r7, #4]
 8026128:	f7ff ffaa 	bl	8026080 <FATFS_LinkDriverEx>
 802612c:	4603      	mov	r3, r0
}
 802612e:	4618      	mov	r0, r3
 8026130:	3708      	adds	r7, #8
 8026132:	46bd      	mov	sp, r7
 8026134:	bd80      	pop	{r7, pc}

08026136 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8026136:	b580      	push	{r7, lr}
 8026138:	b084      	sub	sp, #16
 802613a:	af00      	add	r7, sp, #0
 802613c:	4603      	mov	r3, r0
 802613e:	6039      	str	r1, [r7, #0]
 8026140:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8026142:	2200      	movs	r2, #0
 8026144:	2101      	movs	r1, #1
 8026146:	2001      	movs	r0, #1
 8026148:	f000 f982 	bl	8026450 <osSemaphoreNew>
 802614c:	4602      	mov	r2, r0
 802614e:	683b      	ldr	r3, [r7, #0]
 8026150:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8026152:	683b      	ldr	r3, [r7, #0]
 8026154:	681b      	ldr	r3, [r3, #0]
 8026156:	2b00      	cmp	r3, #0
 8026158:	bf14      	ite	ne
 802615a:	2301      	movne	r3, #1
 802615c:	2300      	moveq	r3, #0
 802615e:	b2db      	uxtb	r3, r3
 8026160:	60fb      	str	r3, [r7, #12]

    return ret;
 8026162:	68fb      	ldr	r3, [r7, #12]
}
 8026164:	4618      	mov	r0, r3
 8026166:	3710      	adds	r7, #16
 8026168:	46bd      	mov	sp, r7
 802616a:	bd80      	pop	{r7, pc}

0802616c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 802616c:	b580      	push	{r7, lr}
 802616e:	b082      	sub	sp, #8
 8026170:	af00      	add	r7, sp, #0
 8026172:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8026174:	6878      	ldr	r0, [r7, #4]
 8026176:	f000 fac5 	bl	8026704 <osSemaphoreDelete>
#endif
    return 1;
 802617a:	2301      	movs	r3, #1
}
 802617c:	4618      	mov	r0, r3
 802617e:	3708      	adds	r7, #8
 8026180:	46bd      	mov	sp, r7
 8026182:	bd80      	pop	{r7, pc}

08026184 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8026184:	b580      	push	{r7, lr}
 8026186:	b084      	sub	sp, #16
 8026188:	af00      	add	r7, sp, #0
 802618a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 802618c:	2300      	movs	r3, #0
 802618e:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8026190:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8026194:	6878      	ldr	r0, [r7, #4]
 8026196:	f000 f9f7 	bl	8026588 <osSemaphoreAcquire>
 802619a:	4603      	mov	r3, r0
 802619c:	2b00      	cmp	r3, #0
 802619e:	d101      	bne.n	80261a4 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80261a0:	2301      	movs	r3, #1
 80261a2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80261a4:	68fb      	ldr	r3, [r7, #12]
}
 80261a6:	4618      	mov	r0, r3
 80261a8:	3710      	adds	r7, #16
 80261aa:	46bd      	mov	sp, r7
 80261ac:	bd80      	pop	{r7, pc}

080261ae <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80261ae:	b580      	push	{r7, lr}
 80261b0:	b082      	sub	sp, #8
 80261b2:	af00      	add	r7, sp, #0
 80261b4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80261b6:	6878      	ldr	r0, [r7, #4]
 80261b8:	f000 fa4c 	bl	8026654 <osSemaphoreRelease>
#endif
}
 80261bc:	bf00      	nop
 80261be:	3708      	adds	r7, #8
 80261c0:	46bd      	mov	sp, r7
 80261c2:	bd80      	pop	{r7, pc}

080261c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80261c4:	b480      	push	{r7}
 80261c6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80261c8:	bf00      	nop
 80261ca:	46bd      	mov	sp, r7
 80261cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80261d0:	4770      	bx	lr
	...

080261d4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80261d4:	b480      	push	{r7}
 80261d6:	b085      	sub	sp, #20
 80261d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80261da:	f3ef 8305 	mrs	r3, IPSR
 80261de:	60bb      	str	r3, [r7, #8]
  return(result);
 80261e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80261e2:	2b00      	cmp	r3, #0
 80261e4:	d10f      	bne.n	8026206 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80261e6:	f3ef 8310 	mrs	r3, PRIMASK
 80261ea:	607b      	str	r3, [r7, #4]
  return(result);
 80261ec:	687b      	ldr	r3, [r7, #4]
 80261ee:	2b00      	cmp	r3, #0
 80261f0:	d105      	bne.n	80261fe <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80261f2:	f3ef 8311 	mrs	r3, BASEPRI
 80261f6:	603b      	str	r3, [r7, #0]
  return(result);
 80261f8:	683b      	ldr	r3, [r7, #0]
 80261fa:	2b00      	cmp	r3, #0
 80261fc:	d007      	beq.n	802620e <osKernelInitialize+0x3a>
 80261fe:	4b0e      	ldr	r3, [pc, #56]	@ (8026238 <osKernelInitialize+0x64>)
 8026200:	681b      	ldr	r3, [r3, #0]
 8026202:	2b02      	cmp	r3, #2
 8026204:	d103      	bne.n	802620e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8026206:	f06f 0305 	mvn.w	r3, #5
 802620a:	60fb      	str	r3, [r7, #12]
 802620c:	e00c      	b.n	8026228 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 802620e:	4b0a      	ldr	r3, [pc, #40]	@ (8026238 <osKernelInitialize+0x64>)
 8026210:	681b      	ldr	r3, [r3, #0]
 8026212:	2b00      	cmp	r3, #0
 8026214:	d105      	bne.n	8026222 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8026216:	4b08      	ldr	r3, [pc, #32]	@ (8026238 <osKernelInitialize+0x64>)
 8026218:	2201      	movs	r2, #1
 802621a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 802621c:	2300      	movs	r3, #0
 802621e:	60fb      	str	r3, [r7, #12]
 8026220:	e002      	b.n	8026228 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8026222:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8026226:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8026228:	68fb      	ldr	r3, [r7, #12]
}
 802622a:	4618      	mov	r0, r3
 802622c:	3714      	adds	r7, #20
 802622e:	46bd      	mov	sp, r7
 8026230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026234:	4770      	bx	lr
 8026236:	bf00      	nop
 8026238:	2001d104 	.word	0x2001d104

0802623c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 802623c:	b580      	push	{r7, lr}
 802623e:	b084      	sub	sp, #16
 8026240:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026242:	f3ef 8305 	mrs	r3, IPSR
 8026246:	60bb      	str	r3, [r7, #8]
  return(result);
 8026248:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 802624a:	2b00      	cmp	r3, #0
 802624c:	d10f      	bne.n	802626e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802624e:	f3ef 8310 	mrs	r3, PRIMASK
 8026252:	607b      	str	r3, [r7, #4]
  return(result);
 8026254:	687b      	ldr	r3, [r7, #4]
 8026256:	2b00      	cmp	r3, #0
 8026258:	d105      	bne.n	8026266 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 802625a:	f3ef 8311 	mrs	r3, BASEPRI
 802625e:	603b      	str	r3, [r7, #0]
  return(result);
 8026260:	683b      	ldr	r3, [r7, #0]
 8026262:	2b00      	cmp	r3, #0
 8026264:	d007      	beq.n	8026276 <osKernelStart+0x3a>
 8026266:	4b0f      	ldr	r3, [pc, #60]	@ (80262a4 <osKernelStart+0x68>)
 8026268:	681b      	ldr	r3, [r3, #0]
 802626a:	2b02      	cmp	r3, #2
 802626c:	d103      	bne.n	8026276 <osKernelStart+0x3a>
    stat = osErrorISR;
 802626e:	f06f 0305 	mvn.w	r3, #5
 8026272:	60fb      	str	r3, [r7, #12]
 8026274:	e010      	b.n	8026298 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8026276:	4b0b      	ldr	r3, [pc, #44]	@ (80262a4 <osKernelStart+0x68>)
 8026278:	681b      	ldr	r3, [r3, #0]
 802627a:	2b01      	cmp	r3, #1
 802627c:	d109      	bne.n	8026292 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 802627e:	f7ff ffa1 	bl	80261c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8026282:	4b08      	ldr	r3, [pc, #32]	@ (80262a4 <osKernelStart+0x68>)
 8026284:	2202      	movs	r2, #2
 8026286:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8026288:	f001 ff38 	bl	80280fc <vTaskStartScheduler>
      stat = osOK;
 802628c:	2300      	movs	r3, #0
 802628e:	60fb      	str	r3, [r7, #12]
 8026290:	e002      	b.n	8026298 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8026292:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8026296:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8026298:	68fb      	ldr	r3, [r7, #12]
}
 802629a:	4618      	mov	r0, r3
 802629c:	3710      	adds	r7, #16
 802629e:	46bd      	mov	sp, r7
 80262a0:	bd80      	pop	{r7, pc}
 80262a2:	bf00      	nop
 80262a4:	2001d104 	.word	0x2001d104

080262a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80262a8:	b580      	push	{r7, lr}
 80262aa:	b090      	sub	sp, #64	@ 0x40
 80262ac:	af04      	add	r7, sp, #16
 80262ae:	60f8      	str	r0, [r7, #12]
 80262b0:	60b9      	str	r1, [r7, #8]
 80262b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80262b4:	2300      	movs	r3, #0
 80262b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80262b8:	f3ef 8305 	mrs	r3, IPSR
 80262bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80262be:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80262c0:	2b00      	cmp	r3, #0
 80262c2:	f040 808f 	bne.w	80263e4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80262c6:	f3ef 8310 	mrs	r3, PRIMASK
 80262ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80262cc:	69bb      	ldr	r3, [r7, #24]
 80262ce:	2b00      	cmp	r3, #0
 80262d0:	d105      	bne.n	80262de <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80262d2:	f3ef 8311 	mrs	r3, BASEPRI
 80262d6:	617b      	str	r3, [r7, #20]
  return(result);
 80262d8:	697b      	ldr	r3, [r7, #20]
 80262da:	2b00      	cmp	r3, #0
 80262dc:	d003      	beq.n	80262e6 <osThreadNew+0x3e>
 80262de:	4b44      	ldr	r3, [pc, #272]	@ (80263f0 <osThreadNew+0x148>)
 80262e0:	681b      	ldr	r3, [r3, #0]
 80262e2:	2b02      	cmp	r3, #2
 80262e4:	d07e      	beq.n	80263e4 <osThreadNew+0x13c>
 80262e6:	68fb      	ldr	r3, [r7, #12]
 80262e8:	2b00      	cmp	r3, #0
 80262ea:	d07b      	beq.n	80263e4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80262ec:	2380      	movs	r3, #128	@ 0x80
 80262ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80262f0:	2318      	movs	r3, #24
 80262f2:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80262f4:	2300      	movs	r3, #0
 80262f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80262f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80262fc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80262fe:	687b      	ldr	r3, [r7, #4]
 8026300:	2b00      	cmp	r3, #0
 8026302:	d045      	beq.n	8026390 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8026304:	687b      	ldr	r3, [r7, #4]
 8026306:	681b      	ldr	r3, [r3, #0]
 8026308:	2b00      	cmp	r3, #0
 802630a:	d002      	beq.n	8026312 <osThreadNew+0x6a>
        name = attr->name;
 802630c:	687b      	ldr	r3, [r7, #4]
 802630e:	681b      	ldr	r3, [r3, #0]
 8026310:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8026312:	687b      	ldr	r3, [r7, #4]
 8026314:	699b      	ldr	r3, [r3, #24]
 8026316:	2b00      	cmp	r3, #0
 8026318:	d002      	beq.n	8026320 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 802631a:	687b      	ldr	r3, [r7, #4]
 802631c:	699b      	ldr	r3, [r3, #24]
 802631e:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8026320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026322:	2b00      	cmp	r3, #0
 8026324:	d008      	beq.n	8026338 <osThreadNew+0x90>
 8026326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026328:	2b38      	cmp	r3, #56	@ 0x38
 802632a:	d805      	bhi.n	8026338 <osThreadNew+0x90>
 802632c:	687b      	ldr	r3, [r7, #4]
 802632e:	685b      	ldr	r3, [r3, #4]
 8026330:	f003 0301 	and.w	r3, r3, #1
 8026334:	2b00      	cmp	r3, #0
 8026336:	d001      	beq.n	802633c <osThreadNew+0x94>
        return (NULL);
 8026338:	2300      	movs	r3, #0
 802633a:	e054      	b.n	80263e6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 802633c:	687b      	ldr	r3, [r7, #4]
 802633e:	695b      	ldr	r3, [r3, #20]
 8026340:	2b00      	cmp	r3, #0
 8026342:	d003      	beq.n	802634c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8026344:	687b      	ldr	r3, [r7, #4]
 8026346:	695b      	ldr	r3, [r3, #20]
 8026348:	089b      	lsrs	r3, r3, #2
 802634a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 802634c:	687b      	ldr	r3, [r7, #4]
 802634e:	689b      	ldr	r3, [r3, #8]
 8026350:	2b00      	cmp	r3, #0
 8026352:	d00e      	beq.n	8026372 <osThreadNew+0xca>
 8026354:	687b      	ldr	r3, [r7, #4]
 8026356:	68db      	ldr	r3, [r3, #12]
 8026358:	2ba7      	cmp	r3, #167	@ 0xa7
 802635a:	d90a      	bls.n	8026372 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 802635c:	687b      	ldr	r3, [r7, #4]
 802635e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8026360:	2b00      	cmp	r3, #0
 8026362:	d006      	beq.n	8026372 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8026364:	687b      	ldr	r3, [r7, #4]
 8026366:	695b      	ldr	r3, [r3, #20]
 8026368:	2b00      	cmp	r3, #0
 802636a:	d002      	beq.n	8026372 <osThreadNew+0xca>
        mem = 1;
 802636c:	2301      	movs	r3, #1
 802636e:	623b      	str	r3, [r7, #32]
 8026370:	e010      	b.n	8026394 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8026372:	687b      	ldr	r3, [r7, #4]
 8026374:	689b      	ldr	r3, [r3, #8]
 8026376:	2b00      	cmp	r3, #0
 8026378:	d10c      	bne.n	8026394 <osThreadNew+0xec>
 802637a:	687b      	ldr	r3, [r7, #4]
 802637c:	68db      	ldr	r3, [r3, #12]
 802637e:	2b00      	cmp	r3, #0
 8026380:	d108      	bne.n	8026394 <osThreadNew+0xec>
 8026382:	687b      	ldr	r3, [r7, #4]
 8026384:	691b      	ldr	r3, [r3, #16]
 8026386:	2b00      	cmp	r3, #0
 8026388:	d104      	bne.n	8026394 <osThreadNew+0xec>
          mem = 0;
 802638a:	2300      	movs	r3, #0
 802638c:	623b      	str	r3, [r7, #32]
 802638e:	e001      	b.n	8026394 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8026390:	2300      	movs	r3, #0
 8026392:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8026394:	6a3b      	ldr	r3, [r7, #32]
 8026396:	2b01      	cmp	r3, #1
 8026398:	d110      	bne.n	80263bc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 802639a:	687b      	ldr	r3, [r7, #4]
 802639c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 802639e:	687a      	ldr	r2, [r7, #4]
 80263a0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80263a2:	9202      	str	r2, [sp, #8]
 80263a4:	9301      	str	r3, [sp, #4]
 80263a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80263a8:	9300      	str	r3, [sp, #0]
 80263aa:	68bb      	ldr	r3, [r7, #8]
 80263ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80263ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80263b0:	68f8      	ldr	r0, [r7, #12]
 80263b2:	f001 fca5 	bl	8027d00 <xTaskCreateStatic>
 80263b6:	4603      	mov	r3, r0
 80263b8:	613b      	str	r3, [r7, #16]
 80263ba:	e013      	b.n	80263e4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80263bc:	6a3b      	ldr	r3, [r7, #32]
 80263be:	2b00      	cmp	r3, #0
 80263c0:	d110      	bne.n	80263e4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80263c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80263c4:	b29a      	uxth	r2, r3
 80263c6:	f107 0310 	add.w	r3, r7, #16
 80263ca:	9301      	str	r3, [sp, #4]
 80263cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80263ce:	9300      	str	r3, [sp, #0]
 80263d0:	68bb      	ldr	r3, [r7, #8]
 80263d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80263d4:	68f8      	ldr	r0, [r7, #12]
 80263d6:	f001 fcf9 	bl	8027dcc <xTaskCreate>
 80263da:	4603      	mov	r3, r0
 80263dc:	2b01      	cmp	r3, #1
 80263de:	d001      	beq.n	80263e4 <osThreadNew+0x13c>
          hTask = NULL;
 80263e0:	2300      	movs	r3, #0
 80263e2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80263e4:	693b      	ldr	r3, [r7, #16]
}
 80263e6:	4618      	mov	r0, r3
 80263e8:	3730      	adds	r7, #48	@ 0x30
 80263ea:	46bd      	mov	sp, r7
 80263ec:	bd80      	pop	{r7, pc}
 80263ee:	bf00      	nop
 80263f0:	2001d104 	.word	0x2001d104

080263f4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80263f4:	b580      	push	{r7, lr}
 80263f6:	b086      	sub	sp, #24
 80263f8:	af00      	add	r7, sp, #0
 80263fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80263fc:	f3ef 8305 	mrs	r3, IPSR
 8026400:	613b      	str	r3, [r7, #16]
  return(result);
 8026402:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8026404:	2b00      	cmp	r3, #0
 8026406:	d10f      	bne.n	8026428 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026408:	f3ef 8310 	mrs	r3, PRIMASK
 802640c:	60fb      	str	r3, [r7, #12]
  return(result);
 802640e:	68fb      	ldr	r3, [r7, #12]
 8026410:	2b00      	cmp	r3, #0
 8026412:	d105      	bne.n	8026420 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8026414:	f3ef 8311 	mrs	r3, BASEPRI
 8026418:	60bb      	str	r3, [r7, #8]
  return(result);
 802641a:	68bb      	ldr	r3, [r7, #8]
 802641c:	2b00      	cmp	r3, #0
 802641e:	d007      	beq.n	8026430 <osDelay+0x3c>
 8026420:	4b0a      	ldr	r3, [pc, #40]	@ (802644c <osDelay+0x58>)
 8026422:	681b      	ldr	r3, [r3, #0]
 8026424:	2b02      	cmp	r3, #2
 8026426:	d103      	bne.n	8026430 <osDelay+0x3c>
    stat = osErrorISR;
 8026428:	f06f 0305 	mvn.w	r3, #5
 802642c:	617b      	str	r3, [r7, #20]
 802642e:	e007      	b.n	8026440 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8026430:	2300      	movs	r3, #0
 8026432:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8026434:	687b      	ldr	r3, [r7, #4]
 8026436:	2b00      	cmp	r3, #0
 8026438:	d002      	beq.n	8026440 <osDelay+0x4c>
      vTaskDelay(ticks);
 802643a:	6878      	ldr	r0, [r7, #4]
 802643c:	f001 fe26 	bl	802808c <vTaskDelay>
    }
  }

  return (stat);
 8026440:	697b      	ldr	r3, [r7, #20]
}
 8026442:	4618      	mov	r0, r3
 8026444:	3718      	adds	r7, #24
 8026446:	46bd      	mov	sp, r7
 8026448:	bd80      	pop	{r7, pc}
 802644a:	bf00      	nop
 802644c:	2001d104 	.word	0x2001d104

08026450 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8026450:	b580      	push	{r7, lr}
 8026452:	b08c      	sub	sp, #48	@ 0x30
 8026454:	af02      	add	r7, sp, #8
 8026456:	60f8      	str	r0, [r7, #12]
 8026458:	60b9      	str	r1, [r7, #8]
 802645a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 802645c:	2300      	movs	r3, #0
 802645e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026460:	f3ef 8305 	mrs	r3, IPSR
 8026464:	61bb      	str	r3, [r7, #24]
  return(result);
 8026466:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8026468:	2b00      	cmp	r3, #0
 802646a:	f040 8086 	bne.w	802657a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802646e:	f3ef 8310 	mrs	r3, PRIMASK
 8026472:	617b      	str	r3, [r7, #20]
  return(result);
 8026474:	697b      	ldr	r3, [r7, #20]
 8026476:	2b00      	cmp	r3, #0
 8026478:	d105      	bne.n	8026486 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 802647a:	f3ef 8311 	mrs	r3, BASEPRI
 802647e:	613b      	str	r3, [r7, #16]
  return(result);
 8026480:	693b      	ldr	r3, [r7, #16]
 8026482:	2b00      	cmp	r3, #0
 8026484:	d003      	beq.n	802648e <osSemaphoreNew+0x3e>
 8026486:	4b3f      	ldr	r3, [pc, #252]	@ (8026584 <osSemaphoreNew+0x134>)
 8026488:	681b      	ldr	r3, [r3, #0]
 802648a:	2b02      	cmp	r3, #2
 802648c:	d075      	beq.n	802657a <osSemaphoreNew+0x12a>
 802648e:	68fb      	ldr	r3, [r7, #12]
 8026490:	2b00      	cmp	r3, #0
 8026492:	d072      	beq.n	802657a <osSemaphoreNew+0x12a>
 8026494:	68ba      	ldr	r2, [r7, #8]
 8026496:	68fb      	ldr	r3, [r7, #12]
 8026498:	429a      	cmp	r2, r3
 802649a:	d86e      	bhi.n	802657a <osSemaphoreNew+0x12a>
    mem = -1;
 802649c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80264a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80264a2:	687b      	ldr	r3, [r7, #4]
 80264a4:	2b00      	cmp	r3, #0
 80264a6:	d015      	beq.n	80264d4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80264a8:	687b      	ldr	r3, [r7, #4]
 80264aa:	689b      	ldr	r3, [r3, #8]
 80264ac:	2b00      	cmp	r3, #0
 80264ae:	d006      	beq.n	80264be <osSemaphoreNew+0x6e>
 80264b0:	687b      	ldr	r3, [r7, #4]
 80264b2:	68db      	ldr	r3, [r3, #12]
 80264b4:	2b4f      	cmp	r3, #79	@ 0x4f
 80264b6:	d902      	bls.n	80264be <osSemaphoreNew+0x6e>
        mem = 1;
 80264b8:	2301      	movs	r3, #1
 80264ba:	623b      	str	r3, [r7, #32]
 80264bc:	e00c      	b.n	80264d8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80264be:	687b      	ldr	r3, [r7, #4]
 80264c0:	689b      	ldr	r3, [r3, #8]
 80264c2:	2b00      	cmp	r3, #0
 80264c4:	d108      	bne.n	80264d8 <osSemaphoreNew+0x88>
 80264c6:	687b      	ldr	r3, [r7, #4]
 80264c8:	68db      	ldr	r3, [r3, #12]
 80264ca:	2b00      	cmp	r3, #0
 80264cc:	d104      	bne.n	80264d8 <osSemaphoreNew+0x88>
          mem = 0;
 80264ce:	2300      	movs	r3, #0
 80264d0:	623b      	str	r3, [r7, #32]
 80264d2:	e001      	b.n	80264d8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80264d4:	2300      	movs	r3, #0
 80264d6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80264d8:	6a3b      	ldr	r3, [r7, #32]
 80264da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80264de:	d04c      	beq.n	802657a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80264e0:	68fb      	ldr	r3, [r7, #12]
 80264e2:	2b01      	cmp	r3, #1
 80264e4:	d128      	bne.n	8026538 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80264e6:	6a3b      	ldr	r3, [r7, #32]
 80264e8:	2b01      	cmp	r3, #1
 80264ea:	d10a      	bne.n	8026502 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80264ec:	687b      	ldr	r3, [r7, #4]
 80264ee:	689b      	ldr	r3, [r3, #8]
 80264f0:	2203      	movs	r2, #3
 80264f2:	9200      	str	r2, [sp, #0]
 80264f4:	2200      	movs	r2, #0
 80264f6:	2100      	movs	r1, #0
 80264f8:	2001      	movs	r0, #1
 80264fa:	f000 fbf9 	bl	8026cf0 <xQueueGenericCreateStatic>
 80264fe:	6278      	str	r0, [r7, #36]	@ 0x24
 8026500:	e005      	b.n	802650e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8026502:	2203      	movs	r2, #3
 8026504:	2100      	movs	r1, #0
 8026506:	2001      	movs	r0, #1
 8026508:	f000 fc79 	bl	8026dfe <xQueueGenericCreate>
 802650c:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 802650e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026510:	2b00      	cmp	r3, #0
 8026512:	d022      	beq.n	802655a <osSemaphoreNew+0x10a>
 8026514:	68bb      	ldr	r3, [r7, #8]
 8026516:	2b00      	cmp	r3, #0
 8026518:	d01f      	beq.n	802655a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 802651a:	2300      	movs	r3, #0
 802651c:	2200      	movs	r2, #0
 802651e:	2100      	movs	r1, #0
 8026520:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8026522:	f000 fd49 	bl	8026fb8 <xQueueGenericSend>
 8026526:	4603      	mov	r3, r0
 8026528:	2b01      	cmp	r3, #1
 802652a:	d016      	beq.n	802655a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 802652c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802652e:	f001 fa11 	bl	8027954 <vQueueDelete>
            hSemaphore = NULL;
 8026532:	2300      	movs	r3, #0
 8026534:	627b      	str	r3, [r7, #36]	@ 0x24
 8026536:	e010      	b.n	802655a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8026538:	6a3b      	ldr	r3, [r7, #32]
 802653a:	2b01      	cmp	r3, #1
 802653c:	d108      	bne.n	8026550 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 802653e:	687b      	ldr	r3, [r7, #4]
 8026540:	689b      	ldr	r3, [r3, #8]
 8026542:	461a      	mov	r2, r3
 8026544:	68b9      	ldr	r1, [r7, #8]
 8026546:	68f8      	ldr	r0, [r7, #12]
 8026548:	f000 fcbf 	bl	8026eca <xQueueCreateCountingSemaphoreStatic>
 802654c:	6278      	str	r0, [r7, #36]	@ 0x24
 802654e:	e004      	b.n	802655a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8026550:	68b9      	ldr	r1, [r7, #8]
 8026552:	68f8      	ldr	r0, [r7, #12]
 8026554:	f000 fcf6 	bl	8026f44 <xQueueCreateCountingSemaphore>
 8026558:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 802655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802655c:	2b00      	cmp	r3, #0
 802655e:	d00c      	beq.n	802657a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8026560:	687b      	ldr	r3, [r7, #4]
 8026562:	2b00      	cmp	r3, #0
 8026564:	d003      	beq.n	802656e <osSemaphoreNew+0x11e>
          name = attr->name;
 8026566:	687b      	ldr	r3, [r7, #4]
 8026568:	681b      	ldr	r3, [r3, #0]
 802656a:	61fb      	str	r3, [r7, #28]
 802656c:	e001      	b.n	8026572 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 802656e:	2300      	movs	r3, #0
 8026570:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8026572:	69f9      	ldr	r1, [r7, #28]
 8026574:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8026576:	f001 fb3b 	bl	8027bf0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 802657a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 802657c:	4618      	mov	r0, r3
 802657e:	3728      	adds	r7, #40	@ 0x28
 8026580:	46bd      	mov	sp, r7
 8026582:	bd80      	pop	{r7, pc}
 8026584:	2001d104 	.word	0x2001d104

08026588 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8026588:	b580      	push	{r7, lr}
 802658a:	b088      	sub	sp, #32
 802658c:	af00      	add	r7, sp, #0
 802658e:	6078      	str	r0, [r7, #4]
 8026590:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8026592:	687b      	ldr	r3, [r7, #4]
 8026594:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8026596:	2300      	movs	r3, #0
 8026598:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 802659a:	69bb      	ldr	r3, [r7, #24]
 802659c:	2b00      	cmp	r3, #0
 802659e:	d103      	bne.n	80265a8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80265a0:	f06f 0303 	mvn.w	r3, #3
 80265a4:	61fb      	str	r3, [r7, #28]
 80265a6:	e04b      	b.n	8026640 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80265a8:	f3ef 8305 	mrs	r3, IPSR
 80265ac:	617b      	str	r3, [r7, #20]
  return(result);
 80265ae:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80265b0:	2b00      	cmp	r3, #0
 80265b2:	d10f      	bne.n	80265d4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80265b4:	f3ef 8310 	mrs	r3, PRIMASK
 80265b8:	613b      	str	r3, [r7, #16]
  return(result);
 80265ba:	693b      	ldr	r3, [r7, #16]
 80265bc:	2b00      	cmp	r3, #0
 80265be:	d105      	bne.n	80265cc <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80265c0:	f3ef 8311 	mrs	r3, BASEPRI
 80265c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80265c6:	68fb      	ldr	r3, [r7, #12]
 80265c8:	2b00      	cmp	r3, #0
 80265ca:	d026      	beq.n	802661a <osSemaphoreAcquire+0x92>
 80265cc:	4b1f      	ldr	r3, [pc, #124]	@ (802664c <osSemaphoreAcquire+0xc4>)
 80265ce:	681b      	ldr	r3, [r3, #0]
 80265d0:	2b02      	cmp	r3, #2
 80265d2:	d122      	bne.n	802661a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80265d4:	683b      	ldr	r3, [r7, #0]
 80265d6:	2b00      	cmp	r3, #0
 80265d8:	d003      	beq.n	80265e2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80265da:	f06f 0303 	mvn.w	r3, #3
 80265de:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80265e0:	e02d      	b.n	802663e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80265e2:	2300      	movs	r3, #0
 80265e4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80265e6:	f107 0308 	add.w	r3, r7, #8
 80265ea:	461a      	mov	r2, r3
 80265ec:	2100      	movs	r1, #0
 80265ee:	69b8      	ldr	r0, [r7, #24]
 80265f0:	f001 f928 	bl	8027844 <xQueueReceiveFromISR>
 80265f4:	4603      	mov	r3, r0
 80265f6:	2b01      	cmp	r3, #1
 80265f8:	d003      	beq.n	8026602 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80265fa:	f06f 0302 	mvn.w	r3, #2
 80265fe:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8026600:	e01d      	b.n	802663e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8026602:	68bb      	ldr	r3, [r7, #8]
 8026604:	2b00      	cmp	r3, #0
 8026606:	d01a      	beq.n	802663e <osSemaphoreAcquire+0xb6>
 8026608:	4b11      	ldr	r3, [pc, #68]	@ (8026650 <osSemaphoreAcquire+0xc8>)
 802660a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 802660e:	601a      	str	r2, [r3, #0]
 8026610:	f3bf 8f4f 	dsb	sy
 8026614:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8026618:	e011      	b.n	802663e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 802661a:	6839      	ldr	r1, [r7, #0]
 802661c:	69b8      	ldr	r0, [r7, #24]
 802661e:	f000 fff9 	bl	8027614 <xQueueSemaphoreTake>
 8026622:	4603      	mov	r3, r0
 8026624:	2b01      	cmp	r3, #1
 8026626:	d00b      	beq.n	8026640 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8026628:	683b      	ldr	r3, [r7, #0]
 802662a:	2b00      	cmp	r3, #0
 802662c:	d003      	beq.n	8026636 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 802662e:	f06f 0301 	mvn.w	r3, #1
 8026632:	61fb      	str	r3, [r7, #28]
 8026634:	e004      	b.n	8026640 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8026636:	f06f 0302 	mvn.w	r3, #2
 802663a:	61fb      	str	r3, [r7, #28]
 802663c:	e000      	b.n	8026640 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 802663e:	bf00      	nop
      }
    }
  }

  return (stat);
 8026640:	69fb      	ldr	r3, [r7, #28]
}
 8026642:	4618      	mov	r0, r3
 8026644:	3720      	adds	r7, #32
 8026646:	46bd      	mov	sp, r7
 8026648:	bd80      	pop	{r7, pc}
 802664a:	bf00      	nop
 802664c:	2001d104 	.word	0x2001d104
 8026650:	e000ed04 	.word	0xe000ed04

08026654 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8026654:	b580      	push	{r7, lr}
 8026656:	b088      	sub	sp, #32
 8026658:	af00      	add	r7, sp, #0
 802665a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 802665c:	687b      	ldr	r3, [r7, #4]
 802665e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8026660:	2300      	movs	r3, #0
 8026662:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8026664:	69bb      	ldr	r3, [r7, #24]
 8026666:	2b00      	cmp	r3, #0
 8026668:	d103      	bne.n	8026672 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 802666a:	f06f 0303 	mvn.w	r3, #3
 802666e:	61fb      	str	r3, [r7, #28]
 8026670:	e03e      	b.n	80266f0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026672:	f3ef 8305 	mrs	r3, IPSR
 8026676:	617b      	str	r3, [r7, #20]
  return(result);
 8026678:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 802667a:	2b00      	cmp	r3, #0
 802667c:	d10f      	bne.n	802669e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802667e:	f3ef 8310 	mrs	r3, PRIMASK
 8026682:	613b      	str	r3, [r7, #16]
  return(result);
 8026684:	693b      	ldr	r3, [r7, #16]
 8026686:	2b00      	cmp	r3, #0
 8026688:	d105      	bne.n	8026696 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 802668a:	f3ef 8311 	mrs	r3, BASEPRI
 802668e:	60fb      	str	r3, [r7, #12]
  return(result);
 8026690:	68fb      	ldr	r3, [r7, #12]
 8026692:	2b00      	cmp	r3, #0
 8026694:	d01e      	beq.n	80266d4 <osSemaphoreRelease+0x80>
 8026696:	4b19      	ldr	r3, [pc, #100]	@ (80266fc <osSemaphoreRelease+0xa8>)
 8026698:	681b      	ldr	r3, [r3, #0]
 802669a:	2b02      	cmp	r3, #2
 802669c:	d11a      	bne.n	80266d4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 802669e:	2300      	movs	r3, #0
 80266a0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80266a2:	f107 0308 	add.w	r3, r7, #8
 80266a6:	4619      	mov	r1, r3
 80266a8:	69b8      	ldr	r0, [r7, #24]
 80266aa:	f000 fe32 	bl	8027312 <xQueueGiveFromISR>
 80266ae:	4603      	mov	r3, r0
 80266b0:	2b01      	cmp	r3, #1
 80266b2:	d003      	beq.n	80266bc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80266b4:	f06f 0302 	mvn.w	r3, #2
 80266b8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80266ba:	e018      	b.n	80266ee <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80266bc:	68bb      	ldr	r3, [r7, #8]
 80266be:	2b00      	cmp	r3, #0
 80266c0:	d015      	beq.n	80266ee <osSemaphoreRelease+0x9a>
 80266c2:	4b0f      	ldr	r3, [pc, #60]	@ (8026700 <osSemaphoreRelease+0xac>)
 80266c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80266c8:	601a      	str	r2, [r3, #0]
 80266ca:	f3bf 8f4f 	dsb	sy
 80266ce:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80266d2:	e00c      	b.n	80266ee <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80266d4:	2300      	movs	r3, #0
 80266d6:	2200      	movs	r2, #0
 80266d8:	2100      	movs	r1, #0
 80266da:	69b8      	ldr	r0, [r7, #24]
 80266dc:	f000 fc6c 	bl	8026fb8 <xQueueGenericSend>
 80266e0:	4603      	mov	r3, r0
 80266e2:	2b01      	cmp	r3, #1
 80266e4:	d004      	beq.n	80266f0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80266e6:	f06f 0302 	mvn.w	r3, #2
 80266ea:	61fb      	str	r3, [r7, #28]
 80266ec:	e000      	b.n	80266f0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80266ee:	bf00      	nop
    }
  }

  return (stat);
 80266f0:	69fb      	ldr	r3, [r7, #28]
}
 80266f2:	4618      	mov	r0, r3
 80266f4:	3720      	adds	r7, #32
 80266f6:	46bd      	mov	sp, r7
 80266f8:	bd80      	pop	{r7, pc}
 80266fa:	bf00      	nop
 80266fc:	2001d104 	.word	0x2001d104
 8026700:	e000ed04 	.word	0xe000ed04

08026704 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8026704:	b580      	push	{r7, lr}
 8026706:	b088      	sub	sp, #32
 8026708:	af00      	add	r7, sp, #0
 802670a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 802670c:	687b      	ldr	r3, [r7, #4]
 802670e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026710:	f3ef 8305 	mrs	r3, IPSR
 8026714:	617b      	str	r3, [r7, #20]
  return(result);
 8026716:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8026718:	2b00      	cmp	r3, #0
 802671a:	d10f      	bne.n	802673c <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802671c:	f3ef 8310 	mrs	r3, PRIMASK
 8026720:	613b      	str	r3, [r7, #16]
  return(result);
 8026722:	693b      	ldr	r3, [r7, #16]
 8026724:	2b00      	cmp	r3, #0
 8026726:	d105      	bne.n	8026734 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8026728:	f3ef 8311 	mrs	r3, BASEPRI
 802672c:	60fb      	str	r3, [r7, #12]
  return(result);
 802672e:	68fb      	ldr	r3, [r7, #12]
 8026730:	2b00      	cmp	r3, #0
 8026732:	d007      	beq.n	8026744 <osSemaphoreDelete+0x40>
 8026734:	4b0d      	ldr	r3, [pc, #52]	@ (802676c <osSemaphoreDelete+0x68>)
 8026736:	681b      	ldr	r3, [r3, #0]
 8026738:	2b02      	cmp	r3, #2
 802673a:	d103      	bne.n	8026744 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 802673c:	f06f 0305 	mvn.w	r3, #5
 8026740:	61fb      	str	r3, [r7, #28]
 8026742:	e00e      	b.n	8026762 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8026744:	69bb      	ldr	r3, [r7, #24]
 8026746:	2b00      	cmp	r3, #0
 8026748:	d103      	bne.n	8026752 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 802674a:	f06f 0303 	mvn.w	r3, #3
 802674e:	61fb      	str	r3, [r7, #28]
 8026750:	e007      	b.n	8026762 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8026752:	69b8      	ldr	r0, [r7, #24]
 8026754:	f001 fa76 	bl	8027c44 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8026758:	2300      	movs	r3, #0
 802675a:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 802675c:	69b8      	ldr	r0, [r7, #24]
 802675e:	f001 f8f9 	bl	8027954 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8026762:	69fb      	ldr	r3, [r7, #28]
}
 8026764:	4618      	mov	r0, r3
 8026766:	3720      	adds	r7, #32
 8026768:	46bd      	mov	sp, r7
 802676a:	bd80      	pop	{r7, pc}
 802676c:	2001d104 	.word	0x2001d104

08026770 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8026770:	b580      	push	{r7, lr}
 8026772:	b08c      	sub	sp, #48	@ 0x30
 8026774:	af02      	add	r7, sp, #8
 8026776:	60f8      	str	r0, [r7, #12]
 8026778:	60b9      	str	r1, [r7, #8]
 802677a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 802677c:	2300      	movs	r3, #0
 802677e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026780:	f3ef 8305 	mrs	r3, IPSR
 8026784:	61bb      	str	r3, [r7, #24]
  return(result);
 8026786:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8026788:	2b00      	cmp	r3, #0
 802678a:	d16f      	bne.n	802686c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802678c:	f3ef 8310 	mrs	r3, PRIMASK
 8026790:	617b      	str	r3, [r7, #20]
  return(result);
 8026792:	697b      	ldr	r3, [r7, #20]
 8026794:	2b00      	cmp	r3, #0
 8026796:	d105      	bne.n	80267a4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8026798:	f3ef 8311 	mrs	r3, BASEPRI
 802679c:	613b      	str	r3, [r7, #16]
  return(result);
 802679e:	693b      	ldr	r3, [r7, #16]
 80267a0:	2b00      	cmp	r3, #0
 80267a2:	d003      	beq.n	80267ac <osMessageQueueNew+0x3c>
 80267a4:	4b34      	ldr	r3, [pc, #208]	@ (8026878 <osMessageQueueNew+0x108>)
 80267a6:	681b      	ldr	r3, [r3, #0]
 80267a8:	2b02      	cmp	r3, #2
 80267aa:	d05f      	beq.n	802686c <osMessageQueueNew+0xfc>
 80267ac:	68fb      	ldr	r3, [r7, #12]
 80267ae:	2b00      	cmp	r3, #0
 80267b0:	d05c      	beq.n	802686c <osMessageQueueNew+0xfc>
 80267b2:	68bb      	ldr	r3, [r7, #8]
 80267b4:	2b00      	cmp	r3, #0
 80267b6:	d059      	beq.n	802686c <osMessageQueueNew+0xfc>
    mem = -1;
 80267b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80267bc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80267be:	687b      	ldr	r3, [r7, #4]
 80267c0:	2b00      	cmp	r3, #0
 80267c2:	d029      	beq.n	8026818 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80267c4:	687b      	ldr	r3, [r7, #4]
 80267c6:	689b      	ldr	r3, [r3, #8]
 80267c8:	2b00      	cmp	r3, #0
 80267ca:	d012      	beq.n	80267f2 <osMessageQueueNew+0x82>
 80267cc:	687b      	ldr	r3, [r7, #4]
 80267ce:	68db      	ldr	r3, [r3, #12]
 80267d0:	2b4f      	cmp	r3, #79	@ 0x4f
 80267d2:	d90e      	bls.n	80267f2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80267d4:	687b      	ldr	r3, [r7, #4]
 80267d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80267d8:	2b00      	cmp	r3, #0
 80267da:	d00a      	beq.n	80267f2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80267dc:	687b      	ldr	r3, [r7, #4]
 80267de:	695a      	ldr	r2, [r3, #20]
 80267e0:	68fb      	ldr	r3, [r7, #12]
 80267e2:	68b9      	ldr	r1, [r7, #8]
 80267e4:	fb01 f303 	mul.w	r3, r1, r3
 80267e8:	429a      	cmp	r2, r3
 80267ea:	d302      	bcc.n	80267f2 <osMessageQueueNew+0x82>
        mem = 1;
 80267ec:	2301      	movs	r3, #1
 80267ee:	623b      	str	r3, [r7, #32]
 80267f0:	e014      	b.n	802681c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80267f2:	687b      	ldr	r3, [r7, #4]
 80267f4:	689b      	ldr	r3, [r3, #8]
 80267f6:	2b00      	cmp	r3, #0
 80267f8:	d110      	bne.n	802681c <osMessageQueueNew+0xac>
 80267fa:	687b      	ldr	r3, [r7, #4]
 80267fc:	68db      	ldr	r3, [r3, #12]
 80267fe:	2b00      	cmp	r3, #0
 8026800:	d10c      	bne.n	802681c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8026802:	687b      	ldr	r3, [r7, #4]
 8026804:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8026806:	2b00      	cmp	r3, #0
 8026808:	d108      	bne.n	802681c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 802680a:	687b      	ldr	r3, [r7, #4]
 802680c:	695b      	ldr	r3, [r3, #20]
 802680e:	2b00      	cmp	r3, #0
 8026810:	d104      	bne.n	802681c <osMessageQueueNew+0xac>
          mem = 0;
 8026812:	2300      	movs	r3, #0
 8026814:	623b      	str	r3, [r7, #32]
 8026816:	e001      	b.n	802681c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8026818:	2300      	movs	r3, #0
 802681a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 802681c:	6a3b      	ldr	r3, [r7, #32]
 802681e:	2b01      	cmp	r3, #1
 8026820:	d10b      	bne.n	802683a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8026822:	687b      	ldr	r3, [r7, #4]
 8026824:	691a      	ldr	r2, [r3, #16]
 8026826:	687b      	ldr	r3, [r7, #4]
 8026828:	689b      	ldr	r3, [r3, #8]
 802682a:	2100      	movs	r1, #0
 802682c:	9100      	str	r1, [sp, #0]
 802682e:	68b9      	ldr	r1, [r7, #8]
 8026830:	68f8      	ldr	r0, [r7, #12]
 8026832:	f000 fa5d 	bl	8026cf0 <xQueueGenericCreateStatic>
 8026836:	6278      	str	r0, [r7, #36]	@ 0x24
 8026838:	e008      	b.n	802684c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 802683a:	6a3b      	ldr	r3, [r7, #32]
 802683c:	2b00      	cmp	r3, #0
 802683e:	d105      	bne.n	802684c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8026840:	2200      	movs	r2, #0
 8026842:	68b9      	ldr	r1, [r7, #8]
 8026844:	68f8      	ldr	r0, [r7, #12]
 8026846:	f000 fada 	bl	8026dfe <xQueueGenericCreate>
 802684a:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 802684c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802684e:	2b00      	cmp	r3, #0
 8026850:	d00c      	beq.n	802686c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8026852:	687b      	ldr	r3, [r7, #4]
 8026854:	2b00      	cmp	r3, #0
 8026856:	d003      	beq.n	8026860 <osMessageQueueNew+0xf0>
        name = attr->name;
 8026858:	687b      	ldr	r3, [r7, #4]
 802685a:	681b      	ldr	r3, [r3, #0]
 802685c:	61fb      	str	r3, [r7, #28]
 802685e:	e001      	b.n	8026864 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8026860:	2300      	movs	r3, #0
 8026862:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8026864:	69f9      	ldr	r1, [r7, #28]
 8026866:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8026868:	f001 f9c2 	bl	8027bf0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 802686c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 802686e:	4618      	mov	r0, r3
 8026870:	3728      	adds	r7, #40	@ 0x28
 8026872:	46bd      	mov	sp, r7
 8026874:	bd80      	pop	{r7, pc}
 8026876:	bf00      	nop
 8026878:	2001d104 	.word	0x2001d104

0802687c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 802687c:	b580      	push	{r7, lr}
 802687e:	b08a      	sub	sp, #40	@ 0x28
 8026880:	af00      	add	r7, sp, #0
 8026882:	60f8      	str	r0, [r7, #12]
 8026884:	60b9      	str	r1, [r7, #8]
 8026886:	603b      	str	r3, [r7, #0]
 8026888:	4613      	mov	r3, r2
 802688a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 802688c:	68fb      	ldr	r3, [r7, #12]
 802688e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8026890:	2300      	movs	r3, #0
 8026892:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026894:	f3ef 8305 	mrs	r3, IPSR
 8026898:	61fb      	str	r3, [r7, #28]
  return(result);
 802689a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 802689c:	2b00      	cmp	r3, #0
 802689e:	d10f      	bne.n	80268c0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80268a0:	f3ef 8310 	mrs	r3, PRIMASK
 80268a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80268a6:	69bb      	ldr	r3, [r7, #24]
 80268a8:	2b00      	cmp	r3, #0
 80268aa:	d105      	bne.n	80268b8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80268ac:	f3ef 8311 	mrs	r3, BASEPRI
 80268b0:	617b      	str	r3, [r7, #20]
  return(result);
 80268b2:	697b      	ldr	r3, [r7, #20]
 80268b4:	2b00      	cmp	r3, #0
 80268b6:	d02c      	beq.n	8026912 <osMessageQueuePut+0x96>
 80268b8:	4b28      	ldr	r3, [pc, #160]	@ (802695c <osMessageQueuePut+0xe0>)
 80268ba:	681b      	ldr	r3, [r3, #0]
 80268bc:	2b02      	cmp	r3, #2
 80268be:	d128      	bne.n	8026912 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80268c0:	6a3b      	ldr	r3, [r7, #32]
 80268c2:	2b00      	cmp	r3, #0
 80268c4:	d005      	beq.n	80268d2 <osMessageQueuePut+0x56>
 80268c6:	68bb      	ldr	r3, [r7, #8]
 80268c8:	2b00      	cmp	r3, #0
 80268ca:	d002      	beq.n	80268d2 <osMessageQueuePut+0x56>
 80268cc:	683b      	ldr	r3, [r7, #0]
 80268ce:	2b00      	cmp	r3, #0
 80268d0:	d003      	beq.n	80268da <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80268d2:	f06f 0303 	mvn.w	r3, #3
 80268d6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80268d8:	e039      	b.n	802694e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80268da:	2300      	movs	r3, #0
 80268dc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80268de:	f107 0210 	add.w	r2, r7, #16
 80268e2:	2300      	movs	r3, #0
 80268e4:	68b9      	ldr	r1, [r7, #8]
 80268e6:	6a38      	ldr	r0, [r7, #32]
 80268e8:	f000 fc70 	bl	80271cc <xQueueGenericSendFromISR>
 80268ec:	4603      	mov	r3, r0
 80268ee:	2b01      	cmp	r3, #1
 80268f0:	d003      	beq.n	80268fa <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80268f2:	f06f 0302 	mvn.w	r3, #2
 80268f6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80268f8:	e029      	b.n	802694e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80268fa:	693b      	ldr	r3, [r7, #16]
 80268fc:	2b00      	cmp	r3, #0
 80268fe:	d026      	beq.n	802694e <osMessageQueuePut+0xd2>
 8026900:	4b17      	ldr	r3, [pc, #92]	@ (8026960 <osMessageQueuePut+0xe4>)
 8026902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8026906:	601a      	str	r2, [r3, #0]
 8026908:	f3bf 8f4f 	dsb	sy
 802690c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8026910:	e01d      	b.n	802694e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8026912:	6a3b      	ldr	r3, [r7, #32]
 8026914:	2b00      	cmp	r3, #0
 8026916:	d002      	beq.n	802691e <osMessageQueuePut+0xa2>
 8026918:	68bb      	ldr	r3, [r7, #8]
 802691a:	2b00      	cmp	r3, #0
 802691c:	d103      	bne.n	8026926 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 802691e:	f06f 0303 	mvn.w	r3, #3
 8026922:	627b      	str	r3, [r7, #36]	@ 0x24
 8026924:	e014      	b.n	8026950 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8026926:	2300      	movs	r3, #0
 8026928:	683a      	ldr	r2, [r7, #0]
 802692a:	68b9      	ldr	r1, [r7, #8]
 802692c:	6a38      	ldr	r0, [r7, #32]
 802692e:	f000 fb43 	bl	8026fb8 <xQueueGenericSend>
 8026932:	4603      	mov	r3, r0
 8026934:	2b01      	cmp	r3, #1
 8026936:	d00b      	beq.n	8026950 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8026938:	683b      	ldr	r3, [r7, #0]
 802693a:	2b00      	cmp	r3, #0
 802693c:	d003      	beq.n	8026946 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 802693e:	f06f 0301 	mvn.w	r3, #1
 8026942:	627b      	str	r3, [r7, #36]	@ 0x24
 8026944:	e004      	b.n	8026950 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8026946:	f06f 0302 	mvn.w	r3, #2
 802694a:	627b      	str	r3, [r7, #36]	@ 0x24
 802694c:	e000      	b.n	8026950 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 802694e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8026950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8026952:	4618      	mov	r0, r3
 8026954:	3728      	adds	r7, #40	@ 0x28
 8026956:	46bd      	mov	sp, r7
 8026958:	bd80      	pop	{r7, pc}
 802695a:	bf00      	nop
 802695c:	2001d104 	.word	0x2001d104
 8026960:	e000ed04 	.word	0xe000ed04

08026964 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8026964:	b580      	push	{r7, lr}
 8026966:	b08a      	sub	sp, #40	@ 0x28
 8026968:	af00      	add	r7, sp, #0
 802696a:	60f8      	str	r0, [r7, #12]
 802696c:	60b9      	str	r1, [r7, #8]
 802696e:	607a      	str	r2, [r7, #4]
 8026970:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8026972:	68fb      	ldr	r3, [r7, #12]
 8026974:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8026976:	2300      	movs	r3, #0
 8026978:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802697a:	f3ef 8305 	mrs	r3, IPSR
 802697e:	61fb      	str	r3, [r7, #28]
  return(result);
 8026980:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8026982:	2b00      	cmp	r3, #0
 8026984:	d10f      	bne.n	80269a6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026986:	f3ef 8310 	mrs	r3, PRIMASK
 802698a:	61bb      	str	r3, [r7, #24]
  return(result);
 802698c:	69bb      	ldr	r3, [r7, #24]
 802698e:	2b00      	cmp	r3, #0
 8026990:	d105      	bne.n	802699e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8026992:	f3ef 8311 	mrs	r3, BASEPRI
 8026996:	617b      	str	r3, [r7, #20]
  return(result);
 8026998:	697b      	ldr	r3, [r7, #20]
 802699a:	2b00      	cmp	r3, #0
 802699c:	d02c      	beq.n	80269f8 <osMessageQueueGet+0x94>
 802699e:	4b28      	ldr	r3, [pc, #160]	@ (8026a40 <osMessageQueueGet+0xdc>)
 80269a0:	681b      	ldr	r3, [r3, #0]
 80269a2:	2b02      	cmp	r3, #2
 80269a4:	d128      	bne.n	80269f8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80269a6:	6a3b      	ldr	r3, [r7, #32]
 80269a8:	2b00      	cmp	r3, #0
 80269aa:	d005      	beq.n	80269b8 <osMessageQueueGet+0x54>
 80269ac:	68bb      	ldr	r3, [r7, #8]
 80269ae:	2b00      	cmp	r3, #0
 80269b0:	d002      	beq.n	80269b8 <osMessageQueueGet+0x54>
 80269b2:	683b      	ldr	r3, [r7, #0]
 80269b4:	2b00      	cmp	r3, #0
 80269b6:	d003      	beq.n	80269c0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80269b8:	f06f 0303 	mvn.w	r3, #3
 80269bc:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80269be:	e038      	b.n	8026a32 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80269c0:	2300      	movs	r3, #0
 80269c2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80269c4:	f107 0310 	add.w	r3, r7, #16
 80269c8:	461a      	mov	r2, r3
 80269ca:	68b9      	ldr	r1, [r7, #8]
 80269cc:	6a38      	ldr	r0, [r7, #32]
 80269ce:	f000 ff39 	bl	8027844 <xQueueReceiveFromISR>
 80269d2:	4603      	mov	r3, r0
 80269d4:	2b01      	cmp	r3, #1
 80269d6:	d003      	beq.n	80269e0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80269d8:	f06f 0302 	mvn.w	r3, #2
 80269dc:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80269de:	e028      	b.n	8026a32 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80269e0:	693b      	ldr	r3, [r7, #16]
 80269e2:	2b00      	cmp	r3, #0
 80269e4:	d025      	beq.n	8026a32 <osMessageQueueGet+0xce>
 80269e6:	4b17      	ldr	r3, [pc, #92]	@ (8026a44 <osMessageQueueGet+0xe0>)
 80269e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80269ec:	601a      	str	r2, [r3, #0]
 80269ee:	f3bf 8f4f 	dsb	sy
 80269f2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80269f6:	e01c      	b.n	8026a32 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80269f8:	6a3b      	ldr	r3, [r7, #32]
 80269fa:	2b00      	cmp	r3, #0
 80269fc:	d002      	beq.n	8026a04 <osMessageQueueGet+0xa0>
 80269fe:	68bb      	ldr	r3, [r7, #8]
 8026a00:	2b00      	cmp	r3, #0
 8026a02:	d103      	bne.n	8026a0c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8026a04:	f06f 0303 	mvn.w	r3, #3
 8026a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8026a0a:	e013      	b.n	8026a34 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8026a0c:	683a      	ldr	r2, [r7, #0]
 8026a0e:	68b9      	ldr	r1, [r7, #8]
 8026a10:	6a38      	ldr	r0, [r7, #32]
 8026a12:	f000 fd17 	bl	8027444 <xQueueReceive>
 8026a16:	4603      	mov	r3, r0
 8026a18:	2b01      	cmp	r3, #1
 8026a1a:	d00b      	beq.n	8026a34 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8026a1c:	683b      	ldr	r3, [r7, #0]
 8026a1e:	2b00      	cmp	r3, #0
 8026a20:	d003      	beq.n	8026a2a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8026a22:	f06f 0301 	mvn.w	r3, #1
 8026a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8026a28:	e004      	b.n	8026a34 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8026a2a:	f06f 0302 	mvn.w	r3, #2
 8026a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8026a30:	e000      	b.n	8026a34 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8026a32:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8026a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8026a36:	4618      	mov	r0, r3
 8026a38:	3728      	adds	r7, #40	@ 0x28
 8026a3a:	46bd      	mov	sp, r7
 8026a3c:	bd80      	pop	{r7, pc}
 8026a3e:	bf00      	nop
 8026a40:	2001d104 	.word	0x2001d104
 8026a44:	e000ed04 	.word	0xe000ed04

08026a48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8026a48:	b480      	push	{r7}
 8026a4a:	b085      	sub	sp, #20
 8026a4c:	af00      	add	r7, sp, #0
 8026a4e:	60f8      	str	r0, [r7, #12]
 8026a50:	60b9      	str	r1, [r7, #8]
 8026a52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8026a54:	68fb      	ldr	r3, [r7, #12]
 8026a56:	4a07      	ldr	r2, [pc, #28]	@ (8026a74 <vApplicationGetIdleTaskMemory+0x2c>)
 8026a58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8026a5a:	68bb      	ldr	r3, [r7, #8]
 8026a5c:	4a06      	ldr	r2, [pc, #24]	@ (8026a78 <vApplicationGetIdleTaskMemory+0x30>)
 8026a5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8026a60:	687b      	ldr	r3, [r7, #4]
 8026a62:	2280      	movs	r2, #128	@ 0x80
 8026a64:	601a      	str	r2, [r3, #0]
}
 8026a66:	bf00      	nop
 8026a68:	3714      	adds	r7, #20
 8026a6a:	46bd      	mov	sp, r7
 8026a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a70:	4770      	bx	lr
 8026a72:	bf00      	nop
 8026a74:	2001d108 	.word	0x2001d108
 8026a78:	2001d1b0 	.word	0x2001d1b0

08026a7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8026a7c:	b480      	push	{r7}
 8026a7e:	b085      	sub	sp, #20
 8026a80:	af00      	add	r7, sp, #0
 8026a82:	60f8      	str	r0, [r7, #12]
 8026a84:	60b9      	str	r1, [r7, #8]
 8026a86:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8026a88:	68fb      	ldr	r3, [r7, #12]
 8026a8a:	4a07      	ldr	r2, [pc, #28]	@ (8026aa8 <vApplicationGetTimerTaskMemory+0x2c>)
 8026a8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8026a8e:	68bb      	ldr	r3, [r7, #8]
 8026a90:	4a06      	ldr	r2, [pc, #24]	@ (8026aac <vApplicationGetTimerTaskMemory+0x30>)
 8026a92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8026a94:	687b      	ldr	r3, [r7, #4]
 8026a96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8026a9a:	601a      	str	r2, [r3, #0]
}
 8026a9c:	bf00      	nop
 8026a9e:	3714      	adds	r7, #20
 8026aa0:	46bd      	mov	sp, r7
 8026aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026aa6:	4770      	bx	lr
 8026aa8:	2001d3b0 	.word	0x2001d3b0
 8026aac:	2001d458 	.word	0x2001d458

08026ab0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8026ab0:	b480      	push	{r7}
 8026ab2:	b083      	sub	sp, #12
 8026ab4:	af00      	add	r7, sp, #0
 8026ab6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8026ab8:	687b      	ldr	r3, [r7, #4]
 8026aba:	f103 0208 	add.w	r2, r3, #8
 8026abe:	687b      	ldr	r3, [r7, #4]
 8026ac0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8026ac2:	687b      	ldr	r3, [r7, #4]
 8026ac4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8026ac8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8026aca:	687b      	ldr	r3, [r7, #4]
 8026acc:	f103 0208 	add.w	r2, r3, #8
 8026ad0:	687b      	ldr	r3, [r7, #4]
 8026ad2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8026ad4:	687b      	ldr	r3, [r7, #4]
 8026ad6:	f103 0208 	add.w	r2, r3, #8
 8026ada:	687b      	ldr	r3, [r7, #4]
 8026adc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8026ade:	687b      	ldr	r3, [r7, #4]
 8026ae0:	2200      	movs	r2, #0
 8026ae2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8026ae4:	bf00      	nop
 8026ae6:	370c      	adds	r7, #12
 8026ae8:	46bd      	mov	sp, r7
 8026aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026aee:	4770      	bx	lr

08026af0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8026af0:	b480      	push	{r7}
 8026af2:	b083      	sub	sp, #12
 8026af4:	af00      	add	r7, sp, #0
 8026af6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8026af8:	687b      	ldr	r3, [r7, #4]
 8026afa:	2200      	movs	r2, #0
 8026afc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8026afe:	bf00      	nop
 8026b00:	370c      	adds	r7, #12
 8026b02:	46bd      	mov	sp, r7
 8026b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b08:	4770      	bx	lr

08026b0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8026b0a:	b480      	push	{r7}
 8026b0c:	b085      	sub	sp, #20
 8026b0e:	af00      	add	r7, sp, #0
 8026b10:	6078      	str	r0, [r7, #4]
 8026b12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8026b14:	687b      	ldr	r3, [r7, #4]
 8026b16:	685b      	ldr	r3, [r3, #4]
 8026b18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8026b1a:	683b      	ldr	r3, [r7, #0]
 8026b1c:	68fa      	ldr	r2, [r7, #12]
 8026b1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8026b20:	68fb      	ldr	r3, [r7, #12]
 8026b22:	689a      	ldr	r2, [r3, #8]
 8026b24:	683b      	ldr	r3, [r7, #0]
 8026b26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8026b28:	68fb      	ldr	r3, [r7, #12]
 8026b2a:	689b      	ldr	r3, [r3, #8]
 8026b2c:	683a      	ldr	r2, [r7, #0]
 8026b2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8026b30:	68fb      	ldr	r3, [r7, #12]
 8026b32:	683a      	ldr	r2, [r7, #0]
 8026b34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8026b36:	683b      	ldr	r3, [r7, #0]
 8026b38:	687a      	ldr	r2, [r7, #4]
 8026b3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8026b3c:	687b      	ldr	r3, [r7, #4]
 8026b3e:	681b      	ldr	r3, [r3, #0]
 8026b40:	1c5a      	adds	r2, r3, #1
 8026b42:	687b      	ldr	r3, [r7, #4]
 8026b44:	601a      	str	r2, [r3, #0]
}
 8026b46:	bf00      	nop
 8026b48:	3714      	adds	r7, #20
 8026b4a:	46bd      	mov	sp, r7
 8026b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b50:	4770      	bx	lr

08026b52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8026b52:	b480      	push	{r7}
 8026b54:	b085      	sub	sp, #20
 8026b56:	af00      	add	r7, sp, #0
 8026b58:	6078      	str	r0, [r7, #4]
 8026b5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8026b5c:	683b      	ldr	r3, [r7, #0]
 8026b5e:	681b      	ldr	r3, [r3, #0]
 8026b60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8026b62:	68bb      	ldr	r3, [r7, #8]
 8026b64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8026b68:	d103      	bne.n	8026b72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8026b6a:	687b      	ldr	r3, [r7, #4]
 8026b6c:	691b      	ldr	r3, [r3, #16]
 8026b6e:	60fb      	str	r3, [r7, #12]
 8026b70:	e00c      	b.n	8026b8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8026b72:	687b      	ldr	r3, [r7, #4]
 8026b74:	3308      	adds	r3, #8
 8026b76:	60fb      	str	r3, [r7, #12]
 8026b78:	e002      	b.n	8026b80 <vListInsert+0x2e>
 8026b7a:	68fb      	ldr	r3, [r7, #12]
 8026b7c:	685b      	ldr	r3, [r3, #4]
 8026b7e:	60fb      	str	r3, [r7, #12]
 8026b80:	68fb      	ldr	r3, [r7, #12]
 8026b82:	685b      	ldr	r3, [r3, #4]
 8026b84:	681b      	ldr	r3, [r3, #0]
 8026b86:	68ba      	ldr	r2, [r7, #8]
 8026b88:	429a      	cmp	r2, r3
 8026b8a:	d2f6      	bcs.n	8026b7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8026b8c:	68fb      	ldr	r3, [r7, #12]
 8026b8e:	685a      	ldr	r2, [r3, #4]
 8026b90:	683b      	ldr	r3, [r7, #0]
 8026b92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8026b94:	683b      	ldr	r3, [r7, #0]
 8026b96:	685b      	ldr	r3, [r3, #4]
 8026b98:	683a      	ldr	r2, [r7, #0]
 8026b9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8026b9c:	683b      	ldr	r3, [r7, #0]
 8026b9e:	68fa      	ldr	r2, [r7, #12]
 8026ba0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8026ba2:	68fb      	ldr	r3, [r7, #12]
 8026ba4:	683a      	ldr	r2, [r7, #0]
 8026ba6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8026ba8:	683b      	ldr	r3, [r7, #0]
 8026baa:	687a      	ldr	r2, [r7, #4]
 8026bac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8026bae:	687b      	ldr	r3, [r7, #4]
 8026bb0:	681b      	ldr	r3, [r3, #0]
 8026bb2:	1c5a      	adds	r2, r3, #1
 8026bb4:	687b      	ldr	r3, [r7, #4]
 8026bb6:	601a      	str	r2, [r3, #0]
}
 8026bb8:	bf00      	nop
 8026bba:	3714      	adds	r7, #20
 8026bbc:	46bd      	mov	sp, r7
 8026bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bc2:	4770      	bx	lr

08026bc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8026bc4:	b480      	push	{r7}
 8026bc6:	b085      	sub	sp, #20
 8026bc8:	af00      	add	r7, sp, #0
 8026bca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8026bcc:	687b      	ldr	r3, [r7, #4]
 8026bce:	691b      	ldr	r3, [r3, #16]
 8026bd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8026bd2:	687b      	ldr	r3, [r7, #4]
 8026bd4:	685b      	ldr	r3, [r3, #4]
 8026bd6:	687a      	ldr	r2, [r7, #4]
 8026bd8:	6892      	ldr	r2, [r2, #8]
 8026bda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8026bdc:	687b      	ldr	r3, [r7, #4]
 8026bde:	689b      	ldr	r3, [r3, #8]
 8026be0:	687a      	ldr	r2, [r7, #4]
 8026be2:	6852      	ldr	r2, [r2, #4]
 8026be4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8026be6:	68fb      	ldr	r3, [r7, #12]
 8026be8:	685b      	ldr	r3, [r3, #4]
 8026bea:	687a      	ldr	r2, [r7, #4]
 8026bec:	429a      	cmp	r2, r3
 8026bee:	d103      	bne.n	8026bf8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8026bf0:	687b      	ldr	r3, [r7, #4]
 8026bf2:	689a      	ldr	r2, [r3, #8]
 8026bf4:	68fb      	ldr	r3, [r7, #12]
 8026bf6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8026bf8:	687b      	ldr	r3, [r7, #4]
 8026bfa:	2200      	movs	r2, #0
 8026bfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8026bfe:	68fb      	ldr	r3, [r7, #12]
 8026c00:	681b      	ldr	r3, [r3, #0]
 8026c02:	1e5a      	subs	r2, r3, #1
 8026c04:	68fb      	ldr	r3, [r7, #12]
 8026c06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8026c08:	68fb      	ldr	r3, [r7, #12]
 8026c0a:	681b      	ldr	r3, [r3, #0]
}
 8026c0c:	4618      	mov	r0, r3
 8026c0e:	3714      	adds	r7, #20
 8026c10:	46bd      	mov	sp, r7
 8026c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c16:	4770      	bx	lr

08026c18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8026c18:	b580      	push	{r7, lr}
 8026c1a:	b084      	sub	sp, #16
 8026c1c:	af00      	add	r7, sp, #0
 8026c1e:	6078      	str	r0, [r7, #4]
 8026c20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8026c22:	687b      	ldr	r3, [r7, #4]
 8026c24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8026c26:	68fb      	ldr	r3, [r7, #12]
 8026c28:	2b00      	cmp	r3, #0
 8026c2a:	d10d      	bne.n	8026c48 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8026c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8026c30:	b672      	cpsid	i
 8026c32:	f383 8811 	msr	BASEPRI, r3
 8026c36:	f3bf 8f6f 	isb	sy
 8026c3a:	f3bf 8f4f 	dsb	sy
 8026c3e:	b662      	cpsie	i
 8026c40:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8026c42:	bf00      	nop
 8026c44:	bf00      	nop
 8026c46:	e7fd      	b.n	8026c44 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8026c48:	f002 fe48 	bl	80298dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8026c4c:	68fb      	ldr	r3, [r7, #12]
 8026c4e:	681a      	ldr	r2, [r3, #0]
 8026c50:	68fb      	ldr	r3, [r7, #12]
 8026c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8026c54:	68f9      	ldr	r1, [r7, #12]
 8026c56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8026c58:	fb01 f303 	mul.w	r3, r1, r3
 8026c5c:	441a      	add	r2, r3
 8026c5e:	68fb      	ldr	r3, [r7, #12]
 8026c60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8026c62:	68fb      	ldr	r3, [r7, #12]
 8026c64:	2200      	movs	r2, #0
 8026c66:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8026c68:	68fb      	ldr	r3, [r7, #12]
 8026c6a:	681a      	ldr	r2, [r3, #0]
 8026c6c:	68fb      	ldr	r3, [r7, #12]
 8026c6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8026c70:	68fb      	ldr	r3, [r7, #12]
 8026c72:	681a      	ldr	r2, [r3, #0]
 8026c74:	68fb      	ldr	r3, [r7, #12]
 8026c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8026c78:	3b01      	subs	r3, #1
 8026c7a:	68f9      	ldr	r1, [r7, #12]
 8026c7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8026c7e:	fb01 f303 	mul.w	r3, r1, r3
 8026c82:	441a      	add	r2, r3
 8026c84:	68fb      	ldr	r3, [r7, #12]
 8026c86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8026c88:	68fb      	ldr	r3, [r7, #12]
 8026c8a:	22ff      	movs	r2, #255	@ 0xff
 8026c8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8026c90:	68fb      	ldr	r3, [r7, #12]
 8026c92:	22ff      	movs	r2, #255	@ 0xff
 8026c94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8026c98:	683b      	ldr	r3, [r7, #0]
 8026c9a:	2b00      	cmp	r3, #0
 8026c9c:	d114      	bne.n	8026cc8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8026c9e:	68fb      	ldr	r3, [r7, #12]
 8026ca0:	691b      	ldr	r3, [r3, #16]
 8026ca2:	2b00      	cmp	r3, #0
 8026ca4:	d01a      	beq.n	8026cdc <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8026ca6:	68fb      	ldr	r3, [r7, #12]
 8026ca8:	3310      	adds	r3, #16
 8026caa:	4618      	mov	r0, r3
 8026cac:	f001 fcd2 	bl	8028654 <xTaskRemoveFromEventList>
 8026cb0:	4603      	mov	r3, r0
 8026cb2:	2b00      	cmp	r3, #0
 8026cb4:	d012      	beq.n	8026cdc <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8026cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8026cec <xQueueGenericReset+0xd4>)
 8026cb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8026cbc:	601a      	str	r2, [r3, #0]
 8026cbe:	f3bf 8f4f 	dsb	sy
 8026cc2:	f3bf 8f6f 	isb	sy
 8026cc6:	e009      	b.n	8026cdc <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8026cc8:	68fb      	ldr	r3, [r7, #12]
 8026cca:	3310      	adds	r3, #16
 8026ccc:	4618      	mov	r0, r3
 8026cce:	f7ff feef 	bl	8026ab0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8026cd2:	68fb      	ldr	r3, [r7, #12]
 8026cd4:	3324      	adds	r3, #36	@ 0x24
 8026cd6:	4618      	mov	r0, r3
 8026cd8:	f7ff feea 	bl	8026ab0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8026cdc:	f002 fe34 	bl	8029948 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8026ce0:	2301      	movs	r3, #1
}
 8026ce2:	4618      	mov	r0, r3
 8026ce4:	3710      	adds	r7, #16
 8026ce6:	46bd      	mov	sp, r7
 8026ce8:	bd80      	pop	{r7, pc}
 8026cea:	bf00      	nop
 8026cec:	e000ed04 	.word	0xe000ed04

08026cf0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8026cf0:	b580      	push	{r7, lr}
 8026cf2:	b08e      	sub	sp, #56	@ 0x38
 8026cf4:	af02      	add	r7, sp, #8
 8026cf6:	60f8      	str	r0, [r7, #12]
 8026cf8:	60b9      	str	r1, [r7, #8]
 8026cfa:	607a      	str	r2, [r7, #4]
 8026cfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8026cfe:	68fb      	ldr	r3, [r7, #12]
 8026d00:	2b00      	cmp	r3, #0
 8026d02:	d10d      	bne.n	8026d20 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8026d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8026d08:	b672      	cpsid	i
 8026d0a:	f383 8811 	msr	BASEPRI, r3
 8026d0e:	f3bf 8f6f 	isb	sy
 8026d12:	f3bf 8f4f 	dsb	sy
 8026d16:	b662      	cpsie	i
 8026d18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8026d1a:	bf00      	nop
 8026d1c:	bf00      	nop
 8026d1e:	e7fd      	b.n	8026d1c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8026d20:	683b      	ldr	r3, [r7, #0]
 8026d22:	2b00      	cmp	r3, #0
 8026d24:	d10d      	bne.n	8026d42 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8026d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8026d2a:	b672      	cpsid	i
 8026d2c:	f383 8811 	msr	BASEPRI, r3
 8026d30:	f3bf 8f6f 	isb	sy
 8026d34:	f3bf 8f4f 	dsb	sy
 8026d38:	b662      	cpsie	i
 8026d3a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8026d3c:	bf00      	nop
 8026d3e:	bf00      	nop
 8026d40:	e7fd      	b.n	8026d3e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8026d42:	687b      	ldr	r3, [r7, #4]
 8026d44:	2b00      	cmp	r3, #0
 8026d46:	d002      	beq.n	8026d4e <xQueueGenericCreateStatic+0x5e>
 8026d48:	68bb      	ldr	r3, [r7, #8]
 8026d4a:	2b00      	cmp	r3, #0
 8026d4c:	d001      	beq.n	8026d52 <xQueueGenericCreateStatic+0x62>
 8026d4e:	2301      	movs	r3, #1
 8026d50:	e000      	b.n	8026d54 <xQueueGenericCreateStatic+0x64>
 8026d52:	2300      	movs	r3, #0
 8026d54:	2b00      	cmp	r3, #0
 8026d56:	d10d      	bne.n	8026d74 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8026d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8026d5c:	b672      	cpsid	i
 8026d5e:	f383 8811 	msr	BASEPRI, r3
 8026d62:	f3bf 8f6f 	isb	sy
 8026d66:	f3bf 8f4f 	dsb	sy
 8026d6a:	b662      	cpsie	i
 8026d6c:	623b      	str	r3, [r7, #32]
}
 8026d6e:	bf00      	nop
 8026d70:	bf00      	nop
 8026d72:	e7fd      	b.n	8026d70 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8026d74:	687b      	ldr	r3, [r7, #4]
 8026d76:	2b00      	cmp	r3, #0
 8026d78:	d102      	bne.n	8026d80 <xQueueGenericCreateStatic+0x90>
 8026d7a:	68bb      	ldr	r3, [r7, #8]
 8026d7c:	2b00      	cmp	r3, #0
 8026d7e:	d101      	bne.n	8026d84 <xQueueGenericCreateStatic+0x94>
 8026d80:	2301      	movs	r3, #1
 8026d82:	e000      	b.n	8026d86 <xQueueGenericCreateStatic+0x96>
 8026d84:	2300      	movs	r3, #0
 8026d86:	2b00      	cmp	r3, #0
 8026d88:	d10d      	bne.n	8026da6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8026d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8026d8e:	b672      	cpsid	i
 8026d90:	f383 8811 	msr	BASEPRI, r3
 8026d94:	f3bf 8f6f 	isb	sy
 8026d98:	f3bf 8f4f 	dsb	sy
 8026d9c:	b662      	cpsie	i
 8026d9e:	61fb      	str	r3, [r7, #28]
}
 8026da0:	bf00      	nop
 8026da2:	bf00      	nop
 8026da4:	e7fd      	b.n	8026da2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8026da6:	2350      	movs	r3, #80	@ 0x50
 8026da8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8026daa:	697b      	ldr	r3, [r7, #20]
 8026dac:	2b50      	cmp	r3, #80	@ 0x50
 8026dae:	d00d      	beq.n	8026dcc <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8026db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8026db4:	b672      	cpsid	i
 8026db6:	f383 8811 	msr	BASEPRI, r3
 8026dba:	f3bf 8f6f 	isb	sy
 8026dbe:	f3bf 8f4f 	dsb	sy
 8026dc2:	b662      	cpsie	i
 8026dc4:	61bb      	str	r3, [r7, #24]
}
 8026dc6:	bf00      	nop
 8026dc8:	bf00      	nop
 8026dca:	e7fd      	b.n	8026dc8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8026dcc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8026dce:	683b      	ldr	r3, [r7, #0]
 8026dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8026dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026dd4:	2b00      	cmp	r3, #0
 8026dd6:	d00d      	beq.n	8026df4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8026dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026dda:	2201      	movs	r2, #1
 8026ddc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8026de0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8026de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026de6:	9300      	str	r3, [sp, #0]
 8026de8:	4613      	mov	r3, r2
 8026dea:	687a      	ldr	r2, [r7, #4]
 8026dec:	68b9      	ldr	r1, [r7, #8]
 8026dee:	68f8      	ldr	r0, [r7, #12]
 8026df0:	f000 f848 	bl	8026e84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8026df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8026df6:	4618      	mov	r0, r3
 8026df8:	3730      	adds	r7, #48	@ 0x30
 8026dfa:	46bd      	mov	sp, r7
 8026dfc:	bd80      	pop	{r7, pc}

08026dfe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8026dfe:	b580      	push	{r7, lr}
 8026e00:	b08a      	sub	sp, #40	@ 0x28
 8026e02:	af02      	add	r7, sp, #8
 8026e04:	60f8      	str	r0, [r7, #12]
 8026e06:	60b9      	str	r1, [r7, #8]
 8026e08:	4613      	mov	r3, r2
 8026e0a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8026e0c:	68fb      	ldr	r3, [r7, #12]
 8026e0e:	2b00      	cmp	r3, #0
 8026e10:	d10d      	bne.n	8026e2e <xQueueGenericCreate+0x30>
	__asm volatile
 8026e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8026e16:	b672      	cpsid	i
 8026e18:	f383 8811 	msr	BASEPRI, r3
 8026e1c:	f3bf 8f6f 	isb	sy
 8026e20:	f3bf 8f4f 	dsb	sy
 8026e24:	b662      	cpsie	i
 8026e26:	613b      	str	r3, [r7, #16]
}
 8026e28:	bf00      	nop
 8026e2a:	bf00      	nop
 8026e2c:	e7fd      	b.n	8026e2a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8026e2e:	68bb      	ldr	r3, [r7, #8]
 8026e30:	2b00      	cmp	r3, #0
 8026e32:	d102      	bne.n	8026e3a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8026e34:	2300      	movs	r3, #0
 8026e36:	61fb      	str	r3, [r7, #28]
 8026e38:	e004      	b.n	8026e44 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8026e3a:	68fb      	ldr	r3, [r7, #12]
 8026e3c:	68ba      	ldr	r2, [r7, #8]
 8026e3e:	fb02 f303 	mul.w	r3, r2, r3
 8026e42:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8026e44:	69fb      	ldr	r3, [r7, #28]
 8026e46:	3350      	adds	r3, #80	@ 0x50
 8026e48:	4618      	mov	r0, r3
 8026e4a:	f002 fe75 	bl	8029b38 <pvPortMalloc>
 8026e4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8026e50:	69bb      	ldr	r3, [r7, #24]
 8026e52:	2b00      	cmp	r3, #0
 8026e54:	d011      	beq.n	8026e7a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8026e56:	69bb      	ldr	r3, [r7, #24]
 8026e58:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8026e5a:	697b      	ldr	r3, [r7, #20]
 8026e5c:	3350      	adds	r3, #80	@ 0x50
 8026e5e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8026e60:	69bb      	ldr	r3, [r7, #24]
 8026e62:	2200      	movs	r2, #0
 8026e64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8026e68:	79fa      	ldrb	r2, [r7, #7]
 8026e6a:	69bb      	ldr	r3, [r7, #24]
 8026e6c:	9300      	str	r3, [sp, #0]
 8026e6e:	4613      	mov	r3, r2
 8026e70:	697a      	ldr	r2, [r7, #20]
 8026e72:	68b9      	ldr	r1, [r7, #8]
 8026e74:	68f8      	ldr	r0, [r7, #12]
 8026e76:	f000 f805 	bl	8026e84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8026e7a:	69bb      	ldr	r3, [r7, #24]
	}
 8026e7c:	4618      	mov	r0, r3
 8026e7e:	3720      	adds	r7, #32
 8026e80:	46bd      	mov	sp, r7
 8026e82:	bd80      	pop	{r7, pc}

08026e84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8026e84:	b580      	push	{r7, lr}
 8026e86:	b084      	sub	sp, #16
 8026e88:	af00      	add	r7, sp, #0
 8026e8a:	60f8      	str	r0, [r7, #12]
 8026e8c:	60b9      	str	r1, [r7, #8]
 8026e8e:	607a      	str	r2, [r7, #4]
 8026e90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8026e92:	68bb      	ldr	r3, [r7, #8]
 8026e94:	2b00      	cmp	r3, #0
 8026e96:	d103      	bne.n	8026ea0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8026e98:	69bb      	ldr	r3, [r7, #24]
 8026e9a:	69ba      	ldr	r2, [r7, #24]
 8026e9c:	601a      	str	r2, [r3, #0]
 8026e9e:	e002      	b.n	8026ea6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8026ea0:	69bb      	ldr	r3, [r7, #24]
 8026ea2:	687a      	ldr	r2, [r7, #4]
 8026ea4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8026ea6:	69bb      	ldr	r3, [r7, #24]
 8026ea8:	68fa      	ldr	r2, [r7, #12]
 8026eaa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8026eac:	69bb      	ldr	r3, [r7, #24]
 8026eae:	68ba      	ldr	r2, [r7, #8]
 8026eb0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8026eb2:	2101      	movs	r1, #1
 8026eb4:	69b8      	ldr	r0, [r7, #24]
 8026eb6:	f7ff feaf 	bl	8026c18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8026eba:	69bb      	ldr	r3, [r7, #24]
 8026ebc:	78fa      	ldrb	r2, [r7, #3]
 8026ebe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8026ec2:	bf00      	nop
 8026ec4:	3710      	adds	r7, #16
 8026ec6:	46bd      	mov	sp, r7
 8026ec8:	bd80      	pop	{r7, pc}

08026eca <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8026eca:	b580      	push	{r7, lr}
 8026ecc:	b08a      	sub	sp, #40	@ 0x28
 8026ece:	af02      	add	r7, sp, #8
 8026ed0:	60f8      	str	r0, [r7, #12]
 8026ed2:	60b9      	str	r1, [r7, #8]
 8026ed4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8026ed6:	68fb      	ldr	r3, [r7, #12]
 8026ed8:	2b00      	cmp	r3, #0
 8026eda:	d10d      	bne.n	8026ef8 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8026edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8026ee0:	b672      	cpsid	i
 8026ee2:	f383 8811 	msr	BASEPRI, r3
 8026ee6:	f3bf 8f6f 	isb	sy
 8026eea:	f3bf 8f4f 	dsb	sy
 8026eee:	b662      	cpsie	i
 8026ef0:	61bb      	str	r3, [r7, #24]
}
 8026ef2:	bf00      	nop
 8026ef4:	bf00      	nop
 8026ef6:	e7fd      	b.n	8026ef4 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8026ef8:	68ba      	ldr	r2, [r7, #8]
 8026efa:	68fb      	ldr	r3, [r7, #12]
 8026efc:	429a      	cmp	r2, r3
 8026efe:	d90d      	bls.n	8026f1c <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8026f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8026f04:	b672      	cpsid	i
 8026f06:	f383 8811 	msr	BASEPRI, r3
 8026f0a:	f3bf 8f6f 	isb	sy
 8026f0e:	f3bf 8f4f 	dsb	sy
 8026f12:	b662      	cpsie	i
 8026f14:	617b      	str	r3, [r7, #20]
}
 8026f16:	bf00      	nop
 8026f18:	bf00      	nop
 8026f1a:	e7fd      	b.n	8026f18 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8026f1c:	2302      	movs	r3, #2
 8026f1e:	9300      	str	r3, [sp, #0]
 8026f20:	687b      	ldr	r3, [r7, #4]
 8026f22:	2200      	movs	r2, #0
 8026f24:	2100      	movs	r1, #0
 8026f26:	68f8      	ldr	r0, [r7, #12]
 8026f28:	f7ff fee2 	bl	8026cf0 <xQueueGenericCreateStatic>
 8026f2c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8026f2e:	69fb      	ldr	r3, [r7, #28]
 8026f30:	2b00      	cmp	r3, #0
 8026f32:	d002      	beq.n	8026f3a <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8026f34:	69fb      	ldr	r3, [r7, #28]
 8026f36:	68ba      	ldr	r2, [r7, #8]
 8026f38:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8026f3a:	69fb      	ldr	r3, [r7, #28]
	}
 8026f3c:	4618      	mov	r0, r3
 8026f3e:	3720      	adds	r7, #32
 8026f40:	46bd      	mov	sp, r7
 8026f42:	bd80      	pop	{r7, pc}

08026f44 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8026f44:	b580      	push	{r7, lr}
 8026f46:	b086      	sub	sp, #24
 8026f48:	af00      	add	r7, sp, #0
 8026f4a:	6078      	str	r0, [r7, #4]
 8026f4c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8026f4e:	687b      	ldr	r3, [r7, #4]
 8026f50:	2b00      	cmp	r3, #0
 8026f52:	d10d      	bne.n	8026f70 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 8026f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8026f58:	b672      	cpsid	i
 8026f5a:	f383 8811 	msr	BASEPRI, r3
 8026f5e:	f3bf 8f6f 	isb	sy
 8026f62:	f3bf 8f4f 	dsb	sy
 8026f66:	b662      	cpsie	i
 8026f68:	613b      	str	r3, [r7, #16]
}
 8026f6a:	bf00      	nop
 8026f6c:	bf00      	nop
 8026f6e:	e7fd      	b.n	8026f6c <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8026f70:	683a      	ldr	r2, [r7, #0]
 8026f72:	687b      	ldr	r3, [r7, #4]
 8026f74:	429a      	cmp	r2, r3
 8026f76:	d90d      	bls.n	8026f94 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 8026f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8026f7c:	b672      	cpsid	i
 8026f7e:	f383 8811 	msr	BASEPRI, r3
 8026f82:	f3bf 8f6f 	isb	sy
 8026f86:	f3bf 8f4f 	dsb	sy
 8026f8a:	b662      	cpsie	i
 8026f8c:	60fb      	str	r3, [r7, #12]
}
 8026f8e:	bf00      	nop
 8026f90:	bf00      	nop
 8026f92:	e7fd      	b.n	8026f90 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8026f94:	2202      	movs	r2, #2
 8026f96:	2100      	movs	r1, #0
 8026f98:	6878      	ldr	r0, [r7, #4]
 8026f9a:	f7ff ff30 	bl	8026dfe <xQueueGenericCreate>
 8026f9e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8026fa0:	697b      	ldr	r3, [r7, #20]
 8026fa2:	2b00      	cmp	r3, #0
 8026fa4:	d002      	beq.n	8026fac <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8026fa6:	697b      	ldr	r3, [r7, #20]
 8026fa8:	683a      	ldr	r2, [r7, #0]
 8026faa:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8026fac:	697b      	ldr	r3, [r7, #20]
	}
 8026fae:	4618      	mov	r0, r3
 8026fb0:	3718      	adds	r7, #24
 8026fb2:	46bd      	mov	sp, r7
 8026fb4:	bd80      	pop	{r7, pc}
	...

08026fb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8026fb8:	b580      	push	{r7, lr}
 8026fba:	b08e      	sub	sp, #56	@ 0x38
 8026fbc:	af00      	add	r7, sp, #0
 8026fbe:	60f8      	str	r0, [r7, #12]
 8026fc0:	60b9      	str	r1, [r7, #8]
 8026fc2:	607a      	str	r2, [r7, #4]
 8026fc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8026fc6:	2300      	movs	r3, #0
 8026fc8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8026fca:	68fb      	ldr	r3, [r7, #12]
 8026fcc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8026fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026fd0:	2b00      	cmp	r3, #0
 8026fd2:	d10d      	bne.n	8026ff0 <xQueueGenericSend+0x38>
	__asm volatile
 8026fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8026fd8:	b672      	cpsid	i
 8026fda:	f383 8811 	msr	BASEPRI, r3
 8026fde:	f3bf 8f6f 	isb	sy
 8026fe2:	f3bf 8f4f 	dsb	sy
 8026fe6:	b662      	cpsie	i
 8026fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8026fea:	bf00      	nop
 8026fec:	bf00      	nop
 8026fee:	e7fd      	b.n	8026fec <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8026ff0:	68bb      	ldr	r3, [r7, #8]
 8026ff2:	2b00      	cmp	r3, #0
 8026ff4:	d103      	bne.n	8026ffe <xQueueGenericSend+0x46>
 8026ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8026ffa:	2b00      	cmp	r3, #0
 8026ffc:	d101      	bne.n	8027002 <xQueueGenericSend+0x4a>
 8026ffe:	2301      	movs	r3, #1
 8027000:	e000      	b.n	8027004 <xQueueGenericSend+0x4c>
 8027002:	2300      	movs	r3, #0
 8027004:	2b00      	cmp	r3, #0
 8027006:	d10d      	bne.n	8027024 <xQueueGenericSend+0x6c>
	__asm volatile
 8027008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802700c:	b672      	cpsid	i
 802700e:	f383 8811 	msr	BASEPRI, r3
 8027012:	f3bf 8f6f 	isb	sy
 8027016:	f3bf 8f4f 	dsb	sy
 802701a:	b662      	cpsie	i
 802701c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 802701e:	bf00      	nop
 8027020:	bf00      	nop
 8027022:	e7fd      	b.n	8027020 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8027024:	683b      	ldr	r3, [r7, #0]
 8027026:	2b02      	cmp	r3, #2
 8027028:	d103      	bne.n	8027032 <xQueueGenericSend+0x7a>
 802702a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802702c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802702e:	2b01      	cmp	r3, #1
 8027030:	d101      	bne.n	8027036 <xQueueGenericSend+0x7e>
 8027032:	2301      	movs	r3, #1
 8027034:	e000      	b.n	8027038 <xQueueGenericSend+0x80>
 8027036:	2300      	movs	r3, #0
 8027038:	2b00      	cmp	r3, #0
 802703a:	d10d      	bne.n	8027058 <xQueueGenericSend+0xa0>
	__asm volatile
 802703c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027040:	b672      	cpsid	i
 8027042:	f383 8811 	msr	BASEPRI, r3
 8027046:	f3bf 8f6f 	isb	sy
 802704a:	f3bf 8f4f 	dsb	sy
 802704e:	b662      	cpsie	i
 8027050:	623b      	str	r3, [r7, #32]
}
 8027052:	bf00      	nop
 8027054:	bf00      	nop
 8027056:	e7fd      	b.n	8027054 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8027058:	f001 fcca 	bl	80289f0 <xTaskGetSchedulerState>
 802705c:	4603      	mov	r3, r0
 802705e:	2b00      	cmp	r3, #0
 8027060:	d102      	bne.n	8027068 <xQueueGenericSend+0xb0>
 8027062:	687b      	ldr	r3, [r7, #4]
 8027064:	2b00      	cmp	r3, #0
 8027066:	d101      	bne.n	802706c <xQueueGenericSend+0xb4>
 8027068:	2301      	movs	r3, #1
 802706a:	e000      	b.n	802706e <xQueueGenericSend+0xb6>
 802706c:	2300      	movs	r3, #0
 802706e:	2b00      	cmp	r3, #0
 8027070:	d10d      	bne.n	802708e <xQueueGenericSend+0xd6>
	__asm volatile
 8027072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027076:	b672      	cpsid	i
 8027078:	f383 8811 	msr	BASEPRI, r3
 802707c:	f3bf 8f6f 	isb	sy
 8027080:	f3bf 8f4f 	dsb	sy
 8027084:	b662      	cpsie	i
 8027086:	61fb      	str	r3, [r7, #28]
}
 8027088:	bf00      	nop
 802708a:	bf00      	nop
 802708c:	e7fd      	b.n	802708a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 802708e:	f002 fc25 	bl	80298dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8027092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027094:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8027096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802709a:	429a      	cmp	r2, r3
 802709c:	d302      	bcc.n	80270a4 <xQueueGenericSend+0xec>
 802709e:	683b      	ldr	r3, [r7, #0]
 80270a0:	2b02      	cmp	r3, #2
 80270a2:	d129      	bne.n	80270f8 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80270a4:	683a      	ldr	r2, [r7, #0]
 80270a6:	68b9      	ldr	r1, [r7, #8]
 80270a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80270aa:	f000 fc91 	bl	80279d0 <prvCopyDataToQueue>
 80270ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80270b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80270b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80270b4:	2b00      	cmp	r3, #0
 80270b6:	d010      	beq.n	80270da <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80270b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80270ba:	3324      	adds	r3, #36	@ 0x24
 80270bc:	4618      	mov	r0, r3
 80270be:	f001 fac9 	bl	8028654 <xTaskRemoveFromEventList>
 80270c2:	4603      	mov	r3, r0
 80270c4:	2b00      	cmp	r3, #0
 80270c6:	d013      	beq.n	80270f0 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80270c8:	4b3f      	ldr	r3, [pc, #252]	@ (80271c8 <xQueueGenericSend+0x210>)
 80270ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80270ce:	601a      	str	r2, [r3, #0]
 80270d0:	f3bf 8f4f 	dsb	sy
 80270d4:	f3bf 8f6f 	isb	sy
 80270d8:	e00a      	b.n	80270f0 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80270da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80270dc:	2b00      	cmp	r3, #0
 80270de:	d007      	beq.n	80270f0 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80270e0:	4b39      	ldr	r3, [pc, #228]	@ (80271c8 <xQueueGenericSend+0x210>)
 80270e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80270e6:	601a      	str	r2, [r3, #0]
 80270e8:	f3bf 8f4f 	dsb	sy
 80270ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80270f0:	f002 fc2a 	bl	8029948 <vPortExitCritical>
				return pdPASS;
 80270f4:	2301      	movs	r3, #1
 80270f6:	e063      	b.n	80271c0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80270f8:	687b      	ldr	r3, [r7, #4]
 80270fa:	2b00      	cmp	r3, #0
 80270fc:	d103      	bne.n	8027106 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80270fe:	f002 fc23 	bl	8029948 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8027102:	2300      	movs	r3, #0
 8027104:	e05c      	b.n	80271c0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8027106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027108:	2b00      	cmp	r3, #0
 802710a:	d106      	bne.n	802711a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802710c:	f107 0314 	add.w	r3, r7, #20
 8027110:	4618      	mov	r0, r3
 8027112:	f001 fb05 	bl	8028720 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8027116:	2301      	movs	r3, #1
 8027118:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 802711a:	f002 fc15 	bl	8029948 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802711e:	f001 f861 	bl	80281e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8027122:	f002 fbdb 	bl	80298dc <vPortEnterCritical>
 8027126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027128:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 802712c:	b25b      	sxtb	r3, r3
 802712e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8027132:	d103      	bne.n	802713c <xQueueGenericSend+0x184>
 8027134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027136:	2200      	movs	r2, #0
 8027138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 802713c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802713e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8027142:	b25b      	sxtb	r3, r3
 8027144:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8027148:	d103      	bne.n	8027152 <xQueueGenericSend+0x19a>
 802714a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802714c:	2200      	movs	r2, #0
 802714e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8027152:	f002 fbf9 	bl	8029948 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8027156:	1d3a      	adds	r2, r7, #4
 8027158:	f107 0314 	add.w	r3, r7, #20
 802715c:	4611      	mov	r1, r2
 802715e:	4618      	mov	r0, r3
 8027160:	f001 faf4 	bl	802874c <xTaskCheckForTimeOut>
 8027164:	4603      	mov	r3, r0
 8027166:	2b00      	cmp	r3, #0
 8027168:	d124      	bne.n	80271b4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 802716a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802716c:	f000 fd28 	bl	8027bc0 <prvIsQueueFull>
 8027170:	4603      	mov	r3, r0
 8027172:	2b00      	cmp	r3, #0
 8027174:	d018      	beq.n	80271a8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8027176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027178:	3310      	adds	r3, #16
 802717a:	687a      	ldr	r2, [r7, #4]
 802717c:	4611      	mov	r1, r2
 802717e:	4618      	mov	r0, r3
 8027180:	f001 fa12 	bl	80285a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8027184:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8027186:	f000 fcb3 	bl	8027af0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 802718a:	f001 f839 	bl	8028200 <xTaskResumeAll>
 802718e:	4603      	mov	r3, r0
 8027190:	2b00      	cmp	r3, #0
 8027192:	f47f af7c 	bne.w	802708e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8027196:	4b0c      	ldr	r3, [pc, #48]	@ (80271c8 <xQueueGenericSend+0x210>)
 8027198:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 802719c:	601a      	str	r2, [r3, #0]
 802719e:	f3bf 8f4f 	dsb	sy
 80271a2:	f3bf 8f6f 	isb	sy
 80271a6:	e772      	b.n	802708e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80271a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80271aa:	f000 fca1 	bl	8027af0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80271ae:	f001 f827 	bl	8028200 <xTaskResumeAll>
 80271b2:	e76c      	b.n	802708e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80271b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80271b6:	f000 fc9b 	bl	8027af0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80271ba:	f001 f821 	bl	8028200 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80271be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80271c0:	4618      	mov	r0, r3
 80271c2:	3738      	adds	r7, #56	@ 0x38
 80271c4:	46bd      	mov	sp, r7
 80271c6:	bd80      	pop	{r7, pc}
 80271c8:	e000ed04 	.word	0xe000ed04

080271cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80271cc:	b580      	push	{r7, lr}
 80271ce:	b08e      	sub	sp, #56	@ 0x38
 80271d0:	af00      	add	r7, sp, #0
 80271d2:	60f8      	str	r0, [r7, #12]
 80271d4:	60b9      	str	r1, [r7, #8]
 80271d6:	607a      	str	r2, [r7, #4]
 80271d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80271da:	68fb      	ldr	r3, [r7, #12]
 80271dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80271de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80271e0:	2b00      	cmp	r3, #0
 80271e2:	d10d      	bne.n	8027200 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80271e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80271e8:	b672      	cpsid	i
 80271ea:	f383 8811 	msr	BASEPRI, r3
 80271ee:	f3bf 8f6f 	isb	sy
 80271f2:	f3bf 8f4f 	dsb	sy
 80271f6:	b662      	cpsie	i
 80271f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80271fa:	bf00      	nop
 80271fc:	bf00      	nop
 80271fe:	e7fd      	b.n	80271fc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8027200:	68bb      	ldr	r3, [r7, #8]
 8027202:	2b00      	cmp	r3, #0
 8027204:	d103      	bne.n	802720e <xQueueGenericSendFromISR+0x42>
 8027206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802720a:	2b00      	cmp	r3, #0
 802720c:	d101      	bne.n	8027212 <xQueueGenericSendFromISR+0x46>
 802720e:	2301      	movs	r3, #1
 8027210:	e000      	b.n	8027214 <xQueueGenericSendFromISR+0x48>
 8027212:	2300      	movs	r3, #0
 8027214:	2b00      	cmp	r3, #0
 8027216:	d10d      	bne.n	8027234 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8027218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802721c:	b672      	cpsid	i
 802721e:	f383 8811 	msr	BASEPRI, r3
 8027222:	f3bf 8f6f 	isb	sy
 8027226:	f3bf 8f4f 	dsb	sy
 802722a:	b662      	cpsie	i
 802722c:	623b      	str	r3, [r7, #32]
}
 802722e:	bf00      	nop
 8027230:	bf00      	nop
 8027232:	e7fd      	b.n	8027230 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8027234:	683b      	ldr	r3, [r7, #0]
 8027236:	2b02      	cmp	r3, #2
 8027238:	d103      	bne.n	8027242 <xQueueGenericSendFromISR+0x76>
 802723a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802723c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802723e:	2b01      	cmp	r3, #1
 8027240:	d101      	bne.n	8027246 <xQueueGenericSendFromISR+0x7a>
 8027242:	2301      	movs	r3, #1
 8027244:	e000      	b.n	8027248 <xQueueGenericSendFromISR+0x7c>
 8027246:	2300      	movs	r3, #0
 8027248:	2b00      	cmp	r3, #0
 802724a:	d10d      	bne.n	8027268 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 802724c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027250:	b672      	cpsid	i
 8027252:	f383 8811 	msr	BASEPRI, r3
 8027256:	f3bf 8f6f 	isb	sy
 802725a:	f3bf 8f4f 	dsb	sy
 802725e:	b662      	cpsie	i
 8027260:	61fb      	str	r3, [r7, #28]
}
 8027262:	bf00      	nop
 8027264:	bf00      	nop
 8027266:	e7fd      	b.n	8027264 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8027268:	f002 fc20 	bl	8029aac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 802726c:	f3ef 8211 	mrs	r2, BASEPRI
 8027270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027274:	b672      	cpsid	i
 8027276:	f383 8811 	msr	BASEPRI, r3
 802727a:	f3bf 8f6f 	isb	sy
 802727e:	f3bf 8f4f 	dsb	sy
 8027282:	b662      	cpsie	i
 8027284:	61ba      	str	r2, [r7, #24]
 8027286:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8027288:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 802728a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 802728c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802728e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8027290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8027294:	429a      	cmp	r2, r3
 8027296:	d302      	bcc.n	802729e <xQueueGenericSendFromISR+0xd2>
 8027298:	683b      	ldr	r3, [r7, #0]
 802729a:	2b02      	cmp	r3, #2
 802729c:	d12c      	bne.n	80272f8 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 802729e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80272a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80272a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80272a8:	683a      	ldr	r2, [r7, #0]
 80272aa:	68b9      	ldr	r1, [r7, #8]
 80272ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80272ae:	f000 fb8f 	bl	80279d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80272b2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80272b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80272ba:	d112      	bne.n	80272e2 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80272bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80272be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80272c0:	2b00      	cmp	r3, #0
 80272c2:	d016      	beq.n	80272f2 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80272c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80272c6:	3324      	adds	r3, #36	@ 0x24
 80272c8:	4618      	mov	r0, r3
 80272ca:	f001 f9c3 	bl	8028654 <xTaskRemoveFromEventList>
 80272ce:	4603      	mov	r3, r0
 80272d0:	2b00      	cmp	r3, #0
 80272d2:	d00e      	beq.n	80272f2 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80272d4:	687b      	ldr	r3, [r7, #4]
 80272d6:	2b00      	cmp	r3, #0
 80272d8:	d00b      	beq.n	80272f2 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80272da:	687b      	ldr	r3, [r7, #4]
 80272dc:	2201      	movs	r2, #1
 80272de:	601a      	str	r2, [r3, #0]
 80272e0:	e007      	b.n	80272f2 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80272e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80272e6:	3301      	adds	r3, #1
 80272e8:	b2db      	uxtb	r3, r3
 80272ea:	b25a      	sxtb	r2, r3
 80272ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80272ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80272f2:	2301      	movs	r3, #1
 80272f4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80272f6:	e001      	b.n	80272fc <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80272f8:	2300      	movs	r3, #0
 80272fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80272fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80272fe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8027300:	693b      	ldr	r3, [r7, #16]
 8027302:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8027306:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8027308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 802730a:	4618      	mov	r0, r3
 802730c:	3738      	adds	r7, #56	@ 0x38
 802730e:	46bd      	mov	sp, r7
 8027310:	bd80      	pop	{r7, pc}

08027312 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8027312:	b580      	push	{r7, lr}
 8027314:	b08e      	sub	sp, #56	@ 0x38
 8027316:	af00      	add	r7, sp, #0
 8027318:	6078      	str	r0, [r7, #4]
 802731a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 802731c:	687b      	ldr	r3, [r7, #4]
 802731e:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8027320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027322:	2b00      	cmp	r3, #0
 8027324:	d10d      	bne.n	8027342 <xQueueGiveFromISR+0x30>
	__asm volatile
 8027326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802732a:	b672      	cpsid	i
 802732c:	f383 8811 	msr	BASEPRI, r3
 8027330:	f3bf 8f6f 	isb	sy
 8027334:	f3bf 8f4f 	dsb	sy
 8027338:	b662      	cpsie	i
 802733a:	623b      	str	r3, [r7, #32]
}
 802733c:	bf00      	nop
 802733e:	bf00      	nop
 8027340:	e7fd      	b.n	802733e <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8027342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027346:	2b00      	cmp	r3, #0
 8027348:	d00d      	beq.n	8027366 <xQueueGiveFromISR+0x54>
	__asm volatile
 802734a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802734e:	b672      	cpsid	i
 8027350:	f383 8811 	msr	BASEPRI, r3
 8027354:	f3bf 8f6f 	isb	sy
 8027358:	f3bf 8f4f 	dsb	sy
 802735c:	b662      	cpsie	i
 802735e:	61fb      	str	r3, [r7, #28]
}
 8027360:	bf00      	nop
 8027362:	bf00      	nop
 8027364:	e7fd      	b.n	8027362 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8027366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027368:	681b      	ldr	r3, [r3, #0]
 802736a:	2b00      	cmp	r3, #0
 802736c:	d103      	bne.n	8027376 <xQueueGiveFromISR+0x64>
 802736e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027370:	689b      	ldr	r3, [r3, #8]
 8027372:	2b00      	cmp	r3, #0
 8027374:	d101      	bne.n	802737a <xQueueGiveFromISR+0x68>
 8027376:	2301      	movs	r3, #1
 8027378:	e000      	b.n	802737c <xQueueGiveFromISR+0x6a>
 802737a:	2300      	movs	r3, #0
 802737c:	2b00      	cmp	r3, #0
 802737e:	d10d      	bne.n	802739c <xQueueGiveFromISR+0x8a>
	__asm volatile
 8027380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027384:	b672      	cpsid	i
 8027386:	f383 8811 	msr	BASEPRI, r3
 802738a:	f3bf 8f6f 	isb	sy
 802738e:	f3bf 8f4f 	dsb	sy
 8027392:	b662      	cpsie	i
 8027394:	61bb      	str	r3, [r7, #24]
}
 8027396:	bf00      	nop
 8027398:	bf00      	nop
 802739a:	e7fd      	b.n	8027398 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 802739c:	f002 fb86 	bl	8029aac <vPortValidateInterruptPriority>
	__asm volatile
 80273a0:	f3ef 8211 	mrs	r2, BASEPRI
 80273a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80273a8:	b672      	cpsid	i
 80273aa:	f383 8811 	msr	BASEPRI, r3
 80273ae:	f3bf 8f6f 	isb	sy
 80273b2:	f3bf 8f4f 	dsb	sy
 80273b6:	b662      	cpsie	i
 80273b8:	617a      	str	r2, [r7, #20]
 80273ba:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80273bc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80273be:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80273c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80273c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80273c4:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80273c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80273c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80273ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80273cc:	429a      	cmp	r2, r3
 80273ce:	d22b      	bcs.n	8027428 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80273d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80273d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80273d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80273da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80273dc:	1c5a      	adds	r2, r3, #1
 80273de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80273e0:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80273e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80273e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80273ea:	d112      	bne.n	8027412 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80273ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80273ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80273f0:	2b00      	cmp	r3, #0
 80273f2:	d016      	beq.n	8027422 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80273f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80273f6:	3324      	adds	r3, #36	@ 0x24
 80273f8:	4618      	mov	r0, r3
 80273fa:	f001 f92b 	bl	8028654 <xTaskRemoveFromEventList>
 80273fe:	4603      	mov	r3, r0
 8027400:	2b00      	cmp	r3, #0
 8027402:	d00e      	beq.n	8027422 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8027404:	683b      	ldr	r3, [r7, #0]
 8027406:	2b00      	cmp	r3, #0
 8027408:	d00b      	beq.n	8027422 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 802740a:	683b      	ldr	r3, [r7, #0]
 802740c:	2201      	movs	r2, #1
 802740e:	601a      	str	r2, [r3, #0]
 8027410:	e007      	b.n	8027422 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8027412:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8027416:	3301      	adds	r3, #1
 8027418:	b2db      	uxtb	r3, r3
 802741a:	b25a      	sxtb	r2, r3
 802741c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802741e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8027422:	2301      	movs	r3, #1
 8027424:	637b      	str	r3, [r7, #52]	@ 0x34
 8027426:	e001      	b.n	802742c <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8027428:	2300      	movs	r3, #0
 802742a:	637b      	str	r3, [r7, #52]	@ 0x34
 802742c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802742e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8027430:	68fb      	ldr	r3, [r7, #12]
 8027432:	f383 8811 	msr	BASEPRI, r3
}
 8027436:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8027438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 802743a:	4618      	mov	r0, r3
 802743c:	3738      	adds	r7, #56	@ 0x38
 802743e:	46bd      	mov	sp, r7
 8027440:	bd80      	pop	{r7, pc}
	...

08027444 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8027444:	b580      	push	{r7, lr}
 8027446:	b08c      	sub	sp, #48	@ 0x30
 8027448:	af00      	add	r7, sp, #0
 802744a:	60f8      	str	r0, [r7, #12]
 802744c:	60b9      	str	r1, [r7, #8]
 802744e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8027450:	2300      	movs	r3, #0
 8027452:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8027454:	68fb      	ldr	r3, [r7, #12]
 8027456:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8027458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802745a:	2b00      	cmp	r3, #0
 802745c:	d10d      	bne.n	802747a <xQueueReceive+0x36>
	__asm volatile
 802745e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027462:	b672      	cpsid	i
 8027464:	f383 8811 	msr	BASEPRI, r3
 8027468:	f3bf 8f6f 	isb	sy
 802746c:	f3bf 8f4f 	dsb	sy
 8027470:	b662      	cpsie	i
 8027472:	623b      	str	r3, [r7, #32]
}
 8027474:	bf00      	nop
 8027476:	bf00      	nop
 8027478:	e7fd      	b.n	8027476 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802747a:	68bb      	ldr	r3, [r7, #8]
 802747c:	2b00      	cmp	r3, #0
 802747e:	d103      	bne.n	8027488 <xQueueReceive+0x44>
 8027480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027484:	2b00      	cmp	r3, #0
 8027486:	d101      	bne.n	802748c <xQueueReceive+0x48>
 8027488:	2301      	movs	r3, #1
 802748a:	e000      	b.n	802748e <xQueueReceive+0x4a>
 802748c:	2300      	movs	r3, #0
 802748e:	2b00      	cmp	r3, #0
 8027490:	d10d      	bne.n	80274ae <xQueueReceive+0x6a>
	__asm volatile
 8027492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027496:	b672      	cpsid	i
 8027498:	f383 8811 	msr	BASEPRI, r3
 802749c:	f3bf 8f6f 	isb	sy
 80274a0:	f3bf 8f4f 	dsb	sy
 80274a4:	b662      	cpsie	i
 80274a6:	61fb      	str	r3, [r7, #28]
}
 80274a8:	bf00      	nop
 80274aa:	bf00      	nop
 80274ac:	e7fd      	b.n	80274aa <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80274ae:	f001 fa9f 	bl	80289f0 <xTaskGetSchedulerState>
 80274b2:	4603      	mov	r3, r0
 80274b4:	2b00      	cmp	r3, #0
 80274b6:	d102      	bne.n	80274be <xQueueReceive+0x7a>
 80274b8:	687b      	ldr	r3, [r7, #4]
 80274ba:	2b00      	cmp	r3, #0
 80274bc:	d101      	bne.n	80274c2 <xQueueReceive+0x7e>
 80274be:	2301      	movs	r3, #1
 80274c0:	e000      	b.n	80274c4 <xQueueReceive+0x80>
 80274c2:	2300      	movs	r3, #0
 80274c4:	2b00      	cmp	r3, #0
 80274c6:	d10d      	bne.n	80274e4 <xQueueReceive+0xa0>
	__asm volatile
 80274c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80274cc:	b672      	cpsid	i
 80274ce:	f383 8811 	msr	BASEPRI, r3
 80274d2:	f3bf 8f6f 	isb	sy
 80274d6:	f3bf 8f4f 	dsb	sy
 80274da:	b662      	cpsie	i
 80274dc:	61bb      	str	r3, [r7, #24]
}
 80274de:	bf00      	nop
 80274e0:	bf00      	nop
 80274e2:	e7fd      	b.n	80274e0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80274e4:	f002 f9fa 	bl	80298dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80274e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80274ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80274ec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80274ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80274f0:	2b00      	cmp	r3, #0
 80274f2:	d01f      	beq.n	8027534 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80274f4:	68b9      	ldr	r1, [r7, #8]
 80274f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80274f8:	f000 fad4 	bl	8027aa4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80274fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80274fe:	1e5a      	subs	r2, r3, #1
 8027500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027502:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8027504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027506:	691b      	ldr	r3, [r3, #16]
 8027508:	2b00      	cmp	r3, #0
 802750a:	d00f      	beq.n	802752c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802750c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802750e:	3310      	adds	r3, #16
 8027510:	4618      	mov	r0, r3
 8027512:	f001 f89f 	bl	8028654 <xTaskRemoveFromEventList>
 8027516:	4603      	mov	r3, r0
 8027518:	2b00      	cmp	r3, #0
 802751a:	d007      	beq.n	802752c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 802751c:	4b3c      	ldr	r3, [pc, #240]	@ (8027610 <xQueueReceive+0x1cc>)
 802751e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8027522:	601a      	str	r2, [r3, #0]
 8027524:	f3bf 8f4f 	dsb	sy
 8027528:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 802752c:	f002 fa0c 	bl	8029948 <vPortExitCritical>
				return pdPASS;
 8027530:	2301      	movs	r3, #1
 8027532:	e069      	b.n	8027608 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8027534:	687b      	ldr	r3, [r7, #4]
 8027536:	2b00      	cmp	r3, #0
 8027538:	d103      	bne.n	8027542 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 802753a:	f002 fa05 	bl	8029948 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 802753e:	2300      	movs	r3, #0
 8027540:	e062      	b.n	8027608 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8027542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027544:	2b00      	cmp	r3, #0
 8027546:	d106      	bne.n	8027556 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8027548:	f107 0310 	add.w	r3, r7, #16
 802754c:	4618      	mov	r0, r3
 802754e:	f001 f8e7 	bl	8028720 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8027552:	2301      	movs	r3, #1
 8027554:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8027556:	f002 f9f7 	bl	8029948 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802755a:	f000 fe43 	bl	80281e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802755e:	f002 f9bd 	bl	80298dc <vPortEnterCritical>
 8027562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027564:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8027568:	b25b      	sxtb	r3, r3
 802756a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802756e:	d103      	bne.n	8027578 <xQueueReceive+0x134>
 8027570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027572:	2200      	movs	r2, #0
 8027574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8027578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802757a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 802757e:	b25b      	sxtb	r3, r3
 8027580:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8027584:	d103      	bne.n	802758e <xQueueReceive+0x14a>
 8027586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027588:	2200      	movs	r2, #0
 802758a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 802758e:	f002 f9db 	bl	8029948 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8027592:	1d3a      	adds	r2, r7, #4
 8027594:	f107 0310 	add.w	r3, r7, #16
 8027598:	4611      	mov	r1, r2
 802759a:	4618      	mov	r0, r3
 802759c:	f001 f8d6 	bl	802874c <xTaskCheckForTimeOut>
 80275a0:	4603      	mov	r3, r0
 80275a2:	2b00      	cmp	r3, #0
 80275a4:	d123      	bne.n	80275ee <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80275a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80275a8:	f000 faf4 	bl	8027b94 <prvIsQueueEmpty>
 80275ac:	4603      	mov	r3, r0
 80275ae:	2b00      	cmp	r3, #0
 80275b0:	d017      	beq.n	80275e2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80275b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80275b4:	3324      	adds	r3, #36	@ 0x24
 80275b6:	687a      	ldr	r2, [r7, #4]
 80275b8:	4611      	mov	r1, r2
 80275ba:	4618      	mov	r0, r3
 80275bc:	f000 fff4 	bl	80285a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80275c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80275c2:	f000 fa95 	bl	8027af0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80275c6:	f000 fe1b 	bl	8028200 <xTaskResumeAll>
 80275ca:	4603      	mov	r3, r0
 80275cc:	2b00      	cmp	r3, #0
 80275ce:	d189      	bne.n	80274e4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80275d0:	4b0f      	ldr	r3, [pc, #60]	@ (8027610 <xQueueReceive+0x1cc>)
 80275d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80275d6:	601a      	str	r2, [r3, #0]
 80275d8:	f3bf 8f4f 	dsb	sy
 80275dc:	f3bf 8f6f 	isb	sy
 80275e0:	e780      	b.n	80274e4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80275e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80275e4:	f000 fa84 	bl	8027af0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80275e8:	f000 fe0a 	bl	8028200 <xTaskResumeAll>
 80275ec:	e77a      	b.n	80274e4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80275ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80275f0:	f000 fa7e 	bl	8027af0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80275f4:	f000 fe04 	bl	8028200 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80275f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80275fa:	f000 facb 	bl	8027b94 <prvIsQueueEmpty>
 80275fe:	4603      	mov	r3, r0
 8027600:	2b00      	cmp	r3, #0
 8027602:	f43f af6f 	beq.w	80274e4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8027606:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8027608:	4618      	mov	r0, r3
 802760a:	3730      	adds	r7, #48	@ 0x30
 802760c:	46bd      	mov	sp, r7
 802760e:	bd80      	pop	{r7, pc}
 8027610:	e000ed04 	.word	0xe000ed04

08027614 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8027614:	b580      	push	{r7, lr}
 8027616:	b08e      	sub	sp, #56	@ 0x38
 8027618:	af00      	add	r7, sp, #0
 802761a:	6078      	str	r0, [r7, #4]
 802761c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 802761e:	2300      	movs	r3, #0
 8027620:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8027622:	687b      	ldr	r3, [r7, #4]
 8027624:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8027626:	2300      	movs	r3, #0
 8027628:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 802762a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802762c:	2b00      	cmp	r3, #0
 802762e:	d10d      	bne.n	802764c <xQueueSemaphoreTake+0x38>
	__asm volatile
 8027630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027634:	b672      	cpsid	i
 8027636:	f383 8811 	msr	BASEPRI, r3
 802763a:	f3bf 8f6f 	isb	sy
 802763e:	f3bf 8f4f 	dsb	sy
 8027642:	b662      	cpsie	i
 8027644:	623b      	str	r3, [r7, #32]
}
 8027646:	bf00      	nop
 8027648:	bf00      	nop
 802764a:	e7fd      	b.n	8027648 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 802764c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802764e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027650:	2b00      	cmp	r3, #0
 8027652:	d00d      	beq.n	8027670 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8027654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027658:	b672      	cpsid	i
 802765a:	f383 8811 	msr	BASEPRI, r3
 802765e:	f3bf 8f6f 	isb	sy
 8027662:	f3bf 8f4f 	dsb	sy
 8027666:	b662      	cpsie	i
 8027668:	61fb      	str	r3, [r7, #28]
}
 802766a:	bf00      	nop
 802766c:	bf00      	nop
 802766e:	e7fd      	b.n	802766c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8027670:	f001 f9be 	bl	80289f0 <xTaskGetSchedulerState>
 8027674:	4603      	mov	r3, r0
 8027676:	2b00      	cmp	r3, #0
 8027678:	d102      	bne.n	8027680 <xQueueSemaphoreTake+0x6c>
 802767a:	683b      	ldr	r3, [r7, #0]
 802767c:	2b00      	cmp	r3, #0
 802767e:	d101      	bne.n	8027684 <xQueueSemaphoreTake+0x70>
 8027680:	2301      	movs	r3, #1
 8027682:	e000      	b.n	8027686 <xQueueSemaphoreTake+0x72>
 8027684:	2300      	movs	r3, #0
 8027686:	2b00      	cmp	r3, #0
 8027688:	d10d      	bne.n	80276a6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 802768a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802768e:	b672      	cpsid	i
 8027690:	f383 8811 	msr	BASEPRI, r3
 8027694:	f3bf 8f6f 	isb	sy
 8027698:	f3bf 8f4f 	dsb	sy
 802769c:	b662      	cpsie	i
 802769e:	61bb      	str	r3, [r7, #24]
}
 80276a0:	bf00      	nop
 80276a2:	bf00      	nop
 80276a4:	e7fd      	b.n	80276a2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80276a6:	f002 f919 	bl	80298dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80276aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80276ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80276ae:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80276b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80276b2:	2b00      	cmp	r3, #0
 80276b4:	d024      	beq.n	8027700 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80276b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80276b8:	1e5a      	subs	r2, r3, #1
 80276ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80276bc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80276be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80276c0:	681b      	ldr	r3, [r3, #0]
 80276c2:	2b00      	cmp	r3, #0
 80276c4:	d104      	bne.n	80276d0 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80276c6:	f001 fb15 	bl	8028cf4 <pvTaskIncrementMutexHeldCount>
 80276ca:	4602      	mov	r2, r0
 80276cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80276ce:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80276d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80276d2:	691b      	ldr	r3, [r3, #16]
 80276d4:	2b00      	cmp	r3, #0
 80276d6:	d00f      	beq.n	80276f8 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80276d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80276da:	3310      	adds	r3, #16
 80276dc:	4618      	mov	r0, r3
 80276de:	f000 ffb9 	bl	8028654 <xTaskRemoveFromEventList>
 80276e2:	4603      	mov	r3, r0
 80276e4:	2b00      	cmp	r3, #0
 80276e6:	d007      	beq.n	80276f8 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80276e8:	4b55      	ldr	r3, [pc, #340]	@ (8027840 <xQueueSemaphoreTake+0x22c>)
 80276ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80276ee:	601a      	str	r2, [r3, #0]
 80276f0:	f3bf 8f4f 	dsb	sy
 80276f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80276f8:	f002 f926 	bl	8029948 <vPortExitCritical>
				return pdPASS;
 80276fc:	2301      	movs	r3, #1
 80276fe:	e09a      	b.n	8027836 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8027700:	683b      	ldr	r3, [r7, #0]
 8027702:	2b00      	cmp	r3, #0
 8027704:	d114      	bne.n	8027730 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8027706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027708:	2b00      	cmp	r3, #0
 802770a:	d00d      	beq.n	8027728 <xQueueSemaphoreTake+0x114>
	__asm volatile
 802770c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027710:	b672      	cpsid	i
 8027712:	f383 8811 	msr	BASEPRI, r3
 8027716:	f3bf 8f6f 	isb	sy
 802771a:	f3bf 8f4f 	dsb	sy
 802771e:	b662      	cpsie	i
 8027720:	617b      	str	r3, [r7, #20]
}
 8027722:	bf00      	nop
 8027724:	bf00      	nop
 8027726:	e7fd      	b.n	8027724 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8027728:	f002 f90e 	bl	8029948 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 802772c:	2300      	movs	r3, #0
 802772e:	e082      	b.n	8027836 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8027730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027732:	2b00      	cmp	r3, #0
 8027734:	d106      	bne.n	8027744 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8027736:	f107 030c 	add.w	r3, r7, #12
 802773a:	4618      	mov	r0, r3
 802773c:	f000 fff0 	bl	8028720 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8027740:	2301      	movs	r3, #1
 8027742:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8027744:	f002 f900 	bl	8029948 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8027748:	f000 fd4c 	bl	80281e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802774c:	f002 f8c6 	bl	80298dc <vPortEnterCritical>
 8027750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027752:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8027756:	b25b      	sxtb	r3, r3
 8027758:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802775c:	d103      	bne.n	8027766 <xQueueSemaphoreTake+0x152>
 802775e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027760:	2200      	movs	r2, #0
 8027762:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8027766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027768:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 802776c:	b25b      	sxtb	r3, r3
 802776e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8027772:	d103      	bne.n	802777c <xQueueSemaphoreTake+0x168>
 8027774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027776:	2200      	movs	r2, #0
 8027778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 802777c:	f002 f8e4 	bl	8029948 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8027780:	463a      	mov	r2, r7
 8027782:	f107 030c 	add.w	r3, r7, #12
 8027786:	4611      	mov	r1, r2
 8027788:	4618      	mov	r0, r3
 802778a:	f000 ffdf 	bl	802874c <xTaskCheckForTimeOut>
 802778e:	4603      	mov	r3, r0
 8027790:	2b00      	cmp	r3, #0
 8027792:	d132      	bne.n	80277fa <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8027794:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8027796:	f000 f9fd 	bl	8027b94 <prvIsQueueEmpty>
 802779a:	4603      	mov	r3, r0
 802779c:	2b00      	cmp	r3, #0
 802779e:	d026      	beq.n	80277ee <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80277a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80277a2:	681b      	ldr	r3, [r3, #0]
 80277a4:	2b00      	cmp	r3, #0
 80277a6:	d109      	bne.n	80277bc <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80277a8:	f002 f898 	bl	80298dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80277ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80277ae:	689b      	ldr	r3, [r3, #8]
 80277b0:	4618      	mov	r0, r3
 80277b2:	f001 f93b 	bl	8028a2c <xTaskPriorityInherit>
 80277b6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80277b8:	f002 f8c6 	bl	8029948 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80277bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80277be:	3324      	adds	r3, #36	@ 0x24
 80277c0:	683a      	ldr	r2, [r7, #0]
 80277c2:	4611      	mov	r1, r2
 80277c4:	4618      	mov	r0, r3
 80277c6:	f000 feef 	bl	80285a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80277ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80277cc:	f000 f990 	bl	8027af0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80277d0:	f000 fd16 	bl	8028200 <xTaskResumeAll>
 80277d4:	4603      	mov	r3, r0
 80277d6:	2b00      	cmp	r3, #0
 80277d8:	f47f af65 	bne.w	80276a6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80277dc:	4b18      	ldr	r3, [pc, #96]	@ (8027840 <xQueueSemaphoreTake+0x22c>)
 80277de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80277e2:	601a      	str	r2, [r3, #0]
 80277e4:	f3bf 8f4f 	dsb	sy
 80277e8:	f3bf 8f6f 	isb	sy
 80277ec:	e75b      	b.n	80276a6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80277ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80277f0:	f000 f97e 	bl	8027af0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80277f4:	f000 fd04 	bl	8028200 <xTaskResumeAll>
 80277f8:	e755      	b.n	80276a6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80277fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80277fc:	f000 f978 	bl	8027af0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8027800:	f000 fcfe 	bl	8028200 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8027804:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8027806:	f000 f9c5 	bl	8027b94 <prvIsQueueEmpty>
 802780a:	4603      	mov	r3, r0
 802780c:	2b00      	cmp	r3, #0
 802780e:	f43f af4a 	beq.w	80276a6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8027812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027814:	2b00      	cmp	r3, #0
 8027816:	d00d      	beq.n	8027834 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8027818:	f002 f860 	bl	80298dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 802781c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 802781e:	f000 f8bf 	bl	80279a0 <prvGetDisinheritPriorityAfterTimeout>
 8027822:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8027824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027826:	689b      	ldr	r3, [r3, #8]
 8027828:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 802782a:	4618      	mov	r0, r3
 802782c:	f001 f9da 	bl	8028be4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8027830:	f002 f88a 	bl	8029948 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8027834:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8027836:	4618      	mov	r0, r3
 8027838:	3738      	adds	r7, #56	@ 0x38
 802783a:	46bd      	mov	sp, r7
 802783c:	bd80      	pop	{r7, pc}
 802783e:	bf00      	nop
 8027840:	e000ed04 	.word	0xe000ed04

08027844 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8027844:	b580      	push	{r7, lr}
 8027846:	b08e      	sub	sp, #56	@ 0x38
 8027848:	af00      	add	r7, sp, #0
 802784a:	60f8      	str	r0, [r7, #12]
 802784c:	60b9      	str	r1, [r7, #8]
 802784e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8027850:	68fb      	ldr	r3, [r7, #12]
 8027852:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8027854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027856:	2b00      	cmp	r3, #0
 8027858:	d10d      	bne.n	8027876 <xQueueReceiveFromISR+0x32>
	__asm volatile
 802785a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802785e:	b672      	cpsid	i
 8027860:	f383 8811 	msr	BASEPRI, r3
 8027864:	f3bf 8f6f 	isb	sy
 8027868:	f3bf 8f4f 	dsb	sy
 802786c:	b662      	cpsie	i
 802786e:	623b      	str	r3, [r7, #32]
}
 8027870:	bf00      	nop
 8027872:	bf00      	nop
 8027874:	e7fd      	b.n	8027872 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8027876:	68bb      	ldr	r3, [r7, #8]
 8027878:	2b00      	cmp	r3, #0
 802787a:	d103      	bne.n	8027884 <xQueueReceiveFromISR+0x40>
 802787c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802787e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027880:	2b00      	cmp	r3, #0
 8027882:	d101      	bne.n	8027888 <xQueueReceiveFromISR+0x44>
 8027884:	2301      	movs	r3, #1
 8027886:	e000      	b.n	802788a <xQueueReceiveFromISR+0x46>
 8027888:	2300      	movs	r3, #0
 802788a:	2b00      	cmp	r3, #0
 802788c:	d10d      	bne.n	80278aa <xQueueReceiveFromISR+0x66>
	__asm volatile
 802788e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027892:	b672      	cpsid	i
 8027894:	f383 8811 	msr	BASEPRI, r3
 8027898:	f3bf 8f6f 	isb	sy
 802789c:	f3bf 8f4f 	dsb	sy
 80278a0:	b662      	cpsie	i
 80278a2:	61fb      	str	r3, [r7, #28]
}
 80278a4:	bf00      	nop
 80278a6:	bf00      	nop
 80278a8:	e7fd      	b.n	80278a6 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80278aa:	f002 f8ff 	bl	8029aac <vPortValidateInterruptPriority>
	__asm volatile
 80278ae:	f3ef 8211 	mrs	r2, BASEPRI
 80278b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80278b6:	b672      	cpsid	i
 80278b8:	f383 8811 	msr	BASEPRI, r3
 80278bc:	f3bf 8f6f 	isb	sy
 80278c0:	f3bf 8f4f 	dsb	sy
 80278c4:	b662      	cpsie	i
 80278c6:	61ba      	str	r2, [r7, #24]
 80278c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80278ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80278cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80278ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80278d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80278d2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80278d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80278d6:	2b00      	cmp	r3, #0
 80278d8:	d02f      	beq.n	802793a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80278da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80278dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80278e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80278e4:	68b9      	ldr	r1, [r7, #8]
 80278e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80278e8:	f000 f8dc 	bl	8027aa4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80278ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80278ee:	1e5a      	subs	r2, r3, #1
 80278f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80278f2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80278f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80278f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80278fc:	d112      	bne.n	8027924 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80278fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027900:	691b      	ldr	r3, [r3, #16]
 8027902:	2b00      	cmp	r3, #0
 8027904:	d016      	beq.n	8027934 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8027906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027908:	3310      	adds	r3, #16
 802790a:	4618      	mov	r0, r3
 802790c:	f000 fea2 	bl	8028654 <xTaskRemoveFromEventList>
 8027910:	4603      	mov	r3, r0
 8027912:	2b00      	cmp	r3, #0
 8027914:	d00e      	beq.n	8027934 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8027916:	687b      	ldr	r3, [r7, #4]
 8027918:	2b00      	cmp	r3, #0
 802791a:	d00b      	beq.n	8027934 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 802791c:	687b      	ldr	r3, [r7, #4]
 802791e:	2201      	movs	r2, #1
 8027920:	601a      	str	r2, [r3, #0]
 8027922:	e007      	b.n	8027934 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8027924:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8027928:	3301      	adds	r3, #1
 802792a:	b2db      	uxtb	r3, r3
 802792c:	b25a      	sxtb	r2, r3
 802792e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8027934:	2301      	movs	r3, #1
 8027936:	637b      	str	r3, [r7, #52]	@ 0x34
 8027938:	e001      	b.n	802793e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 802793a:	2300      	movs	r3, #0
 802793c:	637b      	str	r3, [r7, #52]	@ 0x34
 802793e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027940:	613b      	str	r3, [r7, #16]
	__asm volatile
 8027942:	693b      	ldr	r3, [r7, #16]
 8027944:	f383 8811 	msr	BASEPRI, r3
}
 8027948:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 802794a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 802794c:	4618      	mov	r0, r3
 802794e:	3738      	adds	r7, #56	@ 0x38
 8027950:	46bd      	mov	sp, r7
 8027952:	bd80      	pop	{r7, pc}

08027954 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8027954:	b580      	push	{r7, lr}
 8027956:	b084      	sub	sp, #16
 8027958:	af00      	add	r7, sp, #0
 802795a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 802795c:	687b      	ldr	r3, [r7, #4]
 802795e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8027960:	68fb      	ldr	r3, [r7, #12]
 8027962:	2b00      	cmp	r3, #0
 8027964:	d10d      	bne.n	8027982 <vQueueDelete+0x2e>
	__asm volatile
 8027966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802796a:	b672      	cpsid	i
 802796c:	f383 8811 	msr	BASEPRI, r3
 8027970:	f3bf 8f6f 	isb	sy
 8027974:	f3bf 8f4f 	dsb	sy
 8027978:	b662      	cpsie	i
 802797a:	60bb      	str	r3, [r7, #8]
}
 802797c:	bf00      	nop
 802797e:	bf00      	nop
 8027980:	e7fd      	b.n	802797e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8027982:	68f8      	ldr	r0, [r7, #12]
 8027984:	f000 f95e 	bl	8027c44 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8027988:	68fb      	ldr	r3, [r7, #12]
 802798a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 802798e:	2b00      	cmp	r3, #0
 8027990:	d102      	bne.n	8027998 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8027992:	68f8      	ldr	r0, [r7, #12]
 8027994:	f002 f99e 	bl	8029cd4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8027998:	bf00      	nop
 802799a:	3710      	adds	r7, #16
 802799c:	46bd      	mov	sp, r7
 802799e:	bd80      	pop	{r7, pc}

080279a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80279a0:	b480      	push	{r7}
 80279a2:	b085      	sub	sp, #20
 80279a4:	af00      	add	r7, sp, #0
 80279a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80279a8:	687b      	ldr	r3, [r7, #4]
 80279aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80279ac:	2b00      	cmp	r3, #0
 80279ae:	d006      	beq.n	80279be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80279b0:	687b      	ldr	r3, [r7, #4]
 80279b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80279b4:	681b      	ldr	r3, [r3, #0]
 80279b6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80279ba:	60fb      	str	r3, [r7, #12]
 80279bc:	e001      	b.n	80279c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80279be:	2300      	movs	r3, #0
 80279c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80279c2:	68fb      	ldr	r3, [r7, #12]
	}
 80279c4:	4618      	mov	r0, r3
 80279c6:	3714      	adds	r7, #20
 80279c8:	46bd      	mov	sp, r7
 80279ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80279ce:	4770      	bx	lr

080279d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80279d0:	b580      	push	{r7, lr}
 80279d2:	b086      	sub	sp, #24
 80279d4:	af00      	add	r7, sp, #0
 80279d6:	60f8      	str	r0, [r7, #12]
 80279d8:	60b9      	str	r1, [r7, #8]
 80279da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80279dc:	2300      	movs	r3, #0
 80279de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80279e0:	68fb      	ldr	r3, [r7, #12]
 80279e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80279e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80279e6:	68fb      	ldr	r3, [r7, #12]
 80279e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80279ea:	2b00      	cmp	r3, #0
 80279ec:	d10d      	bne.n	8027a0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80279ee:	68fb      	ldr	r3, [r7, #12]
 80279f0:	681b      	ldr	r3, [r3, #0]
 80279f2:	2b00      	cmp	r3, #0
 80279f4:	d14d      	bne.n	8027a92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80279f6:	68fb      	ldr	r3, [r7, #12]
 80279f8:	689b      	ldr	r3, [r3, #8]
 80279fa:	4618      	mov	r0, r3
 80279fc:	f001 f87e 	bl	8028afc <xTaskPriorityDisinherit>
 8027a00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8027a02:	68fb      	ldr	r3, [r7, #12]
 8027a04:	2200      	movs	r2, #0
 8027a06:	609a      	str	r2, [r3, #8]
 8027a08:	e043      	b.n	8027a92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8027a0a:	687b      	ldr	r3, [r7, #4]
 8027a0c:	2b00      	cmp	r3, #0
 8027a0e:	d119      	bne.n	8027a44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8027a10:	68fb      	ldr	r3, [r7, #12]
 8027a12:	6858      	ldr	r0, [r3, #4]
 8027a14:	68fb      	ldr	r3, [r7, #12]
 8027a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027a18:	461a      	mov	r2, r3
 8027a1a:	68b9      	ldr	r1, [r7, #8]
 8027a1c:	f004 fdab 	bl	802c576 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8027a20:	68fb      	ldr	r3, [r7, #12]
 8027a22:	685a      	ldr	r2, [r3, #4]
 8027a24:	68fb      	ldr	r3, [r7, #12]
 8027a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027a28:	441a      	add	r2, r3
 8027a2a:	68fb      	ldr	r3, [r7, #12]
 8027a2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8027a2e:	68fb      	ldr	r3, [r7, #12]
 8027a30:	685a      	ldr	r2, [r3, #4]
 8027a32:	68fb      	ldr	r3, [r7, #12]
 8027a34:	689b      	ldr	r3, [r3, #8]
 8027a36:	429a      	cmp	r2, r3
 8027a38:	d32b      	bcc.n	8027a92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8027a3a:	68fb      	ldr	r3, [r7, #12]
 8027a3c:	681a      	ldr	r2, [r3, #0]
 8027a3e:	68fb      	ldr	r3, [r7, #12]
 8027a40:	605a      	str	r2, [r3, #4]
 8027a42:	e026      	b.n	8027a92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8027a44:	68fb      	ldr	r3, [r7, #12]
 8027a46:	68d8      	ldr	r0, [r3, #12]
 8027a48:	68fb      	ldr	r3, [r7, #12]
 8027a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027a4c:	461a      	mov	r2, r3
 8027a4e:	68b9      	ldr	r1, [r7, #8]
 8027a50:	f004 fd91 	bl	802c576 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8027a54:	68fb      	ldr	r3, [r7, #12]
 8027a56:	68da      	ldr	r2, [r3, #12]
 8027a58:	68fb      	ldr	r3, [r7, #12]
 8027a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027a5c:	425b      	negs	r3, r3
 8027a5e:	441a      	add	r2, r3
 8027a60:	68fb      	ldr	r3, [r7, #12]
 8027a62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8027a64:	68fb      	ldr	r3, [r7, #12]
 8027a66:	68da      	ldr	r2, [r3, #12]
 8027a68:	68fb      	ldr	r3, [r7, #12]
 8027a6a:	681b      	ldr	r3, [r3, #0]
 8027a6c:	429a      	cmp	r2, r3
 8027a6e:	d207      	bcs.n	8027a80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8027a70:	68fb      	ldr	r3, [r7, #12]
 8027a72:	689a      	ldr	r2, [r3, #8]
 8027a74:	68fb      	ldr	r3, [r7, #12]
 8027a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027a78:	425b      	negs	r3, r3
 8027a7a:	441a      	add	r2, r3
 8027a7c:	68fb      	ldr	r3, [r7, #12]
 8027a7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8027a80:	687b      	ldr	r3, [r7, #4]
 8027a82:	2b02      	cmp	r3, #2
 8027a84:	d105      	bne.n	8027a92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8027a86:	693b      	ldr	r3, [r7, #16]
 8027a88:	2b00      	cmp	r3, #0
 8027a8a:	d002      	beq.n	8027a92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8027a8c:	693b      	ldr	r3, [r7, #16]
 8027a8e:	3b01      	subs	r3, #1
 8027a90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8027a92:	693b      	ldr	r3, [r7, #16]
 8027a94:	1c5a      	adds	r2, r3, #1
 8027a96:	68fb      	ldr	r3, [r7, #12]
 8027a98:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8027a9a:	697b      	ldr	r3, [r7, #20]
}
 8027a9c:	4618      	mov	r0, r3
 8027a9e:	3718      	adds	r7, #24
 8027aa0:	46bd      	mov	sp, r7
 8027aa2:	bd80      	pop	{r7, pc}

08027aa4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8027aa4:	b580      	push	{r7, lr}
 8027aa6:	b082      	sub	sp, #8
 8027aa8:	af00      	add	r7, sp, #0
 8027aaa:	6078      	str	r0, [r7, #4]
 8027aac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8027aae:	687b      	ldr	r3, [r7, #4]
 8027ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027ab2:	2b00      	cmp	r3, #0
 8027ab4:	d018      	beq.n	8027ae8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8027ab6:	687b      	ldr	r3, [r7, #4]
 8027ab8:	68da      	ldr	r2, [r3, #12]
 8027aba:	687b      	ldr	r3, [r7, #4]
 8027abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027abe:	441a      	add	r2, r3
 8027ac0:	687b      	ldr	r3, [r7, #4]
 8027ac2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8027ac4:	687b      	ldr	r3, [r7, #4]
 8027ac6:	68da      	ldr	r2, [r3, #12]
 8027ac8:	687b      	ldr	r3, [r7, #4]
 8027aca:	689b      	ldr	r3, [r3, #8]
 8027acc:	429a      	cmp	r2, r3
 8027ace:	d303      	bcc.n	8027ad8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8027ad0:	687b      	ldr	r3, [r7, #4]
 8027ad2:	681a      	ldr	r2, [r3, #0]
 8027ad4:	687b      	ldr	r3, [r7, #4]
 8027ad6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8027ad8:	687b      	ldr	r3, [r7, #4]
 8027ada:	68d9      	ldr	r1, [r3, #12]
 8027adc:	687b      	ldr	r3, [r7, #4]
 8027ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027ae0:	461a      	mov	r2, r3
 8027ae2:	6838      	ldr	r0, [r7, #0]
 8027ae4:	f004 fd47 	bl	802c576 <memcpy>
	}
}
 8027ae8:	bf00      	nop
 8027aea:	3708      	adds	r7, #8
 8027aec:	46bd      	mov	sp, r7
 8027aee:	bd80      	pop	{r7, pc}

08027af0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8027af0:	b580      	push	{r7, lr}
 8027af2:	b084      	sub	sp, #16
 8027af4:	af00      	add	r7, sp, #0
 8027af6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8027af8:	f001 fef0 	bl	80298dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8027afc:	687b      	ldr	r3, [r7, #4]
 8027afe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8027b02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8027b04:	e011      	b.n	8027b2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8027b06:	687b      	ldr	r3, [r7, #4]
 8027b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8027b0a:	2b00      	cmp	r3, #0
 8027b0c:	d012      	beq.n	8027b34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8027b0e:	687b      	ldr	r3, [r7, #4]
 8027b10:	3324      	adds	r3, #36	@ 0x24
 8027b12:	4618      	mov	r0, r3
 8027b14:	f000 fd9e 	bl	8028654 <xTaskRemoveFromEventList>
 8027b18:	4603      	mov	r3, r0
 8027b1a:	2b00      	cmp	r3, #0
 8027b1c:	d001      	beq.n	8027b22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8027b1e:	f000 fe7d 	bl	802881c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8027b22:	7bfb      	ldrb	r3, [r7, #15]
 8027b24:	3b01      	subs	r3, #1
 8027b26:	b2db      	uxtb	r3, r3
 8027b28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8027b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8027b2e:	2b00      	cmp	r3, #0
 8027b30:	dce9      	bgt.n	8027b06 <prvUnlockQueue+0x16>
 8027b32:	e000      	b.n	8027b36 <prvUnlockQueue+0x46>
					break;
 8027b34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8027b36:	687b      	ldr	r3, [r7, #4]
 8027b38:	22ff      	movs	r2, #255	@ 0xff
 8027b3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8027b3e:	f001 ff03 	bl	8029948 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8027b42:	f001 fecb 	bl	80298dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8027b46:	687b      	ldr	r3, [r7, #4]
 8027b48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8027b4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8027b4e:	e011      	b.n	8027b74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8027b50:	687b      	ldr	r3, [r7, #4]
 8027b52:	691b      	ldr	r3, [r3, #16]
 8027b54:	2b00      	cmp	r3, #0
 8027b56:	d012      	beq.n	8027b7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8027b58:	687b      	ldr	r3, [r7, #4]
 8027b5a:	3310      	adds	r3, #16
 8027b5c:	4618      	mov	r0, r3
 8027b5e:	f000 fd79 	bl	8028654 <xTaskRemoveFromEventList>
 8027b62:	4603      	mov	r3, r0
 8027b64:	2b00      	cmp	r3, #0
 8027b66:	d001      	beq.n	8027b6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8027b68:	f000 fe58 	bl	802881c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8027b6c:	7bbb      	ldrb	r3, [r7, #14]
 8027b6e:	3b01      	subs	r3, #1
 8027b70:	b2db      	uxtb	r3, r3
 8027b72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8027b74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8027b78:	2b00      	cmp	r3, #0
 8027b7a:	dce9      	bgt.n	8027b50 <prvUnlockQueue+0x60>
 8027b7c:	e000      	b.n	8027b80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8027b7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8027b80:	687b      	ldr	r3, [r7, #4]
 8027b82:	22ff      	movs	r2, #255	@ 0xff
 8027b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8027b88:	f001 fede 	bl	8029948 <vPortExitCritical>
}
 8027b8c:	bf00      	nop
 8027b8e:	3710      	adds	r7, #16
 8027b90:	46bd      	mov	sp, r7
 8027b92:	bd80      	pop	{r7, pc}

08027b94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8027b94:	b580      	push	{r7, lr}
 8027b96:	b084      	sub	sp, #16
 8027b98:	af00      	add	r7, sp, #0
 8027b9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8027b9c:	f001 fe9e 	bl	80298dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8027ba0:	687b      	ldr	r3, [r7, #4]
 8027ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8027ba4:	2b00      	cmp	r3, #0
 8027ba6:	d102      	bne.n	8027bae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8027ba8:	2301      	movs	r3, #1
 8027baa:	60fb      	str	r3, [r7, #12]
 8027bac:	e001      	b.n	8027bb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8027bae:	2300      	movs	r3, #0
 8027bb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8027bb2:	f001 fec9 	bl	8029948 <vPortExitCritical>

	return xReturn;
 8027bb6:	68fb      	ldr	r3, [r7, #12]
}
 8027bb8:	4618      	mov	r0, r3
 8027bba:	3710      	adds	r7, #16
 8027bbc:	46bd      	mov	sp, r7
 8027bbe:	bd80      	pop	{r7, pc}

08027bc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8027bc0:	b580      	push	{r7, lr}
 8027bc2:	b084      	sub	sp, #16
 8027bc4:	af00      	add	r7, sp, #0
 8027bc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8027bc8:	f001 fe88 	bl	80298dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8027bcc:	687b      	ldr	r3, [r7, #4]
 8027bce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8027bd0:	687b      	ldr	r3, [r7, #4]
 8027bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8027bd4:	429a      	cmp	r2, r3
 8027bd6:	d102      	bne.n	8027bde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8027bd8:	2301      	movs	r3, #1
 8027bda:	60fb      	str	r3, [r7, #12]
 8027bdc:	e001      	b.n	8027be2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8027bde:	2300      	movs	r3, #0
 8027be0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8027be2:	f001 feb1 	bl	8029948 <vPortExitCritical>

	return xReturn;
 8027be6:	68fb      	ldr	r3, [r7, #12]
}
 8027be8:	4618      	mov	r0, r3
 8027bea:	3710      	adds	r7, #16
 8027bec:	46bd      	mov	sp, r7
 8027bee:	bd80      	pop	{r7, pc}

08027bf0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8027bf0:	b480      	push	{r7}
 8027bf2:	b085      	sub	sp, #20
 8027bf4:	af00      	add	r7, sp, #0
 8027bf6:	6078      	str	r0, [r7, #4]
 8027bf8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8027bfa:	2300      	movs	r3, #0
 8027bfc:	60fb      	str	r3, [r7, #12]
 8027bfe:	e014      	b.n	8027c2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8027c00:	4a0f      	ldr	r2, [pc, #60]	@ (8027c40 <vQueueAddToRegistry+0x50>)
 8027c02:	68fb      	ldr	r3, [r7, #12]
 8027c04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8027c08:	2b00      	cmp	r3, #0
 8027c0a:	d10b      	bne.n	8027c24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8027c0c:	490c      	ldr	r1, [pc, #48]	@ (8027c40 <vQueueAddToRegistry+0x50>)
 8027c0e:	68fb      	ldr	r3, [r7, #12]
 8027c10:	683a      	ldr	r2, [r7, #0]
 8027c12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8027c16:	4a0a      	ldr	r2, [pc, #40]	@ (8027c40 <vQueueAddToRegistry+0x50>)
 8027c18:	68fb      	ldr	r3, [r7, #12]
 8027c1a:	00db      	lsls	r3, r3, #3
 8027c1c:	4413      	add	r3, r2
 8027c1e:	687a      	ldr	r2, [r7, #4]
 8027c20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8027c22:	e006      	b.n	8027c32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8027c24:	68fb      	ldr	r3, [r7, #12]
 8027c26:	3301      	adds	r3, #1
 8027c28:	60fb      	str	r3, [r7, #12]
 8027c2a:	68fb      	ldr	r3, [r7, #12]
 8027c2c:	2b07      	cmp	r3, #7
 8027c2e:	d9e7      	bls.n	8027c00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8027c30:	bf00      	nop
 8027c32:	bf00      	nop
 8027c34:	3714      	adds	r7, #20
 8027c36:	46bd      	mov	sp, r7
 8027c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c3c:	4770      	bx	lr
 8027c3e:	bf00      	nop
 8027c40:	2001d858 	.word	0x2001d858

08027c44 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8027c44:	b480      	push	{r7}
 8027c46:	b085      	sub	sp, #20
 8027c48:	af00      	add	r7, sp, #0
 8027c4a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8027c4c:	2300      	movs	r3, #0
 8027c4e:	60fb      	str	r3, [r7, #12]
 8027c50:	e016      	b.n	8027c80 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8027c52:	4a10      	ldr	r2, [pc, #64]	@ (8027c94 <vQueueUnregisterQueue+0x50>)
 8027c54:	68fb      	ldr	r3, [r7, #12]
 8027c56:	00db      	lsls	r3, r3, #3
 8027c58:	4413      	add	r3, r2
 8027c5a:	685b      	ldr	r3, [r3, #4]
 8027c5c:	687a      	ldr	r2, [r7, #4]
 8027c5e:	429a      	cmp	r2, r3
 8027c60:	d10b      	bne.n	8027c7a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8027c62:	4a0c      	ldr	r2, [pc, #48]	@ (8027c94 <vQueueUnregisterQueue+0x50>)
 8027c64:	68fb      	ldr	r3, [r7, #12]
 8027c66:	2100      	movs	r1, #0
 8027c68:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8027c6c:	4a09      	ldr	r2, [pc, #36]	@ (8027c94 <vQueueUnregisterQueue+0x50>)
 8027c6e:	68fb      	ldr	r3, [r7, #12]
 8027c70:	00db      	lsls	r3, r3, #3
 8027c72:	4413      	add	r3, r2
 8027c74:	2200      	movs	r2, #0
 8027c76:	605a      	str	r2, [r3, #4]
				break;
 8027c78:	e006      	b.n	8027c88 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8027c7a:	68fb      	ldr	r3, [r7, #12]
 8027c7c:	3301      	adds	r3, #1
 8027c7e:	60fb      	str	r3, [r7, #12]
 8027c80:	68fb      	ldr	r3, [r7, #12]
 8027c82:	2b07      	cmp	r3, #7
 8027c84:	d9e5      	bls.n	8027c52 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8027c86:	bf00      	nop
 8027c88:	bf00      	nop
 8027c8a:	3714      	adds	r7, #20
 8027c8c:	46bd      	mov	sp, r7
 8027c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c92:	4770      	bx	lr
 8027c94:	2001d858 	.word	0x2001d858

08027c98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8027c98:	b580      	push	{r7, lr}
 8027c9a:	b086      	sub	sp, #24
 8027c9c:	af00      	add	r7, sp, #0
 8027c9e:	60f8      	str	r0, [r7, #12]
 8027ca0:	60b9      	str	r1, [r7, #8]
 8027ca2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8027ca4:	68fb      	ldr	r3, [r7, #12]
 8027ca6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8027ca8:	f001 fe18 	bl	80298dc <vPortEnterCritical>
 8027cac:	697b      	ldr	r3, [r7, #20]
 8027cae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8027cb2:	b25b      	sxtb	r3, r3
 8027cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8027cb8:	d103      	bne.n	8027cc2 <vQueueWaitForMessageRestricted+0x2a>
 8027cba:	697b      	ldr	r3, [r7, #20]
 8027cbc:	2200      	movs	r2, #0
 8027cbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8027cc2:	697b      	ldr	r3, [r7, #20]
 8027cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8027cc8:	b25b      	sxtb	r3, r3
 8027cca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8027cce:	d103      	bne.n	8027cd8 <vQueueWaitForMessageRestricted+0x40>
 8027cd0:	697b      	ldr	r3, [r7, #20]
 8027cd2:	2200      	movs	r2, #0
 8027cd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8027cd8:	f001 fe36 	bl	8029948 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8027cdc:	697b      	ldr	r3, [r7, #20]
 8027cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8027ce0:	2b00      	cmp	r3, #0
 8027ce2:	d106      	bne.n	8027cf2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8027ce4:	697b      	ldr	r3, [r7, #20]
 8027ce6:	3324      	adds	r3, #36	@ 0x24
 8027ce8:	687a      	ldr	r2, [r7, #4]
 8027cea:	68b9      	ldr	r1, [r7, #8]
 8027cec:	4618      	mov	r0, r3
 8027cee:	f000 fc83 	bl	80285f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8027cf2:	6978      	ldr	r0, [r7, #20]
 8027cf4:	f7ff fefc 	bl	8027af0 <prvUnlockQueue>
	}
 8027cf8:	bf00      	nop
 8027cfa:	3718      	adds	r7, #24
 8027cfc:	46bd      	mov	sp, r7
 8027cfe:	bd80      	pop	{r7, pc}

08027d00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8027d00:	b580      	push	{r7, lr}
 8027d02:	b08e      	sub	sp, #56	@ 0x38
 8027d04:	af04      	add	r7, sp, #16
 8027d06:	60f8      	str	r0, [r7, #12]
 8027d08:	60b9      	str	r1, [r7, #8]
 8027d0a:	607a      	str	r2, [r7, #4]
 8027d0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8027d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027d10:	2b00      	cmp	r3, #0
 8027d12:	d10d      	bne.n	8027d30 <xTaskCreateStatic+0x30>
	__asm volatile
 8027d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027d18:	b672      	cpsid	i
 8027d1a:	f383 8811 	msr	BASEPRI, r3
 8027d1e:	f3bf 8f6f 	isb	sy
 8027d22:	f3bf 8f4f 	dsb	sy
 8027d26:	b662      	cpsie	i
 8027d28:	623b      	str	r3, [r7, #32]
}
 8027d2a:	bf00      	nop
 8027d2c:	bf00      	nop
 8027d2e:	e7fd      	b.n	8027d2c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8027d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027d32:	2b00      	cmp	r3, #0
 8027d34:	d10d      	bne.n	8027d52 <xTaskCreateStatic+0x52>
	__asm volatile
 8027d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027d3a:	b672      	cpsid	i
 8027d3c:	f383 8811 	msr	BASEPRI, r3
 8027d40:	f3bf 8f6f 	isb	sy
 8027d44:	f3bf 8f4f 	dsb	sy
 8027d48:	b662      	cpsie	i
 8027d4a:	61fb      	str	r3, [r7, #28]
}
 8027d4c:	bf00      	nop
 8027d4e:	bf00      	nop
 8027d50:	e7fd      	b.n	8027d4e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8027d52:	23a8      	movs	r3, #168	@ 0xa8
 8027d54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8027d56:	693b      	ldr	r3, [r7, #16]
 8027d58:	2ba8      	cmp	r3, #168	@ 0xa8
 8027d5a:	d00d      	beq.n	8027d78 <xTaskCreateStatic+0x78>
	__asm volatile
 8027d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027d60:	b672      	cpsid	i
 8027d62:	f383 8811 	msr	BASEPRI, r3
 8027d66:	f3bf 8f6f 	isb	sy
 8027d6a:	f3bf 8f4f 	dsb	sy
 8027d6e:	b662      	cpsie	i
 8027d70:	61bb      	str	r3, [r7, #24]
}
 8027d72:	bf00      	nop
 8027d74:	bf00      	nop
 8027d76:	e7fd      	b.n	8027d74 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8027d78:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8027d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027d7c:	2b00      	cmp	r3, #0
 8027d7e:	d01e      	beq.n	8027dbe <xTaskCreateStatic+0xbe>
 8027d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027d82:	2b00      	cmp	r3, #0
 8027d84:	d01b      	beq.n	8027dbe <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8027d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027d88:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8027d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027d8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8027d8e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8027d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027d92:	2202      	movs	r2, #2
 8027d94:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8027d98:	2300      	movs	r3, #0
 8027d9a:	9303      	str	r3, [sp, #12]
 8027d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027d9e:	9302      	str	r3, [sp, #8]
 8027da0:	f107 0314 	add.w	r3, r7, #20
 8027da4:	9301      	str	r3, [sp, #4]
 8027da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027da8:	9300      	str	r3, [sp, #0]
 8027daa:	683b      	ldr	r3, [r7, #0]
 8027dac:	687a      	ldr	r2, [r7, #4]
 8027dae:	68b9      	ldr	r1, [r7, #8]
 8027db0:	68f8      	ldr	r0, [r7, #12]
 8027db2:	f000 f851 	bl	8027e58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8027db6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8027db8:	f000 f8f8 	bl	8027fac <prvAddNewTaskToReadyList>
 8027dbc:	e001      	b.n	8027dc2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8027dbe:	2300      	movs	r3, #0
 8027dc0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8027dc2:	697b      	ldr	r3, [r7, #20]
	}
 8027dc4:	4618      	mov	r0, r3
 8027dc6:	3728      	adds	r7, #40	@ 0x28
 8027dc8:	46bd      	mov	sp, r7
 8027dca:	bd80      	pop	{r7, pc}

08027dcc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8027dcc:	b580      	push	{r7, lr}
 8027dce:	b08c      	sub	sp, #48	@ 0x30
 8027dd0:	af04      	add	r7, sp, #16
 8027dd2:	60f8      	str	r0, [r7, #12]
 8027dd4:	60b9      	str	r1, [r7, #8]
 8027dd6:	603b      	str	r3, [r7, #0]
 8027dd8:	4613      	mov	r3, r2
 8027dda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8027ddc:	88fb      	ldrh	r3, [r7, #6]
 8027dde:	009b      	lsls	r3, r3, #2
 8027de0:	4618      	mov	r0, r3
 8027de2:	f001 fea9 	bl	8029b38 <pvPortMalloc>
 8027de6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8027de8:	697b      	ldr	r3, [r7, #20]
 8027dea:	2b00      	cmp	r3, #0
 8027dec:	d00e      	beq.n	8027e0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8027dee:	20a8      	movs	r0, #168	@ 0xa8
 8027df0:	f001 fea2 	bl	8029b38 <pvPortMalloc>
 8027df4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8027df6:	69fb      	ldr	r3, [r7, #28]
 8027df8:	2b00      	cmp	r3, #0
 8027dfa:	d003      	beq.n	8027e04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8027dfc:	69fb      	ldr	r3, [r7, #28]
 8027dfe:	697a      	ldr	r2, [r7, #20]
 8027e00:	631a      	str	r2, [r3, #48]	@ 0x30
 8027e02:	e005      	b.n	8027e10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8027e04:	6978      	ldr	r0, [r7, #20]
 8027e06:	f001 ff65 	bl	8029cd4 <vPortFree>
 8027e0a:	e001      	b.n	8027e10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8027e0c:	2300      	movs	r3, #0
 8027e0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8027e10:	69fb      	ldr	r3, [r7, #28]
 8027e12:	2b00      	cmp	r3, #0
 8027e14:	d017      	beq.n	8027e46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8027e16:	69fb      	ldr	r3, [r7, #28]
 8027e18:	2200      	movs	r2, #0
 8027e1a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8027e1e:	88fa      	ldrh	r2, [r7, #6]
 8027e20:	2300      	movs	r3, #0
 8027e22:	9303      	str	r3, [sp, #12]
 8027e24:	69fb      	ldr	r3, [r7, #28]
 8027e26:	9302      	str	r3, [sp, #8]
 8027e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027e2a:	9301      	str	r3, [sp, #4]
 8027e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027e2e:	9300      	str	r3, [sp, #0]
 8027e30:	683b      	ldr	r3, [r7, #0]
 8027e32:	68b9      	ldr	r1, [r7, #8]
 8027e34:	68f8      	ldr	r0, [r7, #12]
 8027e36:	f000 f80f 	bl	8027e58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8027e3a:	69f8      	ldr	r0, [r7, #28]
 8027e3c:	f000 f8b6 	bl	8027fac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8027e40:	2301      	movs	r3, #1
 8027e42:	61bb      	str	r3, [r7, #24]
 8027e44:	e002      	b.n	8027e4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8027e46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027e4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8027e4c:	69bb      	ldr	r3, [r7, #24]
	}
 8027e4e:	4618      	mov	r0, r3
 8027e50:	3720      	adds	r7, #32
 8027e52:	46bd      	mov	sp, r7
 8027e54:	bd80      	pop	{r7, pc}
	...

08027e58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8027e58:	b580      	push	{r7, lr}
 8027e5a:	b088      	sub	sp, #32
 8027e5c:	af00      	add	r7, sp, #0
 8027e5e:	60f8      	str	r0, [r7, #12]
 8027e60:	60b9      	str	r1, [r7, #8]
 8027e62:	607a      	str	r2, [r7, #4]
 8027e64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8027e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027e68:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8027e6a:	687b      	ldr	r3, [r7, #4]
 8027e6c:	009b      	lsls	r3, r3, #2
 8027e6e:	461a      	mov	r2, r3
 8027e70:	21a5      	movs	r1, #165	@ 0xa5
 8027e72:	f003 fe4b 	bl	802bb0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8027e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027e78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8027e7a:	6879      	ldr	r1, [r7, #4]
 8027e7c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8027e80:	440b      	add	r3, r1
 8027e82:	009b      	lsls	r3, r3, #2
 8027e84:	4413      	add	r3, r2
 8027e86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8027e88:	69bb      	ldr	r3, [r7, #24]
 8027e8a:	f023 0307 	bic.w	r3, r3, #7
 8027e8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8027e90:	69bb      	ldr	r3, [r7, #24]
 8027e92:	f003 0307 	and.w	r3, r3, #7
 8027e96:	2b00      	cmp	r3, #0
 8027e98:	d00d      	beq.n	8027eb6 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8027e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027e9e:	b672      	cpsid	i
 8027ea0:	f383 8811 	msr	BASEPRI, r3
 8027ea4:	f3bf 8f6f 	isb	sy
 8027ea8:	f3bf 8f4f 	dsb	sy
 8027eac:	b662      	cpsie	i
 8027eae:	617b      	str	r3, [r7, #20]
}
 8027eb0:	bf00      	nop
 8027eb2:	bf00      	nop
 8027eb4:	e7fd      	b.n	8027eb2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8027eb6:	68bb      	ldr	r3, [r7, #8]
 8027eb8:	2b00      	cmp	r3, #0
 8027eba:	d01f      	beq.n	8027efc <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8027ebc:	2300      	movs	r3, #0
 8027ebe:	61fb      	str	r3, [r7, #28]
 8027ec0:	e012      	b.n	8027ee8 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8027ec2:	68ba      	ldr	r2, [r7, #8]
 8027ec4:	69fb      	ldr	r3, [r7, #28]
 8027ec6:	4413      	add	r3, r2
 8027ec8:	7819      	ldrb	r1, [r3, #0]
 8027eca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8027ecc:	69fb      	ldr	r3, [r7, #28]
 8027ece:	4413      	add	r3, r2
 8027ed0:	3334      	adds	r3, #52	@ 0x34
 8027ed2:	460a      	mov	r2, r1
 8027ed4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8027ed6:	68ba      	ldr	r2, [r7, #8]
 8027ed8:	69fb      	ldr	r3, [r7, #28]
 8027eda:	4413      	add	r3, r2
 8027edc:	781b      	ldrb	r3, [r3, #0]
 8027ede:	2b00      	cmp	r3, #0
 8027ee0:	d006      	beq.n	8027ef0 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8027ee2:	69fb      	ldr	r3, [r7, #28]
 8027ee4:	3301      	adds	r3, #1
 8027ee6:	61fb      	str	r3, [r7, #28]
 8027ee8:	69fb      	ldr	r3, [r7, #28]
 8027eea:	2b0f      	cmp	r3, #15
 8027eec:	d9e9      	bls.n	8027ec2 <prvInitialiseNewTask+0x6a>
 8027eee:	e000      	b.n	8027ef2 <prvInitialiseNewTask+0x9a>
			{
				break;
 8027ef0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8027ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027ef4:	2200      	movs	r2, #0
 8027ef6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8027efa:	e003      	b.n	8027f04 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8027efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027efe:	2200      	movs	r2, #0
 8027f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8027f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027f06:	2b37      	cmp	r3, #55	@ 0x37
 8027f08:	d901      	bls.n	8027f0e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8027f0a:	2337      	movs	r3, #55	@ 0x37
 8027f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8027f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8027f12:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8027f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8027f18:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8027f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f1c:	2200      	movs	r2, #0
 8027f1e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8027f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f22:	3304      	adds	r3, #4
 8027f24:	4618      	mov	r0, r3
 8027f26:	f7fe fde3 	bl	8026af0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8027f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f2c:	3318      	adds	r3, #24
 8027f2e:	4618      	mov	r0, r3
 8027f30:	f7fe fdde 	bl	8026af0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8027f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8027f38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8027f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027f3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8027f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8027f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8027f48:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8027f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f4c:	2200      	movs	r2, #0
 8027f4e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8027f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f54:	2200      	movs	r2, #0
 8027f56:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8027f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f5c:	3354      	adds	r3, #84	@ 0x54
 8027f5e:	224c      	movs	r2, #76	@ 0x4c
 8027f60:	2100      	movs	r1, #0
 8027f62:	4618      	mov	r0, r3
 8027f64:	f003 fdd2 	bl	802bb0c <memset>
 8027f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f6a:	4a0d      	ldr	r2, [pc, #52]	@ (8027fa0 <prvInitialiseNewTask+0x148>)
 8027f6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8027f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f70:	4a0c      	ldr	r2, [pc, #48]	@ (8027fa4 <prvInitialiseNewTask+0x14c>)
 8027f72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8027f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f76:	4a0c      	ldr	r2, [pc, #48]	@ (8027fa8 <prvInitialiseNewTask+0x150>)
 8027f78:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8027f7a:	683a      	ldr	r2, [r7, #0]
 8027f7c:	68f9      	ldr	r1, [r7, #12]
 8027f7e:	69b8      	ldr	r0, [r7, #24]
 8027f80:	f001 fb9c 	bl	80296bc <pxPortInitialiseStack>
 8027f84:	4602      	mov	r2, r0
 8027f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8027f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027f8c:	2b00      	cmp	r3, #0
 8027f8e:	d002      	beq.n	8027f96 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8027f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027f92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8027f94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8027f96:	bf00      	nop
 8027f98:	3720      	adds	r7, #32
 8027f9a:	46bd      	mov	sp, r7
 8027f9c:	bd80      	pop	{r7, pc}
 8027f9e:	bf00      	nop
 8027fa0:	2002e6b4 	.word	0x2002e6b4
 8027fa4:	2002e71c 	.word	0x2002e71c
 8027fa8:	2002e784 	.word	0x2002e784

08027fac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8027fac:	b580      	push	{r7, lr}
 8027fae:	b082      	sub	sp, #8
 8027fb0:	af00      	add	r7, sp, #0
 8027fb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8027fb4:	f001 fc92 	bl	80298dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8027fb8:	4b2d      	ldr	r3, [pc, #180]	@ (8028070 <prvAddNewTaskToReadyList+0xc4>)
 8027fba:	681b      	ldr	r3, [r3, #0]
 8027fbc:	3301      	adds	r3, #1
 8027fbe:	4a2c      	ldr	r2, [pc, #176]	@ (8028070 <prvAddNewTaskToReadyList+0xc4>)
 8027fc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8027fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8028074 <prvAddNewTaskToReadyList+0xc8>)
 8027fc4:	681b      	ldr	r3, [r3, #0]
 8027fc6:	2b00      	cmp	r3, #0
 8027fc8:	d109      	bne.n	8027fde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8027fca:	4a2a      	ldr	r2, [pc, #168]	@ (8028074 <prvAddNewTaskToReadyList+0xc8>)
 8027fcc:	687b      	ldr	r3, [r7, #4]
 8027fce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8027fd0:	4b27      	ldr	r3, [pc, #156]	@ (8028070 <prvAddNewTaskToReadyList+0xc4>)
 8027fd2:	681b      	ldr	r3, [r3, #0]
 8027fd4:	2b01      	cmp	r3, #1
 8027fd6:	d110      	bne.n	8027ffa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8027fd8:	f000 fc44 	bl	8028864 <prvInitialiseTaskLists>
 8027fdc:	e00d      	b.n	8027ffa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8027fde:	4b26      	ldr	r3, [pc, #152]	@ (8028078 <prvAddNewTaskToReadyList+0xcc>)
 8027fe0:	681b      	ldr	r3, [r3, #0]
 8027fe2:	2b00      	cmp	r3, #0
 8027fe4:	d109      	bne.n	8027ffa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8027fe6:	4b23      	ldr	r3, [pc, #140]	@ (8028074 <prvAddNewTaskToReadyList+0xc8>)
 8027fe8:	681b      	ldr	r3, [r3, #0]
 8027fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8027fec:	687b      	ldr	r3, [r7, #4]
 8027fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8027ff0:	429a      	cmp	r2, r3
 8027ff2:	d802      	bhi.n	8027ffa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8027ff4:	4a1f      	ldr	r2, [pc, #124]	@ (8028074 <prvAddNewTaskToReadyList+0xc8>)
 8027ff6:	687b      	ldr	r3, [r7, #4]
 8027ff8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8027ffa:	4b20      	ldr	r3, [pc, #128]	@ (802807c <prvAddNewTaskToReadyList+0xd0>)
 8027ffc:	681b      	ldr	r3, [r3, #0]
 8027ffe:	3301      	adds	r3, #1
 8028000:	4a1e      	ldr	r2, [pc, #120]	@ (802807c <prvAddNewTaskToReadyList+0xd0>)
 8028002:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8028004:	4b1d      	ldr	r3, [pc, #116]	@ (802807c <prvAddNewTaskToReadyList+0xd0>)
 8028006:	681a      	ldr	r2, [r3, #0]
 8028008:	687b      	ldr	r3, [r7, #4]
 802800a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 802800c:	687b      	ldr	r3, [r7, #4]
 802800e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028010:	4b1b      	ldr	r3, [pc, #108]	@ (8028080 <prvAddNewTaskToReadyList+0xd4>)
 8028012:	681b      	ldr	r3, [r3, #0]
 8028014:	429a      	cmp	r2, r3
 8028016:	d903      	bls.n	8028020 <prvAddNewTaskToReadyList+0x74>
 8028018:	687b      	ldr	r3, [r7, #4]
 802801a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802801c:	4a18      	ldr	r2, [pc, #96]	@ (8028080 <prvAddNewTaskToReadyList+0xd4>)
 802801e:	6013      	str	r3, [r2, #0]
 8028020:	687b      	ldr	r3, [r7, #4]
 8028022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028024:	4613      	mov	r3, r2
 8028026:	009b      	lsls	r3, r3, #2
 8028028:	4413      	add	r3, r2
 802802a:	009b      	lsls	r3, r3, #2
 802802c:	4a15      	ldr	r2, [pc, #84]	@ (8028084 <prvAddNewTaskToReadyList+0xd8>)
 802802e:	441a      	add	r2, r3
 8028030:	687b      	ldr	r3, [r7, #4]
 8028032:	3304      	adds	r3, #4
 8028034:	4619      	mov	r1, r3
 8028036:	4610      	mov	r0, r2
 8028038:	f7fe fd67 	bl	8026b0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 802803c:	f001 fc84 	bl	8029948 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8028040:	4b0d      	ldr	r3, [pc, #52]	@ (8028078 <prvAddNewTaskToReadyList+0xcc>)
 8028042:	681b      	ldr	r3, [r3, #0]
 8028044:	2b00      	cmp	r3, #0
 8028046:	d00e      	beq.n	8028066 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8028048:	4b0a      	ldr	r3, [pc, #40]	@ (8028074 <prvAddNewTaskToReadyList+0xc8>)
 802804a:	681b      	ldr	r3, [r3, #0]
 802804c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802804e:	687b      	ldr	r3, [r7, #4]
 8028050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028052:	429a      	cmp	r2, r3
 8028054:	d207      	bcs.n	8028066 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8028056:	4b0c      	ldr	r3, [pc, #48]	@ (8028088 <prvAddNewTaskToReadyList+0xdc>)
 8028058:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 802805c:	601a      	str	r2, [r3, #0]
 802805e:	f3bf 8f4f 	dsb	sy
 8028062:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8028066:	bf00      	nop
 8028068:	3708      	adds	r7, #8
 802806a:	46bd      	mov	sp, r7
 802806c:	bd80      	pop	{r7, pc}
 802806e:	bf00      	nop
 8028070:	2001dd6c 	.word	0x2001dd6c
 8028074:	2001d898 	.word	0x2001d898
 8028078:	2001dd78 	.word	0x2001dd78
 802807c:	2001dd88 	.word	0x2001dd88
 8028080:	2001dd74 	.word	0x2001dd74
 8028084:	2001d89c 	.word	0x2001d89c
 8028088:	e000ed04 	.word	0xe000ed04

0802808c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 802808c:	b580      	push	{r7, lr}
 802808e:	b084      	sub	sp, #16
 8028090:	af00      	add	r7, sp, #0
 8028092:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8028094:	2300      	movs	r3, #0
 8028096:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8028098:	687b      	ldr	r3, [r7, #4]
 802809a:	2b00      	cmp	r3, #0
 802809c:	d01a      	beq.n	80280d4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 802809e:	4b15      	ldr	r3, [pc, #84]	@ (80280f4 <vTaskDelay+0x68>)
 80280a0:	681b      	ldr	r3, [r3, #0]
 80280a2:	2b00      	cmp	r3, #0
 80280a4:	d00d      	beq.n	80280c2 <vTaskDelay+0x36>
	__asm volatile
 80280a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80280aa:	b672      	cpsid	i
 80280ac:	f383 8811 	msr	BASEPRI, r3
 80280b0:	f3bf 8f6f 	isb	sy
 80280b4:	f3bf 8f4f 	dsb	sy
 80280b8:	b662      	cpsie	i
 80280ba:	60bb      	str	r3, [r7, #8]
}
 80280bc:	bf00      	nop
 80280be:	bf00      	nop
 80280c0:	e7fd      	b.n	80280be <vTaskDelay+0x32>
			vTaskSuspendAll();
 80280c2:	f000 f88f 	bl	80281e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80280c6:	2100      	movs	r1, #0
 80280c8:	6878      	ldr	r0, [r7, #4]
 80280ca:	f000 ff3b 	bl	8028f44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80280ce:	f000 f897 	bl	8028200 <xTaskResumeAll>
 80280d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80280d4:	68fb      	ldr	r3, [r7, #12]
 80280d6:	2b00      	cmp	r3, #0
 80280d8:	d107      	bne.n	80280ea <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80280da:	4b07      	ldr	r3, [pc, #28]	@ (80280f8 <vTaskDelay+0x6c>)
 80280dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80280e0:	601a      	str	r2, [r3, #0]
 80280e2:	f3bf 8f4f 	dsb	sy
 80280e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80280ea:	bf00      	nop
 80280ec:	3710      	adds	r7, #16
 80280ee:	46bd      	mov	sp, r7
 80280f0:	bd80      	pop	{r7, pc}
 80280f2:	bf00      	nop
 80280f4:	2001dd94 	.word	0x2001dd94
 80280f8:	e000ed04 	.word	0xe000ed04

080280fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80280fc:	b580      	push	{r7, lr}
 80280fe:	b08a      	sub	sp, #40	@ 0x28
 8028100:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8028102:	2300      	movs	r3, #0
 8028104:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8028106:	2300      	movs	r3, #0
 8028108:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 802810a:	463a      	mov	r2, r7
 802810c:	1d39      	adds	r1, r7, #4
 802810e:	f107 0308 	add.w	r3, r7, #8
 8028112:	4618      	mov	r0, r3
 8028114:	f7fe fc98 	bl	8026a48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8028118:	6839      	ldr	r1, [r7, #0]
 802811a:	687b      	ldr	r3, [r7, #4]
 802811c:	68ba      	ldr	r2, [r7, #8]
 802811e:	9202      	str	r2, [sp, #8]
 8028120:	9301      	str	r3, [sp, #4]
 8028122:	2300      	movs	r3, #0
 8028124:	9300      	str	r3, [sp, #0]
 8028126:	2300      	movs	r3, #0
 8028128:	460a      	mov	r2, r1
 802812a:	4926      	ldr	r1, [pc, #152]	@ (80281c4 <vTaskStartScheduler+0xc8>)
 802812c:	4826      	ldr	r0, [pc, #152]	@ (80281c8 <vTaskStartScheduler+0xcc>)
 802812e:	f7ff fde7 	bl	8027d00 <xTaskCreateStatic>
 8028132:	4603      	mov	r3, r0
 8028134:	4a25      	ldr	r2, [pc, #148]	@ (80281cc <vTaskStartScheduler+0xd0>)
 8028136:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8028138:	4b24      	ldr	r3, [pc, #144]	@ (80281cc <vTaskStartScheduler+0xd0>)
 802813a:	681b      	ldr	r3, [r3, #0]
 802813c:	2b00      	cmp	r3, #0
 802813e:	d002      	beq.n	8028146 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8028140:	2301      	movs	r3, #1
 8028142:	617b      	str	r3, [r7, #20]
 8028144:	e001      	b.n	802814a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8028146:	2300      	movs	r3, #0
 8028148:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 802814a:	697b      	ldr	r3, [r7, #20]
 802814c:	2b01      	cmp	r3, #1
 802814e:	d102      	bne.n	8028156 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8028150:	f000 ff4c 	bl	8028fec <xTimerCreateTimerTask>
 8028154:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8028156:	697b      	ldr	r3, [r7, #20]
 8028158:	2b01      	cmp	r3, #1
 802815a:	d11d      	bne.n	8028198 <vTaskStartScheduler+0x9c>
	__asm volatile
 802815c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8028160:	b672      	cpsid	i
 8028162:	f383 8811 	msr	BASEPRI, r3
 8028166:	f3bf 8f6f 	isb	sy
 802816a:	f3bf 8f4f 	dsb	sy
 802816e:	b662      	cpsie	i
 8028170:	613b      	str	r3, [r7, #16]
}
 8028172:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8028174:	4b16      	ldr	r3, [pc, #88]	@ (80281d0 <vTaskStartScheduler+0xd4>)
 8028176:	681b      	ldr	r3, [r3, #0]
 8028178:	3354      	adds	r3, #84	@ 0x54
 802817a:	4a16      	ldr	r2, [pc, #88]	@ (80281d4 <vTaskStartScheduler+0xd8>)
 802817c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 802817e:	4b16      	ldr	r3, [pc, #88]	@ (80281d8 <vTaskStartScheduler+0xdc>)
 8028180:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8028184:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8028186:	4b15      	ldr	r3, [pc, #84]	@ (80281dc <vTaskStartScheduler+0xe0>)
 8028188:	2201      	movs	r2, #1
 802818a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 802818c:	4b14      	ldr	r3, [pc, #80]	@ (80281e0 <vTaskStartScheduler+0xe4>)
 802818e:	2200      	movs	r2, #0
 8028190:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8028192:	f001 fb25 	bl	80297e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8028196:	e011      	b.n	80281bc <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8028198:	697b      	ldr	r3, [r7, #20]
 802819a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802819e:	d10d      	bne.n	80281bc <vTaskStartScheduler+0xc0>
	__asm volatile
 80281a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80281a4:	b672      	cpsid	i
 80281a6:	f383 8811 	msr	BASEPRI, r3
 80281aa:	f3bf 8f6f 	isb	sy
 80281ae:	f3bf 8f4f 	dsb	sy
 80281b2:	b662      	cpsie	i
 80281b4:	60fb      	str	r3, [r7, #12]
}
 80281b6:	bf00      	nop
 80281b8:	bf00      	nop
 80281ba:	e7fd      	b.n	80281b8 <vTaskStartScheduler+0xbc>
}
 80281bc:	bf00      	nop
 80281be:	3718      	adds	r7, #24
 80281c0:	46bd      	mov	sp, r7
 80281c2:	bd80      	pop	{r7, pc}
 80281c4:	080315a8 	.word	0x080315a8
 80281c8:	08028835 	.word	0x08028835
 80281cc:	2001dd90 	.word	0x2001dd90
 80281d0:	2001d898 	.word	0x2001d898
 80281d4:	20000460 	.word	0x20000460
 80281d8:	2001dd8c 	.word	0x2001dd8c
 80281dc:	2001dd78 	.word	0x2001dd78
 80281e0:	2001dd70 	.word	0x2001dd70

080281e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80281e4:	b480      	push	{r7}
 80281e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80281e8:	4b04      	ldr	r3, [pc, #16]	@ (80281fc <vTaskSuspendAll+0x18>)
 80281ea:	681b      	ldr	r3, [r3, #0]
 80281ec:	3301      	adds	r3, #1
 80281ee:	4a03      	ldr	r2, [pc, #12]	@ (80281fc <vTaskSuspendAll+0x18>)
 80281f0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80281f2:	bf00      	nop
 80281f4:	46bd      	mov	sp, r7
 80281f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80281fa:	4770      	bx	lr
 80281fc:	2001dd94 	.word	0x2001dd94

08028200 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8028200:	b580      	push	{r7, lr}
 8028202:	b084      	sub	sp, #16
 8028204:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8028206:	2300      	movs	r3, #0
 8028208:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 802820a:	2300      	movs	r3, #0
 802820c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 802820e:	4b43      	ldr	r3, [pc, #268]	@ (802831c <xTaskResumeAll+0x11c>)
 8028210:	681b      	ldr	r3, [r3, #0]
 8028212:	2b00      	cmp	r3, #0
 8028214:	d10d      	bne.n	8028232 <xTaskResumeAll+0x32>
	__asm volatile
 8028216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802821a:	b672      	cpsid	i
 802821c:	f383 8811 	msr	BASEPRI, r3
 8028220:	f3bf 8f6f 	isb	sy
 8028224:	f3bf 8f4f 	dsb	sy
 8028228:	b662      	cpsie	i
 802822a:	603b      	str	r3, [r7, #0]
}
 802822c:	bf00      	nop
 802822e:	bf00      	nop
 8028230:	e7fd      	b.n	802822e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8028232:	f001 fb53 	bl	80298dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8028236:	4b39      	ldr	r3, [pc, #228]	@ (802831c <xTaskResumeAll+0x11c>)
 8028238:	681b      	ldr	r3, [r3, #0]
 802823a:	3b01      	subs	r3, #1
 802823c:	4a37      	ldr	r2, [pc, #220]	@ (802831c <xTaskResumeAll+0x11c>)
 802823e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8028240:	4b36      	ldr	r3, [pc, #216]	@ (802831c <xTaskResumeAll+0x11c>)
 8028242:	681b      	ldr	r3, [r3, #0]
 8028244:	2b00      	cmp	r3, #0
 8028246:	d162      	bne.n	802830e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8028248:	4b35      	ldr	r3, [pc, #212]	@ (8028320 <xTaskResumeAll+0x120>)
 802824a:	681b      	ldr	r3, [r3, #0]
 802824c:	2b00      	cmp	r3, #0
 802824e:	d05e      	beq.n	802830e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8028250:	e02f      	b.n	80282b2 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8028252:	4b34      	ldr	r3, [pc, #208]	@ (8028324 <xTaskResumeAll+0x124>)
 8028254:	68db      	ldr	r3, [r3, #12]
 8028256:	68db      	ldr	r3, [r3, #12]
 8028258:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 802825a:	68fb      	ldr	r3, [r7, #12]
 802825c:	3318      	adds	r3, #24
 802825e:	4618      	mov	r0, r3
 8028260:	f7fe fcb0 	bl	8026bc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8028264:	68fb      	ldr	r3, [r7, #12]
 8028266:	3304      	adds	r3, #4
 8028268:	4618      	mov	r0, r3
 802826a:	f7fe fcab 	bl	8026bc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 802826e:	68fb      	ldr	r3, [r7, #12]
 8028270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028272:	4b2d      	ldr	r3, [pc, #180]	@ (8028328 <xTaskResumeAll+0x128>)
 8028274:	681b      	ldr	r3, [r3, #0]
 8028276:	429a      	cmp	r2, r3
 8028278:	d903      	bls.n	8028282 <xTaskResumeAll+0x82>
 802827a:	68fb      	ldr	r3, [r7, #12]
 802827c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802827e:	4a2a      	ldr	r2, [pc, #168]	@ (8028328 <xTaskResumeAll+0x128>)
 8028280:	6013      	str	r3, [r2, #0]
 8028282:	68fb      	ldr	r3, [r7, #12]
 8028284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028286:	4613      	mov	r3, r2
 8028288:	009b      	lsls	r3, r3, #2
 802828a:	4413      	add	r3, r2
 802828c:	009b      	lsls	r3, r3, #2
 802828e:	4a27      	ldr	r2, [pc, #156]	@ (802832c <xTaskResumeAll+0x12c>)
 8028290:	441a      	add	r2, r3
 8028292:	68fb      	ldr	r3, [r7, #12]
 8028294:	3304      	adds	r3, #4
 8028296:	4619      	mov	r1, r3
 8028298:	4610      	mov	r0, r2
 802829a:	f7fe fc36 	bl	8026b0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802829e:	68fb      	ldr	r3, [r7, #12]
 80282a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80282a2:	4b23      	ldr	r3, [pc, #140]	@ (8028330 <xTaskResumeAll+0x130>)
 80282a4:	681b      	ldr	r3, [r3, #0]
 80282a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80282a8:	429a      	cmp	r2, r3
 80282aa:	d302      	bcc.n	80282b2 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80282ac:	4b21      	ldr	r3, [pc, #132]	@ (8028334 <xTaskResumeAll+0x134>)
 80282ae:	2201      	movs	r2, #1
 80282b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80282b2:	4b1c      	ldr	r3, [pc, #112]	@ (8028324 <xTaskResumeAll+0x124>)
 80282b4:	681b      	ldr	r3, [r3, #0]
 80282b6:	2b00      	cmp	r3, #0
 80282b8:	d1cb      	bne.n	8028252 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80282ba:	68fb      	ldr	r3, [r7, #12]
 80282bc:	2b00      	cmp	r3, #0
 80282be:	d001      	beq.n	80282c4 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80282c0:	f000 fb76 	bl	80289b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80282c4:	4b1c      	ldr	r3, [pc, #112]	@ (8028338 <xTaskResumeAll+0x138>)
 80282c6:	681b      	ldr	r3, [r3, #0]
 80282c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80282ca:	687b      	ldr	r3, [r7, #4]
 80282cc:	2b00      	cmp	r3, #0
 80282ce:	d010      	beq.n	80282f2 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80282d0:	f000 f846 	bl	8028360 <xTaskIncrementTick>
 80282d4:	4603      	mov	r3, r0
 80282d6:	2b00      	cmp	r3, #0
 80282d8:	d002      	beq.n	80282e0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80282da:	4b16      	ldr	r3, [pc, #88]	@ (8028334 <xTaskResumeAll+0x134>)
 80282dc:	2201      	movs	r2, #1
 80282de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80282e0:	687b      	ldr	r3, [r7, #4]
 80282e2:	3b01      	subs	r3, #1
 80282e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80282e6:	687b      	ldr	r3, [r7, #4]
 80282e8:	2b00      	cmp	r3, #0
 80282ea:	d1f1      	bne.n	80282d0 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80282ec:	4b12      	ldr	r3, [pc, #72]	@ (8028338 <xTaskResumeAll+0x138>)
 80282ee:	2200      	movs	r2, #0
 80282f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80282f2:	4b10      	ldr	r3, [pc, #64]	@ (8028334 <xTaskResumeAll+0x134>)
 80282f4:	681b      	ldr	r3, [r3, #0]
 80282f6:	2b00      	cmp	r3, #0
 80282f8:	d009      	beq.n	802830e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80282fa:	2301      	movs	r3, #1
 80282fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80282fe:	4b0f      	ldr	r3, [pc, #60]	@ (802833c <xTaskResumeAll+0x13c>)
 8028300:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8028304:	601a      	str	r2, [r3, #0]
 8028306:	f3bf 8f4f 	dsb	sy
 802830a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 802830e:	f001 fb1b 	bl	8029948 <vPortExitCritical>

	return xAlreadyYielded;
 8028312:	68bb      	ldr	r3, [r7, #8]
}
 8028314:	4618      	mov	r0, r3
 8028316:	3710      	adds	r7, #16
 8028318:	46bd      	mov	sp, r7
 802831a:	bd80      	pop	{r7, pc}
 802831c:	2001dd94 	.word	0x2001dd94
 8028320:	2001dd6c 	.word	0x2001dd6c
 8028324:	2001dd2c 	.word	0x2001dd2c
 8028328:	2001dd74 	.word	0x2001dd74
 802832c:	2001d89c 	.word	0x2001d89c
 8028330:	2001d898 	.word	0x2001d898
 8028334:	2001dd80 	.word	0x2001dd80
 8028338:	2001dd7c 	.word	0x2001dd7c
 802833c:	e000ed04 	.word	0xe000ed04

08028340 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8028340:	b480      	push	{r7}
 8028342:	b083      	sub	sp, #12
 8028344:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8028346:	4b05      	ldr	r3, [pc, #20]	@ (802835c <xTaskGetTickCount+0x1c>)
 8028348:	681b      	ldr	r3, [r3, #0]
 802834a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 802834c:	687b      	ldr	r3, [r7, #4]
}
 802834e:	4618      	mov	r0, r3
 8028350:	370c      	adds	r7, #12
 8028352:	46bd      	mov	sp, r7
 8028354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028358:	4770      	bx	lr
 802835a:	bf00      	nop
 802835c:	2001dd70 	.word	0x2001dd70

08028360 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8028360:	b580      	push	{r7, lr}
 8028362:	b086      	sub	sp, #24
 8028364:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8028366:	2300      	movs	r3, #0
 8028368:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802836a:	4b50      	ldr	r3, [pc, #320]	@ (80284ac <xTaskIncrementTick+0x14c>)
 802836c:	681b      	ldr	r3, [r3, #0]
 802836e:	2b00      	cmp	r3, #0
 8028370:	f040 808c 	bne.w	802848c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8028374:	4b4e      	ldr	r3, [pc, #312]	@ (80284b0 <xTaskIncrementTick+0x150>)
 8028376:	681b      	ldr	r3, [r3, #0]
 8028378:	3301      	adds	r3, #1
 802837a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 802837c:	4a4c      	ldr	r2, [pc, #304]	@ (80284b0 <xTaskIncrementTick+0x150>)
 802837e:	693b      	ldr	r3, [r7, #16]
 8028380:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8028382:	693b      	ldr	r3, [r7, #16]
 8028384:	2b00      	cmp	r3, #0
 8028386:	d123      	bne.n	80283d0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8028388:	4b4a      	ldr	r3, [pc, #296]	@ (80284b4 <xTaskIncrementTick+0x154>)
 802838a:	681b      	ldr	r3, [r3, #0]
 802838c:	681b      	ldr	r3, [r3, #0]
 802838e:	2b00      	cmp	r3, #0
 8028390:	d00d      	beq.n	80283ae <xTaskIncrementTick+0x4e>
	__asm volatile
 8028392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8028396:	b672      	cpsid	i
 8028398:	f383 8811 	msr	BASEPRI, r3
 802839c:	f3bf 8f6f 	isb	sy
 80283a0:	f3bf 8f4f 	dsb	sy
 80283a4:	b662      	cpsie	i
 80283a6:	603b      	str	r3, [r7, #0]
}
 80283a8:	bf00      	nop
 80283aa:	bf00      	nop
 80283ac:	e7fd      	b.n	80283aa <xTaskIncrementTick+0x4a>
 80283ae:	4b41      	ldr	r3, [pc, #260]	@ (80284b4 <xTaskIncrementTick+0x154>)
 80283b0:	681b      	ldr	r3, [r3, #0]
 80283b2:	60fb      	str	r3, [r7, #12]
 80283b4:	4b40      	ldr	r3, [pc, #256]	@ (80284b8 <xTaskIncrementTick+0x158>)
 80283b6:	681b      	ldr	r3, [r3, #0]
 80283b8:	4a3e      	ldr	r2, [pc, #248]	@ (80284b4 <xTaskIncrementTick+0x154>)
 80283ba:	6013      	str	r3, [r2, #0]
 80283bc:	4a3e      	ldr	r2, [pc, #248]	@ (80284b8 <xTaskIncrementTick+0x158>)
 80283be:	68fb      	ldr	r3, [r7, #12]
 80283c0:	6013      	str	r3, [r2, #0]
 80283c2:	4b3e      	ldr	r3, [pc, #248]	@ (80284bc <xTaskIncrementTick+0x15c>)
 80283c4:	681b      	ldr	r3, [r3, #0]
 80283c6:	3301      	adds	r3, #1
 80283c8:	4a3c      	ldr	r2, [pc, #240]	@ (80284bc <xTaskIncrementTick+0x15c>)
 80283ca:	6013      	str	r3, [r2, #0]
 80283cc:	f000 faf0 	bl	80289b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80283d0:	4b3b      	ldr	r3, [pc, #236]	@ (80284c0 <xTaskIncrementTick+0x160>)
 80283d2:	681b      	ldr	r3, [r3, #0]
 80283d4:	693a      	ldr	r2, [r7, #16]
 80283d6:	429a      	cmp	r2, r3
 80283d8:	d349      	bcc.n	802846e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80283da:	4b36      	ldr	r3, [pc, #216]	@ (80284b4 <xTaskIncrementTick+0x154>)
 80283dc:	681b      	ldr	r3, [r3, #0]
 80283de:	681b      	ldr	r3, [r3, #0]
 80283e0:	2b00      	cmp	r3, #0
 80283e2:	d104      	bne.n	80283ee <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80283e4:	4b36      	ldr	r3, [pc, #216]	@ (80284c0 <xTaskIncrementTick+0x160>)
 80283e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80283ea:	601a      	str	r2, [r3, #0]
					break;
 80283ec:	e03f      	b.n	802846e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80283ee:	4b31      	ldr	r3, [pc, #196]	@ (80284b4 <xTaskIncrementTick+0x154>)
 80283f0:	681b      	ldr	r3, [r3, #0]
 80283f2:	68db      	ldr	r3, [r3, #12]
 80283f4:	68db      	ldr	r3, [r3, #12]
 80283f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80283f8:	68bb      	ldr	r3, [r7, #8]
 80283fa:	685b      	ldr	r3, [r3, #4]
 80283fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80283fe:	693a      	ldr	r2, [r7, #16]
 8028400:	687b      	ldr	r3, [r7, #4]
 8028402:	429a      	cmp	r2, r3
 8028404:	d203      	bcs.n	802840e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8028406:	4a2e      	ldr	r2, [pc, #184]	@ (80284c0 <xTaskIncrementTick+0x160>)
 8028408:	687b      	ldr	r3, [r7, #4]
 802840a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 802840c:	e02f      	b.n	802846e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802840e:	68bb      	ldr	r3, [r7, #8]
 8028410:	3304      	adds	r3, #4
 8028412:	4618      	mov	r0, r3
 8028414:	f7fe fbd6 	bl	8026bc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8028418:	68bb      	ldr	r3, [r7, #8]
 802841a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802841c:	2b00      	cmp	r3, #0
 802841e:	d004      	beq.n	802842a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8028420:	68bb      	ldr	r3, [r7, #8]
 8028422:	3318      	adds	r3, #24
 8028424:	4618      	mov	r0, r3
 8028426:	f7fe fbcd 	bl	8026bc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 802842a:	68bb      	ldr	r3, [r7, #8]
 802842c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802842e:	4b25      	ldr	r3, [pc, #148]	@ (80284c4 <xTaskIncrementTick+0x164>)
 8028430:	681b      	ldr	r3, [r3, #0]
 8028432:	429a      	cmp	r2, r3
 8028434:	d903      	bls.n	802843e <xTaskIncrementTick+0xde>
 8028436:	68bb      	ldr	r3, [r7, #8]
 8028438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802843a:	4a22      	ldr	r2, [pc, #136]	@ (80284c4 <xTaskIncrementTick+0x164>)
 802843c:	6013      	str	r3, [r2, #0]
 802843e:	68bb      	ldr	r3, [r7, #8]
 8028440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028442:	4613      	mov	r3, r2
 8028444:	009b      	lsls	r3, r3, #2
 8028446:	4413      	add	r3, r2
 8028448:	009b      	lsls	r3, r3, #2
 802844a:	4a1f      	ldr	r2, [pc, #124]	@ (80284c8 <xTaskIncrementTick+0x168>)
 802844c:	441a      	add	r2, r3
 802844e:	68bb      	ldr	r3, [r7, #8]
 8028450:	3304      	adds	r3, #4
 8028452:	4619      	mov	r1, r3
 8028454:	4610      	mov	r0, r2
 8028456:	f7fe fb58 	bl	8026b0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802845a:	68bb      	ldr	r3, [r7, #8]
 802845c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802845e:	4b1b      	ldr	r3, [pc, #108]	@ (80284cc <xTaskIncrementTick+0x16c>)
 8028460:	681b      	ldr	r3, [r3, #0]
 8028462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028464:	429a      	cmp	r2, r3
 8028466:	d3b8      	bcc.n	80283da <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8028468:	2301      	movs	r3, #1
 802846a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802846c:	e7b5      	b.n	80283da <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 802846e:	4b17      	ldr	r3, [pc, #92]	@ (80284cc <xTaskIncrementTick+0x16c>)
 8028470:	681b      	ldr	r3, [r3, #0]
 8028472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028474:	4914      	ldr	r1, [pc, #80]	@ (80284c8 <xTaskIncrementTick+0x168>)
 8028476:	4613      	mov	r3, r2
 8028478:	009b      	lsls	r3, r3, #2
 802847a:	4413      	add	r3, r2
 802847c:	009b      	lsls	r3, r3, #2
 802847e:	440b      	add	r3, r1
 8028480:	681b      	ldr	r3, [r3, #0]
 8028482:	2b01      	cmp	r3, #1
 8028484:	d907      	bls.n	8028496 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8028486:	2301      	movs	r3, #1
 8028488:	617b      	str	r3, [r7, #20]
 802848a:	e004      	b.n	8028496 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 802848c:	4b10      	ldr	r3, [pc, #64]	@ (80284d0 <xTaskIncrementTick+0x170>)
 802848e:	681b      	ldr	r3, [r3, #0]
 8028490:	3301      	adds	r3, #1
 8028492:	4a0f      	ldr	r2, [pc, #60]	@ (80284d0 <xTaskIncrementTick+0x170>)
 8028494:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8028496:	4b0f      	ldr	r3, [pc, #60]	@ (80284d4 <xTaskIncrementTick+0x174>)
 8028498:	681b      	ldr	r3, [r3, #0]
 802849a:	2b00      	cmp	r3, #0
 802849c:	d001      	beq.n	80284a2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 802849e:	2301      	movs	r3, #1
 80284a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80284a2:	697b      	ldr	r3, [r7, #20]
}
 80284a4:	4618      	mov	r0, r3
 80284a6:	3718      	adds	r7, #24
 80284a8:	46bd      	mov	sp, r7
 80284aa:	bd80      	pop	{r7, pc}
 80284ac:	2001dd94 	.word	0x2001dd94
 80284b0:	2001dd70 	.word	0x2001dd70
 80284b4:	2001dd24 	.word	0x2001dd24
 80284b8:	2001dd28 	.word	0x2001dd28
 80284bc:	2001dd84 	.word	0x2001dd84
 80284c0:	2001dd8c 	.word	0x2001dd8c
 80284c4:	2001dd74 	.word	0x2001dd74
 80284c8:	2001d89c 	.word	0x2001d89c
 80284cc:	2001d898 	.word	0x2001d898
 80284d0:	2001dd7c 	.word	0x2001dd7c
 80284d4:	2001dd80 	.word	0x2001dd80

080284d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80284d8:	b480      	push	{r7}
 80284da:	b085      	sub	sp, #20
 80284dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80284de:	4b2c      	ldr	r3, [pc, #176]	@ (8028590 <vTaskSwitchContext+0xb8>)
 80284e0:	681b      	ldr	r3, [r3, #0]
 80284e2:	2b00      	cmp	r3, #0
 80284e4:	d003      	beq.n	80284ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80284e6:	4b2b      	ldr	r3, [pc, #172]	@ (8028594 <vTaskSwitchContext+0xbc>)
 80284e8:	2201      	movs	r2, #1
 80284ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80284ec:	e049      	b.n	8028582 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 80284ee:	4b29      	ldr	r3, [pc, #164]	@ (8028594 <vTaskSwitchContext+0xbc>)
 80284f0:	2200      	movs	r2, #0
 80284f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80284f4:	4b28      	ldr	r3, [pc, #160]	@ (8028598 <vTaskSwitchContext+0xc0>)
 80284f6:	681b      	ldr	r3, [r3, #0]
 80284f8:	60fb      	str	r3, [r7, #12]
 80284fa:	e013      	b.n	8028524 <vTaskSwitchContext+0x4c>
 80284fc:	68fb      	ldr	r3, [r7, #12]
 80284fe:	2b00      	cmp	r3, #0
 8028500:	d10d      	bne.n	802851e <vTaskSwitchContext+0x46>
	__asm volatile
 8028502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8028506:	b672      	cpsid	i
 8028508:	f383 8811 	msr	BASEPRI, r3
 802850c:	f3bf 8f6f 	isb	sy
 8028510:	f3bf 8f4f 	dsb	sy
 8028514:	b662      	cpsie	i
 8028516:	607b      	str	r3, [r7, #4]
}
 8028518:	bf00      	nop
 802851a:	bf00      	nop
 802851c:	e7fd      	b.n	802851a <vTaskSwitchContext+0x42>
 802851e:	68fb      	ldr	r3, [r7, #12]
 8028520:	3b01      	subs	r3, #1
 8028522:	60fb      	str	r3, [r7, #12]
 8028524:	491d      	ldr	r1, [pc, #116]	@ (802859c <vTaskSwitchContext+0xc4>)
 8028526:	68fa      	ldr	r2, [r7, #12]
 8028528:	4613      	mov	r3, r2
 802852a:	009b      	lsls	r3, r3, #2
 802852c:	4413      	add	r3, r2
 802852e:	009b      	lsls	r3, r3, #2
 8028530:	440b      	add	r3, r1
 8028532:	681b      	ldr	r3, [r3, #0]
 8028534:	2b00      	cmp	r3, #0
 8028536:	d0e1      	beq.n	80284fc <vTaskSwitchContext+0x24>
 8028538:	68fa      	ldr	r2, [r7, #12]
 802853a:	4613      	mov	r3, r2
 802853c:	009b      	lsls	r3, r3, #2
 802853e:	4413      	add	r3, r2
 8028540:	009b      	lsls	r3, r3, #2
 8028542:	4a16      	ldr	r2, [pc, #88]	@ (802859c <vTaskSwitchContext+0xc4>)
 8028544:	4413      	add	r3, r2
 8028546:	60bb      	str	r3, [r7, #8]
 8028548:	68bb      	ldr	r3, [r7, #8]
 802854a:	685b      	ldr	r3, [r3, #4]
 802854c:	685a      	ldr	r2, [r3, #4]
 802854e:	68bb      	ldr	r3, [r7, #8]
 8028550:	605a      	str	r2, [r3, #4]
 8028552:	68bb      	ldr	r3, [r7, #8]
 8028554:	685a      	ldr	r2, [r3, #4]
 8028556:	68bb      	ldr	r3, [r7, #8]
 8028558:	3308      	adds	r3, #8
 802855a:	429a      	cmp	r2, r3
 802855c:	d104      	bne.n	8028568 <vTaskSwitchContext+0x90>
 802855e:	68bb      	ldr	r3, [r7, #8]
 8028560:	685b      	ldr	r3, [r3, #4]
 8028562:	685a      	ldr	r2, [r3, #4]
 8028564:	68bb      	ldr	r3, [r7, #8]
 8028566:	605a      	str	r2, [r3, #4]
 8028568:	68bb      	ldr	r3, [r7, #8]
 802856a:	685b      	ldr	r3, [r3, #4]
 802856c:	68db      	ldr	r3, [r3, #12]
 802856e:	4a0c      	ldr	r2, [pc, #48]	@ (80285a0 <vTaskSwitchContext+0xc8>)
 8028570:	6013      	str	r3, [r2, #0]
 8028572:	4a09      	ldr	r2, [pc, #36]	@ (8028598 <vTaskSwitchContext+0xc0>)
 8028574:	68fb      	ldr	r3, [r7, #12]
 8028576:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8028578:	4b09      	ldr	r3, [pc, #36]	@ (80285a0 <vTaskSwitchContext+0xc8>)
 802857a:	681b      	ldr	r3, [r3, #0]
 802857c:	3354      	adds	r3, #84	@ 0x54
 802857e:	4a09      	ldr	r2, [pc, #36]	@ (80285a4 <vTaskSwitchContext+0xcc>)
 8028580:	6013      	str	r3, [r2, #0]
}
 8028582:	bf00      	nop
 8028584:	3714      	adds	r7, #20
 8028586:	46bd      	mov	sp, r7
 8028588:	f85d 7b04 	ldr.w	r7, [sp], #4
 802858c:	4770      	bx	lr
 802858e:	bf00      	nop
 8028590:	2001dd94 	.word	0x2001dd94
 8028594:	2001dd80 	.word	0x2001dd80
 8028598:	2001dd74 	.word	0x2001dd74
 802859c:	2001d89c 	.word	0x2001d89c
 80285a0:	2001d898 	.word	0x2001d898
 80285a4:	20000460 	.word	0x20000460

080285a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80285a8:	b580      	push	{r7, lr}
 80285aa:	b084      	sub	sp, #16
 80285ac:	af00      	add	r7, sp, #0
 80285ae:	6078      	str	r0, [r7, #4]
 80285b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80285b2:	687b      	ldr	r3, [r7, #4]
 80285b4:	2b00      	cmp	r3, #0
 80285b6:	d10d      	bne.n	80285d4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80285b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80285bc:	b672      	cpsid	i
 80285be:	f383 8811 	msr	BASEPRI, r3
 80285c2:	f3bf 8f6f 	isb	sy
 80285c6:	f3bf 8f4f 	dsb	sy
 80285ca:	b662      	cpsie	i
 80285cc:	60fb      	str	r3, [r7, #12]
}
 80285ce:	bf00      	nop
 80285d0:	bf00      	nop
 80285d2:	e7fd      	b.n	80285d0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80285d4:	4b07      	ldr	r3, [pc, #28]	@ (80285f4 <vTaskPlaceOnEventList+0x4c>)
 80285d6:	681b      	ldr	r3, [r3, #0]
 80285d8:	3318      	adds	r3, #24
 80285da:	4619      	mov	r1, r3
 80285dc:	6878      	ldr	r0, [r7, #4]
 80285de:	f7fe fab8 	bl	8026b52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80285e2:	2101      	movs	r1, #1
 80285e4:	6838      	ldr	r0, [r7, #0]
 80285e6:	f000 fcad 	bl	8028f44 <prvAddCurrentTaskToDelayedList>
}
 80285ea:	bf00      	nop
 80285ec:	3710      	adds	r7, #16
 80285ee:	46bd      	mov	sp, r7
 80285f0:	bd80      	pop	{r7, pc}
 80285f2:	bf00      	nop
 80285f4:	2001d898 	.word	0x2001d898

080285f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80285f8:	b580      	push	{r7, lr}
 80285fa:	b086      	sub	sp, #24
 80285fc:	af00      	add	r7, sp, #0
 80285fe:	60f8      	str	r0, [r7, #12]
 8028600:	60b9      	str	r1, [r7, #8]
 8028602:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8028604:	68fb      	ldr	r3, [r7, #12]
 8028606:	2b00      	cmp	r3, #0
 8028608:	d10d      	bne.n	8028626 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 802860a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802860e:	b672      	cpsid	i
 8028610:	f383 8811 	msr	BASEPRI, r3
 8028614:	f3bf 8f6f 	isb	sy
 8028618:	f3bf 8f4f 	dsb	sy
 802861c:	b662      	cpsie	i
 802861e:	617b      	str	r3, [r7, #20]
}
 8028620:	bf00      	nop
 8028622:	bf00      	nop
 8028624:	e7fd      	b.n	8028622 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8028626:	4b0a      	ldr	r3, [pc, #40]	@ (8028650 <vTaskPlaceOnEventListRestricted+0x58>)
 8028628:	681b      	ldr	r3, [r3, #0]
 802862a:	3318      	adds	r3, #24
 802862c:	4619      	mov	r1, r3
 802862e:	68f8      	ldr	r0, [r7, #12]
 8028630:	f7fe fa6b 	bl	8026b0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8028634:	687b      	ldr	r3, [r7, #4]
 8028636:	2b00      	cmp	r3, #0
 8028638:	d002      	beq.n	8028640 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 802863a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802863e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8028640:	6879      	ldr	r1, [r7, #4]
 8028642:	68b8      	ldr	r0, [r7, #8]
 8028644:	f000 fc7e 	bl	8028f44 <prvAddCurrentTaskToDelayedList>
	}
 8028648:	bf00      	nop
 802864a:	3718      	adds	r7, #24
 802864c:	46bd      	mov	sp, r7
 802864e:	bd80      	pop	{r7, pc}
 8028650:	2001d898 	.word	0x2001d898

08028654 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8028654:	b580      	push	{r7, lr}
 8028656:	b086      	sub	sp, #24
 8028658:	af00      	add	r7, sp, #0
 802865a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802865c:	687b      	ldr	r3, [r7, #4]
 802865e:	68db      	ldr	r3, [r3, #12]
 8028660:	68db      	ldr	r3, [r3, #12]
 8028662:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8028664:	693b      	ldr	r3, [r7, #16]
 8028666:	2b00      	cmp	r3, #0
 8028668:	d10d      	bne.n	8028686 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 802866a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802866e:	b672      	cpsid	i
 8028670:	f383 8811 	msr	BASEPRI, r3
 8028674:	f3bf 8f6f 	isb	sy
 8028678:	f3bf 8f4f 	dsb	sy
 802867c:	b662      	cpsie	i
 802867e:	60fb      	str	r3, [r7, #12]
}
 8028680:	bf00      	nop
 8028682:	bf00      	nop
 8028684:	e7fd      	b.n	8028682 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8028686:	693b      	ldr	r3, [r7, #16]
 8028688:	3318      	adds	r3, #24
 802868a:	4618      	mov	r0, r3
 802868c:	f7fe fa9a 	bl	8026bc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8028690:	4b1d      	ldr	r3, [pc, #116]	@ (8028708 <xTaskRemoveFromEventList+0xb4>)
 8028692:	681b      	ldr	r3, [r3, #0]
 8028694:	2b00      	cmp	r3, #0
 8028696:	d11d      	bne.n	80286d4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8028698:	693b      	ldr	r3, [r7, #16]
 802869a:	3304      	adds	r3, #4
 802869c:	4618      	mov	r0, r3
 802869e:	f7fe fa91 	bl	8026bc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80286a2:	693b      	ldr	r3, [r7, #16]
 80286a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80286a6:	4b19      	ldr	r3, [pc, #100]	@ (802870c <xTaskRemoveFromEventList+0xb8>)
 80286a8:	681b      	ldr	r3, [r3, #0]
 80286aa:	429a      	cmp	r2, r3
 80286ac:	d903      	bls.n	80286b6 <xTaskRemoveFromEventList+0x62>
 80286ae:	693b      	ldr	r3, [r7, #16]
 80286b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80286b2:	4a16      	ldr	r2, [pc, #88]	@ (802870c <xTaskRemoveFromEventList+0xb8>)
 80286b4:	6013      	str	r3, [r2, #0]
 80286b6:	693b      	ldr	r3, [r7, #16]
 80286b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80286ba:	4613      	mov	r3, r2
 80286bc:	009b      	lsls	r3, r3, #2
 80286be:	4413      	add	r3, r2
 80286c0:	009b      	lsls	r3, r3, #2
 80286c2:	4a13      	ldr	r2, [pc, #76]	@ (8028710 <xTaskRemoveFromEventList+0xbc>)
 80286c4:	441a      	add	r2, r3
 80286c6:	693b      	ldr	r3, [r7, #16]
 80286c8:	3304      	adds	r3, #4
 80286ca:	4619      	mov	r1, r3
 80286cc:	4610      	mov	r0, r2
 80286ce:	f7fe fa1c 	bl	8026b0a <vListInsertEnd>
 80286d2:	e005      	b.n	80286e0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80286d4:	693b      	ldr	r3, [r7, #16]
 80286d6:	3318      	adds	r3, #24
 80286d8:	4619      	mov	r1, r3
 80286da:	480e      	ldr	r0, [pc, #56]	@ (8028714 <xTaskRemoveFromEventList+0xc0>)
 80286dc:	f7fe fa15 	bl	8026b0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80286e0:	693b      	ldr	r3, [r7, #16]
 80286e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80286e4:	4b0c      	ldr	r3, [pc, #48]	@ (8028718 <xTaskRemoveFromEventList+0xc4>)
 80286e6:	681b      	ldr	r3, [r3, #0]
 80286e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80286ea:	429a      	cmp	r2, r3
 80286ec:	d905      	bls.n	80286fa <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80286ee:	2301      	movs	r3, #1
 80286f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80286f2:	4b0a      	ldr	r3, [pc, #40]	@ (802871c <xTaskRemoveFromEventList+0xc8>)
 80286f4:	2201      	movs	r2, #1
 80286f6:	601a      	str	r2, [r3, #0]
 80286f8:	e001      	b.n	80286fe <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80286fa:	2300      	movs	r3, #0
 80286fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80286fe:	697b      	ldr	r3, [r7, #20]
}
 8028700:	4618      	mov	r0, r3
 8028702:	3718      	adds	r7, #24
 8028704:	46bd      	mov	sp, r7
 8028706:	bd80      	pop	{r7, pc}
 8028708:	2001dd94 	.word	0x2001dd94
 802870c:	2001dd74 	.word	0x2001dd74
 8028710:	2001d89c 	.word	0x2001d89c
 8028714:	2001dd2c 	.word	0x2001dd2c
 8028718:	2001d898 	.word	0x2001d898
 802871c:	2001dd80 	.word	0x2001dd80

08028720 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8028720:	b480      	push	{r7}
 8028722:	b083      	sub	sp, #12
 8028724:	af00      	add	r7, sp, #0
 8028726:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8028728:	4b06      	ldr	r3, [pc, #24]	@ (8028744 <vTaskInternalSetTimeOutState+0x24>)
 802872a:	681a      	ldr	r2, [r3, #0]
 802872c:	687b      	ldr	r3, [r7, #4]
 802872e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8028730:	4b05      	ldr	r3, [pc, #20]	@ (8028748 <vTaskInternalSetTimeOutState+0x28>)
 8028732:	681a      	ldr	r2, [r3, #0]
 8028734:	687b      	ldr	r3, [r7, #4]
 8028736:	605a      	str	r2, [r3, #4]
}
 8028738:	bf00      	nop
 802873a:	370c      	adds	r7, #12
 802873c:	46bd      	mov	sp, r7
 802873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028742:	4770      	bx	lr
 8028744:	2001dd84 	.word	0x2001dd84
 8028748:	2001dd70 	.word	0x2001dd70

0802874c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 802874c:	b580      	push	{r7, lr}
 802874e:	b088      	sub	sp, #32
 8028750:	af00      	add	r7, sp, #0
 8028752:	6078      	str	r0, [r7, #4]
 8028754:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8028756:	687b      	ldr	r3, [r7, #4]
 8028758:	2b00      	cmp	r3, #0
 802875a:	d10d      	bne.n	8028778 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 802875c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8028760:	b672      	cpsid	i
 8028762:	f383 8811 	msr	BASEPRI, r3
 8028766:	f3bf 8f6f 	isb	sy
 802876a:	f3bf 8f4f 	dsb	sy
 802876e:	b662      	cpsie	i
 8028770:	613b      	str	r3, [r7, #16]
}
 8028772:	bf00      	nop
 8028774:	bf00      	nop
 8028776:	e7fd      	b.n	8028774 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8028778:	683b      	ldr	r3, [r7, #0]
 802877a:	2b00      	cmp	r3, #0
 802877c:	d10d      	bne.n	802879a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 802877e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8028782:	b672      	cpsid	i
 8028784:	f383 8811 	msr	BASEPRI, r3
 8028788:	f3bf 8f6f 	isb	sy
 802878c:	f3bf 8f4f 	dsb	sy
 8028790:	b662      	cpsie	i
 8028792:	60fb      	str	r3, [r7, #12]
}
 8028794:	bf00      	nop
 8028796:	bf00      	nop
 8028798:	e7fd      	b.n	8028796 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 802879a:	f001 f89f 	bl	80298dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 802879e:	4b1d      	ldr	r3, [pc, #116]	@ (8028814 <xTaskCheckForTimeOut+0xc8>)
 80287a0:	681b      	ldr	r3, [r3, #0]
 80287a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80287a4:	687b      	ldr	r3, [r7, #4]
 80287a6:	685b      	ldr	r3, [r3, #4]
 80287a8:	69ba      	ldr	r2, [r7, #24]
 80287aa:	1ad3      	subs	r3, r2, r3
 80287ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80287ae:	683b      	ldr	r3, [r7, #0]
 80287b0:	681b      	ldr	r3, [r3, #0]
 80287b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80287b6:	d102      	bne.n	80287be <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80287b8:	2300      	movs	r3, #0
 80287ba:	61fb      	str	r3, [r7, #28]
 80287bc:	e023      	b.n	8028806 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80287be:	687b      	ldr	r3, [r7, #4]
 80287c0:	681a      	ldr	r2, [r3, #0]
 80287c2:	4b15      	ldr	r3, [pc, #84]	@ (8028818 <xTaskCheckForTimeOut+0xcc>)
 80287c4:	681b      	ldr	r3, [r3, #0]
 80287c6:	429a      	cmp	r2, r3
 80287c8:	d007      	beq.n	80287da <xTaskCheckForTimeOut+0x8e>
 80287ca:	687b      	ldr	r3, [r7, #4]
 80287cc:	685b      	ldr	r3, [r3, #4]
 80287ce:	69ba      	ldr	r2, [r7, #24]
 80287d0:	429a      	cmp	r2, r3
 80287d2:	d302      	bcc.n	80287da <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80287d4:	2301      	movs	r3, #1
 80287d6:	61fb      	str	r3, [r7, #28]
 80287d8:	e015      	b.n	8028806 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80287da:	683b      	ldr	r3, [r7, #0]
 80287dc:	681b      	ldr	r3, [r3, #0]
 80287de:	697a      	ldr	r2, [r7, #20]
 80287e0:	429a      	cmp	r2, r3
 80287e2:	d20b      	bcs.n	80287fc <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80287e4:	683b      	ldr	r3, [r7, #0]
 80287e6:	681a      	ldr	r2, [r3, #0]
 80287e8:	697b      	ldr	r3, [r7, #20]
 80287ea:	1ad2      	subs	r2, r2, r3
 80287ec:	683b      	ldr	r3, [r7, #0]
 80287ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80287f0:	6878      	ldr	r0, [r7, #4]
 80287f2:	f7ff ff95 	bl	8028720 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80287f6:	2300      	movs	r3, #0
 80287f8:	61fb      	str	r3, [r7, #28]
 80287fa:	e004      	b.n	8028806 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80287fc:	683b      	ldr	r3, [r7, #0]
 80287fe:	2200      	movs	r2, #0
 8028800:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8028802:	2301      	movs	r3, #1
 8028804:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8028806:	f001 f89f 	bl	8029948 <vPortExitCritical>

	return xReturn;
 802880a:	69fb      	ldr	r3, [r7, #28]
}
 802880c:	4618      	mov	r0, r3
 802880e:	3720      	adds	r7, #32
 8028810:	46bd      	mov	sp, r7
 8028812:	bd80      	pop	{r7, pc}
 8028814:	2001dd70 	.word	0x2001dd70
 8028818:	2001dd84 	.word	0x2001dd84

0802881c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 802881c:	b480      	push	{r7}
 802881e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8028820:	4b03      	ldr	r3, [pc, #12]	@ (8028830 <vTaskMissedYield+0x14>)
 8028822:	2201      	movs	r2, #1
 8028824:	601a      	str	r2, [r3, #0]
}
 8028826:	bf00      	nop
 8028828:	46bd      	mov	sp, r7
 802882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802882e:	4770      	bx	lr
 8028830:	2001dd80 	.word	0x2001dd80

08028834 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8028834:	b580      	push	{r7, lr}
 8028836:	b082      	sub	sp, #8
 8028838:	af00      	add	r7, sp, #0
 802883a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 802883c:	f000 f852 	bl	80288e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8028840:	4b06      	ldr	r3, [pc, #24]	@ (802885c <prvIdleTask+0x28>)
 8028842:	681b      	ldr	r3, [r3, #0]
 8028844:	2b01      	cmp	r3, #1
 8028846:	d9f9      	bls.n	802883c <prvIdleTask+0x8>
			{
				taskYIELD();
 8028848:	4b05      	ldr	r3, [pc, #20]	@ (8028860 <prvIdleTask+0x2c>)
 802884a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 802884e:	601a      	str	r2, [r3, #0]
 8028850:	f3bf 8f4f 	dsb	sy
 8028854:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8028858:	e7f0      	b.n	802883c <prvIdleTask+0x8>
 802885a:	bf00      	nop
 802885c:	2001d89c 	.word	0x2001d89c
 8028860:	e000ed04 	.word	0xe000ed04

08028864 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8028864:	b580      	push	{r7, lr}
 8028866:	b082      	sub	sp, #8
 8028868:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 802886a:	2300      	movs	r3, #0
 802886c:	607b      	str	r3, [r7, #4]
 802886e:	e00c      	b.n	802888a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8028870:	687a      	ldr	r2, [r7, #4]
 8028872:	4613      	mov	r3, r2
 8028874:	009b      	lsls	r3, r3, #2
 8028876:	4413      	add	r3, r2
 8028878:	009b      	lsls	r3, r3, #2
 802887a:	4a12      	ldr	r2, [pc, #72]	@ (80288c4 <prvInitialiseTaskLists+0x60>)
 802887c:	4413      	add	r3, r2
 802887e:	4618      	mov	r0, r3
 8028880:	f7fe f916 	bl	8026ab0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8028884:	687b      	ldr	r3, [r7, #4]
 8028886:	3301      	adds	r3, #1
 8028888:	607b      	str	r3, [r7, #4]
 802888a:	687b      	ldr	r3, [r7, #4]
 802888c:	2b37      	cmp	r3, #55	@ 0x37
 802888e:	d9ef      	bls.n	8028870 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8028890:	480d      	ldr	r0, [pc, #52]	@ (80288c8 <prvInitialiseTaskLists+0x64>)
 8028892:	f7fe f90d 	bl	8026ab0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8028896:	480d      	ldr	r0, [pc, #52]	@ (80288cc <prvInitialiseTaskLists+0x68>)
 8028898:	f7fe f90a 	bl	8026ab0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 802889c:	480c      	ldr	r0, [pc, #48]	@ (80288d0 <prvInitialiseTaskLists+0x6c>)
 802889e:	f7fe f907 	bl	8026ab0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80288a2:	480c      	ldr	r0, [pc, #48]	@ (80288d4 <prvInitialiseTaskLists+0x70>)
 80288a4:	f7fe f904 	bl	8026ab0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80288a8:	480b      	ldr	r0, [pc, #44]	@ (80288d8 <prvInitialiseTaskLists+0x74>)
 80288aa:	f7fe f901 	bl	8026ab0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80288ae:	4b0b      	ldr	r3, [pc, #44]	@ (80288dc <prvInitialiseTaskLists+0x78>)
 80288b0:	4a05      	ldr	r2, [pc, #20]	@ (80288c8 <prvInitialiseTaskLists+0x64>)
 80288b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80288b4:	4b0a      	ldr	r3, [pc, #40]	@ (80288e0 <prvInitialiseTaskLists+0x7c>)
 80288b6:	4a05      	ldr	r2, [pc, #20]	@ (80288cc <prvInitialiseTaskLists+0x68>)
 80288b8:	601a      	str	r2, [r3, #0]
}
 80288ba:	bf00      	nop
 80288bc:	3708      	adds	r7, #8
 80288be:	46bd      	mov	sp, r7
 80288c0:	bd80      	pop	{r7, pc}
 80288c2:	bf00      	nop
 80288c4:	2001d89c 	.word	0x2001d89c
 80288c8:	2001dcfc 	.word	0x2001dcfc
 80288cc:	2001dd10 	.word	0x2001dd10
 80288d0:	2001dd2c 	.word	0x2001dd2c
 80288d4:	2001dd40 	.word	0x2001dd40
 80288d8:	2001dd58 	.word	0x2001dd58
 80288dc:	2001dd24 	.word	0x2001dd24
 80288e0:	2001dd28 	.word	0x2001dd28

080288e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80288e4:	b580      	push	{r7, lr}
 80288e6:	b082      	sub	sp, #8
 80288e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80288ea:	e019      	b.n	8028920 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80288ec:	f000 fff6 	bl	80298dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80288f0:	4b10      	ldr	r3, [pc, #64]	@ (8028934 <prvCheckTasksWaitingTermination+0x50>)
 80288f2:	68db      	ldr	r3, [r3, #12]
 80288f4:	68db      	ldr	r3, [r3, #12]
 80288f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80288f8:	687b      	ldr	r3, [r7, #4]
 80288fa:	3304      	adds	r3, #4
 80288fc:	4618      	mov	r0, r3
 80288fe:	f7fe f961 	bl	8026bc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8028902:	4b0d      	ldr	r3, [pc, #52]	@ (8028938 <prvCheckTasksWaitingTermination+0x54>)
 8028904:	681b      	ldr	r3, [r3, #0]
 8028906:	3b01      	subs	r3, #1
 8028908:	4a0b      	ldr	r2, [pc, #44]	@ (8028938 <prvCheckTasksWaitingTermination+0x54>)
 802890a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 802890c:	4b0b      	ldr	r3, [pc, #44]	@ (802893c <prvCheckTasksWaitingTermination+0x58>)
 802890e:	681b      	ldr	r3, [r3, #0]
 8028910:	3b01      	subs	r3, #1
 8028912:	4a0a      	ldr	r2, [pc, #40]	@ (802893c <prvCheckTasksWaitingTermination+0x58>)
 8028914:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8028916:	f001 f817 	bl	8029948 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 802891a:	6878      	ldr	r0, [r7, #4]
 802891c:	f000 f810 	bl	8028940 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8028920:	4b06      	ldr	r3, [pc, #24]	@ (802893c <prvCheckTasksWaitingTermination+0x58>)
 8028922:	681b      	ldr	r3, [r3, #0]
 8028924:	2b00      	cmp	r3, #0
 8028926:	d1e1      	bne.n	80288ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8028928:	bf00      	nop
 802892a:	bf00      	nop
 802892c:	3708      	adds	r7, #8
 802892e:	46bd      	mov	sp, r7
 8028930:	bd80      	pop	{r7, pc}
 8028932:	bf00      	nop
 8028934:	2001dd40 	.word	0x2001dd40
 8028938:	2001dd6c 	.word	0x2001dd6c
 802893c:	2001dd54 	.word	0x2001dd54

08028940 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8028940:	b580      	push	{r7, lr}
 8028942:	b084      	sub	sp, #16
 8028944:	af00      	add	r7, sp, #0
 8028946:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8028948:	687b      	ldr	r3, [r7, #4]
 802894a:	3354      	adds	r3, #84	@ 0x54
 802894c:	4618      	mov	r0, r3
 802894e:	f003 fd3f 	bl	802c3d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8028952:	687b      	ldr	r3, [r7, #4]
 8028954:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8028958:	2b00      	cmp	r3, #0
 802895a:	d108      	bne.n	802896e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 802895c:	687b      	ldr	r3, [r7, #4]
 802895e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028960:	4618      	mov	r0, r3
 8028962:	f001 f9b7 	bl	8029cd4 <vPortFree>
				vPortFree( pxTCB );
 8028966:	6878      	ldr	r0, [r7, #4]
 8028968:	f001 f9b4 	bl	8029cd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 802896c:	e01b      	b.n	80289a6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 802896e:	687b      	ldr	r3, [r7, #4]
 8028970:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8028974:	2b01      	cmp	r3, #1
 8028976:	d103      	bne.n	8028980 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8028978:	6878      	ldr	r0, [r7, #4]
 802897a:	f001 f9ab 	bl	8029cd4 <vPortFree>
	}
 802897e:	e012      	b.n	80289a6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8028980:	687b      	ldr	r3, [r7, #4]
 8028982:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8028986:	2b02      	cmp	r3, #2
 8028988:	d00d      	beq.n	80289a6 <prvDeleteTCB+0x66>
	__asm volatile
 802898a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802898e:	b672      	cpsid	i
 8028990:	f383 8811 	msr	BASEPRI, r3
 8028994:	f3bf 8f6f 	isb	sy
 8028998:	f3bf 8f4f 	dsb	sy
 802899c:	b662      	cpsie	i
 802899e:	60fb      	str	r3, [r7, #12]
}
 80289a0:	bf00      	nop
 80289a2:	bf00      	nop
 80289a4:	e7fd      	b.n	80289a2 <prvDeleteTCB+0x62>
	}
 80289a6:	bf00      	nop
 80289a8:	3710      	adds	r7, #16
 80289aa:	46bd      	mov	sp, r7
 80289ac:	bd80      	pop	{r7, pc}
	...

080289b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80289b0:	b480      	push	{r7}
 80289b2:	b083      	sub	sp, #12
 80289b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80289b6:	4b0c      	ldr	r3, [pc, #48]	@ (80289e8 <prvResetNextTaskUnblockTime+0x38>)
 80289b8:	681b      	ldr	r3, [r3, #0]
 80289ba:	681b      	ldr	r3, [r3, #0]
 80289bc:	2b00      	cmp	r3, #0
 80289be:	d104      	bne.n	80289ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80289c0:	4b0a      	ldr	r3, [pc, #40]	@ (80289ec <prvResetNextTaskUnblockTime+0x3c>)
 80289c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80289c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80289c8:	e008      	b.n	80289dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80289ca:	4b07      	ldr	r3, [pc, #28]	@ (80289e8 <prvResetNextTaskUnblockTime+0x38>)
 80289cc:	681b      	ldr	r3, [r3, #0]
 80289ce:	68db      	ldr	r3, [r3, #12]
 80289d0:	68db      	ldr	r3, [r3, #12]
 80289d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80289d4:	687b      	ldr	r3, [r7, #4]
 80289d6:	685b      	ldr	r3, [r3, #4]
 80289d8:	4a04      	ldr	r2, [pc, #16]	@ (80289ec <prvResetNextTaskUnblockTime+0x3c>)
 80289da:	6013      	str	r3, [r2, #0]
}
 80289dc:	bf00      	nop
 80289de:	370c      	adds	r7, #12
 80289e0:	46bd      	mov	sp, r7
 80289e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80289e6:	4770      	bx	lr
 80289e8:	2001dd24 	.word	0x2001dd24
 80289ec:	2001dd8c 	.word	0x2001dd8c

080289f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80289f0:	b480      	push	{r7}
 80289f2:	b083      	sub	sp, #12
 80289f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80289f6:	4b0b      	ldr	r3, [pc, #44]	@ (8028a24 <xTaskGetSchedulerState+0x34>)
 80289f8:	681b      	ldr	r3, [r3, #0]
 80289fa:	2b00      	cmp	r3, #0
 80289fc:	d102      	bne.n	8028a04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80289fe:	2301      	movs	r3, #1
 8028a00:	607b      	str	r3, [r7, #4]
 8028a02:	e008      	b.n	8028a16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8028a04:	4b08      	ldr	r3, [pc, #32]	@ (8028a28 <xTaskGetSchedulerState+0x38>)
 8028a06:	681b      	ldr	r3, [r3, #0]
 8028a08:	2b00      	cmp	r3, #0
 8028a0a:	d102      	bne.n	8028a12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8028a0c:	2302      	movs	r3, #2
 8028a0e:	607b      	str	r3, [r7, #4]
 8028a10:	e001      	b.n	8028a16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8028a12:	2300      	movs	r3, #0
 8028a14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8028a16:	687b      	ldr	r3, [r7, #4]
	}
 8028a18:	4618      	mov	r0, r3
 8028a1a:	370c      	adds	r7, #12
 8028a1c:	46bd      	mov	sp, r7
 8028a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a22:	4770      	bx	lr
 8028a24:	2001dd78 	.word	0x2001dd78
 8028a28:	2001dd94 	.word	0x2001dd94

08028a2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8028a2c:	b580      	push	{r7, lr}
 8028a2e:	b084      	sub	sp, #16
 8028a30:	af00      	add	r7, sp, #0
 8028a32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8028a34:	687b      	ldr	r3, [r7, #4]
 8028a36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8028a38:	2300      	movs	r3, #0
 8028a3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8028a3c:	687b      	ldr	r3, [r7, #4]
 8028a3e:	2b00      	cmp	r3, #0
 8028a40:	d051      	beq.n	8028ae6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8028a42:	68bb      	ldr	r3, [r7, #8]
 8028a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028a46:	4b2a      	ldr	r3, [pc, #168]	@ (8028af0 <xTaskPriorityInherit+0xc4>)
 8028a48:	681b      	ldr	r3, [r3, #0]
 8028a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028a4c:	429a      	cmp	r2, r3
 8028a4e:	d241      	bcs.n	8028ad4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8028a50:	68bb      	ldr	r3, [r7, #8]
 8028a52:	699b      	ldr	r3, [r3, #24]
 8028a54:	2b00      	cmp	r3, #0
 8028a56:	db06      	blt.n	8028a66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8028a58:	4b25      	ldr	r3, [pc, #148]	@ (8028af0 <xTaskPriorityInherit+0xc4>)
 8028a5a:	681b      	ldr	r3, [r3, #0]
 8028a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028a5e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8028a62:	68bb      	ldr	r3, [r7, #8]
 8028a64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8028a66:	68bb      	ldr	r3, [r7, #8]
 8028a68:	6959      	ldr	r1, [r3, #20]
 8028a6a:	68bb      	ldr	r3, [r7, #8]
 8028a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028a6e:	4613      	mov	r3, r2
 8028a70:	009b      	lsls	r3, r3, #2
 8028a72:	4413      	add	r3, r2
 8028a74:	009b      	lsls	r3, r3, #2
 8028a76:	4a1f      	ldr	r2, [pc, #124]	@ (8028af4 <xTaskPriorityInherit+0xc8>)
 8028a78:	4413      	add	r3, r2
 8028a7a:	4299      	cmp	r1, r3
 8028a7c:	d122      	bne.n	8028ac4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8028a7e:	68bb      	ldr	r3, [r7, #8]
 8028a80:	3304      	adds	r3, #4
 8028a82:	4618      	mov	r0, r3
 8028a84:	f7fe f89e 	bl	8026bc4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8028a88:	4b19      	ldr	r3, [pc, #100]	@ (8028af0 <xTaskPriorityInherit+0xc4>)
 8028a8a:	681b      	ldr	r3, [r3, #0]
 8028a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028a8e:	68bb      	ldr	r3, [r7, #8]
 8028a90:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8028a92:	68bb      	ldr	r3, [r7, #8]
 8028a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028a96:	4b18      	ldr	r3, [pc, #96]	@ (8028af8 <xTaskPriorityInherit+0xcc>)
 8028a98:	681b      	ldr	r3, [r3, #0]
 8028a9a:	429a      	cmp	r2, r3
 8028a9c:	d903      	bls.n	8028aa6 <xTaskPriorityInherit+0x7a>
 8028a9e:	68bb      	ldr	r3, [r7, #8]
 8028aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028aa2:	4a15      	ldr	r2, [pc, #84]	@ (8028af8 <xTaskPriorityInherit+0xcc>)
 8028aa4:	6013      	str	r3, [r2, #0]
 8028aa6:	68bb      	ldr	r3, [r7, #8]
 8028aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028aaa:	4613      	mov	r3, r2
 8028aac:	009b      	lsls	r3, r3, #2
 8028aae:	4413      	add	r3, r2
 8028ab0:	009b      	lsls	r3, r3, #2
 8028ab2:	4a10      	ldr	r2, [pc, #64]	@ (8028af4 <xTaskPriorityInherit+0xc8>)
 8028ab4:	441a      	add	r2, r3
 8028ab6:	68bb      	ldr	r3, [r7, #8]
 8028ab8:	3304      	adds	r3, #4
 8028aba:	4619      	mov	r1, r3
 8028abc:	4610      	mov	r0, r2
 8028abe:	f7fe f824 	bl	8026b0a <vListInsertEnd>
 8028ac2:	e004      	b.n	8028ace <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8028ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8028af0 <xTaskPriorityInherit+0xc4>)
 8028ac6:	681b      	ldr	r3, [r3, #0]
 8028ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028aca:	68bb      	ldr	r3, [r7, #8]
 8028acc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8028ace:	2301      	movs	r3, #1
 8028ad0:	60fb      	str	r3, [r7, #12]
 8028ad2:	e008      	b.n	8028ae6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8028ad4:	68bb      	ldr	r3, [r7, #8]
 8028ad6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8028ad8:	4b05      	ldr	r3, [pc, #20]	@ (8028af0 <xTaskPriorityInherit+0xc4>)
 8028ada:	681b      	ldr	r3, [r3, #0]
 8028adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028ade:	429a      	cmp	r2, r3
 8028ae0:	d201      	bcs.n	8028ae6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8028ae2:	2301      	movs	r3, #1
 8028ae4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8028ae6:	68fb      	ldr	r3, [r7, #12]
	}
 8028ae8:	4618      	mov	r0, r3
 8028aea:	3710      	adds	r7, #16
 8028aec:	46bd      	mov	sp, r7
 8028aee:	bd80      	pop	{r7, pc}
 8028af0:	2001d898 	.word	0x2001d898
 8028af4:	2001d89c 	.word	0x2001d89c
 8028af8:	2001dd74 	.word	0x2001dd74

08028afc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8028afc:	b580      	push	{r7, lr}
 8028afe:	b086      	sub	sp, #24
 8028b00:	af00      	add	r7, sp, #0
 8028b02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8028b04:	687b      	ldr	r3, [r7, #4]
 8028b06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8028b08:	2300      	movs	r3, #0
 8028b0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8028b0c:	687b      	ldr	r3, [r7, #4]
 8028b0e:	2b00      	cmp	r3, #0
 8028b10:	d05c      	beq.n	8028bcc <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8028b12:	4b31      	ldr	r3, [pc, #196]	@ (8028bd8 <xTaskPriorityDisinherit+0xdc>)
 8028b14:	681b      	ldr	r3, [r3, #0]
 8028b16:	693a      	ldr	r2, [r7, #16]
 8028b18:	429a      	cmp	r2, r3
 8028b1a:	d00d      	beq.n	8028b38 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8028b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8028b20:	b672      	cpsid	i
 8028b22:	f383 8811 	msr	BASEPRI, r3
 8028b26:	f3bf 8f6f 	isb	sy
 8028b2a:	f3bf 8f4f 	dsb	sy
 8028b2e:	b662      	cpsie	i
 8028b30:	60fb      	str	r3, [r7, #12]
}
 8028b32:	bf00      	nop
 8028b34:	bf00      	nop
 8028b36:	e7fd      	b.n	8028b34 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8028b38:	693b      	ldr	r3, [r7, #16]
 8028b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8028b3c:	2b00      	cmp	r3, #0
 8028b3e:	d10d      	bne.n	8028b5c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8028b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8028b44:	b672      	cpsid	i
 8028b46:	f383 8811 	msr	BASEPRI, r3
 8028b4a:	f3bf 8f6f 	isb	sy
 8028b4e:	f3bf 8f4f 	dsb	sy
 8028b52:	b662      	cpsie	i
 8028b54:	60bb      	str	r3, [r7, #8]
}
 8028b56:	bf00      	nop
 8028b58:	bf00      	nop
 8028b5a:	e7fd      	b.n	8028b58 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8028b5c:	693b      	ldr	r3, [r7, #16]
 8028b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8028b60:	1e5a      	subs	r2, r3, #1
 8028b62:	693b      	ldr	r3, [r7, #16]
 8028b64:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8028b66:	693b      	ldr	r3, [r7, #16]
 8028b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028b6a:	693b      	ldr	r3, [r7, #16]
 8028b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8028b6e:	429a      	cmp	r2, r3
 8028b70:	d02c      	beq.n	8028bcc <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8028b72:	693b      	ldr	r3, [r7, #16]
 8028b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8028b76:	2b00      	cmp	r3, #0
 8028b78:	d128      	bne.n	8028bcc <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8028b7a:	693b      	ldr	r3, [r7, #16]
 8028b7c:	3304      	adds	r3, #4
 8028b7e:	4618      	mov	r0, r3
 8028b80:	f7fe f820 	bl	8026bc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8028b84:	693b      	ldr	r3, [r7, #16]
 8028b86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8028b88:	693b      	ldr	r3, [r7, #16]
 8028b8a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8028b8c:	693b      	ldr	r3, [r7, #16]
 8028b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028b90:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8028b94:	693b      	ldr	r3, [r7, #16]
 8028b96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8028b98:	693b      	ldr	r3, [r7, #16]
 8028b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8028bdc <xTaskPriorityDisinherit+0xe0>)
 8028b9e:	681b      	ldr	r3, [r3, #0]
 8028ba0:	429a      	cmp	r2, r3
 8028ba2:	d903      	bls.n	8028bac <xTaskPriorityDisinherit+0xb0>
 8028ba4:	693b      	ldr	r3, [r7, #16]
 8028ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8028bdc <xTaskPriorityDisinherit+0xe0>)
 8028baa:	6013      	str	r3, [r2, #0]
 8028bac:	693b      	ldr	r3, [r7, #16]
 8028bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028bb0:	4613      	mov	r3, r2
 8028bb2:	009b      	lsls	r3, r3, #2
 8028bb4:	4413      	add	r3, r2
 8028bb6:	009b      	lsls	r3, r3, #2
 8028bb8:	4a09      	ldr	r2, [pc, #36]	@ (8028be0 <xTaskPriorityDisinherit+0xe4>)
 8028bba:	441a      	add	r2, r3
 8028bbc:	693b      	ldr	r3, [r7, #16]
 8028bbe:	3304      	adds	r3, #4
 8028bc0:	4619      	mov	r1, r3
 8028bc2:	4610      	mov	r0, r2
 8028bc4:	f7fd ffa1 	bl	8026b0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8028bc8:	2301      	movs	r3, #1
 8028bca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8028bcc:	697b      	ldr	r3, [r7, #20]
	}
 8028bce:	4618      	mov	r0, r3
 8028bd0:	3718      	adds	r7, #24
 8028bd2:	46bd      	mov	sp, r7
 8028bd4:	bd80      	pop	{r7, pc}
 8028bd6:	bf00      	nop
 8028bd8:	2001d898 	.word	0x2001d898
 8028bdc:	2001dd74 	.word	0x2001dd74
 8028be0:	2001d89c 	.word	0x2001d89c

08028be4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8028be4:	b580      	push	{r7, lr}
 8028be6:	b088      	sub	sp, #32
 8028be8:	af00      	add	r7, sp, #0
 8028bea:	6078      	str	r0, [r7, #4]
 8028bec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8028bee:	687b      	ldr	r3, [r7, #4]
 8028bf0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8028bf2:	2301      	movs	r3, #1
 8028bf4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8028bf6:	687b      	ldr	r3, [r7, #4]
 8028bf8:	2b00      	cmp	r3, #0
 8028bfa:	d070      	beq.n	8028cde <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8028bfc:	69bb      	ldr	r3, [r7, #24]
 8028bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8028c00:	2b00      	cmp	r3, #0
 8028c02:	d10d      	bne.n	8028c20 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8028c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8028c08:	b672      	cpsid	i
 8028c0a:	f383 8811 	msr	BASEPRI, r3
 8028c0e:	f3bf 8f6f 	isb	sy
 8028c12:	f3bf 8f4f 	dsb	sy
 8028c16:	b662      	cpsie	i
 8028c18:	60fb      	str	r3, [r7, #12]
}
 8028c1a:	bf00      	nop
 8028c1c:	bf00      	nop
 8028c1e:	e7fd      	b.n	8028c1c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8028c20:	69bb      	ldr	r3, [r7, #24]
 8028c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8028c24:	683a      	ldr	r2, [r7, #0]
 8028c26:	429a      	cmp	r2, r3
 8028c28:	d902      	bls.n	8028c30 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8028c2a:	683b      	ldr	r3, [r7, #0]
 8028c2c:	61fb      	str	r3, [r7, #28]
 8028c2e:	e002      	b.n	8028c36 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8028c30:	69bb      	ldr	r3, [r7, #24]
 8028c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8028c34:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8028c36:	69bb      	ldr	r3, [r7, #24]
 8028c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028c3a:	69fa      	ldr	r2, [r7, #28]
 8028c3c:	429a      	cmp	r2, r3
 8028c3e:	d04e      	beq.n	8028cde <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8028c40:	69bb      	ldr	r3, [r7, #24]
 8028c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8028c44:	697a      	ldr	r2, [r7, #20]
 8028c46:	429a      	cmp	r2, r3
 8028c48:	d149      	bne.n	8028cde <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8028c4a:	4b27      	ldr	r3, [pc, #156]	@ (8028ce8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8028c4c:	681b      	ldr	r3, [r3, #0]
 8028c4e:	69ba      	ldr	r2, [r7, #24]
 8028c50:	429a      	cmp	r2, r3
 8028c52:	d10d      	bne.n	8028c70 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8028c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8028c58:	b672      	cpsid	i
 8028c5a:	f383 8811 	msr	BASEPRI, r3
 8028c5e:	f3bf 8f6f 	isb	sy
 8028c62:	f3bf 8f4f 	dsb	sy
 8028c66:	b662      	cpsie	i
 8028c68:	60bb      	str	r3, [r7, #8]
}
 8028c6a:	bf00      	nop
 8028c6c:	bf00      	nop
 8028c6e:	e7fd      	b.n	8028c6c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8028c70:	69bb      	ldr	r3, [r7, #24]
 8028c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028c74:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8028c76:	69bb      	ldr	r3, [r7, #24]
 8028c78:	69fa      	ldr	r2, [r7, #28]
 8028c7a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8028c7c:	69bb      	ldr	r3, [r7, #24]
 8028c7e:	699b      	ldr	r3, [r3, #24]
 8028c80:	2b00      	cmp	r3, #0
 8028c82:	db04      	blt.n	8028c8e <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8028c84:	69fb      	ldr	r3, [r7, #28]
 8028c86:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8028c8a:	69bb      	ldr	r3, [r7, #24]
 8028c8c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8028c8e:	69bb      	ldr	r3, [r7, #24]
 8028c90:	6959      	ldr	r1, [r3, #20]
 8028c92:	693a      	ldr	r2, [r7, #16]
 8028c94:	4613      	mov	r3, r2
 8028c96:	009b      	lsls	r3, r3, #2
 8028c98:	4413      	add	r3, r2
 8028c9a:	009b      	lsls	r3, r3, #2
 8028c9c:	4a13      	ldr	r2, [pc, #76]	@ (8028cec <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8028c9e:	4413      	add	r3, r2
 8028ca0:	4299      	cmp	r1, r3
 8028ca2:	d11c      	bne.n	8028cde <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8028ca4:	69bb      	ldr	r3, [r7, #24]
 8028ca6:	3304      	adds	r3, #4
 8028ca8:	4618      	mov	r0, r3
 8028caa:	f7fd ff8b 	bl	8026bc4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8028cae:	69bb      	ldr	r3, [r7, #24]
 8028cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8028cf0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8028cb4:	681b      	ldr	r3, [r3, #0]
 8028cb6:	429a      	cmp	r2, r3
 8028cb8:	d903      	bls.n	8028cc2 <vTaskPriorityDisinheritAfterTimeout+0xde>
 8028cba:	69bb      	ldr	r3, [r7, #24]
 8028cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8028cf0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8028cc0:	6013      	str	r3, [r2, #0]
 8028cc2:	69bb      	ldr	r3, [r7, #24]
 8028cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028cc6:	4613      	mov	r3, r2
 8028cc8:	009b      	lsls	r3, r3, #2
 8028cca:	4413      	add	r3, r2
 8028ccc:	009b      	lsls	r3, r3, #2
 8028cce:	4a07      	ldr	r2, [pc, #28]	@ (8028cec <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8028cd0:	441a      	add	r2, r3
 8028cd2:	69bb      	ldr	r3, [r7, #24]
 8028cd4:	3304      	adds	r3, #4
 8028cd6:	4619      	mov	r1, r3
 8028cd8:	4610      	mov	r0, r2
 8028cda:	f7fd ff16 	bl	8026b0a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8028cde:	bf00      	nop
 8028ce0:	3720      	adds	r7, #32
 8028ce2:	46bd      	mov	sp, r7
 8028ce4:	bd80      	pop	{r7, pc}
 8028ce6:	bf00      	nop
 8028ce8:	2001d898 	.word	0x2001d898
 8028cec:	2001d89c 	.word	0x2001d89c
 8028cf0:	2001dd74 	.word	0x2001dd74

08028cf4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8028cf4:	b480      	push	{r7}
 8028cf6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8028cf8:	4b07      	ldr	r3, [pc, #28]	@ (8028d18 <pvTaskIncrementMutexHeldCount+0x24>)
 8028cfa:	681b      	ldr	r3, [r3, #0]
 8028cfc:	2b00      	cmp	r3, #0
 8028cfe:	d004      	beq.n	8028d0a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8028d00:	4b05      	ldr	r3, [pc, #20]	@ (8028d18 <pvTaskIncrementMutexHeldCount+0x24>)
 8028d02:	681b      	ldr	r3, [r3, #0]
 8028d04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8028d06:	3201      	adds	r2, #1
 8028d08:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8028d0a:	4b03      	ldr	r3, [pc, #12]	@ (8028d18 <pvTaskIncrementMutexHeldCount+0x24>)
 8028d0c:	681b      	ldr	r3, [r3, #0]
	}
 8028d0e:	4618      	mov	r0, r3
 8028d10:	46bd      	mov	sp, r7
 8028d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028d16:	4770      	bx	lr
 8028d18:	2001d898 	.word	0x2001d898

08028d1c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8028d1c:	b580      	push	{r7, lr}
 8028d1e:	b084      	sub	sp, #16
 8028d20:	af00      	add	r7, sp, #0
 8028d22:	6078      	str	r0, [r7, #4]
 8028d24:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8028d26:	f000 fdd9 	bl	80298dc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8028d2a:	4b20      	ldr	r3, [pc, #128]	@ (8028dac <ulTaskNotifyTake+0x90>)
 8028d2c:	681b      	ldr	r3, [r3, #0]
 8028d2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8028d32:	2b00      	cmp	r3, #0
 8028d34:	d113      	bne.n	8028d5e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8028d36:	4b1d      	ldr	r3, [pc, #116]	@ (8028dac <ulTaskNotifyTake+0x90>)
 8028d38:	681b      	ldr	r3, [r3, #0]
 8028d3a:	2201      	movs	r2, #1
 8028d3c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8028d40:	683b      	ldr	r3, [r7, #0]
 8028d42:	2b00      	cmp	r3, #0
 8028d44:	d00b      	beq.n	8028d5e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8028d46:	2101      	movs	r1, #1
 8028d48:	6838      	ldr	r0, [r7, #0]
 8028d4a:	f000 f8fb 	bl	8028f44 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8028d4e:	4b18      	ldr	r3, [pc, #96]	@ (8028db0 <ulTaskNotifyTake+0x94>)
 8028d50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8028d54:	601a      	str	r2, [r3, #0]
 8028d56:	f3bf 8f4f 	dsb	sy
 8028d5a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8028d5e:	f000 fdf3 	bl	8029948 <vPortExitCritical>

		taskENTER_CRITICAL();
 8028d62:	f000 fdbb 	bl	80298dc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8028d66:	4b11      	ldr	r3, [pc, #68]	@ (8028dac <ulTaskNotifyTake+0x90>)
 8028d68:	681b      	ldr	r3, [r3, #0]
 8028d6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8028d6e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8028d70:	68fb      	ldr	r3, [r7, #12]
 8028d72:	2b00      	cmp	r3, #0
 8028d74:	d00e      	beq.n	8028d94 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8028d76:	687b      	ldr	r3, [r7, #4]
 8028d78:	2b00      	cmp	r3, #0
 8028d7a:	d005      	beq.n	8028d88 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8028d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8028dac <ulTaskNotifyTake+0x90>)
 8028d7e:	681b      	ldr	r3, [r3, #0]
 8028d80:	2200      	movs	r2, #0
 8028d82:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8028d86:	e005      	b.n	8028d94 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8028d88:	4b08      	ldr	r3, [pc, #32]	@ (8028dac <ulTaskNotifyTake+0x90>)
 8028d8a:	681b      	ldr	r3, [r3, #0]
 8028d8c:	68fa      	ldr	r2, [r7, #12]
 8028d8e:	3a01      	subs	r2, #1
 8028d90:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8028d94:	4b05      	ldr	r3, [pc, #20]	@ (8028dac <ulTaskNotifyTake+0x90>)
 8028d96:	681b      	ldr	r3, [r3, #0]
 8028d98:	2200      	movs	r2, #0
 8028d9a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8028d9e:	f000 fdd3 	bl	8029948 <vPortExitCritical>

		return ulReturn;
 8028da2:	68fb      	ldr	r3, [r7, #12]
	}
 8028da4:	4618      	mov	r0, r3
 8028da6:	3710      	adds	r7, #16
 8028da8:	46bd      	mov	sp, r7
 8028daa:	bd80      	pop	{r7, pc}
 8028dac:	2001d898 	.word	0x2001d898
 8028db0:	e000ed04 	.word	0xe000ed04

08028db4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8028db4:	b580      	push	{r7, lr}
 8028db6:	b08a      	sub	sp, #40	@ 0x28
 8028db8:	af00      	add	r7, sp, #0
 8028dba:	60f8      	str	r0, [r7, #12]
 8028dbc:	60b9      	str	r1, [r7, #8]
 8028dbe:	603b      	str	r3, [r7, #0]
 8028dc0:	4613      	mov	r3, r2
 8028dc2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8028dc4:	2301      	movs	r3, #1
 8028dc6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8028dc8:	68fb      	ldr	r3, [r7, #12]
 8028dca:	2b00      	cmp	r3, #0
 8028dcc:	d10d      	bne.n	8028dea <xTaskGenericNotify+0x36>
	__asm volatile
 8028dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8028dd2:	b672      	cpsid	i
 8028dd4:	f383 8811 	msr	BASEPRI, r3
 8028dd8:	f3bf 8f6f 	isb	sy
 8028ddc:	f3bf 8f4f 	dsb	sy
 8028de0:	b662      	cpsie	i
 8028de2:	61bb      	str	r3, [r7, #24]
}
 8028de4:	bf00      	nop
 8028de6:	bf00      	nop
 8028de8:	e7fd      	b.n	8028de6 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8028dea:	68fb      	ldr	r3, [r7, #12]
 8028dec:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8028dee:	f000 fd75 	bl	80298dc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8028df2:	683b      	ldr	r3, [r7, #0]
 8028df4:	2b00      	cmp	r3, #0
 8028df6:	d004      	beq.n	8028e02 <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8028df8:	6a3b      	ldr	r3, [r7, #32]
 8028dfa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8028dfe:	683b      	ldr	r3, [r7, #0]
 8028e00:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8028e02:	6a3b      	ldr	r3, [r7, #32]
 8028e04:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8028e08:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8028e0a:	6a3b      	ldr	r3, [r7, #32]
 8028e0c:	2202      	movs	r2, #2
 8028e0e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8028e12:	79fb      	ldrb	r3, [r7, #7]
 8028e14:	2b04      	cmp	r3, #4
 8028e16:	d82e      	bhi.n	8028e76 <xTaskGenericNotify+0xc2>
 8028e18:	a201      	add	r2, pc, #4	@ (adr r2, 8028e20 <xTaskGenericNotify+0x6c>)
 8028e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028e1e:	bf00      	nop
 8028e20:	08028e9f 	.word	0x08028e9f
 8028e24:	08028e35 	.word	0x08028e35
 8028e28:	08028e47 	.word	0x08028e47
 8028e2c:	08028e57 	.word	0x08028e57
 8028e30:	08028e61 	.word	0x08028e61
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8028e34:	6a3b      	ldr	r3, [r7, #32]
 8028e36:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8028e3a:	68bb      	ldr	r3, [r7, #8]
 8028e3c:	431a      	orrs	r2, r3
 8028e3e:	6a3b      	ldr	r3, [r7, #32]
 8028e40:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8028e44:	e02e      	b.n	8028ea4 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8028e46:	6a3b      	ldr	r3, [r7, #32]
 8028e48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8028e4c:	1c5a      	adds	r2, r3, #1
 8028e4e:	6a3b      	ldr	r3, [r7, #32]
 8028e50:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8028e54:	e026      	b.n	8028ea4 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8028e56:	6a3b      	ldr	r3, [r7, #32]
 8028e58:	68ba      	ldr	r2, [r7, #8]
 8028e5a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8028e5e:	e021      	b.n	8028ea4 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8028e60:	7ffb      	ldrb	r3, [r7, #31]
 8028e62:	2b02      	cmp	r3, #2
 8028e64:	d004      	beq.n	8028e70 <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8028e66:	6a3b      	ldr	r3, [r7, #32]
 8028e68:	68ba      	ldr	r2, [r7, #8]
 8028e6a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8028e6e:	e019      	b.n	8028ea4 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 8028e70:	2300      	movs	r3, #0
 8028e72:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8028e74:	e016      	b.n	8028ea4 <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8028e76:	6a3b      	ldr	r3, [r7, #32]
 8028e78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8028e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8028e80:	d00f      	beq.n	8028ea2 <xTaskGenericNotify+0xee>
	__asm volatile
 8028e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8028e86:	b672      	cpsid	i
 8028e88:	f383 8811 	msr	BASEPRI, r3
 8028e8c:	f3bf 8f6f 	isb	sy
 8028e90:	f3bf 8f4f 	dsb	sy
 8028e94:	b662      	cpsie	i
 8028e96:	617b      	str	r3, [r7, #20]
}
 8028e98:	bf00      	nop
 8028e9a:	bf00      	nop
 8028e9c:	e7fd      	b.n	8028e9a <xTaskGenericNotify+0xe6>
					break;
 8028e9e:	bf00      	nop
 8028ea0:	e000      	b.n	8028ea4 <xTaskGenericNotify+0xf0>

					break;
 8028ea2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8028ea4:	7ffb      	ldrb	r3, [r7, #31]
 8028ea6:	2b01      	cmp	r3, #1
 8028ea8:	d13d      	bne.n	8028f26 <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8028eaa:	6a3b      	ldr	r3, [r7, #32]
 8028eac:	3304      	adds	r3, #4
 8028eae:	4618      	mov	r0, r3
 8028eb0:	f7fd fe88 	bl	8026bc4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8028eb4:	6a3b      	ldr	r3, [r7, #32]
 8028eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8028f34 <xTaskGenericNotify+0x180>)
 8028eba:	681b      	ldr	r3, [r3, #0]
 8028ebc:	429a      	cmp	r2, r3
 8028ebe:	d903      	bls.n	8028ec8 <xTaskGenericNotify+0x114>
 8028ec0:	6a3b      	ldr	r3, [r7, #32]
 8028ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8028f34 <xTaskGenericNotify+0x180>)
 8028ec6:	6013      	str	r3, [r2, #0]
 8028ec8:	6a3b      	ldr	r3, [r7, #32]
 8028eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028ecc:	4613      	mov	r3, r2
 8028ece:	009b      	lsls	r3, r3, #2
 8028ed0:	4413      	add	r3, r2
 8028ed2:	009b      	lsls	r3, r3, #2
 8028ed4:	4a18      	ldr	r2, [pc, #96]	@ (8028f38 <xTaskGenericNotify+0x184>)
 8028ed6:	441a      	add	r2, r3
 8028ed8:	6a3b      	ldr	r3, [r7, #32]
 8028eda:	3304      	adds	r3, #4
 8028edc:	4619      	mov	r1, r3
 8028ede:	4610      	mov	r0, r2
 8028ee0:	f7fd fe13 	bl	8026b0a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8028ee4:	6a3b      	ldr	r3, [r7, #32]
 8028ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028ee8:	2b00      	cmp	r3, #0
 8028eea:	d00d      	beq.n	8028f08 <xTaskGenericNotify+0x154>
	__asm volatile
 8028eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8028ef0:	b672      	cpsid	i
 8028ef2:	f383 8811 	msr	BASEPRI, r3
 8028ef6:	f3bf 8f6f 	isb	sy
 8028efa:	f3bf 8f4f 	dsb	sy
 8028efe:	b662      	cpsie	i
 8028f00:	613b      	str	r3, [r7, #16]
}
 8028f02:	bf00      	nop
 8028f04:	bf00      	nop
 8028f06:	e7fd      	b.n	8028f04 <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8028f08:	6a3b      	ldr	r3, [r7, #32]
 8028f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8028f3c <xTaskGenericNotify+0x188>)
 8028f0e:	681b      	ldr	r3, [r3, #0]
 8028f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028f12:	429a      	cmp	r2, r3
 8028f14:	d907      	bls.n	8028f26 <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8028f16:	4b0a      	ldr	r3, [pc, #40]	@ (8028f40 <xTaskGenericNotify+0x18c>)
 8028f18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8028f1c:	601a      	str	r2, [r3, #0]
 8028f1e:	f3bf 8f4f 	dsb	sy
 8028f22:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8028f26:	f000 fd0f 	bl	8029948 <vPortExitCritical>

		return xReturn;
 8028f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8028f2c:	4618      	mov	r0, r3
 8028f2e:	3728      	adds	r7, #40	@ 0x28
 8028f30:	46bd      	mov	sp, r7
 8028f32:	bd80      	pop	{r7, pc}
 8028f34:	2001dd74 	.word	0x2001dd74
 8028f38:	2001d89c 	.word	0x2001d89c
 8028f3c:	2001d898 	.word	0x2001d898
 8028f40:	e000ed04 	.word	0xe000ed04

08028f44 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8028f44:	b580      	push	{r7, lr}
 8028f46:	b084      	sub	sp, #16
 8028f48:	af00      	add	r7, sp, #0
 8028f4a:	6078      	str	r0, [r7, #4]
 8028f4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8028f4e:	4b21      	ldr	r3, [pc, #132]	@ (8028fd4 <prvAddCurrentTaskToDelayedList+0x90>)
 8028f50:	681b      	ldr	r3, [r3, #0]
 8028f52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8028f54:	4b20      	ldr	r3, [pc, #128]	@ (8028fd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8028f56:	681b      	ldr	r3, [r3, #0]
 8028f58:	3304      	adds	r3, #4
 8028f5a:	4618      	mov	r0, r3
 8028f5c:	f7fd fe32 	bl	8026bc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8028f60:	687b      	ldr	r3, [r7, #4]
 8028f62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8028f66:	d10a      	bne.n	8028f7e <prvAddCurrentTaskToDelayedList+0x3a>
 8028f68:	683b      	ldr	r3, [r7, #0]
 8028f6a:	2b00      	cmp	r3, #0
 8028f6c:	d007      	beq.n	8028f7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8028f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8028fd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8028f70:	681b      	ldr	r3, [r3, #0]
 8028f72:	3304      	adds	r3, #4
 8028f74:	4619      	mov	r1, r3
 8028f76:	4819      	ldr	r0, [pc, #100]	@ (8028fdc <prvAddCurrentTaskToDelayedList+0x98>)
 8028f78:	f7fd fdc7 	bl	8026b0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8028f7c:	e026      	b.n	8028fcc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8028f7e:	68fa      	ldr	r2, [r7, #12]
 8028f80:	687b      	ldr	r3, [r7, #4]
 8028f82:	4413      	add	r3, r2
 8028f84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8028f86:	4b14      	ldr	r3, [pc, #80]	@ (8028fd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8028f88:	681b      	ldr	r3, [r3, #0]
 8028f8a:	68ba      	ldr	r2, [r7, #8]
 8028f8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8028f8e:	68ba      	ldr	r2, [r7, #8]
 8028f90:	68fb      	ldr	r3, [r7, #12]
 8028f92:	429a      	cmp	r2, r3
 8028f94:	d209      	bcs.n	8028faa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8028f96:	4b12      	ldr	r3, [pc, #72]	@ (8028fe0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8028f98:	681a      	ldr	r2, [r3, #0]
 8028f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8028fd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8028f9c:	681b      	ldr	r3, [r3, #0]
 8028f9e:	3304      	adds	r3, #4
 8028fa0:	4619      	mov	r1, r3
 8028fa2:	4610      	mov	r0, r2
 8028fa4:	f7fd fdd5 	bl	8026b52 <vListInsert>
}
 8028fa8:	e010      	b.n	8028fcc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8028faa:	4b0e      	ldr	r3, [pc, #56]	@ (8028fe4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8028fac:	681a      	ldr	r2, [r3, #0]
 8028fae:	4b0a      	ldr	r3, [pc, #40]	@ (8028fd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8028fb0:	681b      	ldr	r3, [r3, #0]
 8028fb2:	3304      	adds	r3, #4
 8028fb4:	4619      	mov	r1, r3
 8028fb6:	4610      	mov	r0, r2
 8028fb8:	f7fd fdcb 	bl	8026b52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8028fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8028fe8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8028fbe:	681b      	ldr	r3, [r3, #0]
 8028fc0:	68ba      	ldr	r2, [r7, #8]
 8028fc2:	429a      	cmp	r2, r3
 8028fc4:	d202      	bcs.n	8028fcc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8028fc6:	4a08      	ldr	r2, [pc, #32]	@ (8028fe8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8028fc8:	68bb      	ldr	r3, [r7, #8]
 8028fca:	6013      	str	r3, [r2, #0]
}
 8028fcc:	bf00      	nop
 8028fce:	3710      	adds	r7, #16
 8028fd0:	46bd      	mov	sp, r7
 8028fd2:	bd80      	pop	{r7, pc}
 8028fd4:	2001dd70 	.word	0x2001dd70
 8028fd8:	2001d898 	.word	0x2001d898
 8028fdc:	2001dd58 	.word	0x2001dd58
 8028fe0:	2001dd28 	.word	0x2001dd28
 8028fe4:	2001dd24 	.word	0x2001dd24
 8028fe8:	2001dd8c 	.word	0x2001dd8c

08028fec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8028fec:	b580      	push	{r7, lr}
 8028fee:	b08a      	sub	sp, #40	@ 0x28
 8028ff0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8028ff2:	2300      	movs	r3, #0
 8028ff4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8028ff6:	f000 fb21 	bl	802963c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8028ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8029074 <xTimerCreateTimerTask+0x88>)
 8028ffc:	681b      	ldr	r3, [r3, #0]
 8028ffe:	2b00      	cmp	r3, #0
 8029000:	d021      	beq.n	8029046 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8029002:	2300      	movs	r3, #0
 8029004:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8029006:	2300      	movs	r3, #0
 8029008:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 802900a:	1d3a      	adds	r2, r7, #4
 802900c:	f107 0108 	add.w	r1, r7, #8
 8029010:	f107 030c 	add.w	r3, r7, #12
 8029014:	4618      	mov	r0, r3
 8029016:	f7fd fd31 	bl	8026a7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 802901a:	6879      	ldr	r1, [r7, #4]
 802901c:	68bb      	ldr	r3, [r7, #8]
 802901e:	68fa      	ldr	r2, [r7, #12]
 8029020:	9202      	str	r2, [sp, #8]
 8029022:	9301      	str	r3, [sp, #4]
 8029024:	2302      	movs	r3, #2
 8029026:	9300      	str	r3, [sp, #0]
 8029028:	2300      	movs	r3, #0
 802902a:	460a      	mov	r2, r1
 802902c:	4912      	ldr	r1, [pc, #72]	@ (8029078 <xTimerCreateTimerTask+0x8c>)
 802902e:	4813      	ldr	r0, [pc, #76]	@ (802907c <xTimerCreateTimerTask+0x90>)
 8029030:	f7fe fe66 	bl	8027d00 <xTaskCreateStatic>
 8029034:	4603      	mov	r3, r0
 8029036:	4a12      	ldr	r2, [pc, #72]	@ (8029080 <xTimerCreateTimerTask+0x94>)
 8029038:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 802903a:	4b11      	ldr	r3, [pc, #68]	@ (8029080 <xTimerCreateTimerTask+0x94>)
 802903c:	681b      	ldr	r3, [r3, #0]
 802903e:	2b00      	cmp	r3, #0
 8029040:	d001      	beq.n	8029046 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8029042:	2301      	movs	r3, #1
 8029044:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8029046:	697b      	ldr	r3, [r7, #20]
 8029048:	2b00      	cmp	r3, #0
 802904a:	d10d      	bne.n	8029068 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 802904c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029050:	b672      	cpsid	i
 8029052:	f383 8811 	msr	BASEPRI, r3
 8029056:	f3bf 8f6f 	isb	sy
 802905a:	f3bf 8f4f 	dsb	sy
 802905e:	b662      	cpsie	i
 8029060:	613b      	str	r3, [r7, #16]
}
 8029062:	bf00      	nop
 8029064:	bf00      	nop
 8029066:	e7fd      	b.n	8029064 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8029068:	697b      	ldr	r3, [r7, #20]
}
 802906a:	4618      	mov	r0, r3
 802906c:	3718      	adds	r7, #24
 802906e:	46bd      	mov	sp, r7
 8029070:	bd80      	pop	{r7, pc}
 8029072:	bf00      	nop
 8029074:	2001ddc8 	.word	0x2001ddc8
 8029078:	080315b0 	.word	0x080315b0
 802907c:	080291c5 	.word	0x080291c5
 8029080:	2001ddcc 	.word	0x2001ddcc

08029084 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8029084:	b580      	push	{r7, lr}
 8029086:	b08a      	sub	sp, #40	@ 0x28
 8029088:	af00      	add	r7, sp, #0
 802908a:	60f8      	str	r0, [r7, #12]
 802908c:	60b9      	str	r1, [r7, #8]
 802908e:	607a      	str	r2, [r7, #4]
 8029090:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8029092:	2300      	movs	r3, #0
 8029094:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8029096:	68fb      	ldr	r3, [r7, #12]
 8029098:	2b00      	cmp	r3, #0
 802909a:	d10d      	bne.n	80290b8 <xTimerGenericCommand+0x34>
	__asm volatile
 802909c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80290a0:	b672      	cpsid	i
 80290a2:	f383 8811 	msr	BASEPRI, r3
 80290a6:	f3bf 8f6f 	isb	sy
 80290aa:	f3bf 8f4f 	dsb	sy
 80290ae:	b662      	cpsie	i
 80290b0:	623b      	str	r3, [r7, #32]
}
 80290b2:	bf00      	nop
 80290b4:	bf00      	nop
 80290b6:	e7fd      	b.n	80290b4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80290b8:	4b19      	ldr	r3, [pc, #100]	@ (8029120 <xTimerGenericCommand+0x9c>)
 80290ba:	681b      	ldr	r3, [r3, #0]
 80290bc:	2b00      	cmp	r3, #0
 80290be:	d02a      	beq.n	8029116 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80290c0:	68bb      	ldr	r3, [r7, #8]
 80290c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80290c4:	687b      	ldr	r3, [r7, #4]
 80290c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80290c8:	68fb      	ldr	r3, [r7, #12]
 80290ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80290cc:	68bb      	ldr	r3, [r7, #8]
 80290ce:	2b05      	cmp	r3, #5
 80290d0:	dc18      	bgt.n	8029104 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80290d2:	f7ff fc8d 	bl	80289f0 <xTaskGetSchedulerState>
 80290d6:	4603      	mov	r3, r0
 80290d8:	2b02      	cmp	r3, #2
 80290da:	d109      	bne.n	80290f0 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80290dc:	4b10      	ldr	r3, [pc, #64]	@ (8029120 <xTimerGenericCommand+0x9c>)
 80290de:	6818      	ldr	r0, [r3, #0]
 80290e0:	f107 0110 	add.w	r1, r7, #16
 80290e4:	2300      	movs	r3, #0
 80290e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80290e8:	f7fd ff66 	bl	8026fb8 <xQueueGenericSend>
 80290ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80290ee:	e012      	b.n	8029116 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80290f0:	4b0b      	ldr	r3, [pc, #44]	@ (8029120 <xTimerGenericCommand+0x9c>)
 80290f2:	6818      	ldr	r0, [r3, #0]
 80290f4:	f107 0110 	add.w	r1, r7, #16
 80290f8:	2300      	movs	r3, #0
 80290fa:	2200      	movs	r2, #0
 80290fc:	f7fd ff5c 	bl	8026fb8 <xQueueGenericSend>
 8029100:	6278      	str	r0, [r7, #36]	@ 0x24
 8029102:	e008      	b.n	8029116 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8029104:	4b06      	ldr	r3, [pc, #24]	@ (8029120 <xTimerGenericCommand+0x9c>)
 8029106:	6818      	ldr	r0, [r3, #0]
 8029108:	f107 0110 	add.w	r1, r7, #16
 802910c:	2300      	movs	r3, #0
 802910e:	683a      	ldr	r2, [r7, #0]
 8029110:	f7fe f85c 	bl	80271cc <xQueueGenericSendFromISR>
 8029114:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8029116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8029118:	4618      	mov	r0, r3
 802911a:	3728      	adds	r7, #40	@ 0x28
 802911c:	46bd      	mov	sp, r7
 802911e:	bd80      	pop	{r7, pc}
 8029120:	2001ddc8 	.word	0x2001ddc8

08029124 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8029124:	b580      	push	{r7, lr}
 8029126:	b088      	sub	sp, #32
 8029128:	af02      	add	r7, sp, #8
 802912a:	6078      	str	r0, [r7, #4]
 802912c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802912e:	4b24      	ldr	r3, [pc, #144]	@ (80291c0 <prvProcessExpiredTimer+0x9c>)
 8029130:	681b      	ldr	r3, [r3, #0]
 8029132:	68db      	ldr	r3, [r3, #12]
 8029134:	68db      	ldr	r3, [r3, #12]
 8029136:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8029138:	697b      	ldr	r3, [r7, #20]
 802913a:	3304      	adds	r3, #4
 802913c:	4618      	mov	r0, r3
 802913e:	f7fd fd41 	bl	8026bc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8029142:	697b      	ldr	r3, [r7, #20]
 8029144:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8029148:	f003 0304 	and.w	r3, r3, #4
 802914c:	2b00      	cmp	r3, #0
 802914e:	d025      	beq.n	802919c <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8029150:	697b      	ldr	r3, [r7, #20]
 8029152:	699a      	ldr	r2, [r3, #24]
 8029154:	687b      	ldr	r3, [r7, #4]
 8029156:	18d1      	adds	r1, r2, r3
 8029158:	687b      	ldr	r3, [r7, #4]
 802915a:	683a      	ldr	r2, [r7, #0]
 802915c:	6978      	ldr	r0, [r7, #20]
 802915e:	f000 f8d7 	bl	8029310 <prvInsertTimerInActiveList>
 8029162:	4603      	mov	r3, r0
 8029164:	2b00      	cmp	r3, #0
 8029166:	d022      	beq.n	80291ae <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8029168:	2300      	movs	r3, #0
 802916a:	9300      	str	r3, [sp, #0]
 802916c:	2300      	movs	r3, #0
 802916e:	687a      	ldr	r2, [r7, #4]
 8029170:	2100      	movs	r1, #0
 8029172:	6978      	ldr	r0, [r7, #20]
 8029174:	f7ff ff86 	bl	8029084 <xTimerGenericCommand>
 8029178:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 802917a:	693b      	ldr	r3, [r7, #16]
 802917c:	2b00      	cmp	r3, #0
 802917e:	d116      	bne.n	80291ae <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8029180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029184:	b672      	cpsid	i
 8029186:	f383 8811 	msr	BASEPRI, r3
 802918a:	f3bf 8f6f 	isb	sy
 802918e:	f3bf 8f4f 	dsb	sy
 8029192:	b662      	cpsie	i
 8029194:	60fb      	str	r3, [r7, #12]
}
 8029196:	bf00      	nop
 8029198:	bf00      	nop
 802919a:	e7fd      	b.n	8029198 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802919c:	697b      	ldr	r3, [r7, #20]
 802919e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80291a2:	f023 0301 	bic.w	r3, r3, #1
 80291a6:	b2da      	uxtb	r2, r3
 80291a8:	697b      	ldr	r3, [r7, #20]
 80291aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80291ae:	697b      	ldr	r3, [r7, #20]
 80291b0:	6a1b      	ldr	r3, [r3, #32]
 80291b2:	6978      	ldr	r0, [r7, #20]
 80291b4:	4798      	blx	r3
}
 80291b6:	bf00      	nop
 80291b8:	3718      	adds	r7, #24
 80291ba:	46bd      	mov	sp, r7
 80291bc:	bd80      	pop	{r7, pc}
 80291be:	bf00      	nop
 80291c0:	2001ddc0 	.word	0x2001ddc0

080291c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80291c4:	b580      	push	{r7, lr}
 80291c6:	b084      	sub	sp, #16
 80291c8:	af00      	add	r7, sp, #0
 80291ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80291cc:	f107 0308 	add.w	r3, r7, #8
 80291d0:	4618      	mov	r0, r3
 80291d2:	f000 f859 	bl	8029288 <prvGetNextExpireTime>
 80291d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80291d8:	68bb      	ldr	r3, [r7, #8]
 80291da:	4619      	mov	r1, r3
 80291dc:	68f8      	ldr	r0, [r7, #12]
 80291de:	f000 f805 	bl	80291ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80291e2:	f000 f8d7 	bl	8029394 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80291e6:	bf00      	nop
 80291e8:	e7f0      	b.n	80291cc <prvTimerTask+0x8>
	...

080291ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80291ec:	b580      	push	{r7, lr}
 80291ee:	b084      	sub	sp, #16
 80291f0:	af00      	add	r7, sp, #0
 80291f2:	6078      	str	r0, [r7, #4]
 80291f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80291f6:	f7fe fff5 	bl	80281e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80291fa:	f107 0308 	add.w	r3, r7, #8
 80291fe:	4618      	mov	r0, r3
 8029200:	f000 f866 	bl	80292d0 <prvSampleTimeNow>
 8029204:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8029206:	68bb      	ldr	r3, [r7, #8]
 8029208:	2b00      	cmp	r3, #0
 802920a:	d130      	bne.n	802926e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 802920c:	683b      	ldr	r3, [r7, #0]
 802920e:	2b00      	cmp	r3, #0
 8029210:	d10a      	bne.n	8029228 <prvProcessTimerOrBlockTask+0x3c>
 8029212:	687a      	ldr	r2, [r7, #4]
 8029214:	68fb      	ldr	r3, [r7, #12]
 8029216:	429a      	cmp	r2, r3
 8029218:	d806      	bhi.n	8029228 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 802921a:	f7fe fff1 	bl	8028200 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 802921e:	68f9      	ldr	r1, [r7, #12]
 8029220:	6878      	ldr	r0, [r7, #4]
 8029222:	f7ff ff7f 	bl	8029124 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8029226:	e024      	b.n	8029272 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8029228:	683b      	ldr	r3, [r7, #0]
 802922a:	2b00      	cmp	r3, #0
 802922c:	d008      	beq.n	8029240 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 802922e:	4b13      	ldr	r3, [pc, #76]	@ (802927c <prvProcessTimerOrBlockTask+0x90>)
 8029230:	681b      	ldr	r3, [r3, #0]
 8029232:	681b      	ldr	r3, [r3, #0]
 8029234:	2b00      	cmp	r3, #0
 8029236:	d101      	bne.n	802923c <prvProcessTimerOrBlockTask+0x50>
 8029238:	2301      	movs	r3, #1
 802923a:	e000      	b.n	802923e <prvProcessTimerOrBlockTask+0x52>
 802923c:	2300      	movs	r3, #0
 802923e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8029240:	4b0f      	ldr	r3, [pc, #60]	@ (8029280 <prvProcessTimerOrBlockTask+0x94>)
 8029242:	6818      	ldr	r0, [r3, #0]
 8029244:	687a      	ldr	r2, [r7, #4]
 8029246:	68fb      	ldr	r3, [r7, #12]
 8029248:	1ad3      	subs	r3, r2, r3
 802924a:	683a      	ldr	r2, [r7, #0]
 802924c:	4619      	mov	r1, r3
 802924e:	f7fe fd23 	bl	8027c98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8029252:	f7fe ffd5 	bl	8028200 <xTaskResumeAll>
 8029256:	4603      	mov	r3, r0
 8029258:	2b00      	cmp	r3, #0
 802925a:	d10a      	bne.n	8029272 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 802925c:	4b09      	ldr	r3, [pc, #36]	@ (8029284 <prvProcessTimerOrBlockTask+0x98>)
 802925e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8029262:	601a      	str	r2, [r3, #0]
 8029264:	f3bf 8f4f 	dsb	sy
 8029268:	f3bf 8f6f 	isb	sy
}
 802926c:	e001      	b.n	8029272 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 802926e:	f7fe ffc7 	bl	8028200 <xTaskResumeAll>
}
 8029272:	bf00      	nop
 8029274:	3710      	adds	r7, #16
 8029276:	46bd      	mov	sp, r7
 8029278:	bd80      	pop	{r7, pc}
 802927a:	bf00      	nop
 802927c:	2001ddc4 	.word	0x2001ddc4
 8029280:	2001ddc8 	.word	0x2001ddc8
 8029284:	e000ed04 	.word	0xe000ed04

08029288 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8029288:	b480      	push	{r7}
 802928a:	b085      	sub	sp, #20
 802928c:	af00      	add	r7, sp, #0
 802928e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8029290:	4b0e      	ldr	r3, [pc, #56]	@ (80292cc <prvGetNextExpireTime+0x44>)
 8029292:	681b      	ldr	r3, [r3, #0]
 8029294:	681b      	ldr	r3, [r3, #0]
 8029296:	2b00      	cmp	r3, #0
 8029298:	d101      	bne.n	802929e <prvGetNextExpireTime+0x16>
 802929a:	2201      	movs	r2, #1
 802929c:	e000      	b.n	80292a0 <prvGetNextExpireTime+0x18>
 802929e:	2200      	movs	r2, #0
 80292a0:	687b      	ldr	r3, [r7, #4]
 80292a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80292a4:	687b      	ldr	r3, [r7, #4]
 80292a6:	681b      	ldr	r3, [r3, #0]
 80292a8:	2b00      	cmp	r3, #0
 80292aa:	d105      	bne.n	80292b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80292ac:	4b07      	ldr	r3, [pc, #28]	@ (80292cc <prvGetNextExpireTime+0x44>)
 80292ae:	681b      	ldr	r3, [r3, #0]
 80292b0:	68db      	ldr	r3, [r3, #12]
 80292b2:	681b      	ldr	r3, [r3, #0]
 80292b4:	60fb      	str	r3, [r7, #12]
 80292b6:	e001      	b.n	80292bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80292b8:	2300      	movs	r3, #0
 80292ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80292bc:	68fb      	ldr	r3, [r7, #12]
}
 80292be:	4618      	mov	r0, r3
 80292c0:	3714      	adds	r7, #20
 80292c2:	46bd      	mov	sp, r7
 80292c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80292c8:	4770      	bx	lr
 80292ca:	bf00      	nop
 80292cc:	2001ddc0 	.word	0x2001ddc0

080292d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80292d0:	b580      	push	{r7, lr}
 80292d2:	b084      	sub	sp, #16
 80292d4:	af00      	add	r7, sp, #0
 80292d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80292d8:	f7ff f832 	bl	8028340 <xTaskGetTickCount>
 80292dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80292de:	4b0b      	ldr	r3, [pc, #44]	@ (802930c <prvSampleTimeNow+0x3c>)
 80292e0:	681b      	ldr	r3, [r3, #0]
 80292e2:	68fa      	ldr	r2, [r7, #12]
 80292e4:	429a      	cmp	r2, r3
 80292e6:	d205      	bcs.n	80292f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80292e8:	f000 f940 	bl	802956c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80292ec:	687b      	ldr	r3, [r7, #4]
 80292ee:	2201      	movs	r2, #1
 80292f0:	601a      	str	r2, [r3, #0]
 80292f2:	e002      	b.n	80292fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80292f4:	687b      	ldr	r3, [r7, #4]
 80292f6:	2200      	movs	r2, #0
 80292f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80292fa:	4a04      	ldr	r2, [pc, #16]	@ (802930c <prvSampleTimeNow+0x3c>)
 80292fc:	68fb      	ldr	r3, [r7, #12]
 80292fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8029300:	68fb      	ldr	r3, [r7, #12]
}
 8029302:	4618      	mov	r0, r3
 8029304:	3710      	adds	r7, #16
 8029306:	46bd      	mov	sp, r7
 8029308:	bd80      	pop	{r7, pc}
 802930a:	bf00      	nop
 802930c:	2001ddd0 	.word	0x2001ddd0

08029310 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8029310:	b580      	push	{r7, lr}
 8029312:	b086      	sub	sp, #24
 8029314:	af00      	add	r7, sp, #0
 8029316:	60f8      	str	r0, [r7, #12]
 8029318:	60b9      	str	r1, [r7, #8]
 802931a:	607a      	str	r2, [r7, #4]
 802931c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 802931e:	2300      	movs	r3, #0
 8029320:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8029322:	68fb      	ldr	r3, [r7, #12]
 8029324:	68ba      	ldr	r2, [r7, #8]
 8029326:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8029328:	68fb      	ldr	r3, [r7, #12]
 802932a:	68fa      	ldr	r2, [r7, #12]
 802932c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 802932e:	68ba      	ldr	r2, [r7, #8]
 8029330:	687b      	ldr	r3, [r7, #4]
 8029332:	429a      	cmp	r2, r3
 8029334:	d812      	bhi.n	802935c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8029336:	687a      	ldr	r2, [r7, #4]
 8029338:	683b      	ldr	r3, [r7, #0]
 802933a:	1ad2      	subs	r2, r2, r3
 802933c:	68fb      	ldr	r3, [r7, #12]
 802933e:	699b      	ldr	r3, [r3, #24]
 8029340:	429a      	cmp	r2, r3
 8029342:	d302      	bcc.n	802934a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8029344:	2301      	movs	r3, #1
 8029346:	617b      	str	r3, [r7, #20]
 8029348:	e01b      	b.n	8029382 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 802934a:	4b10      	ldr	r3, [pc, #64]	@ (802938c <prvInsertTimerInActiveList+0x7c>)
 802934c:	681a      	ldr	r2, [r3, #0]
 802934e:	68fb      	ldr	r3, [r7, #12]
 8029350:	3304      	adds	r3, #4
 8029352:	4619      	mov	r1, r3
 8029354:	4610      	mov	r0, r2
 8029356:	f7fd fbfc 	bl	8026b52 <vListInsert>
 802935a:	e012      	b.n	8029382 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 802935c:	687a      	ldr	r2, [r7, #4]
 802935e:	683b      	ldr	r3, [r7, #0]
 8029360:	429a      	cmp	r2, r3
 8029362:	d206      	bcs.n	8029372 <prvInsertTimerInActiveList+0x62>
 8029364:	68ba      	ldr	r2, [r7, #8]
 8029366:	683b      	ldr	r3, [r7, #0]
 8029368:	429a      	cmp	r2, r3
 802936a:	d302      	bcc.n	8029372 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 802936c:	2301      	movs	r3, #1
 802936e:	617b      	str	r3, [r7, #20]
 8029370:	e007      	b.n	8029382 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8029372:	4b07      	ldr	r3, [pc, #28]	@ (8029390 <prvInsertTimerInActiveList+0x80>)
 8029374:	681a      	ldr	r2, [r3, #0]
 8029376:	68fb      	ldr	r3, [r7, #12]
 8029378:	3304      	adds	r3, #4
 802937a:	4619      	mov	r1, r3
 802937c:	4610      	mov	r0, r2
 802937e:	f7fd fbe8 	bl	8026b52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8029382:	697b      	ldr	r3, [r7, #20]
}
 8029384:	4618      	mov	r0, r3
 8029386:	3718      	adds	r7, #24
 8029388:	46bd      	mov	sp, r7
 802938a:	bd80      	pop	{r7, pc}
 802938c:	2001ddc4 	.word	0x2001ddc4
 8029390:	2001ddc0 	.word	0x2001ddc0

08029394 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8029394:	b580      	push	{r7, lr}
 8029396:	b08e      	sub	sp, #56	@ 0x38
 8029398:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 802939a:	e0d4      	b.n	8029546 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 802939c:	687b      	ldr	r3, [r7, #4]
 802939e:	2b00      	cmp	r3, #0
 80293a0:	da1b      	bge.n	80293da <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80293a2:	1d3b      	adds	r3, r7, #4
 80293a4:	3304      	adds	r3, #4
 80293a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80293a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80293aa:	2b00      	cmp	r3, #0
 80293ac:	d10d      	bne.n	80293ca <prvProcessReceivedCommands+0x36>
	__asm volatile
 80293ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80293b2:	b672      	cpsid	i
 80293b4:	f383 8811 	msr	BASEPRI, r3
 80293b8:	f3bf 8f6f 	isb	sy
 80293bc:	f3bf 8f4f 	dsb	sy
 80293c0:	b662      	cpsie	i
 80293c2:	61fb      	str	r3, [r7, #28]
}
 80293c4:	bf00      	nop
 80293c6:	bf00      	nop
 80293c8:	e7fd      	b.n	80293c6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80293ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80293cc:	681b      	ldr	r3, [r3, #0]
 80293ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80293d0:	6850      	ldr	r0, [r2, #4]
 80293d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80293d4:	6892      	ldr	r2, [r2, #8]
 80293d6:	4611      	mov	r1, r2
 80293d8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80293da:	687b      	ldr	r3, [r7, #4]
 80293dc:	2b00      	cmp	r3, #0
 80293de:	f2c0 80b2 	blt.w	8029546 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80293e2:	68fb      	ldr	r3, [r7, #12]
 80293e4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80293e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80293e8:	695b      	ldr	r3, [r3, #20]
 80293ea:	2b00      	cmp	r3, #0
 80293ec:	d004      	beq.n	80293f8 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80293ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80293f0:	3304      	adds	r3, #4
 80293f2:	4618      	mov	r0, r3
 80293f4:	f7fd fbe6 	bl	8026bc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80293f8:	463b      	mov	r3, r7
 80293fa:	4618      	mov	r0, r3
 80293fc:	f7ff ff68 	bl	80292d0 <prvSampleTimeNow>
 8029400:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8029402:	687b      	ldr	r3, [r7, #4]
 8029404:	2b09      	cmp	r3, #9
 8029406:	f200 809b 	bhi.w	8029540 <prvProcessReceivedCommands+0x1ac>
 802940a:	a201      	add	r2, pc, #4	@ (adr r2, 8029410 <prvProcessReceivedCommands+0x7c>)
 802940c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029410:	08029439 	.word	0x08029439
 8029414:	08029439 	.word	0x08029439
 8029418:	08029439 	.word	0x08029439
 802941c:	080294b3 	.word	0x080294b3
 8029420:	080294c7 	.word	0x080294c7
 8029424:	08029517 	.word	0x08029517
 8029428:	08029439 	.word	0x08029439
 802942c:	08029439 	.word	0x08029439
 8029430:	080294b3 	.word	0x080294b3
 8029434:	080294c7 	.word	0x080294c7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8029438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802943a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 802943e:	f043 0301 	orr.w	r3, r3, #1
 8029442:	b2da      	uxtb	r2, r3
 8029444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029446:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 802944a:	68ba      	ldr	r2, [r7, #8]
 802944c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802944e:	699b      	ldr	r3, [r3, #24]
 8029450:	18d1      	adds	r1, r2, r3
 8029452:	68bb      	ldr	r3, [r7, #8]
 8029454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8029456:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8029458:	f7ff ff5a 	bl	8029310 <prvInsertTimerInActiveList>
 802945c:	4603      	mov	r3, r0
 802945e:	2b00      	cmp	r3, #0
 8029460:	d070      	beq.n	8029544 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8029462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029464:	6a1b      	ldr	r3, [r3, #32]
 8029466:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8029468:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802946a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802946c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8029470:	f003 0304 	and.w	r3, r3, #4
 8029474:	2b00      	cmp	r3, #0
 8029476:	d065      	beq.n	8029544 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8029478:	68ba      	ldr	r2, [r7, #8]
 802947a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802947c:	699b      	ldr	r3, [r3, #24]
 802947e:	441a      	add	r2, r3
 8029480:	2300      	movs	r3, #0
 8029482:	9300      	str	r3, [sp, #0]
 8029484:	2300      	movs	r3, #0
 8029486:	2100      	movs	r1, #0
 8029488:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802948a:	f7ff fdfb 	bl	8029084 <xTimerGenericCommand>
 802948e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8029490:	6a3b      	ldr	r3, [r7, #32]
 8029492:	2b00      	cmp	r3, #0
 8029494:	d156      	bne.n	8029544 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8029496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802949a:	b672      	cpsid	i
 802949c:	f383 8811 	msr	BASEPRI, r3
 80294a0:	f3bf 8f6f 	isb	sy
 80294a4:	f3bf 8f4f 	dsb	sy
 80294a8:	b662      	cpsie	i
 80294aa:	61bb      	str	r3, [r7, #24]
}
 80294ac:	bf00      	nop
 80294ae:	bf00      	nop
 80294b0:	e7fd      	b.n	80294ae <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80294b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80294b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80294b8:	f023 0301 	bic.w	r3, r3, #1
 80294bc:	b2da      	uxtb	r2, r3
 80294be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80294c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80294c4:	e03f      	b.n	8029546 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80294c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80294c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80294cc:	f043 0301 	orr.w	r3, r3, #1
 80294d0:	b2da      	uxtb	r2, r3
 80294d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80294d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80294d8:	68ba      	ldr	r2, [r7, #8]
 80294da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80294dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80294de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80294e0:	699b      	ldr	r3, [r3, #24]
 80294e2:	2b00      	cmp	r3, #0
 80294e4:	d10d      	bne.n	8029502 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80294e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80294ea:	b672      	cpsid	i
 80294ec:	f383 8811 	msr	BASEPRI, r3
 80294f0:	f3bf 8f6f 	isb	sy
 80294f4:	f3bf 8f4f 	dsb	sy
 80294f8:	b662      	cpsie	i
 80294fa:	617b      	str	r3, [r7, #20]
}
 80294fc:	bf00      	nop
 80294fe:	bf00      	nop
 8029500:	e7fd      	b.n	80294fe <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8029502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029504:	699a      	ldr	r2, [r3, #24]
 8029506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029508:	18d1      	adds	r1, r2, r3
 802950a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802950c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802950e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8029510:	f7ff fefe 	bl	8029310 <prvInsertTimerInActiveList>
					break;
 8029514:	e017      	b.n	8029546 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8029516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029518:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 802951c:	f003 0302 	and.w	r3, r3, #2
 8029520:	2b00      	cmp	r3, #0
 8029522:	d103      	bne.n	802952c <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8029524:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8029526:	f000 fbd5 	bl	8029cd4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 802952a:	e00c      	b.n	8029546 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802952c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802952e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8029532:	f023 0301 	bic.w	r3, r3, #1
 8029536:	b2da      	uxtb	r2, r3
 8029538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802953a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 802953e:	e002      	b.n	8029546 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8029540:	bf00      	nop
 8029542:	e000      	b.n	8029546 <prvProcessReceivedCommands+0x1b2>
					break;
 8029544:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8029546:	4b08      	ldr	r3, [pc, #32]	@ (8029568 <prvProcessReceivedCommands+0x1d4>)
 8029548:	681b      	ldr	r3, [r3, #0]
 802954a:	1d39      	adds	r1, r7, #4
 802954c:	2200      	movs	r2, #0
 802954e:	4618      	mov	r0, r3
 8029550:	f7fd ff78 	bl	8027444 <xQueueReceive>
 8029554:	4603      	mov	r3, r0
 8029556:	2b00      	cmp	r3, #0
 8029558:	f47f af20 	bne.w	802939c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 802955c:	bf00      	nop
 802955e:	bf00      	nop
 8029560:	3730      	adds	r7, #48	@ 0x30
 8029562:	46bd      	mov	sp, r7
 8029564:	bd80      	pop	{r7, pc}
 8029566:	bf00      	nop
 8029568:	2001ddc8 	.word	0x2001ddc8

0802956c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 802956c:	b580      	push	{r7, lr}
 802956e:	b088      	sub	sp, #32
 8029570:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8029572:	e04b      	b.n	802960c <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8029574:	4b2f      	ldr	r3, [pc, #188]	@ (8029634 <prvSwitchTimerLists+0xc8>)
 8029576:	681b      	ldr	r3, [r3, #0]
 8029578:	68db      	ldr	r3, [r3, #12]
 802957a:	681b      	ldr	r3, [r3, #0]
 802957c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802957e:	4b2d      	ldr	r3, [pc, #180]	@ (8029634 <prvSwitchTimerLists+0xc8>)
 8029580:	681b      	ldr	r3, [r3, #0]
 8029582:	68db      	ldr	r3, [r3, #12]
 8029584:	68db      	ldr	r3, [r3, #12]
 8029586:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8029588:	68fb      	ldr	r3, [r7, #12]
 802958a:	3304      	adds	r3, #4
 802958c:	4618      	mov	r0, r3
 802958e:	f7fd fb19 	bl	8026bc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8029592:	68fb      	ldr	r3, [r7, #12]
 8029594:	6a1b      	ldr	r3, [r3, #32]
 8029596:	68f8      	ldr	r0, [r7, #12]
 8029598:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802959a:	68fb      	ldr	r3, [r7, #12]
 802959c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80295a0:	f003 0304 	and.w	r3, r3, #4
 80295a4:	2b00      	cmp	r3, #0
 80295a6:	d031      	beq.n	802960c <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80295a8:	68fb      	ldr	r3, [r7, #12]
 80295aa:	699b      	ldr	r3, [r3, #24]
 80295ac:	693a      	ldr	r2, [r7, #16]
 80295ae:	4413      	add	r3, r2
 80295b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80295b2:	68ba      	ldr	r2, [r7, #8]
 80295b4:	693b      	ldr	r3, [r7, #16]
 80295b6:	429a      	cmp	r2, r3
 80295b8:	d90e      	bls.n	80295d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80295ba:	68fb      	ldr	r3, [r7, #12]
 80295bc:	68ba      	ldr	r2, [r7, #8]
 80295be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80295c0:	68fb      	ldr	r3, [r7, #12]
 80295c2:	68fa      	ldr	r2, [r7, #12]
 80295c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80295c6:	4b1b      	ldr	r3, [pc, #108]	@ (8029634 <prvSwitchTimerLists+0xc8>)
 80295c8:	681a      	ldr	r2, [r3, #0]
 80295ca:	68fb      	ldr	r3, [r7, #12]
 80295cc:	3304      	adds	r3, #4
 80295ce:	4619      	mov	r1, r3
 80295d0:	4610      	mov	r0, r2
 80295d2:	f7fd fabe 	bl	8026b52 <vListInsert>
 80295d6:	e019      	b.n	802960c <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80295d8:	2300      	movs	r3, #0
 80295da:	9300      	str	r3, [sp, #0]
 80295dc:	2300      	movs	r3, #0
 80295de:	693a      	ldr	r2, [r7, #16]
 80295e0:	2100      	movs	r1, #0
 80295e2:	68f8      	ldr	r0, [r7, #12]
 80295e4:	f7ff fd4e 	bl	8029084 <xTimerGenericCommand>
 80295e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80295ea:	687b      	ldr	r3, [r7, #4]
 80295ec:	2b00      	cmp	r3, #0
 80295ee:	d10d      	bne.n	802960c <prvSwitchTimerLists+0xa0>
	__asm volatile
 80295f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80295f4:	b672      	cpsid	i
 80295f6:	f383 8811 	msr	BASEPRI, r3
 80295fa:	f3bf 8f6f 	isb	sy
 80295fe:	f3bf 8f4f 	dsb	sy
 8029602:	b662      	cpsie	i
 8029604:	603b      	str	r3, [r7, #0]
}
 8029606:	bf00      	nop
 8029608:	bf00      	nop
 802960a:	e7fd      	b.n	8029608 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802960c:	4b09      	ldr	r3, [pc, #36]	@ (8029634 <prvSwitchTimerLists+0xc8>)
 802960e:	681b      	ldr	r3, [r3, #0]
 8029610:	681b      	ldr	r3, [r3, #0]
 8029612:	2b00      	cmp	r3, #0
 8029614:	d1ae      	bne.n	8029574 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8029616:	4b07      	ldr	r3, [pc, #28]	@ (8029634 <prvSwitchTimerLists+0xc8>)
 8029618:	681b      	ldr	r3, [r3, #0]
 802961a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 802961c:	4b06      	ldr	r3, [pc, #24]	@ (8029638 <prvSwitchTimerLists+0xcc>)
 802961e:	681b      	ldr	r3, [r3, #0]
 8029620:	4a04      	ldr	r2, [pc, #16]	@ (8029634 <prvSwitchTimerLists+0xc8>)
 8029622:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8029624:	4a04      	ldr	r2, [pc, #16]	@ (8029638 <prvSwitchTimerLists+0xcc>)
 8029626:	697b      	ldr	r3, [r7, #20]
 8029628:	6013      	str	r3, [r2, #0]
}
 802962a:	bf00      	nop
 802962c:	3718      	adds	r7, #24
 802962e:	46bd      	mov	sp, r7
 8029630:	bd80      	pop	{r7, pc}
 8029632:	bf00      	nop
 8029634:	2001ddc0 	.word	0x2001ddc0
 8029638:	2001ddc4 	.word	0x2001ddc4

0802963c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 802963c:	b580      	push	{r7, lr}
 802963e:	b082      	sub	sp, #8
 8029640:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8029642:	f000 f94b 	bl	80298dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8029646:	4b15      	ldr	r3, [pc, #84]	@ (802969c <prvCheckForValidListAndQueue+0x60>)
 8029648:	681b      	ldr	r3, [r3, #0]
 802964a:	2b00      	cmp	r3, #0
 802964c:	d120      	bne.n	8029690 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 802964e:	4814      	ldr	r0, [pc, #80]	@ (80296a0 <prvCheckForValidListAndQueue+0x64>)
 8029650:	f7fd fa2e 	bl	8026ab0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8029654:	4813      	ldr	r0, [pc, #76]	@ (80296a4 <prvCheckForValidListAndQueue+0x68>)
 8029656:	f7fd fa2b 	bl	8026ab0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 802965a:	4b13      	ldr	r3, [pc, #76]	@ (80296a8 <prvCheckForValidListAndQueue+0x6c>)
 802965c:	4a10      	ldr	r2, [pc, #64]	@ (80296a0 <prvCheckForValidListAndQueue+0x64>)
 802965e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8029660:	4b12      	ldr	r3, [pc, #72]	@ (80296ac <prvCheckForValidListAndQueue+0x70>)
 8029662:	4a10      	ldr	r2, [pc, #64]	@ (80296a4 <prvCheckForValidListAndQueue+0x68>)
 8029664:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8029666:	2300      	movs	r3, #0
 8029668:	9300      	str	r3, [sp, #0]
 802966a:	4b11      	ldr	r3, [pc, #68]	@ (80296b0 <prvCheckForValidListAndQueue+0x74>)
 802966c:	4a11      	ldr	r2, [pc, #68]	@ (80296b4 <prvCheckForValidListAndQueue+0x78>)
 802966e:	2110      	movs	r1, #16
 8029670:	200a      	movs	r0, #10
 8029672:	f7fd fb3d 	bl	8026cf0 <xQueueGenericCreateStatic>
 8029676:	4603      	mov	r3, r0
 8029678:	4a08      	ldr	r2, [pc, #32]	@ (802969c <prvCheckForValidListAndQueue+0x60>)
 802967a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 802967c:	4b07      	ldr	r3, [pc, #28]	@ (802969c <prvCheckForValidListAndQueue+0x60>)
 802967e:	681b      	ldr	r3, [r3, #0]
 8029680:	2b00      	cmp	r3, #0
 8029682:	d005      	beq.n	8029690 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8029684:	4b05      	ldr	r3, [pc, #20]	@ (802969c <prvCheckForValidListAndQueue+0x60>)
 8029686:	681b      	ldr	r3, [r3, #0]
 8029688:	490b      	ldr	r1, [pc, #44]	@ (80296b8 <prvCheckForValidListAndQueue+0x7c>)
 802968a:	4618      	mov	r0, r3
 802968c:	f7fe fab0 	bl	8027bf0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8029690:	f000 f95a 	bl	8029948 <vPortExitCritical>
}
 8029694:	bf00      	nop
 8029696:	46bd      	mov	sp, r7
 8029698:	bd80      	pop	{r7, pc}
 802969a:	bf00      	nop
 802969c:	2001ddc8 	.word	0x2001ddc8
 80296a0:	2001dd98 	.word	0x2001dd98
 80296a4:	2001ddac 	.word	0x2001ddac
 80296a8:	2001ddc0 	.word	0x2001ddc0
 80296ac:	2001ddc4 	.word	0x2001ddc4
 80296b0:	2001de74 	.word	0x2001de74
 80296b4:	2001ddd4 	.word	0x2001ddd4
 80296b8:	080315b8 	.word	0x080315b8

080296bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80296bc:	b480      	push	{r7}
 80296be:	b085      	sub	sp, #20
 80296c0:	af00      	add	r7, sp, #0
 80296c2:	60f8      	str	r0, [r7, #12]
 80296c4:	60b9      	str	r1, [r7, #8]
 80296c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80296c8:	68fb      	ldr	r3, [r7, #12]
 80296ca:	3b04      	subs	r3, #4
 80296cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80296ce:	68fb      	ldr	r3, [r7, #12]
 80296d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80296d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80296d6:	68fb      	ldr	r3, [r7, #12]
 80296d8:	3b04      	subs	r3, #4
 80296da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80296dc:	68bb      	ldr	r3, [r7, #8]
 80296de:	f023 0201 	bic.w	r2, r3, #1
 80296e2:	68fb      	ldr	r3, [r7, #12]
 80296e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80296e6:	68fb      	ldr	r3, [r7, #12]
 80296e8:	3b04      	subs	r3, #4
 80296ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80296ec:	4a0c      	ldr	r2, [pc, #48]	@ (8029720 <pxPortInitialiseStack+0x64>)
 80296ee:	68fb      	ldr	r3, [r7, #12]
 80296f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80296f2:	68fb      	ldr	r3, [r7, #12]
 80296f4:	3b14      	subs	r3, #20
 80296f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80296f8:	687a      	ldr	r2, [r7, #4]
 80296fa:	68fb      	ldr	r3, [r7, #12]
 80296fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80296fe:	68fb      	ldr	r3, [r7, #12]
 8029700:	3b04      	subs	r3, #4
 8029702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8029704:	68fb      	ldr	r3, [r7, #12]
 8029706:	f06f 0202 	mvn.w	r2, #2
 802970a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 802970c:	68fb      	ldr	r3, [r7, #12]
 802970e:	3b20      	subs	r3, #32
 8029710:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8029712:	68fb      	ldr	r3, [r7, #12]
}
 8029714:	4618      	mov	r0, r3
 8029716:	3714      	adds	r7, #20
 8029718:	46bd      	mov	sp, r7
 802971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802971e:	4770      	bx	lr
 8029720:	08029725 	.word	0x08029725

08029724 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8029724:	b480      	push	{r7}
 8029726:	b085      	sub	sp, #20
 8029728:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 802972a:	2300      	movs	r3, #0
 802972c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 802972e:	4b15      	ldr	r3, [pc, #84]	@ (8029784 <prvTaskExitError+0x60>)
 8029730:	681b      	ldr	r3, [r3, #0]
 8029732:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8029736:	d00d      	beq.n	8029754 <prvTaskExitError+0x30>
	__asm volatile
 8029738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802973c:	b672      	cpsid	i
 802973e:	f383 8811 	msr	BASEPRI, r3
 8029742:	f3bf 8f6f 	isb	sy
 8029746:	f3bf 8f4f 	dsb	sy
 802974a:	b662      	cpsie	i
 802974c:	60fb      	str	r3, [r7, #12]
}
 802974e:	bf00      	nop
 8029750:	bf00      	nop
 8029752:	e7fd      	b.n	8029750 <prvTaskExitError+0x2c>
	__asm volatile
 8029754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029758:	b672      	cpsid	i
 802975a:	f383 8811 	msr	BASEPRI, r3
 802975e:	f3bf 8f6f 	isb	sy
 8029762:	f3bf 8f4f 	dsb	sy
 8029766:	b662      	cpsie	i
 8029768:	60bb      	str	r3, [r7, #8]
}
 802976a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 802976c:	bf00      	nop
 802976e:	687b      	ldr	r3, [r7, #4]
 8029770:	2b00      	cmp	r3, #0
 8029772:	d0fc      	beq.n	802976e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8029774:	bf00      	nop
 8029776:	bf00      	nop
 8029778:	3714      	adds	r7, #20
 802977a:	46bd      	mov	sp, r7
 802977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029780:	4770      	bx	lr
 8029782:	bf00      	nop
 8029784:	200002dc 	.word	0x200002dc
	...

08029790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8029790:	4b07      	ldr	r3, [pc, #28]	@ (80297b0 <pxCurrentTCBConst2>)
 8029792:	6819      	ldr	r1, [r3, #0]
 8029794:	6808      	ldr	r0, [r1, #0]
 8029796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802979a:	f380 8809 	msr	PSP, r0
 802979e:	f3bf 8f6f 	isb	sy
 80297a2:	f04f 0000 	mov.w	r0, #0
 80297a6:	f380 8811 	msr	BASEPRI, r0
 80297aa:	4770      	bx	lr
 80297ac:	f3af 8000 	nop.w

080297b0 <pxCurrentTCBConst2>:
 80297b0:	2001d898 	.word	0x2001d898
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80297b4:	bf00      	nop
 80297b6:	bf00      	nop

080297b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80297b8:	4808      	ldr	r0, [pc, #32]	@ (80297dc <prvPortStartFirstTask+0x24>)
 80297ba:	6800      	ldr	r0, [r0, #0]
 80297bc:	6800      	ldr	r0, [r0, #0]
 80297be:	f380 8808 	msr	MSP, r0
 80297c2:	f04f 0000 	mov.w	r0, #0
 80297c6:	f380 8814 	msr	CONTROL, r0
 80297ca:	b662      	cpsie	i
 80297cc:	b661      	cpsie	f
 80297ce:	f3bf 8f4f 	dsb	sy
 80297d2:	f3bf 8f6f 	isb	sy
 80297d6:	df00      	svc	0
 80297d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80297da:	bf00      	nop
 80297dc:	e000ed08 	.word	0xe000ed08

080297e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80297e0:	b580      	push	{r7, lr}
 80297e2:	b084      	sub	sp, #16
 80297e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80297e6:	4b37      	ldr	r3, [pc, #220]	@ (80298c4 <xPortStartScheduler+0xe4>)
 80297e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80297ea:	68fb      	ldr	r3, [r7, #12]
 80297ec:	781b      	ldrb	r3, [r3, #0]
 80297ee:	b2db      	uxtb	r3, r3
 80297f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80297f2:	68fb      	ldr	r3, [r7, #12]
 80297f4:	22ff      	movs	r2, #255	@ 0xff
 80297f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80297f8:	68fb      	ldr	r3, [r7, #12]
 80297fa:	781b      	ldrb	r3, [r3, #0]
 80297fc:	b2db      	uxtb	r3, r3
 80297fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8029800:	78fb      	ldrb	r3, [r7, #3]
 8029802:	b2db      	uxtb	r3, r3
 8029804:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8029808:	b2da      	uxtb	r2, r3
 802980a:	4b2f      	ldr	r3, [pc, #188]	@ (80298c8 <xPortStartScheduler+0xe8>)
 802980c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 802980e:	4b2f      	ldr	r3, [pc, #188]	@ (80298cc <xPortStartScheduler+0xec>)
 8029810:	2207      	movs	r2, #7
 8029812:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8029814:	e009      	b.n	802982a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8029816:	4b2d      	ldr	r3, [pc, #180]	@ (80298cc <xPortStartScheduler+0xec>)
 8029818:	681b      	ldr	r3, [r3, #0]
 802981a:	3b01      	subs	r3, #1
 802981c:	4a2b      	ldr	r2, [pc, #172]	@ (80298cc <xPortStartScheduler+0xec>)
 802981e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8029820:	78fb      	ldrb	r3, [r7, #3]
 8029822:	b2db      	uxtb	r3, r3
 8029824:	005b      	lsls	r3, r3, #1
 8029826:	b2db      	uxtb	r3, r3
 8029828:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 802982a:	78fb      	ldrb	r3, [r7, #3]
 802982c:	b2db      	uxtb	r3, r3
 802982e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8029832:	2b80      	cmp	r3, #128	@ 0x80
 8029834:	d0ef      	beq.n	8029816 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8029836:	4b25      	ldr	r3, [pc, #148]	@ (80298cc <xPortStartScheduler+0xec>)
 8029838:	681b      	ldr	r3, [r3, #0]
 802983a:	f1c3 0307 	rsb	r3, r3, #7
 802983e:	2b04      	cmp	r3, #4
 8029840:	d00d      	beq.n	802985e <xPortStartScheduler+0x7e>
	__asm volatile
 8029842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029846:	b672      	cpsid	i
 8029848:	f383 8811 	msr	BASEPRI, r3
 802984c:	f3bf 8f6f 	isb	sy
 8029850:	f3bf 8f4f 	dsb	sy
 8029854:	b662      	cpsie	i
 8029856:	60bb      	str	r3, [r7, #8]
}
 8029858:	bf00      	nop
 802985a:	bf00      	nop
 802985c:	e7fd      	b.n	802985a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 802985e:	4b1b      	ldr	r3, [pc, #108]	@ (80298cc <xPortStartScheduler+0xec>)
 8029860:	681b      	ldr	r3, [r3, #0]
 8029862:	021b      	lsls	r3, r3, #8
 8029864:	4a19      	ldr	r2, [pc, #100]	@ (80298cc <xPortStartScheduler+0xec>)
 8029866:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8029868:	4b18      	ldr	r3, [pc, #96]	@ (80298cc <xPortStartScheduler+0xec>)
 802986a:	681b      	ldr	r3, [r3, #0]
 802986c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8029870:	4a16      	ldr	r2, [pc, #88]	@ (80298cc <xPortStartScheduler+0xec>)
 8029872:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8029874:	687b      	ldr	r3, [r7, #4]
 8029876:	b2da      	uxtb	r2, r3
 8029878:	68fb      	ldr	r3, [r7, #12]
 802987a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 802987c:	4b14      	ldr	r3, [pc, #80]	@ (80298d0 <xPortStartScheduler+0xf0>)
 802987e:	681b      	ldr	r3, [r3, #0]
 8029880:	4a13      	ldr	r2, [pc, #76]	@ (80298d0 <xPortStartScheduler+0xf0>)
 8029882:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8029886:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8029888:	4b11      	ldr	r3, [pc, #68]	@ (80298d0 <xPortStartScheduler+0xf0>)
 802988a:	681b      	ldr	r3, [r3, #0]
 802988c:	4a10      	ldr	r2, [pc, #64]	@ (80298d0 <xPortStartScheduler+0xf0>)
 802988e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8029892:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8029894:	f000 f8dc 	bl	8029a50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8029898:	4b0e      	ldr	r3, [pc, #56]	@ (80298d4 <xPortStartScheduler+0xf4>)
 802989a:	2200      	movs	r2, #0
 802989c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 802989e:	f000 f8fb 	bl	8029a98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80298a2:	4b0d      	ldr	r3, [pc, #52]	@ (80298d8 <xPortStartScheduler+0xf8>)
 80298a4:	681b      	ldr	r3, [r3, #0]
 80298a6:	4a0c      	ldr	r2, [pc, #48]	@ (80298d8 <xPortStartScheduler+0xf8>)
 80298a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80298ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80298ae:	f7ff ff83 	bl	80297b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80298b2:	f7fe fe11 	bl	80284d8 <vTaskSwitchContext>
	prvTaskExitError();
 80298b6:	f7ff ff35 	bl	8029724 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80298ba:	2300      	movs	r3, #0
}
 80298bc:	4618      	mov	r0, r3
 80298be:	3710      	adds	r7, #16
 80298c0:	46bd      	mov	sp, r7
 80298c2:	bd80      	pop	{r7, pc}
 80298c4:	e000e400 	.word	0xe000e400
 80298c8:	2001dec4 	.word	0x2001dec4
 80298cc:	2001dec8 	.word	0x2001dec8
 80298d0:	e000ed20 	.word	0xe000ed20
 80298d4:	200002dc 	.word	0x200002dc
 80298d8:	e000ef34 	.word	0xe000ef34

080298dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80298dc:	b480      	push	{r7}
 80298de:	b083      	sub	sp, #12
 80298e0:	af00      	add	r7, sp, #0
	__asm volatile
 80298e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80298e6:	b672      	cpsid	i
 80298e8:	f383 8811 	msr	BASEPRI, r3
 80298ec:	f3bf 8f6f 	isb	sy
 80298f0:	f3bf 8f4f 	dsb	sy
 80298f4:	b662      	cpsie	i
 80298f6:	607b      	str	r3, [r7, #4]
}
 80298f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80298fa:	4b11      	ldr	r3, [pc, #68]	@ (8029940 <vPortEnterCritical+0x64>)
 80298fc:	681b      	ldr	r3, [r3, #0]
 80298fe:	3301      	adds	r3, #1
 8029900:	4a0f      	ldr	r2, [pc, #60]	@ (8029940 <vPortEnterCritical+0x64>)
 8029902:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8029904:	4b0e      	ldr	r3, [pc, #56]	@ (8029940 <vPortEnterCritical+0x64>)
 8029906:	681b      	ldr	r3, [r3, #0]
 8029908:	2b01      	cmp	r3, #1
 802990a:	d112      	bne.n	8029932 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 802990c:	4b0d      	ldr	r3, [pc, #52]	@ (8029944 <vPortEnterCritical+0x68>)
 802990e:	681b      	ldr	r3, [r3, #0]
 8029910:	b2db      	uxtb	r3, r3
 8029912:	2b00      	cmp	r3, #0
 8029914:	d00d      	beq.n	8029932 <vPortEnterCritical+0x56>
	__asm volatile
 8029916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802991a:	b672      	cpsid	i
 802991c:	f383 8811 	msr	BASEPRI, r3
 8029920:	f3bf 8f6f 	isb	sy
 8029924:	f3bf 8f4f 	dsb	sy
 8029928:	b662      	cpsie	i
 802992a:	603b      	str	r3, [r7, #0]
}
 802992c:	bf00      	nop
 802992e:	bf00      	nop
 8029930:	e7fd      	b.n	802992e <vPortEnterCritical+0x52>
	}
}
 8029932:	bf00      	nop
 8029934:	370c      	adds	r7, #12
 8029936:	46bd      	mov	sp, r7
 8029938:	f85d 7b04 	ldr.w	r7, [sp], #4
 802993c:	4770      	bx	lr
 802993e:	bf00      	nop
 8029940:	200002dc 	.word	0x200002dc
 8029944:	e000ed04 	.word	0xe000ed04

08029948 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8029948:	b480      	push	{r7}
 802994a:	b083      	sub	sp, #12
 802994c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 802994e:	4b13      	ldr	r3, [pc, #76]	@ (802999c <vPortExitCritical+0x54>)
 8029950:	681b      	ldr	r3, [r3, #0]
 8029952:	2b00      	cmp	r3, #0
 8029954:	d10d      	bne.n	8029972 <vPortExitCritical+0x2a>
	__asm volatile
 8029956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802995a:	b672      	cpsid	i
 802995c:	f383 8811 	msr	BASEPRI, r3
 8029960:	f3bf 8f6f 	isb	sy
 8029964:	f3bf 8f4f 	dsb	sy
 8029968:	b662      	cpsie	i
 802996a:	607b      	str	r3, [r7, #4]
}
 802996c:	bf00      	nop
 802996e:	bf00      	nop
 8029970:	e7fd      	b.n	802996e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8029972:	4b0a      	ldr	r3, [pc, #40]	@ (802999c <vPortExitCritical+0x54>)
 8029974:	681b      	ldr	r3, [r3, #0]
 8029976:	3b01      	subs	r3, #1
 8029978:	4a08      	ldr	r2, [pc, #32]	@ (802999c <vPortExitCritical+0x54>)
 802997a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 802997c:	4b07      	ldr	r3, [pc, #28]	@ (802999c <vPortExitCritical+0x54>)
 802997e:	681b      	ldr	r3, [r3, #0]
 8029980:	2b00      	cmp	r3, #0
 8029982:	d105      	bne.n	8029990 <vPortExitCritical+0x48>
 8029984:	2300      	movs	r3, #0
 8029986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8029988:	683b      	ldr	r3, [r7, #0]
 802998a:	f383 8811 	msr	BASEPRI, r3
}
 802998e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8029990:	bf00      	nop
 8029992:	370c      	adds	r7, #12
 8029994:	46bd      	mov	sp, r7
 8029996:	f85d 7b04 	ldr.w	r7, [sp], #4
 802999a:	4770      	bx	lr
 802999c:	200002dc 	.word	0x200002dc

080299a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80299a0:	f3ef 8009 	mrs	r0, PSP
 80299a4:	f3bf 8f6f 	isb	sy
 80299a8:	4b15      	ldr	r3, [pc, #84]	@ (8029a00 <pxCurrentTCBConst>)
 80299aa:	681a      	ldr	r2, [r3, #0]
 80299ac:	f01e 0f10 	tst.w	lr, #16
 80299b0:	bf08      	it	eq
 80299b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80299b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80299ba:	6010      	str	r0, [r2, #0]
 80299bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80299c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80299c4:	b672      	cpsid	i
 80299c6:	f380 8811 	msr	BASEPRI, r0
 80299ca:	f3bf 8f4f 	dsb	sy
 80299ce:	f3bf 8f6f 	isb	sy
 80299d2:	b662      	cpsie	i
 80299d4:	f7fe fd80 	bl	80284d8 <vTaskSwitchContext>
 80299d8:	f04f 0000 	mov.w	r0, #0
 80299dc:	f380 8811 	msr	BASEPRI, r0
 80299e0:	bc09      	pop	{r0, r3}
 80299e2:	6819      	ldr	r1, [r3, #0]
 80299e4:	6808      	ldr	r0, [r1, #0]
 80299e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80299ea:	f01e 0f10 	tst.w	lr, #16
 80299ee:	bf08      	it	eq
 80299f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80299f4:	f380 8809 	msr	PSP, r0
 80299f8:	f3bf 8f6f 	isb	sy
 80299fc:	4770      	bx	lr
 80299fe:	bf00      	nop

08029a00 <pxCurrentTCBConst>:
 8029a00:	2001d898 	.word	0x2001d898
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8029a04:	bf00      	nop
 8029a06:	bf00      	nop

08029a08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8029a08:	b580      	push	{r7, lr}
 8029a0a:	b082      	sub	sp, #8
 8029a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8029a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029a12:	b672      	cpsid	i
 8029a14:	f383 8811 	msr	BASEPRI, r3
 8029a18:	f3bf 8f6f 	isb	sy
 8029a1c:	f3bf 8f4f 	dsb	sy
 8029a20:	b662      	cpsie	i
 8029a22:	607b      	str	r3, [r7, #4]
}
 8029a24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8029a26:	f7fe fc9b 	bl	8028360 <xTaskIncrementTick>
 8029a2a:	4603      	mov	r3, r0
 8029a2c:	2b00      	cmp	r3, #0
 8029a2e:	d003      	beq.n	8029a38 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8029a30:	4b06      	ldr	r3, [pc, #24]	@ (8029a4c <SysTick_Handler+0x44>)
 8029a32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8029a36:	601a      	str	r2, [r3, #0]
 8029a38:	2300      	movs	r3, #0
 8029a3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8029a3c:	683b      	ldr	r3, [r7, #0]
 8029a3e:	f383 8811 	msr	BASEPRI, r3
}
 8029a42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8029a44:	bf00      	nop
 8029a46:	3708      	adds	r7, #8
 8029a48:	46bd      	mov	sp, r7
 8029a4a:	bd80      	pop	{r7, pc}
 8029a4c:	e000ed04 	.word	0xe000ed04

08029a50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8029a50:	b480      	push	{r7}
 8029a52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8029a54:	4b0b      	ldr	r3, [pc, #44]	@ (8029a84 <vPortSetupTimerInterrupt+0x34>)
 8029a56:	2200      	movs	r2, #0
 8029a58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8029a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8029a88 <vPortSetupTimerInterrupt+0x38>)
 8029a5c:	2200      	movs	r2, #0
 8029a5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8029a60:	4b0a      	ldr	r3, [pc, #40]	@ (8029a8c <vPortSetupTimerInterrupt+0x3c>)
 8029a62:	681b      	ldr	r3, [r3, #0]
 8029a64:	4a0a      	ldr	r2, [pc, #40]	@ (8029a90 <vPortSetupTimerInterrupt+0x40>)
 8029a66:	fba2 2303 	umull	r2, r3, r2, r3
 8029a6a:	099b      	lsrs	r3, r3, #6
 8029a6c:	4a09      	ldr	r2, [pc, #36]	@ (8029a94 <vPortSetupTimerInterrupt+0x44>)
 8029a6e:	3b01      	subs	r3, #1
 8029a70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8029a72:	4b04      	ldr	r3, [pc, #16]	@ (8029a84 <vPortSetupTimerInterrupt+0x34>)
 8029a74:	2207      	movs	r2, #7
 8029a76:	601a      	str	r2, [r3, #0]
}
 8029a78:	bf00      	nop
 8029a7a:	46bd      	mov	sp, r7
 8029a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a80:	4770      	bx	lr
 8029a82:	bf00      	nop
 8029a84:	e000e010 	.word	0xe000e010
 8029a88:	e000e018 	.word	0xe000e018
 8029a8c:	200002b0 	.word	0x200002b0
 8029a90:	10624dd3 	.word	0x10624dd3
 8029a94:	e000e014 	.word	0xe000e014

08029a98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8029a98:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8029aa8 <vPortEnableVFP+0x10>
 8029a9c:	6801      	ldr	r1, [r0, #0]
 8029a9e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8029aa2:	6001      	str	r1, [r0, #0]
 8029aa4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8029aa6:	bf00      	nop
 8029aa8:	e000ed88 	.word	0xe000ed88

08029aac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8029aac:	b480      	push	{r7}
 8029aae:	b085      	sub	sp, #20
 8029ab0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8029ab2:	f3ef 8305 	mrs	r3, IPSR
 8029ab6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8029ab8:	68fb      	ldr	r3, [r7, #12]
 8029aba:	2b0f      	cmp	r3, #15
 8029abc:	d917      	bls.n	8029aee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8029abe:	4a1a      	ldr	r2, [pc, #104]	@ (8029b28 <vPortValidateInterruptPriority+0x7c>)
 8029ac0:	68fb      	ldr	r3, [r7, #12]
 8029ac2:	4413      	add	r3, r2
 8029ac4:	781b      	ldrb	r3, [r3, #0]
 8029ac6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8029ac8:	4b18      	ldr	r3, [pc, #96]	@ (8029b2c <vPortValidateInterruptPriority+0x80>)
 8029aca:	781b      	ldrb	r3, [r3, #0]
 8029acc:	7afa      	ldrb	r2, [r7, #11]
 8029ace:	429a      	cmp	r2, r3
 8029ad0:	d20d      	bcs.n	8029aee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8029ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029ad6:	b672      	cpsid	i
 8029ad8:	f383 8811 	msr	BASEPRI, r3
 8029adc:	f3bf 8f6f 	isb	sy
 8029ae0:	f3bf 8f4f 	dsb	sy
 8029ae4:	b662      	cpsie	i
 8029ae6:	607b      	str	r3, [r7, #4]
}
 8029ae8:	bf00      	nop
 8029aea:	bf00      	nop
 8029aec:	e7fd      	b.n	8029aea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8029aee:	4b10      	ldr	r3, [pc, #64]	@ (8029b30 <vPortValidateInterruptPriority+0x84>)
 8029af0:	681b      	ldr	r3, [r3, #0]
 8029af2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8029af6:	4b0f      	ldr	r3, [pc, #60]	@ (8029b34 <vPortValidateInterruptPriority+0x88>)
 8029af8:	681b      	ldr	r3, [r3, #0]
 8029afa:	429a      	cmp	r2, r3
 8029afc:	d90d      	bls.n	8029b1a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8029afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029b02:	b672      	cpsid	i
 8029b04:	f383 8811 	msr	BASEPRI, r3
 8029b08:	f3bf 8f6f 	isb	sy
 8029b0c:	f3bf 8f4f 	dsb	sy
 8029b10:	b662      	cpsie	i
 8029b12:	603b      	str	r3, [r7, #0]
}
 8029b14:	bf00      	nop
 8029b16:	bf00      	nop
 8029b18:	e7fd      	b.n	8029b16 <vPortValidateInterruptPriority+0x6a>
	}
 8029b1a:	bf00      	nop
 8029b1c:	3714      	adds	r7, #20
 8029b1e:	46bd      	mov	sp, r7
 8029b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b24:	4770      	bx	lr
 8029b26:	bf00      	nop
 8029b28:	e000e3f0 	.word	0xe000e3f0
 8029b2c:	2001dec4 	.word	0x2001dec4
 8029b30:	e000ed0c 	.word	0xe000ed0c
 8029b34:	2001dec8 	.word	0x2001dec8

08029b38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8029b38:	b580      	push	{r7, lr}
 8029b3a:	b08a      	sub	sp, #40	@ 0x28
 8029b3c:	af00      	add	r7, sp, #0
 8029b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8029b40:	2300      	movs	r3, #0
 8029b42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8029b44:	f7fe fb4e 	bl	80281e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8029b48:	4b5d      	ldr	r3, [pc, #372]	@ (8029cc0 <pvPortMalloc+0x188>)
 8029b4a:	681b      	ldr	r3, [r3, #0]
 8029b4c:	2b00      	cmp	r3, #0
 8029b4e:	d101      	bne.n	8029b54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8029b50:	f000 f920 	bl	8029d94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8029b54:	4b5b      	ldr	r3, [pc, #364]	@ (8029cc4 <pvPortMalloc+0x18c>)
 8029b56:	681a      	ldr	r2, [r3, #0]
 8029b58:	687b      	ldr	r3, [r7, #4]
 8029b5a:	4013      	ands	r3, r2
 8029b5c:	2b00      	cmp	r3, #0
 8029b5e:	f040 8094 	bne.w	8029c8a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8029b62:	687b      	ldr	r3, [r7, #4]
 8029b64:	2b00      	cmp	r3, #0
 8029b66:	d020      	beq.n	8029baa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8029b68:	2208      	movs	r2, #8
 8029b6a:	687b      	ldr	r3, [r7, #4]
 8029b6c:	4413      	add	r3, r2
 8029b6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8029b70:	687b      	ldr	r3, [r7, #4]
 8029b72:	f003 0307 	and.w	r3, r3, #7
 8029b76:	2b00      	cmp	r3, #0
 8029b78:	d017      	beq.n	8029baa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8029b7a:	687b      	ldr	r3, [r7, #4]
 8029b7c:	f023 0307 	bic.w	r3, r3, #7
 8029b80:	3308      	adds	r3, #8
 8029b82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8029b84:	687b      	ldr	r3, [r7, #4]
 8029b86:	f003 0307 	and.w	r3, r3, #7
 8029b8a:	2b00      	cmp	r3, #0
 8029b8c:	d00d      	beq.n	8029baa <pvPortMalloc+0x72>
	__asm volatile
 8029b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029b92:	b672      	cpsid	i
 8029b94:	f383 8811 	msr	BASEPRI, r3
 8029b98:	f3bf 8f6f 	isb	sy
 8029b9c:	f3bf 8f4f 	dsb	sy
 8029ba0:	b662      	cpsie	i
 8029ba2:	617b      	str	r3, [r7, #20]
}
 8029ba4:	bf00      	nop
 8029ba6:	bf00      	nop
 8029ba8:	e7fd      	b.n	8029ba6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8029baa:	687b      	ldr	r3, [r7, #4]
 8029bac:	2b00      	cmp	r3, #0
 8029bae:	d06c      	beq.n	8029c8a <pvPortMalloc+0x152>
 8029bb0:	4b45      	ldr	r3, [pc, #276]	@ (8029cc8 <pvPortMalloc+0x190>)
 8029bb2:	681b      	ldr	r3, [r3, #0]
 8029bb4:	687a      	ldr	r2, [r7, #4]
 8029bb6:	429a      	cmp	r2, r3
 8029bb8:	d867      	bhi.n	8029c8a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8029bba:	4b44      	ldr	r3, [pc, #272]	@ (8029ccc <pvPortMalloc+0x194>)
 8029bbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8029bbe:	4b43      	ldr	r3, [pc, #268]	@ (8029ccc <pvPortMalloc+0x194>)
 8029bc0:	681b      	ldr	r3, [r3, #0]
 8029bc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8029bc4:	e004      	b.n	8029bd0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8029bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029bc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8029bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029bcc:	681b      	ldr	r3, [r3, #0]
 8029bce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8029bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029bd2:	685b      	ldr	r3, [r3, #4]
 8029bd4:	687a      	ldr	r2, [r7, #4]
 8029bd6:	429a      	cmp	r2, r3
 8029bd8:	d903      	bls.n	8029be2 <pvPortMalloc+0xaa>
 8029bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029bdc:	681b      	ldr	r3, [r3, #0]
 8029bde:	2b00      	cmp	r3, #0
 8029be0:	d1f1      	bne.n	8029bc6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8029be2:	4b37      	ldr	r3, [pc, #220]	@ (8029cc0 <pvPortMalloc+0x188>)
 8029be4:	681b      	ldr	r3, [r3, #0]
 8029be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8029be8:	429a      	cmp	r2, r3
 8029bea:	d04e      	beq.n	8029c8a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8029bec:	6a3b      	ldr	r3, [r7, #32]
 8029bee:	681b      	ldr	r3, [r3, #0]
 8029bf0:	2208      	movs	r2, #8
 8029bf2:	4413      	add	r3, r2
 8029bf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8029bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029bf8:	681a      	ldr	r2, [r3, #0]
 8029bfa:	6a3b      	ldr	r3, [r7, #32]
 8029bfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8029bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029c00:	685a      	ldr	r2, [r3, #4]
 8029c02:	687b      	ldr	r3, [r7, #4]
 8029c04:	1ad2      	subs	r2, r2, r3
 8029c06:	2308      	movs	r3, #8
 8029c08:	005b      	lsls	r3, r3, #1
 8029c0a:	429a      	cmp	r2, r3
 8029c0c:	d922      	bls.n	8029c54 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8029c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8029c10:	687b      	ldr	r3, [r7, #4]
 8029c12:	4413      	add	r3, r2
 8029c14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8029c16:	69bb      	ldr	r3, [r7, #24]
 8029c18:	f003 0307 	and.w	r3, r3, #7
 8029c1c:	2b00      	cmp	r3, #0
 8029c1e:	d00d      	beq.n	8029c3c <pvPortMalloc+0x104>
	__asm volatile
 8029c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029c24:	b672      	cpsid	i
 8029c26:	f383 8811 	msr	BASEPRI, r3
 8029c2a:	f3bf 8f6f 	isb	sy
 8029c2e:	f3bf 8f4f 	dsb	sy
 8029c32:	b662      	cpsie	i
 8029c34:	613b      	str	r3, [r7, #16]
}
 8029c36:	bf00      	nop
 8029c38:	bf00      	nop
 8029c3a:	e7fd      	b.n	8029c38 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8029c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029c3e:	685a      	ldr	r2, [r3, #4]
 8029c40:	687b      	ldr	r3, [r7, #4]
 8029c42:	1ad2      	subs	r2, r2, r3
 8029c44:	69bb      	ldr	r3, [r7, #24]
 8029c46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8029c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029c4a:	687a      	ldr	r2, [r7, #4]
 8029c4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8029c4e:	69b8      	ldr	r0, [r7, #24]
 8029c50:	f000 f902 	bl	8029e58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8029c54:	4b1c      	ldr	r3, [pc, #112]	@ (8029cc8 <pvPortMalloc+0x190>)
 8029c56:	681a      	ldr	r2, [r3, #0]
 8029c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029c5a:	685b      	ldr	r3, [r3, #4]
 8029c5c:	1ad3      	subs	r3, r2, r3
 8029c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8029cc8 <pvPortMalloc+0x190>)
 8029c60:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8029c62:	4b19      	ldr	r3, [pc, #100]	@ (8029cc8 <pvPortMalloc+0x190>)
 8029c64:	681a      	ldr	r2, [r3, #0]
 8029c66:	4b1a      	ldr	r3, [pc, #104]	@ (8029cd0 <pvPortMalloc+0x198>)
 8029c68:	681b      	ldr	r3, [r3, #0]
 8029c6a:	429a      	cmp	r2, r3
 8029c6c:	d203      	bcs.n	8029c76 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8029c6e:	4b16      	ldr	r3, [pc, #88]	@ (8029cc8 <pvPortMalloc+0x190>)
 8029c70:	681b      	ldr	r3, [r3, #0]
 8029c72:	4a17      	ldr	r2, [pc, #92]	@ (8029cd0 <pvPortMalloc+0x198>)
 8029c74:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8029c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029c78:	685a      	ldr	r2, [r3, #4]
 8029c7a:	4b12      	ldr	r3, [pc, #72]	@ (8029cc4 <pvPortMalloc+0x18c>)
 8029c7c:	681b      	ldr	r3, [r3, #0]
 8029c7e:	431a      	orrs	r2, r3
 8029c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029c82:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8029c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029c86:	2200      	movs	r2, #0
 8029c88:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8029c8a:	f7fe fab9 	bl	8028200 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8029c8e:	69fb      	ldr	r3, [r7, #28]
 8029c90:	f003 0307 	and.w	r3, r3, #7
 8029c94:	2b00      	cmp	r3, #0
 8029c96:	d00d      	beq.n	8029cb4 <pvPortMalloc+0x17c>
	__asm volatile
 8029c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029c9c:	b672      	cpsid	i
 8029c9e:	f383 8811 	msr	BASEPRI, r3
 8029ca2:	f3bf 8f6f 	isb	sy
 8029ca6:	f3bf 8f4f 	dsb	sy
 8029caa:	b662      	cpsie	i
 8029cac:	60fb      	str	r3, [r7, #12]
}
 8029cae:	bf00      	nop
 8029cb0:	bf00      	nop
 8029cb2:	e7fd      	b.n	8029cb0 <pvPortMalloc+0x178>
	return pvReturn;
 8029cb4:	69fb      	ldr	r3, [r7, #28]
}
 8029cb6:	4618      	mov	r0, r3
 8029cb8:	3728      	adds	r7, #40	@ 0x28
 8029cba:	46bd      	mov	sp, r7
 8029cbc:	bd80      	pop	{r7, pc}
 8029cbe:	bf00      	nop
 8029cc0:	2002ded4 	.word	0x2002ded4
 8029cc4:	2002dee0 	.word	0x2002dee0
 8029cc8:	2002ded8 	.word	0x2002ded8
 8029ccc:	2002decc 	.word	0x2002decc
 8029cd0:	2002dedc 	.word	0x2002dedc

08029cd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8029cd4:	b580      	push	{r7, lr}
 8029cd6:	b086      	sub	sp, #24
 8029cd8:	af00      	add	r7, sp, #0
 8029cda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8029cdc:	687b      	ldr	r3, [r7, #4]
 8029cde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8029ce0:	687b      	ldr	r3, [r7, #4]
 8029ce2:	2b00      	cmp	r3, #0
 8029ce4:	d04e      	beq.n	8029d84 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8029ce6:	2308      	movs	r3, #8
 8029ce8:	425b      	negs	r3, r3
 8029cea:	697a      	ldr	r2, [r7, #20]
 8029cec:	4413      	add	r3, r2
 8029cee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8029cf0:	697b      	ldr	r3, [r7, #20]
 8029cf2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8029cf4:	693b      	ldr	r3, [r7, #16]
 8029cf6:	685a      	ldr	r2, [r3, #4]
 8029cf8:	4b24      	ldr	r3, [pc, #144]	@ (8029d8c <vPortFree+0xb8>)
 8029cfa:	681b      	ldr	r3, [r3, #0]
 8029cfc:	4013      	ands	r3, r2
 8029cfe:	2b00      	cmp	r3, #0
 8029d00:	d10d      	bne.n	8029d1e <vPortFree+0x4a>
	__asm volatile
 8029d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029d06:	b672      	cpsid	i
 8029d08:	f383 8811 	msr	BASEPRI, r3
 8029d0c:	f3bf 8f6f 	isb	sy
 8029d10:	f3bf 8f4f 	dsb	sy
 8029d14:	b662      	cpsie	i
 8029d16:	60fb      	str	r3, [r7, #12]
}
 8029d18:	bf00      	nop
 8029d1a:	bf00      	nop
 8029d1c:	e7fd      	b.n	8029d1a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8029d1e:	693b      	ldr	r3, [r7, #16]
 8029d20:	681b      	ldr	r3, [r3, #0]
 8029d22:	2b00      	cmp	r3, #0
 8029d24:	d00d      	beq.n	8029d42 <vPortFree+0x6e>
	__asm volatile
 8029d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029d2a:	b672      	cpsid	i
 8029d2c:	f383 8811 	msr	BASEPRI, r3
 8029d30:	f3bf 8f6f 	isb	sy
 8029d34:	f3bf 8f4f 	dsb	sy
 8029d38:	b662      	cpsie	i
 8029d3a:	60bb      	str	r3, [r7, #8]
}
 8029d3c:	bf00      	nop
 8029d3e:	bf00      	nop
 8029d40:	e7fd      	b.n	8029d3e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8029d42:	693b      	ldr	r3, [r7, #16]
 8029d44:	685a      	ldr	r2, [r3, #4]
 8029d46:	4b11      	ldr	r3, [pc, #68]	@ (8029d8c <vPortFree+0xb8>)
 8029d48:	681b      	ldr	r3, [r3, #0]
 8029d4a:	4013      	ands	r3, r2
 8029d4c:	2b00      	cmp	r3, #0
 8029d4e:	d019      	beq.n	8029d84 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8029d50:	693b      	ldr	r3, [r7, #16]
 8029d52:	681b      	ldr	r3, [r3, #0]
 8029d54:	2b00      	cmp	r3, #0
 8029d56:	d115      	bne.n	8029d84 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8029d58:	693b      	ldr	r3, [r7, #16]
 8029d5a:	685a      	ldr	r2, [r3, #4]
 8029d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8029d8c <vPortFree+0xb8>)
 8029d5e:	681b      	ldr	r3, [r3, #0]
 8029d60:	43db      	mvns	r3, r3
 8029d62:	401a      	ands	r2, r3
 8029d64:	693b      	ldr	r3, [r7, #16]
 8029d66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8029d68:	f7fe fa3c 	bl	80281e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8029d6c:	693b      	ldr	r3, [r7, #16]
 8029d6e:	685a      	ldr	r2, [r3, #4]
 8029d70:	4b07      	ldr	r3, [pc, #28]	@ (8029d90 <vPortFree+0xbc>)
 8029d72:	681b      	ldr	r3, [r3, #0]
 8029d74:	4413      	add	r3, r2
 8029d76:	4a06      	ldr	r2, [pc, #24]	@ (8029d90 <vPortFree+0xbc>)
 8029d78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8029d7a:	6938      	ldr	r0, [r7, #16]
 8029d7c:	f000 f86c 	bl	8029e58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8029d80:	f7fe fa3e 	bl	8028200 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8029d84:	bf00      	nop
 8029d86:	3718      	adds	r7, #24
 8029d88:	46bd      	mov	sp, r7
 8029d8a:	bd80      	pop	{r7, pc}
 8029d8c:	2002dee0 	.word	0x2002dee0
 8029d90:	2002ded8 	.word	0x2002ded8

08029d94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8029d94:	b480      	push	{r7}
 8029d96:	b085      	sub	sp, #20
 8029d98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8029d9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8029d9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8029da0:	4b27      	ldr	r3, [pc, #156]	@ (8029e40 <prvHeapInit+0xac>)
 8029da2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8029da4:	68fb      	ldr	r3, [r7, #12]
 8029da6:	f003 0307 	and.w	r3, r3, #7
 8029daa:	2b00      	cmp	r3, #0
 8029dac:	d00c      	beq.n	8029dc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8029dae:	68fb      	ldr	r3, [r7, #12]
 8029db0:	3307      	adds	r3, #7
 8029db2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8029db4:	68fb      	ldr	r3, [r7, #12]
 8029db6:	f023 0307 	bic.w	r3, r3, #7
 8029dba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8029dbc:	68ba      	ldr	r2, [r7, #8]
 8029dbe:	68fb      	ldr	r3, [r7, #12]
 8029dc0:	1ad3      	subs	r3, r2, r3
 8029dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8029e40 <prvHeapInit+0xac>)
 8029dc4:	4413      	add	r3, r2
 8029dc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8029dc8:	68fb      	ldr	r3, [r7, #12]
 8029dca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8029dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8029e44 <prvHeapInit+0xb0>)
 8029dce:	687b      	ldr	r3, [r7, #4]
 8029dd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8029dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8029e44 <prvHeapInit+0xb0>)
 8029dd4:	2200      	movs	r2, #0
 8029dd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8029dd8:	687b      	ldr	r3, [r7, #4]
 8029dda:	68ba      	ldr	r2, [r7, #8]
 8029ddc:	4413      	add	r3, r2
 8029dde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8029de0:	2208      	movs	r2, #8
 8029de2:	68fb      	ldr	r3, [r7, #12]
 8029de4:	1a9b      	subs	r3, r3, r2
 8029de6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8029de8:	68fb      	ldr	r3, [r7, #12]
 8029dea:	f023 0307 	bic.w	r3, r3, #7
 8029dee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8029df0:	68fb      	ldr	r3, [r7, #12]
 8029df2:	4a15      	ldr	r2, [pc, #84]	@ (8029e48 <prvHeapInit+0xb4>)
 8029df4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8029df6:	4b14      	ldr	r3, [pc, #80]	@ (8029e48 <prvHeapInit+0xb4>)
 8029df8:	681b      	ldr	r3, [r3, #0]
 8029dfa:	2200      	movs	r2, #0
 8029dfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8029dfe:	4b12      	ldr	r3, [pc, #72]	@ (8029e48 <prvHeapInit+0xb4>)
 8029e00:	681b      	ldr	r3, [r3, #0]
 8029e02:	2200      	movs	r2, #0
 8029e04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8029e06:	687b      	ldr	r3, [r7, #4]
 8029e08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8029e0a:	683b      	ldr	r3, [r7, #0]
 8029e0c:	68fa      	ldr	r2, [r7, #12]
 8029e0e:	1ad2      	subs	r2, r2, r3
 8029e10:	683b      	ldr	r3, [r7, #0]
 8029e12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8029e14:	4b0c      	ldr	r3, [pc, #48]	@ (8029e48 <prvHeapInit+0xb4>)
 8029e16:	681a      	ldr	r2, [r3, #0]
 8029e18:	683b      	ldr	r3, [r7, #0]
 8029e1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8029e1c:	683b      	ldr	r3, [r7, #0]
 8029e1e:	685b      	ldr	r3, [r3, #4]
 8029e20:	4a0a      	ldr	r2, [pc, #40]	@ (8029e4c <prvHeapInit+0xb8>)
 8029e22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8029e24:	683b      	ldr	r3, [r7, #0]
 8029e26:	685b      	ldr	r3, [r3, #4]
 8029e28:	4a09      	ldr	r2, [pc, #36]	@ (8029e50 <prvHeapInit+0xbc>)
 8029e2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8029e2c:	4b09      	ldr	r3, [pc, #36]	@ (8029e54 <prvHeapInit+0xc0>)
 8029e2e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8029e32:	601a      	str	r2, [r3, #0]
}
 8029e34:	bf00      	nop
 8029e36:	3714      	adds	r7, #20
 8029e38:	46bd      	mov	sp, r7
 8029e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e3e:	4770      	bx	lr
 8029e40:	2001decc 	.word	0x2001decc
 8029e44:	2002decc 	.word	0x2002decc
 8029e48:	2002ded4 	.word	0x2002ded4
 8029e4c:	2002dedc 	.word	0x2002dedc
 8029e50:	2002ded8 	.word	0x2002ded8
 8029e54:	2002dee0 	.word	0x2002dee0

08029e58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8029e58:	b480      	push	{r7}
 8029e5a:	b085      	sub	sp, #20
 8029e5c:	af00      	add	r7, sp, #0
 8029e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8029e60:	4b28      	ldr	r3, [pc, #160]	@ (8029f04 <prvInsertBlockIntoFreeList+0xac>)
 8029e62:	60fb      	str	r3, [r7, #12]
 8029e64:	e002      	b.n	8029e6c <prvInsertBlockIntoFreeList+0x14>
 8029e66:	68fb      	ldr	r3, [r7, #12]
 8029e68:	681b      	ldr	r3, [r3, #0]
 8029e6a:	60fb      	str	r3, [r7, #12]
 8029e6c:	68fb      	ldr	r3, [r7, #12]
 8029e6e:	681b      	ldr	r3, [r3, #0]
 8029e70:	687a      	ldr	r2, [r7, #4]
 8029e72:	429a      	cmp	r2, r3
 8029e74:	d8f7      	bhi.n	8029e66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8029e76:	68fb      	ldr	r3, [r7, #12]
 8029e78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8029e7a:	68fb      	ldr	r3, [r7, #12]
 8029e7c:	685b      	ldr	r3, [r3, #4]
 8029e7e:	68ba      	ldr	r2, [r7, #8]
 8029e80:	4413      	add	r3, r2
 8029e82:	687a      	ldr	r2, [r7, #4]
 8029e84:	429a      	cmp	r2, r3
 8029e86:	d108      	bne.n	8029e9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8029e88:	68fb      	ldr	r3, [r7, #12]
 8029e8a:	685a      	ldr	r2, [r3, #4]
 8029e8c:	687b      	ldr	r3, [r7, #4]
 8029e8e:	685b      	ldr	r3, [r3, #4]
 8029e90:	441a      	add	r2, r3
 8029e92:	68fb      	ldr	r3, [r7, #12]
 8029e94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8029e96:	68fb      	ldr	r3, [r7, #12]
 8029e98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8029e9a:	687b      	ldr	r3, [r7, #4]
 8029e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8029e9e:	687b      	ldr	r3, [r7, #4]
 8029ea0:	685b      	ldr	r3, [r3, #4]
 8029ea2:	68ba      	ldr	r2, [r7, #8]
 8029ea4:	441a      	add	r2, r3
 8029ea6:	68fb      	ldr	r3, [r7, #12]
 8029ea8:	681b      	ldr	r3, [r3, #0]
 8029eaa:	429a      	cmp	r2, r3
 8029eac:	d118      	bne.n	8029ee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8029eae:	68fb      	ldr	r3, [r7, #12]
 8029eb0:	681a      	ldr	r2, [r3, #0]
 8029eb2:	4b15      	ldr	r3, [pc, #84]	@ (8029f08 <prvInsertBlockIntoFreeList+0xb0>)
 8029eb4:	681b      	ldr	r3, [r3, #0]
 8029eb6:	429a      	cmp	r2, r3
 8029eb8:	d00d      	beq.n	8029ed6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8029eba:	687b      	ldr	r3, [r7, #4]
 8029ebc:	685a      	ldr	r2, [r3, #4]
 8029ebe:	68fb      	ldr	r3, [r7, #12]
 8029ec0:	681b      	ldr	r3, [r3, #0]
 8029ec2:	685b      	ldr	r3, [r3, #4]
 8029ec4:	441a      	add	r2, r3
 8029ec6:	687b      	ldr	r3, [r7, #4]
 8029ec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8029eca:	68fb      	ldr	r3, [r7, #12]
 8029ecc:	681b      	ldr	r3, [r3, #0]
 8029ece:	681a      	ldr	r2, [r3, #0]
 8029ed0:	687b      	ldr	r3, [r7, #4]
 8029ed2:	601a      	str	r2, [r3, #0]
 8029ed4:	e008      	b.n	8029ee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8029ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8029f08 <prvInsertBlockIntoFreeList+0xb0>)
 8029ed8:	681a      	ldr	r2, [r3, #0]
 8029eda:	687b      	ldr	r3, [r7, #4]
 8029edc:	601a      	str	r2, [r3, #0]
 8029ede:	e003      	b.n	8029ee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8029ee0:	68fb      	ldr	r3, [r7, #12]
 8029ee2:	681a      	ldr	r2, [r3, #0]
 8029ee4:	687b      	ldr	r3, [r7, #4]
 8029ee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8029ee8:	68fa      	ldr	r2, [r7, #12]
 8029eea:	687b      	ldr	r3, [r7, #4]
 8029eec:	429a      	cmp	r2, r3
 8029eee:	d002      	beq.n	8029ef6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8029ef0:	68fb      	ldr	r3, [r7, #12]
 8029ef2:	687a      	ldr	r2, [r7, #4]
 8029ef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8029ef6:	bf00      	nop
 8029ef8:	3714      	adds	r7, #20
 8029efa:	46bd      	mov	sp, r7
 8029efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f00:	4770      	bx	lr
 8029f02:	bf00      	nop
 8029f04:	2002decc 	.word	0x2002decc
 8029f08:	2002ded4 	.word	0x2002ded4

08029f0c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8029f0c:	b580      	push	{r7, lr}
 8029f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8029f10:	2201      	movs	r2, #1
 8029f12:	490e      	ldr	r1, [pc, #56]	@ (8029f4c <MX_USB_HOST_Init+0x40>)
 8029f14:	480e      	ldr	r0, [pc, #56]	@ (8029f50 <MX_USB_HOST_Init+0x44>)
 8029f16:	f7f7 fc83 	bl	8021820 <USBH_Init>
 8029f1a:	4603      	mov	r3, r0
 8029f1c:	2b00      	cmp	r3, #0
 8029f1e:	d001      	beq.n	8029f24 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8029f20:	f7db ffa6 	bl	8005e70 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8029f24:	490b      	ldr	r1, [pc, #44]	@ (8029f54 <MX_USB_HOST_Init+0x48>)
 8029f26:	480a      	ldr	r0, [pc, #40]	@ (8029f50 <MX_USB_HOST_Init+0x44>)
 8029f28:	f7f7 fd49 	bl	80219be <USBH_RegisterClass>
 8029f2c:	4603      	mov	r3, r0
 8029f2e:	2b00      	cmp	r3, #0
 8029f30:	d001      	beq.n	8029f36 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8029f32:	f7db ff9d 	bl	8005e70 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8029f36:	4806      	ldr	r0, [pc, #24]	@ (8029f50 <MX_USB_HOST_Init+0x44>)
 8029f38:	f7f7 fdcd 	bl	8021ad6 <USBH_Start>
 8029f3c:	4603      	mov	r3, r0
 8029f3e:	2b00      	cmp	r3, #0
 8029f40:	d001      	beq.n	8029f46 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8029f42:	f7db ff95 	bl	8005e70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8029f46:	bf00      	nop
 8029f48:	bd80      	pop	{r7, pc}
 8029f4a:	bf00      	nop
 8029f4c:	08029f59 	.word	0x08029f59
 8029f50:	2002dee4 	.word	0x2002dee4
 8029f54:	200002bc 	.word	0x200002bc

08029f58 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8029f58:	b580      	push	{r7, lr}
 8029f5a:	b082      	sub	sp, #8
 8029f5c:	af00      	add	r7, sp, #0
 8029f5e:	6078      	str	r0, [r7, #4]
 8029f60:	460b      	mov	r3, r1
 8029f62:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
	switch (id) {
 8029f64:	78fb      	ldrb	r3, [r7, #3]
 8029f66:	3b01      	subs	r3, #1
 8029f68:	2b04      	cmp	r3, #4
 8029f6a:	d83a      	bhi.n	8029fe2 <USBH_UserProcess+0x8a>
 8029f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8029f74 <USBH_UserProcess+0x1c>)
 8029f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029f72:	bf00      	nop
 8029f74:	08029fe3 	.word	0x08029fe3
 8029f78:	08029fa1 	.word	0x08029fa1
 8029f7c:	08029fe3 	.word	0x08029fe3
 8029f80:	08029faf 	.word	0x08029faf
 8029f84:	08029f89 	.word	0x08029f89
	case HOST_USER_SELECT_CONFIGURATION:
		break;

	case HOST_USER_DISCONNECTION:
		Appli_state = APPLICATION_DISCONNECT;
 8029f88:	4b18      	ldr	r3, [pc, #96]	@ (8029fec <USBH_UserProcess+0x94>)
 8029f8a:	2203      	movs	r2, #3
 8029f8c:	701a      	strb	r2, [r3, #0]
		printf("------APPLICATION_DISCONNECT-----! \r\n");
 8029f8e:	4818      	ldr	r0, [pc, #96]	@ (8029ff0 <USBH_UserProcess+0x98>)
 8029f90:	f001 fc66 	bl	802b860 <puts>
		f_mount(NULL, (const TCHAR*) "", 1);
 8029f94:	2201      	movs	r2, #1
 8029f96:	4917      	ldr	r1, [pc, #92]	@ (8029ff4 <USBH_UserProcess+0x9c>)
 8029f98:	2000      	movs	r0, #0
 8029f9a:	f7fb f9f5 	bl	8025388 <f_mount>

		break;
 8029f9e:	e021      	b.n	8029fe4 <USBH_UserProcess+0x8c>

	case HOST_USER_CLASS_ACTIVE:
		Appli_state = APPLICATION_READY;
 8029fa0:	4b12      	ldr	r3, [pc, #72]	@ (8029fec <USBH_UserProcess+0x94>)
 8029fa2:	2202      	movs	r2, #2
 8029fa4:	701a      	strb	r2, [r3, #0]
		printf("------HOST_USER_CLASS_ACTIVE-----! \r\n");
 8029fa6:	4814      	ldr	r0, [pc, #80]	@ (8029ff8 <USBH_UserProcess+0xa0>)
 8029fa8:	f001 fc5a 	bl	802b860 <puts>
		break;
 8029fac:	e01a      	b.n	8029fe4 <USBH_UserProcess+0x8c>

	case HOST_USER_CONNECTION:
		Appli_state = APPLICATION_START;
 8029fae:	4b0f      	ldr	r3, [pc, #60]	@ (8029fec <USBH_UserProcess+0x94>)
 8029fb0:	2201      	movs	r2, #1
 8029fb2:	701a      	strb	r2, [r3, #0]
		printf("------HOST_USER_CONNECTION-------! \r\n");
 8029fb4:	4811      	ldr	r0, [pc, #68]	@ (8029ffc <USBH_UserProcess+0xa4>)
 8029fb6:	f001 fc53 	bl	802b860 <puts>
		osDelay(1000);
 8029fba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8029fbe:	f7fc fa19 	bl	80263f4 <osDelay>
		if (f_mount(&USBHFatFS, (const TCHAR*) USBHPath, 0) == FR_OK) {
 8029fc2:	2200      	movs	r2, #0
 8029fc4:	490e      	ldr	r1, [pc, #56]	@ (802a000 <USBH_UserProcess+0xa8>)
 8029fc6:	480f      	ldr	r0, [pc, #60]	@ (802a004 <USBH_UserProcess+0xac>)
 8029fc8:	f7fb f9de 	bl	8025388 <f_mount>
 8029fcc:	4603      	mov	r3, r0
 8029fce:	2b00      	cmp	r3, #0
 8029fd0:	d103      	bne.n	8029fda <USBH_UserProcess+0x82>
			printf("f_mount OK  \r\n");
 8029fd2:	480d      	ldr	r0, [pc, #52]	@ (802a008 <USBH_UserProcess+0xb0>)
 8029fd4:	f001 fc44 	bl	802b860 <puts>
		} else {
			printf("f_mount ERROR!  \r\n");
		}
		break;
 8029fd8:	e004      	b.n	8029fe4 <USBH_UserProcess+0x8c>
			printf("f_mount ERROR!  \r\n");
 8029fda:	480c      	ldr	r0, [pc, #48]	@ (802a00c <USBH_UserProcess+0xb4>)
 8029fdc:	f001 fc40 	bl	802b860 <puts>
		break;
 8029fe0:	e000      	b.n	8029fe4 <USBH_UserProcess+0x8c>

	default:
		break;
 8029fe2:	bf00      	nop
	}
  /* USER CODE END CALL_BACK_1 */
}
 8029fe4:	bf00      	nop
 8029fe6:	3708      	adds	r7, #8
 8029fe8:	46bd      	mov	sp, r7
 8029fea:	bd80      	pop	{r7, pc}
 8029fec:	2002e2c8 	.word	0x2002e2c8
 8029ff0:	080315c0 	.word	0x080315c0
 8029ff4:	080315e8 	.word	0x080315e8
 8029ff8:	080315ec 	.word	0x080315ec
 8029ffc:	08031614 	.word	0x08031614
 802a000:	2001b040 	.word	0x2001b040
 802a004:	2001b044 	.word	0x2001b044
 802a008:	0803163c 	.word	0x0803163c
 802a00c:	0803164c 	.word	0x0803164c

0802a010 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 802a010:	b580      	push	{r7, lr}
 802a012:	b0ae      	sub	sp, #184	@ 0xb8
 802a014:	af00      	add	r7, sp, #0
 802a016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802a018:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 802a01c:	2200      	movs	r2, #0
 802a01e:	601a      	str	r2, [r3, #0]
 802a020:	605a      	str	r2, [r3, #4]
 802a022:	609a      	str	r2, [r3, #8]
 802a024:	60da      	str	r2, [r3, #12]
 802a026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802a028:	f107 0314 	add.w	r3, r7, #20
 802a02c:	2290      	movs	r2, #144	@ 0x90
 802a02e:	2100      	movs	r1, #0
 802a030:	4618      	mov	r0, r3
 802a032:	f001 fd6b 	bl	802bb0c <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 802a036:	687b      	ldr	r3, [r7, #4]
 802a038:	681b      	ldr	r3, [r3, #0]
 802a03a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 802a03e:	d161      	bne.n	802a104 <HAL_HCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 802a040:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 802a044:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 802a046:	2300      	movs	r3, #0
 802a048:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802a04c:	f107 0314 	add.w	r3, r7, #20
 802a050:	4618      	mov	r0, r3
 802a052:	f7f2 f89d 	bl	801c190 <HAL_RCCEx_PeriphCLKConfig>
 802a056:	4603      	mov	r3, r0
 802a058:	2b00      	cmp	r3, #0
 802a05a:	d001      	beq.n	802a060 <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 802a05c:	f7db ff08 	bl	8005e70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802a060:	4b2a      	ldr	r3, [pc, #168]	@ (802a10c <HAL_HCD_MspInit+0xfc>)
 802a062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a064:	4a29      	ldr	r2, [pc, #164]	@ (802a10c <HAL_HCD_MspInit+0xfc>)
 802a066:	f043 0301 	orr.w	r3, r3, #1
 802a06a:	6313      	str	r3, [r2, #48]	@ 0x30
 802a06c:	4b27      	ldr	r3, [pc, #156]	@ (802a10c <HAL_HCD_MspInit+0xfc>)
 802a06e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a070:	f003 0301 	and.w	r3, r3, #1
 802a074:	613b      	str	r3, [r7, #16]
 802a076:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 802a078:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 802a07c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802a080:	2302      	movs	r3, #2
 802a082:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a086:	2300      	movs	r3, #0
 802a088:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802a08c:	2303      	movs	r3, #3
 802a08e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 802a092:	230a      	movs	r3, #10
 802a094:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802a098:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 802a09c:	4619      	mov	r1, r3
 802a09e:	481c      	ldr	r0, [pc, #112]	@ (802a110 <HAL_HCD_MspInit+0x100>)
 802a0a0:	f7ee fef2 	bl	8018e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 802a0a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802a0a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802a0ac:	2300      	movs	r3, #0
 802a0ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a0b2:	2300      	movs	r3, #0
 802a0b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 802a0b8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 802a0bc:	4619      	mov	r1, r3
 802a0be:	4814      	ldr	r0, [pc, #80]	@ (802a110 <HAL_HCD_MspInit+0x100>)
 802a0c0:	f7ee fee2 	bl	8018e88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 802a0c4:	4b11      	ldr	r3, [pc, #68]	@ (802a10c <HAL_HCD_MspInit+0xfc>)
 802a0c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802a0c8:	4a10      	ldr	r2, [pc, #64]	@ (802a10c <HAL_HCD_MspInit+0xfc>)
 802a0ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802a0ce:	6353      	str	r3, [r2, #52]	@ 0x34
 802a0d0:	4b0e      	ldr	r3, [pc, #56]	@ (802a10c <HAL_HCD_MspInit+0xfc>)
 802a0d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802a0d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802a0d8:	60fb      	str	r3, [r7, #12]
 802a0da:	68fb      	ldr	r3, [r7, #12]
 802a0dc:	4b0b      	ldr	r3, [pc, #44]	@ (802a10c <HAL_HCD_MspInit+0xfc>)
 802a0de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802a0e0:	4a0a      	ldr	r2, [pc, #40]	@ (802a10c <HAL_HCD_MspInit+0xfc>)
 802a0e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 802a0e6:	6453      	str	r3, [r2, #68]	@ 0x44
 802a0e8:	4b08      	ldr	r3, [pc, #32]	@ (802a10c <HAL_HCD_MspInit+0xfc>)
 802a0ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802a0ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 802a0f0:	60bb      	str	r3, [r7, #8]
 802a0f2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 802a0f4:	2200      	movs	r2, #0
 802a0f6:	2105      	movs	r1, #5
 802a0f8:	2043      	movs	r0, #67	@ 0x43
 802a0fa:	f7ee fb4d 	bl	8018798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 802a0fe:	2043      	movs	r0, #67	@ 0x43
 802a100:	f7ee fb66 	bl	80187d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 802a104:	bf00      	nop
 802a106:	37b8      	adds	r7, #184	@ 0xb8
 802a108:	46bd      	mov	sp, r7
 802a10a:	bd80      	pop	{r7, pc}
 802a10c:	40023800 	.word	0x40023800
 802a110:	40020000 	.word	0x40020000

0802a114 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 802a114:	b580      	push	{r7, lr}
 802a116:	b082      	sub	sp, #8
 802a118:	af00      	add	r7, sp, #0
 802a11a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 802a11c:	687b      	ldr	r3, [r7, #4]
 802a11e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 802a122:	4618      	mov	r0, r3
 802a124:	f7f8 f989 	bl	802243a <USBH_LL_IncTimer>
}
 802a128:	bf00      	nop
 802a12a:	3708      	adds	r7, #8
 802a12c:	46bd      	mov	sp, r7
 802a12e:	bd80      	pop	{r7, pc}

0802a130 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 802a130:	b580      	push	{r7, lr}
 802a132:	b082      	sub	sp, #8
 802a134:	af00      	add	r7, sp, #0
 802a136:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 802a138:	687b      	ldr	r3, [r7, #4]
 802a13a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 802a13e:	4618      	mov	r0, r3
 802a140:	f7f8 f9cd 	bl	80224de <USBH_LL_Connect>
}
 802a144:	bf00      	nop
 802a146:	3708      	adds	r7, #8
 802a148:	46bd      	mov	sp, r7
 802a14a:	bd80      	pop	{r7, pc}

0802a14c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 802a14c:	b580      	push	{r7, lr}
 802a14e:	b082      	sub	sp, #8
 802a150:	af00      	add	r7, sp, #0
 802a152:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 802a154:	687b      	ldr	r3, [r7, #4]
 802a156:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 802a15a:	4618      	mov	r0, r3
 802a15c:	f7f8 f9e2 	bl	8022524 <USBH_LL_Disconnect>
}
 802a160:	bf00      	nop
 802a162:	3708      	adds	r7, #8
 802a164:	46bd      	mov	sp, r7
 802a166:	bd80      	pop	{r7, pc}

0802a168 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 802a168:	b580      	push	{r7, lr}
 802a16a:	b082      	sub	sp, #8
 802a16c:	af00      	add	r7, sp, #0
 802a16e:	6078      	str	r0, [r7, #4]
 802a170:	460b      	mov	r3, r1
 802a172:	70fb      	strb	r3, [r7, #3]
 802a174:	4613      	mov	r3, r2
 802a176:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 802a178:	687b      	ldr	r3, [r7, #4]
 802a17a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 802a17e:	4618      	mov	r0, r3
 802a180:	f7f8 fa19 	bl	80225b6 <USBH_LL_NotifyURBChange>
#endif
}
 802a184:	bf00      	nop
 802a186:	3708      	adds	r7, #8
 802a188:	46bd      	mov	sp, r7
 802a18a:	bd80      	pop	{r7, pc}

0802a18c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 802a18c:	b580      	push	{r7, lr}
 802a18e:	b082      	sub	sp, #8
 802a190:	af00      	add	r7, sp, #0
 802a192:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 802a194:	687b      	ldr	r3, [r7, #4]
 802a196:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 802a19a:	4618      	mov	r0, r3
 802a19c:	f7f8 f977 	bl	802248e <USBH_LL_PortEnabled>
}
 802a1a0:	bf00      	nop
 802a1a2:	3708      	adds	r7, #8
 802a1a4:	46bd      	mov	sp, r7
 802a1a6:	bd80      	pop	{r7, pc}

0802a1a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 802a1a8:	b580      	push	{r7, lr}
 802a1aa:	b082      	sub	sp, #8
 802a1ac:	af00      	add	r7, sp, #0
 802a1ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 802a1b0:	687b      	ldr	r3, [r7, #4]
 802a1b2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 802a1b6:	4618      	mov	r0, r3
 802a1b8:	f7f8 f983 	bl	80224c2 <USBH_LL_PortDisabled>
}
 802a1bc:	bf00      	nop
 802a1be:	3708      	adds	r7, #8
 802a1c0:	46bd      	mov	sp, r7
 802a1c2:	bd80      	pop	{r7, pc}

0802a1c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 802a1c4:	b580      	push	{r7, lr}
 802a1c6:	b082      	sub	sp, #8
 802a1c8:	af00      	add	r7, sp, #0
 802a1ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 802a1cc:	687b      	ldr	r3, [r7, #4]
 802a1ce:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 802a1d2:	2b01      	cmp	r3, #1
 802a1d4:	d12a      	bne.n	802a22c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 802a1d6:	4a18      	ldr	r2, [pc, #96]	@ (802a238 <USBH_LL_Init+0x74>)
 802a1d8:	687b      	ldr	r3, [r7, #4]
 802a1da:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 802a1de:	687b      	ldr	r3, [r7, #4]
 802a1e0:	4a15      	ldr	r2, [pc, #84]	@ (802a238 <USBH_LL_Init+0x74>)
 802a1e2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 802a1e6:	4b14      	ldr	r3, [pc, #80]	@ (802a238 <USBH_LL_Init+0x74>)
 802a1e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 802a1ec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 802a1ee:	4b12      	ldr	r3, [pc, #72]	@ (802a238 <USBH_LL_Init+0x74>)
 802a1f0:	2208      	movs	r2, #8
 802a1f2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 802a1f4:	4b10      	ldr	r3, [pc, #64]	@ (802a238 <USBH_LL_Init+0x74>)
 802a1f6:	2201      	movs	r2, #1
 802a1f8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 802a1fa:	4b0f      	ldr	r3, [pc, #60]	@ (802a238 <USBH_LL_Init+0x74>)
 802a1fc:	2200      	movs	r2, #0
 802a1fe:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 802a200:	4b0d      	ldr	r3, [pc, #52]	@ (802a238 <USBH_LL_Init+0x74>)
 802a202:	2202      	movs	r2, #2
 802a204:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 802a206:	4b0c      	ldr	r3, [pc, #48]	@ (802a238 <USBH_LL_Init+0x74>)
 802a208:	2200      	movs	r2, #0
 802a20a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 802a20c:	480a      	ldr	r0, [pc, #40]	@ (802a238 <USBH_LL_Init+0x74>)
 802a20e:	f7ef f93e 	bl	801948e <HAL_HCD_Init>
 802a212:	4603      	mov	r3, r0
 802a214:	2b00      	cmp	r3, #0
 802a216:	d001      	beq.n	802a21c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 802a218:	f7db fe2a 	bl	8005e70 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 802a21c:	4806      	ldr	r0, [pc, #24]	@ (802a238 <USBH_LL_Init+0x74>)
 802a21e:	f7ef fd9f 	bl	8019d60 <HAL_HCD_GetCurrentFrame>
 802a222:	4603      	mov	r3, r0
 802a224:	4619      	mov	r1, r3
 802a226:	6878      	ldr	r0, [r7, #4]
 802a228:	f7f8 f8f8 	bl	802241c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 802a22c:	2300      	movs	r3, #0
}
 802a22e:	4618      	mov	r0, r3
 802a230:	3708      	adds	r7, #8
 802a232:	46bd      	mov	sp, r7
 802a234:	bd80      	pop	{r7, pc}
 802a236:	bf00      	nop
 802a238:	2002e2cc 	.word	0x2002e2cc

0802a23c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 802a23c:	b580      	push	{r7, lr}
 802a23e:	b084      	sub	sp, #16
 802a240:	af00      	add	r7, sp, #0
 802a242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802a244:	2300      	movs	r3, #0
 802a246:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802a248:	2300      	movs	r3, #0
 802a24a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 802a24c:	687b      	ldr	r3, [r7, #4]
 802a24e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 802a252:	4618      	mov	r0, r3
 802a254:	f7ef fd0c 	bl	8019c70 <HAL_HCD_Start>
 802a258:	4603      	mov	r3, r0
 802a25a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802a25c:	7bfb      	ldrb	r3, [r7, #15]
 802a25e:	4618      	mov	r0, r3
 802a260:	f000 f992 	bl	802a588 <USBH_Get_USB_Status>
 802a264:	4603      	mov	r3, r0
 802a266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802a268:	7bbb      	ldrb	r3, [r7, #14]
}
 802a26a:	4618      	mov	r0, r3
 802a26c:	3710      	adds	r7, #16
 802a26e:	46bd      	mov	sp, r7
 802a270:	bd80      	pop	{r7, pc}

0802a272 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 802a272:	b580      	push	{r7, lr}
 802a274:	b084      	sub	sp, #16
 802a276:	af00      	add	r7, sp, #0
 802a278:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802a27a:	2300      	movs	r3, #0
 802a27c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802a27e:	2300      	movs	r3, #0
 802a280:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 802a282:	687b      	ldr	r3, [r7, #4]
 802a284:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 802a288:	4618      	mov	r0, r3
 802a28a:	f7ef fd14 	bl	8019cb6 <HAL_HCD_Stop>
 802a28e:	4603      	mov	r3, r0
 802a290:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802a292:	7bfb      	ldrb	r3, [r7, #15]
 802a294:	4618      	mov	r0, r3
 802a296:	f000 f977 	bl	802a588 <USBH_Get_USB_Status>
 802a29a:	4603      	mov	r3, r0
 802a29c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802a29e:	7bbb      	ldrb	r3, [r7, #14]
}
 802a2a0:	4618      	mov	r0, r3
 802a2a2:	3710      	adds	r7, #16
 802a2a4:	46bd      	mov	sp, r7
 802a2a6:	bd80      	pop	{r7, pc}

0802a2a8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 802a2a8:	b580      	push	{r7, lr}
 802a2aa:	b084      	sub	sp, #16
 802a2ac:	af00      	add	r7, sp, #0
 802a2ae:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 802a2b0:	2301      	movs	r3, #1
 802a2b2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 802a2b4:	687b      	ldr	r3, [r7, #4]
 802a2b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 802a2ba:	4618      	mov	r0, r3
 802a2bc:	f7ef fd5e 	bl	8019d7c <HAL_HCD_GetCurrentSpeed>
 802a2c0:	4603      	mov	r3, r0
 802a2c2:	2b02      	cmp	r3, #2
 802a2c4:	d00c      	beq.n	802a2e0 <USBH_LL_GetSpeed+0x38>
 802a2c6:	2b02      	cmp	r3, #2
 802a2c8:	d80d      	bhi.n	802a2e6 <USBH_LL_GetSpeed+0x3e>
 802a2ca:	2b00      	cmp	r3, #0
 802a2cc:	d002      	beq.n	802a2d4 <USBH_LL_GetSpeed+0x2c>
 802a2ce:	2b01      	cmp	r3, #1
 802a2d0:	d003      	beq.n	802a2da <USBH_LL_GetSpeed+0x32>
 802a2d2:	e008      	b.n	802a2e6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 802a2d4:	2300      	movs	r3, #0
 802a2d6:	73fb      	strb	r3, [r7, #15]
    break;
 802a2d8:	e008      	b.n	802a2ec <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 802a2da:	2301      	movs	r3, #1
 802a2dc:	73fb      	strb	r3, [r7, #15]
    break;
 802a2de:	e005      	b.n	802a2ec <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 802a2e0:	2302      	movs	r3, #2
 802a2e2:	73fb      	strb	r3, [r7, #15]
    break;
 802a2e4:	e002      	b.n	802a2ec <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 802a2e6:	2301      	movs	r3, #1
 802a2e8:	73fb      	strb	r3, [r7, #15]
    break;
 802a2ea:	bf00      	nop
  }
  return  speed;
 802a2ec:	7bfb      	ldrb	r3, [r7, #15]
}
 802a2ee:	4618      	mov	r0, r3
 802a2f0:	3710      	adds	r7, #16
 802a2f2:	46bd      	mov	sp, r7
 802a2f4:	bd80      	pop	{r7, pc}

0802a2f6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 802a2f6:	b580      	push	{r7, lr}
 802a2f8:	b084      	sub	sp, #16
 802a2fa:	af00      	add	r7, sp, #0
 802a2fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802a2fe:	2300      	movs	r3, #0
 802a300:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802a302:	2300      	movs	r3, #0
 802a304:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 802a306:	687b      	ldr	r3, [r7, #4]
 802a308:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 802a30c:	4618      	mov	r0, r3
 802a30e:	f7ef fcef 	bl	8019cf0 <HAL_HCD_ResetPort>
 802a312:	4603      	mov	r3, r0
 802a314:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802a316:	7bfb      	ldrb	r3, [r7, #15]
 802a318:	4618      	mov	r0, r3
 802a31a:	f000 f935 	bl	802a588 <USBH_Get_USB_Status>
 802a31e:	4603      	mov	r3, r0
 802a320:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802a322:	7bbb      	ldrb	r3, [r7, #14]
}
 802a324:	4618      	mov	r0, r3
 802a326:	3710      	adds	r7, #16
 802a328:	46bd      	mov	sp, r7
 802a32a:	bd80      	pop	{r7, pc}

0802a32c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802a32c:	b580      	push	{r7, lr}
 802a32e:	b082      	sub	sp, #8
 802a330:	af00      	add	r7, sp, #0
 802a332:	6078      	str	r0, [r7, #4]
 802a334:	460b      	mov	r3, r1
 802a336:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 802a338:	687b      	ldr	r3, [r7, #4]
 802a33a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 802a33e:	78fa      	ldrb	r2, [r7, #3]
 802a340:	4611      	mov	r1, r2
 802a342:	4618      	mov	r0, r3
 802a344:	f7ef fcf7 	bl	8019d36 <HAL_HCD_HC_GetXferCount>
 802a348:	4603      	mov	r3, r0
}
 802a34a:	4618      	mov	r0, r3
 802a34c:	3708      	adds	r7, #8
 802a34e:	46bd      	mov	sp, r7
 802a350:	bd80      	pop	{r7, pc}

0802a352 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802a352:	b590      	push	{r4, r7, lr}
 802a354:	b089      	sub	sp, #36	@ 0x24
 802a356:	af04      	add	r7, sp, #16
 802a358:	6078      	str	r0, [r7, #4]
 802a35a:	4608      	mov	r0, r1
 802a35c:	4611      	mov	r1, r2
 802a35e:	461a      	mov	r2, r3
 802a360:	4603      	mov	r3, r0
 802a362:	70fb      	strb	r3, [r7, #3]
 802a364:	460b      	mov	r3, r1
 802a366:	70bb      	strb	r3, [r7, #2]
 802a368:	4613      	mov	r3, r2
 802a36a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802a36c:	2300      	movs	r3, #0
 802a36e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802a370:	2300      	movs	r3, #0
 802a372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 802a374:	687b      	ldr	r3, [r7, #4]
 802a376:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 802a37a:	787c      	ldrb	r4, [r7, #1]
 802a37c:	78ba      	ldrb	r2, [r7, #2]
 802a37e:	78f9      	ldrb	r1, [r7, #3]
 802a380:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 802a382:	9302      	str	r3, [sp, #8]
 802a384:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 802a388:	9301      	str	r3, [sp, #4]
 802a38a:	f897 3020 	ldrb.w	r3, [r7, #32]
 802a38e:	9300      	str	r3, [sp, #0]
 802a390:	4623      	mov	r3, r4
 802a392:	f7ef f8e3 	bl	801955c <HAL_HCD_HC_Init>
 802a396:	4603      	mov	r3, r0
 802a398:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 802a39a:	7bfb      	ldrb	r3, [r7, #15]
 802a39c:	4618      	mov	r0, r3
 802a39e:	f000 f8f3 	bl	802a588 <USBH_Get_USB_Status>
 802a3a2:	4603      	mov	r3, r0
 802a3a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802a3a6:	7bbb      	ldrb	r3, [r7, #14]
}
 802a3a8:	4618      	mov	r0, r3
 802a3aa:	3714      	adds	r7, #20
 802a3ac:	46bd      	mov	sp, r7
 802a3ae:	bd90      	pop	{r4, r7, pc}

0802a3b0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802a3b0:	b580      	push	{r7, lr}
 802a3b2:	b084      	sub	sp, #16
 802a3b4:	af00      	add	r7, sp, #0
 802a3b6:	6078      	str	r0, [r7, #4]
 802a3b8:	460b      	mov	r3, r1
 802a3ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802a3bc:	2300      	movs	r3, #0
 802a3be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802a3c0:	2300      	movs	r3, #0
 802a3c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 802a3c4:	687b      	ldr	r3, [r7, #4]
 802a3c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 802a3ca:	78fa      	ldrb	r2, [r7, #3]
 802a3cc:	4611      	mov	r1, r2
 802a3ce:	4618      	mov	r0, r3
 802a3d0:	f7ef f97c 	bl	80196cc <HAL_HCD_HC_Halt>
 802a3d4:	4603      	mov	r3, r0
 802a3d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802a3d8:	7bfb      	ldrb	r3, [r7, #15]
 802a3da:	4618      	mov	r0, r3
 802a3dc:	f000 f8d4 	bl	802a588 <USBH_Get_USB_Status>
 802a3e0:	4603      	mov	r3, r0
 802a3e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802a3e4:	7bbb      	ldrb	r3, [r7, #14]
}
 802a3e6:	4618      	mov	r0, r3
 802a3e8:	3710      	adds	r7, #16
 802a3ea:	46bd      	mov	sp, r7
 802a3ec:	bd80      	pop	{r7, pc}

0802a3ee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 802a3ee:	b590      	push	{r4, r7, lr}
 802a3f0:	b089      	sub	sp, #36	@ 0x24
 802a3f2:	af04      	add	r7, sp, #16
 802a3f4:	6078      	str	r0, [r7, #4]
 802a3f6:	4608      	mov	r0, r1
 802a3f8:	4611      	mov	r1, r2
 802a3fa:	461a      	mov	r2, r3
 802a3fc:	4603      	mov	r3, r0
 802a3fe:	70fb      	strb	r3, [r7, #3]
 802a400:	460b      	mov	r3, r1
 802a402:	70bb      	strb	r3, [r7, #2]
 802a404:	4613      	mov	r3, r2
 802a406:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802a408:	2300      	movs	r3, #0
 802a40a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802a40c:	2300      	movs	r3, #0
 802a40e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 802a410:	687b      	ldr	r3, [r7, #4]
 802a412:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 802a416:	787c      	ldrb	r4, [r7, #1]
 802a418:	78ba      	ldrb	r2, [r7, #2]
 802a41a:	78f9      	ldrb	r1, [r7, #3]
 802a41c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 802a420:	9303      	str	r3, [sp, #12]
 802a422:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 802a424:	9302      	str	r3, [sp, #8]
 802a426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a428:	9301      	str	r3, [sp, #4]
 802a42a:	f897 3020 	ldrb.w	r3, [r7, #32]
 802a42e:	9300      	str	r3, [sp, #0]
 802a430:	4623      	mov	r3, r4
 802a432:	f7ef f96f 	bl	8019714 <HAL_HCD_HC_SubmitRequest>
 802a436:	4603      	mov	r3, r0
 802a438:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 802a43a:	7bfb      	ldrb	r3, [r7, #15]
 802a43c:	4618      	mov	r0, r3
 802a43e:	f000 f8a3 	bl	802a588 <USBH_Get_USB_Status>
 802a442:	4603      	mov	r3, r0
 802a444:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802a446:	7bbb      	ldrb	r3, [r7, #14]
}
 802a448:	4618      	mov	r0, r3
 802a44a:	3714      	adds	r7, #20
 802a44c:	46bd      	mov	sp, r7
 802a44e:	bd90      	pop	{r4, r7, pc}

0802a450 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802a450:	b580      	push	{r7, lr}
 802a452:	b082      	sub	sp, #8
 802a454:	af00      	add	r7, sp, #0
 802a456:	6078      	str	r0, [r7, #4]
 802a458:	460b      	mov	r3, r1
 802a45a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 802a45c:	687b      	ldr	r3, [r7, #4]
 802a45e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 802a462:	78fa      	ldrb	r2, [r7, #3]
 802a464:	4611      	mov	r1, r2
 802a466:	4618      	mov	r0, r3
 802a468:	f7ef fc50 	bl	8019d0c <HAL_HCD_HC_GetURBState>
 802a46c:	4603      	mov	r3, r0
}
 802a46e:	4618      	mov	r0, r3
 802a470:	3708      	adds	r7, #8
 802a472:	46bd      	mov	sp, r7
 802a474:	bd80      	pop	{r7, pc}

0802a476 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 802a476:	b580      	push	{r7, lr}
 802a478:	b082      	sub	sp, #8
 802a47a:	af00      	add	r7, sp, #0
 802a47c:	6078      	str	r0, [r7, #4]
 802a47e:	460b      	mov	r3, r1
 802a480:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 802a482:	687b      	ldr	r3, [r7, #4]
 802a484:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 802a488:	2b01      	cmp	r3, #1
 802a48a:	d103      	bne.n	802a494 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 802a48c:	78fb      	ldrb	r3, [r7, #3]
 802a48e:	4618      	mov	r0, r3
 802a490:	f000 f8a6 	bl	802a5e0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 802a494:	20c8      	movs	r0, #200	@ 0xc8
 802a496:	f7ee f8a3 	bl	80185e0 <HAL_Delay>
  return USBH_OK;
 802a49a:	2300      	movs	r3, #0
}
 802a49c:	4618      	mov	r0, r3
 802a49e:	3708      	adds	r7, #8
 802a4a0:	46bd      	mov	sp, r7
 802a4a2:	bd80      	pop	{r7, pc}

0802a4a4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 802a4a4:	b480      	push	{r7}
 802a4a6:	b085      	sub	sp, #20
 802a4a8:	af00      	add	r7, sp, #0
 802a4aa:	6078      	str	r0, [r7, #4]
 802a4ac:	460b      	mov	r3, r1
 802a4ae:	70fb      	strb	r3, [r7, #3]
 802a4b0:	4613      	mov	r3, r2
 802a4b2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 802a4b4:	687b      	ldr	r3, [r7, #4]
 802a4b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 802a4ba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 802a4bc:	78fa      	ldrb	r2, [r7, #3]
 802a4be:	68f9      	ldr	r1, [r7, #12]
 802a4c0:	4613      	mov	r3, r2
 802a4c2:	011b      	lsls	r3, r3, #4
 802a4c4:	1a9b      	subs	r3, r3, r2
 802a4c6:	009b      	lsls	r3, r3, #2
 802a4c8:	440b      	add	r3, r1
 802a4ca:	3317      	adds	r3, #23
 802a4cc:	781b      	ldrb	r3, [r3, #0]
 802a4ce:	2b00      	cmp	r3, #0
 802a4d0:	d00a      	beq.n	802a4e8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 802a4d2:	78fa      	ldrb	r2, [r7, #3]
 802a4d4:	68f9      	ldr	r1, [r7, #12]
 802a4d6:	4613      	mov	r3, r2
 802a4d8:	011b      	lsls	r3, r3, #4
 802a4da:	1a9b      	subs	r3, r3, r2
 802a4dc:	009b      	lsls	r3, r3, #2
 802a4de:	440b      	add	r3, r1
 802a4e0:	333c      	adds	r3, #60	@ 0x3c
 802a4e2:	78ba      	ldrb	r2, [r7, #2]
 802a4e4:	701a      	strb	r2, [r3, #0]
 802a4e6:	e009      	b.n	802a4fc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 802a4e8:	78fa      	ldrb	r2, [r7, #3]
 802a4ea:	68f9      	ldr	r1, [r7, #12]
 802a4ec:	4613      	mov	r3, r2
 802a4ee:	011b      	lsls	r3, r3, #4
 802a4f0:	1a9b      	subs	r3, r3, r2
 802a4f2:	009b      	lsls	r3, r3, #2
 802a4f4:	440b      	add	r3, r1
 802a4f6:	333d      	adds	r3, #61	@ 0x3d
 802a4f8:	78ba      	ldrb	r2, [r7, #2]
 802a4fa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 802a4fc:	2300      	movs	r3, #0
}
 802a4fe:	4618      	mov	r0, r3
 802a500:	3714      	adds	r7, #20
 802a502:	46bd      	mov	sp, r7
 802a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a508:	4770      	bx	lr

0802a50a <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802a50a:	b480      	push	{r7}
 802a50c:	b085      	sub	sp, #20
 802a50e:	af00      	add	r7, sp, #0
 802a510:	6078      	str	r0, [r7, #4]
 802a512:	460b      	mov	r3, r1
 802a514:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 802a516:	2300      	movs	r3, #0
 802a518:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 802a51a:	687b      	ldr	r3, [r7, #4]
 802a51c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 802a520:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 802a522:	78fa      	ldrb	r2, [r7, #3]
 802a524:	68b9      	ldr	r1, [r7, #8]
 802a526:	4613      	mov	r3, r2
 802a528:	011b      	lsls	r3, r3, #4
 802a52a:	1a9b      	subs	r3, r3, r2
 802a52c:	009b      	lsls	r3, r3, #2
 802a52e:	440b      	add	r3, r1
 802a530:	3317      	adds	r3, #23
 802a532:	781b      	ldrb	r3, [r3, #0]
 802a534:	2b00      	cmp	r3, #0
 802a536:	d00a      	beq.n	802a54e <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 802a538:	78fa      	ldrb	r2, [r7, #3]
 802a53a:	68b9      	ldr	r1, [r7, #8]
 802a53c:	4613      	mov	r3, r2
 802a53e:	011b      	lsls	r3, r3, #4
 802a540:	1a9b      	subs	r3, r3, r2
 802a542:	009b      	lsls	r3, r3, #2
 802a544:	440b      	add	r3, r1
 802a546:	333c      	adds	r3, #60	@ 0x3c
 802a548:	781b      	ldrb	r3, [r3, #0]
 802a54a:	73fb      	strb	r3, [r7, #15]
 802a54c:	e009      	b.n	802a562 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 802a54e:	78fa      	ldrb	r2, [r7, #3]
 802a550:	68b9      	ldr	r1, [r7, #8]
 802a552:	4613      	mov	r3, r2
 802a554:	011b      	lsls	r3, r3, #4
 802a556:	1a9b      	subs	r3, r3, r2
 802a558:	009b      	lsls	r3, r3, #2
 802a55a:	440b      	add	r3, r1
 802a55c:	333d      	adds	r3, #61	@ 0x3d
 802a55e:	781b      	ldrb	r3, [r3, #0]
 802a560:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 802a562:	7bfb      	ldrb	r3, [r7, #15]
}
 802a564:	4618      	mov	r0, r3
 802a566:	3714      	adds	r7, #20
 802a568:	46bd      	mov	sp, r7
 802a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a56e:	4770      	bx	lr

0802a570 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 802a570:	b580      	push	{r7, lr}
 802a572:	b082      	sub	sp, #8
 802a574:	af00      	add	r7, sp, #0
 802a576:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 802a578:	6878      	ldr	r0, [r7, #4]
 802a57a:	f7ee f831 	bl	80185e0 <HAL_Delay>
}
 802a57e:	bf00      	nop
 802a580:	3708      	adds	r7, #8
 802a582:	46bd      	mov	sp, r7
 802a584:	bd80      	pop	{r7, pc}
	...

0802a588 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 802a588:	b480      	push	{r7}
 802a58a:	b085      	sub	sp, #20
 802a58c:	af00      	add	r7, sp, #0
 802a58e:	4603      	mov	r3, r0
 802a590:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802a592:	2300      	movs	r3, #0
 802a594:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802a596:	79fb      	ldrb	r3, [r7, #7]
 802a598:	2b03      	cmp	r3, #3
 802a59a:	d817      	bhi.n	802a5cc <USBH_Get_USB_Status+0x44>
 802a59c:	a201      	add	r2, pc, #4	@ (adr r2, 802a5a4 <USBH_Get_USB_Status+0x1c>)
 802a59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a5a2:	bf00      	nop
 802a5a4:	0802a5b5 	.word	0x0802a5b5
 802a5a8:	0802a5bb 	.word	0x0802a5bb
 802a5ac:	0802a5c1 	.word	0x0802a5c1
 802a5b0:	0802a5c7 	.word	0x0802a5c7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 802a5b4:	2300      	movs	r3, #0
 802a5b6:	73fb      	strb	r3, [r7, #15]
    break;
 802a5b8:	e00b      	b.n	802a5d2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 802a5ba:	2302      	movs	r3, #2
 802a5bc:	73fb      	strb	r3, [r7, #15]
    break;
 802a5be:	e008      	b.n	802a5d2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 802a5c0:	2301      	movs	r3, #1
 802a5c2:	73fb      	strb	r3, [r7, #15]
    break;
 802a5c4:	e005      	b.n	802a5d2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 802a5c6:	2302      	movs	r3, #2
 802a5c8:	73fb      	strb	r3, [r7, #15]
    break;
 802a5ca:	e002      	b.n	802a5d2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 802a5cc:	2302      	movs	r3, #2
 802a5ce:	73fb      	strb	r3, [r7, #15]
    break;
 802a5d0:	bf00      	nop
  }
  return usb_status;
 802a5d2:	7bfb      	ldrb	r3, [r7, #15]
}
 802a5d4:	4618      	mov	r0, r3
 802a5d6:	3714      	adds	r7, #20
 802a5d8:	46bd      	mov	sp, r7
 802a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a5de:	4770      	bx	lr

0802a5e0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 802a5e0:	b580      	push	{r7, lr}
 802a5e2:	b084      	sub	sp, #16
 802a5e4:	af00      	add	r7, sp, #0
 802a5e6:	4603      	mov	r3, r0
 802a5e8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 802a5ea:	79fb      	ldrb	r3, [r7, #7]
 802a5ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 802a5ee:	79fb      	ldrb	r3, [r7, #7]
 802a5f0:	2b00      	cmp	r3, #0
 802a5f2:	d102      	bne.n	802a5fa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 802a5f4:	2300      	movs	r3, #0
 802a5f6:	73fb      	strb	r3, [r7, #15]
 802a5f8:	e001      	b.n	802a5fe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 802a5fa:	2301      	movs	r3, #1
 802a5fc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 802a5fe:	7bfb      	ldrb	r3, [r7, #15]
 802a600:	461a      	mov	r2, r3
 802a602:	2140      	movs	r1, #64	@ 0x40
 802a604:	4803      	ldr	r0, [pc, #12]	@ (802a614 <MX_DriverVbusFS+0x34>)
 802a606:	f7ee ff0f 	bl	8019428 <HAL_GPIO_WritePin>
}
 802a60a:	bf00      	nop
 802a60c:	3710      	adds	r7, #16
 802a60e:	46bd      	mov	sp, r7
 802a610:	bd80      	pop	{r7, pc}
 802a612:	bf00      	nop
 802a614:	40021800 	.word	0x40021800

0802a618 <__assert_func>:
 802a618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a61a:	4614      	mov	r4, r2
 802a61c:	461a      	mov	r2, r3
 802a61e:	4b09      	ldr	r3, [pc, #36]	@ (802a644 <__assert_func+0x2c>)
 802a620:	681b      	ldr	r3, [r3, #0]
 802a622:	4605      	mov	r5, r0
 802a624:	68d8      	ldr	r0, [r3, #12]
 802a626:	b954      	cbnz	r4, 802a63e <__assert_func+0x26>
 802a628:	4b07      	ldr	r3, [pc, #28]	@ (802a648 <__assert_func+0x30>)
 802a62a:	461c      	mov	r4, r3
 802a62c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802a630:	9100      	str	r1, [sp, #0]
 802a632:	462b      	mov	r3, r5
 802a634:	4905      	ldr	r1, [pc, #20]	@ (802a64c <__assert_func+0x34>)
 802a636:	f001 f873 	bl	802b720 <fiprintf>
 802a63a:	f001 ffb5 	bl	802c5a8 <abort>
 802a63e:	4b04      	ldr	r3, [pc, #16]	@ (802a650 <__assert_func+0x38>)
 802a640:	e7f4      	b.n	802a62c <__assert_func+0x14>
 802a642:	bf00      	nop
 802a644:	20000460 	.word	0x20000460
 802a648:	0803a387 	.word	0x0803a387
 802a64c:	0803a359 	.word	0x0803a359
 802a650:	0803a34c 	.word	0x0803a34c

0802a654 <atoi>:
 802a654:	220a      	movs	r2, #10
 802a656:	2100      	movs	r1, #0
 802a658:	f000 bfb4 	b.w	802b5c4 <strtol>

0802a65c <calloc>:
 802a65c:	4b02      	ldr	r3, [pc, #8]	@ (802a668 <calloc+0xc>)
 802a65e:	460a      	mov	r2, r1
 802a660:	4601      	mov	r1, r0
 802a662:	6818      	ldr	r0, [r3, #0]
 802a664:	f000 b802 	b.w	802a66c <_calloc_r>
 802a668:	20000460 	.word	0x20000460

0802a66c <_calloc_r>:
 802a66c:	b570      	push	{r4, r5, r6, lr}
 802a66e:	fba1 5402 	umull	r5, r4, r1, r2
 802a672:	b93c      	cbnz	r4, 802a684 <_calloc_r+0x18>
 802a674:	4629      	mov	r1, r5
 802a676:	f000 f83f 	bl	802a6f8 <_malloc_r>
 802a67a:	4606      	mov	r6, r0
 802a67c:	b928      	cbnz	r0, 802a68a <_calloc_r+0x1e>
 802a67e:	2600      	movs	r6, #0
 802a680:	4630      	mov	r0, r6
 802a682:	bd70      	pop	{r4, r5, r6, pc}
 802a684:	220c      	movs	r2, #12
 802a686:	6002      	str	r2, [r0, #0]
 802a688:	e7f9      	b.n	802a67e <_calloc_r+0x12>
 802a68a:	462a      	mov	r2, r5
 802a68c:	4621      	mov	r1, r4
 802a68e:	f001 fa3d 	bl	802bb0c <memset>
 802a692:	e7f5      	b.n	802a680 <_calloc_r+0x14>

0802a694 <malloc>:
 802a694:	4b02      	ldr	r3, [pc, #8]	@ (802a6a0 <malloc+0xc>)
 802a696:	4601      	mov	r1, r0
 802a698:	6818      	ldr	r0, [r3, #0]
 802a69a:	f000 b82d 	b.w	802a6f8 <_malloc_r>
 802a69e:	bf00      	nop
 802a6a0:	20000460 	.word	0x20000460

0802a6a4 <free>:
 802a6a4:	4b02      	ldr	r3, [pc, #8]	@ (802a6b0 <free+0xc>)
 802a6a6:	4601      	mov	r1, r0
 802a6a8:	6818      	ldr	r0, [r3, #0]
 802a6aa:	f001 bf85 	b.w	802c5b8 <_free_r>
 802a6ae:	bf00      	nop
 802a6b0:	20000460 	.word	0x20000460

0802a6b4 <sbrk_aligned>:
 802a6b4:	b570      	push	{r4, r5, r6, lr}
 802a6b6:	4e0f      	ldr	r6, [pc, #60]	@ (802a6f4 <sbrk_aligned+0x40>)
 802a6b8:	460c      	mov	r4, r1
 802a6ba:	6831      	ldr	r1, [r6, #0]
 802a6bc:	4605      	mov	r5, r0
 802a6be:	b911      	cbnz	r1, 802a6c6 <sbrk_aligned+0x12>
 802a6c0:	f001 ff00 	bl	802c4c4 <_sbrk_r>
 802a6c4:	6030      	str	r0, [r6, #0]
 802a6c6:	4621      	mov	r1, r4
 802a6c8:	4628      	mov	r0, r5
 802a6ca:	f001 fefb 	bl	802c4c4 <_sbrk_r>
 802a6ce:	1c43      	adds	r3, r0, #1
 802a6d0:	d103      	bne.n	802a6da <sbrk_aligned+0x26>
 802a6d2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 802a6d6:	4620      	mov	r0, r4
 802a6d8:	bd70      	pop	{r4, r5, r6, pc}
 802a6da:	1cc4      	adds	r4, r0, #3
 802a6dc:	f024 0403 	bic.w	r4, r4, #3
 802a6e0:	42a0      	cmp	r0, r4
 802a6e2:	d0f8      	beq.n	802a6d6 <sbrk_aligned+0x22>
 802a6e4:	1a21      	subs	r1, r4, r0
 802a6e6:	4628      	mov	r0, r5
 802a6e8:	f001 feec 	bl	802c4c4 <_sbrk_r>
 802a6ec:	3001      	adds	r0, #1
 802a6ee:	d1f2      	bne.n	802a6d6 <sbrk_aligned+0x22>
 802a6f0:	e7ef      	b.n	802a6d2 <sbrk_aligned+0x1e>
 802a6f2:	bf00      	nop
 802a6f4:	2002e6ac 	.word	0x2002e6ac

0802a6f8 <_malloc_r>:
 802a6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a6fc:	1ccd      	adds	r5, r1, #3
 802a6fe:	f025 0503 	bic.w	r5, r5, #3
 802a702:	3508      	adds	r5, #8
 802a704:	2d0c      	cmp	r5, #12
 802a706:	bf38      	it	cc
 802a708:	250c      	movcc	r5, #12
 802a70a:	2d00      	cmp	r5, #0
 802a70c:	4606      	mov	r6, r0
 802a70e:	db01      	blt.n	802a714 <_malloc_r+0x1c>
 802a710:	42a9      	cmp	r1, r5
 802a712:	d904      	bls.n	802a71e <_malloc_r+0x26>
 802a714:	230c      	movs	r3, #12
 802a716:	6033      	str	r3, [r6, #0]
 802a718:	2000      	movs	r0, #0
 802a71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a71e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802a7f4 <_malloc_r+0xfc>
 802a722:	f000 f869 	bl	802a7f8 <__malloc_lock>
 802a726:	f8d8 3000 	ldr.w	r3, [r8]
 802a72a:	461c      	mov	r4, r3
 802a72c:	bb44      	cbnz	r4, 802a780 <_malloc_r+0x88>
 802a72e:	4629      	mov	r1, r5
 802a730:	4630      	mov	r0, r6
 802a732:	f7ff ffbf 	bl	802a6b4 <sbrk_aligned>
 802a736:	1c43      	adds	r3, r0, #1
 802a738:	4604      	mov	r4, r0
 802a73a:	d158      	bne.n	802a7ee <_malloc_r+0xf6>
 802a73c:	f8d8 4000 	ldr.w	r4, [r8]
 802a740:	4627      	mov	r7, r4
 802a742:	2f00      	cmp	r7, #0
 802a744:	d143      	bne.n	802a7ce <_malloc_r+0xd6>
 802a746:	2c00      	cmp	r4, #0
 802a748:	d04b      	beq.n	802a7e2 <_malloc_r+0xea>
 802a74a:	6823      	ldr	r3, [r4, #0]
 802a74c:	4639      	mov	r1, r7
 802a74e:	4630      	mov	r0, r6
 802a750:	eb04 0903 	add.w	r9, r4, r3
 802a754:	f001 feb6 	bl	802c4c4 <_sbrk_r>
 802a758:	4581      	cmp	r9, r0
 802a75a:	d142      	bne.n	802a7e2 <_malloc_r+0xea>
 802a75c:	6821      	ldr	r1, [r4, #0]
 802a75e:	1a6d      	subs	r5, r5, r1
 802a760:	4629      	mov	r1, r5
 802a762:	4630      	mov	r0, r6
 802a764:	f7ff ffa6 	bl	802a6b4 <sbrk_aligned>
 802a768:	3001      	adds	r0, #1
 802a76a:	d03a      	beq.n	802a7e2 <_malloc_r+0xea>
 802a76c:	6823      	ldr	r3, [r4, #0]
 802a76e:	442b      	add	r3, r5
 802a770:	6023      	str	r3, [r4, #0]
 802a772:	f8d8 3000 	ldr.w	r3, [r8]
 802a776:	685a      	ldr	r2, [r3, #4]
 802a778:	bb62      	cbnz	r2, 802a7d4 <_malloc_r+0xdc>
 802a77a:	f8c8 7000 	str.w	r7, [r8]
 802a77e:	e00f      	b.n	802a7a0 <_malloc_r+0xa8>
 802a780:	6822      	ldr	r2, [r4, #0]
 802a782:	1b52      	subs	r2, r2, r5
 802a784:	d420      	bmi.n	802a7c8 <_malloc_r+0xd0>
 802a786:	2a0b      	cmp	r2, #11
 802a788:	d917      	bls.n	802a7ba <_malloc_r+0xc2>
 802a78a:	1961      	adds	r1, r4, r5
 802a78c:	42a3      	cmp	r3, r4
 802a78e:	6025      	str	r5, [r4, #0]
 802a790:	bf18      	it	ne
 802a792:	6059      	strne	r1, [r3, #4]
 802a794:	6863      	ldr	r3, [r4, #4]
 802a796:	bf08      	it	eq
 802a798:	f8c8 1000 	streq.w	r1, [r8]
 802a79c:	5162      	str	r2, [r4, r5]
 802a79e:	604b      	str	r3, [r1, #4]
 802a7a0:	4630      	mov	r0, r6
 802a7a2:	f000 f82f 	bl	802a804 <__malloc_unlock>
 802a7a6:	f104 000b 	add.w	r0, r4, #11
 802a7aa:	1d23      	adds	r3, r4, #4
 802a7ac:	f020 0007 	bic.w	r0, r0, #7
 802a7b0:	1ac2      	subs	r2, r0, r3
 802a7b2:	bf1c      	itt	ne
 802a7b4:	1a1b      	subne	r3, r3, r0
 802a7b6:	50a3      	strne	r3, [r4, r2]
 802a7b8:	e7af      	b.n	802a71a <_malloc_r+0x22>
 802a7ba:	6862      	ldr	r2, [r4, #4]
 802a7bc:	42a3      	cmp	r3, r4
 802a7be:	bf0c      	ite	eq
 802a7c0:	f8c8 2000 	streq.w	r2, [r8]
 802a7c4:	605a      	strne	r2, [r3, #4]
 802a7c6:	e7eb      	b.n	802a7a0 <_malloc_r+0xa8>
 802a7c8:	4623      	mov	r3, r4
 802a7ca:	6864      	ldr	r4, [r4, #4]
 802a7cc:	e7ae      	b.n	802a72c <_malloc_r+0x34>
 802a7ce:	463c      	mov	r4, r7
 802a7d0:	687f      	ldr	r7, [r7, #4]
 802a7d2:	e7b6      	b.n	802a742 <_malloc_r+0x4a>
 802a7d4:	461a      	mov	r2, r3
 802a7d6:	685b      	ldr	r3, [r3, #4]
 802a7d8:	42a3      	cmp	r3, r4
 802a7da:	d1fb      	bne.n	802a7d4 <_malloc_r+0xdc>
 802a7dc:	2300      	movs	r3, #0
 802a7de:	6053      	str	r3, [r2, #4]
 802a7e0:	e7de      	b.n	802a7a0 <_malloc_r+0xa8>
 802a7e2:	230c      	movs	r3, #12
 802a7e4:	6033      	str	r3, [r6, #0]
 802a7e6:	4630      	mov	r0, r6
 802a7e8:	f000 f80c 	bl	802a804 <__malloc_unlock>
 802a7ec:	e794      	b.n	802a718 <_malloc_r+0x20>
 802a7ee:	6005      	str	r5, [r0, #0]
 802a7f0:	e7d6      	b.n	802a7a0 <_malloc_r+0xa8>
 802a7f2:	bf00      	nop
 802a7f4:	2002e6b0 	.word	0x2002e6b0

0802a7f8 <__malloc_lock>:
 802a7f8:	4801      	ldr	r0, [pc, #4]	@ (802a800 <__malloc_lock+0x8>)
 802a7fa:	f001 beb1 	b.w	802c560 <__retarget_lock_acquire_recursive>
 802a7fe:	bf00      	nop
 802a800:	2002e81a 	.word	0x2002e81a

0802a804 <__malloc_unlock>:
 802a804:	4801      	ldr	r0, [pc, #4]	@ (802a80c <__malloc_unlock+0x8>)
 802a806:	f001 bead 	b.w	802c564 <__retarget_lock_release_recursive>
 802a80a:	bf00      	nop
 802a80c:	2002e81a 	.word	0x2002e81a

0802a810 <srand>:
 802a810:	b538      	push	{r3, r4, r5, lr}
 802a812:	4b10      	ldr	r3, [pc, #64]	@ (802a854 <srand+0x44>)
 802a814:	681d      	ldr	r5, [r3, #0]
 802a816:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 802a818:	4604      	mov	r4, r0
 802a81a:	b9b3      	cbnz	r3, 802a84a <srand+0x3a>
 802a81c:	2018      	movs	r0, #24
 802a81e:	f7ff ff39 	bl	802a694 <malloc>
 802a822:	4602      	mov	r2, r0
 802a824:	6328      	str	r0, [r5, #48]	@ 0x30
 802a826:	b920      	cbnz	r0, 802a832 <srand+0x22>
 802a828:	4b0b      	ldr	r3, [pc, #44]	@ (802a858 <srand+0x48>)
 802a82a:	480c      	ldr	r0, [pc, #48]	@ (802a85c <srand+0x4c>)
 802a82c:	2146      	movs	r1, #70	@ 0x46
 802a82e:	f7ff fef3 	bl	802a618 <__assert_func>
 802a832:	490b      	ldr	r1, [pc, #44]	@ (802a860 <srand+0x50>)
 802a834:	4b0b      	ldr	r3, [pc, #44]	@ (802a864 <srand+0x54>)
 802a836:	e9c0 1300 	strd	r1, r3, [r0]
 802a83a:	4b0b      	ldr	r3, [pc, #44]	@ (802a868 <srand+0x58>)
 802a83c:	6083      	str	r3, [r0, #8]
 802a83e:	230b      	movs	r3, #11
 802a840:	8183      	strh	r3, [r0, #12]
 802a842:	2100      	movs	r1, #0
 802a844:	2001      	movs	r0, #1
 802a846:	e9c2 0104 	strd	r0, r1, [r2, #16]
 802a84a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 802a84c:	2200      	movs	r2, #0
 802a84e:	611c      	str	r4, [r3, #16]
 802a850:	615a      	str	r2, [r3, #20]
 802a852:	bd38      	pop	{r3, r4, r5, pc}
 802a854:	20000460 	.word	0x20000460
 802a858:	0803a388 	.word	0x0803a388
 802a85c:	0803a39f 	.word	0x0803a39f
 802a860:	abcd330e 	.word	0xabcd330e
 802a864:	e66d1234 	.word	0xe66d1234
 802a868:	0005deec 	.word	0x0005deec

0802a86c <rand>:
 802a86c:	4b16      	ldr	r3, [pc, #88]	@ (802a8c8 <rand+0x5c>)
 802a86e:	b510      	push	{r4, lr}
 802a870:	681c      	ldr	r4, [r3, #0]
 802a872:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802a874:	b9b3      	cbnz	r3, 802a8a4 <rand+0x38>
 802a876:	2018      	movs	r0, #24
 802a878:	f7ff ff0c 	bl	802a694 <malloc>
 802a87c:	4602      	mov	r2, r0
 802a87e:	6320      	str	r0, [r4, #48]	@ 0x30
 802a880:	b920      	cbnz	r0, 802a88c <rand+0x20>
 802a882:	4b12      	ldr	r3, [pc, #72]	@ (802a8cc <rand+0x60>)
 802a884:	4812      	ldr	r0, [pc, #72]	@ (802a8d0 <rand+0x64>)
 802a886:	2152      	movs	r1, #82	@ 0x52
 802a888:	f7ff fec6 	bl	802a618 <__assert_func>
 802a88c:	4911      	ldr	r1, [pc, #68]	@ (802a8d4 <rand+0x68>)
 802a88e:	4b12      	ldr	r3, [pc, #72]	@ (802a8d8 <rand+0x6c>)
 802a890:	e9c0 1300 	strd	r1, r3, [r0]
 802a894:	4b11      	ldr	r3, [pc, #68]	@ (802a8dc <rand+0x70>)
 802a896:	6083      	str	r3, [r0, #8]
 802a898:	230b      	movs	r3, #11
 802a89a:	8183      	strh	r3, [r0, #12]
 802a89c:	2100      	movs	r1, #0
 802a89e:	2001      	movs	r0, #1
 802a8a0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 802a8a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802a8a6:	480e      	ldr	r0, [pc, #56]	@ (802a8e0 <rand+0x74>)
 802a8a8:	690b      	ldr	r3, [r1, #16]
 802a8aa:	694c      	ldr	r4, [r1, #20]
 802a8ac:	4a0d      	ldr	r2, [pc, #52]	@ (802a8e4 <rand+0x78>)
 802a8ae:	4358      	muls	r0, r3
 802a8b0:	fb02 0004 	mla	r0, r2, r4, r0
 802a8b4:	fba3 3202 	umull	r3, r2, r3, r2
 802a8b8:	3301      	adds	r3, #1
 802a8ba:	eb40 0002 	adc.w	r0, r0, r2
 802a8be:	e9c1 3004 	strd	r3, r0, [r1, #16]
 802a8c2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802a8c6:	bd10      	pop	{r4, pc}
 802a8c8:	20000460 	.word	0x20000460
 802a8cc:	0803a388 	.word	0x0803a388
 802a8d0:	0803a39f 	.word	0x0803a39f
 802a8d4:	abcd330e 	.word	0xabcd330e
 802a8d8:	e66d1234 	.word	0xe66d1234
 802a8dc:	0005deec 	.word	0x0005deec
 802a8e0:	5851f42d 	.word	0x5851f42d
 802a8e4:	4c957f2d 	.word	0x4c957f2d

0802a8e8 <realloc>:
 802a8e8:	4b02      	ldr	r3, [pc, #8]	@ (802a8f4 <realloc+0xc>)
 802a8ea:	460a      	mov	r2, r1
 802a8ec:	4601      	mov	r1, r0
 802a8ee:	6818      	ldr	r0, [r3, #0]
 802a8f0:	f000 b802 	b.w	802a8f8 <_realloc_r>
 802a8f4:	20000460 	.word	0x20000460

0802a8f8 <_realloc_r>:
 802a8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a8fc:	4680      	mov	r8, r0
 802a8fe:	4615      	mov	r5, r2
 802a900:	460c      	mov	r4, r1
 802a902:	b921      	cbnz	r1, 802a90e <_realloc_r+0x16>
 802a904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a908:	4611      	mov	r1, r2
 802a90a:	f7ff bef5 	b.w	802a6f8 <_malloc_r>
 802a90e:	b92a      	cbnz	r2, 802a91c <_realloc_r+0x24>
 802a910:	f001 fe52 	bl	802c5b8 <_free_r>
 802a914:	2400      	movs	r4, #0
 802a916:	4620      	mov	r0, r4
 802a918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a91c:	f002 fed5 	bl	802d6ca <_malloc_usable_size_r>
 802a920:	4285      	cmp	r5, r0
 802a922:	4606      	mov	r6, r0
 802a924:	d802      	bhi.n	802a92c <_realloc_r+0x34>
 802a926:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802a92a:	d8f4      	bhi.n	802a916 <_realloc_r+0x1e>
 802a92c:	4629      	mov	r1, r5
 802a92e:	4640      	mov	r0, r8
 802a930:	f7ff fee2 	bl	802a6f8 <_malloc_r>
 802a934:	4607      	mov	r7, r0
 802a936:	2800      	cmp	r0, #0
 802a938:	d0ec      	beq.n	802a914 <_realloc_r+0x1c>
 802a93a:	42b5      	cmp	r5, r6
 802a93c:	462a      	mov	r2, r5
 802a93e:	4621      	mov	r1, r4
 802a940:	bf28      	it	cs
 802a942:	4632      	movcs	r2, r6
 802a944:	f001 fe17 	bl	802c576 <memcpy>
 802a948:	4621      	mov	r1, r4
 802a94a:	4640      	mov	r0, r8
 802a94c:	f001 fe34 	bl	802c5b8 <_free_r>
 802a950:	463c      	mov	r4, r7
 802a952:	e7e0      	b.n	802a916 <_realloc_r+0x1e>

0802a954 <sulp>:
 802a954:	b570      	push	{r4, r5, r6, lr}
 802a956:	4604      	mov	r4, r0
 802a958:	460d      	mov	r5, r1
 802a95a:	4616      	mov	r6, r2
 802a95c:	ec45 4b10 	vmov	d0, r4, r5
 802a960:	f002 fd78 	bl	802d454 <__ulp>
 802a964:	b17e      	cbz	r6, 802a986 <sulp+0x32>
 802a966:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802a96a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802a96e:	2b00      	cmp	r3, #0
 802a970:	dd09      	ble.n	802a986 <sulp+0x32>
 802a972:	051b      	lsls	r3, r3, #20
 802a974:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 802a978:	2000      	movs	r0, #0
 802a97a:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 802a97e:	ec41 0b17 	vmov	d7, r0, r1
 802a982:	ee20 0b07 	vmul.f64	d0, d0, d7
 802a986:	bd70      	pop	{r4, r5, r6, pc}

0802a988 <_strtod_l>:
 802a988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a98c:	ed2d 8b0a 	vpush	{d8-d12}
 802a990:	b097      	sub	sp, #92	@ 0x5c
 802a992:	4688      	mov	r8, r1
 802a994:	920e      	str	r2, [sp, #56]	@ 0x38
 802a996:	2200      	movs	r2, #0
 802a998:	9212      	str	r2, [sp, #72]	@ 0x48
 802a99a:	9005      	str	r0, [sp, #20]
 802a99c:	f04f 0a00 	mov.w	sl, #0
 802a9a0:	f04f 0b00 	mov.w	fp, #0
 802a9a4:	460a      	mov	r2, r1
 802a9a6:	9211      	str	r2, [sp, #68]	@ 0x44
 802a9a8:	7811      	ldrb	r1, [r2, #0]
 802a9aa:	292b      	cmp	r1, #43	@ 0x2b
 802a9ac:	d04c      	beq.n	802aa48 <_strtod_l+0xc0>
 802a9ae:	d839      	bhi.n	802aa24 <_strtod_l+0x9c>
 802a9b0:	290d      	cmp	r1, #13
 802a9b2:	d833      	bhi.n	802aa1c <_strtod_l+0x94>
 802a9b4:	2908      	cmp	r1, #8
 802a9b6:	d833      	bhi.n	802aa20 <_strtod_l+0x98>
 802a9b8:	2900      	cmp	r1, #0
 802a9ba:	d03c      	beq.n	802aa36 <_strtod_l+0xae>
 802a9bc:	2200      	movs	r2, #0
 802a9be:	9208      	str	r2, [sp, #32]
 802a9c0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802a9c2:	782a      	ldrb	r2, [r5, #0]
 802a9c4:	2a30      	cmp	r2, #48	@ 0x30
 802a9c6:	f040 80b5 	bne.w	802ab34 <_strtod_l+0x1ac>
 802a9ca:	786a      	ldrb	r2, [r5, #1]
 802a9cc:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802a9d0:	2a58      	cmp	r2, #88	@ 0x58
 802a9d2:	d170      	bne.n	802aab6 <_strtod_l+0x12e>
 802a9d4:	9302      	str	r3, [sp, #8]
 802a9d6:	9b08      	ldr	r3, [sp, #32]
 802a9d8:	9301      	str	r3, [sp, #4]
 802a9da:	ab12      	add	r3, sp, #72	@ 0x48
 802a9dc:	9300      	str	r3, [sp, #0]
 802a9de:	4a8b      	ldr	r2, [pc, #556]	@ (802ac0c <_strtod_l+0x284>)
 802a9e0:	9805      	ldr	r0, [sp, #20]
 802a9e2:	ab13      	add	r3, sp, #76	@ 0x4c
 802a9e4:	a911      	add	r1, sp, #68	@ 0x44
 802a9e6:	f001 fe99 	bl	802c71c <__gethex>
 802a9ea:	f010 060f 	ands.w	r6, r0, #15
 802a9ee:	4604      	mov	r4, r0
 802a9f0:	d005      	beq.n	802a9fe <_strtod_l+0x76>
 802a9f2:	2e06      	cmp	r6, #6
 802a9f4:	d12a      	bne.n	802aa4c <_strtod_l+0xc4>
 802a9f6:	3501      	adds	r5, #1
 802a9f8:	2300      	movs	r3, #0
 802a9fa:	9511      	str	r5, [sp, #68]	@ 0x44
 802a9fc:	9308      	str	r3, [sp, #32]
 802a9fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802aa00:	2b00      	cmp	r3, #0
 802aa02:	f040 852f 	bne.w	802b464 <_strtod_l+0xadc>
 802aa06:	9b08      	ldr	r3, [sp, #32]
 802aa08:	ec4b ab10 	vmov	d0, sl, fp
 802aa0c:	b1cb      	cbz	r3, 802aa42 <_strtod_l+0xba>
 802aa0e:	eeb1 0b40 	vneg.f64	d0, d0
 802aa12:	b017      	add	sp, #92	@ 0x5c
 802aa14:	ecbd 8b0a 	vpop	{d8-d12}
 802aa18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aa1c:	2920      	cmp	r1, #32
 802aa1e:	d1cd      	bne.n	802a9bc <_strtod_l+0x34>
 802aa20:	3201      	adds	r2, #1
 802aa22:	e7c0      	b.n	802a9a6 <_strtod_l+0x1e>
 802aa24:	292d      	cmp	r1, #45	@ 0x2d
 802aa26:	d1c9      	bne.n	802a9bc <_strtod_l+0x34>
 802aa28:	2101      	movs	r1, #1
 802aa2a:	9108      	str	r1, [sp, #32]
 802aa2c:	1c51      	adds	r1, r2, #1
 802aa2e:	9111      	str	r1, [sp, #68]	@ 0x44
 802aa30:	7852      	ldrb	r2, [r2, #1]
 802aa32:	2a00      	cmp	r2, #0
 802aa34:	d1c4      	bne.n	802a9c0 <_strtod_l+0x38>
 802aa36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802aa38:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 802aa3c:	2b00      	cmp	r3, #0
 802aa3e:	f040 850f 	bne.w	802b460 <_strtod_l+0xad8>
 802aa42:	ec4b ab10 	vmov	d0, sl, fp
 802aa46:	e7e4      	b.n	802aa12 <_strtod_l+0x8a>
 802aa48:	2100      	movs	r1, #0
 802aa4a:	e7ee      	b.n	802aa2a <_strtod_l+0xa2>
 802aa4c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802aa4e:	b13a      	cbz	r2, 802aa60 <_strtod_l+0xd8>
 802aa50:	2135      	movs	r1, #53	@ 0x35
 802aa52:	a814      	add	r0, sp, #80	@ 0x50
 802aa54:	f002 fdf5 	bl	802d642 <__copybits>
 802aa58:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802aa5a:	9805      	ldr	r0, [sp, #20]
 802aa5c:	f002 f9c6 	bl	802cdec <_Bfree>
 802aa60:	1e73      	subs	r3, r6, #1
 802aa62:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802aa64:	2b04      	cmp	r3, #4
 802aa66:	d806      	bhi.n	802aa76 <_strtod_l+0xee>
 802aa68:	e8df f003 	tbb	[pc, r3]
 802aa6c:	201d0314 	.word	0x201d0314
 802aa70:	14          	.byte	0x14
 802aa71:	00          	.byte	0x00
 802aa72:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 802aa76:	05e3      	lsls	r3, r4, #23
 802aa78:	bf48      	it	mi
 802aa7a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 802aa7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802aa82:	0d1b      	lsrs	r3, r3, #20
 802aa84:	051b      	lsls	r3, r3, #20
 802aa86:	2b00      	cmp	r3, #0
 802aa88:	d1b9      	bne.n	802a9fe <_strtod_l+0x76>
 802aa8a:	f001 fd3d 	bl	802c508 <__errno>
 802aa8e:	2322      	movs	r3, #34	@ 0x22
 802aa90:	6003      	str	r3, [r0, #0]
 802aa92:	e7b4      	b.n	802a9fe <_strtod_l+0x76>
 802aa94:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 802aa98:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 802aa9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 802aaa0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 802aaa4:	e7e7      	b.n	802aa76 <_strtod_l+0xee>
 802aaa6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 802ac14 <_strtod_l+0x28c>
 802aaaa:	e7e4      	b.n	802aa76 <_strtod_l+0xee>
 802aaac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 802aab0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802aab4:	e7df      	b.n	802aa76 <_strtod_l+0xee>
 802aab6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802aab8:	1c5a      	adds	r2, r3, #1
 802aaba:	9211      	str	r2, [sp, #68]	@ 0x44
 802aabc:	785b      	ldrb	r3, [r3, #1]
 802aabe:	2b30      	cmp	r3, #48	@ 0x30
 802aac0:	d0f9      	beq.n	802aab6 <_strtod_l+0x12e>
 802aac2:	2b00      	cmp	r3, #0
 802aac4:	d09b      	beq.n	802a9fe <_strtod_l+0x76>
 802aac6:	2301      	movs	r3, #1
 802aac8:	2600      	movs	r6, #0
 802aaca:	9307      	str	r3, [sp, #28]
 802aacc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802aace:	930a      	str	r3, [sp, #40]	@ 0x28
 802aad0:	46b1      	mov	r9, r6
 802aad2:	4635      	mov	r5, r6
 802aad4:	220a      	movs	r2, #10
 802aad6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802aad8:	7804      	ldrb	r4, [r0, #0]
 802aada:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 802aade:	b2d9      	uxtb	r1, r3
 802aae0:	2909      	cmp	r1, #9
 802aae2:	d929      	bls.n	802ab38 <_strtod_l+0x1b0>
 802aae4:	494a      	ldr	r1, [pc, #296]	@ (802ac10 <_strtod_l+0x288>)
 802aae6:	2201      	movs	r2, #1
 802aae8:	f001 f825 	bl	802bb36 <strncmp>
 802aaec:	b378      	cbz	r0, 802ab4e <_strtod_l+0x1c6>
 802aaee:	2000      	movs	r0, #0
 802aaf0:	4622      	mov	r2, r4
 802aaf2:	462b      	mov	r3, r5
 802aaf4:	4607      	mov	r7, r0
 802aaf6:	9006      	str	r0, [sp, #24]
 802aaf8:	2a65      	cmp	r2, #101	@ 0x65
 802aafa:	d001      	beq.n	802ab00 <_strtod_l+0x178>
 802aafc:	2a45      	cmp	r2, #69	@ 0x45
 802aafe:	d117      	bne.n	802ab30 <_strtod_l+0x1a8>
 802ab00:	b91b      	cbnz	r3, 802ab0a <_strtod_l+0x182>
 802ab02:	9b07      	ldr	r3, [sp, #28]
 802ab04:	4303      	orrs	r3, r0
 802ab06:	d096      	beq.n	802aa36 <_strtod_l+0xae>
 802ab08:	2300      	movs	r3, #0
 802ab0a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 802ab0e:	f108 0201 	add.w	r2, r8, #1
 802ab12:	9211      	str	r2, [sp, #68]	@ 0x44
 802ab14:	f898 2001 	ldrb.w	r2, [r8, #1]
 802ab18:	2a2b      	cmp	r2, #43	@ 0x2b
 802ab1a:	d06b      	beq.n	802abf4 <_strtod_l+0x26c>
 802ab1c:	2a2d      	cmp	r2, #45	@ 0x2d
 802ab1e:	d071      	beq.n	802ac04 <_strtod_l+0x27c>
 802ab20:	f04f 0e00 	mov.w	lr, #0
 802ab24:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 802ab28:	2c09      	cmp	r4, #9
 802ab2a:	d979      	bls.n	802ac20 <_strtod_l+0x298>
 802ab2c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 802ab30:	2400      	movs	r4, #0
 802ab32:	e094      	b.n	802ac5e <_strtod_l+0x2d6>
 802ab34:	2300      	movs	r3, #0
 802ab36:	e7c7      	b.n	802aac8 <_strtod_l+0x140>
 802ab38:	2d08      	cmp	r5, #8
 802ab3a:	f100 0001 	add.w	r0, r0, #1
 802ab3e:	bfd4      	ite	le
 802ab40:	fb02 3909 	mlale	r9, r2, r9, r3
 802ab44:	fb02 3606 	mlagt	r6, r2, r6, r3
 802ab48:	3501      	adds	r5, #1
 802ab4a:	9011      	str	r0, [sp, #68]	@ 0x44
 802ab4c:	e7c3      	b.n	802aad6 <_strtod_l+0x14e>
 802ab4e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802ab50:	1c5a      	adds	r2, r3, #1
 802ab52:	9211      	str	r2, [sp, #68]	@ 0x44
 802ab54:	785a      	ldrb	r2, [r3, #1]
 802ab56:	b375      	cbz	r5, 802abb6 <_strtod_l+0x22e>
 802ab58:	4607      	mov	r7, r0
 802ab5a:	462b      	mov	r3, r5
 802ab5c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 802ab60:	2909      	cmp	r1, #9
 802ab62:	d913      	bls.n	802ab8c <_strtod_l+0x204>
 802ab64:	2101      	movs	r1, #1
 802ab66:	9106      	str	r1, [sp, #24]
 802ab68:	e7c6      	b.n	802aaf8 <_strtod_l+0x170>
 802ab6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802ab6c:	1c5a      	adds	r2, r3, #1
 802ab6e:	9211      	str	r2, [sp, #68]	@ 0x44
 802ab70:	785a      	ldrb	r2, [r3, #1]
 802ab72:	3001      	adds	r0, #1
 802ab74:	2a30      	cmp	r2, #48	@ 0x30
 802ab76:	d0f8      	beq.n	802ab6a <_strtod_l+0x1e2>
 802ab78:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 802ab7c:	2b08      	cmp	r3, #8
 802ab7e:	f200 8476 	bhi.w	802b46e <_strtod_l+0xae6>
 802ab82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802ab84:	930a      	str	r3, [sp, #40]	@ 0x28
 802ab86:	4607      	mov	r7, r0
 802ab88:	2000      	movs	r0, #0
 802ab8a:	4603      	mov	r3, r0
 802ab8c:	3a30      	subs	r2, #48	@ 0x30
 802ab8e:	f100 0101 	add.w	r1, r0, #1
 802ab92:	d023      	beq.n	802abdc <_strtod_l+0x254>
 802ab94:	440f      	add	r7, r1
 802ab96:	eb00 0c03 	add.w	ip, r0, r3
 802ab9a:	4619      	mov	r1, r3
 802ab9c:	240a      	movs	r4, #10
 802ab9e:	4561      	cmp	r1, ip
 802aba0:	d10b      	bne.n	802abba <_strtod_l+0x232>
 802aba2:	1c5c      	adds	r4, r3, #1
 802aba4:	4403      	add	r3, r0
 802aba6:	2b08      	cmp	r3, #8
 802aba8:	4404      	add	r4, r0
 802abaa:	dc11      	bgt.n	802abd0 <_strtod_l+0x248>
 802abac:	230a      	movs	r3, #10
 802abae:	fb03 2909 	mla	r9, r3, r9, r2
 802abb2:	2100      	movs	r1, #0
 802abb4:	e013      	b.n	802abde <_strtod_l+0x256>
 802abb6:	4628      	mov	r0, r5
 802abb8:	e7dc      	b.n	802ab74 <_strtod_l+0x1ec>
 802abba:	2908      	cmp	r1, #8
 802abbc:	f101 0101 	add.w	r1, r1, #1
 802abc0:	dc02      	bgt.n	802abc8 <_strtod_l+0x240>
 802abc2:	fb04 f909 	mul.w	r9, r4, r9
 802abc6:	e7ea      	b.n	802ab9e <_strtod_l+0x216>
 802abc8:	2910      	cmp	r1, #16
 802abca:	bfd8      	it	le
 802abcc:	4366      	mulle	r6, r4
 802abce:	e7e6      	b.n	802ab9e <_strtod_l+0x216>
 802abd0:	2b0f      	cmp	r3, #15
 802abd2:	dcee      	bgt.n	802abb2 <_strtod_l+0x22a>
 802abd4:	230a      	movs	r3, #10
 802abd6:	fb03 2606 	mla	r6, r3, r6, r2
 802abda:	e7ea      	b.n	802abb2 <_strtod_l+0x22a>
 802abdc:	461c      	mov	r4, r3
 802abde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802abe0:	1c5a      	adds	r2, r3, #1
 802abe2:	9211      	str	r2, [sp, #68]	@ 0x44
 802abe4:	785a      	ldrb	r2, [r3, #1]
 802abe6:	4608      	mov	r0, r1
 802abe8:	4623      	mov	r3, r4
 802abea:	e7b7      	b.n	802ab5c <_strtod_l+0x1d4>
 802abec:	2301      	movs	r3, #1
 802abee:	2700      	movs	r7, #0
 802abf0:	9306      	str	r3, [sp, #24]
 802abf2:	e786      	b.n	802ab02 <_strtod_l+0x17a>
 802abf4:	f04f 0e00 	mov.w	lr, #0
 802abf8:	f108 0202 	add.w	r2, r8, #2
 802abfc:	9211      	str	r2, [sp, #68]	@ 0x44
 802abfe:	f898 2002 	ldrb.w	r2, [r8, #2]
 802ac02:	e78f      	b.n	802ab24 <_strtod_l+0x19c>
 802ac04:	f04f 0e01 	mov.w	lr, #1
 802ac08:	e7f6      	b.n	802abf8 <_strtod_l+0x270>
 802ac0a:	bf00      	nop
 802ac0c:	0803a41c 	.word	0x0803a41c
 802ac10:	0803a3f7 	.word	0x0803a3f7
 802ac14:	7ff00000 	.word	0x7ff00000
 802ac18:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802ac1a:	1c54      	adds	r4, r2, #1
 802ac1c:	9411      	str	r4, [sp, #68]	@ 0x44
 802ac1e:	7852      	ldrb	r2, [r2, #1]
 802ac20:	2a30      	cmp	r2, #48	@ 0x30
 802ac22:	d0f9      	beq.n	802ac18 <_strtod_l+0x290>
 802ac24:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 802ac28:	2c08      	cmp	r4, #8
 802ac2a:	d881      	bhi.n	802ab30 <_strtod_l+0x1a8>
 802ac2c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 802ac30:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802ac32:	9209      	str	r2, [sp, #36]	@ 0x24
 802ac34:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802ac36:	1c51      	adds	r1, r2, #1
 802ac38:	9111      	str	r1, [sp, #68]	@ 0x44
 802ac3a:	7852      	ldrb	r2, [r2, #1]
 802ac3c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 802ac40:	2c09      	cmp	r4, #9
 802ac42:	d938      	bls.n	802acb6 <_strtod_l+0x32e>
 802ac44:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802ac46:	1b0c      	subs	r4, r1, r4
 802ac48:	2c08      	cmp	r4, #8
 802ac4a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 802ac4e:	dc02      	bgt.n	802ac56 <_strtod_l+0x2ce>
 802ac50:	4564      	cmp	r4, ip
 802ac52:	bfa8      	it	ge
 802ac54:	4664      	movge	r4, ip
 802ac56:	f1be 0f00 	cmp.w	lr, #0
 802ac5a:	d000      	beq.n	802ac5e <_strtod_l+0x2d6>
 802ac5c:	4264      	negs	r4, r4
 802ac5e:	2b00      	cmp	r3, #0
 802ac60:	d14e      	bne.n	802ad00 <_strtod_l+0x378>
 802ac62:	9b07      	ldr	r3, [sp, #28]
 802ac64:	4318      	orrs	r0, r3
 802ac66:	f47f aeca 	bne.w	802a9fe <_strtod_l+0x76>
 802ac6a:	9b06      	ldr	r3, [sp, #24]
 802ac6c:	2b00      	cmp	r3, #0
 802ac6e:	f47f aee2 	bne.w	802aa36 <_strtod_l+0xae>
 802ac72:	2a69      	cmp	r2, #105	@ 0x69
 802ac74:	d027      	beq.n	802acc6 <_strtod_l+0x33e>
 802ac76:	dc24      	bgt.n	802acc2 <_strtod_l+0x33a>
 802ac78:	2a49      	cmp	r2, #73	@ 0x49
 802ac7a:	d024      	beq.n	802acc6 <_strtod_l+0x33e>
 802ac7c:	2a4e      	cmp	r2, #78	@ 0x4e
 802ac7e:	f47f aeda 	bne.w	802aa36 <_strtod_l+0xae>
 802ac82:	4997      	ldr	r1, [pc, #604]	@ (802aee0 <_strtod_l+0x558>)
 802ac84:	a811      	add	r0, sp, #68	@ 0x44
 802ac86:	f001 ff6b 	bl	802cb60 <__match>
 802ac8a:	2800      	cmp	r0, #0
 802ac8c:	f43f aed3 	beq.w	802aa36 <_strtod_l+0xae>
 802ac90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802ac92:	781b      	ldrb	r3, [r3, #0]
 802ac94:	2b28      	cmp	r3, #40	@ 0x28
 802ac96:	d12d      	bne.n	802acf4 <_strtod_l+0x36c>
 802ac98:	4992      	ldr	r1, [pc, #584]	@ (802aee4 <_strtod_l+0x55c>)
 802ac9a:	aa14      	add	r2, sp, #80	@ 0x50
 802ac9c:	a811      	add	r0, sp, #68	@ 0x44
 802ac9e:	f001 ff73 	bl	802cb88 <__hexnan>
 802aca2:	2805      	cmp	r0, #5
 802aca4:	d126      	bne.n	802acf4 <_strtod_l+0x36c>
 802aca6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802aca8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 802acac:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 802acb0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 802acb4:	e6a3      	b.n	802a9fe <_strtod_l+0x76>
 802acb6:	240a      	movs	r4, #10
 802acb8:	fb04 2c0c 	mla	ip, r4, ip, r2
 802acbc:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 802acc0:	e7b8      	b.n	802ac34 <_strtod_l+0x2ac>
 802acc2:	2a6e      	cmp	r2, #110	@ 0x6e
 802acc4:	e7db      	b.n	802ac7e <_strtod_l+0x2f6>
 802acc6:	4988      	ldr	r1, [pc, #544]	@ (802aee8 <_strtod_l+0x560>)
 802acc8:	a811      	add	r0, sp, #68	@ 0x44
 802acca:	f001 ff49 	bl	802cb60 <__match>
 802acce:	2800      	cmp	r0, #0
 802acd0:	f43f aeb1 	beq.w	802aa36 <_strtod_l+0xae>
 802acd4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802acd6:	4985      	ldr	r1, [pc, #532]	@ (802aeec <_strtod_l+0x564>)
 802acd8:	3b01      	subs	r3, #1
 802acda:	a811      	add	r0, sp, #68	@ 0x44
 802acdc:	9311      	str	r3, [sp, #68]	@ 0x44
 802acde:	f001 ff3f 	bl	802cb60 <__match>
 802ace2:	b910      	cbnz	r0, 802acea <_strtod_l+0x362>
 802ace4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802ace6:	3301      	adds	r3, #1
 802ace8:	9311      	str	r3, [sp, #68]	@ 0x44
 802acea:	f8df b214 	ldr.w	fp, [pc, #532]	@ 802af00 <_strtod_l+0x578>
 802acee:	f04f 0a00 	mov.w	sl, #0
 802acf2:	e684      	b.n	802a9fe <_strtod_l+0x76>
 802acf4:	487e      	ldr	r0, [pc, #504]	@ (802aef0 <_strtod_l+0x568>)
 802acf6:	f001 fc4f 	bl	802c598 <nan>
 802acfa:	ec5b ab10 	vmov	sl, fp, d0
 802acfe:	e67e      	b.n	802a9fe <_strtod_l+0x76>
 802ad00:	ee07 9a90 	vmov	s15, r9
 802ad04:	1be2      	subs	r2, r4, r7
 802ad06:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802ad0a:	2d00      	cmp	r5, #0
 802ad0c:	bf08      	it	eq
 802ad0e:	461d      	moveq	r5, r3
 802ad10:	2b10      	cmp	r3, #16
 802ad12:	9209      	str	r2, [sp, #36]	@ 0x24
 802ad14:	461a      	mov	r2, r3
 802ad16:	bfa8      	it	ge
 802ad18:	2210      	movge	r2, #16
 802ad1a:	2b09      	cmp	r3, #9
 802ad1c:	ec5b ab17 	vmov	sl, fp, d7
 802ad20:	dc15      	bgt.n	802ad4e <_strtod_l+0x3c6>
 802ad22:	1be1      	subs	r1, r4, r7
 802ad24:	2900      	cmp	r1, #0
 802ad26:	f43f ae6a 	beq.w	802a9fe <_strtod_l+0x76>
 802ad2a:	eba4 0107 	sub.w	r1, r4, r7
 802ad2e:	dd72      	ble.n	802ae16 <_strtod_l+0x48e>
 802ad30:	2916      	cmp	r1, #22
 802ad32:	dc59      	bgt.n	802ade8 <_strtod_l+0x460>
 802ad34:	4b6f      	ldr	r3, [pc, #444]	@ (802aef4 <_strtod_l+0x56c>)
 802ad36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802ad38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802ad3c:	ed93 7b00 	vldr	d7, [r3]
 802ad40:	ec4b ab16 	vmov	d6, sl, fp
 802ad44:	ee27 7b06 	vmul.f64	d7, d7, d6
 802ad48:	ec5b ab17 	vmov	sl, fp, d7
 802ad4c:	e657      	b.n	802a9fe <_strtod_l+0x76>
 802ad4e:	4969      	ldr	r1, [pc, #420]	@ (802aef4 <_strtod_l+0x56c>)
 802ad50:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 802ad54:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 802ad58:	ee06 6a90 	vmov	s13, r6
 802ad5c:	2b0f      	cmp	r3, #15
 802ad5e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 802ad62:	eea7 6b05 	vfma.f64	d6, d7, d5
 802ad66:	ec5b ab16 	vmov	sl, fp, d6
 802ad6a:	ddda      	ble.n	802ad22 <_strtod_l+0x39a>
 802ad6c:	1a9a      	subs	r2, r3, r2
 802ad6e:	1be1      	subs	r1, r4, r7
 802ad70:	440a      	add	r2, r1
 802ad72:	2a00      	cmp	r2, #0
 802ad74:	f340 8094 	ble.w	802aea0 <_strtod_l+0x518>
 802ad78:	f012 000f 	ands.w	r0, r2, #15
 802ad7c:	d00a      	beq.n	802ad94 <_strtod_l+0x40c>
 802ad7e:	495d      	ldr	r1, [pc, #372]	@ (802aef4 <_strtod_l+0x56c>)
 802ad80:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 802ad84:	ed91 7b00 	vldr	d7, [r1]
 802ad88:	ec4b ab16 	vmov	d6, sl, fp
 802ad8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 802ad90:	ec5b ab17 	vmov	sl, fp, d7
 802ad94:	f032 020f 	bics.w	r2, r2, #15
 802ad98:	d073      	beq.n	802ae82 <_strtod_l+0x4fa>
 802ad9a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 802ad9e:	dd47      	ble.n	802ae30 <_strtod_l+0x4a8>
 802ada0:	2400      	movs	r4, #0
 802ada2:	4625      	mov	r5, r4
 802ada4:	9407      	str	r4, [sp, #28]
 802ada6:	4626      	mov	r6, r4
 802ada8:	9a05      	ldr	r2, [sp, #20]
 802adaa:	f8df b154 	ldr.w	fp, [pc, #340]	@ 802af00 <_strtod_l+0x578>
 802adae:	2322      	movs	r3, #34	@ 0x22
 802adb0:	6013      	str	r3, [r2, #0]
 802adb2:	f04f 0a00 	mov.w	sl, #0
 802adb6:	9b07      	ldr	r3, [sp, #28]
 802adb8:	2b00      	cmp	r3, #0
 802adba:	f43f ae20 	beq.w	802a9fe <_strtod_l+0x76>
 802adbe:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802adc0:	9805      	ldr	r0, [sp, #20]
 802adc2:	f002 f813 	bl	802cdec <_Bfree>
 802adc6:	9805      	ldr	r0, [sp, #20]
 802adc8:	4631      	mov	r1, r6
 802adca:	f002 f80f 	bl	802cdec <_Bfree>
 802adce:	9805      	ldr	r0, [sp, #20]
 802add0:	4629      	mov	r1, r5
 802add2:	f002 f80b 	bl	802cdec <_Bfree>
 802add6:	9907      	ldr	r1, [sp, #28]
 802add8:	9805      	ldr	r0, [sp, #20]
 802adda:	f002 f807 	bl	802cdec <_Bfree>
 802adde:	9805      	ldr	r0, [sp, #20]
 802ade0:	4621      	mov	r1, r4
 802ade2:	f002 f803 	bl	802cdec <_Bfree>
 802ade6:	e60a      	b.n	802a9fe <_strtod_l+0x76>
 802ade8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 802adec:	1be0      	subs	r0, r4, r7
 802adee:	4281      	cmp	r1, r0
 802adf0:	dbbc      	blt.n	802ad6c <_strtod_l+0x3e4>
 802adf2:	4a40      	ldr	r2, [pc, #256]	@ (802aef4 <_strtod_l+0x56c>)
 802adf4:	f1c3 030f 	rsb	r3, r3, #15
 802adf8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 802adfc:	ed91 7b00 	vldr	d7, [r1]
 802ae00:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802ae02:	ec4b ab16 	vmov	d6, sl, fp
 802ae06:	1acb      	subs	r3, r1, r3
 802ae08:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 802ae0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 802ae10:	ed92 6b00 	vldr	d6, [r2]
 802ae14:	e796      	b.n	802ad44 <_strtod_l+0x3bc>
 802ae16:	3116      	adds	r1, #22
 802ae18:	dba8      	blt.n	802ad6c <_strtod_l+0x3e4>
 802ae1a:	4b36      	ldr	r3, [pc, #216]	@ (802aef4 <_strtod_l+0x56c>)
 802ae1c:	1b3c      	subs	r4, r7, r4
 802ae1e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 802ae22:	ed94 7b00 	vldr	d7, [r4]
 802ae26:	ec4b ab16 	vmov	d6, sl, fp
 802ae2a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802ae2e:	e78b      	b.n	802ad48 <_strtod_l+0x3c0>
 802ae30:	2000      	movs	r0, #0
 802ae32:	ec4b ab17 	vmov	d7, sl, fp
 802ae36:	4e30      	ldr	r6, [pc, #192]	@ (802aef8 <_strtod_l+0x570>)
 802ae38:	1112      	asrs	r2, r2, #4
 802ae3a:	4601      	mov	r1, r0
 802ae3c:	2a01      	cmp	r2, #1
 802ae3e:	dc23      	bgt.n	802ae88 <_strtod_l+0x500>
 802ae40:	b108      	cbz	r0, 802ae46 <_strtod_l+0x4be>
 802ae42:	ec5b ab17 	vmov	sl, fp, d7
 802ae46:	4a2c      	ldr	r2, [pc, #176]	@ (802aef8 <_strtod_l+0x570>)
 802ae48:	482c      	ldr	r0, [pc, #176]	@ (802aefc <_strtod_l+0x574>)
 802ae4a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 802ae4e:	ed92 7b00 	vldr	d7, [r2]
 802ae52:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 802ae56:	ec4b ab16 	vmov	d6, sl, fp
 802ae5a:	4a29      	ldr	r2, [pc, #164]	@ (802af00 <_strtod_l+0x578>)
 802ae5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 802ae60:	ee17 1a90 	vmov	r1, s15
 802ae64:	400a      	ands	r2, r1
 802ae66:	4282      	cmp	r2, r0
 802ae68:	ec5b ab17 	vmov	sl, fp, d7
 802ae6c:	d898      	bhi.n	802ada0 <_strtod_l+0x418>
 802ae6e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 802ae72:	4282      	cmp	r2, r0
 802ae74:	bf86      	itte	hi
 802ae76:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 802af04 <_strtod_l+0x57c>
 802ae7a:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 802ae7e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 802ae82:	2200      	movs	r2, #0
 802ae84:	9206      	str	r2, [sp, #24]
 802ae86:	e076      	b.n	802af76 <_strtod_l+0x5ee>
 802ae88:	f012 0f01 	tst.w	r2, #1
 802ae8c:	d004      	beq.n	802ae98 <_strtod_l+0x510>
 802ae8e:	ed96 6b00 	vldr	d6, [r6]
 802ae92:	2001      	movs	r0, #1
 802ae94:	ee27 7b06 	vmul.f64	d7, d7, d6
 802ae98:	3101      	adds	r1, #1
 802ae9a:	1052      	asrs	r2, r2, #1
 802ae9c:	3608      	adds	r6, #8
 802ae9e:	e7cd      	b.n	802ae3c <_strtod_l+0x4b4>
 802aea0:	d0ef      	beq.n	802ae82 <_strtod_l+0x4fa>
 802aea2:	4252      	negs	r2, r2
 802aea4:	f012 000f 	ands.w	r0, r2, #15
 802aea8:	d00a      	beq.n	802aec0 <_strtod_l+0x538>
 802aeaa:	4912      	ldr	r1, [pc, #72]	@ (802aef4 <_strtod_l+0x56c>)
 802aeac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 802aeb0:	ed91 7b00 	vldr	d7, [r1]
 802aeb4:	ec4b ab16 	vmov	d6, sl, fp
 802aeb8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802aebc:	ec5b ab17 	vmov	sl, fp, d7
 802aec0:	1112      	asrs	r2, r2, #4
 802aec2:	d0de      	beq.n	802ae82 <_strtod_l+0x4fa>
 802aec4:	2a1f      	cmp	r2, #31
 802aec6:	dd1f      	ble.n	802af08 <_strtod_l+0x580>
 802aec8:	2400      	movs	r4, #0
 802aeca:	4625      	mov	r5, r4
 802aecc:	9407      	str	r4, [sp, #28]
 802aece:	4626      	mov	r6, r4
 802aed0:	9a05      	ldr	r2, [sp, #20]
 802aed2:	2322      	movs	r3, #34	@ 0x22
 802aed4:	f04f 0a00 	mov.w	sl, #0
 802aed8:	f04f 0b00 	mov.w	fp, #0
 802aedc:	6013      	str	r3, [r2, #0]
 802aede:	e76a      	b.n	802adb6 <_strtod_l+0x42e>
 802aee0:	0803a402 	.word	0x0803a402
 802aee4:	0803a408 	.word	0x0803a408
 802aee8:	0803a3f9 	.word	0x0803a3f9
 802aeec:	0803a3fc 	.word	0x0803a3fc
 802aef0:	0803a387 	.word	0x0803a387
 802aef4:	0803a768 	.word	0x0803a768
 802aef8:	0803a740 	.word	0x0803a740
 802aefc:	7ca00000 	.word	0x7ca00000
 802af00:	7ff00000 	.word	0x7ff00000
 802af04:	7fefffff 	.word	0x7fefffff
 802af08:	f012 0110 	ands.w	r1, r2, #16
 802af0c:	bf18      	it	ne
 802af0e:	216a      	movne	r1, #106	@ 0x6a
 802af10:	9106      	str	r1, [sp, #24]
 802af12:	ec4b ab17 	vmov	d7, sl, fp
 802af16:	49b0      	ldr	r1, [pc, #704]	@ (802b1d8 <_strtod_l+0x850>)
 802af18:	2000      	movs	r0, #0
 802af1a:	07d6      	lsls	r6, r2, #31
 802af1c:	d504      	bpl.n	802af28 <_strtod_l+0x5a0>
 802af1e:	ed91 6b00 	vldr	d6, [r1]
 802af22:	2001      	movs	r0, #1
 802af24:	ee27 7b06 	vmul.f64	d7, d7, d6
 802af28:	1052      	asrs	r2, r2, #1
 802af2a:	f101 0108 	add.w	r1, r1, #8
 802af2e:	d1f4      	bne.n	802af1a <_strtod_l+0x592>
 802af30:	b108      	cbz	r0, 802af36 <_strtod_l+0x5ae>
 802af32:	ec5b ab17 	vmov	sl, fp, d7
 802af36:	9a06      	ldr	r2, [sp, #24]
 802af38:	b1b2      	cbz	r2, 802af68 <_strtod_l+0x5e0>
 802af3a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 802af3e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 802af42:	2a00      	cmp	r2, #0
 802af44:	4658      	mov	r0, fp
 802af46:	dd0f      	ble.n	802af68 <_strtod_l+0x5e0>
 802af48:	2a1f      	cmp	r2, #31
 802af4a:	dd55      	ble.n	802aff8 <_strtod_l+0x670>
 802af4c:	2a34      	cmp	r2, #52	@ 0x34
 802af4e:	bfde      	ittt	le
 802af50:	f04f 32ff 	movle.w	r2, #4294967295	@ 0xffffffff
 802af54:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 802af58:	408a      	lslle	r2, r1
 802af5a:	f04f 0a00 	mov.w	sl, #0
 802af5e:	bfcc      	ite	gt
 802af60:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 802af64:	ea02 0b00 	andle.w	fp, r2, r0
 802af68:	ec4b ab17 	vmov	d7, sl, fp
 802af6c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802af70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802af74:	d0a8      	beq.n	802aec8 <_strtod_l+0x540>
 802af76:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802af78:	9805      	ldr	r0, [sp, #20]
 802af7a:	f8cd 9000 	str.w	r9, [sp]
 802af7e:	462a      	mov	r2, r5
 802af80:	f001 ff9c 	bl	802cebc <__s2b>
 802af84:	9007      	str	r0, [sp, #28]
 802af86:	2800      	cmp	r0, #0
 802af88:	f43f af0a 	beq.w	802ada0 <_strtod_l+0x418>
 802af8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802af8e:	1b3f      	subs	r7, r7, r4
 802af90:	2b00      	cmp	r3, #0
 802af92:	bfb4      	ite	lt
 802af94:	463b      	movlt	r3, r7
 802af96:	2300      	movge	r3, #0
 802af98:	930a      	str	r3, [sp, #40]	@ 0x28
 802af9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802af9c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 802b1c8 <_strtod_l+0x840>
 802afa0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802afa4:	2400      	movs	r4, #0
 802afa6:	930d      	str	r3, [sp, #52]	@ 0x34
 802afa8:	4625      	mov	r5, r4
 802afaa:	9b07      	ldr	r3, [sp, #28]
 802afac:	9805      	ldr	r0, [sp, #20]
 802afae:	6859      	ldr	r1, [r3, #4]
 802afb0:	f001 fedc 	bl	802cd6c <_Balloc>
 802afb4:	4606      	mov	r6, r0
 802afb6:	2800      	cmp	r0, #0
 802afb8:	f43f aef6 	beq.w	802ada8 <_strtod_l+0x420>
 802afbc:	9b07      	ldr	r3, [sp, #28]
 802afbe:	691a      	ldr	r2, [r3, #16]
 802afc0:	ec4b ab19 	vmov	d9, sl, fp
 802afc4:	3202      	adds	r2, #2
 802afc6:	f103 010c 	add.w	r1, r3, #12
 802afca:	0092      	lsls	r2, r2, #2
 802afcc:	300c      	adds	r0, #12
 802afce:	f001 fad2 	bl	802c576 <memcpy>
 802afd2:	eeb0 0b49 	vmov.f64	d0, d9
 802afd6:	9805      	ldr	r0, [sp, #20]
 802afd8:	aa14      	add	r2, sp, #80	@ 0x50
 802afda:	a913      	add	r1, sp, #76	@ 0x4c
 802afdc:	f002 faaa 	bl	802d534 <__d2b>
 802afe0:	9012      	str	r0, [sp, #72]	@ 0x48
 802afe2:	2800      	cmp	r0, #0
 802afe4:	f43f aee0 	beq.w	802ada8 <_strtod_l+0x420>
 802afe8:	9805      	ldr	r0, [sp, #20]
 802afea:	2101      	movs	r1, #1
 802afec:	f001 fffc 	bl	802cfe8 <__i2b>
 802aff0:	4605      	mov	r5, r0
 802aff2:	b940      	cbnz	r0, 802b006 <_strtod_l+0x67e>
 802aff4:	2500      	movs	r5, #0
 802aff6:	e6d7      	b.n	802ada8 <_strtod_l+0x420>
 802aff8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 802affc:	fa01 f202 	lsl.w	r2, r1, r2
 802b000:	ea02 0a0a 	and.w	sl, r2, sl
 802b004:	e7b0      	b.n	802af68 <_strtod_l+0x5e0>
 802b006:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 802b008:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802b00a:	2f00      	cmp	r7, #0
 802b00c:	bfab      	itete	ge
 802b00e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 802b010:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 802b012:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 802b016:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 802b01a:	bfac      	ite	ge
 802b01c:	eb07 0903 	addge.w	r9, r7, r3
 802b020:	eba3 0807 	sublt.w	r8, r3, r7
 802b024:	9b06      	ldr	r3, [sp, #24]
 802b026:	1aff      	subs	r7, r7, r3
 802b028:	4417      	add	r7, r2
 802b02a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 802b02e:	4a6b      	ldr	r2, [pc, #428]	@ (802b1dc <_strtod_l+0x854>)
 802b030:	3f01      	subs	r7, #1
 802b032:	4297      	cmp	r7, r2
 802b034:	da51      	bge.n	802b0da <_strtod_l+0x752>
 802b036:	1bd1      	subs	r1, r2, r7
 802b038:	291f      	cmp	r1, #31
 802b03a:	eba3 0301 	sub.w	r3, r3, r1
 802b03e:	f04f 0201 	mov.w	r2, #1
 802b042:	dc3e      	bgt.n	802b0c2 <_strtod_l+0x73a>
 802b044:	408a      	lsls	r2, r1
 802b046:	920c      	str	r2, [sp, #48]	@ 0x30
 802b048:	2200      	movs	r2, #0
 802b04a:	920b      	str	r2, [sp, #44]	@ 0x2c
 802b04c:	eb09 0703 	add.w	r7, r9, r3
 802b050:	4498      	add	r8, r3
 802b052:	9b06      	ldr	r3, [sp, #24]
 802b054:	45b9      	cmp	r9, r7
 802b056:	4498      	add	r8, r3
 802b058:	464b      	mov	r3, r9
 802b05a:	bfa8      	it	ge
 802b05c:	463b      	movge	r3, r7
 802b05e:	4543      	cmp	r3, r8
 802b060:	bfa8      	it	ge
 802b062:	4643      	movge	r3, r8
 802b064:	2b00      	cmp	r3, #0
 802b066:	bfc2      	ittt	gt
 802b068:	1aff      	subgt	r7, r7, r3
 802b06a:	eba8 0803 	subgt.w	r8, r8, r3
 802b06e:	eba9 0903 	subgt.w	r9, r9, r3
 802b072:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802b074:	2b00      	cmp	r3, #0
 802b076:	dd16      	ble.n	802b0a6 <_strtod_l+0x71e>
 802b078:	4629      	mov	r1, r5
 802b07a:	9805      	ldr	r0, [sp, #20]
 802b07c:	461a      	mov	r2, r3
 802b07e:	f002 f873 	bl	802d168 <__pow5mult>
 802b082:	4605      	mov	r5, r0
 802b084:	2800      	cmp	r0, #0
 802b086:	d0b5      	beq.n	802aff4 <_strtod_l+0x66c>
 802b088:	4601      	mov	r1, r0
 802b08a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802b08c:	9805      	ldr	r0, [sp, #20]
 802b08e:	f001 ffc1 	bl	802d014 <__multiply>
 802b092:	900f      	str	r0, [sp, #60]	@ 0x3c
 802b094:	2800      	cmp	r0, #0
 802b096:	f43f ae87 	beq.w	802ada8 <_strtod_l+0x420>
 802b09a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802b09c:	9805      	ldr	r0, [sp, #20]
 802b09e:	f001 fea5 	bl	802cdec <_Bfree>
 802b0a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802b0a4:	9312      	str	r3, [sp, #72]	@ 0x48
 802b0a6:	2f00      	cmp	r7, #0
 802b0a8:	dc1b      	bgt.n	802b0e2 <_strtod_l+0x75a>
 802b0aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b0ac:	2b00      	cmp	r3, #0
 802b0ae:	dd21      	ble.n	802b0f4 <_strtod_l+0x76c>
 802b0b0:	4631      	mov	r1, r6
 802b0b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802b0b4:	9805      	ldr	r0, [sp, #20]
 802b0b6:	f002 f857 	bl	802d168 <__pow5mult>
 802b0ba:	4606      	mov	r6, r0
 802b0bc:	b9d0      	cbnz	r0, 802b0f4 <_strtod_l+0x76c>
 802b0be:	2600      	movs	r6, #0
 802b0c0:	e672      	b.n	802ada8 <_strtod_l+0x420>
 802b0c2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 802b0c6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 802b0ca:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 802b0ce:	37e2      	adds	r7, #226	@ 0xe2
 802b0d0:	fa02 f107 	lsl.w	r1, r2, r7
 802b0d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 802b0d6:	920c      	str	r2, [sp, #48]	@ 0x30
 802b0d8:	e7b8      	b.n	802b04c <_strtod_l+0x6c4>
 802b0da:	2200      	movs	r2, #0
 802b0dc:	920b      	str	r2, [sp, #44]	@ 0x2c
 802b0de:	2201      	movs	r2, #1
 802b0e0:	e7f9      	b.n	802b0d6 <_strtod_l+0x74e>
 802b0e2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802b0e4:	9805      	ldr	r0, [sp, #20]
 802b0e6:	463a      	mov	r2, r7
 802b0e8:	f002 f898 	bl	802d21c <__lshift>
 802b0ec:	9012      	str	r0, [sp, #72]	@ 0x48
 802b0ee:	2800      	cmp	r0, #0
 802b0f0:	d1db      	bne.n	802b0aa <_strtod_l+0x722>
 802b0f2:	e659      	b.n	802ada8 <_strtod_l+0x420>
 802b0f4:	f1b8 0f00 	cmp.w	r8, #0
 802b0f8:	dd07      	ble.n	802b10a <_strtod_l+0x782>
 802b0fa:	4631      	mov	r1, r6
 802b0fc:	9805      	ldr	r0, [sp, #20]
 802b0fe:	4642      	mov	r2, r8
 802b100:	f002 f88c 	bl	802d21c <__lshift>
 802b104:	4606      	mov	r6, r0
 802b106:	2800      	cmp	r0, #0
 802b108:	d0d9      	beq.n	802b0be <_strtod_l+0x736>
 802b10a:	f1b9 0f00 	cmp.w	r9, #0
 802b10e:	dd08      	ble.n	802b122 <_strtod_l+0x79a>
 802b110:	4629      	mov	r1, r5
 802b112:	9805      	ldr	r0, [sp, #20]
 802b114:	464a      	mov	r2, r9
 802b116:	f002 f881 	bl	802d21c <__lshift>
 802b11a:	4605      	mov	r5, r0
 802b11c:	2800      	cmp	r0, #0
 802b11e:	f43f ae43 	beq.w	802ada8 <_strtod_l+0x420>
 802b122:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802b124:	9805      	ldr	r0, [sp, #20]
 802b126:	4632      	mov	r2, r6
 802b128:	f002 f900 	bl	802d32c <__mdiff>
 802b12c:	4604      	mov	r4, r0
 802b12e:	2800      	cmp	r0, #0
 802b130:	f43f ae3a 	beq.w	802ada8 <_strtod_l+0x420>
 802b134:	2300      	movs	r3, #0
 802b136:	f8d0 800c 	ldr.w	r8, [r0, #12]
 802b13a:	60c3      	str	r3, [r0, #12]
 802b13c:	4629      	mov	r1, r5
 802b13e:	f002 f8d9 	bl	802d2f4 <__mcmp>
 802b142:	2800      	cmp	r0, #0
 802b144:	da4e      	bge.n	802b1e4 <_strtod_l+0x85c>
 802b146:	ea58 080a 	orrs.w	r8, r8, sl
 802b14a:	d174      	bne.n	802b236 <_strtod_l+0x8ae>
 802b14c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802b150:	2b00      	cmp	r3, #0
 802b152:	d170      	bne.n	802b236 <_strtod_l+0x8ae>
 802b154:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802b158:	0d1b      	lsrs	r3, r3, #20
 802b15a:	051b      	lsls	r3, r3, #20
 802b15c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802b160:	d969      	bls.n	802b236 <_strtod_l+0x8ae>
 802b162:	6963      	ldr	r3, [r4, #20]
 802b164:	b913      	cbnz	r3, 802b16c <_strtod_l+0x7e4>
 802b166:	6923      	ldr	r3, [r4, #16]
 802b168:	2b01      	cmp	r3, #1
 802b16a:	dd64      	ble.n	802b236 <_strtod_l+0x8ae>
 802b16c:	4621      	mov	r1, r4
 802b16e:	2201      	movs	r2, #1
 802b170:	9805      	ldr	r0, [sp, #20]
 802b172:	f002 f853 	bl	802d21c <__lshift>
 802b176:	4629      	mov	r1, r5
 802b178:	4604      	mov	r4, r0
 802b17a:	f002 f8bb 	bl	802d2f4 <__mcmp>
 802b17e:	2800      	cmp	r0, #0
 802b180:	dd59      	ble.n	802b236 <_strtod_l+0x8ae>
 802b182:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802b186:	9a06      	ldr	r2, [sp, #24]
 802b188:	0d1b      	lsrs	r3, r3, #20
 802b18a:	051b      	lsls	r3, r3, #20
 802b18c:	2a00      	cmp	r2, #0
 802b18e:	d070      	beq.n	802b272 <_strtod_l+0x8ea>
 802b190:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802b194:	d86d      	bhi.n	802b272 <_strtod_l+0x8ea>
 802b196:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 802b19a:	f67f ae99 	bls.w	802aed0 <_strtod_l+0x548>
 802b19e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 802b1d0 <_strtod_l+0x848>
 802b1a2:	ec4b ab16 	vmov	d6, sl, fp
 802b1a6:	4b0e      	ldr	r3, [pc, #56]	@ (802b1e0 <_strtod_l+0x858>)
 802b1a8:	ee26 7b07 	vmul.f64	d7, d6, d7
 802b1ac:	ee17 2a90 	vmov	r2, s15
 802b1b0:	4013      	ands	r3, r2
 802b1b2:	ec5b ab17 	vmov	sl, fp, d7
 802b1b6:	2b00      	cmp	r3, #0
 802b1b8:	f47f ae01 	bne.w	802adbe <_strtod_l+0x436>
 802b1bc:	9a05      	ldr	r2, [sp, #20]
 802b1be:	2322      	movs	r3, #34	@ 0x22
 802b1c0:	6013      	str	r3, [r2, #0]
 802b1c2:	e5fc      	b.n	802adbe <_strtod_l+0x436>
 802b1c4:	f3af 8000 	nop.w
 802b1c8:	ffc00000 	.word	0xffc00000
 802b1cc:	41dfffff 	.word	0x41dfffff
 802b1d0:	00000000 	.word	0x00000000
 802b1d4:	39500000 	.word	0x39500000
 802b1d8:	0803a430 	.word	0x0803a430
 802b1dc:	fffffc02 	.word	0xfffffc02
 802b1e0:	7ff00000 	.word	0x7ff00000
 802b1e4:	46d9      	mov	r9, fp
 802b1e6:	d15d      	bne.n	802b2a4 <_strtod_l+0x91c>
 802b1e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802b1ec:	f1b8 0f00 	cmp.w	r8, #0
 802b1f0:	d02a      	beq.n	802b248 <_strtod_l+0x8c0>
 802b1f2:	4aab      	ldr	r2, [pc, #684]	@ (802b4a0 <_strtod_l+0xb18>)
 802b1f4:	4293      	cmp	r3, r2
 802b1f6:	d12a      	bne.n	802b24e <_strtod_l+0x8c6>
 802b1f8:	9b06      	ldr	r3, [sp, #24]
 802b1fa:	4652      	mov	r2, sl
 802b1fc:	b1fb      	cbz	r3, 802b23e <_strtod_l+0x8b6>
 802b1fe:	4ba9      	ldr	r3, [pc, #676]	@ (802b4a4 <_strtod_l+0xb1c>)
 802b200:	ea0b 0303 	and.w	r3, fp, r3
 802b204:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 802b208:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 802b20c:	d81a      	bhi.n	802b244 <_strtod_l+0x8bc>
 802b20e:	0d1b      	lsrs	r3, r3, #20
 802b210:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802b214:	fa01 f303 	lsl.w	r3, r1, r3
 802b218:	429a      	cmp	r2, r3
 802b21a:	d118      	bne.n	802b24e <_strtod_l+0x8c6>
 802b21c:	4ba2      	ldr	r3, [pc, #648]	@ (802b4a8 <_strtod_l+0xb20>)
 802b21e:	4599      	cmp	r9, r3
 802b220:	d102      	bne.n	802b228 <_strtod_l+0x8a0>
 802b222:	3201      	adds	r2, #1
 802b224:	f43f adc0 	beq.w	802ada8 <_strtod_l+0x420>
 802b228:	4b9e      	ldr	r3, [pc, #632]	@ (802b4a4 <_strtod_l+0xb1c>)
 802b22a:	ea09 0303 	and.w	r3, r9, r3
 802b22e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 802b232:	f04f 0a00 	mov.w	sl, #0
 802b236:	9b06      	ldr	r3, [sp, #24]
 802b238:	2b00      	cmp	r3, #0
 802b23a:	d1b0      	bne.n	802b19e <_strtod_l+0x816>
 802b23c:	e5bf      	b.n	802adbe <_strtod_l+0x436>
 802b23e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802b242:	e7e9      	b.n	802b218 <_strtod_l+0x890>
 802b244:	460b      	mov	r3, r1
 802b246:	e7e7      	b.n	802b218 <_strtod_l+0x890>
 802b248:	ea53 030a 	orrs.w	r3, r3, sl
 802b24c:	d099      	beq.n	802b182 <_strtod_l+0x7fa>
 802b24e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802b250:	b1c3      	cbz	r3, 802b284 <_strtod_l+0x8fc>
 802b252:	ea13 0f09 	tst.w	r3, r9
 802b256:	d0ee      	beq.n	802b236 <_strtod_l+0x8ae>
 802b258:	9a06      	ldr	r2, [sp, #24]
 802b25a:	4650      	mov	r0, sl
 802b25c:	4659      	mov	r1, fp
 802b25e:	f1b8 0f00 	cmp.w	r8, #0
 802b262:	d013      	beq.n	802b28c <_strtod_l+0x904>
 802b264:	f7ff fb76 	bl	802a954 <sulp>
 802b268:	ee39 7b00 	vadd.f64	d7, d9, d0
 802b26c:	ec5b ab17 	vmov	sl, fp, d7
 802b270:	e7e1      	b.n	802b236 <_strtod_l+0x8ae>
 802b272:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 802b276:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 802b27a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802b27e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802b282:	e7d8      	b.n	802b236 <_strtod_l+0x8ae>
 802b284:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802b286:	ea13 0f0a 	tst.w	r3, sl
 802b28a:	e7e4      	b.n	802b256 <_strtod_l+0x8ce>
 802b28c:	f7ff fb62 	bl	802a954 <sulp>
 802b290:	ee39 0b40 	vsub.f64	d0, d9, d0
 802b294:	eeb5 0b40 	vcmp.f64	d0, #0.0
 802b298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b29c:	ec5b ab10 	vmov	sl, fp, d0
 802b2a0:	d1c9      	bne.n	802b236 <_strtod_l+0x8ae>
 802b2a2:	e615      	b.n	802aed0 <_strtod_l+0x548>
 802b2a4:	4629      	mov	r1, r5
 802b2a6:	4620      	mov	r0, r4
 802b2a8:	f002 f99c 	bl	802d5e4 <__ratio>
 802b2ac:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 802b2b0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 802b2b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b2b8:	d85d      	bhi.n	802b376 <_strtod_l+0x9ee>
 802b2ba:	f1b8 0f00 	cmp.w	r8, #0
 802b2be:	d164      	bne.n	802b38a <_strtod_l+0xa02>
 802b2c0:	f1ba 0f00 	cmp.w	sl, #0
 802b2c4:	d14b      	bne.n	802b35e <_strtod_l+0x9d6>
 802b2c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802b2ca:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 802b2ce:	2b00      	cmp	r3, #0
 802b2d0:	d160      	bne.n	802b394 <_strtod_l+0xa0c>
 802b2d2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 802b2d6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 802b2da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b2de:	d401      	bmi.n	802b2e4 <_strtod_l+0x95c>
 802b2e0:	ee20 8b08 	vmul.f64	d8, d0, d8
 802b2e4:	eeb1 ab48 	vneg.f64	d10, d8
 802b2e8:	486e      	ldr	r0, [pc, #440]	@ (802b4a4 <_strtod_l+0xb1c>)
 802b2ea:	4970      	ldr	r1, [pc, #448]	@ (802b4ac <_strtod_l+0xb24>)
 802b2ec:	ea09 0700 	and.w	r7, r9, r0
 802b2f0:	428f      	cmp	r7, r1
 802b2f2:	ec53 2b1a 	vmov	r2, r3, d10
 802b2f6:	d17d      	bne.n	802b3f4 <_strtod_l+0xa6c>
 802b2f8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 802b2fc:	ec4b ab1c 	vmov	d12, sl, fp
 802b300:	eeb0 0b4c 	vmov.f64	d0, d12
 802b304:	f002 f8a6 	bl	802d454 <__ulp>
 802b308:	4866      	ldr	r0, [pc, #408]	@ (802b4a4 <_strtod_l+0xb1c>)
 802b30a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 802b30e:	ee1c 3a90 	vmov	r3, s25
 802b312:	4a67      	ldr	r2, [pc, #412]	@ (802b4b0 <_strtod_l+0xb28>)
 802b314:	ea03 0100 	and.w	r1, r3, r0
 802b318:	4291      	cmp	r1, r2
 802b31a:	ec5b ab1c 	vmov	sl, fp, d12
 802b31e:	d93c      	bls.n	802b39a <_strtod_l+0xa12>
 802b320:	ee19 2a90 	vmov	r2, s19
 802b324:	4b60      	ldr	r3, [pc, #384]	@ (802b4a8 <_strtod_l+0xb20>)
 802b326:	429a      	cmp	r2, r3
 802b328:	d104      	bne.n	802b334 <_strtod_l+0x9ac>
 802b32a:	ee19 3a10 	vmov	r3, s18
 802b32e:	3301      	adds	r3, #1
 802b330:	f43f ad3a 	beq.w	802ada8 <_strtod_l+0x420>
 802b334:	f8df b170 	ldr.w	fp, [pc, #368]	@ 802b4a8 <_strtod_l+0xb20>
 802b338:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802b33c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802b33e:	9805      	ldr	r0, [sp, #20]
 802b340:	f001 fd54 	bl	802cdec <_Bfree>
 802b344:	9805      	ldr	r0, [sp, #20]
 802b346:	4631      	mov	r1, r6
 802b348:	f001 fd50 	bl	802cdec <_Bfree>
 802b34c:	9805      	ldr	r0, [sp, #20]
 802b34e:	4629      	mov	r1, r5
 802b350:	f001 fd4c 	bl	802cdec <_Bfree>
 802b354:	9805      	ldr	r0, [sp, #20]
 802b356:	4621      	mov	r1, r4
 802b358:	f001 fd48 	bl	802cdec <_Bfree>
 802b35c:	e625      	b.n	802afaa <_strtod_l+0x622>
 802b35e:	f1ba 0f01 	cmp.w	sl, #1
 802b362:	d103      	bne.n	802b36c <_strtod_l+0x9e4>
 802b364:	f1bb 0f00 	cmp.w	fp, #0
 802b368:	f43f adb2 	beq.w	802aed0 <_strtod_l+0x548>
 802b36c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 802b370:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 802b374:	e7b8      	b.n	802b2e8 <_strtod_l+0x960>
 802b376:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 802b37a:	ee20 8b08 	vmul.f64	d8, d0, d8
 802b37e:	f1b8 0f00 	cmp.w	r8, #0
 802b382:	d0af      	beq.n	802b2e4 <_strtod_l+0x95c>
 802b384:	eeb0 ab48 	vmov.f64	d10, d8
 802b388:	e7ae      	b.n	802b2e8 <_strtod_l+0x960>
 802b38a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 802b38e:	eeb0 8b4a 	vmov.f64	d8, d10
 802b392:	e7a9      	b.n	802b2e8 <_strtod_l+0x960>
 802b394:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 802b398:	e7a6      	b.n	802b2e8 <_strtod_l+0x960>
 802b39a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 802b39e:	9b06      	ldr	r3, [sp, #24]
 802b3a0:	46d9      	mov	r9, fp
 802b3a2:	2b00      	cmp	r3, #0
 802b3a4:	d1ca      	bne.n	802b33c <_strtod_l+0x9b4>
 802b3a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802b3aa:	0d1b      	lsrs	r3, r3, #20
 802b3ac:	051b      	lsls	r3, r3, #20
 802b3ae:	429f      	cmp	r7, r3
 802b3b0:	d1c4      	bne.n	802b33c <_strtod_l+0x9b4>
 802b3b2:	ec51 0b18 	vmov	r0, r1, d8
 802b3b6:	f7d5 f9cf 	bl	8000758 <__aeabi_d2lz>
 802b3ba:	f7d5 f937 	bl	800062c <__aeabi_l2d>
 802b3be:	f3cb 0913 	ubfx	r9, fp, #0, #20
 802b3c2:	ec41 0b17 	vmov	d7, r0, r1
 802b3c6:	ea49 090a 	orr.w	r9, r9, sl
 802b3ca:	ea59 0908 	orrs.w	r9, r9, r8
 802b3ce:	ee38 8b47 	vsub.f64	d8, d8, d7
 802b3d2:	d03c      	beq.n	802b44e <_strtod_l+0xac6>
 802b3d4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 802b488 <_strtod_l+0xb00>
 802b3d8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802b3dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b3e0:	f53f aced 	bmi.w	802adbe <_strtod_l+0x436>
 802b3e4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 802b490 <_strtod_l+0xb08>
 802b3e8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802b3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b3f0:	dda4      	ble.n	802b33c <_strtod_l+0x9b4>
 802b3f2:	e4e4      	b.n	802adbe <_strtod_l+0x436>
 802b3f4:	9906      	ldr	r1, [sp, #24]
 802b3f6:	b1e1      	cbz	r1, 802b432 <_strtod_l+0xaaa>
 802b3f8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 802b3fc:	d819      	bhi.n	802b432 <_strtod_l+0xaaa>
 802b3fe:	eeb4 8bcb 	vcmpe.f64	d8, d11
 802b402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b406:	d811      	bhi.n	802b42c <_strtod_l+0xaa4>
 802b408:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 802b40c:	ee18 3a10 	vmov	r3, s16
 802b410:	2b01      	cmp	r3, #1
 802b412:	bf38      	it	cc
 802b414:	2301      	movcc	r3, #1
 802b416:	ee08 3a10 	vmov	s16, r3
 802b41a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 802b41e:	f1b8 0f00 	cmp.w	r8, #0
 802b422:	d111      	bne.n	802b448 <_strtod_l+0xac0>
 802b424:	eeb1 7b48 	vneg.f64	d7, d8
 802b428:	ec53 2b17 	vmov	r2, r3, d7
 802b42c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 802b430:	1bcb      	subs	r3, r1, r7
 802b432:	eeb0 0b49 	vmov.f64	d0, d9
 802b436:	ec43 2b1a 	vmov	d10, r2, r3
 802b43a:	f002 f80b 	bl	802d454 <__ulp>
 802b43e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 802b442:	ec5b ab19 	vmov	sl, fp, d9
 802b446:	e7aa      	b.n	802b39e <_strtod_l+0xa16>
 802b448:	eeb0 7b48 	vmov.f64	d7, d8
 802b44c:	e7ec      	b.n	802b428 <_strtod_l+0xaa0>
 802b44e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 802b498 <_strtod_l+0xb10>
 802b452:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802b456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b45a:	f57f af6f 	bpl.w	802b33c <_strtod_l+0x9b4>
 802b45e:	e4ae      	b.n	802adbe <_strtod_l+0x436>
 802b460:	2300      	movs	r3, #0
 802b462:	9308      	str	r3, [sp, #32]
 802b464:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802b466:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802b468:	6013      	str	r3, [r2, #0]
 802b46a:	f7ff bacc 	b.w	802aa06 <_strtod_l+0x7e>
 802b46e:	2a65      	cmp	r2, #101	@ 0x65
 802b470:	f43f abbc 	beq.w	802abec <_strtod_l+0x264>
 802b474:	2a45      	cmp	r2, #69	@ 0x45
 802b476:	f43f abb9 	beq.w	802abec <_strtod_l+0x264>
 802b47a:	2301      	movs	r3, #1
 802b47c:	9306      	str	r3, [sp, #24]
 802b47e:	f7ff bbf0 	b.w	802ac62 <_strtod_l+0x2da>
 802b482:	bf00      	nop
 802b484:	f3af 8000 	nop.w
 802b488:	94a03595 	.word	0x94a03595
 802b48c:	3fdfffff 	.word	0x3fdfffff
 802b490:	35afe535 	.word	0x35afe535
 802b494:	3fe00000 	.word	0x3fe00000
 802b498:	94a03595 	.word	0x94a03595
 802b49c:	3fcfffff 	.word	0x3fcfffff
 802b4a0:	000fffff 	.word	0x000fffff
 802b4a4:	7ff00000 	.word	0x7ff00000
 802b4a8:	7fefffff 	.word	0x7fefffff
 802b4ac:	7fe00000 	.word	0x7fe00000
 802b4b0:	7c9fffff 	.word	0x7c9fffff

0802b4b4 <strtod>:
 802b4b4:	460a      	mov	r2, r1
 802b4b6:	4601      	mov	r1, r0
 802b4b8:	4802      	ldr	r0, [pc, #8]	@ (802b4c4 <strtod+0x10>)
 802b4ba:	4b03      	ldr	r3, [pc, #12]	@ (802b4c8 <strtod+0x14>)
 802b4bc:	6800      	ldr	r0, [r0, #0]
 802b4be:	f7ff ba63 	b.w	802a988 <_strtod_l>
 802b4c2:	bf00      	nop
 802b4c4:	20000460 	.word	0x20000460
 802b4c8:	200002f4 	.word	0x200002f4

0802b4cc <_strtol_l.constprop.0>:
 802b4cc:	2b24      	cmp	r3, #36	@ 0x24
 802b4ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b4d2:	4686      	mov	lr, r0
 802b4d4:	4690      	mov	r8, r2
 802b4d6:	d801      	bhi.n	802b4dc <_strtol_l.constprop.0+0x10>
 802b4d8:	2b01      	cmp	r3, #1
 802b4da:	d106      	bne.n	802b4ea <_strtol_l.constprop.0+0x1e>
 802b4dc:	f001 f814 	bl	802c508 <__errno>
 802b4e0:	2316      	movs	r3, #22
 802b4e2:	6003      	str	r3, [r0, #0]
 802b4e4:	2000      	movs	r0, #0
 802b4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b4ea:	4834      	ldr	r0, [pc, #208]	@ (802b5bc <_strtol_l.constprop.0+0xf0>)
 802b4ec:	460d      	mov	r5, r1
 802b4ee:	462a      	mov	r2, r5
 802b4f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 802b4f4:	5d06      	ldrb	r6, [r0, r4]
 802b4f6:	f016 0608 	ands.w	r6, r6, #8
 802b4fa:	d1f8      	bne.n	802b4ee <_strtol_l.constprop.0+0x22>
 802b4fc:	2c2d      	cmp	r4, #45	@ 0x2d
 802b4fe:	d12d      	bne.n	802b55c <_strtol_l.constprop.0+0x90>
 802b500:	782c      	ldrb	r4, [r5, #0]
 802b502:	2601      	movs	r6, #1
 802b504:	1c95      	adds	r5, r2, #2
 802b506:	f033 0210 	bics.w	r2, r3, #16
 802b50a:	d109      	bne.n	802b520 <_strtol_l.constprop.0+0x54>
 802b50c:	2c30      	cmp	r4, #48	@ 0x30
 802b50e:	d12a      	bne.n	802b566 <_strtol_l.constprop.0+0x9a>
 802b510:	782a      	ldrb	r2, [r5, #0]
 802b512:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802b516:	2a58      	cmp	r2, #88	@ 0x58
 802b518:	d125      	bne.n	802b566 <_strtol_l.constprop.0+0x9a>
 802b51a:	786c      	ldrb	r4, [r5, #1]
 802b51c:	2310      	movs	r3, #16
 802b51e:	3502      	adds	r5, #2
 802b520:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 802b524:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 802b528:	2200      	movs	r2, #0
 802b52a:	fbbc f9f3 	udiv	r9, ip, r3
 802b52e:	4610      	mov	r0, r2
 802b530:	fb03 ca19 	mls	sl, r3, r9, ip
 802b534:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 802b538:	2f09      	cmp	r7, #9
 802b53a:	d81b      	bhi.n	802b574 <_strtol_l.constprop.0+0xa8>
 802b53c:	463c      	mov	r4, r7
 802b53e:	42a3      	cmp	r3, r4
 802b540:	dd27      	ble.n	802b592 <_strtol_l.constprop.0+0xc6>
 802b542:	1c57      	adds	r7, r2, #1
 802b544:	d007      	beq.n	802b556 <_strtol_l.constprop.0+0x8a>
 802b546:	4581      	cmp	r9, r0
 802b548:	d320      	bcc.n	802b58c <_strtol_l.constprop.0+0xc0>
 802b54a:	d101      	bne.n	802b550 <_strtol_l.constprop.0+0x84>
 802b54c:	45a2      	cmp	sl, r4
 802b54e:	db1d      	blt.n	802b58c <_strtol_l.constprop.0+0xc0>
 802b550:	fb00 4003 	mla	r0, r0, r3, r4
 802b554:	2201      	movs	r2, #1
 802b556:	f815 4b01 	ldrb.w	r4, [r5], #1
 802b55a:	e7eb      	b.n	802b534 <_strtol_l.constprop.0+0x68>
 802b55c:	2c2b      	cmp	r4, #43	@ 0x2b
 802b55e:	bf04      	itt	eq
 802b560:	782c      	ldrbeq	r4, [r5, #0]
 802b562:	1c95      	addeq	r5, r2, #2
 802b564:	e7cf      	b.n	802b506 <_strtol_l.constprop.0+0x3a>
 802b566:	2b00      	cmp	r3, #0
 802b568:	d1da      	bne.n	802b520 <_strtol_l.constprop.0+0x54>
 802b56a:	2c30      	cmp	r4, #48	@ 0x30
 802b56c:	bf0c      	ite	eq
 802b56e:	2308      	moveq	r3, #8
 802b570:	230a      	movne	r3, #10
 802b572:	e7d5      	b.n	802b520 <_strtol_l.constprop.0+0x54>
 802b574:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 802b578:	2f19      	cmp	r7, #25
 802b57a:	d801      	bhi.n	802b580 <_strtol_l.constprop.0+0xb4>
 802b57c:	3c37      	subs	r4, #55	@ 0x37
 802b57e:	e7de      	b.n	802b53e <_strtol_l.constprop.0+0x72>
 802b580:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802b584:	2f19      	cmp	r7, #25
 802b586:	d804      	bhi.n	802b592 <_strtol_l.constprop.0+0xc6>
 802b588:	3c57      	subs	r4, #87	@ 0x57
 802b58a:	e7d8      	b.n	802b53e <_strtol_l.constprop.0+0x72>
 802b58c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802b590:	e7e1      	b.n	802b556 <_strtol_l.constprop.0+0x8a>
 802b592:	1c53      	adds	r3, r2, #1
 802b594:	d108      	bne.n	802b5a8 <_strtol_l.constprop.0+0xdc>
 802b596:	2322      	movs	r3, #34	@ 0x22
 802b598:	f8ce 3000 	str.w	r3, [lr]
 802b59c:	4660      	mov	r0, ip
 802b59e:	f1b8 0f00 	cmp.w	r8, #0
 802b5a2:	d0a0      	beq.n	802b4e6 <_strtol_l.constprop.0+0x1a>
 802b5a4:	1e69      	subs	r1, r5, #1
 802b5a6:	e006      	b.n	802b5b6 <_strtol_l.constprop.0+0xea>
 802b5a8:	b106      	cbz	r6, 802b5ac <_strtol_l.constprop.0+0xe0>
 802b5aa:	4240      	negs	r0, r0
 802b5ac:	f1b8 0f00 	cmp.w	r8, #0
 802b5b0:	d099      	beq.n	802b4e6 <_strtol_l.constprop.0+0x1a>
 802b5b2:	2a00      	cmp	r2, #0
 802b5b4:	d1f6      	bne.n	802b5a4 <_strtol_l.constprop.0+0xd8>
 802b5b6:	f8c8 1000 	str.w	r1, [r8]
 802b5ba:	e794      	b.n	802b4e6 <_strtol_l.constprop.0+0x1a>
 802b5bc:	0803a459 	.word	0x0803a459

0802b5c0 <_strtol_r>:
 802b5c0:	f7ff bf84 	b.w	802b4cc <_strtol_l.constprop.0>

0802b5c4 <strtol>:
 802b5c4:	4613      	mov	r3, r2
 802b5c6:	460a      	mov	r2, r1
 802b5c8:	4601      	mov	r1, r0
 802b5ca:	4802      	ldr	r0, [pc, #8]	@ (802b5d4 <strtol+0x10>)
 802b5cc:	6800      	ldr	r0, [r0, #0]
 802b5ce:	f7ff bf7d 	b.w	802b4cc <_strtol_l.constprop.0>
 802b5d2:	bf00      	nop
 802b5d4:	20000460 	.word	0x20000460

0802b5d8 <std>:
 802b5d8:	2300      	movs	r3, #0
 802b5da:	b510      	push	{r4, lr}
 802b5dc:	4604      	mov	r4, r0
 802b5de:	e9c0 3300 	strd	r3, r3, [r0]
 802b5e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b5e6:	6083      	str	r3, [r0, #8]
 802b5e8:	8181      	strh	r1, [r0, #12]
 802b5ea:	6643      	str	r3, [r0, #100]	@ 0x64
 802b5ec:	81c2      	strh	r2, [r0, #14]
 802b5ee:	6183      	str	r3, [r0, #24]
 802b5f0:	4619      	mov	r1, r3
 802b5f2:	2208      	movs	r2, #8
 802b5f4:	305c      	adds	r0, #92	@ 0x5c
 802b5f6:	f000 fa89 	bl	802bb0c <memset>
 802b5fa:	4b0d      	ldr	r3, [pc, #52]	@ (802b630 <std+0x58>)
 802b5fc:	6263      	str	r3, [r4, #36]	@ 0x24
 802b5fe:	4b0d      	ldr	r3, [pc, #52]	@ (802b634 <std+0x5c>)
 802b600:	62a3      	str	r3, [r4, #40]	@ 0x28
 802b602:	4b0d      	ldr	r3, [pc, #52]	@ (802b638 <std+0x60>)
 802b604:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802b606:	4b0d      	ldr	r3, [pc, #52]	@ (802b63c <std+0x64>)
 802b608:	6323      	str	r3, [r4, #48]	@ 0x30
 802b60a:	4b0d      	ldr	r3, [pc, #52]	@ (802b640 <std+0x68>)
 802b60c:	6224      	str	r4, [r4, #32]
 802b60e:	429c      	cmp	r4, r3
 802b610:	d006      	beq.n	802b620 <std+0x48>
 802b612:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802b616:	4294      	cmp	r4, r2
 802b618:	d002      	beq.n	802b620 <std+0x48>
 802b61a:	33d0      	adds	r3, #208	@ 0xd0
 802b61c:	429c      	cmp	r4, r3
 802b61e:	d105      	bne.n	802b62c <std+0x54>
 802b620:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802b624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b628:	f000 bf98 	b.w	802c55c <__retarget_lock_init_recursive>
 802b62c:	bd10      	pop	{r4, pc}
 802b62e:	bf00      	nop
 802b630:	0802b905 	.word	0x0802b905
 802b634:	0802b92b 	.word	0x0802b92b
 802b638:	0802b963 	.word	0x0802b963
 802b63c:	0802b987 	.word	0x0802b987
 802b640:	2002e6b4 	.word	0x2002e6b4

0802b644 <stdio_exit_handler>:
 802b644:	4a02      	ldr	r2, [pc, #8]	@ (802b650 <stdio_exit_handler+0xc>)
 802b646:	4903      	ldr	r1, [pc, #12]	@ (802b654 <stdio_exit_handler+0x10>)
 802b648:	4803      	ldr	r0, [pc, #12]	@ (802b658 <stdio_exit_handler+0x14>)
 802b64a:	f000 b87b 	b.w	802b744 <_fwalk_sglue>
 802b64e:	bf00      	nop
 802b650:	200002e0 	.word	0x200002e0
 802b654:	0802e775 	.word	0x0802e775
 802b658:	20000464 	.word	0x20000464

0802b65c <cleanup_stdio>:
 802b65c:	6841      	ldr	r1, [r0, #4]
 802b65e:	4b0c      	ldr	r3, [pc, #48]	@ (802b690 <cleanup_stdio+0x34>)
 802b660:	4299      	cmp	r1, r3
 802b662:	b510      	push	{r4, lr}
 802b664:	4604      	mov	r4, r0
 802b666:	d001      	beq.n	802b66c <cleanup_stdio+0x10>
 802b668:	f003 f884 	bl	802e774 <_fflush_r>
 802b66c:	68a1      	ldr	r1, [r4, #8]
 802b66e:	4b09      	ldr	r3, [pc, #36]	@ (802b694 <cleanup_stdio+0x38>)
 802b670:	4299      	cmp	r1, r3
 802b672:	d002      	beq.n	802b67a <cleanup_stdio+0x1e>
 802b674:	4620      	mov	r0, r4
 802b676:	f003 f87d 	bl	802e774 <_fflush_r>
 802b67a:	68e1      	ldr	r1, [r4, #12]
 802b67c:	4b06      	ldr	r3, [pc, #24]	@ (802b698 <cleanup_stdio+0x3c>)
 802b67e:	4299      	cmp	r1, r3
 802b680:	d004      	beq.n	802b68c <cleanup_stdio+0x30>
 802b682:	4620      	mov	r0, r4
 802b684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b688:	f003 b874 	b.w	802e774 <_fflush_r>
 802b68c:	bd10      	pop	{r4, pc}
 802b68e:	bf00      	nop
 802b690:	2002e6b4 	.word	0x2002e6b4
 802b694:	2002e71c 	.word	0x2002e71c
 802b698:	2002e784 	.word	0x2002e784

0802b69c <global_stdio_init.part.0>:
 802b69c:	b510      	push	{r4, lr}
 802b69e:	4b0b      	ldr	r3, [pc, #44]	@ (802b6cc <global_stdio_init.part.0+0x30>)
 802b6a0:	4c0b      	ldr	r4, [pc, #44]	@ (802b6d0 <global_stdio_init.part.0+0x34>)
 802b6a2:	4a0c      	ldr	r2, [pc, #48]	@ (802b6d4 <global_stdio_init.part.0+0x38>)
 802b6a4:	601a      	str	r2, [r3, #0]
 802b6a6:	4620      	mov	r0, r4
 802b6a8:	2200      	movs	r2, #0
 802b6aa:	2104      	movs	r1, #4
 802b6ac:	f7ff ff94 	bl	802b5d8 <std>
 802b6b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802b6b4:	2201      	movs	r2, #1
 802b6b6:	2109      	movs	r1, #9
 802b6b8:	f7ff ff8e 	bl	802b5d8 <std>
 802b6bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802b6c0:	2202      	movs	r2, #2
 802b6c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b6c6:	2112      	movs	r1, #18
 802b6c8:	f7ff bf86 	b.w	802b5d8 <std>
 802b6cc:	2002e7ec 	.word	0x2002e7ec
 802b6d0:	2002e6b4 	.word	0x2002e6b4
 802b6d4:	0802b645 	.word	0x0802b645

0802b6d8 <__sfp_lock_acquire>:
 802b6d8:	4801      	ldr	r0, [pc, #4]	@ (802b6e0 <__sfp_lock_acquire+0x8>)
 802b6da:	f000 bf41 	b.w	802c560 <__retarget_lock_acquire_recursive>
 802b6de:	bf00      	nop
 802b6e0:	2002e81b 	.word	0x2002e81b

0802b6e4 <__sfp_lock_release>:
 802b6e4:	4801      	ldr	r0, [pc, #4]	@ (802b6ec <__sfp_lock_release+0x8>)
 802b6e6:	f000 bf3d 	b.w	802c564 <__retarget_lock_release_recursive>
 802b6ea:	bf00      	nop
 802b6ec:	2002e81b 	.word	0x2002e81b

0802b6f0 <__sinit>:
 802b6f0:	b510      	push	{r4, lr}
 802b6f2:	4604      	mov	r4, r0
 802b6f4:	f7ff fff0 	bl	802b6d8 <__sfp_lock_acquire>
 802b6f8:	6a23      	ldr	r3, [r4, #32]
 802b6fa:	b11b      	cbz	r3, 802b704 <__sinit+0x14>
 802b6fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b700:	f7ff bff0 	b.w	802b6e4 <__sfp_lock_release>
 802b704:	4b04      	ldr	r3, [pc, #16]	@ (802b718 <__sinit+0x28>)
 802b706:	6223      	str	r3, [r4, #32]
 802b708:	4b04      	ldr	r3, [pc, #16]	@ (802b71c <__sinit+0x2c>)
 802b70a:	681b      	ldr	r3, [r3, #0]
 802b70c:	2b00      	cmp	r3, #0
 802b70e:	d1f5      	bne.n	802b6fc <__sinit+0xc>
 802b710:	f7ff ffc4 	bl	802b69c <global_stdio_init.part.0>
 802b714:	e7f2      	b.n	802b6fc <__sinit+0xc>
 802b716:	bf00      	nop
 802b718:	0802b65d 	.word	0x0802b65d
 802b71c:	2002e7ec 	.word	0x2002e7ec

0802b720 <fiprintf>:
 802b720:	b40e      	push	{r1, r2, r3}
 802b722:	b503      	push	{r0, r1, lr}
 802b724:	4601      	mov	r1, r0
 802b726:	ab03      	add	r3, sp, #12
 802b728:	4805      	ldr	r0, [pc, #20]	@ (802b740 <fiprintf+0x20>)
 802b72a:	f853 2b04 	ldr.w	r2, [r3], #4
 802b72e:	6800      	ldr	r0, [r0, #0]
 802b730:	9301      	str	r3, [sp, #4]
 802b732:	f002 fba7 	bl	802de84 <_vfiprintf_r>
 802b736:	b002      	add	sp, #8
 802b738:	f85d eb04 	ldr.w	lr, [sp], #4
 802b73c:	b003      	add	sp, #12
 802b73e:	4770      	bx	lr
 802b740:	20000460 	.word	0x20000460

0802b744 <_fwalk_sglue>:
 802b744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b748:	4607      	mov	r7, r0
 802b74a:	4688      	mov	r8, r1
 802b74c:	4614      	mov	r4, r2
 802b74e:	2600      	movs	r6, #0
 802b750:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802b754:	f1b9 0901 	subs.w	r9, r9, #1
 802b758:	d505      	bpl.n	802b766 <_fwalk_sglue+0x22>
 802b75a:	6824      	ldr	r4, [r4, #0]
 802b75c:	2c00      	cmp	r4, #0
 802b75e:	d1f7      	bne.n	802b750 <_fwalk_sglue+0xc>
 802b760:	4630      	mov	r0, r6
 802b762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b766:	89ab      	ldrh	r3, [r5, #12]
 802b768:	2b01      	cmp	r3, #1
 802b76a:	d907      	bls.n	802b77c <_fwalk_sglue+0x38>
 802b76c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b770:	3301      	adds	r3, #1
 802b772:	d003      	beq.n	802b77c <_fwalk_sglue+0x38>
 802b774:	4629      	mov	r1, r5
 802b776:	4638      	mov	r0, r7
 802b778:	47c0      	blx	r8
 802b77a:	4306      	orrs	r6, r0
 802b77c:	3568      	adds	r5, #104	@ 0x68
 802b77e:	e7e9      	b.n	802b754 <_fwalk_sglue+0x10>

0802b780 <iprintf>:
 802b780:	b40f      	push	{r0, r1, r2, r3}
 802b782:	b507      	push	{r0, r1, r2, lr}
 802b784:	4906      	ldr	r1, [pc, #24]	@ (802b7a0 <iprintf+0x20>)
 802b786:	ab04      	add	r3, sp, #16
 802b788:	6808      	ldr	r0, [r1, #0]
 802b78a:	f853 2b04 	ldr.w	r2, [r3], #4
 802b78e:	6881      	ldr	r1, [r0, #8]
 802b790:	9301      	str	r3, [sp, #4]
 802b792:	f002 fb77 	bl	802de84 <_vfiprintf_r>
 802b796:	b003      	add	sp, #12
 802b798:	f85d eb04 	ldr.w	lr, [sp], #4
 802b79c:	b004      	add	sp, #16
 802b79e:	4770      	bx	lr
 802b7a0:	20000460 	.word	0x20000460

0802b7a4 <putchar>:
 802b7a4:	4b02      	ldr	r3, [pc, #8]	@ (802b7b0 <putchar+0xc>)
 802b7a6:	4601      	mov	r1, r0
 802b7a8:	6818      	ldr	r0, [r3, #0]
 802b7aa:	6882      	ldr	r2, [r0, #8]
 802b7ac:	f003 b86c 	b.w	802e888 <_putc_r>
 802b7b0:	20000460 	.word	0x20000460

0802b7b4 <_puts_r>:
 802b7b4:	6a03      	ldr	r3, [r0, #32]
 802b7b6:	b570      	push	{r4, r5, r6, lr}
 802b7b8:	6884      	ldr	r4, [r0, #8]
 802b7ba:	4605      	mov	r5, r0
 802b7bc:	460e      	mov	r6, r1
 802b7be:	b90b      	cbnz	r3, 802b7c4 <_puts_r+0x10>
 802b7c0:	f7ff ff96 	bl	802b6f0 <__sinit>
 802b7c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b7c6:	07db      	lsls	r3, r3, #31
 802b7c8:	d405      	bmi.n	802b7d6 <_puts_r+0x22>
 802b7ca:	89a3      	ldrh	r3, [r4, #12]
 802b7cc:	0598      	lsls	r0, r3, #22
 802b7ce:	d402      	bmi.n	802b7d6 <_puts_r+0x22>
 802b7d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b7d2:	f000 fec5 	bl	802c560 <__retarget_lock_acquire_recursive>
 802b7d6:	89a3      	ldrh	r3, [r4, #12]
 802b7d8:	0719      	lsls	r1, r3, #28
 802b7da:	d502      	bpl.n	802b7e2 <_puts_r+0x2e>
 802b7dc:	6923      	ldr	r3, [r4, #16]
 802b7de:	2b00      	cmp	r3, #0
 802b7e0:	d135      	bne.n	802b84e <_puts_r+0x9a>
 802b7e2:	4621      	mov	r1, r4
 802b7e4:	4628      	mov	r0, r5
 802b7e6:	f000 f911 	bl	802ba0c <__swsetup_r>
 802b7ea:	b380      	cbz	r0, 802b84e <_puts_r+0x9a>
 802b7ec:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 802b7f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b7f2:	07da      	lsls	r2, r3, #31
 802b7f4:	d405      	bmi.n	802b802 <_puts_r+0x4e>
 802b7f6:	89a3      	ldrh	r3, [r4, #12]
 802b7f8:	059b      	lsls	r3, r3, #22
 802b7fa:	d402      	bmi.n	802b802 <_puts_r+0x4e>
 802b7fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b7fe:	f000 feb1 	bl	802c564 <__retarget_lock_release_recursive>
 802b802:	4628      	mov	r0, r5
 802b804:	bd70      	pop	{r4, r5, r6, pc}
 802b806:	2b00      	cmp	r3, #0
 802b808:	da04      	bge.n	802b814 <_puts_r+0x60>
 802b80a:	69a2      	ldr	r2, [r4, #24]
 802b80c:	429a      	cmp	r2, r3
 802b80e:	dc17      	bgt.n	802b840 <_puts_r+0x8c>
 802b810:	290a      	cmp	r1, #10
 802b812:	d015      	beq.n	802b840 <_puts_r+0x8c>
 802b814:	6823      	ldr	r3, [r4, #0]
 802b816:	1c5a      	adds	r2, r3, #1
 802b818:	6022      	str	r2, [r4, #0]
 802b81a:	7019      	strb	r1, [r3, #0]
 802b81c:	68a3      	ldr	r3, [r4, #8]
 802b81e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802b822:	3b01      	subs	r3, #1
 802b824:	60a3      	str	r3, [r4, #8]
 802b826:	2900      	cmp	r1, #0
 802b828:	d1ed      	bne.n	802b806 <_puts_r+0x52>
 802b82a:	2b00      	cmp	r3, #0
 802b82c:	da11      	bge.n	802b852 <_puts_r+0x9e>
 802b82e:	4622      	mov	r2, r4
 802b830:	210a      	movs	r1, #10
 802b832:	4628      	mov	r0, r5
 802b834:	f000 f8ab 	bl	802b98e <__swbuf_r>
 802b838:	3001      	adds	r0, #1
 802b83a:	d0d7      	beq.n	802b7ec <_puts_r+0x38>
 802b83c:	250a      	movs	r5, #10
 802b83e:	e7d7      	b.n	802b7f0 <_puts_r+0x3c>
 802b840:	4622      	mov	r2, r4
 802b842:	4628      	mov	r0, r5
 802b844:	f000 f8a3 	bl	802b98e <__swbuf_r>
 802b848:	3001      	adds	r0, #1
 802b84a:	d1e7      	bne.n	802b81c <_puts_r+0x68>
 802b84c:	e7ce      	b.n	802b7ec <_puts_r+0x38>
 802b84e:	3e01      	subs	r6, #1
 802b850:	e7e4      	b.n	802b81c <_puts_r+0x68>
 802b852:	6823      	ldr	r3, [r4, #0]
 802b854:	1c5a      	adds	r2, r3, #1
 802b856:	6022      	str	r2, [r4, #0]
 802b858:	220a      	movs	r2, #10
 802b85a:	701a      	strb	r2, [r3, #0]
 802b85c:	e7ee      	b.n	802b83c <_puts_r+0x88>
	...

0802b860 <puts>:
 802b860:	4b02      	ldr	r3, [pc, #8]	@ (802b86c <puts+0xc>)
 802b862:	4601      	mov	r1, r0
 802b864:	6818      	ldr	r0, [r3, #0]
 802b866:	f7ff bfa5 	b.w	802b7b4 <_puts_r>
 802b86a:	bf00      	nop
 802b86c:	20000460 	.word	0x20000460

0802b870 <siprintf>:
 802b870:	b40e      	push	{r1, r2, r3}
 802b872:	b500      	push	{lr}
 802b874:	b09c      	sub	sp, #112	@ 0x70
 802b876:	ab1d      	add	r3, sp, #116	@ 0x74
 802b878:	9002      	str	r0, [sp, #8]
 802b87a:	9006      	str	r0, [sp, #24]
 802b87c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802b880:	4809      	ldr	r0, [pc, #36]	@ (802b8a8 <siprintf+0x38>)
 802b882:	9107      	str	r1, [sp, #28]
 802b884:	9104      	str	r1, [sp, #16]
 802b886:	4909      	ldr	r1, [pc, #36]	@ (802b8ac <siprintf+0x3c>)
 802b888:	f853 2b04 	ldr.w	r2, [r3], #4
 802b88c:	9105      	str	r1, [sp, #20]
 802b88e:	6800      	ldr	r0, [r0, #0]
 802b890:	9301      	str	r3, [sp, #4]
 802b892:	a902      	add	r1, sp, #8
 802b894:	f002 f804 	bl	802d8a0 <_svfiprintf_r>
 802b898:	9b02      	ldr	r3, [sp, #8]
 802b89a:	2200      	movs	r2, #0
 802b89c:	701a      	strb	r2, [r3, #0]
 802b89e:	b01c      	add	sp, #112	@ 0x70
 802b8a0:	f85d eb04 	ldr.w	lr, [sp], #4
 802b8a4:	b003      	add	sp, #12
 802b8a6:	4770      	bx	lr
 802b8a8:	20000460 	.word	0x20000460
 802b8ac:	ffff0208 	.word	0xffff0208

0802b8b0 <siscanf>:
 802b8b0:	b40e      	push	{r1, r2, r3}
 802b8b2:	b530      	push	{r4, r5, lr}
 802b8b4:	b09c      	sub	sp, #112	@ 0x70
 802b8b6:	ac1f      	add	r4, sp, #124	@ 0x7c
 802b8b8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802b8bc:	f854 5b04 	ldr.w	r5, [r4], #4
 802b8c0:	f8ad 2014 	strh.w	r2, [sp, #20]
 802b8c4:	9002      	str	r0, [sp, #8]
 802b8c6:	9006      	str	r0, [sp, #24]
 802b8c8:	f7d4 fd1a 	bl	8000300 <strlen>
 802b8cc:	4b0b      	ldr	r3, [pc, #44]	@ (802b8fc <siscanf+0x4c>)
 802b8ce:	9003      	str	r0, [sp, #12]
 802b8d0:	9007      	str	r0, [sp, #28]
 802b8d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 802b8d4:	480a      	ldr	r0, [pc, #40]	@ (802b900 <siscanf+0x50>)
 802b8d6:	9401      	str	r4, [sp, #4]
 802b8d8:	2300      	movs	r3, #0
 802b8da:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b8dc:	9314      	str	r3, [sp, #80]	@ 0x50
 802b8de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802b8e2:	f8ad 3016 	strh.w	r3, [sp, #22]
 802b8e6:	462a      	mov	r2, r5
 802b8e8:	4623      	mov	r3, r4
 802b8ea:	a902      	add	r1, sp, #8
 802b8ec:	6800      	ldr	r0, [r0, #0]
 802b8ee:	f002 f92b 	bl	802db48 <__ssvfiscanf_r>
 802b8f2:	b01c      	add	sp, #112	@ 0x70
 802b8f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802b8f8:	b003      	add	sp, #12
 802b8fa:	4770      	bx	lr
 802b8fc:	0802b927 	.word	0x0802b927
 802b900:	20000460 	.word	0x20000460

0802b904 <__sread>:
 802b904:	b510      	push	{r4, lr}
 802b906:	460c      	mov	r4, r1
 802b908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b90c:	f000 fdc8 	bl	802c4a0 <_read_r>
 802b910:	2800      	cmp	r0, #0
 802b912:	bfab      	itete	ge
 802b914:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802b916:	89a3      	ldrhlt	r3, [r4, #12]
 802b918:	181b      	addge	r3, r3, r0
 802b91a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802b91e:	bfac      	ite	ge
 802b920:	6563      	strge	r3, [r4, #84]	@ 0x54
 802b922:	81a3      	strhlt	r3, [r4, #12]
 802b924:	bd10      	pop	{r4, pc}

0802b926 <__seofread>:
 802b926:	2000      	movs	r0, #0
 802b928:	4770      	bx	lr

0802b92a <__swrite>:
 802b92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b92e:	461f      	mov	r7, r3
 802b930:	898b      	ldrh	r3, [r1, #12]
 802b932:	05db      	lsls	r3, r3, #23
 802b934:	4605      	mov	r5, r0
 802b936:	460c      	mov	r4, r1
 802b938:	4616      	mov	r6, r2
 802b93a:	d505      	bpl.n	802b948 <__swrite+0x1e>
 802b93c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b940:	2302      	movs	r3, #2
 802b942:	2200      	movs	r2, #0
 802b944:	f000 fd9a 	bl	802c47c <_lseek_r>
 802b948:	89a3      	ldrh	r3, [r4, #12]
 802b94a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b94e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802b952:	81a3      	strh	r3, [r4, #12]
 802b954:	4632      	mov	r2, r6
 802b956:	463b      	mov	r3, r7
 802b958:	4628      	mov	r0, r5
 802b95a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b95e:	f000 bdc1 	b.w	802c4e4 <_write_r>

0802b962 <__sseek>:
 802b962:	b510      	push	{r4, lr}
 802b964:	460c      	mov	r4, r1
 802b966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b96a:	f000 fd87 	bl	802c47c <_lseek_r>
 802b96e:	1c43      	adds	r3, r0, #1
 802b970:	89a3      	ldrh	r3, [r4, #12]
 802b972:	bf15      	itete	ne
 802b974:	6560      	strne	r0, [r4, #84]	@ 0x54
 802b976:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802b97a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802b97e:	81a3      	strheq	r3, [r4, #12]
 802b980:	bf18      	it	ne
 802b982:	81a3      	strhne	r3, [r4, #12]
 802b984:	bd10      	pop	{r4, pc}

0802b986 <__sclose>:
 802b986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b98a:	f000 bd11 	b.w	802c3b0 <_close_r>

0802b98e <__swbuf_r>:
 802b98e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b990:	460e      	mov	r6, r1
 802b992:	4614      	mov	r4, r2
 802b994:	4605      	mov	r5, r0
 802b996:	b118      	cbz	r0, 802b9a0 <__swbuf_r+0x12>
 802b998:	6a03      	ldr	r3, [r0, #32]
 802b99a:	b90b      	cbnz	r3, 802b9a0 <__swbuf_r+0x12>
 802b99c:	f7ff fea8 	bl	802b6f0 <__sinit>
 802b9a0:	69a3      	ldr	r3, [r4, #24]
 802b9a2:	60a3      	str	r3, [r4, #8]
 802b9a4:	89a3      	ldrh	r3, [r4, #12]
 802b9a6:	071a      	lsls	r2, r3, #28
 802b9a8:	d501      	bpl.n	802b9ae <__swbuf_r+0x20>
 802b9aa:	6923      	ldr	r3, [r4, #16]
 802b9ac:	b943      	cbnz	r3, 802b9c0 <__swbuf_r+0x32>
 802b9ae:	4621      	mov	r1, r4
 802b9b0:	4628      	mov	r0, r5
 802b9b2:	f000 f82b 	bl	802ba0c <__swsetup_r>
 802b9b6:	b118      	cbz	r0, 802b9c0 <__swbuf_r+0x32>
 802b9b8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802b9bc:	4638      	mov	r0, r7
 802b9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b9c0:	6823      	ldr	r3, [r4, #0]
 802b9c2:	6922      	ldr	r2, [r4, #16]
 802b9c4:	1a98      	subs	r0, r3, r2
 802b9c6:	6963      	ldr	r3, [r4, #20]
 802b9c8:	b2f6      	uxtb	r6, r6
 802b9ca:	4283      	cmp	r3, r0
 802b9cc:	4637      	mov	r7, r6
 802b9ce:	dc05      	bgt.n	802b9dc <__swbuf_r+0x4e>
 802b9d0:	4621      	mov	r1, r4
 802b9d2:	4628      	mov	r0, r5
 802b9d4:	f002 fece 	bl	802e774 <_fflush_r>
 802b9d8:	2800      	cmp	r0, #0
 802b9da:	d1ed      	bne.n	802b9b8 <__swbuf_r+0x2a>
 802b9dc:	68a3      	ldr	r3, [r4, #8]
 802b9de:	3b01      	subs	r3, #1
 802b9e0:	60a3      	str	r3, [r4, #8]
 802b9e2:	6823      	ldr	r3, [r4, #0]
 802b9e4:	1c5a      	adds	r2, r3, #1
 802b9e6:	6022      	str	r2, [r4, #0]
 802b9e8:	701e      	strb	r6, [r3, #0]
 802b9ea:	6962      	ldr	r2, [r4, #20]
 802b9ec:	1c43      	adds	r3, r0, #1
 802b9ee:	429a      	cmp	r2, r3
 802b9f0:	d004      	beq.n	802b9fc <__swbuf_r+0x6e>
 802b9f2:	89a3      	ldrh	r3, [r4, #12]
 802b9f4:	07db      	lsls	r3, r3, #31
 802b9f6:	d5e1      	bpl.n	802b9bc <__swbuf_r+0x2e>
 802b9f8:	2e0a      	cmp	r6, #10
 802b9fa:	d1df      	bne.n	802b9bc <__swbuf_r+0x2e>
 802b9fc:	4621      	mov	r1, r4
 802b9fe:	4628      	mov	r0, r5
 802ba00:	f002 feb8 	bl	802e774 <_fflush_r>
 802ba04:	2800      	cmp	r0, #0
 802ba06:	d0d9      	beq.n	802b9bc <__swbuf_r+0x2e>
 802ba08:	e7d6      	b.n	802b9b8 <__swbuf_r+0x2a>
	...

0802ba0c <__swsetup_r>:
 802ba0c:	b538      	push	{r3, r4, r5, lr}
 802ba0e:	4b29      	ldr	r3, [pc, #164]	@ (802bab4 <__swsetup_r+0xa8>)
 802ba10:	4605      	mov	r5, r0
 802ba12:	6818      	ldr	r0, [r3, #0]
 802ba14:	460c      	mov	r4, r1
 802ba16:	b118      	cbz	r0, 802ba20 <__swsetup_r+0x14>
 802ba18:	6a03      	ldr	r3, [r0, #32]
 802ba1a:	b90b      	cbnz	r3, 802ba20 <__swsetup_r+0x14>
 802ba1c:	f7ff fe68 	bl	802b6f0 <__sinit>
 802ba20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ba24:	0719      	lsls	r1, r3, #28
 802ba26:	d422      	bmi.n	802ba6e <__swsetup_r+0x62>
 802ba28:	06da      	lsls	r2, r3, #27
 802ba2a:	d407      	bmi.n	802ba3c <__swsetup_r+0x30>
 802ba2c:	2209      	movs	r2, #9
 802ba2e:	602a      	str	r2, [r5, #0]
 802ba30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802ba34:	81a3      	strh	r3, [r4, #12]
 802ba36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802ba3a:	e033      	b.n	802baa4 <__swsetup_r+0x98>
 802ba3c:	0758      	lsls	r0, r3, #29
 802ba3e:	d512      	bpl.n	802ba66 <__swsetup_r+0x5a>
 802ba40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802ba42:	b141      	cbz	r1, 802ba56 <__swsetup_r+0x4a>
 802ba44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802ba48:	4299      	cmp	r1, r3
 802ba4a:	d002      	beq.n	802ba52 <__swsetup_r+0x46>
 802ba4c:	4628      	mov	r0, r5
 802ba4e:	f000 fdb3 	bl	802c5b8 <_free_r>
 802ba52:	2300      	movs	r3, #0
 802ba54:	6363      	str	r3, [r4, #52]	@ 0x34
 802ba56:	89a3      	ldrh	r3, [r4, #12]
 802ba58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802ba5c:	81a3      	strh	r3, [r4, #12]
 802ba5e:	2300      	movs	r3, #0
 802ba60:	6063      	str	r3, [r4, #4]
 802ba62:	6923      	ldr	r3, [r4, #16]
 802ba64:	6023      	str	r3, [r4, #0]
 802ba66:	89a3      	ldrh	r3, [r4, #12]
 802ba68:	f043 0308 	orr.w	r3, r3, #8
 802ba6c:	81a3      	strh	r3, [r4, #12]
 802ba6e:	6923      	ldr	r3, [r4, #16]
 802ba70:	b94b      	cbnz	r3, 802ba86 <__swsetup_r+0x7a>
 802ba72:	89a3      	ldrh	r3, [r4, #12]
 802ba74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802ba78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802ba7c:	d003      	beq.n	802ba86 <__swsetup_r+0x7a>
 802ba7e:	4621      	mov	r1, r4
 802ba80:	4628      	mov	r0, r5
 802ba82:	f002 fec5 	bl	802e810 <__smakebuf_r>
 802ba86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ba8a:	f013 0201 	ands.w	r2, r3, #1
 802ba8e:	d00a      	beq.n	802baa6 <__swsetup_r+0x9a>
 802ba90:	2200      	movs	r2, #0
 802ba92:	60a2      	str	r2, [r4, #8]
 802ba94:	6962      	ldr	r2, [r4, #20]
 802ba96:	4252      	negs	r2, r2
 802ba98:	61a2      	str	r2, [r4, #24]
 802ba9a:	6922      	ldr	r2, [r4, #16]
 802ba9c:	b942      	cbnz	r2, 802bab0 <__swsetup_r+0xa4>
 802ba9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802baa2:	d1c5      	bne.n	802ba30 <__swsetup_r+0x24>
 802baa4:	bd38      	pop	{r3, r4, r5, pc}
 802baa6:	0799      	lsls	r1, r3, #30
 802baa8:	bf58      	it	pl
 802baaa:	6962      	ldrpl	r2, [r4, #20]
 802baac:	60a2      	str	r2, [r4, #8]
 802baae:	e7f4      	b.n	802ba9a <__swsetup_r+0x8e>
 802bab0:	2000      	movs	r0, #0
 802bab2:	e7f7      	b.n	802baa4 <__swsetup_r+0x98>
 802bab4:	20000460 	.word	0x20000460

0802bab8 <memcmp>:
 802bab8:	b510      	push	{r4, lr}
 802baba:	3901      	subs	r1, #1
 802babc:	4402      	add	r2, r0
 802babe:	4290      	cmp	r0, r2
 802bac0:	d101      	bne.n	802bac6 <memcmp+0xe>
 802bac2:	2000      	movs	r0, #0
 802bac4:	e005      	b.n	802bad2 <memcmp+0x1a>
 802bac6:	7803      	ldrb	r3, [r0, #0]
 802bac8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802bacc:	42a3      	cmp	r3, r4
 802bace:	d001      	beq.n	802bad4 <memcmp+0x1c>
 802bad0:	1b18      	subs	r0, r3, r4
 802bad2:	bd10      	pop	{r4, pc}
 802bad4:	3001      	adds	r0, #1
 802bad6:	e7f2      	b.n	802babe <memcmp+0x6>

0802bad8 <memmove>:
 802bad8:	4288      	cmp	r0, r1
 802bada:	b510      	push	{r4, lr}
 802badc:	eb01 0402 	add.w	r4, r1, r2
 802bae0:	d902      	bls.n	802bae8 <memmove+0x10>
 802bae2:	4284      	cmp	r4, r0
 802bae4:	4623      	mov	r3, r4
 802bae6:	d807      	bhi.n	802baf8 <memmove+0x20>
 802bae8:	1e43      	subs	r3, r0, #1
 802baea:	42a1      	cmp	r1, r4
 802baec:	d008      	beq.n	802bb00 <memmove+0x28>
 802baee:	f811 2b01 	ldrb.w	r2, [r1], #1
 802baf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 802baf6:	e7f8      	b.n	802baea <memmove+0x12>
 802baf8:	4402      	add	r2, r0
 802bafa:	4601      	mov	r1, r0
 802bafc:	428a      	cmp	r2, r1
 802bafe:	d100      	bne.n	802bb02 <memmove+0x2a>
 802bb00:	bd10      	pop	{r4, pc}
 802bb02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802bb06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802bb0a:	e7f7      	b.n	802bafc <memmove+0x24>

0802bb0c <memset>:
 802bb0c:	4402      	add	r2, r0
 802bb0e:	4603      	mov	r3, r0
 802bb10:	4293      	cmp	r3, r2
 802bb12:	d100      	bne.n	802bb16 <memset+0xa>
 802bb14:	4770      	bx	lr
 802bb16:	f803 1b01 	strb.w	r1, [r3], #1
 802bb1a:	e7f9      	b.n	802bb10 <memset+0x4>

0802bb1c <strchr>:
 802bb1c:	b2c9      	uxtb	r1, r1
 802bb1e:	4603      	mov	r3, r0
 802bb20:	4618      	mov	r0, r3
 802bb22:	f813 2b01 	ldrb.w	r2, [r3], #1
 802bb26:	b112      	cbz	r2, 802bb2e <strchr+0x12>
 802bb28:	428a      	cmp	r2, r1
 802bb2a:	d1f9      	bne.n	802bb20 <strchr+0x4>
 802bb2c:	4770      	bx	lr
 802bb2e:	2900      	cmp	r1, #0
 802bb30:	bf18      	it	ne
 802bb32:	2000      	movne	r0, #0
 802bb34:	4770      	bx	lr

0802bb36 <strncmp>:
 802bb36:	b510      	push	{r4, lr}
 802bb38:	b16a      	cbz	r2, 802bb56 <strncmp+0x20>
 802bb3a:	3901      	subs	r1, #1
 802bb3c:	1884      	adds	r4, r0, r2
 802bb3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 802bb42:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802bb46:	429a      	cmp	r2, r3
 802bb48:	d103      	bne.n	802bb52 <strncmp+0x1c>
 802bb4a:	42a0      	cmp	r0, r4
 802bb4c:	d001      	beq.n	802bb52 <strncmp+0x1c>
 802bb4e:	2a00      	cmp	r2, #0
 802bb50:	d1f5      	bne.n	802bb3e <strncmp+0x8>
 802bb52:	1ad0      	subs	r0, r2, r3
 802bb54:	bd10      	pop	{r4, pc}
 802bb56:	4610      	mov	r0, r2
 802bb58:	e7fc      	b.n	802bb54 <strncmp+0x1e>

0802bb5a <strrchr>:
 802bb5a:	b538      	push	{r3, r4, r5, lr}
 802bb5c:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 802bb60:	4603      	mov	r3, r0
 802bb62:	d10e      	bne.n	802bb82 <strrchr+0x28>
 802bb64:	4621      	mov	r1, r4
 802bb66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802bb6a:	f7ff bfd7 	b.w	802bb1c <strchr>
 802bb6e:	1c43      	adds	r3, r0, #1
 802bb70:	4605      	mov	r5, r0
 802bb72:	4621      	mov	r1, r4
 802bb74:	4618      	mov	r0, r3
 802bb76:	f7ff ffd1 	bl	802bb1c <strchr>
 802bb7a:	2800      	cmp	r0, #0
 802bb7c:	d1f7      	bne.n	802bb6e <strrchr+0x14>
 802bb7e:	4628      	mov	r0, r5
 802bb80:	bd38      	pop	{r3, r4, r5, pc}
 802bb82:	2500      	movs	r5, #0
 802bb84:	e7f5      	b.n	802bb72 <strrchr+0x18>

0802bb86 <__strtok_r>:
 802bb86:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bb88:	4604      	mov	r4, r0
 802bb8a:	b908      	cbnz	r0, 802bb90 <__strtok_r+0xa>
 802bb8c:	6814      	ldr	r4, [r2, #0]
 802bb8e:	b144      	cbz	r4, 802bba2 <__strtok_r+0x1c>
 802bb90:	4620      	mov	r0, r4
 802bb92:	f814 5b01 	ldrb.w	r5, [r4], #1
 802bb96:	460f      	mov	r7, r1
 802bb98:	f817 6b01 	ldrb.w	r6, [r7], #1
 802bb9c:	b91e      	cbnz	r6, 802bba6 <__strtok_r+0x20>
 802bb9e:	b965      	cbnz	r5, 802bbba <__strtok_r+0x34>
 802bba0:	6015      	str	r5, [r2, #0]
 802bba2:	2000      	movs	r0, #0
 802bba4:	e005      	b.n	802bbb2 <__strtok_r+0x2c>
 802bba6:	42b5      	cmp	r5, r6
 802bba8:	d1f6      	bne.n	802bb98 <__strtok_r+0x12>
 802bbaa:	2b00      	cmp	r3, #0
 802bbac:	d1f0      	bne.n	802bb90 <__strtok_r+0xa>
 802bbae:	6014      	str	r4, [r2, #0]
 802bbb0:	7003      	strb	r3, [r0, #0]
 802bbb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bbb4:	461c      	mov	r4, r3
 802bbb6:	e00c      	b.n	802bbd2 <__strtok_r+0x4c>
 802bbb8:	b915      	cbnz	r5, 802bbc0 <__strtok_r+0x3a>
 802bbba:	f814 3b01 	ldrb.w	r3, [r4], #1
 802bbbe:	460e      	mov	r6, r1
 802bbc0:	f816 5b01 	ldrb.w	r5, [r6], #1
 802bbc4:	42ab      	cmp	r3, r5
 802bbc6:	d1f7      	bne.n	802bbb8 <__strtok_r+0x32>
 802bbc8:	2b00      	cmp	r3, #0
 802bbca:	d0f3      	beq.n	802bbb4 <__strtok_r+0x2e>
 802bbcc:	2300      	movs	r3, #0
 802bbce:	f804 3c01 	strb.w	r3, [r4, #-1]
 802bbd2:	6014      	str	r4, [r2, #0]
 802bbd4:	e7ed      	b.n	802bbb2 <__strtok_r+0x2c>

0802bbd6 <strtok_r>:
 802bbd6:	2301      	movs	r3, #1
 802bbd8:	f7ff bfd5 	b.w	802bb86 <__strtok_r>

0802bbdc <localtime>:
 802bbdc:	b538      	push	{r3, r4, r5, lr}
 802bbde:	4b0b      	ldr	r3, [pc, #44]	@ (802bc0c <localtime+0x30>)
 802bbe0:	681d      	ldr	r5, [r3, #0]
 802bbe2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 802bbe4:	4604      	mov	r4, r0
 802bbe6:	b953      	cbnz	r3, 802bbfe <localtime+0x22>
 802bbe8:	2024      	movs	r0, #36	@ 0x24
 802bbea:	f7fe fd53 	bl	802a694 <malloc>
 802bbee:	4602      	mov	r2, r0
 802bbf0:	6368      	str	r0, [r5, #52]	@ 0x34
 802bbf2:	b920      	cbnz	r0, 802bbfe <localtime+0x22>
 802bbf4:	4b06      	ldr	r3, [pc, #24]	@ (802bc10 <localtime+0x34>)
 802bbf6:	4807      	ldr	r0, [pc, #28]	@ (802bc14 <localtime+0x38>)
 802bbf8:	2132      	movs	r1, #50	@ 0x32
 802bbfa:	f7fe fd0d 	bl	802a618 <__assert_func>
 802bbfe:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 802bc00:	4620      	mov	r0, r4
 802bc02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802bc06:	f000 b807 	b.w	802bc18 <localtime_r>
 802bc0a:	bf00      	nop
 802bc0c:	20000460 	.word	0x20000460
 802bc10:	0803a388 	.word	0x0803a388
 802bc14:	0803a559 	.word	0x0803a559

0802bc18 <localtime_r>:
 802bc18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bc1c:	460c      	mov	r4, r1
 802bc1e:	4680      	mov	r8, r0
 802bc20:	f002 ff0a 	bl	802ea38 <__gettzinfo>
 802bc24:	4621      	mov	r1, r4
 802bc26:	4605      	mov	r5, r0
 802bc28:	4640      	mov	r0, r8
 802bc2a:	f002 ff09 	bl	802ea40 <gmtime_r>
 802bc2e:	6943      	ldr	r3, [r0, #20]
 802bc30:	0799      	lsls	r1, r3, #30
 802bc32:	4604      	mov	r4, r0
 802bc34:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 802bc38:	d106      	bne.n	802bc48 <localtime_r+0x30>
 802bc3a:	2264      	movs	r2, #100	@ 0x64
 802bc3c:	fb97 f3f2 	sdiv	r3, r7, r2
 802bc40:	fb02 7313 	mls	r3, r2, r3, r7
 802bc44:	2b00      	cmp	r3, #0
 802bc46:	d170      	bne.n	802bd2a <localtime_r+0x112>
 802bc48:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802bc4c:	fb97 f3f2 	sdiv	r3, r7, r2
 802bc50:	fb02 7313 	mls	r3, r2, r3, r7
 802bc54:	fab3 f383 	clz	r3, r3
 802bc58:	095b      	lsrs	r3, r3, #5
 802bc5a:	4e64      	ldr	r6, [pc, #400]	@ (802bdec <localtime_r+0x1d4>)
 802bc5c:	2230      	movs	r2, #48	@ 0x30
 802bc5e:	fb02 6603 	mla	r6, r2, r3, r6
 802bc62:	f000 f971 	bl	802bf48 <__tz_lock>
 802bc66:	f000 f97b 	bl	802bf60 <_tzset_unlocked>
 802bc6a:	4b61      	ldr	r3, [pc, #388]	@ (802bdf0 <localtime_r+0x1d8>)
 802bc6c:	681b      	ldr	r3, [r3, #0]
 802bc6e:	2b00      	cmp	r3, #0
 802bc70:	d06a      	beq.n	802bd48 <localtime_r+0x130>
 802bc72:	686b      	ldr	r3, [r5, #4]
 802bc74:	42bb      	cmp	r3, r7
 802bc76:	d15a      	bne.n	802bd2e <localtime_r+0x116>
 802bc78:	682f      	ldr	r7, [r5, #0]
 802bc7a:	e9d8 2300 	ldrd	r2, r3, [r8]
 802bc7e:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 802bc82:	2f00      	cmp	r7, #0
 802bc84:	d15b      	bne.n	802bd3e <localtime_r+0x126>
 802bc86:	4282      	cmp	r2, r0
 802bc88:	eb73 0101 	sbcs.w	r1, r3, r1
 802bc8c:	db5e      	blt.n	802bd4c <localtime_r+0x134>
 802bc8e:	2301      	movs	r3, #1
 802bc90:	6223      	str	r3, [r4, #32]
 802bc92:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802bc94:	6861      	ldr	r1, [r4, #4]
 802bc96:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802bc9a:	fb93 f0f2 	sdiv	r0, r3, r2
 802bc9e:	fb02 3310 	mls	r3, r2, r0, r3
 802bca2:	223c      	movs	r2, #60	@ 0x3c
 802bca4:	fb93 f5f2 	sdiv	r5, r3, r2
 802bca8:	fb02 3215 	mls	r2, r2, r5, r3
 802bcac:	6823      	ldr	r3, [r4, #0]
 802bcae:	1a9b      	subs	r3, r3, r2
 802bcb0:	68a2      	ldr	r2, [r4, #8]
 802bcb2:	6023      	str	r3, [r4, #0]
 802bcb4:	1b49      	subs	r1, r1, r5
 802bcb6:	1a12      	subs	r2, r2, r0
 802bcb8:	2b3b      	cmp	r3, #59	@ 0x3b
 802bcba:	6061      	str	r1, [r4, #4]
 802bcbc:	60a2      	str	r2, [r4, #8]
 802bcbe:	dd51      	ble.n	802bd64 <localtime_r+0x14c>
 802bcc0:	3101      	adds	r1, #1
 802bcc2:	6061      	str	r1, [r4, #4]
 802bcc4:	3b3c      	subs	r3, #60	@ 0x3c
 802bcc6:	6023      	str	r3, [r4, #0]
 802bcc8:	6863      	ldr	r3, [r4, #4]
 802bcca:	2b3b      	cmp	r3, #59	@ 0x3b
 802bccc:	dd50      	ble.n	802bd70 <localtime_r+0x158>
 802bcce:	3201      	adds	r2, #1
 802bcd0:	60a2      	str	r2, [r4, #8]
 802bcd2:	3b3c      	subs	r3, #60	@ 0x3c
 802bcd4:	6063      	str	r3, [r4, #4]
 802bcd6:	68a3      	ldr	r3, [r4, #8]
 802bcd8:	2b17      	cmp	r3, #23
 802bcda:	dd4f      	ble.n	802bd7c <localtime_r+0x164>
 802bcdc:	69e2      	ldr	r2, [r4, #28]
 802bcde:	3201      	adds	r2, #1
 802bce0:	61e2      	str	r2, [r4, #28]
 802bce2:	69a2      	ldr	r2, [r4, #24]
 802bce4:	3201      	adds	r2, #1
 802bce6:	2a07      	cmp	r2, #7
 802bce8:	bfa8      	it	ge
 802bcea:	2200      	movge	r2, #0
 802bcec:	61a2      	str	r2, [r4, #24]
 802bcee:	68e2      	ldr	r2, [r4, #12]
 802bcf0:	3b18      	subs	r3, #24
 802bcf2:	3201      	adds	r2, #1
 802bcf4:	60a3      	str	r3, [r4, #8]
 802bcf6:	6923      	ldr	r3, [r4, #16]
 802bcf8:	60e2      	str	r2, [r4, #12]
 802bcfa:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802bcfe:	428a      	cmp	r2, r1
 802bd00:	dd0e      	ble.n	802bd20 <localtime_r+0x108>
 802bd02:	2b0b      	cmp	r3, #11
 802bd04:	eba2 0201 	sub.w	r2, r2, r1
 802bd08:	60e2      	str	r2, [r4, #12]
 802bd0a:	f103 0201 	add.w	r2, r3, #1
 802bd0e:	bf09      	itett	eq
 802bd10:	6963      	ldreq	r3, [r4, #20]
 802bd12:	6122      	strne	r2, [r4, #16]
 802bd14:	2200      	moveq	r2, #0
 802bd16:	3301      	addeq	r3, #1
 802bd18:	bf02      	ittt	eq
 802bd1a:	6122      	streq	r2, [r4, #16]
 802bd1c:	6163      	streq	r3, [r4, #20]
 802bd1e:	61e2      	streq	r2, [r4, #28]
 802bd20:	f000 f918 	bl	802bf54 <__tz_unlock>
 802bd24:	4620      	mov	r0, r4
 802bd26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bd2a:	2301      	movs	r3, #1
 802bd2c:	e795      	b.n	802bc5a <localtime_r+0x42>
 802bd2e:	4638      	mov	r0, r7
 802bd30:	f000 f860 	bl	802bdf4 <__tzcalc_limits>
 802bd34:	2800      	cmp	r0, #0
 802bd36:	d19f      	bne.n	802bc78 <localtime_r+0x60>
 802bd38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802bd3c:	e004      	b.n	802bd48 <localtime_r+0x130>
 802bd3e:	4282      	cmp	r2, r0
 802bd40:	eb73 0101 	sbcs.w	r1, r3, r1
 802bd44:	da02      	bge.n	802bd4c <localtime_r+0x134>
 802bd46:	2300      	movs	r3, #0
 802bd48:	6223      	str	r3, [r4, #32]
 802bd4a:	e009      	b.n	802bd60 <localtime_r+0x148>
 802bd4c:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 802bd50:	4282      	cmp	r2, r0
 802bd52:	418b      	sbcs	r3, r1
 802bd54:	bfb4      	ite	lt
 802bd56:	2301      	movlt	r3, #1
 802bd58:	2300      	movge	r3, #0
 802bd5a:	6223      	str	r3, [r4, #32]
 802bd5c:	2b00      	cmp	r3, #0
 802bd5e:	d198      	bne.n	802bc92 <localtime_r+0x7a>
 802bd60:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 802bd62:	e797      	b.n	802bc94 <localtime_r+0x7c>
 802bd64:	2b00      	cmp	r3, #0
 802bd66:	daaf      	bge.n	802bcc8 <localtime_r+0xb0>
 802bd68:	3901      	subs	r1, #1
 802bd6a:	6061      	str	r1, [r4, #4]
 802bd6c:	333c      	adds	r3, #60	@ 0x3c
 802bd6e:	e7aa      	b.n	802bcc6 <localtime_r+0xae>
 802bd70:	2b00      	cmp	r3, #0
 802bd72:	dab0      	bge.n	802bcd6 <localtime_r+0xbe>
 802bd74:	3a01      	subs	r2, #1
 802bd76:	60a2      	str	r2, [r4, #8]
 802bd78:	333c      	adds	r3, #60	@ 0x3c
 802bd7a:	e7ab      	b.n	802bcd4 <localtime_r+0xbc>
 802bd7c:	2b00      	cmp	r3, #0
 802bd7e:	dacf      	bge.n	802bd20 <localtime_r+0x108>
 802bd80:	69e2      	ldr	r2, [r4, #28]
 802bd82:	3a01      	subs	r2, #1
 802bd84:	61e2      	str	r2, [r4, #28]
 802bd86:	69a2      	ldr	r2, [r4, #24]
 802bd88:	3a01      	subs	r2, #1
 802bd8a:	bf48      	it	mi
 802bd8c:	2206      	movmi	r2, #6
 802bd8e:	61a2      	str	r2, [r4, #24]
 802bd90:	68e2      	ldr	r2, [r4, #12]
 802bd92:	3318      	adds	r3, #24
 802bd94:	3a01      	subs	r2, #1
 802bd96:	60e2      	str	r2, [r4, #12]
 802bd98:	60a3      	str	r3, [r4, #8]
 802bd9a:	2a00      	cmp	r2, #0
 802bd9c:	d1c0      	bne.n	802bd20 <localtime_r+0x108>
 802bd9e:	6923      	ldr	r3, [r4, #16]
 802bda0:	3b01      	subs	r3, #1
 802bda2:	d405      	bmi.n	802bdb0 <localtime_r+0x198>
 802bda4:	6123      	str	r3, [r4, #16]
 802bda6:	6923      	ldr	r3, [r4, #16]
 802bda8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802bdac:	60e3      	str	r3, [r4, #12]
 802bdae:	e7b7      	b.n	802bd20 <localtime_r+0x108>
 802bdb0:	230b      	movs	r3, #11
 802bdb2:	6123      	str	r3, [r4, #16]
 802bdb4:	6963      	ldr	r3, [r4, #20]
 802bdb6:	1e5a      	subs	r2, r3, #1
 802bdb8:	6162      	str	r2, [r4, #20]
 802bdba:	0792      	lsls	r2, r2, #30
 802bdbc:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 802bdc0:	d105      	bne.n	802bdce <localtime_r+0x1b6>
 802bdc2:	2164      	movs	r1, #100	@ 0x64
 802bdc4:	fb93 f2f1 	sdiv	r2, r3, r1
 802bdc8:	fb01 3212 	mls	r2, r1, r2, r3
 802bdcc:	b962      	cbnz	r2, 802bde8 <localtime_r+0x1d0>
 802bdce:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802bdd2:	fb93 f1f2 	sdiv	r1, r3, r2
 802bdd6:	fb02 3311 	mls	r3, r2, r1, r3
 802bdda:	fab3 f383 	clz	r3, r3
 802bdde:	095b      	lsrs	r3, r3, #5
 802bde0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 802bde4:	61e3      	str	r3, [r4, #28]
 802bde6:	e7de      	b.n	802bda6 <localtime_r+0x18e>
 802bde8:	2301      	movs	r3, #1
 802bdea:	e7f9      	b.n	802bde0 <localtime_r+0x1c8>
 802bdec:	0803a5b4 	.word	0x0803a5b4
 802bdf0:	2002e810 	.word	0x2002e810

0802bdf4 <__tzcalc_limits>:
 802bdf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802bdf8:	4604      	mov	r4, r0
 802bdfa:	f002 fe1d 	bl	802ea38 <__gettzinfo>
 802bdfe:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 802be02:	429c      	cmp	r4, r3
 802be04:	f340 8099 	ble.w	802bf3a <__tzcalc_limits+0x146>
 802be08:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 802be0c:	19e5      	adds	r5, r4, r7
 802be0e:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 802be12:	f240 126d 	movw	r2, #365	@ 0x16d
 802be16:	10ad      	asrs	r5, r5, #2
 802be18:	fb02 5503 	mla	r5, r2, r3, r5
 802be1c:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 802be20:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 802be24:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 802be28:	4f45      	ldr	r7, [pc, #276]	@ (802bf40 <__tzcalc_limits+0x14c>)
 802be2a:	fb93 f3f2 	sdiv	r3, r3, r2
 802be2e:	441d      	add	r5, r3
 802be30:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802be34:	eb04 030c 	add.w	r3, r4, ip
 802be38:	6044      	str	r4, [r0, #4]
 802be3a:	fbb3 f3f2 	udiv	r3, r3, r2
 802be3e:	4601      	mov	r1, r0
 802be40:	441d      	add	r5, r3
 802be42:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 802be46:	7a0b      	ldrb	r3, [r1, #8]
 802be48:	694a      	ldr	r2, [r1, #20]
 802be4a:	2b4a      	cmp	r3, #74	@ 0x4a
 802be4c:	d133      	bne.n	802beb6 <__tzcalc_limits+0xc2>
 802be4e:	07a6      	lsls	r6, r4, #30
 802be50:	eb05 0302 	add.w	r3, r5, r2
 802be54:	d106      	bne.n	802be64 <__tzcalc_limits+0x70>
 802be56:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 802be5a:	fb94 f6fe 	sdiv	r6, r4, lr
 802be5e:	fb0e 4616 	mls	r6, lr, r6, r4
 802be62:	b936      	cbnz	r6, 802be72 <__tzcalc_limits+0x7e>
 802be64:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 802be68:	fb94 f6fe 	sdiv	r6, r4, lr
 802be6c:	fb0e 4616 	mls	r6, lr, r6, r4
 802be70:	b9fe      	cbnz	r6, 802beb2 <__tzcalc_limits+0xbe>
 802be72:	2a3b      	cmp	r2, #59	@ 0x3b
 802be74:	bfd4      	ite	le
 802be76:	2200      	movle	r2, #0
 802be78:	2201      	movgt	r2, #1
 802be7a:	4413      	add	r3, r2
 802be7c:	3b01      	subs	r3, #1
 802be7e:	698a      	ldr	r2, [r1, #24]
 802be80:	17d6      	asrs	r6, r2, #31
 802be82:	fbc3 2607 	smlal	r2, r6, r3, r7
 802be86:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 802be88:	18d2      	adds	r2, r2, r3
 802be8a:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 802be8e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 802be92:	3128      	adds	r1, #40	@ 0x28
 802be94:	458c      	cmp	ip, r1
 802be96:	d1d6      	bne.n	802be46 <__tzcalc_limits+0x52>
 802be98:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 802be9c:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 802bea0:	428c      	cmp	r4, r1
 802bea2:	4193      	sbcs	r3, r2
 802bea4:	bfb4      	ite	lt
 802bea6:	2301      	movlt	r3, #1
 802bea8:	2300      	movge	r3, #0
 802beaa:	6003      	str	r3, [r0, #0]
 802beac:	2001      	movs	r0, #1
 802beae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802beb2:	2200      	movs	r2, #0
 802beb4:	e7e1      	b.n	802be7a <__tzcalc_limits+0x86>
 802beb6:	2b44      	cmp	r3, #68	@ 0x44
 802beb8:	d101      	bne.n	802bebe <__tzcalc_limits+0xca>
 802beba:	18ab      	adds	r3, r5, r2
 802bebc:	e7df      	b.n	802be7e <__tzcalc_limits+0x8a>
 802bebe:	07a3      	lsls	r3, r4, #30
 802bec0:	d105      	bne.n	802bece <__tzcalc_limits+0xda>
 802bec2:	2664      	movs	r6, #100	@ 0x64
 802bec4:	fb94 f3f6 	sdiv	r3, r4, r6
 802bec8:	fb06 4313 	mls	r3, r6, r3, r4
 802becc:	bb7b      	cbnz	r3, 802bf2e <__tzcalc_limits+0x13a>
 802bece:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 802bed2:	fb94 f6f3 	sdiv	r6, r4, r3
 802bed6:	fb03 4616 	mls	r6, r3, r6, r4
 802beda:	fab6 f686 	clz	r6, r6
 802bede:	0976      	lsrs	r6, r6, #5
 802bee0:	f8df e060 	ldr.w	lr, [pc, #96]	@ 802bf44 <__tzcalc_limits+0x150>
 802bee4:	f8d1 900c 	ldr.w	r9, [r1, #12]
 802bee8:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 802beec:	462b      	mov	r3, r5
 802beee:	f04f 0800 	mov.w	r8, #0
 802bef2:	fb0a e606 	mla	r6, sl, r6, lr
 802bef6:	f108 0801 	add.w	r8, r8, #1
 802befa:	45c1      	cmp	r9, r8
 802befc:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 802bf00:	dc17      	bgt.n	802bf32 <__tzcalc_limits+0x13e>
 802bf02:	f103 0804 	add.w	r8, r3, #4
 802bf06:	2607      	movs	r6, #7
 802bf08:	fb98 f6f6 	sdiv	r6, r8, r6
 802bf0c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802bf10:	eba8 0606 	sub.w	r6, r8, r6
 802bf14:	1b92      	subs	r2, r2, r6
 802bf16:	690e      	ldr	r6, [r1, #16]
 802bf18:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 802bf1c:	bf48      	it	mi
 802bf1e:	3207      	addmi	r2, #7
 802bf20:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802bf24:	4432      	add	r2, r6
 802bf26:	4572      	cmp	r2, lr
 802bf28:	da05      	bge.n	802bf36 <__tzcalc_limits+0x142>
 802bf2a:	4413      	add	r3, r2
 802bf2c:	e7a7      	b.n	802be7e <__tzcalc_limits+0x8a>
 802bf2e:	2601      	movs	r6, #1
 802bf30:	e7d6      	b.n	802bee0 <__tzcalc_limits+0xec>
 802bf32:	4473      	add	r3, lr
 802bf34:	e7df      	b.n	802bef6 <__tzcalc_limits+0x102>
 802bf36:	3a07      	subs	r2, #7
 802bf38:	e7f5      	b.n	802bf26 <__tzcalc_limits+0x132>
 802bf3a:	2000      	movs	r0, #0
 802bf3c:	e7b7      	b.n	802beae <__tzcalc_limits+0xba>
 802bf3e:	bf00      	nop
 802bf40:	00015180 	.word	0x00015180
 802bf44:	0803a5b0 	.word	0x0803a5b0

0802bf48 <__tz_lock>:
 802bf48:	4801      	ldr	r0, [pc, #4]	@ (802bf50 <__tz_lock+0x8>)
 802bf4a:	f000 bb08 	b.w	802c55e <__retarget_lock_acquire>
 802bf4e:	bf00      	nop
 802bf50:	2002e818 	.word	0x2002e818

0802bf54 <__tz_unlock>:
 802bf54:	4801      	ldr	r0, [pc, #4]	@ (802bf5c <__tz_unlock+0x8>)
 802bf56:	f000 bb04 	b.w	802c562 <__retarget_lock_release>
 802bf5a:	bf00      	nop
 802bf5c:	2002e818 	.word	0x2002e818

0802bf60 <_tzset_unlocked>:
 802bf60:	4b01      	ldr	r3, [pc, #4]	@ (802bf68 <_tzset_unlocked+0x8>)
 802bf62:	6818      	ldr	r0, [r3, #0]
 802bf64:	f000 b802 	b.w	802bf6c <_tzset_unlocked_r>
 802bf68:	20000460 	.word	0x20000460

0802bf6c <_tzset_unlocked_r>:
 802bf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bf70:	b08d      	sub	sp, #52	@ 0x34
 802bf72:	4607      	mov	r7, r0
 802bf74:	f002 fd60 	bl	802ea38 <__gettzinfo>
 802bf78:	49bc      	ldr	r1, [pc, #752]	@ (802c26c <_tzset_unlocked_r+0x300>)
 802bf7a:	4dbd      	ldr	r5, [pc, #756]	@ (802c270 <_tzset_unlocked_r+0x304>)
 802bf7c:	4604      	mov	r4, r0
 802bf7e:	4638      	mov	r0, r7
 802bf80:	f000 feda 	bl	802cd38 <_getenv_r>
 802bf84:	4606      	mov	r6, r0
 802bf86:	bb10      	cbnz	r0, 802bfce <_tzset_unlocked_r+0x62>
 802bf88:	4bba      	ldr	r3, [pc, #744]	@ (802c274 <_tzset_unlocked_r+0x308>)
 802bf8a:	4abb      	ldr	r2, [pc, #748]	@ (802c278 <_tzset_unlocked_r+0x30c>)
 802bf8c:	6018      	str	r0, [r3, #0]
 802bf8e:	4bbb      	ldr	r3, [pc, #748]	@ (802c27c <_tzset_unlocked_r+0x310>)
 802bf90:	62a0      	str	r0, [r4, #40]	@ 0x28
 802bf92:	6018      	str	r0, [r3, #0]
 802bf94:	4bba      	ldr	r3, [pc, #744]	@ (802c280 <_tzset_unlocked_r+0x314>)
 802bf96:	6520      	str	r0, [r4, #80]	@ 0x50
 802bf98:	e9c3 2200 	strd	r2, r2, [r3]
 802bf9c:	214a      	movs	r1, #74	@ 0x4a
 802bf9e:	2200      	movs	r2, #0
 802bfa0:	2300      	movs	r3, #0
 802bfa2:	e9c4 0003 	strd	r0, r0, [r4, #12]
 802bfa6:	e9c4 0005 	strd	r0, r0, [r4, #20]
 802bfaa:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 802bfae:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 802bfb2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802bfb6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802bfba:	6828      	ldr	r0, [r5, #0]
 802bfbc:	7221      	strb	r1, [r4, #8]
 802bfbe:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802bfc2:	f7fe fb6f 	bl	802a6a4 <free>
 802bfc6:	602e      	str	r6, [r5, #0]
 802bfc8:	b00d      	add	sp, #52	@ 0x34
 802bfca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bfce:	6829      	ldr	r1, [r5, #0]
 802bfd0:	2900      	cmp	r1, #0
 802bfd2:	f040 808e 	bne.w	802c0f2 <_tzset_unlocked_r+0x186>
 802bfd6:	6828      	ldr	r0, [r5, #0]
 802bfd8:	f7fe fb64 	bl	802a6a4 <free>
 802bfdc:	4630      	mov	r0, r6
 802bfde:	f7d4 f98f 	bl	8000300 <strlen>
 802bfe2:	1c41      	adds	r1, r0, #1
 802bfe4:	4638      	mov	r0, r7
 802bfe6:	f7fe fb87 	bl	802a6f8 <_malloc_r>
 802bfea:	6028      	str	r0, [r5, #0]
 802bfec:	2800      	cmp	r0, #0
 802bfee:	f040 8086 	bne.w	802c0fe <_tzset_unlocked_r+0x192>
 802bff2:	4aa2      	ldr	r2, [pc, #648]	@ (802c27c <_tzset_unlocked_r+0x310>)
 802bff4:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 802c280 <_tzset_unlocked_r+0x314>
 802bff8:	f8df a278 	ldr.w	sl, [pc, #632]	@ 802c274 <_tzset_unlocked_r+0x308>
 802bffc:	2300      	movs	r3, #0
 802bffe:	6013      	str	r3, [r2, #0]
 802c000:	4aa0      	ldr	r2, [pc, #640]	@ (802c284 <_tzset_unlocked_r+0x318>)
 802c002:	f8ca 3000 	str.w	r3, [sl]
 802c006:	2000      	movs	r0, #0
 802c008:	2100      	movs	r1, #0
 802c00a:	e9c8 2200 	strd	r2, r2, [r8]
 802c00e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 802c012:	e9c4 3305 	strd	r3, r3, [r4, #20]
 802c016:	e9c4 0108 	strd	r0, r1, [r4, #32]
 802c01a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 802c01e:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 802c022:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 802c026:	224a      	movs	r2, #74	@ 0x4a
 802c028:	7222      	strb	r2, [r4, #8]
 802c02a:	62a3      	str	r3, [r4, #40]	@ 0x28
 802c02c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 802c030:	6523      	str	r3, [r4, #80]	@ 0x50
 802c032:	7833      	ldrb	r3, [r6, #0]
 802c034:	2b3a      	cmp	r3, #58	@ 0x3a
 802c036:	bf08      	it	eq
 802c038:	3601      	addeq	r6, #1
 802c03a:	7833      	ldrb	r3, [r6, #0]
 802c03c:	2b3c      	cmp	r3, #60	@ 0x3c
 802c03e:	d162      	bne.n	802c106 <_tzset_unlocked_r+0x19a>
 802c040:	1c75      	adds	r5, r6, #1
 802c042:	4a91      	ldr	r2, [pc, #580]	@ (802c288 <_tzset_unlocked_r+0x31c>)
 802c044:	4991      	ldr	r1, [pc, #580]	@ (802c28c <_tzset_unlocked_r+0x320>)
 802c046:	ab0a      	add	r3, sp, #40	@ 0x28
 802c048:	4628      	mov	r0, r5
 802c04a:	f7ff fc31 	bl	802b8b0 <siscanf>
 802c04e:	2800      	cmp	r0, #0
 802c050:	ddba      	ble.n	802bfc8 <_tzset_unlocked_r+0x5c>
 802c052:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802c054:	1eda      	subs	r2, r3, #3
 802c056:	2a07      	cmp	r2, #7
 802c058:	d8b6      	bhi.n	802bfc8 <_tzset_unlocked_r+0x5c>
 802c05a:	5ceb      	ldrb	r3, [r5, r3]
 802c05c:	2b3e      	cmp	r3, #62	@ 0x3e
 802c05e:	d1b3      	bne.n	802bfc8 <_tzset_unlocked_r+0x5c>
 802c060:	3602      	adds	r6, #2
 802c062:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802c064:	18f5      	adds	r5, r6, r3
 802c066:	5cf3      	ldrb	r3, [r6, r3]
 802c068:	2b2d      	cmp	r3, #45	@ 0x2d
 802c06a:	d15a      	bne.n	802c122 <_tzset_unlocked_r+0x1b6>
 802c06c:	3501      	adds	r5, #1
 802c06e:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802c072:	2300      	movs	r3, #0
 802c074:	f8ad 301e 	strh.w	r3, [sp, #30]
 802c078:	f8ad 3020 	strh.w	r3, [sp, #32]
 802c07c:	af08      	add	r7, sp, #32
 802c07e:	ab0a      	add	r3, sp, #40	@ 0x28
 802c080:	e9cd 3701 	strd	r3, r7, [sp, #4]
 802c084:	9303      	str	r3, [sp, #12]
 802c086:	f10d 031e 	add.w	r3, sp, #30
 802c08a:	9300      	str	r3, [sp, #0]
 802c08c:	4980      	ldr	r1, [pc, #512]	@ (802c290 <_tzset_unlocked_r+0x324>)
 802c08e:	ab0a      	add	r3, sp, #40	@ 0x28
 802c090:	aa07      	add	r2, sp, #28
 802c092:	4628      	mov	r0, r5
 802c094:	f7ff fc0c 	bl	802b8b0 <siscanf>
 802c098:	2800      	cmp	r0, #0
 802c09a:	dd95      	ble.n	802bfc8 <_tzset_unlocked_r+0x5c>
 802c09c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802c0a0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 802c0a4:	223c      	movs	r2, #60	@ 0x3c
 802c0a6:	fb02 6603 	mla	r6, r2, r3, r6
 802c0aa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802c0ae:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802c0b2:	fb02 6603 	mla	r6, r2, r3, r6
 802c0b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802c0b8:	fb09 f606 	mul.w	r6, r9, r6
 802c0bc:	eb05 0903 	add.w	r9, r5, r3
 802c0c0:	5ceb      	ldrb	r3, [r5, r3]
 802c0c2:	2b3c      	cmp	r3, #60	@ 0x3c
 802c0c4:	f040 80ee 	bne.w	802c2a4 <_tzset_unlocked_r+0x338>
 802c0c8:	f109 0501 	add.w	r5, r9, #1
 802c0cc:	4a71      	ldr	r2, [pc, #452]	@ (802c294 <_tzset_unlocked_r+0x328>)
 802c0ce:	496f      	ldr	r1, [pc, #444]	@ (802c28c <_tzset_unlocked_r+0x320>)
 802c0d0:	ab0a      	add	r3, sp, #40	@ 0x28
 802c0d2:	4628      	mov	r0, r5
 802c0d4:	f7ff fbec 	bl	802b8b0 <siscanf>
 802c0d8:	2800      	cmp	r0, #0
 802c0da:	dc28      	bgt.n	802c12e <_tzset_unlocked_r+0x1c2>
 802c0dc:	f899 3001 	ldrb.w	r3, [r9, #1]
 802c0e0:	2b3e      	cmp	r3, #62	@ 0x3e
 802c0e2:	d124      	bne.n	802c12e <_tzset_unlocked_r+0x1c2>
 802c0e4:	4b68      	ldr	r3, [pc, #416]	@ (802c288 <_tzset_unlocked_r+0x31c>)
 802c0e6:	62a6      	str	r6, [r4, #40]	@ 0x28
 802c0e8:	e9c8 3300 	strd	r3, r3, [r8]
 802c0ec:	f8ca 6000 	str.w	r6, [sl]
 802c0f0:	e76a      	b.n	802bfc8 <_tzset_unlocked_r+0x5c>
 802c0f2:	f7d4 f8a5 	bl	8000240 <strcmp>
 802c0f6:	2800      	cmp	r0, #0
 802c0f8:	f47f af6d 	bne.w	802bfd6 <_tzset_unlocked_r+0x6a>
 802c0fc:	e764      	b.n	802bfc8 <_tzset_unlocked_r+0x5c>
 802c0fe:	4631      	mov	r1, r6
 802c100:	f000 fa31 	bl	802c566 <strcpy>
 802c104:	e775      	b.n	802bff2 <_tzset_unlocked_r+0x86>
 802c106:	4a60      	ldr	r2, [pc, #384]	@ (802c288 <_tzset_unlocked_r+0x31c>)
 802c108:	4963      	ldr	r1, [pc, #396]	@ (802c298 <_tzset_unlocked_r+0x32c>)
 802c10a:	ab0a      	add	r3, sp, #40	@ 0x28
 802c10c:	4630      	mov	r0, r6
 802c10e:	f7ff fbcf 	bl	802b8b0 <siscanf>
 802c112:	2800      	cmp	r0, #0
 802c114:	f77f af58 	ble.w	802bfc8 <_tzset_unlocked_r+0x5c>
 802c118:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802c11a:	3b03      	subs	r3, #3
 802c11c:	2b07      	cmp	r3, #7
 802c11e:	d9a0      	bls.n	802c062 <_tzset_unlocked_r+0xf6>
 802c120:	e752      	b.n	802bfc8 <_tzset_unlocked_r+0x5c>
 802c122:	2b2b      	cmp	r3, #43	@ 0x2b
 802c124:	bf08      	it	eq
 802c126:	3501      	addeq	r5, #1
 802c128:	f04f 0901 	mov.w	r9, #1
 802c12c:	e7a1      	b.n	802c072 <_tzset_unlocked_r+0x106>
 802c12e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802c130:	1eda      	subs	r2, r3, #3
 802c132:	2a07      	cmp	r2, #7
 802c134:	f63f af48 	bhi.w	802bfc8 <_tzset_unlocked_r+0x5c>
 802c138:	5ceb      	ldrb	r3, [r5, r3]
 802c13a:	2b3e      	cmp	r3, #62	@ 0x3e
 802c13c:	f47f af44 	bne.w	802bfc8 <_tzset_unlocked_r+0x5c>
 802c140:	f109 0902 	add.w	r9, r9, #2
 802c144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802c146:	eb09 0503 	add.w	r5, r9, r3
 802c14a:	f819 3003 	ldrb.w	r3, [r9, r3]
 802c14e:	2b2d      	cmp	r3, #45	@ 0x2d
 802c150:	f040 80b7 	bne.w	802c2c2 <_tzset_unlocked_r+0x356>
 802c154:	3501      	adds	r5, #1
 802c156:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802c15a:	2300      	movs	r3, #0
 802c15c:	f8ad 301c 	strh.w	r3, [sp, #28]
 802c160:	f8ad 301e 	strh.w	r3, [sp, #30]
 802c164:	f8ad 3020 	strh.w	r3, [sp, #32]
 802c168:	930a      	str	r3, [sp, #40]	@ 0x28
 802c16a:	ab0a      	add	r3, sp, #40	@ 0x28
 802c16c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 802c170:	9301      	str	r3, [sp, #4]
 802c172:	f10d 031e 	add.w	r3, sp, #30
 802c176:	9300      	str	r3, [sp, #0]
 802c178:	4945      	ldr	r1, [pc, #276]	@ (802c290 <_tzset_unlocked_r+0x324>)
 802c17a:	ab0a      	add	r3, sp, #40	@ 0x28
 802c17c:	aa07      	add	r2, sp, #28
 802c17e:	4628      	mov	r0, r5
 802c180:	f7ff fb96 	bl	802b8b0 <siscanf>
 802c184:	2800      	cmp	r0, #0
 802c186:	f300 80a2 	bgt.w	802c2ce <_tzset_unlocked_r+0x362>
 802c18a:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 802c18e:	9304      	str	r3, [sp, #16]
 802c190:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802c192:	4627      	mov	r7, r4
 802c194:	441d      	add	r5, r3
 802c196:	f04f 0b00 	mov.w	fp, #0
 802c19a:	782b      	ldrb	r3, [r5, #0]
 802c19c:	2b2c      	cmp	r3, #44	@ 0x2c
 802c19e:	bf08      	it	eq
 802c1a0:	3501      	addeq	r5, #1
 802c1a2:	f895 9000 	ldrb.w	r9, [r5]
 802c1a6:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 802c1aa:	f040 80a3 	bne.w	802c2f4 <_tzset_unlocked_r+0x388>
 802c1ae:	ab0a      	add	r3, sp, #40	@ 0x28
 802c1b0:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 802c1b4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802c1b8:	aa09      	add	r2, sp, #36	@ 0x24
 802c1ba:	9200      	str	r2, [sp, #0]
 802c1bc:	4937      	ldr	r1, [pc, #220]	@ (802c29c <_tzset_unlocked_r+0x330>)
 802c1be:	9303      	str	r3, [sp, #12]
 802c1c0:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 802c1c4:	4628      	mov	r0, r5
 802c1c6:	f7ff fb73 	bl	802b8b0 <siscanf>
 802c1ca:	2803      	cmp	r0, #3
 802c1cc:	f47f aefc 	bne.w	802bfc8 <_tzset_unlocked_r+0x5c>
 802c1d0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 802c1d4:	1e4b      	subs	r3, r1, #1
 802c1d6:	2b0b      	cmp	r3, #11
 802c1d8:	f63f aef6 	bhi.w	802bfc8 <_tzset_unlocked_r+0x5c>
 802c1dc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 802c1e0:	1e53      	subs	r3, r2, #1
 802c1e2:	2b04      	cmp	r3, #4
 802c1e4:	f63f aef0 	bhi.w	802bfc8 <_tzset_unlocked_r+0x5c>
 802c1e8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 802c1ec:	2b06      	cmp	r3, #6
 802c1ee:	f63f aeeb 	bhi.w	802bfc8 <_tzset_unlocked_r+0x5c>
 802c1f2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802c1f6:	f887 9008 	strb.w	r9, [r7, #8]
 802c1fa:	617b      	str	r3, [r7, #20]
 802c1fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802c1fe:	eb05 0903 	add.w	r9, r5, r3
 802c202:	2500      	movs	r5, #0
 802c204:	f04f 0302 	mov.w	r3, #2
 802c208:	f8ad 301c 	strh.w	r3, [sp, #28]
 802c20c:	f8ad 501e 	strh.w	r5, [sp, #30]
 802c210:	f8ad 5020 	strh.w	r5, [sp, #32]
 802c214:	950a      	str	r5, [sp, #40]	@ 0x28
 802c216:	f899 3000 	ldrb.w	r3, [r9]
 802c21a:	2b2f      	cmp	r3, #47	@ 0x2f
 802c21c:	f040 8096 	bne.w	802c34c <_tzset_unlocked_r+0x3e0>
 802c220:	ab0a      	add	r3, sp, #40	@ 0x28
 802c222:	aa08      	add	r2, sp, #32
 802c224:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802c228:	f10d 021e 	add.w	r2, sp, #30
 802c22c:	9200      	str	r2, [sp, #0]
 802c22e:	491c      	ldr	r1, [pc, #112]	@ (802c2a0 <_tzset_unlocked_r+0x334>)
 802c230:	9303      	str	r3, [sp, #12]
 802c232:	aa07      	add	r2, sp, #28
 802c234:	4648      	mov	r0, r9
 802c236:	f7ff fb3b 	bl	802b8b0 <siscanf>
 802c23a:	42a8      	cmp	r0, r5
 802c23c:	f300 8086 	bgt.w	802c34c <_tzset_unlocked_r+0x3e0>
 802c240:	214a      	movs	r1, #74	@ 0x4a
 802c242:	2200      	movs	r2, #0
 802c244:	2300      	movs	r3, #0
 802c246:	e9c4 5503 	strd	r5, r5, [r4, #12]
 802c24a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802c24e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802c252:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 802c256:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 802c25a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802c25e:	7221      	strb	r1, [r4, #8]
 802c260:	62a5      	str	r5, [r4, #40]	@ 0x28
 802c262:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802c266:	6525      	str	r5, [r4, #80]	@ 0x50
 802c268:	e6ae      	b.n	802bfc8 <_tzset_unlocked_r+0x5c>
 802c26a:	bf00      	nop
 802c26c:	0803a614 	.word	0x0803a614
 802c270:	2002e7f0 	.word	0x2002e7f0
 802c274:	2002e80c 	.word	0x2002e80c
 802c278:	0803a617 	.word	0x0803a617
 802c27c:	2002e810 	.word	0x2002e810
 802c280:	200002ec 	.word	0x200002ec
 802c284:	0803a387 	.word	0x0803a387
 802c288:	2002e800 	.word	0x2002e800
 802c28c:	0803a61b 	.word	0x0803a61b
 802c290:	0803a650 	.word	0x0803a650
 802c294:	2002e7f4 	.word	0x2002e7f4
 802c298:	0803a62e 	.word	0x0803a62e
 802c29c:	0803a63c 	.word	0x0803a63c
 802c2a0:	0803a64f 	.word	0x0803a64f
 802c2a4:	4a3e      	ldr	r2, [pc, #248]	@ (802c3a0 <_tzset_unlocked_r+0x434>)
 802c2a6:	493f      	ldr	r1, [pc, #252]	@ (802c3a4 <_tzset_unlocked_r+0x438>)
 802c2a8:	ab0a      	add	r3, sp, #40	@ 0x28
 802c2aa:	4648      	mov	r0, r9
 802c2ac:	f7ff fb00 	bl	802b8b0 <siscanf>
 802c2b0:	2800      	cmp	r0, #0
 802c2b2:	f77f af17 	ble.w	802c0e4 <_tzset_unlocked_r+0x178>
 802c2b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802c2b8:	3b03      	subs	r3, #3
 802c2ba:	2b07      	cmp	r3, #7
 802c2bc:	f67f af42 	bls.w	802c144 <_tzset_unlocked_r+0x1d8>
 802c2c0:	e682      	b.n	802bfc8 <_tzset_unlocked_r+0x5c>
 802c2c2:	2b2b      	cmp	r3, #43	@ 0x2b
 802c2c4:	bf08      	it	eq
 802c2c6:	3501      	addeq	r5, #1
 802c2c8:	f04f 0901 	mov.w	r9, #1
 802c2cc:	e745      	b.n	802c15a <_tzset_unlocked_r+0x1ee>
 802c2ce:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802c2d2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802c2d6:	213c      	movs	r1, #60	@ 0x3c
 802c2d8:	fb01 3302 	mla	r3, r1, r2, r3
 802c2dc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802c2e0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802c2e4:	fb01 3302 	mla	r3, r1, r2, r3
 802c2e8:	fb09 f303 	mul.w	r3, r9, r3
 802c2ec:	e74f      	b.n	802c18e <_tzset_unlocked_r+0x222>
 802c2ee:	f04f 0b01 	mov.w	fp, #1
 802c2f2:	e752      	b.n	802c19a <_tzset_unlocked_r+0x22e>
 802c2f4:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 802c2f8:	bf06      	itte	eq
 802c2fa:	3501      	addeq	r5, #1
 802c2fc:	464b      	moveq	r3, r9
 802c2fe:	2344      	movne	r3, #68	@ 0x44
 802c300:	220a      	movs	r2, #10
 802c302:	a90b      	add	r1, sp, #44	@ 0x2c
 802c304:	4628      	mov	r0, r5
 802c306:	9305      	str	r3, [sp, #20]
 802c308:	f001 fa58 	bl	802d7bc <strtoul>
 802c30c:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 802c310:	9b05      	ldr	r3, [sp, #20]
 802c312:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 802c316:	45a9      	cmp	r9, r5
 802c318:	d114      	bne.n	802c344 <_tzset_unlocked_r+0x3d8>
 802c31a:	234d      	movs	r3, #77	@ 0x4d
 802c31c:	f1bb 0f00 	cmp.w	fp, #0
 802c320:	d107      	bne.n	802c332 <_tzset_unlocked_r+0x3c6>
 802c322:	7223      	strb	r3, [r4, #8]
 802c324:	2103      	movs	r1, #3
 802c326:	2302      	movs	r3, #2
 802c328:	e9c4 1303 	strd	r1, r3, [r4, #12]
 802c32c:	f8c4 b014 	str.w	fp, [r4, #20]
 802c330:	e767      	b.n	802c202 <_tzset_unlocked_r+0x296>
 802c332:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 802c336:	220b      	movs	r2, #11
 802c338:	2301      	movs	r3, #1
 802c33a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 802c33e:	2300      	movs	r3, #0
 802c340:	63e3      	str	r3, [r4, #60]	@ 0x3c
 802c342:	e75e      	b.n	802c202 <_tzset_unlocked_r+0x296>
 802c344:	b280      	uxth	r0, r0
 802c346:	723b      	strb	r3, [r7, #8]
 802c348:	6178      	str	r0, [r7, #20]
 802c34a:	e75a      	b.n	802c202 <_tzset_unlocked_r+0x296>
 802c34c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802c350:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802c354:	213c      	movs	r1, #60	@ 0x3c
 802c356:	fb01 3302 	mla	r3, r1, r2, r3
 802c35a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802c35e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802c362:	fb01 3302 	mla	r3, r1, r2, r3
 802c366:	61bb      	str	r3, [r7, #24]
 802c368:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802c36a:	3728      	adds	r7, #40	@ 0x28
 802c36c:	444d      	add	r5, r9
 802c36e:	f1bb 0f00 	cmp.w	fp, #0
 802c372:	d0bc      	beq.n	802c2ee <_tzset_unlocked_r+0x382>
 802c374:	9b04      	ldr	r3, [sp, #16]
 802c376:	6523      	str	r3, [r4, #80]	@ 0x50
 802c378:	4b0b      	ldr	r3, [pc, #44]	@ (802c3a8 <_tzset_unlocked_r+0x43c>)
 802c37a:	f8c8 3000 	str.w	r3, [r8]
 802c37e:	6860      	ldr	r0, [r4, #4]
 802c380:	4b07      	ldr	r3, [pc, #28]	@ (802c3a0 <_tzset_unlocked_r+0x434>)
 802c382:	62a6      	str	r6, [r4, #40]	@ 0x28
 802c384:	f8c8 3004 	str.w	r3, [r8, #4]
 802c388:	f7ff fd34 	bl	802bdf4 <__tzcalc_limits>
 802c38c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 802c38e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802c390:	f8ca 2000 	str.w	r2, [sl]
 802c394:	1a9b      	subs	r3, r3, r2
 802c396:	4a05      	ldr	r2, [pc, #20]	@ (802c3ac <_tzset_unlocked_r+0x440>)
 802c398:	bf18      	it	ne
 802c39a:	2301      	movne	r3, #1
 802c39c:	6013      	str	r3, [r2, #0]
 802c39e:	e613      	b.n	802bfc8 <_tzset_unlocked_r+0x5c>
 802c3a0:	2002e7f4 	.word	0x2002e7f4
 802c3a4:	0803a62e 	.word	0x0803a62e
 802c3a8:	2002e800 	.word	0x2002e800
 802c3ac:	2002e810 	.word	0x2002e810

0802c3b0 <_close_r>:
 802c3b0:	b538      	push	{r3, r4, r5, lr}
 802c3b2:	4d06      	ldr	r5, [pc, #24]	@ (802c3cc <_close_r+0x1c>)
 802c3b4:	2300      	movs	r3, #0
 802c3b6:	4604      	mov	r4, r0
 802c3b8:	4608      	mov	r0, r1
 802c3ba:	602b      	str	r3, [r5, #0]
 802c3bc:	f7ec f83e 	bl	801843c <_close>
 802c3c0:	1c43      	adds	r3, r0, #1
 802c3c2:	d102      	bne.n	802c3ca <_close_r+0x1a>
 802c3c4:	682b      	ldr	r3, [r5, #0]
 802c3c6:	b103      	cbz	r3, 802c3ca <_close_r+0x1a>
 802c3c8:	6023      	str	r3, [r4, #0]
 802c3ca:	bd38      	pop	{r3, r4, r5, pc}
 802c3cc:	2002e814 	.word	0x2002e814

0802c3d0 <_reclaim_reent>:
 802c3d0:	4b29      	ldr	r3, [pc, #164]	@ (802c478 <_reclaim_reent+0xa8>)
 802c3d2:	681b      	ldr	r3, [r3, #0]
 802c3d4:	4283      	cmp	r3, r0
 802c3d6:	b570      	push	{r4, r5, r6, lr}
 802c3d8:	4604      	mov	r4, r0
 802c3da:	d04b      	beq.n	802c474 <_reclaim_reent+0xa4>
 802c3dc:	69c3      	ldr	r3, [r0, #28]
 802c3de:	b1ab      	cbz	r3, 802c40c <_reclaim_reent+0x3c>
 802c3e0:	68db      	ldr	r3, [r3, #12]
 802c3e2:	b16b      	cbz	r3, 802c400 <_reclaim_reent+0x30>
 802c3e4:	2500      	movs	r5, #0
 802c3e6:	69e3      	ldr	r3, [r4, #28]
 802c3e8:	68db      	ldr	r3, [r3, #12]
 802c3ea:	5959      	ldr	r1, [r3, r5]
 802c3ec:	2900      	cmp	r1, #0
 802c3ee:	d13b      	bne.n	802c468 <_reclaim_reent+0x98>
 802c3f0:	3504      	adds	r5, #4
 802c3f2:	2d80      	cmp	r5, #128	@ 0x80
 802c3f4:	d1f7      	bne.n	802c3e6 <_reclaim_reent+0x16>
 802c3f6:	69e3      	ldr	r3, [r4, #28]
 802c3f8:	4620      	mov	r0, r4
 802c3fa:	68d9      	ldr	r1, [r3, #12]
 802c3fc:	f000 f8dc 	bl	802c5b8 <_free_r>
 802c400:	69e3      	ldr	r3, [r4, #28]
 802c402:	6819      	ldr	r1, [r3, #0]
 802c404:	b111      	cbz	r1, 802c40c <_reclaim_reent+0x3c>
 802c406:	4620      	mov	r0, r4
 802c408:	f000 f8d6 	bl	802c5b8 <_free_r>
 802c40c:	6961      	ldr	r1, [r4, #20]
 802c40e:	b111      	cbz	r1, 802c416 <_reclaim_reent+0x46>
 802c410:	4620      	mov	r0, r4
 802c412:	f000 f8d1 	bl	802c5b8 <_free_r>
 802c416:	69e1      	ldr	r1, [r4, #28]
 802c418:	b111      	cbz	r1, 802c420 <_reclaim_reent+0x50>
 802c41a:	4620      	mov	r0, r4
 802c41c:	f000 f8cc 	bl	802c5b8 <_free_r>
 802c420:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802c422:	b111      	cbz	r1, 802c42a <_reclaim_reent+0x5a>
 802c424:	4620      	mov	r0, r4
 802c426:	f000 f8c7 	bl	802c5b8 <_free_r>
 802c42a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802c42c:	b111      	cbz	r1, 802c434 <_reclaim_reent+0x64>
 802c42e:	4620      	mov	r0, r4
 802c430:	f000 f8c2 	bl	802c5b8 <_free_r>
 802c434:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802c436:	b111      	cbz	r1, 802c43e <_reclaim_reent+0x6e>
 802c438:	4620      	mov	r0, r4
 802c43a:	f000 f8bd 	bl	802c5b8 <_free_r>
 802c43e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 802c440:	b111      	cbz	r1, 802c448 <_reclaim_reent+0x78>
 802c442:	4620      	mov	r0, r4
 802c444:	f000 f8b8 	bl	802c5b8 <_free_r>
 802c448:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802c44a:	b111      	cbz	r1, 802c452 <_reclaim_reent+0x82>
 802c44c:	4620      	mov	r0, r4
 802c44e:	f000 f8b3 	bl	802c5b8 <_free_r>
 802c452:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 802c454:	b111      	cbz	r1, 802c45c <_reclaim_reent+0x8c>
 802c456:	4620      	mov	r0, r4
 802c458:	f000 f8ae 	bl	802c5b8 <_free_r>
 802c45c:	6a23      	ldr	r3, [r4, #32]
 802c45e:	b14b      	cbz	r3, 802c474 <_reclaim_reent+0xa4>
 802c460:	4620      	mov	r0, r4
 802c462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802c466:	4718      	bx	r3
 802c468:	680e      	ldr	r6, [r1, #0]
 802c46a:	4620      	mov	r0, r4
 802c46c:	f000 f8a4 	bl	802c5b8 <_free_r>
 802c470:	4631      	mov	r1, r6
 802c472:	e7bb      	b.n	802c3ec <_reclaim_reent+0x1c>
 802c474:	bd70      	pop	{r4, r5, r6, pc}
 802c476:	bf00      	nop
 802c478:	20000460 	.word	0x20000460

0802c47c <_lseek_r>:
 802c47c:	b538      	push	{r3, r4, r5, lr}
 802c47e:	4d07      	ldr	r5, [pc, #28]	@ (802c49c <_lseek_r+0x20>)
 802c480:	4604      	mov	r4, r0
 802c482:	4608      	mov	r0, r1
 802c484:	4611      	mov	r1, r2
 802c486:	2200      	movs	r2, #0
 802c488:	602a      	str	r2, [r5, #0]
 802c48a:	461a      	mov	r2, r3
 802c48c:	f7eb fffd 	bl	801848a <_lseek>
 802c490:	1c43      	adds	r3, r0, #1
 802c492:	d102      	bne.n	802c49a <_lseek_r+0x1e>
 802c494:	682b      	ldr	r3, [r5, #0]
 802c496:	b103      	cbz	r3, 802c49a <_lseek_r+0x1e>
 802c498:	6023      	str	r3, [r4, #0]
 802c49a:	bd38      	pop	{r3, r4, r5, pc}
 802c49c:	2002e814 	.word	0x2002e814

0802c4a0 <_read_r>:
 802c4a0:	b538      	push	{r3, r4, r5, lr}
 802c4a2:	4d07      	ldr	r5, [pc, #28]	@ (802c4c0 <_read_r+0x20>)
 802c4a4:	4604      	mov	r4, r0
 802c4a6:	4608      	mov	r0, r1
 802c4a8:	4611      	mov	r1, r2
 802c4aa:	2200      	movs	r2, #0
 802c4ac:	602a      	str	r2, [r5, #0]
 802c4ae:	461a      	mov	r2, r3
 802c4b0:	f7eb ff8b 	bl	80183ca <_read>
 802c4b4:	1c43      	adds	r3, r0, #1
 802c4b6:	d102      	bne.n	802c4be <_read_r+0x1e>
 802c4b8:	682b      	ldr	r3, [r5, #0]
 802c4ba:	b103      	cbz	r3, 802c4be <_read_r+0x1e>
 802c4bc:	6023      	str	r3, [r4, #0]
 802c4be:	bd38      	pop	{r3, r4, r5, pc}
 802c4c0:	2002e814 	.word	0x2002e814

0802c4c4 <_sbrk_r>:
 802c4c4:	b538      	push	{r3, r4, r5, lr}
 802c4c6:	4d06      	ldr	r5, [pc, #24]	@ (802c4e0 <_sbrk_r+0x1c>)
 802c4c8:	2300      	movs	r3, #0
 802c4ca:	4604      	mov	r4, r0
 802c4cc:	4608      	mov	r0, r1
 802c4ce:	602b      	str	r3, [r5, #0]
 802c4d0:	f7eb ffe8 	bl	80184a4 <_sbrk>
 802c4d4:	1c43      	adds	r3, r0, #1
 802c4d6:	d102      	bne.n	802c4de <_sbrk_r+0x1a>
 802c4d8:	682b      	ldr	r3, [r5, #0]
 802c4da:	b103      	cbz	r3, 802c4de <_sbrk_r+0x1a>
 802c4dc:	6023      	str	r3, [r4, #0]
 802c4de:	bd38      	pop	{r3, r4, r5, pc}
 802c4e0:	2002e814 	.word	0x2002e814

0802c4e4 <_write_r>:
 802c4e4:	b538      	push	{r3, r4, r5, lr}
 802c4e6:	4d07      	ldr	r5, [pc, #28]	@ (802c504 <_write_r+0x20>)
 802c4e8:	4604      	mov	r4, r0
 802c4ea:	4608      	mov	r0, r1
 802c4ec:	4611      	mov	r1, r2
 802c4ee:	2200      	movs	r2, #0
 802c4f0:	602a      	str	r2, [r5, #0]
 802c4f2:	461a      	mov	r2, r3
 802c4f4:	f7eb ff86 	bl	8018404 <_write>
 802c4f8:	1c43      	adds	r3, r0, #1
 802c4fa:	d102      	bne.n	802c502 <_write_r+0x1e>
 802c4fc:	682b      	ldr	r3, [r5, #0]
 802c4fe:	b103      	cbz	r3, 802c502 <_write_r+0x1e>
 802c500:	6023      	str	r3, [r4, #0]
 802c502:	bd38      	pop	{r3, r4, r5, pc}
 802c504:	2002e814 	.word	0x2002e814

0802c508 <__errno>:
 802c508:	4b01      	ldr	r3, [pc, #4]	@ (802c510 <__errno+0x8>)
 802c50a:	6818      	ldr	r0, [r3, #0]
 802c50c:	4770      	bx	lr
 802c50e:	bf00      	nop
 802c510:	20000460 	.word	0x20000460

0802c514 <__libc_init_array>:
 802c514:	b570      	push	{r4, r5, r6, lr}
 802c516:	4d0d      	ldr	r5, [pc, #52]	@ (802c54c <__libc_init_array+0x38>)
 802c518:	4c0d      	ldr	r4, [pc, #52]	@ (802c550 <__libc_init_array+0x3c>)
 802c51a:	1b64      	subs	r4, r4, r5
 802c51c:	10a4      	asrs	r4, r4, #2
 802c51e:	2600      	movs	r6, #0
 802c520:	42a6      	cmp	r6, r4
 802c522:	d109      	bne.n	802c538 <__libc_init_array+0x24>
 802c524:	4d0b      	ldr	r5, [pc, #44]	@ (802c554 <__libc_init_array+0x40>)
 802c526:	4c0c      	ldr	r4, [pc, #48]	@ (802c558 <__libc_init_array+0x44>)
 802c528:	f002 fb72 	bl	802ec10 <_init>
 802c52c:	1b64      	subs	r4, r4, r5
 802c52e:	10a4      	asrs	r4, r4, #2
 802c530:	2600      	movs	r6, #0
 802c532:	42a6      	cmp	r6, r4
 802c534:	d105      	bne.n	802c542 <__libc_init_array+0x2e>
 802c536:	bd70      	pop	{r4, r5, r6, pc}
 802c538:	f855 3b04 	ldr.w	r3, [r5], #4
 802c53c:	4798      	blx	r3
 802c53e:	3601      	adds	r6, #1
 802c540:	e7ee      	b.n	802c520 <__libc_init_array+0xc>
 802c542:	f855 3b04 	ldr.w	r3, [r5], #4
 802c546:	4798      	blx	r3
 802c548:	3601      	adds	r6, #1
 802c54a:	e7f2      	b.n	802c532 <__libc_init_array+0x1e>
 802c54c:	0803a888 	.word	0x0803a888
 802c550:	0803a888 	.word	0x0803a888
 802c554:	0803a888 	.word	0x0803a888
 802c558:	0803a88c 	.word	0x0803a88c

0802c55c <__retarget_lock_init_recursive>:
 802c55c:	4770      	bx	lr

0802c55e <__retarget_lock_acquire>:
 802c55e:	4770      	bx	lr

0802c560 <__retarget_lock_acquire_recursive>:
 802c560:	4770      	bx	lr

0802c562 <__retarget_lock_release>:
 802c562:	4770      	bx	lr

0802c564 <__retarget_lock_release_recursive>:
 802c564:	4770      	bx	lr

0802c566 <strcpy>:
 802c566:	4603      	mov	r3, r0
 802c568:	f811 2b01 	ldrb.w	r2, [r1], #1
 802c56c:	f803 2b01 	strb.w	r2, [r3], #1
 802c570:	2a00      	cmp	r2, #0
 802c572:	d1f9      	bne.n	802c568 <strcpy+0x2>
 802c574:	4770      	bx	lr

0802c576 <memcpy>:
 802c576:	440a      	add	r2, r1
 802c578:	4291      	cmp	r1, r2
 802c57a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 802c57e:	d100      	bne.n	802c582 <memcpy+0xc>
 802c580:	4770      	bx	lr
 802c582:	b510      	push	{r4, lr}
 802c584:	f811 4b01 	ldrb.w	r4, [r1], #1
 802c588:	f803 4f01 	strb.w	r4, [r3, #1]!
 802c58c:	4291      	cmp	r1, r2
 802c58e:	d1f9      	bne.n	802c584 <memcpy+0xe>
 802c590:	bd10      	pop	{r4, pc}
 802c592:	0000      	movs	r0, r0
 802c594:	0000      	movs	r0, r0
	...

0802c598 <nan>:
 802c598:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 802c5a0 <nan+0x8>
 802c59c:	4770      	bx	lr
 802c59e:	bf00      	nop
 802c5a0:	00000000 	.word	0x00000000
 802c5a4:	7ff80000 	.word	0x7ff80000

0802c5a8 <abort>:
 802c5a8:	b508      	push	{r3, lr}
 802c5aa:	2006      	movs	r0, #6
 802c5ac:	f002 fa3c 	bl	802ea28 <raise>
 802c5b0:	2001      	movs	r0, #1
 802c5b2:	f7eb feff 	bl	80183b4 <_exit>
	...

0802c5b8 <_free_r>:
 802c5b8:	b538      	push	{r3, r4, r5, lr}
 802c5ba:	4605      	mov	r5, r0
 802c5bc:	2900      	cmp	r1, #0
 802c5be:	d041      	beq.n	802c644 <_free_r+0x8c>
 802c5c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c5c4:	1f0c      	subs	r4, r1, #4
 802c5c6:	2b00      	cmp	r3, #0
 802c5c8:	bfb8      	it	lt
 802c5ca:	18e4      	addlt	r4, r4, r3
 802c5cc:	f7fe f914 	bl	802a7f8 <__malloc_lock>
 802c5d0:	4a1d      	ldr	r2, [pc, #116]	@ (802c648 <_free_r+0x90>)
 802c5d2:	6813      	ldr	r3, [r2, #0]
 802c5d4:	b933      	cbnz	r3, 802c5e4 <_free_r+0x2c>
 802c5d6:	6063      	str	r3, [r4, #4]
 802c5d8:	6014      	str	r4, [r2, #0]
 802c5da:	4628      	mov	r0, r5
 802c5dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c5e0:	f7fe b910 	b.w	802a804 <__malloc_unlock>
 802c5e4:	42a3      	cmp	r3, r4
 802c5e6:	d908      	bls.n	802c5fa <_free_r+0x42>
 802c5e8:	6820      	ldr	r0, [r4, #0]
 802c5ea:	1821      	adds	r1, r4, r0
 802c5ec:	428b      	cmp	r3, r1
 802c5ee:	bf01      	itttt	eq
 802c5f0:	6819      	ldreq	r1, [r3, #0]
 802c5f2:	685b      	ldreq	r3, [r3, #4]
 802c5f4:	1809      	addeq	r1, r1, r0
 802c5f6:	6021      	streq	r1, [r4, #0]
 802c5f8:	e7ed      	b.n	802c5d6 <_free_r+0x1e>
 802c5fa:	461a      	mov	r2, r3
 802c5fc:	685b      	ldr	r3, [r3, #4]
 802c5fe:	b10b      	cbz	r3, 802c604 <_free_r+0x4c>
 802c600:	42a3      	cmp	r3, r4
 802c602:	d9fa      	bls.n	802c5fa <_free_r+0x42>
 802c604:	6811      	ldr	r1, [r2, #0]
 802c606:	1850      	adds	r0, r2, r1
 802c608:	42a0      	cmp	r0, r4
 802c60a:	d10b      	bne.n	802c624 <_free_r+0x6c>
 802c60c:	6820      	ldr	r0, [r4, #0]
 802c60e:	4401      	add	r1, r0
 802c610:	1850      	adds	r0, r2, r1
 802c612:	4283      	cmp	r3, r0
 802c614:	6011      	str	r1, [r2, #0]
 802c616:	d1e0      	bne.n	802c5da <_free_r+0x22>
 802c618:	6818      	ldr	r0, [r3, #0]
 802c61a:	685b      	ldr	r3, [r3, #4]
 802c61c:	6053      	str	r3, [r2, #4]
 802c61e:	4408      	add	r0, r1
 802c620:	6010      	str	r0, [r2, #0]
 802c622:	e7da      	b.n	802c5da <_free_r+0x22>
 802c624:	d902      	bls.n	802c62c <_free_r+0x74>
 802c626:	230c      	movs	r3, #12
 802c628:	602b      	str	r3, [r5, #0]
 802c62a:	e7d6      	b.n	802c5da <_free_r+0x22>
 802c62c:	6820      	ldr	r0, [r4, #0]
 802c62e:	1821      	adds	r1, r4, r0
 802c630:	428b      	cmp	r3, r1
 802c632:	bf04      	itt	eq
 802c634:	6819      	ldreq	r1, [r3, #0]
 802c636:	685b      	ldreq	r3, [r3, #4]
 802c638:	6063      	str	r3, [r4, #4]
 802c63a:	bf04      	itt	eq
 802c63c:	1809      	addeq	r1, r1, r0
 802c63e:	6021      	streq	r1, [r4, #0]
 802c640:	6054      	str	r4, [r2, #4]
 802c642:	e7ca      	b.n	802c5da <_free_r+0x22>
 802c644:	bd38      	pop	{r3, r4, r5, pc}
 802c646:	bf00      	nop
 802c648:	2002e6b0 	.word	0x2002e6b0

0802c64c <rshift>:
 802c64c:	6903      	ldr	r3, [r0, #16]
 802c64e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 802c652:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802c656:	ea4f 1261 	mov.w	r2, r1, asr #5
 802c65a:	f100 0414 	add.w	r4, r0, #20
 802c65e:	dd45      	ble.n	802c6ec <rshift+0xa0>
 802c660:	f011 011f 	ands.w	r1, r1, #31
 802c664:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 802c668:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 802c66c:	d10c      	bne.n	802c688 <rshift+0x3c>
 802c66e:	f100 0710 	add.w	r7, r0, #16
 802c672:	4629      	mov	r1, r5
 802c674:	42b1      	cmp	r1, r6
 802c676:	d334      	bcc.n	802c6e2 <rshift+0x96>
 802c678:	1a9b      	subs	r3, r3, r2
 802c67a:	009b      	lsls	r3, r3, #2
 802c67c:	1eea      	subs	r2, r5, #3
 802c67e:	4296      	cmp	r6, r2
 802c680:	bf38      	it	cc
 802c682:	2300      	movcc	r3, #0
 802c684:	4423      	add	r3, r4
 802c686:	e015      	b.n	802c6b4 <rshift+0x68>
 802c688:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 802c68c:	f1c1 0820 	rsb	r8, r1, #32
 802c690:	40cf      	lsrs	r7, r1
 802c692:	f105 0e04 	add.w	lr, r5, #4
 802c696:	46a1      	mov	r9, r4
 802c698:	4576      	cmp	r6, lr
 802c69a:	46f4      	mov	ip, lr
 802c69c:	d815      	bhi.n	802c6ca <rshift+0x7e>
 802c69e:	1a9a      	subs	r2, r3, r2
 802c6a0:	0092      	lsls	r2, r2, #2
 802c6a2:	3a04      	subs	r2, #4
 802c6a4:	3501      	adds	r5, #1
 802c6a6:	42ae      	cmp	r6, r5
 802c6a8:	bf38      	it	cc
 802c6aa:	2200      	movcc	r2, #0
 802c6ac:	18a3      	adds	r3, r4, r2
 802c6ae:	50a7      	str	r7, [r4, r2]
 802c6b0:	b107      	cbz	r7, 802c6b4 <rshift+0x68>
 802c6b2:	3304      	adds	r3, #4
 802c6b4:	1b1a      	subs	r2, r3, r4
 802c6b6:	42a3      	cmp	r3, r4
 802c6b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 802c6bc:	bf08      	it	eq
 802c6be:	2300      	moveq	r3, #0
 802c6c0:	6102      	str	r2, [r0, #16]
 802c6c2:	bf08      	it	eq
 802c6c4:	6143      	streq	r3, [r0, #20]
 802c6c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802c6ca:	f8dc c000 	ldr.w	ip, [ip]
 802c6ce:	fa0c fc08 	lsl.w	ip, ip, r8
 802c6d2:	ea4c 0707 	orr.w	r7, ip, r7
 802c6d6:	f849 7b04 	str.w	r7, [r9], #4
 802c6da:	f85e 7b04 	ldr.w	r7, [lr], #4
 802c6de:	40cf      	lsrs	r7, r1
 802c6e0:	e7da      	b.n	802c698 <rshift+0x4c>
 802c6e2:	f851 cb04 	ldr.w	ip, [r1], #4
 802c6e6:	f847 cf04 	str.w	ip, [r7, #4]!
 802c6ea:	e7c3      	b.n	802c674 <rshift+0x28>
 802c6ec:	4623      	mov	r3, r4
 802c6ee:	e7e1      	b.n	802c6b4 <rshift+0x68>

0802c6f0 <__hexdig_fun>:
 802c6f0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 802c6f4:	2b09      	cmp	r3, #9
 802c6f6:	d802      	bhi.n	802c6fe <__hexdig_fun+0xe>
 802c6f8:	3820      	subs	r0, #32
 802c6fa:	b2c0      	uxtb	r0, r0
 802c6fc:	4770      	bx	lr
 802c6fe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 802c702:	2b05      	cmp	r3, #5
 802c704:	d801      	bhi.n	802c70a <__hexdig_fun+0x1a>
 802c706:	3847      	subs	r0, #71	@ 0x47
 802c708:	e7f7      	b.n	802c6fa <__hexdig_fun+0xa>
 802c70a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 802c70e:	2b05      	cmp	r3, #5
 802c710:	d801      	bhi.n	802c716 <__hexdig_fun+0x26>
 802c712:	3827      	subs	r0, #39	@ 0x27
 802c714:	e7f1      	b.n	802c6fa <__hexdig_fun+0xa>
 802c716:	2000      	movs	r0, #0
 802c718:	4770      	bx	lr
	...

0802c71c <__gethex>:
 802c71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c720:	b085      	sub	sp, #20
 802c722:	468a      	mov	sl, r1
 802c724:	9302      	str	r3, [sp, #8]
 802c726:	680b      	ldr	r3, [r1, #0]
 802c728:	9001      	str	r0, [sp, #4]
 802c72a:	4690      	mov	r8, r2
 802c72c:	1c9c      	adds	r4, r3, #2
 802c72e:	46a1      	mov	r9, r4
 802c730:	f814 0b01 	ldrb.w	r0, [r4], #1
 802c734:	2830      	cmp	r0, #48	@ 0x30
 802c736:	d0fa      	beq.n	802c72e <__gethex+0x12>
 802c738:	eba9 0303 	sub.w	r3, r9, r3
 802c73c:	f1a3 0b02 	sub.w	fp, r3, #2
 802c740:	f7ff ffd6 	bl	802c6f0 <__hexdig_fun>
 802c744:	4605      	mov	r5, r0
 802c746:	2800      	cmp	r0, #0
 802c748:	d168      	bne.n	802c81c <__gethex+0x100>
 802c74a:	49a0      	ldr	r1, [pc, #640]	@ (802c9cc <__gethex+0x2b0>)
 802c74c:	2201      	movs	r2, #1
 802c74e:	4648      	mov	r0, r9
 802c750:	f7ff f9f1 	bl	802bb36 <strncmp>
 802c754:	4607      	mov	r7, r0
 802c756:	2800      	cmp	r0, #0
 802c758:	d167      	bne.n	802c82a <__gethex+0x10e>
 802c75a:	f899 0001 	ldrb.w	r0, [r9, #1]
 802c75e:	4626      	mov	r6, r4
 802c760:	f7ff ffc6 	bl	802c6f0 <__hexdig_fun>
 802c764:	2800      	cmp	r0, #0
 802c766:	d062      	beq.n	802c82e <__gethex+0x112>
 802c768:	4623      	mov	r3, r4
 802c76a:	7818      	ldrb	r0, [r3, #0]
 802c76c:	2830      	cmp	r0, #48	@ 0x30
 802c76e:	4699      	mov	r9, r3
 802c770:	f103 0301 	add.w	r3, r3, #1
 802c774:	d0f9      	beq.n	802c76a <__gethex+0x4e>
 802c776:	f7ff ffbb 	bl	802c6f0 <__hexdig_fun>
 802c77a:	fab0 f580 	clz	r5, r0
 802c77e:	096d      	lsrs	r5, r5, #5
 802c780:	f04f 0b01 	mov.w	fp, #1
 802c784:	464a      	mov	r2, r9
 802c786:	4616      	mov	r6, r2
 802c788:	3201      	adds	r2, #1
 802c78a:	7830      	ldrb	r0, [r6, #0]
 802c78c:	f7ff ffb0 	bl	802c6f0 <__hexdig_fun>
 802c790:	2800      	cmp	r0, #0
 802c792:	d1f8      	bne.n	802c786 <__gethex+0x6a>
 802c794:	498d      	ldr	r1, [pc, #564]	@ (802c9cc <__gethex+0x2b0>)
 802c796:	2201      	movs	r2, #1
 802c798:	4630      	mov	r0, r6
 802c79a:	f7ff f9cc 	bl	802bb36 <strncmp>
 802c79e:	2800      	cmp	r0, #0
 802c7a0:	d13f      	bne.n	802c822 <__gethex+0x106>
 802c7a2:	b944      	cbnz	r4, 802c7b6 <__gethex+0x9a>
 802c7a4:	1c74      	adds	r4, r6, #1
 802c7a6:	4622      	mov	r2, r4
 802c7a8:	4616      	mov	r6, r2
 802c7aa:	3201      	adds	r2, #1
 802c7ac:	7830      	ldrb	r0, [r6, #0]
 802c7ae:	f7ff ff9f 	bl	802c6f0 <__hexdig_fun>
 802c7b2:	2800      	cmp	r0, #0
 802c7b4:	d1f8      	bne.n	802c7a8 <__gethex+0x8c>
 802c7b6:	1ba4      	subs	r4, r4, r6
 802c7b8:	00a7      	lsls	r7, r4, #2
 802c7ba:	7833      	ldrb	r3, [r6, #0]
 802c7bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 802c7c0:	2b50      	cmp	r3, #80	@ 0x50
 802c7c2:	d13e      	bne.n	802c842 <__gethex+0x126>
 802c7c4:	7873      	ldrb	r3, [r6, #1]
 802c7c6:	2b2b      	cmp	r3, #43	@ 0x2b
 802c7c8:	d033      	beq.n	802c832 <__gethex+0x116>
 802c7ca:	2b2d      	cmp	r3, #45	@ 0x2d
 802c7cc:	d034      	beq.n	802c838 <__gethex+0x11c>
 802c7ce:	1c71      	adds	r1, r6, #1
 802c7d0:	2400      	movs	r4, #0
 802c7d2:	7808      	ldrb	r0, [r1, #0]
 802c7d4:	f7ff ff8c 	bl	802c6f0 <__hexdig_fun>
 802c7d8:	1e43      	subs	r3, r0, #1
 802c7da:	b2db      	uxtb	r3, r3
 802c7dc:	2b18      	cmp	r3, #24
 802c7de:	d830      	bhi.n	802c842 <__gethex+0x126>
 802c7e0:	f1a0 0210 	sub.w	r2, r0, #16
 802c7e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 802c7e8:	f7ff ff82 	bl	802c6f0 <__hexdig_fun>
 802c7ec:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 802c7f0:	fa5f fc8c 	uxtb.w	ip, ip
 802c7f4:	f1bc 0f18 	cmp.w	ip, #24
 802c7f8:	f04f 030a 	mov.w	r3, #10
 802c7fc:	d91e      	bls.n	802c83c <__gethex+0x120>
 802c7fe:	b104      	cbz	r4, 802c802 <__gethex+0xe6>
 802c800:	4252      	negs	r2, r2
 802c802:	4417      	add	r7, r2
 802c804:	f8ca 1000 	str.w	r1, [sl]
 802c808:	b1ed      	cbz	r5, 802c846 <__gethex+0x12a>
 802c80a:	f1bb 0f00 	cmp.w	fp, #0
 802c80e:	bf0c      	ite	eq
 802c810:	2506      	moveq	r5, #6
 802c812:	2500      	movne	r5, #0
 802c814:	4628      	mov	r0, r5
 802c816:	b005      	add	sp, #20
 802c818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c81c:	2500      	movs	r5, #0
 802c81e:	462c      	mov	r4, r5
 802c820:	e7b0      	b.n	802c784 <__gethex+0x68>
 802c822:	2c00      	cmp	r4, #0
 802c824:	d1c7      	bne.n	802c7b6 <__gethex+0x9a>
 802c826:	4627      	mov	r7, r4
 802c828:	e7c7      	b.n	802c7ba <__gethex+0x9e>
 802c82a:	464e      	mov	r6, r9
 802c82c:	462f      	mov	r7, r5
 802c82e:	2501      	movs	r5, #1
 802c830:	e7c3      	b.n	802c7ba <__gethex+0x9e>
 802c832:	2400      	movs	r4, #0
 802c834:	1cb1      	adds	r1, r6, #2
 802c836:	e7cc      	b.n	802c7d2 <__gethex+0xb6>
 802c838:	2401      	movs	r4, #1
 802c83a:	e7fb      	b.n	802c834 <__gethex+0x118>
 802c83c:	fb03 0002 	mla	r0, r3, r2, r0
 802c840:	e7ce      	b.n	802c7e0 <__gethex+0xc4>
 802c842:	4631      	mov	r1, r6
 802c844:	e7de      	b.n	802c804 <__gethex+0xe8>
 802c846:	eba6 0309 	sub.w	r3, r6, r9
 802c84a:	3b01      	subs	r3, #1
 802c84c:	4629      	mov	r1, r5
 802c84e:	2b07      	cmp	r3, #7
 802c850:	dc0a      	bgt.n	802c868 <__gethex+0x14c>
 802c852:	9801      	ldr	r0, [sp, #4]
 802c854:	f000 fa8a 	bl	802cd6c <_Balloc>
 802c858:	4604      	mov	r4, r0
 802c85a:	b940      	cbnz	r0, 802c86e <__gethex+0x152>
 802c85c:	4b5c      	ldr	r3, [pc, #368]	@ (802c9d0 <__gethex+0x2b4>)
 802c85e:	4602      	mov	r2, r0
 802c860:	21e4      	movs	r1, #228	@ 0xe4
 802c862:	485c      	ldr	r0, [pc, #368]	@ (802c9d4 <__gethex+0x2b8>)
 802c864:	f7fd fed8 	bl	802a618 <__assert_func>
 802c868:	3101      	adds	r1, #1
 802c86a:	105b      	asrs	r3, r3, #1
 802c86c:	e7ef      	b.n	802c84e <__gethex+0x132>
 802c86e:	f100 0a14 	add.w	sl, r0, #20
 802c872:	2300      	movs	r3, #0
 802c874:	4655      	mov	r5, sl
 802c876:	469b      	mov	fp, r3
 802c878:	45b1      	cmp	r9, r6
 802c87a:	d337      	bcc.n	802c8ec <__gethex+0x1d0>
 802c87c:	f845 bb04 	str.w	fp, [r5], #4
 802c880:	eba5 050a 	sub.w	r5, r5, sl
 802c884:	10ad      	asrs	r5, r5, #2
 802c886:	6125      	str	r5, [r4, #16]
 802c888:	4658      	mov	r0, fp
 802c88a:	f000 fb61 	bl	802cf50 <__hi0bits>
 802c88e:	016d      	lsls	r5, r5, #5
 802c890:	f8d8 6000 	ldr.w	r6, [r8]
 802c894:	1a2d      	subs	r5, r5, r0
 802c896:	42b5      	cmp	r5, r6
 802c898:	dd54      	ble.n	802c944 <__gethex+0x228>
 802c89a:	1bad      	subs	r5, r5, r6
 802c89c:	4629      	mov	r1, r5
 802c89e:	4620      	mov	r0, r4
 802c8a0:	f000 fef2 	bl	802d688 <__any_on>
 802c8a4:	4681      	mov	r9, r0
 802c8a6:	b178      	cbz	r0, 802c8c8 <__gethex+0x1ac>
 802c8a8:	1e6b      	subs	r3, r5, #1
 802c8aa:	1159      	asrs	r1, r3, #5
 802c8ac:	f003 021f 	and.w	r2, r3, #31
 802c8b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 802c8b4:	f04f 0901 	mov.w	r9, #1
 802c8b8:	fa09 f202 	lsl.w	r2, r9, r2
 802c8bc:	420a      	tst	r2, r1
 802c8be:	d003      	beq.n	802c8c8 <__gethex+0x1ac>
 802c8c0:	454b      	cmp	r3, r9
 802c8c2:	dc36      	bgt.n	802c932 <__gethex+0x216>
 802c8c4:	f04f 0902 	mov.w	r9, #2
 802c8c8:	4629      	mov	r1, r5
 802c8ca:	4620      	mov	r0, r4
 802c8cc:	f7ff febe 	bl	802c64c <rshift>
 802c8d0:	442f      	add	r7, r5
 802c8d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802c8d6:	42bb      	cmp	r3, r7
 802c8d8:	da42      	bge.n	802c960 <__gethex+0x244>
 802c8da:	9801      	ldr	r0, [sp, #4]
 802c8dc:	4621      	mov	r1, r4
 802c8de:	f000 fa85 	bl	802cdec <_Bfree>
 802c8e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802c8e4:	2300      	movs	r3, #0
 802c8e6:	6013      	str	r3, [r2, #0]
 802c8e8:	25a3      	movs	r5, #163	@ 0xa3
 802c8ea:	e793      	b.n	802c814 <__gethex+0xf8>
 802c8ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 802c8f0:	2a2e      	cmp	r2, #46	@ 0x2e
 802c8f2:	d012      	beq.n	802c91a <__gethex+0x1fe>
 802c8f4:	2b20      	cmp	r3, #32
 802c8f6:	d104      	bne.n	802c902 <__gethex+0x1e6>
 802c8f8:	f845 bb04 	str.w	fp, [r5], #4
 802c8fc:	f04f 0b00 	mov.w	fp, #0
 802c900:	465b      	mov	r3, fp
 802c902:	7830      	ldrb	r0, [r6, #0]
 802c904:	9303      	str	r3, [sp, #12]
 802c906:	f7ff fef3 	bl	802c6f0 <__hexdig_fun>
 802c90a:	9b03      	ldr	r3, [sp, #12]
 802c90c:	f000 000f 	and.w	r0, r0, #15
 802c910:	4098      	lsls	r0, r3
 802c912:	ea4b 0b00 	orr.w	fp, fp, r0
 802c916:	3304      	adds	r3, #4
 802c918:	e7ae      	b.n	802c878 <__gethex+0x15c>
 802c91a:	45b1      	cmp	r9, r6
 802c91c:	d8ea      	bhi.n	802c8f4 <__gethex+0x1d8>
 802c91e:	492b      	ldr	r1, [pc, #172]	@ (802c9cc <__gethex+0x2b0>)
 802c920:	9303      	str	r3, [sp, #12]
 802c922:	2201      	movs	r2, #1
 802c924:	4630      	mov	r0, r6
 802c926:	f7ff f906 	bl	802bb36 <strncmp>
 802c92a:	9b03      	ldr	r3, [sp, #12]
 802c92c:	2800      	cmp	r0, #0
 802c92e:	d1e1      	bne.n	802c8f4 <__gethex+0x1d8>
 802c930:	e7a2      	b.n	802c878 <__gethex+0x15c>
 802c932:	1ea9      	subs	r1, r5, #2
 802c934:	4620      	mov	r0, r4
 802c936:	f000 fea7 	bl	802d688 <__any_on>
 802c93a:	2800      	cmp	r0, #0
 802c93c:	d0c2      	beq.n	802c8c4 <__gethex+0x1a8>
 802c93e:	f04f 0903 	mov.w	r9, #3
 802c942:	e7c1      	b.n	802c8c8 <__gethex+0x1ac>
 802c944:	da09      	bge.n	802c95a <__gethex+0x23e>
 802c946:	1b75      	subs	r5, r6, r5
 802c948:	4621      	mov	r1, r4
 802c94a:	9801      	ldr	r0, [sp, #4]
 802c94c:	462a      	mov	r2, r5
 802c94e:	f000 fc65 	bl	802d21c <__lshift>
 802c952:	1b7f      	subs	r7, r7, r5
 802c954:	4604      	mov	r4, r0
 802c956:	f100 0a14 	add.w	sl, r0, #20
 802c95a:	f04f 0900 	mov.w	r9, #0
 802c95e:	e7b8      	b.n	802c8d2 <__gethex+0x1b6>
 802c960:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802c964:	42bd      	cmp	r5, r7
 802c966:	dd6f      	ble.n	802ca48 <__gethex+0x32c>
 802c968:	1bed      	subs	r5, r5, r7
 802c96a:	42ae      	cmp	r6, r5
 802c96c:	dc34      	bgt.n	802c9d8 <__gethex+0x2bc>
 802c96e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802c972:	2b02      	cmp	r3, #2
 802c974:	d022      	beq.n	802c9bc <__gethex+0x2a0>
 802c976:	2b03      	cmp	r3, #3
 802c978:	d024      	beq.n	802c9c4 <__gethex+0x2a8>
 802c97a:	2b01      	cmp	r3, #1
 802c97c:	d115      	bne.n	802c9aa <__gethex+0x28e>
 802c97e:	42ae      	cmp	r6, r5
 802c980:	d113      	bne.n	802c9aa <__gethex+0x28e>
 802c982:	2e01      	cmp	r6, #1
 802c984:	d10b      	bne.n	802c99e <__gethex+0x282>
 802c986:	9a02      	ldr	r2, [sp, #8]
 802c988:	f8d8 3004 	ldr.w	r3, [r8, #4]
 802c98c:	6013      	str	r3, [r2, #0]
 802c98e:	2301      	movs	r3, #1
 802c990:	6123      	str	r3, [r4, #16]
 802c992:	f8ca 3000 	str.w	r3, [sl]
 802c996:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802c998:	2562      	movs	r5, #98	@ 0x62
 802c99a:	601c      	str	r4, [r3, #0]
 802c99c:	e73a      	b.n	802c814 <__gethex+0xf8>
 802c99e:	1e71      	subs	r1, r6, #1
 802c9a0:	4620      	mov	r0, r4
 802c9a2:	f000 fe71 	bl	802d688 <__any_on>
 802c9a6:	2800      	cmp	r0, #0
 802c9a8:	d1ed      	bne.n	802c986 <__gethex+0x26a>
 802c9aa:	9801      	ldr	r0, [sp, #4]
 802c9ac:	4621      	mov	r1, r4
 802c9ae:	f000 fa1d 	bl	802cdec <_Bfree>
 802c9b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802c9b4:	2300      	movs	r3, #0
 802c9b6:	6013      	str	r3, [r2, #0]
 802c9b8:	2550      	movs	r5, #80	@ 0x50
 802c9ba:	e72b      	b.n	802c814 <__gethex+0xf8>
 802c9bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802c9be:	2b00      	cmp	r3, #0
 802c9c0:	d1f3      	bne.n	802c9aa <__gethex+0x28e>
 802c9c2:	e7e0      	b.n	802c986 <__gethex+0x26a>
 802c9c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802c9c6:	2b00      	cmp	r3, #0
 802c9c8:	d1dd      	bne.n	802c986 <__gethex+0x26a>
 802c9ca:	e7ee      	b.n	802c9aa <__gethex+0x28e>
 802c9cc:	0803a3f7 	.word	0x0803a3f7
 802c9d0:	0803a66a 	.word	0x0803a66a
 802c9d4:	0803a67b 	.word	0x0803a67b
 802c9d8:	1e6f      	subs	r7, r5, #1
 802c9da:	f1b9 0f00 	cmp.w	r9, #0
 802c9de:	d130      	bne.n	802ca42 <__gethex+0x326>
 802c9e0:	b127      	cbz	r7, 802c9ec <__gethex+0x2d0>
 802c9e2:	4639      	mov	r1, r7
 802c9e4:	4620      	mov	r0, r4
 802c9e6:	f000 fe4f 	bl	802d688 <__any_on>
 802c9ea:	4681      	mov	r9, r0
 802c9ec:	117a      	asrs	r2, r7, #5
 802c9ee:	2301      	movs	r3, #1
 802c9f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 802c9f4:	f007 071f 	and.w	r7, r7, #31
 802c9f8:	40bb      	lsls	r3, r7
 802c9fa:	4213      	tst	r3, r2
 802c9fc:	4629      	mov	r1, r5
 802c9fe:	4620      	mov	r0, r4
 802ca00:	bf18      	it	ne
 802ca02:	f049 0902 	orrne.w	r9, r9, #2
 802ca06:	f7ff fe21 	bl	802c64c <rshift>
 802ca0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 802ca0e:	1b76      	subs	r6, r6, r5
 802ca10:	2502      	movs	r5, #2
 802ca12:	f1b9 0f00 	cmp.w	r9, #0
 802ca16:	d047      	beq.n	802caa8 <__gethex+0x38c>
 802ca18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802ca1c:	2b02      	cmp	r3, #2
 802ca1e:	d015      	beq.n	802ca4c <__gethex+0x330>
 802ca20:	2b03      	cmp	r3, #3
 802ca22:	d017      	beq.n	802ca54 <__gethex+0x338>
 802ca24:	2b01      	cmp	r3, #1
 802ca26:	d109      	bne.n	802ca3c <__gethex+0x320>
 802ca28:	f019 0f02 	tst.w	r9, #2
 802ca2c:	d006      	beq.n	802ca3c <__gethex+0x320>
 802ca2e:	f8da 3000 	ldr.w	r3, [sl]
 802ca32:	ea49 0903 	orr.w	r9, r9, r3
 802ca36:	f019 0f01 	tst.w	r9, #1
 802ca3a:	d10e      	bne.n	802ca5a <__gethex+0x33e>
 802ca3c:	f045 0510 	orr.w	r5, r5, #16
 802ca40:	e032      	b.n	802caa8 <__gethex+0x38c>
 802ca42:	f04f 0901 	mov.w	r9, #1
 802ca46:	e7d1      	b.n	802c9ec <__gethex+0x2d0>
 802ca48:	2501      	movs	r5, #1
 802ca4a:	e7e2      	b.n	802ca12 <__gethex+0x2f6>
 802ca4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ca4e:	f1c3 0301 	rsb	r3, r3, #1
 802ca52:	930f      	str	r3, [sp, #60]	@ 0x3c
 802ca54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ca56:	2b00      	cmp	r3, #0
 802ca58:	d0f0      	beq.n	802ca3c <__gethex+0x320>
 802ca5a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802ca5e:	f104 0314 	add.w	r3, r4, #20
 802ca62:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 802ca66:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 802ca6a:	f04f 0c00 	mov.w	ip, #0
 802ca6e:	4618      	mov	r0, r3
 802ca70:	f853 2b04 	ldr.w	r2, [r3], #4
 802ca74:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 802ca78:	d01b      	beq.n	802cab2 <__gethex+0x396>
 802ca7a:	3201      	adds	r2, #1
 802ca7c:	6002      	str	r2, [r0, #0]
 802ca7e:	2d02      	cmp	r5, #2
 802ca80:	f104 0314 	add.w	r3, r4, #20
 802ca84:	d13c      	bne.n	802cb00 <__gethex+0x3e4>
 802ca86:	f8d8 2000 	ldr.w	r2, [r8]
 802ca8a:	3a01      	subs	r2, #1
 802ca8c:	42b2      	cmp	r2, r6
 802ca8e:	d109      	bne.n	802caa4 <__gethex+0x388>
 802ca90:	1171      	asrs	r1, r6, #5
 802ca92:	2201      	movs	r2, #1
 802ca94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802ca98:	f006 061f 	and.w	r6, r6, #31
 802ca9c:	fa02 f606 	lsl.w	r6, r2, r6
 802caa0:	421e      	tst	r6, r3
 802caa2:	d13a      	bne.n	802cb1a <__gethex+0x3fe>
 802caa4:	f045 0520 	orr.w	r5, r5, #32
 802caa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802caaa:	601c      	str	r4, [r3, #0]
 802caac:	9b02      	ldr	r3, [sp, #8]
 802caae:	601f      	str	r7, [r3, #0]
 802cab0:	e6b0      	b.n	802c814 <__gethex+0xf8>
 802cab2:	4299      	cmp	r1, r3
 802cab4:	f843 cc04 	str.w	ip, [r3, #-4]
 802cab8:	d8d9      	bhi.n	802ca6e <__gethex+0x352>
 802caba:	68a3      	ldr	r3, [r4, #8]
 802cabc:	459b      	cmp	fp, r3
 802cabe:	db17      	blt.n	802caf0 <__gethex+0x3d4>
 802cac0:	6861      	ldr	r1, [r4, #4]
 802cac2:	9801      	ldr	r0, [sp, #4]
 802cac4:	3101      	adds	r1, #1
 802cac6:	f000 f951 	bl	802cd6c <_Balloc>
 802caca:	4681      	mov	r9, r0
 802cacc:	b918      	cbnz	r0, 802cad6 <__gethex+0x3ba>
 802cace:	4b1a      	ldr	r3, [pc, #104]	@ (802cb38 <__gethex+0x41c>)
 802cad0:	4602      	mov	r2, r0
 802cad2:	2184      	movs	r1, #132	@ 0x84
 802cad4:	e6c5      	b.n	802c862 <__gethex+0x146>
 802cad6:	6922      	ldr	r2, [r4, #16]
 802cad8:	3202      	adds	r2, #2
 802cada:	f104 010c 	add.w	r1, r4, #12
 802cade:	0092      	lsls	r2, r2, #2
 802cae0:	300c      	adds	r0, #12
 802cae2:	f7ff fd48 	bl	802c576 <memcpy>
 802cae6:	4621      	mov	r1, r4
 802cae8:	9801      	ldr	r0, [sp, #4]
 802caea:	f000 f97f 	bl	802cdec <_Bfree>
 802caee:	464c      	mov	r4, r9
 802caf0:	6923      	ldr	r3, [r4, #16]
 802caf2:	1c5a      	adds	r2, r3, #1
 802caf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802caf8:	6122      	str	r2, [r4, #16]
 802cafa:	2201      	movs	r2, #1
 802cafc:	615a      	str	r2, [r3, #20]
 802cafe:	e7be      	b.n	802ca7e <__gethex+0x362>
 802cb00:	6922      	ldr	r2, [r4, #16]
 802cb02:	455a      	cmp	r2, fp
 802cb04:	dd0b      	ble.n	802cb1e <__gethex+0x402>
 802cb06:	2101      	movs	r1, #1
 802cb08:	4620      	mov	r0, r4
 802cb0a:	f7ff fd9f 	bl	802c64c <rshift>
 802cb0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802cb12:	3701      	adds	r7, #1
 802cb14:	42bb      	cmp	r3, r7
 802cb16:	f6ff aee0 	blt.w	802c8da <__gethex+0x1be>
 802cb1a:	2501      	movs	r5, #1
 802cb1c:	e7c2      	b.n	802caa4 <__gethex+0x388>
 802cb1e:	f016 061f 	ands.w	r6, r6, #31
 802cb22:	d0fa      	beq.n	802cb1a <__gethex+0x3fe>
 802cb24:	4453      	add	r3, sl
 802cb26:	f1c6 0620 	rsb	r6, r6, #32
 802cb2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802cb2e:	f000 fa0f 	bl	802cf50 <__hi0bits>
 802cb32:	42b0      	cmp	r0, r6
 802cb34:	dbe7      	blt.n	802cb06 <__gethex+0x3ea>
 802cb36:	e7f0      	b.n	802cb1a <__gethex+0x3fe>
 802cb38:	0803a66a 	.word	0x0803a66a

0802cb3c <L_shift>:
 802cb3c:	f1c2 0208 	rsb	r2, r2, #8
 802cb40:	0092      	lsls	r2, r2, #2
 802cb42:	b570      	push	{r4, r5, r6, lr}
 802cb44:	f1c2 0620 	rsb	r6, r2, #32
 802cb48:	6843      	ldr	r3, [r0, #4]
 802cb4a:	6804      	ldr	r4, [r0, #0]
 802cb4c:	fa03 f506 	lsl.w	r5, r3, r6
 802cb50:	432c      	orrs	r4, r5
 802cb52:	40d3      	lsrs	r3, r2
 802cb54:	6004      	str	r4, [r0, #0]
 802cb56:	f840 3f04 	str.w	r3, [r0, #4]!
 802cb5a:	4288      	cmp	r0, r1
 802cb5c:	d3f4      	bcc.n	802cb48 <L_shift+0xc>
 802cb5e:	bd70      	pop	{r4, r5, r6, pc}

0802cb60 <__match>:
 802cb60:	b530      	push	{r4, r5, lr}
 802cb62:	6803      	ldr	r3, [r0, #0]
 802cb64:	3301      	adds	r3, #1
 802cb66:	f811 4b01 	ldrb.w	r4, [r1], #1
 802cb6a:	b914      	cbnz	r4, 802cb72 <__match+0x12>
 802cb6c:	6003      	str	r3, [r0, #0]
 802cb6e:	2001      	movs	r0, #1
 802cb70:	bd30      	pop	{r4, r5, pc}
 802cb72:	f813 2b01 	ldrb.w	r2, [r3], #1
 802cb76:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 802cb7a:	2d19      	cmp	r5, #25
 802cb7c:	bf98      	it	ls
 802cb7e:	3220      	addls	r2, #32
 802cb80:	42a2      	cmp	r2, r4
 802cb82:	d0f0      	beq.n	802cb66 <__match+0x6>
 802cb84:	2000      	movs	r0, #0
 802cb86:	e7f3      	b.n	802cb70 <__match+0x10>

0802cb88 <__hexnan>:
 802cb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cb8c:	680b      	ldr	r3, [r1, #0]
 802cb8e:	6801      	ldr	r1, [r0, #0]
 802cb90:	115e      	asrs	r6, r3, #5
 802cb92:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802cb96:	f013 031f 	ands.w	r3, r3, #31
 802cb9a:	b087      	sub	sp, #28
 802cb9c:	bf18      	it	ne
 802cb9e:	3604      	addne	r6, #4
 802cba0:	2500      	movs	r5, #0
 802cba2:	1f37      	subs	r7, r6, #4
 802cba4:	4682      	mov	sl, r0
 802cba6:	4690      	mov	r8, r2
 802cba8:	9301      	str	r3, [sp, #4]
 802cbaa:	f846 5c04 	str.w	r5, [r6, #-4]
 802cbae:	46b9      	mov	r9, r7
 802cbb0:	463c      	mov	r4, r7
 802cbb2:	9502      	str	r5, [sp, #8]
 802cbb4:	46ab      	mov	fp, r5
 802cbb6:	784a      	ldrb	r2, [r1, #1]
 802cbb8:	1c4b      	adds	r3, r1, #1
 802cbba:	9303      	str	r3, [sp, #12]
 802cbbc:	b342      	cbz	r2, 802cc10 <__hexnan+0x88>
 802cbbe:	4610      	mov	r0, r2
 802cbc0:	9105      	str	r1, [sp, #20]
 802cbc2:	9204      	str	r2, [sp, #16]
 802cbc4:	f7ff fd94 	bl	802c6f0 <__hexdig_fun>
 802cbc8:	2800      	cmp	r0, #0
 802cbca:	d151      	bne.n	802cc70 <__hexnan+0xe8>
 802cbcc:	9a04      	ldr	r2, [sp, #16]
 802cbce:	9905      	ldr	r1, [sp, #20]
 802cbd0:	2a20      	cmp	r2, #32
 802cbd2:	d818      	bhi.n	802cc06 <__hexnan+0x7e>
 802cbd4:	9b02      	ldr	r3, [sp, #8]
 802cbd6:	459b      	cmp	fp, r3
 802cbd8:	dd13      	ble.n	802cc02 <__hexnan+0x7a>
 802cbda:	454c      	cmp	r4, r9
 802cbdc:	d206      	bcs.n	802cbec <__hexnan+0x64>
 802cbde:	2d07      	cmp	r5, #7
 802cbe0:	dc04      	bgt.n	802cbec <__hexnan+0x64>
 802cbe2:	462a      	mov	r2, r5
 802cbe4:	4649      	mov	r1, r9
 802cbe6:	4620      	mov	r0, r4
 802cbe8:	f7ff ffa8 	bl	802cb3c <L_shift>
 802cbec:	4544      	cmp	r4, r8
 802cbee:	d952      	bls.n	802cc96 <__hexnan+0x10e>
 802cbf0:	2300      	movs	r3, #0
 802cbf2:	f1a4 0904 	sub.w	r9, r4, #4
 802cbf6:	f844 3c04 	str.w	r3, [r4, #-4]
 802cbfa:	f8cd b008 	str.w	fp, [sp, #8]
 802cbfe:	464c      	mov	r4, r9
 802cc00:	461d      	mov	r5, r3
 802cc02:	9903      	ldr	r1, [sp, #12]
 802cc04:	e7d7      	b.n	802cbb6 <__hexnan+0x2e>
 802cc06:	2a29      	cmp	r2, #41	@ 0x29
 802cc08:	d157      	bne.n	802ccba <__hexnan+0x132>
 802cc0a:	3102      	adds	r1, #2
 802cc0c:	f8ca 1000 	str.w	r1, [sl]
 802cc10:	f1bb 0f00 	cmp.w	fp, #0
 802cc14:	d051      	beq.n	802ccba <__hexnan+0x132>
 802cc16:	454c      	cmp	r4, r9
 802cc18:	d206      	bcs.n	802cc28 <__hexnan+0xa0>
 802cc1a:	2d07      	cmp	r5, #7
 802cc1c:	dc04      	bgt.n	802cc28 <__hexnan+0xa0>
 802cc1e:	462a      	mov	r2, r5
 802cc20:	4649      	mov	r1, r9
 802cc22:	4620      	mov	r0, r4
 802cc24:	f7ff ff8a 	bl	802cb3c <L_shift>
 802cc28:	4544      	cmp	r4, r8
 802cc2a:	d936      	bls.n	802cc9a <__hexnan+0x112>
 802cc2c:	f1a8 0204 	sub.w	r2, r8, #4
 802cc30:	4623      	mov	r3, r4
 802cc32:	f853 1b04 	ldr.w	r1, [r3], #4
 802cc36:	f842 1f04 	str.w	r1, [r2, #4]!
 802cc3a:	429f      	cmp	r7, r3
 802cc3c:	d2f9      	bcs.n	802cc32 <__hexnan+0xaa>
 802cc3e:	1b3b      	subs	r3, r7, r4
 802cc40:	f023 0303 	bic.w	r3, r3, #3
 802cc44:	3304      	adds	r3, #4
 802cc46:	3401      	adds	r4, #1
 802cc48:	3e03      	subs	r6, #3
 802cc4a:	42b4      	cmp	r4, r6
 802cc4c:	bf88      	it	hi
 802cc4e:	2304      	movhi	r3, #4
 802cc50:	4443      	add	r3, r8
 802cc52:	2200      	movs	r2, #0
 802cc54:	f843 2b04 	str.w	r2, [r3], #4
 802cc58:	429f      	cmp	r7, r3
 802cc5a:	d2fb      	bcs.n	802cc54 <__hexnan+0xcc>
 802cc5c:	683b      	ldr	r3, [r7, #0]
 802cc5e:	b91b      	cbnz	r3, 802cc68 <__hexnan+0xe0>
 802cc60:	4547      	cmp	r7, r8
 802cc62:	d128      	bne.n	802ccb6 <__hexnan+0x12e>
 802cc64:	2301      	movs	r3, #1
 802cc66:	603b      	str	r3, [r7, #0]
 802cc68:	2005      	movs	r0, #5
 802cc6a:	b007      	add	sp, #28
 802cc6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cc70:	3501      	adds	r5, #1
 802cc72:	2d08      	cmp	r5, #8
 802cc74:	f10b 0b01 	add.w	fp, fp, #1
 802cc78:	dd06      	ble.n	802cc88 <__hexnan+0x100>
 802cc7a:	4544      	cmp	r4, r8
 802cc7c:	d9c1      	bls.n	802cc02 <__hexnan+0x7a>
 802cc7e:	2300      	movs	r3, #0
 802cc80:	f844 3c04 	str.w	r3, [r4, #-4]
 802cc84:	2501      	movs	r5, #1
 802cc86:	3c04      	subs	r4, #4
 802cc88:	6822      	ldr	r2, [r4, #0]
 802cc8a:	f000 000f 	and.w	r0, r0, #15
 802cc8e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 802cc92:	6020      	str	r0, [r4, #0]
 802cc94:	e7b5      	b.n	802cc02 <__hexnan+0x7a>
 802cc96:	2508      	movs	r5, #8
 802cc98:	e7b3      	b.n	802cc02 <__hexnan+0x7a>
 802cc9a:	9b01      	ldr	r3, [sp, #4]
 802cc9c:	2b00      	cmp	r3, #0
 802cc9e:	d0dd      	beq.n	802cc5c <__hexnan+0xd4>
 802cca0:	f1c3 0320 	rsb	r3, r3, #32
 802cca4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802cca8:	40da      	lsrs	r2, r3
 802ccaa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 802ccae:	4013      	ands	r3, r2
 802ccb0:	f846 3c04 	str.w	r3, [r6, #-4]
 802ccb4:	e7d2      	b.n	802cc5c <__hexnan+0xd4>
 802ccb6:	3f04      	subs	r7, #4
 802ccb8:	e7d0      	b.n	802cc5c <__hexnan+0xd4>
 802ccba:	2004      	movs	r0, #4
 802ccbc:	e7d5      	b.n	802cc6a <__hexnan+0xe2>
	...

0802ccc0 <_findenv_r>:
 802ccc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ccc4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 802cd34 <_findenv_r+0x74>
 802ccc8:	4606      	mov	r6, r0
 802ccca:	4689      	mov	r9, r1
 802cccc:	4617      	mov	r7, r2
 802ccce:	f001 ff93 	bl	802ebf8 <__env_lock>
 802ccd2:	f8da 4000 	ldr.w	r4, [sl]
 802ccd6:	b134      	cbz	r4, 802cce6 <_findenv_r+0x26>
 802ccd8:	464b      	mov	r3, r9
 802ccda:	4698      	mov	r8, r3
 802ccdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 802cce0:	b13a      	cbz	r2, 802ccf2 <_findenv_r+0x32>
 802cce2:	2a3d      	cmp	r2, #61	@ 0x3d
 802cce4:	d1f9      	bne.n	802ccda <_findenv_r+0x1a>
 802cce6:	4630      	mov	r0, r6
 802cce8:	f001 ff8c 	bl	802ec04 <__env_unlock>
 802ccec:	2000      	movs	r0, #0
 802ccee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ccf2:	eba8 0809 	sub.w	r8, r8, r9
 802ccf6:	46a3      	mov	fp, r4
 802ccf8:	f854 0b04 	ldr.w	r0, [r4], #4
 802ccfc:	2800      	cmp	r0, #0
 802ccfe:	d0f2      	beq.n	802cce6 <_findenv_r+0x26>
 802cd00:	4642      	mov	r2, r8
 802cd02:	4649      	mov	r1, r9
 802cd04:	f7fe ff17 	bl	802bb36 <strncmp>
 802cd08:	2800      	cmp	r0, #0
 802cd0a:	d1f4      	bne.n	802ccf6 <_findenv_r+0x36>
 802cd0c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802cd10:	eb03 0508 	add.w	r5, r3, r8
 802cd14:	f813 3008 	ldrb.w	r3, [r3, r8]
 802cd18:	2b3d      	cmp	r3, #61	@ 0x3d
 802cd1a:	d1ec      	bne.n	802ccf6 <_findenv_r+0x36>
 802cd1c:	f8da 3000 	ldr.w	r3, [sl]
 802cd20:	ebab 0303 	sub.w	r3, fp, r3
 802cd24:	109b      	asrs	r3, r3, #2
 802cd26:	4630      	mov	r0, r6
 802cd28:	603b      	str	r3, [r7, #0]
 802cd2a:	f001 ff6b 	bl	802ec04 <__env_unlock>
 802cd2e:	1c68      	adds	r0, r5, #1
 802cd30:	e7dd      	b.n	802ccee <_findenv_r+0x2e>
 802cd32:	bf00      	nop
 802cd34:	200002ac 	.word	0x200002ac

0802cd38 <_getenv_r>:
 802cd38:	b507      	push	{r0, r1, r2, lr}
 802cd3a:	aa01      	add	r2, sp, #4
 802cd3c:	f7ff ffc0 	bl	802ccc0 <_findenv_r>
 802cd40:	b003      	add	sp, #12
 802cd42:	f85d fb04 	ldr.w	pc, [sp], #4

0802cd46 <__ascii_mbtowc>:
 802cd46:	b082      	sub	sp, #8
 802cd48:	b901      	cbnz	r1, 802cd4c <__ascii_mbtowc+0x6>
 802cd4a:	a901      	add	r1, sp, #4
 802cd4c:	b142      	cbz	r2, 802cd60 <__ascii_mbtowc+0x1a>
 802cd4e:	b14b      	cbz	r3, 802cd64 <__ascii_mbtowc+0x1e>
 802cd50:	7813      	ldrb	r3, [r2, #0]
 802cd52:	600b      	str	r3, [r1, #0]
 802cd54:	7812      	ldrb	r2, [r2, #0]
 802cd56:	1e10      	subs	r0, r2, #0
 802cd58:	bf18      	it	ne
 802cd5a:	2001      	movne	r0, #1
 802cd5c:	b002      	add	sp, #8
 802cd5e:	4770      	bx	lr
 802cd60:	4610      	mov	r0, r2
 802cd62:	e7fb      	b.n	802cd5c <__ascii_mbtowc+0x16>
 802cd64:	f06f 0001 	mvn.w	r0, #1
 802cd68:	e7f8      	b.n	802cd5c <__ascii_mbtowc+0x16>
	...

0802cd6c <_Balloc>:
 802cd6c:	b570      	push	{r4, r5, r6, lr}
 802cd6e:	69c6      	ldr	r6, [r0, #28]
 802cd70:	4604      	mov	r4, r0
 802cd72:	460d      	mov	r5, r1
 802cd74:	b976      	cbnz	r6, 802cd94 <_Balloc+0x28>
 802cd76:	2010      	movs	r0, #16
 802cd78:	f7fd fc8c 	bl	802a694 <malloc>
 802cd7c:	4602      	mov	r2, r0
 802cd7e:	61e0      	str	r0, [r4, #28]
 802cd80:	b920      	cbnz	r0, 802cd8c <_Balloc+0x20>
 802cd82:	4b18      	ldr	r3, [pc, #96]	@ (802cde4 <_Balloc+0x78>)
 802cd84:	4818      	ldr	r0, [pc, #96]	@ (802cde8 <_Balloc+0x7c>)
 802cd86:	216b      	movs	r1, #107	@ 0x6b
 802cd88:	f7fd fc46 	bl	802a618 <__assert_func>
 802cd8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802cd90:	6006      	str	r6, [r0, #0]
 802cd92:	60c6      	str	r6, [r0, #12]
 802cd94:	69e6      	ldr	r6, [r4, #28]
 802cd96:	68f3      	ldr	r3, [r6, #12]
 802cd98:	b183      	cbz	r3, 802cdbc <_Balloc+0x50>
 802cd9a:	69e3      	ldr	r3, [r4, #28]
 802cd9c:	68db      	ldr	r3, [r3, #12]
 802cd9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802cda2:	b9b8      	cbnz	r0, 802cdd4 <_Balloc+0x68>
 802cda4:	2101      	movs	r1, #1
 802cda6:	fa01 f605 	lsl.w	r6, r1, r5
 802cdaa:	1d72      	adds	r2, r6, #5
 802cdac:	0092      	lsls	r2, r2, #2
 802cdae:	4620      	mov	r0, r4
 802cdb0:	f7fd fc5c 	bl	802a66c <_calloc_r>
 802cdb4:	b160      	cbz	r0, 802cdd0 <_Balloc+0x64>
 802cdb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802cdba:	e00e      	b.n	802cdda <_Balloc+0x6e>
 802cdbc:	2221      	movs	r2, #33	@ 0x21
 802cdbe:	2104      	movs	r1, #4
 802cdc0:	4620      	mov	r0, r4
 802cdc2:	f7fd fc53 	bl	802a66c <_calloc_r>
 802cdc6:	69e3      	ldr	r3, [r4, #28]
 802cdc8:	60f0      	str	r0, [r6, #12]
 802cdca:	68db      	ldr	r3, [r3, #12]
 802cdcc:	2b00      	cmp	r3, #0
 802cdce:	d1e4      	bne.n	802cd9a <_Balloc+0x2e>
 802cdd0:	2000      	movs	r0, #0
 802cdd2:	bd70      	pop	{r4, r5, r6, pc}
 802cdd4:	6802      	ldr	r2, [r0, #0]
 802cdd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802cdda:	2300      	movs	r3, #0
 802cddc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802cde0:	e7f7      	b.n	802cdd2 <_Balloc+0x66>
 802cde2:	bf00      	nop
 802cde4:	0803a388 	.word	0x0803a388
 802cde8:	0803a6db 	.word	0x0803a6db

0802cdec <_Bfree>:
 802cdec:	b570      	push	{r4, r5, r6, lr}
 802cdee:	69c6      	ldr	r6, [r0, #28]
 802cdf0:	4605      	mov	r5, r0
 802cdf2:	460c      	mov	r4, r1
 802cdf4:	b976      	cbnz	r6, 802ce14 <_Bfree+0x28>
 802cdf6:	2010      	movs	r0, #16
 802cdf8:	f7fd fc4c 	bl	802a694 <malloc>
 802cdfc:	4602      	mov	r2, r0
 802cdfe:	61e8      	str	r0, [r5, #28]
 802ce00:	b920      	cbnz	r0, 802ce0c <_Bfree+0x20>
 802ce02:	4b09      	ldr	r3, [pc, #36]	@ (802ce28 <_Bfree+0x3c>)
 802ce04:	4809      	ldr	r0, [pc, #36]	@ (802ce2c <_Bfree+0x40>)
 802ce06:	218f      	movs	r1, #143	@ 0x8f
 802ce08:	f7fd fc06 	bl	802a618 <__assert_func>
 802ce0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802ce10:	6006      	str	r6, [r0, #0]
 802ce12:	60c6      	str	r6, [r0, #12]
 802ce14:	b13c      	cbz	r4, 802ce26 <_Bfree+0x3a>
 802ce16:	69eb      	ldr	r3, [r5, #28]
 802ce18:	6862      	ldr	r2, [r4, #4]
 802ce1a:	68db      	ldr	r3, [r3, #12]
 802ce1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802ce20:	6021      	str	r1, [r4, #0]
 802ce22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802ce26:	bd70      	pop	{r4, r5, r6, pc}
 802ce28:	0803a388 	.word	0x0803a388
 802ce2c:	0803a6db 	.word	0x0803a6db

0802ce30 <__multadd>:
 802ce30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ce34:	690d      	ldr	r5, [r1, #16]
 802ce36:	4607      	mov	r7, r0
 802ce38:	460c      	mov	r4, r1
 802ce3a:	461e      	mov	r6, r3
 802ce3c:	f101 0c14 	add.w	ip, r1, #20
 802ce40:	2000      	movs	r0, #0
 802ce42:	f8dc 3000 	ldr.w	r3, [ip]
 802ce46:	b299      	uxth	r1, r3
 802ce48:	fb02 6101 	mla	r1, r2, r1, r6
 802ce4c:	0c1e      	lsrs	r6, r3, #16
 802ce4e:	0c0b      	lsrs	r3, r1, #16
 802ce50:	fb02 3306 	mla	r3, r2, r6, r3
 802ce54:	b289      	uxth	r1, r1
 802ce56:	3001      	adds	r0, #1
 802ce58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802ce5c:	4285      	cmp	r5, r0
 802ce5e:	f84c 1b04 	str.w	r1, [ip], #4
 802ce62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802ce66:	dcec      	bgt.n	802ce42 <__multadd+0x12>
 802ce68:	b30e      	cbz	r6, 802ceae <__multadd+0x7e>
 802ce6a:	68a3      	ldr	r3, [r4, #8]
 802ce6c:	42ab      	cmp	r3, r5
 802ce6e:	dc19      	bgt.n	802cea4 <__multadd+0x74>
 802ce70:	6861      	ldr	r1, [r4, #4]
 802ce72:	4638      	mov	r0, r7
 802ce74:	3101      	adds	r1, #1
 802ce76:	f7ff ff79 	bl	802cd6c <_Balloc>
 802ce7a:	4680      	mov	r8, r0
 802ce7c:	b928      	cbnz	r0, 802ce8a <__multadd+0x5a>
 802ce7e:	4602      	mov	r2, r0
 802ce80:	4b0c      	ldr	r3, [pc, #48]	@ (802ceb4 <__multadd+0x84>)
 802ce82:	480d      	ldr	r0, [pc, #52]	@ (802ceb8 <__multadd+0x88>)
 802ce84:	21ba      	movs	r1, #186	@ 0xba
 802ce86:	f7fd fbc7 	bl	802a618 <__assert_func>
 802ce8a:	6922      	ldr	r2, [r4, #16]
 802ce8c:	3202      	adds	r2, #2
 802ce8e:	f104 010c 	add.w	r1, r4, #12
 802ce92:	0092      	lsls	r2, r2, #2
 802ce94:	300c      	adds	r0, #12
 802ce96:	f7ff fb6e 	bl	802c576 <memcpy>
 802ce9a:	4621      	mov	r1, r4
 802ce9c:	4638      	mov	r0, r7
 802ce9e:	f7ff ffa5 	bl	802cdec <_Bfree>
 802cea2:	4644      	mov	r4, r8
 802cea4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802cea8:	3501      	adds	r5, #1
 802ceaa:	615e      	str	r6, [r3, #20]
 802ceac:	6125      	str	r5, [r4, #16]
 802ceae:	4620      	mov	r0, r4
 802ceb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ceb4:	0803a66a 	.word	0x0803a66a
 802ceb8:	0803a6db 	.word	0x0803a6db

0802cebc <__s2b>:
 802cebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802cec0:	460c      	mov	r4, r1
 802cec2:	4615      	mov	r5, r2
 802cec4:	461f      	mov	r7, r3
 802cec6:	2209      	movs	r2, #9
 802cec8:	3308      	adds	r3, #8
 802ceca:	4606      	mov	r6, r0
 802cecc:	fb93 f3f2 	sdiv	r3, r3, r2
 802ced0:	2100      	movs	r1, #0
 802ced2:	2201      	movs	r2, #1
 802ced4:	429a      	cmp	r2, r3
 802ced6:	db09      	blt.n	802ceec <__s2b+0x30>
 802ced8:	4630      	mov	r0, r6
 802ceda:	f7ff ff47 	bl	802cd6c <_Balloc>
 802cede:	b940      	cbnz	r0, 802cef2 <__s2b+0x36>
 802cee0:	4602      	mov	r2, r0
 802cee2:	4b19      	ldr	r3, [pc, #100]	@ (802cf48 <__s2b+0x8c>)
 802cee4:	4819      	ldr	r0, [pc, #100]	@ (802cf4c <__s2b+0x90>)
 802cee6:	21d3      	movs	r1, #211	@ 0xd3
 802cee8:	f7fd fb96 	bl	802a618 <__assert_func>
 802ceec:	0052      	lsls	r2, r2, #1
 802ceee:	3101      	adds	r1, #1
 802cef0:	e7f0      	b.n	802ced4 <__s2b+0x18>
 802cef2:	9b08      	ldr	r3, [sp, #32]
 802cef4:	6143      	str	r3, [r0, #20]
 802cef6:	2d09      	cmp	r5, #9
 802cef8:	f04f 0301 	mov.w	r3, #1
 802cefc:	6103      	str	r3, [r0, #16]
 802cefe:	dd16      	ble.n	802cf2e <__s2b+0x72>
 802cf00:	f104 0909 	add.w	r9, r4, #9
 802cf04:	46c8      	mov	r8, r9
 802cf06:	442c      	add	r4, r5
 802cf08:	f818 3b01 	ldrb.w	r3, [r8], #1
 802cf0c:	4601      	mov	r1, r0
 802cf0e:	3b30      	subs	r3, #48	@ 0x30
 802cf10:	220a      	movs	r2, #10
 802cf12:	4630      	mov	r0, r6
 802cf14:	f7ff ff8c 	bl	802ce30 <__multadd>
 802cf18:	45a0      	cmp	r8, r4
 802cf1a:	d1f5      	bne.n	802cf08 <__s2b+0x4c>
 802cf1c:	f1a5 0408 	sub.w	r4, r5, #8
 802cf20:	444c      	add	r4, r9
 802cf22:	1b2d      	subs	r5, r5, r4
 802cf24:	1963      	adds	r3, r4, r5
 802cf26:	42bb      	cmp	r3, r7
 802cf28:	db04      	blt.n	802cf34 <__s2b+0x78>
 802cf2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802cf2e:	340a      	adds	r4, #10
 802cf30:	2509      	movs	r5, #9
 802cf32:	e7f6      	b.n	802cf22 <__s2b+0x66>
 802cf34:	f814 3b01 	ldrb.w	r3, [r4], #1
 802cf38:	4601      	mov	r1, r0
 802cf3a:	3b30      	subs	r3, #48	@ 0x30
 802cf3c:	220a      	movs	r2, #10
 802cf3e:	4630      	mov	r0, r6
 802cf40:	f7ff ff76 	bl	802ce30 <__multadd>
 802cf44:	e7ee      	b.n	802cf24 <__s2b+0x68>
 802cf46:	bf00      	nop
 802cf48:	0803a66a 	.word	0x0803a66a
 802cf4c:	0803a6db 	.word	0x0803a6db

0802cf50 <__hi0bits>:
 802cf50:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802cf54:	4603      	mov	r3, r0
 802cf56:	bf36      	itet	cc
 802cf58:	0403      	lslcc	r3, r0, #16
 802cf5a:	2000      	movcs	r0, #0
 802cf5c:	2010      	movcc	r0, #16
 802cf5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802cf62:	bf3c      	itt	cc
 802cf64:	021b      	lslcc	r3, r3, #8
 802cf66:	3008      	addcc	r0, #8
 802cf68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802cf6c:	bf3c      	itt	cc
 802cf6e:	011b      	lslcc	r3, r3, #4
 802cf70:	3004      	addcc	r0, #4
 802cf72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802cf76:	bf3c      	itt	cc
 802cf78:	009b      	lslcc	r3, r3, #2
 802cf7a:	3002      	addcc	r0, #2
 802cf7c:	2b00      	cmp	r3, #0
 802cf7e:	db05      	blt.n	802cf8c <__hi0bits+0x3c>
 802cf80:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 802cf84:	f100 0001 	add.w	r0, r0, #1
 802cf88:	bf08      	it	eq
 802cf8a:	2020      	moveq	r0, #32
 802cf8c:	4770      	bx	lr

0802cf8e <__lo0bits>:
 802cf8e:	6803      	ldr	r3, [r0, #0]
 802cf90:	4602      	mov	r2, r0
 802cf92:	f013 0007 	ands.w	r0, r3, #7
 802cf96:	d00b      	beq.n	802cfb0 <__lo0bits+0x22>
 802cf98:	07d9      	lsls	r1, r3, #31
 802cf9a:	d421      	bmi.n	802cfe0 <__lo0bits+0x52>
 802cf9c:	0798      	lsls	r0, r3, #30
 802cf9e:	bf49      	itett	mi
 802cfa0:	085b      	lsrmi	r3, r3, #1
 802cfa2:	089b      	lsrpl	r3, r3, #2
 802cfa4:	2001      	movmi	r0, #1
 802cfa6:	6013      	strmi	r3, [r2, #0]
 802cfa8:	bf5c      	itt	pl
 802cfaa:	6013      	strpl	r3, [r2, #0]
 802cfac:	2002      	movpl	r0, #2
 802cfae:	4770      	bx	lr
 802cfb0:	b299      	uxth	r1, r3
 802cfb2:	b909      	cbnz	r1, 802cfb8 <__lo0bits+0x2a>
 802cfb4:	0c1b      	lsrs	r3, r3, #16
 802cfb6:	2010      	movs	r0, #16
 802cfb8:	b2d9      	uxtb	r1, r3
 802cfba:	b909      	cbnz	r1, 802cfc0 <__lo0bits+0x32>
 802cfbc:	3008      	adds	r0, #8
 802cfbe:	0a1b      	lsrs	r3, r3, #8
 802cfc0:	0719      	lsls	r1, r3, #28
 802cfc2:	bf04      	itt	eq
 802cfc4:	091b      	lsreq	r3, r3, #4
 802cfc6:	3004      	addeq	r0, #4
 802cfc8:	0799      	lsls	r1, r3, #30
 802cfca:	bf04      	itt	eq
 802cfcc:	089b      	lsreq	r3, r3, #2
 802cfce:	3002      	addeq	r0, #2
 802cfd0:	07d9      	lsls	r1, r3, #31
 802cfd2:	d403      	bmi.n	802cfdc <__lo0bits+0x4e>
 802cfd4:	085b      	lsrs	r3, r3, #1
 802cfd6:	f100 0001 	add.w	r0, r0, #1
 802cfda:	d003      	beq.n	802cfe4 <__lo0bits+0x56>
 802cfdc:	6013      	str	r3, [r2, #0]
 802cfde:	4770      	bx	lr
 802cfe0:	2000      	movs	r0, #0
 802cfe2:	4770      	bx	lr
 802cfe4:	2020      	movs	r0, #32
 802cfe6:	4770      	bx	lr

0802cfe8 <__i2b>:
 802cfe8:	b510      	push	{r4, lr}
 802cfea:	460c      	mov	r4, r1
 802cfec:	2101      	movs	r1, #1
 802cfee:	f7ff febd 	bl	802cd6c <_Balloc>
 802cff2:	4602      	mov	r2, r0
 802cff4:	b928      	cbnz	r0, 802d002 <__i2b+0x1a>
 802cff6:	4b05      	ldr	r3, [pc, #20]	@ (802d00c <__i2b+0x24>)
 802cff8:	4805      	ldr	r0, [pc, #20]	@ (802d010 <__i2b+0x28>)
 802cffa:	f240 1145 	movw	r1, #325	@ 0x145
 802cffe:	f7fd fb0b 	bl	802a618 <__assert_func>
 802d002:	2301      	movs	r3, #1
 802d004:	6144      	str	r4, [r0, #20]
 802d006:	6103      	str	r3, [r0, #16]
 802d008:	bd10      	pop	{r4, pc}
 802d00a:	bf00      	nop
 802d00c:	0803a66a 	.word	0x0803a66a
 802d010:	0803a6db 	.word	0x0803a6db

0802d014 <__multiply>:
 802d014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d018:	4614      	mov	r4, r2
 802d01a:	690a      	ldr	r2, [r1, #16]
 802d01c:	6923      	ldr	r3, [r4, #16]
 802d01e:	429a      	cmp	r2, r3
 802d020:	bfa8      	it	ge
 802d022:	4623      	movge	r3, r4
 802d024:	460f      	mov	r7, r1
 802d026:	bfa4      	itt	ge
 802d028:	460c      	movge	r4, r1
 802d02a:	461f      	movge	r7, r3
 802d02c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802d030:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802d034:	68a3      	ldr	r3, [r4, #8]
 802d036:	6861      	ldr	r1, [r4, #4]
 802d038:	eb0a 0609 	add.w	r6, sl, r9
 802d03c:	42b3      	cmp	r3, r6
 802d03e:	b085      	sub	sp, #20
 802d040:	bfb8      	it	lt
 802d042:	3101      	addlt	r1, #1
 802d044:	f7ff fe92 	bl	802cd6c <_Balloc>
 802d048:	b930      	cbnz	r0, 802d058 <__multiply+0x44>
 802d04a:	4602      	mov	r2, r0
 802d04c:	4b44      	ldr	r3, [pc, #272]	@ (802d160 <__multiply+0x14c>)
 802d04e:	4845      	ldr	r0, [pc, #276]	@ (802d164 <__multiply+0x150>)
 802d050:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 802d054:	f7fd fae0 	bl	802a618 <__assert_func>
 802d058:	f100 0514 	add.w	r5, r0, #20
 802d05c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802d060:	462b      	mov	r3, r5
 802d062:	2200      	movs	r2, #0
 802d064:	4543      	cmp	r3, r8
 802d066:	d321      	bcc.n	802d0ac <__multiply+0x98>
 802d068:	f107 0114 	add.w	r1, r7, #20
 802d06c:	f104 0214 	add.w	r2, r4, #20
 802d070:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 802d074:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 802d078:	9302      	str	r3, [sp, #8]
 802d07a:	1b13      	subs	r3, r2, r4
 802d07c:	3b15      	subs	r3, #21
 802d07e:	f023 0303 	bic.w	r3, r3, #3
 802d082:	3304      	adds	r3, #4
 802d084:	f104 0715 	add.w	r7, r4, #21
 802d088:	42ba      	cmp	r2, r7
 802d08a:	bf38      	it	cc
 802d08c:	2304      	movcc	r3, #4
 802d08e:	9301      	str	r3, [sp, #4]
 802d090:	9b02      	ldr	r3, [sp, #8]
 802d092:	9103      	str	r1, [sp, #12]
 802d094:	428b      	cmp	r3, r1
 802d096:	d80c      	bhi.n	802d0b2 <__multiply+0x9e>
 802d098:	2e00      	cmp	r6, #0
 802d09a:	dd03      	ble.n	802d0a4 <__multiply+0x90>
 802d09c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802d0a0:	2b00      	cmp	r3, #0
 802d0a2:	d05b      	beq.n	802d15c <__multiply+0x148>
 802d0a4:	6106      	str	r6, [r0, #16]
 802d0a6:	b005      	add	sp, #20
 802d0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d0ac:	f843 2b04 	str.w	r2, [r3], #4
 802d0b0:	e7d8      	b.n	802d064 <__multiply+0x50>
 802d0b2:	f8b1 a000 	ldrh.w	sl, [r1]
 802d0b6:	f1ba 0f00 	cmp.w	sl, #0
 802d0ba:	d024      	beq.n	802d106 <__multiply+0xf2>
 802d0bc:	f104 0e14 	add.w	lr, r4, #20
 802d0c0:	46a9      	mov	r9, r5
 802d0c2:	f04f 0c00 	mov.w	ip, #0
 802d0c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 802d0ca:	f8d9 3000 	ldr.w	r3, [r9]
 802d0ce:	fa1f fb87 	uxth.w	fp, r7
 802d0d2:	b29b      	uxth	r3, r3
 802d0d4:	fb0a 330b 	mla	r3, sl, fp, r3
 802d0d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 802d0dc:	f8d9 7000 	ldr.w	r7, [r9]
 802d0e0:	4463      	add	r3, ip
 802d0e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802d0e6:	fb0a c70b 	mla	r7, sl, fp, ip
 802d0ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802d0ee:	b29b      	uxth	r3, r3
 802d0f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802d0f4:	4572      	cmp	r2, lr
 802d0f6:	f849 3b04 	str.w	r3, [r9], #4
 802d0fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802d0fe:	d8e2      	bhi.n	802d0c6 <__multiply+0xb2>
 802d100:	9b01      	ldr	r3, [sp, #4]
 802d102:	f845 c003 	str.w	ip, [r5, r3]
 802d106:	9b03      	ldr	r3, [sp, #12]
 802d108:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 802d10c:	3104      	adds	r1, #4
 802d10e:	f1b9 0f00 	cmp.w	r9, #0
 802d112:	d021      	beq.n	802d158 <__multiply+0x144>
 802d114:	682b      	ldr	r3, [r5, #0]
 802d116:	f104 0c14 	add.w	ip, r4, #20
 802d11a:	46ae      	mov	lr, r5
 802d11c:	f04f 0a00 	mov.w	sl, #0
 802d120:	f8bc b000 	ldrh.w	fp, [ip]
 802d124:	f8be 7002 	ldrh.w	r7, [lr, #2]
 802d128:	fb09 770b 	mla	r7, r9, fp, r7
 802d12c:	4457      	add	r7, sl
 802d12e:	b29b      	uxth	r3, r3
 802d130:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802d134:	f84e 3b04 	str.w	r3, [lr], #4
 802d138:	f85c 3b04 	ldr.w	r3, [ip], #4
 802d13c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802d140:	f8be 3000 	ldrh.w	r3, [lr]
 802d144:	fb09 330a 	mla	r3, r9, sl, r3
 802d148:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 802d14c:	4562      	cmp	r2, ip
 802d14e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802d152:	d8e5      	bhi.n	802d120 <__multiply+0x10c>
 802d154:	9f01      	ldr	r7, [sp, #4]
 802d156:	51eb      	str	r3, [r5, r7]
 802d158:	3504      	adds	r5, #4
 802d15a:	e799      	b.n	802d090 <__multiply+0x7c>
 802d15c:	3e01      	subs	r6, #1
 802d15e:	e79b      	b.n	802d098 <__multiply+0x84>
 802d160:	0803a66a 	.word	0x0803a66a
 802d164:	0803a6db 	.word	0x0803a6db

0802d168 <__pow5mult>:
 802d168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d16c:	4615      	mov	r5, r2
 802d16e:	f012 0203 	ands.w	r2, r2, #3
 802d172:	4607      	mov	r7, r0
 802d174:	460e      	mov	r6, r1
 802d176:	d007      	beq.n	802d188 <__pow5mult+0x20>
 802d178:	4c25      	ldr	r4, [pc, #148]	@ (802d210 <__pow5mult+0xa8>)
 802d17a:	3a01      	subs	r2, #1
 802d17c:	2300      	movs	r3, #0
 802d17e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802d182:	f7ff fe55 	bl	802ce30 <__multadd>
 802d186:	4606      	mov	r6, r0
 802d188:	10ad      	asrs	r5, r5, #2
 802d18a:	d03d      	beq.n	802d208 <__pow5mult+0xa0>
 802d18c:	69fc      	ldr	r4, [r7, #28]
 802d18e:	b97c      	cbnz	r4, 802d1b0 <__pow5mult+0x48>
 802d190:	2010      	movs	r0, #16
 802d192:	f7fd fa7f 	bl	802a694 <malloc>
 802d196:	4602      	mov	r2, r0
 802d198:	61f8      	str	r0, [r7, #28]
 802d19a:	b928      	cbnz	r0, 802d1a8 <__pow5mult+0x40>
 802d19c:	4b1d      	ldr	r3, [pc, #116]	@ (802d214 <__pow5mult+0xac>)
 802d19e:	481e      	ldr	r0, [pc, #120]	@ (802d218 <__pow5mult+0xb0>)
 802d1a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 802d1a4:	f7fd fa38 	bl	802a618 <__assert_func>
 802d1a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802d1ac:	6004      	str	r4, [r0, #0]
 802d1ae:	60c4      	str	r4, [r0, #12]
 802d1b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 802d1b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802d1b8:	b94c      	cbnz	r4, 802d1ce <__pow5mult+0x66>
 802d1ba:	f240 2171 	movw	r1, #625	@ 0x271
 802d1be:	4638      	mov	r0, r7
 802d1c0:	f7ff ff12 	bl	802cfe8 <__i2b>
 802d1c4:	2300      	movs	r3, #0
 802d1c6:	f8c8 0008 	str.w	r0, [r8, #8]
 802d1ca:	4604      	mov	r4, r0
 802d1cc:	6003      	str	r3, [r0, #0]
 802d1ce:	f04f 0900 	mov.w	r9, #0
 802d1d2:	07eb      	lsls	r3, r5, #31
 802d1d4:	d50a      	bpl.n	802d1ec <__pow5mult+0x84>
 802d1d6:	4631      	mov	r1, r6
 802d1d8:	4622      	mov	r2, r4
 802d1da:	4638      	mov	r0, r7
 802d1dc:	f7ff ff1a 	bl	802d014 <__multiply>
 802d1e0:	4631      	mov	r1, r6
 802d1e2:	4680      	mov	r8, r0
 802d1e4:	4638      	mov	r0, r7
 802d1e6:	f7ff fe01 	bl	802cdec <_Bfree>
 802d1ea:	4646      	mov	r6, r8
 802d1ec:	106d      	asrs	r5, r5, #1
 802d1ee:	d00b      	beq.n	802d208 <__pow5mult+0xa0>
 802d1f0:	6820      	ldr	r0, [r4, #0]
 802d1f2:	b938      	cbnz	r0, 802d204 <__pow5mult+0x9c>
 802d1f4:	4622      	mov	r2, r4
 802d1f6:	4621      	mov	r1, r4
 802d1f8:	4638      	mov	r0, r7
 802d1fa:	f7ff ff0b 	bl	802d014 <__multiply>
 802d1fe:	6020      	str	r0, [r4, #0]
 802d200:	f8c0 9000 	str.w	r9, [r0]
 802d204:	4604      	mov	r4, r0
 802d206:	e7e4      	b.n	802d1d2 <__pow5mult+0x6a>
 802d208:	4630      	mov	r0, r6
 802d20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d20e:	bf00      	nop
 802d210:	0803a734 	.word	0x0803a734
 802d214:	0803a388 	.word	0x0803a388
 802d218:	0803a6db 	.word	0x0803a6db

0802d21c <__lshift>:
 802d21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d220:	460c      	mov	r4, r1
 802d222:	6849      	ldr	r1, [r1, #4]
 802d224:	6923      	ldr	r3, [r4, #16]
 802d226:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802d22a:	68a3      	ldr	r3, [r4, #8]
 802d22c:	4607      	mov	r7, r0
 802d22e:	4691      	mov	r9, r2
 802d230:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802d234:	f108 0601 	add.w	r6, r8, #1
 802d238:	42b3      	cmp	r3, r6
 802d23a:	db0b      	blt.n	802d254 <__lshift+0x38>
 802d23c:	4638      	mov	r0, r7
 802d23e:	f7ff fd95 	bl	802cd6c <_Balloc>
 802d242:	4605      	mov	r5, r0
 802d244:	b948      	cbnz	r0, 802d25a <__lshift+0x3e>
 802d246:	4602      	mov	r2, r0
 802d248:	4b28      	ldr	r3, [pc, #160]	@ (802d2ec <__lshift+0xd0>)
 802d24a:	4829      	ldr	r0, [pc, #164]	@ (802d2f0 <__lshift+0xd4>)
 802d24c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 802d250:	f7fd f9e2 	bl	802a618 <__assert_func>
 802d254:	3101      	adds	r1, #1
 802d256:	005b      	lsls	r3, r3, #1
 802d258:	e7ee      	b.n	802d238 <__lshift+0x1c>
 802d25a:	2300      	movs	r3, #0
 802d25c:	f100 0114 	add.w	r1, r0, #20
 802d260:	f100 0210 	add.w	r2, r0, #16
 802d264:	4618      	mov	r0, r3
 802d266:	4553      	cmp	r3, sl
 802d268:	db33      	blt.n	802d2d2 <__lshift+0xb6>
 802d26a:	6920      	ldr	r0, [r4, #16]
 802d26c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802d270:	f104 0314 	add.w	r3, r4, #20
 802d274:	f019 091f 	ands.w	r9, r9, #31
 802d278:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802d27c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802d280:	d02b      	beq.n	802d2da <__lshift+0xbe>
 802d282:	f1c9 0e20 	rsb	lr, r9, #32
 802d286:	468a      	mov	sl, r1
 802d288:	2200      	movs	r2, #0
 802d28a:	6818      	ldr	r0, [r3, #0]
 802d28c:	fa00 f009 	lsl.w	r0, r0, r9
 802d290:	4310      	orrs	r0, r2
 802d292:	f84a 0b04 	str.w	r0, [sl], #4
 802d296:	f853 2b04 	ldr.w	r2, [r3], #4
 802d29a:	459c      	cmp	ip, r3
 802d29c:	fa22 f20e 	lsr.w	r2, r2, lr
 802d2a0:	d8f3      	bhi.n	802d28a <__lshift+0x6e>
 802d2a2:	ebac 0304 	sub.w	r3, ip, r4
 802d2a6:	3b15      	subs	r3, #21
 802d2a8:	f023 0303 	bic.w	r3, r3, #3
 802d2ac:	3304      	adds	r3, #4
 802d2ae:	f104 0015 	add.w	r0, r4, #21
 802d2b2:	4584      	cmp	ip, r0
 802d2b4:	bf38      	it	cc
 802d2b6:	2304      	movcc	r3, #4
 802d2b8:	50ca      	str	r2, [r1, r3]
 802d2ba:	b10a      	cbz	r2, 802d2c0 <__lshift+0xa4>
 802d2bc:	f108 0602 	add.w	r6, r8, #2
 802d2c0:	3e01      	subs	r6, #1
 802d2c2:	4638      	mov	r0, r7
 802d2c4:	612e      	str	r6, [r5, #16]
 802d2c6:	4621      	mov	r1, r4
 802d2c8:	f7ff fd90 	bl	802cdec <_Bfree>
 802d2cc:	4628      	mov	r0, r5
 802d2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d2d2:	f842 0f04 	str.w	r0, [r2, #4]!
 802d2d6:	3301      	adds	r3, #1
 802d2d8:	e7c5      	b.n	802d266 <__lshift+0x4a>
 802d2da:	3904      	subs	r1, #4
 802d2dc:	f853 2b04 	ldr.w	r2, [r3], #4
 802d2e0:	f841 2f04 	str.w	r2, [r1, #4]!
 802d2e4:	459c      	cmp	ip, r3
 802d2e6:	d8f9      	bhi.n	802d2dc <__lshift+0xc0>
 802d2e8:	e7ea      	b.n	802d2c0 <__lshift+0xa4>
 802d2ea:	bf00      	nop
 802d2ec:	0803a66a 	.word	0x0803a66a
 802d2f0:	0803a6db 	.word	0x0803a6db

0802d2f4 <__mcmp>:
 802d2f4:	690a      	ldr	r2, [r1, #16]
 802d2f6:	4603      	mov	r3, r0
 802d2f8:	6900      	ldr	r0, [r0, #16]
 802d2fa:	1a80      	subs	r0, r0, r2
 802d2fc:	b530      	push	{r4, r5, lr}
 802d2fe:	d10e      	bne.n	802d31e <__mcmp+0x2a>
 802d300:	3314      	adds	r3, #20
 802d302:	3114      	adds	r1, #20
 802d304:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 802d308:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802d30c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802d310:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802d314:	4295      	cmp	r5, r2
 802d316:	d003      	beq.n	802d320 <__mcmp+0x2c>
 802d318:	d205      	bcs.n	802d326 <__mcmp+0x32>
 802d31a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802d31e:	bd30      	pop	{r4, r5, pc}
 802d320:	42a3      	cmp	r3, r4
 802d322:	d3f3      	bcc.n	802d30c <__mcmp+0x18>
 802d324:	e7fb      	b.n	802d31e <__mcmp+0x2a>
 802d326:	2001      	movs	r0, #1
 802d328:	e7f9      	b.n	802d31e <__mcmp+0x2a>
	...

0802d32c <__mdiff>:
 802d32c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d330:	4689      	mov	r9, r1
 802d332:	4606      	mov	r6, r0
 802d334:	4611      	mov	r1, r2
 802d336:	4648      	mov	r0, r9
 802d338:	4614      	mov	r4, r2
 802d33a:	f7ff ffdb 	bl	802d2f4 <__mcmp>
 802d33e:	1e05      	subs	r5, r0, #0
 802d340:	d112      	bne.n	802d368 <__mdiff+0x3c>
 802d342:	4629      	mov	r1, r5
 802d344:	4630      	mov	r0, r6
 802d346:	f7ff fd11 	bl	802cd6c <_Balloc>
 802d34a:	4602      	mov	r2, r0
 802d34c:	b928      	cbnz	r0, 802d35a <__mdiff+0x2e>
 802d34e:	4b3f      	ldr	r3, [pc, #252]	@ (802d44c <__mdiff+0x120>)
 802d350:	f240 2137 	movw	r1, #567	@ 0x237
 802d354:	483e      	ldr	r0, [pc, #248]	@ (802d450 <__mdiff+0x124>)
 802d356:	f7fd f95f 	bl	802a618 <__assert_func>
 802d35a:	2301      	movs	r3, #1
 802d35c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802d360:	4610      	mov	r0, r2
 802d362:	b003      	add	sp, #12
 802d364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d368:	bfbc      	itt	lt
 802d36a:	464b      	movlt	r3, r9
 802d36c:	46a1      	movlt	r9, r4
 802d36e:	4630      	mov	r0, r6
 802d370:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802d374:	bfba      	itte	lt
 802d376:	461c      	movlt	r4, r3
 802d378:	2501      	movlt	r5, #1
 802d37a:	2500      	movge	r5, #0
 802d37c:	f7ff fcf6 	bl	802cd6c <_Balloc>
 802d380:	4602      	mov	r2, r0
 802d382:	b918      	cbnz	r0, 802d38c <__mdiff+0x60>
 802d384:	4b31      	ldr	r3, [pc, #196]	@ (802d44c <__mdiff+0x120>)
 802d386:	f240 2145 	movw	r1, #581	@ 0x245
 802d38a:	e7e3      	b.n	802d354 <__mdiff+0x28>
 802d38c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802d390:	6926      	ldr	r6, [r4, #16]
 802d392:	60c5      	str	r5, [r0, #12]
 802d394:	f109 0310 	add.w	r3, r9, #16
 802d398:	f109 0514 	add.w	r5, r9, #20
 802d39c:	f104 0e14 	add.w	lr, r4, #20
 802d3a0:	f100 0b14 	add.w	fp, r0, #20
 802d3a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 802d3a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 802d3ac:	9301      	str	r3, [sp, #4]
 802d3ae:	46d9      	mov	r9, fp
 802d3b0:	f04f 0c00 	mov.w	ip, #0
 802d3b4:	9b01      	ldr	r3, [sp, #4]
 802d3b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 802d3ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 802d3be:	9301      	str	r3, [sp, #4]
 802d3c0:	fa1f f38a 	uxth.w	r3, sl
 802d3c4:	4619      	mov	r1, r3
 802d3c6:	b283      	uxth	r3, r0
 802d3c8:	1acb      	subs	r3, r1, r3
 802d3ca:	0c00      	lsrs	r0, r0, #16
 802d3cc:	4463      	add	r3, ip
 802d3ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802d3d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802d3d6:	b29b      	uxth	r3, r3
 802d3d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802d3dc:	4576      	cmp	r6, lr
 802d3de:	f849 3b04 	str.w	r3, [r9], #4
 802d3e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802d3e6:	d8e5      	bhi.n	802d3b4 <__mdiff+0x88>
 802d3e8:	1b33      	subs	r3, r6, r4
 802d3ea:	3b15      	subs	r3, #21
 802d3ec:	f023 0303 	bic.w	r3, r3, #3
 802d3f0:	3415      	adds	r4, #21
 802d3f2:	3304      	adds	r3, #4
 802d3f4:	42a6      	cmp	r6, r4
 802d3f6:	bf38      	it	cc
 802d3f8:	2304      	movcc	r3, #4
 802d3fa:	441d      	add	r5, r3
 802d3fc:	445b      	add	r3, fp
 802d3fe:	461e      	mov	r6, r3
 802d400:	462c      	mov	r4, r5
 802d402:	4544      	cmp	r4, r8
 802d404:	d30e      	bcc.n	802d424 <__mdiff+0xf8>
 802d406:	f108 0103 	add.w	r1, r8, #3
 802d40a:	1b49      	subs	r1, r1, r5
 802d40c:	f021 0103 	bic.w	r1, r1, #3
 802d410:	3d03      	subs	r5, #3
 802d412:	45a8      	cmp	r8, r5
 802d414:	bf38      	it	cc
 802d416:	2100      	movcc	r1, #0
 802d418:	440b      	add	r3, r1
 802d41a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802d41e:	b191      	cbz	r1, 802d446 <__mdiff+0x11a>
 802d420:	6117      	str	r7, [r2, #16]
 802d422:	e79d      	b.n	802d360 <__mdiff+0x34>
 802d424:	f854 1b04 	ldr.w	r1, [r4], #4
 802d428:	46e6      	mov	lr, ip
 802d42a:	0c08      	lsrs	r0, r1, #16
 802d42c:	fa1c fc81 	uxtah	ip, ip, r1
 802d430:	4471      	add	r1, lr
 802d432:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802d436:	b289      	uxth	r1, r1
 802d438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802d43c:	f846 1b04 	str.w	r1, [r6], #4
 802d440:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802d444:	e7dd      	b.n	802d402 <__mdiff+0xd6>
 802d446:	3f01      	subs	r7, #1
 802d448:	e7e7      	b.n	802d41a <__mdiff+0xee>
 802d44a:	bf00      	nop
 802d44c:	0803a66a 	.word	0x0803a66a
 802d450:	0803a6db 	.word	0x0803a6db

0802d454 <__ulp>:
 802d454:	b082      	sub	sp, #8
 802d456:	ed8d 0b00 	vstr	d0, [sp]
 802d45a:	9a01      	ldr	r2, [sp, #4]
 802d45c:	4b0f      	ldr	r3, [pc, #60]	@ (802d49c <__ulp+0x48>)
 802d45e:	4013      	ands	r3, r2
 802d460:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 802d464:	2b00      	cmp	r3, #0
 802d466:	dc08      	bgt.n	802d47a <__ulp+0x26>
 802d468:	425b      	negs	r3, r3
 802d46a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 802d46e:	ea4f 5223 	mov.w	r2, r3, asr #20
 802d472:	da04      	bge.n	802d47e <__ulp+0x2a>
 802d474:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802d478:	4113      	asrs	r3, r2
 802d47a:	2200      	movs	r2, #0
 802d47c:	e008      	b.n	802d490 <__ulp+0x3c>
 802d47e:	f1a2 0314 	sub.w	r3, r2, #20
 802d482:	2b1e      	cmp	r3, #30
 802d484:	bfda      	itte	le
 802d486:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 802d48a:	40da      	lsrle	r2, r3
 802d48c:	2201      	movgt	r2, #1
 802d48e:	2300      	movs	r3, #0
 802d490:	4619      	mov	r1, r3
 802d492:	4610      	mov	r0, r2
 802d494:	ec41 0b10 	vmov	d0, r0, r1
 802d498:	b002      	add	sp, #8
 802d49a:	4770      	bx	lr
 802d49c:	7ff00000 	.word	0x7ff00000

0802d4a0 <__b2d>:
 802d4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d4a4:	6906      	ldr	r6, [r0, #16]
 802d4a6:	f100 0814 	add.w	r8, r0, #20
 802d4aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802d4ae:	1f37      	subs	r7, r6, #4
 802d4b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802d4b4:	4610      	mov	r0, r2
 802d4b6:	f7ff fd4b 	bl	802cf50 <__hi0bits>
 802d4ba:	f1c0 0320 	rsb	r3, r0, #32
 802d4be:	280a      	cmp	r0, #10
 802d4c0:	600b      	str	r3, [r1, #0]
 802d4c2:	491b      	ldr	r1, [pc, #108]	@ (802d530 <__b2d+0x90>)
 802d4c4:	dc15      	bgt.n	802d4f2 <__b2d+0x52>
 802d4c6:	f1c0 0c0b 	rsb	ip, r0, #11
 802d4ca:	fa22 f30c 	lsr.w	r3, r2, ip
 802d4ce:	45b8      	cmp	r8, r7
 802d4d0:	ea43 0501 	orr.w	r5, r3, r1
 802d4d4:	bf34      	ite	cc
 802d4d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802d4da:	2300      	movcs	r3, #0
 802d4dc:	3015      	adds	r0, #21
 802d4de:	fa02 f000 	lsl.w	r0, r2, r0
 802d4e2:	fa23 f30c 	lsr.w	r3, r3, ip
 802d4e6:	4303      	orrs	r3, r0
 802d4e8:	461c      	mov	r4, r3
 802d4ea:	ec45 4b10 	vmov	d0, r4, r5
 802d4ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d4f2:	45b8      	cmp	r8, r7
 802d4f4:	bf3a      	itte	cc
 802d4f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802d4fa:	f1a6 0708 	subcc.w	r7, r6, #8
 802d4fe:	2300      	movcs	r3, #0
 802d500:	380b      	subs	r0, #11
 802d502:	d012      	beq.n	802d52a <__b2d+0x8a>
 802d504:	f1c0 0120 	rsb	r1, r0, #32
 802d508:	fa23 f401 	lsr.w	r4, r3, r1
 802d50c:	4082      	lsls	r2, r0
 802d50e:	4322      	orrs	r2, r4
 802d510:	4547      	cmp	r7, r8
 802d512:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 802d516:	bf8c      	ite	hi
 802d518:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 802d51c:	2200      	movls	r2, #0
 802d51e:	4083      	lsls	r3, r0
 802d520:	40ca      	lsrs	r2, r1
 802d522:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 802d526:	4313      	orrs	r3, r2
 802d528:	e7de      	b.n	802d4e8 <__b2d+0x48>
 802d52a:	ea42 0501 	orr.w	r5, r2, r1
 802d52e:	e7db      	b.n	802d4e8 <__b2d+0x48>
 802d530:	3ff00000 	.word	0x3ff00000

0802d534 <__d2b>:
 802d534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802d538:	460f      	mov	r7, r1
 802d53a:	2101      	movs	r1, #1
 802d53c:	ec59 8b10 	vmov	r8, r9, d0
 802d540:	4616      	mov	r6, r2
 802d542:	f7ff fc13 	bl	802cd6c <_Balloc>
 802d546:	4604      	mov	r4, r0
 802d548:	b930      	cbnz	r0, 802d558 <__d2b+0x24>
 802d54a:	4602      	mov	r2, r0
 802d54c:	4b23      	ldr	r3, [pc, #140]	@ (802d5dc <__d2b+0xa8>)
 802d54e:	4824      	ldr	r0, [pc, #144]	@ (802d5e0 <__d2b+0xac>)
 802d550:	f240 310f 	movw	r1, #783	@ 0x30f
 802d554:	f7fd f860 	bl	802a618 <__assert_func>
 802d558:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802d55c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802d560:	b10d      	cbz	r5, 802d566 <__d2b+0x32>
 802d562:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802d566:	9301      	str	r3, [sp, #4]
 802d568:	f1b8 0300 	subs.w	r3, r8, #0
 802d56c:	d023      	beq.n	802d5b6 <__d2b+0x82>
 802d56e:	4668      	mov	r0, sp
 802d570:	9300      	str	r3, [sp, #0]
 802d572:	f7ff fd0c 	bl	802cf8e <__lo0bits>
 802d576:	e9dd 1200 	ldrd	r1, r2, [sp]
 802d57a:	b1d0      	cbz	r0, 802d5b2 <__d2b+0x7e>
 802d57c:	f1c0 0320 	rsb	r3, r0, #32
 802d580:	fa02 f303 	lsl.w	r3, r2, r3
 802d584:	430b      	orrs	r3, r1
 802d586:	40c2      	lsrs	r2, r0
 802d588:	6163      	str	r3, [r4, #20]
 802d58a:	9201      	str	r2, [sp, #4]
 802d58c:	9b01      	ldr	r3, [sp, #4]
 802d58e:	61a3      	str	r3, [r4, #24]
 802d590:	2b00      	cmp	r3, #0
 802d592:	bf0c      	ite	eq
 802d594:	2201      	moveq	r2, #1
 802d596:	2202      	movne	r2, #2
 802d598:	6122      	str	r2, [r4, #16]
 802d59a:	b1a5      	cbz	r5, 802d5c6 <__d2b+0x92>
 802d59c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802d5a0:	4405      	add	r5, r0
 802d5a2:	603d      	str	r5, [r7, #0]
 802d5a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 802d5a8:	6030      	str	r0, [r6, #0]
 802d5aa:	4620      	mov	r0, r4
 802d5ac:	b003      	add	sp, #12
 802d5ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802d5b2:	6161      	str	r1, [r4, #20]
 802d5b4:	e7ea      	b.n	802d58c <__d2b+0x58>
 802d5b6:	a801      	add	r0, sp, #4
 802d5b8:	f7ff fce9 	bl	802cf8e <__lo0bits>
 802d5bc:	9b01      	ldr	r3, [sp, #4]
 802d5be:	6163      	str	r3, [r4, #20]
 802d5c0:	3020      	adds	r0, #32
 802d5c2:	2201      	movs	r2, #1
 802d5c4:	e7e8      	b.n	802d598 <__d2b+0x64>
 802d5c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802d5ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802d5ce:	6038      	str	r0, [r7, #0]
 802d5d0:	6918      	ldr	r0, [r3, #16]
 802d5d2:	f7ff fcbd 	bl	802cf50 <__hi0bits>
 802d5d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802d5da:	e7e5      	b.n	802d5a8 <__d2b+0x74>
 802d5dc:	0803a66a 	.word	0x0803a66a
 802d5e0:	0803a6db 	.word	0x0803a6db

0802d5e4 <__ratio>:
 802d5e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d5e8:	4688      	mov	r8, r1
 802d5ea:	4669      	mov	r1, sp
 802d5ec:	4681      	mov	r9, r0
 802d5ee:	f7ff ff57 	bl	802d4a0 <__b2d>
 802d5f2:	a901      	add	r1, sp, #4
 802d5f4:	4640      	mov	r0, r8
 802d5f6:	ec55 4b10 	vmov	r4, r5, d0
 802d5fa:	f7ff ff51 	bl	802d4a0 <__b2d>
 802d5fe:	f8d8 3010 	ldr.w	r3, [r8, #16]
 802d602:	f8d9 2010 	ldr.w	r2, [r9, #16]
 802d606:	1ad2      	subs	r2, r2, r3
 802d608:	e9dd 3100 	ldrd	r3, r1, [sp]
 802d60c:	1a5b      	subs	r3, r3, r1
 802d60e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 802d612:	ec57 6b10 	vmov	r6, r7, d0
 802d616:	2b00      	cmp	r3, #0
 802d618:	bfd6      	itet	le
 802d61a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802d61e:	462a      	movgt	r2, r5
 802d620:	463a      	movle	r2, r7
 802d622:	46ab      	mov	fp, r5
 802d624:	46a2      	mov	sl, r4
 802d626:	bfce      	itee	gt
 802d628:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 802d62c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 802d630:	ee00 3a90 	vmovle	s1, r3
 802d634:	ec4b ab17 	vmov	d7, sl, fp
 802d638:	ee87 0b00 	vdiv.f64	d0, d7, d0
 802d63c:	b003      	add	sp, #12
 802d63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802d642 <__copybits>:
 802d642:	3901      	subs	r1, #1
 802d644:	b570      	push	{r4, r5, r6, lr}
 802d646:	1149      	asrs	r1, r1, #5
 802d648:	6914      	ldr	r4, [r2, #16]
 802d64a:	3101      	adds	r1, #1
 802d64c:	f102 0314 	add.w	r3, r2, #20
 802d650:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802d654:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802d658:	1f05      	subs	r5, r0, #4
 802d65a:	42a3      	cmp	r3, r4
 802d65c:	d30c      	bcc.n	802d678 <__copybits+0x36>
 802d65e:	1aa3      	subs	r3, r4, r2
 802d660:	3b11      	subs	r3, #17
 802d662:	f023 0303 	bic.w	r3, r3, #3
 802d666:	3211      	adds	r2, #17
 802d668:	42a2      	cmp	r2, r4
 802d66a:	bf88      	it	hi
 802d66c:	2300      	movhi	r3, #0
 802d66e:	4418      	add	r0, r3
 802d670:	2300      	movs	r3, #0
 802d672:	4288      	cmp	r0, r1
 802d674:	d305      	bcc.n	802d682 <__copybits+0x40>
 802d676:	bd70      	pop	{r4, r5, r6, pc}
 802d678:	f853 6b04 	ldr.w	r6, [r3], #4
 802d67c:	f845 6f04 	str.w	r6, [r5, #4]!
 802d680:	e7eb      	b.n	802d65a <__copybits+0x18>
 802d682:	f840 3b04 	str.w	r3, [r0], #4
 802d686:	e7f4      	b.n	802d672 <__copybits+0x30>

0802d688 <__any_on>:
 802d688:	f100 0214 	add.w	r2, r0, #20
 802d68c:	6900      	ldr	r0, [r0, #16]
 802d68e:	114b      	asrs	r3, r1, #5
 802d690:	4298      	cmp	r0, r3
 802d692:	b510      	push	{r4, lr}
 802d694:	db11      	blt.n	802d6ba <__any_on+0x32>
 802d696:	dd0a      	ble.n	802d6ae <__any_on+0x26>
 802d698:	f011 011f 	ands.w	r1, r1, #31
 802d69c:	d007      	beq.n	802d6ae <__any_on+0x26>
 802d69e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802d6a2:	fa24 f001 	lsr.w	r0, r4, r1
 802d6a6:	fa00 f101 	lsl.w	r1, r0, r1
 802d6aa:	428c      	cmp	r4, r1
 802d6ac:	d10b      	bne.n	802d6c6 <__any_on+0x3e>
 802d6ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802d6b2:	4293      	cmp	r3, r2
 802d6b4:	d803      	bhi.n	802d6be <__any_on+0x36>
 802d6b6:	2000      	movs	r0, #0
 802d6b8:	bd10      	pop	{r4, pc}
 802d6ba:	4603      	mov	r3, r0
 802d6bc:	e7f7      	b.n	802d6ae <__any_on+0x26>
 802d6be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802d6c2:	2900      	cmp	r1, #0
 802d6c4:	d0f5      	beq.n	802d6b2 <__any_on+0x2a>
 802d6c6:	2001      	movs	r0, #1
 802d6c8:	e7f6      	b.n	802d6b8 <__any_on+0x30>

0802d6ca <_malloc_usable_size_r>:
 802d6ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802d6ce:	1f18      	subs	r0, r3, #4
 802d6d0:	2b00      	cmp	r3, #0
 802d6d2:	bfbc      	itt	lt
 802d6d4:	580b      	ldrlt	r3, [r1, r0]
 802d6d6:	18c0      	addlt	r0, r0, r3
 802d6d8:	4770      	bx	lr
	...

0802d6dc <_strtoul_l.constprop.0>:
 802d6dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802d6e0:	4e34      	ldr	r6, [pc, #208]	@ (802d7b4 <_strtoul_l.constprop.0+0xd8>)
 802d6e2:	4686      	mov	lr, r0
 802d6e4:	460d      	mov	r5, r1
 802d6e6:	4628      	mov	r0, r5
 802d6e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 802d6ec:	5d37      	ldrb	r7, [r6, r4]
 802d6ee:	f017 0708 	ands.w	r7, r7, #8
 802d6f2:	d1f8      	bne.n	802d6e6 <_strtoul_l.constprop.0+0xa>
 802d6f4:	2c2d      	cmp	r4, #45	@ 0x2d
 802d6f6:	d12f      	bne.n	802d758 <_strtoul_l.constprop.0+0x7c>
 802d6f8:	782c      	ldrb	r4, [r5, #0]
 802d6fa:	2701      	movs	r7, #1
 802d6fc:	1c85      	adds	r5, r0, #2
 802d6fe:	f033 0010 	bics.w	r0, r3, #16
 802d702:	d109      	bne.n	802d718 <_strtoul_l.constprop.0+0x3c>
 802d704:	2c30      	cmp	r4, #48	@ 0x30
 802d706:	d12c      	bne.n	802d762 <_strtoul_l.constprop.0+0x86>
 802d708:	7828      	ldrb	r0, [r5, #0]
 802d70a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 802d70e:	2858      	cmp	r0, #88	@ 0x58
 802d710:	d127      	bne.n	802d762 <_strtoul_l.constprop.0+0x86>
 802d712:	786c      	ldrb	r4, [r5, #1]
 802d714:	2310      	movs	r3, #16
 802d716:	3502      	adds	r5, #2
 802d718:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 802d71c:	2600      	movs	r6, #0
 802d71e:	fbb8 f8f3 	udiv	r8, r8, r3
 802d722:	fb03 f908 	mul.w	r9, r3, r8
 802d726:	ea6f 0909 	mvn.w	r9, r9
 802d72a:	4630      	mov	r0, r6
 802d72c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 802d730:	f1bc 0f09 	cmp.w	ip, #9
 802d734:	d81c      	bhi.n	802d770 <_strtoul_l.constprop.0+0x94>
 802d736:	4664      	mov	r4, ip
 802d738:	42a3      	cmp	r3, r4
 802d73a:	dd2a      	ble.n	802d792 <_strtoul_l.constprop.0+0xb6>
 802d73c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 802d740:	d007      	beq.n	802d752 <_strtoul_l.constprop.0+0x76>
 802d742:	4580      	cmp	r8, r0
 802d744:	d322      	bcc.n	802d78c <_strtoul_l.constprop.0+0xb0>
 802d746:	d101      	bne.n	802d74c <_strtoul_l.constprop.0+0x70>
 802d748:	45a1      	cmp	r9, r4
 802d74a:	db1f      	blt.n	802d78c <_strtoul_l.constprop.0+0xb0>
 802d74c:	fb00 4003 	mla	r0, r0, r3, r4
 802d750:	2601      	movs	r6, #1
 802d752:	f815 4b01 	ldrb.w	r4, [r5], #1
 802d756:	e7e9      	b.n	802d72c <_strtoul_l.constprop.0+0x50>
 802d758:	2c2b      	cmp	r4, #43	@ 0x2b
 802d75a:	bf04      	itt	eq
 802d75c:	782c      	ldrbeq	r4, [r5, #0]
 802d75e:	1c85      	addeq	r5, r0, #2
 802d760:	e7cd      	b.n	802d6fe <_strtoul_l.constprop.0+0x22>
 802d762:	2b00      	cmp	r3, #0
 802d764:	d1d8      	bne.n	802d718 <_strtoul_l.constprop.0+0x3c>
 802d766:	2c30      	cmp	r4, #48	@ 0x30
 802d768:	bf0c      	ite	eq
 802d76a:	2308      	moveq	r3, #8
 802d76c:	230a      	movne	r3, #10
 802d76e:	e7d3      	b.n	802d718 <_strtoul_l.constprop.0+0x3c>
 802d770:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 802d774:	f1bc 0f19 	cmp.w	ip, #25
 802d778:	d801      	bhi.n	802d77e <_strtoul_l.constprop.0+0xa2>
 802d77a:	3c37      	subs	r4, #55	@ 0x37
 802d77c:	e7dc      	b.n	802d738 <_strtoul_l.constprop.0+0x5c>
 802d77e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 802d782:	f1bc 0f19 	cmp.w	ip, #25
 802d786:	d804      	bhi.n	802d792 <_strtoul_l.constprop.0+0xb6>
 802d788:	3c57      	subs	r4, #87	@ 0x57
 802d78a:	e7d5      	b.n	802d738 <_strtoul_l.constprop.0+0x5c>
 802d78c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 802d790:	e7df      	b.n	802d752 <_strtoul_l.constprop.0+0x76>
 802d792:	1c73      	adds	r3, r6, #1
 802d794:	d106      	bne.n	802d7a4 <_strtoul_l.constprop.0+0xc8>
 802d796:	2322      	movs	r3, #34	@ 0x22
 802d798:	f8ce 3000 	str.w	r3, [lr]
 802d79c:	4630      	mov	r0, r6
 802d79e:	b932      	cbnz	r2, 802d7ae <_strtoul_l.constprop.0+0xd2>
 802d7a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802d7a4:	b107      	cbz	r7, 802d7a8 <_strtoul_l.constprop.0+0xcc>
 802d7a6:	4240      	negs	r0, r0
 802d7a8:	2a00      	cmp	r2, #0
 802d7aa:	d0f9      	beq.n	802d7a0 <_strtoul_l.constprop.0+0xc4>
 802d7ac:	b106      	cbz	r6, 802d7b0 <_strtoul_l.constprop.0+0xd4>
 802d7ae:	1e69      	subs	r1, r5, #1
 802d7b0:	6011      	str	r1, [r2, #0]
 802d7b2:	e7f5      	b.n	802d7a0 <_strtoul_l.constprop.0+0xc4>
 802d7b4:	0803a459 	.word	0x0803a459

0802d7b8 <_strtoul_r>:
 802d7b8:	f7ff bf90 	b.w	802d6dc <_strtoul_l.constprop.0>

0802d7bc <strtoul>:
 802d7bc:	4613      	mov	r3, r2
 802d7be:	460a      	mov	r2, r1
 802d7c0:	4601      	mov	r1, r0
 802d7c2:	4802      	ldr	r0, [pc, #8]	@ (802d7cc <strtoul+0x10>)
 802d7c4:	6800      	ldr	r0, [r0, #0]
 802d7c6:	f7ff bf89 	b.w	802d6dc <_strtoul_l.constprop.0>
 802d7ca:	bf00      	nop
 802d7cc:	20000460 	.word	0x20000460

0802d7d0 <__ascii_wctomb>:
 802d7d0:	4603      	mov	r3, r0
 802d7d2:	4608      	mov	r0, r1
 802d7d4:	b141      	cbz	r1, 802d7e8 <__ascii_wctomb+0x18>
 802d7d6:	2aff      	cmp	r2, #255	@ 0xff
 802d7d8:	d904      	bls.n	802d7e4 <__ascii_wctomb+0x14>
 802d7da:	228a      	movs	r2, #138	@ 0x8a
 802d7dc:	601a      	str	r2, [r3, #0]
 802d7de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802d7e2:	4770      	bx	lr
 802d7e4:	700a      	strb	r2, [r1, #0]
 802d7e6:	2001      	movs	r0, #1
 802d7e8:	4770      	bx	lr

0802d7ea <__ssputs_r>:
 802d7ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d7ee:	688e      	ldr	r6, [r1, #8]
 802d7f0:	461f      	mov	r7, r3
 802d7f2:	42be      	cmp	r6, r7
 802d7f4:	680b      	ldr	r3, [r1, #0]
 802d7f6:	4682      	mov	sl, r0
 802d7f8:	460c      	mov	r4, r1
 802d7fa:	4690      	mov	r8, r2
 802d7fc:	d82d      	bhi.n	802d85a <__ssputs_r+0x70>
 802d7fe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802d802:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802d806:	d026      	beq.n	802d856 <__ssputs_r+0x6c>
 802d808:	6965      	ldr	r5, [r4, #20]
 802d80a:	6909      	ldr	r1, [r1, #16]
 802d80c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802d810:	eba3 0901 	sub.w	r9, r3, r1
 802d814:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802d818:	1c7b      	adds	r3, r7, #1
 802d81a:	444b      	add	r3, r9
 802d81c:	106d      	asrs	r5, r5, #1
 802d81e:	429d      	cmp	r5, r3
 802d820:	bf38      	it	cc
 802d822:	461d      	movcc	r5, r3
 802d824:	0553      	lsls	r3, r2, #21
 802d826:	d527      	bpl.n	802d878 <__ssputs_r+0x8e>
 802d828:	4629      	mov	r1, r5
 802d82a:	f7fc ff65 	bl	802a6f8 <_malloc_r>
 802d82e:	4606      	mov	r6, r0
 802d830:	b360      	cbz	r0, 802d88c <__ssputs_r+0xa2>
 802d832:	6921      	ldr	r1, [r4, #16]
 802d834:	464a      	mov	r2, r9
 802d836:	f7fe fe9e 	bl	802c576 <memcpy>
 802d83a:	89a3      	ldrh	r3, [r4, #12]
 802d83c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802d840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802d844:	81a3      	strh	r3, [r4, #12]
 802d846:	6126      	str	r6, [r4, #16]
 802d848:	6165      	str	r5, [r4, #20]
 802d84a:	444e      	add	r6, r9
 802d84c:	eba5 0509 	sub.w	r5, r5, r9
 802d850:	6026      	str	r6, [r4, #0]
 802d852:	60a5      	str	r5, [r4, #8]
 802d854:	463e      	mov	r6, r7
 802d856:	42be      	cmp	r6, r7
 802d858:	d900      	bls.n	802d85c <__ssputs_r+0x72>
 802d85a:	463e      	mov	r6, r7
 802d85c:	6820      	ldr	r0, [r4, #0]
 802d85e:	4632      	mov	r2, r6
 802d860:	4641      	mov	r1, r8
 802d862:	f7fe f939 	bl	802bad8 <memmove>
 802d866:	68a3      	ldr	r3, [r4, #8]
 802d868:	1b9b      	subs	r3, r3, r6
 802d86a:	60a3      	str	r3, [r4, #8]
 802d86c:	6823      	ldr	r3, [r4, #0]
 802d86e:	4433      	add	r3, r6
 802d870:	6023      	str	r3, [r4, #0]
 802d872:	2000      	movs	r0, #0
 802d874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d878:	462a      	mov	r2, r5
 802d87a:	f7fd f83d 	bl	802a8f8 <_realloc_r>
 802d87e:	4606      	mov	r6, r0
 802d880:	2800      	cmp	r0, #0
 802d882:	d1e0      	bne.n	802d846 <__ssputs_r+0x5c>
 802d884:	6921      	ldr	r1, [r4, #16]
 802d886:	4650      	mov	r0, sl
 802d888:	f7fe fe96 	bl	802c5b8 <_free_r>
 802d88c:	230c      	movs	r3, #12
 802d88e:	f8ca 3000 	str.w	r3, [sl]
 802d892:	89a3      	ldrh	r3, [r4, #12]
 802d894:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802d898:	81a3      	strh	r3, [r4, #12]
 802d89a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802d89e:	e7e9      	b.n	802d874 <__ssputs_r+0x8a>

0802d8a0 <_svfiprintf_r>:
 802d8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d8a4:	4698      	mov	r8, r3
 802d8a6:	898b      	ldrh	r3, [r1, #12]
 802d8a8:	061b      	lsls	r3, r3, #24
 802d8aa:	b09d      	sub	sp, #116	@ 0x74
 802d8ac:	4607      	mov	r7, r0
 802d8ae:	460d      	mov	r5, r1
 802d8b0:	4614      	mov	r4, r2
 802d8b2:	d510      	bpl.n	802d8d6 <_svfiprintf_r+0x36>
 802d8b4:	690b      	ldr	r3, [r1, #16]
 802d8b6:	b973      	cbnz	r3, 802d8d6 <_svfiprintf_r+0x36>
 802d8b8:	2140      	movs	r1, #64	@ 0x40
 802d8ba:	f7fc ff1d 	bl	802a6f8 <_malloc_r>
 802d8be:	6028      	str	r0, [r5, #0]
 802d8c0:	6128      	str	r0, [r5, #16]
 802d8c2:	b930      	cbnz	r0, 802d8d2 <_svfiprintf_r+0x32>
 802d8c4:	230c      	movs	r3, #12
 802d8c6:	603b      	str	r3, [r7, #0]
 802d8c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802d8cc:	b01d      	add	sp, #116	@ 0x74
 802d8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d8d2:	2340      	movs	r3, #64	@ 0x40
 802d8d4:	616b      	str	r3, [r5, #20]
 802d8d6:	2300      	movs	r3, #0
 802d8d8:	9309      	str	r3, [sp, #36]	@ 0x24
 802d8da:	2320      	movs	r3, #32
 802d8dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802d8e0:	f8cd 800c 	str.w	r8, [sp, #12]
 802d8e4:	2330      	movs	r3, #48	@ 0x30
 802d8e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 802da84 <_svfiprintf_r+0x1e4>
 802d8ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802d8ee:	f04f 0901 	mov.w	r9, #1
 802d8f2:	4623      	mov	r3, r4
 802d8f4:	469a      	mov	sl, r3
 802d8f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 802d8fa:	b10a      	cbz	r2, 802d900 <_svfiprintf_r+0x60>
 802d8fc:	2a25      	cmp	r2, #37	@ 0x25
 802d8fe:	d1f9      	bne.n	802d8f4 <_svfiprintf_r+0x54>
 802d900:	ebba 0b04 	subs.w	fp, sl, r4
 802d904:	d00b      	beq.n	802d91e <_svfiprintf_r+0x7e>
 802d906:	465b      	mov	r3, fp
 802d908:	4622      	mov	r2, r4
 802d90a:	4629      	mov	r1, r5
 802d90c:	4638      	mov	r0, r7
 802d90e:	f7ff ff6c 	bl	802d7ea <__ssputs_r>
 802d912:	3001      	adds	r0, #1
 802d914:	f000 80a7 	beq.w	802da66 <_svfiprintf_r+0x1c6>
 802d918:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802d91a:	445a      	add	r2, fp
 802d91c:	9209      	str	r2, [sp, #36]	@ 0x24
 802d91e:	f89a 3000 	ldrb.w	r3, [sl]
 802d922:	2b00      	cmp	r3, #0
 802d924:	f000 809f 	beq.w	802da66 <_svfiprintf_r+0x1c6>
 802d928:	2300      	movs	r3, #0
 802d92a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802d92e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802d932:	f10a 0a01 	add.w	sl, sl, #1
 802d936:	9304      	str	r3, [sp, #16]
 802d938:	9307      	str	r3, [sp, #28]
 802d93a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802d93e:	931a      	str	r3, [sp, #104]	@ 0x68
 802d940:	4654      	mov	r4, sl
 802d942:	2205      	movs	r2, #5
 802d944:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d948:	484e      	ldr	r0, [pc, #312]	@ (802da84 <_svfiprintf_r+0x1e4>)
 802d94a:	f7d2 fc89 	bl	8000260 <memchr>
 802d94e:	9a04      	ldr	r2, [sp, #16]
 802d950:	b9d8      	cbnz	r0, 802d98a <_svfiprintf_r+0xea>
 802d952:	06d0      	lsls	r0, r2, #27
 802d954:	bf44      	itt	mi
 802d956:	2320      	movmi	r3, #32
 802d958:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802d95c:	0711      	lsls	r1, r2, #28
 802d95e:	bf44      	itt	mi
 802d960:	232b      	movmi	r3, #43	@ 0x2b
 802d962:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802d966:	f89a 3000 	ldrb.w	r3, [sl]
 802d96a:	2b2a      	cmp	r3, #42	@ 0x2a
 802d96c:	d015      	beq.n	802d99a <_svfiprintf_r+0xfa>
 802d96e:	9a07      	ldr	r2, [sp, #28]
 802d970:	4654      	mov	r4, sl
 802d972:	2000      	movs	r0, #0
 802d974:	f04f 0c0a 	mov.w	ip, #10
 802d978:	4621      	mov	r1, r4
 802d97a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802d97e:	3b30      	subs	r3, #48	@ 0x30
 802d980:	2b09      	cmp	r3, #9
 802d982:	d94b      	bls.n	802da1c <_svfiprintf_r+0x17c>
 802d984:	b1b0      	cbz	r0, 802d9b4 <_svfiprintf_r+0x114>
 802d986:	9207      	str	r2, [sp, #28]
 802d988:	e014      	b.n	802d9b4 <_svfiprintf_r+0x114>
 802d98a:	eba0 0308 	sub.w	r3, r0, r8
 802d98e:	fa09 f303 	lsl.w	r3, r9, r3
 802d992:	4313      	orrs	r3, r2
 802d994:	9304      	str	r3, [sp, #16]
 802d996:	46a2      	mov	sl, r4
 802d998:	e7d2      	b.n	802d940 <_svfiprintf_r+0xa0>
 802d99a:	9b03      	ldr	r3, [sp, #12]
 802d99c:	1d19      	adds	r1, r3, #4
 802d99e:	681b      	ldr	r3, [r3, #0]
 802d9a0:	9103      	str	r1, [sp, #12]
 802d9a2:	2b00      	cmp	r3, #0
 802d9a4:	bfbb      	ittet	lt
 802d9a6:	425b      	neglt	r3, r3
 802d9a8:	f042 0202 	orrlt.w	r2, r2, #2
 802d9ac:	9307      	strge	r3, [sp, #28]
 802d9ae:	9307      	strlt	r3, [sp, #28]
 802d9b0:	bfb8      	it	lt
 802d9b2:	9204      	strlt	r2, [sp, #16]
 802d9b4:	7823      	ldrb	r3, [r4, #0]
 802d9b6:	2b2e      	cmp	r3, #46	@ 0x2e
 802d9b8:	d10a      	bne.n	802d9d0 <_svfiprintf_r+0x130>
 802d9ba:	7863      	ldrb	r3, [r4, #1]
 802d9bc:	2b2a      	cmp	r3, #42	@ 0x2a
 802d9be:	d132      	bne.n	802da26 <_svfiprintf_r+0x186>
 802d9c0:	9b03      	ldr	r3, [sp, #12]
 802d9c2:	1d1a      	adds	r2, r3, #4
 802d9c4:	681b      	ldr	r3, [r3, #0]
 802d9c6:	9203      	str	r2, [sp, #12]
 802d9c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802d9cc:	3402      	adds	r4, #2
 802d9ce:	9305      	str	r3, [sp, #20]
 802d9d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 802da94 <_svfiprintf_r+0x1f4>
 802d9d4:	7821      	ldrb	r1, [r4, #0]
 802d9d6:	2203      	movs	r2, #3
 802d9d8:	4650      	mov	r0, sl
 802d9da:	f7d2 fc41 	bl	8000260 <memchr>
 802d9de:	b138      	cbz	r0, 802d9f0 <_svfiprintf_r+0x150>
 802d9e0:	9b04      	ldr	r3, [sp, #16]
 802d9e2:	eba0 000a 	sub.w	r0, r0, sl
 802d9e6:	2240      	movs	r2, #64	@ 0x40
 802d9e8:	4082      	lsls	r2, r0
 802d9ea:	4313      	orrs	r3, r2
 802d9ec:	3401      	adds	r4, #1
 802d9ee:	9304      	str	r3, [sp, #16]
 802d9f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d9f4:	4824      	ldr	r0, [pc, #144]	@ (802da88 <_svfiprintf_r+0x1e8>)
 802d9f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802d9fa:	2206      	movs	r2, #6
 802d9fc:	f7d2 fc30 	bl	8000260 <memchr>
 802da00:	2800      	cmp	r0, #0
 802da02:	d036      	beq.n	802da72 <_svfiprintf_r+0x1d2>
 802da04:	4b21      	ldr	r3, [pc, #132]	@ (802da8c <_svfiprintf_r+0x1ec>)
 802da06:	bb1b      	cbnz	r3, 802da50 <_svfiprintf_r+0x1b0>
 802da08:	9b03      	ldr	r3, [sp, #12]
 802da0a:	3307      	adds	r3, #7
 802da0c:	f023 0307 	bic.w	r3, r3, #7
 802da10:	3308      	adds	r3, #8
 802da12:	9303      	str	r3, [sp, #12]
 802da14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802da16:	4433      	add	r3, r6
 802da18:	9309      	str	r3, [sp, #36]	@ 0x24
 802da1a:	e76a      	b.n	802d8f2 <_svfiprintf_r+0x52>
 802da1c:	fb0c 3202 	mla	r2, ip, r2, r3
 802da20:	460c      	mov	r4, r1
 802da22:	2001      	movs	r0, #1
 802da24:	e7a8      	b.n	802d978 <_svfiprintf_r+0xd8>
 802da26:	2300      	movs	r3, #0
 802da28:	3401      	adds	r4, #1
 802da2a:	9305      	str	r3, [sp, #20]
 802da2c:	4619      	mov	r1, r3
 802da2e:	f04f 0c0a 	mov.w	ip, #10
 802da32:	4620      	mov	r0, r4
 802da34:	f810 2b01 	ldrb.w	r2, [r0], #1
 802da38:	3a30      	subs	r2, #48	@ 0x30
 802da3a:	2a09      	cmp	r2, #9
 802da3c:	d903      	bls.n	802da46 <_svfiprintf_r+0x1a6>
 802da3e:	2b00      	cmp	r3, #0
 802da40:	d0c6      	beq.n	802d9d0 <_svfiprintf_r+0x130>
 802da42:	9105      	str	r1, [sp, #20]
 802da44:	e7c4      	b.n	802d9d0 <_svfiprintf_r+0x130>
 802da46:	fb0c 2101 	mla	r1, ip, r1, r2
 802da4a:	4604      	mov	r4, r0
 802da4c:	2301      	movs	r3, #1
 802da4e:	e7f0      	b.n	802da32 <_svfiprintf_r+0x192>
 802da50:	ab03      	add	r3, sp, #12
 802da52:	9300      	str	r3, [sp, #0]
 802da54:	462a      	mov	r2, r5
 802da56:	4b0e      	ldr	r3, [pc, #56]	@ (802da90 <_svfiprintf_r+0x1f0>)
 802da58:	a904      	add	r1, sp, #16
 802da5a:	4638      	mov	r0, r7
 802da5c:	f3af 8000 	nop.w
 802da60:	1c42      	adds	r2, r0, #1
 802da62:	4606      	mov	r6, r0
 802da64:	d1d6      	bne.n	802da14 <_svfiprintf_r+0x174>
 802da66:	89ab      	ldrh	r3, [r5, #12]
 802da68:	065b      	lsls	r3, r3, #25
 802da6a:	f53f af2d 	bmi.w	802d8c8 <_svfiprintf_r+0x28>
 802da6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802da70:	e72c      	b.n	802d8cc <_svfiprintf_r+0x2c>
 802da72:	ab03      	add	r3, sp, #12
 802da74:	9300      	str	r3, [sp, #0]
 802da76:	462a      	mov	r2, r5
 802da78:	4b05      	ldr	r3, [pc, #20]	@ (802da90 <_svfiprintf_r+0x1f0>)
 802da7a:	a904      	add	r1, sp, #16
 802da7c:	4638      	mov	r0, r7
 802da7e:	f000 fb87 	bl	802e190 <_printf_i>
 802da82:	e7ed      	b.n	802da60 <_svfiprintf_r+0x1c0>
 802da84:	0803a830 	.word	0x0803a830
 802da88:	0803a83a 	.word	0x0803a83a
 802da8c:	00000000 	.word	0x00000000
 802da90:	0802d7eb 	.word	0x0802d7eb
 802da94:	0803a836 	.word	0x0803a836

0802da98 <_sungetc_r>:
 802da98:	b538      	push	{r3, r4, r5, lr}
 802da9a:	1c4b      	adds	r3, r1, #1
 802da9c:	4614      	mov	r4, r2
 802da9e:	d103      	bne.n	802daa8 <_sungetc_r+0x10>
 802daa0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 802daa4:	4628      	mov	r0, r5
 802daa6:	bd38      	pop	{r3, r4, r5, pc}
 802daa8:	8993      	ldrh	r3, [r2, #12]
 802daaa:	f023 0320 	bic.w	r3, r3, #32
 802daae:	8193      	strh	r3, [r2, #12]
 802dab0:	6853      	ldr	r3, [r2, #4]
 802dab2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 802dab4:	b2cd      	uxtb	r5, r1
 802dab6:	b18a      	cbz	r2, 802dadc <_sungetc_r+0x44>
 802dab8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 802daba:	429a      	cmp	r2, r3
 802dabc:	dd08      	ble.n	802dad0 <_sungetc_r+0x38>
 802dabe:	6823      	ldr	r3, [r4, #0]
 802dac0:	1e5a      	subs	r2, r3, #1
 802dac2:	6022      	str	r2, [r4, #0]
 802dac4:	f803 5c01 	strb.w	r5, [r3, #-1]
 802dac8:	6863      	ldr	r3, [r4, #4]
 802daca:	3301      	adds	r3, #1
 802dacc:	6063      	str	r3, [r4, #4]
 802dace:	e7e9      	b.n	802daa4 <_sungetc_r+0xc>
 802dad0:	4621      	mov	r1, r4
 802dad2:	f000 ff46 	bl	802e962 <__submore>
 802dad6:	2800      	cmp	r0, #0
 802dad8:	d0f1      	beq.n	802dabe <_sungetc_r+0x26>
 802dada:	e7e1      	b.n	802daa0 <_sungetc_r+0x8>
 802dadc:	6921      	ldr	r1, [r4, #16]
 802dade:	6822      	ldr	r2, [r4, #0]
 802dae0:	b141      	cbz	r1, 802daf4 <_sungetc_r+0x5c>
 802dae2:	4291      	cmp	r1, r2
 802dae4:	d206      	bcs.n	802daf4 <_sungetc_r+0x5c>
 802dae6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 802daea:	42a9      	cmp	r1, r5
 802daec:	d102      	bne.n	802daf4 <_sungetc_r+0x5c>
 802daee:	3a01      	subs	r2, #1
 802daf0:	6022      	str	r2, [r4, #0]
 802daf2:	e7ea      	b.n	802daca <_sungetc_r+0x32>
 802daf4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 802daf8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802dafc:	6363      	str	r3, [r4, #52]	@ 0x34
 802dafe:	2303      	movs	r3, #3
 802db00:	63a3      	str	r3, [r4, #56]	@ 0x38
 802db02:	4623      	mov	r3, r4
 802db04:	f803 5f46 	strb.w	r5, [r3, #70]!
 802db08:	6023      	str	r3, [r4, #0]
 802db0a:	2301      	movs	r3, #1
 802db0c:	e7de      	b.n	802dacc <_sungetc_r+0x34>

0802db0e <__ssrefill_r>:
 802db0e:	b510      	push	{r4, lr}
 802db10:	460c      	mov	r4, r1
 802db12:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 802db14:	b169      	cbz	r1, 802db32 <__ssrefill_r+0x24>
 802db16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802db1a:	4299      	cmp	r1, r3
 802db1c:	d001      	beq.n	802db22 <__ssrefill_r+0x14>
 802db1e:	f7fe fd4b 	bl	802c5b8 <_free_r>
 802db22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802db24:	6063      	str	r3, [r4, #4]
 802db26:	2000      	movs	r0, #0
 802db28:	6360      	str	r0, [r4, #52]	@ 0x34
 802db2a:	b113      	cbz	r3, 802db32 <__ssrefill_r+0x24>
 802db2c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802db2e:	6023      	str	r3, [r4, #0]
 802db30:	bd10      	pop	{r4, pc}
 802db32:	6923      	ldr	r3, [r4, #16]
 802db34:	6023      	str	r3, [r4, #0]
 802db36:	2300      	movs	r3, #0
 802db38:	6063      	str	r3, [r4, #4]
 802db3a:	89a3      	ldrh	r3, [r4, #12]
 802db3c:	f043 0320 	orr.w	r3, r3, #32
 802db40:	81a3      	strh	r3, [r4, #12]
 802db42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802db46:	e7f3      	b.n	802db30 <__ssrefill_r+0x22>

0802db48 <__ssvfiscanf_r>:
 802db48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802db4c:	460c      	mov	r4, r1
 802db4e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 802db52:	2100      	movs	r1, #0
 802db54:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 802db58:	49a5      	ldr	r1, [pc, #660]	@ (802ddf0 <__ssvfiscanf_r+0x2a8>)
 802db5a:	91a0      	str	r1, [sp, #640]	@ 0x280
 802db5c:	f10d 0804 	add.w	r8, sp, #4
 802db60:	49a4      	ldr	r1, [pc, #656]	@ (802ddf4 <__ssvfiscanf_r+0x2ac>)
 802db62:	4fa5      	ldr	r7, [pc, #660]	@ (802ddf8 <__ssvfiscanf_r+0x2b0>)
 802db64:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 802db68:	4606      	mov	r6, r0
 802db6a:	91a1      	str	r1, [sp, #644]	@ 0x284
 802db6c:	9300      	str	r3, [sp, #0]
 802db6e:	7813      	ldrb	r3, [r2, #0]
 802db70:	2b00      	cmp	r3, #0
 802db72:	f000 8158 	beq.w	802de26 <__ssvfiscanf_r+0x2de>
 802db76:	5cf9      	ldrb	r1, [r7, r3]
 802db78:	f011 0108 	ands.w	r1, r1, #8
 802db7c:	f102 0501 	add.w	r5, r2, #1
 802db80:	d019      	beq.n	802dbb6 <__ssvfiscanf_r+0x6e>
 802db82:	6863      	ldr	r3, [r4, #4]
 802db84:	2b00      	cmp	r3, #0
 802db86:	dd0f      	ble.n	802dba8 <__ssvfiscanf_r+0x60>
 802db88:	6823      	ldr	r3, [r4, #0]
 802db8a:	781a      	ldrb	r2, [r3, #0]
 802db8c:	5cba      	ldrb	r2, [r7, r2]
 802db8e:	0712      	lsls	r2, r2, #28
 802db90:	d401      	bmi.n	802db96 <__ssvfiscanf_r+0x4e>
 802db92:	462a      	mov	r2, r5
 802db94:	e7eb      	b.n	802db6e <__ssvfiscanf_r+0x26>
 802db96:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 802db98:	3201      	adds	r2, #1
 802db9a:	9245      	str	r2, [sp, #276]	@ 0x114
 802db9c:	6862      	ldr	r2, [r4, #4]
 802db9e:	3301      	adds	r3, #1
 802dba0:	3a01      	subs	r2, #1
 802dba2:	6062      	str	r2, [r4, #4]
 802dba4:	6023      	str	r3, [r4, #0]
 802dba6:	e7ec      	b.n	802db82 <__ssvfiscanf_r+0x3a>
 802dba8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802dbaa:	4621      	mov	r1, r4
 802dbac:	4630      	mov	r0, r6
 802dbae:	4798      	blx	r3
 802dbb0:	2800      	cmp	r0, #0
 802dbb2:	d0e9      	beq.n	802db88 <__ssvfiscanf_r+0x40>
 802dbb4:	e7ed      	b.n	802db92 <__ssvfiscanf_r+0x4a>
 802dbb6:	2b25      	cmp	r3, #37	@ 0x25
 802dbb8:	d012      	beq.n	802dbe0 <__ssvfiscanf_r+0x98>
 802dbba:	4699      	mov	r9, r3
 802dbbc:	6863      	ldr	r3, [r4, #4]
 802dbbe:	2b00      	cmp	r3, #0
 802dbc0:	f340 8093 	ble.w	802dcea <__ssvfiscanf_r+0x1a2>
 802dbc4:	6822      	ldr	r2, [r4, #0]
 802dbc6:	7813      	ldrb	r3, [r2, #0]
 802dbc8:	454b      	cmp	r3, r9
 802dbca:	f040 812c 	bne.w	802de26 <__ssvfiscanf_r+0x2de>
 802dbce:	6863      	ldr	r3, [r4, #4]
 802dbd0:	3b01      	subs	r3, #1
 802dbd2:	6063      	str	r3, [r4, #4]
 802dbd4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 802dbd6:	3201      	adds	r2, #1
 802dbd8:	3301      	adds	r3, #1
 802dbda:	6022      	str	r2, [r4, #0]
 802dbdc:	9345      	str	r3, [sp, #276]	@ 0x114
 802dbde:	e7d8      	b.n	802db92 <__ssvfiscanf_r+0x4a>
 802dbe0:	9141      	str	r1, [sp, #260]	@ 0x104
 802dbe2:	9143      	str	r1, [sp, #268]	@ 0x10c
 802dbe4:	7853      	ldrb	r3, [r2, #1]
 802dbe6:	2b2a      	cmp	r3, #42	@ 0x2a
 802dbe8:	bf02      	ittt	eq
 802dbea:	2310      	moveq	r3, #16
 802dbec:	1c95      	addeq	r5, r2, #2
 802dbee:	9341      	streq	r3, [sp, #260]	@ 0x104
 802dbf0:	220a      	movs	r2, #10
 802dbf2:	46a9      	mov	r9, r5
 802dbf4:	f819 1b01 	ldrb.w	r1, [r9], #1
 802dbf8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 802dbfc:	2b09      	cmp	r3, #9
 802dbfe:	d91e      	bls.n	802dc3e <__ssvfiscanf_r+0xf6>
 802dc00:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 802ddfc <__ssvfiscanf_r+0x2b4>
 802dc04:	2203      	movs	r2, #3
 802dc06:	4650      	mov	r0, sl
 802dc08:	f7d2 fb2a 	bl	8000260 <memchr>
 802dc0c:	b138      	cbz	r0, 802dc1e <__ssvfiscanf_r+0xd6>
 802dc0e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 802dc10:	eba0 000a 	sub.w	r0, r0, sl
 802dc14:	2301      	movs	r3, #1
 802dc16:	4083      	lsls	r3, r0
 802dc18:	4313      	orrs	r3, r2
 802dc1a:	9341      	str	r3, [sp, #260]	@ 0x104
 802dc1c:	464d      	mov	r5, r9
 802dc1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 802dc22:	2b78      	cmp	r3, #120	@ 0x78
 802dc24:	d806      	bhi.n	802dc34 <__ssvfiscanf_r+0xec>
 802dc26:	2b57      	cmp	r3, #87	@ 0x57
 802dc28:	d810      	bhi.n	802dc4c <__ssvfiscanf_r+0x104>
 802dc2a:	2b25      	cmp	r3, #37	@ 0x25
 802dc2c:	d0c5      	beq.n	802dbba <__ssvfiscanf_r+0x72>
 802dc2e:	d857      	bhi.n	802dce0 <__ssvfiscanf_r+0x198>
 802dc30:	2b00      	cmp	r3, #0
 802dc32:	d065      	beq.n	802dd00 <__ssvfiscanf_r+0x1b8>
 802dc34:	2303      	movs	r3, #3
 802dc36:	9347      	str	r3, [sp, #284]	@ 0x11c
 802dc38:	230a      	movs	r3, #10
 802dc3a:	9342      	str	r3, [sp, #264]	@ 0x108
 802dc3c:	e078      	b.n	802dd30 <__ssvfiscanf_r+0x1e8>
 802dc3e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 802dc40:	fb02 1103 	mla	r1, r2, r3, r1
 802dc44:	3930      	subs	r1, #48	@ 0x30
 802dc46:	9143      	str	r1, [sp, #268]	@ 0x10c
 802dc48:	464d      	mov	r5, r9
 802dc4a:	e7d2      	b.n	802dbf2 <__ssvfiscanf_r+0xaa>
 802dc4c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 802dc50:	2a20      	cmp	r2, #32
 802dc52:	d8ef      	bhi.n	802dc34 <__ssvfiscanf_r+0xec>
 802dc54:	a101      	add	r1, pc, #4	@ (adr r1, 802dc5c <__ssvfiscanf_r+0x114>)
 802dc56:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802dc5a:	bf00      	nop
 802dc5c:	0802dd0f 	.word	0x0802dd0f
 802dc60:	0802dc35 	.word	0x0802dc35
 802dc64:	0802dc35 	.word	0x0802dc35
 802dc68:	0802dd69 	.word	0x0802dd69
 802dc6c:	0802dc35 	.word	0x0802dc35
 802dc70:	0802dc35 	.word	0x0802dc35
 802dc74:	0802dc35 	.word	0x0802dc35
 802dc78:	0802dc35 	.word	0x0802dc35
 802dc7c:	0802dc35 	.word	0x0802dc35
 802dc80:	0802dc35 	.word	0x0802dc35
 802dc84:	0802dc35 	.word	0x0802dc35
 802dc88:	0802dd7f 	.word	0x0802dd7f
 802dc8c:	0802dd65 	.word	0x0802dd65
 802dc90:	0802dce7 	.word	0x0802dce7
 802dc94:	0802dce7 	.word	0x0802dce7
 802dc98:	0802dce7 	.word	0x0802dce7
 802dc9c:	0802dc35 	.word	0x0802dc35
 802dca0:	0802dd21 	.word	0x0802dd21
 802dca4:	0802dc35 	.word	0x0802dc35
 802dca8:	0802dc35 	.word	0x0802dc35
 802dcac:	0802dc35 	.word	0x0802dc35
 802dcb0:	0802dc35 	.word	0x0802dc35
 802dcb4:	0802dd8f 	.word	0x0802dd8f
 802dcb8:	0802dd29 	.word	0x0802dd29
 802dcbc:	0802dd07 	.word	0x0802dd07
 802dcc0:	0802dc35 	.word	0x0802dc35
 802dcc4:	0802dc35 	.word	0x0802dc35
 802dcc8:	0802dd8b 	.word	0x0802dd8b
 802dccc:	0802dc35 	.word	0x0802dc35
 802dcd0:	0802dd65 	.word	0x0802dd65
 802dcd4:	0802dc35 	.word	0x0802dc35
 802dcd8:	0802dc35 	.word	0x0802dc35
 802dcdc:	0802dd0f 	.word	0x0802dd0f
 802dce0:	3b45      	subs	r3, #69	@ 0x45
 802dce2:	2b02      	cmp	r3, #2
 802dce4:	d8a6      	bhi.n	802dc34 <__ssvfiscanf_r+0xec>
 802dce6:	2305      	movs	r3, #5
 802dce8:	e021      	b.n	802dd2e <__ssvfiscanf_r+0x1e6>
 802dcea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802dcec:	4621      	mov	r1, r4
 802dcee:	4630      	mov	r0, r6
 802dcf0:	4798      	blx	r3
 802dcf2:	2800      	cmp	r0, #0
 802dcf4:	f43f af66 	beq.w	802dbc4 <__ssvfiscanf_r+0x7c>
 802dcf8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 802dcfa:	2800      	cmp	r0, #0
 802dcfc:	f040 808b 	bne.w	802de16 <__ssvfiscanf_r+0x2ce>
 802dd00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802dd04:	e08b      	b.n	802de1e <__ssvfiscanf_r+0x2d6>
 802dd06:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 802dd08:	f042 0220 	orr.w	r2, r2, #32
 802dd0c:	9241      	str	r2, [sp, #260]	@ 0x104
 802dd0e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 802dd10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802dd14:	9241      	str	r2, [sp, #260]	@ 0x104
 802dd16:	2210      	movs	r2, #16
 802dd18:	2b6e      	cmp	r3, #110	@ 0x6e
 802dd1a:	9242      	str	r2, [sp, #264]	@ 0x108
 802dd1c:	d902      	bls.n	802dd24 <__ssvfiscanf_r+0x1dc>
 802dd1e:	e005      	b.n	802dd2c <__ssvfiscanf_r+0x1e4>
 802dd20:	2300      	movs	r3, #0
 802dd22:	9342      	str	r3, [sp, #264]	@ 0x108
 802dd24:	2303      	movs	r3, #3
 802dd26:	e002      	b.n	802dd2e <__ssvfiscanf_r+0x1e6>
 802dd28:	2308      	movs	r3, #8
 802dd2a:	9342      	str	r3, [sp, #264]	@ 0x108
 802dd2c:	2304      	movs	r3, #4
 802dd2e:	9347      	str	r3, [sp, #284]	@ 0x11c
 802dd30:	6863      	ldr	r3, [r4, #4]
 802dd32:	2b00      	cmp	r3, #0
 802dd34:	dd39      	ble.n	802ddaa <__ssvfiscanf_r+0x262>
 802dd36:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802dd38:	0659      	lsls	r1, r3, #25
 802dd3a:	d404      	bmi.n	802dd46 <__ssvfiscanf_r+0x1fe>
 802dd3c:	6823      	ldr	r3, [r4, #0]
 802dd3e:	781a      	ldrb	r2, [r3, #0]
 802dd40:	5cba      	ldrb	r2, [r7, r2]
 802dd42:	0712      	lsls	r2, r2, #28
 802dd44:	d438      	bmi.n	802ddb8 <__ssvfiscanf_r+0x270>
 802dd46:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 802dd48:	2b02      	cmp	r3, #2
 802dd4a:	dc47      	bgt.n	802dddc <__ssvfiscanf_r+0x294>
 802dd4c:	466b      	mov	r3, sp
 802dd4e:	4622      	mov	r2, r4
 802dd50:	a941      	add	r1, sp, #260	@ 0x104
 802dd52:	4630      	mov	r0, r6
 802dd54:	f000 fb3c 	bl	802e3d0 <_scanf_chars>
 802dd58:	2801      	cmp	r0, #1
 802dd5a:	d064      	beq.n	802de26 <__ssvfiscanf_r+0x2de>
 802dd5c:	2802      	cmp	r0, #2
 802dd5e:	f47f af18 	bne.w	802db92 <__ssvfiscanf_r+0x4a>
 802dd62:	e7c9      	b.n	802dcf8 <__ssvfiscanf_r+0x1b0>
 802dd64:	220a      	movs	r2, #10
 802dd66:	e7d7      	b.n	802dd18 <__ssvfiscanf_r+0x1d0>
 802dd68:	4629      	mov	r1, r5
 802dd6a:	4640      	mov	r0, r8
 802dd6c:	f000 fdc0 	bl	802e8f0 <__sccl>
 802dd70:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802dd72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802dd76:	9341      	str	r3, [sp, #260]	@ 0x104
 802dd78:	4605      	mov	r5, r0
 802dd7a:	2301      	movs	r3, #1
 802dd7c:	e7d7      	b.n	802dd2e <__ssvfiscanf_r+0x1e6>
 802dd7e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802dd80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802dd84:	9341      	str	r3, [sp, #260]	@ 0x104
 802dd86:	2300      	movs	r3, #0
 802dd88:	e7d1      	b.n	802dd2e <__ssvfiscanf_r+0x1e6>
 802dd8a:	2302      	movs	r3, #2
 802dd8c:	e7cf      	b.n	802dd2e <__ssvfiscanf_r+0x1e6>
 802dd8e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 802dd90:	06c3      	lsls	r3, r0, #27
 802dd92:	f53f aefe 	bmi.w	802db92 <__ssvfiscanf_r+0x4a>
 802dd96:	9b00      	ldr	r3, [sp, #0]
 802dd98:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 802dd9a:	1d19      	adds	r1, r3, #4
 802dd9c:	9100      	str	r1, [sp, #0]
 802dd9e:	681b      	ldr	r3, [r3, #0]
 802dda0:	07c0      	lsls	r0, r0, #31
 802dda2:	bf4c      	ite	mi
 802dda4:	801a      	strhmi	r2, [r3, #0]
 802dda6:	601a      	strpl	r2, [r3, #0]
 802dda8:	e6f3      	b.n	802db92 <__ssvfiscanf_r+0x4a>
 802ddaa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802ddac:	4621      	mov	r1, r4
 802ddae:	4630      	mov	r0, r6
 802ddb0:	4798      	blx	r3
 802ddb2:	2800      	cmp	r0, #0
 802ddb4:	d0bf      	beq.n	802dd36 <__ssvfiscanf_r+0x1ee>
 802ddb6:	e79f      	b.n	802dcf8 <__ssvfiscanf_r+0x1b0>
 802ddb8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 802ddba:	3201      	adds	r2, #1
 802ddbc:	9245      	str	r2, [sp, #276]	@ 0x114
 802ddbe:	6862      	ldr	r2, [r4, #4]
 802ddc0:	3a01      	subs	r2, #1
 802ddc2:	2a00      	cmp	r2, #0
 802ddc4:	6062      	str	r2, [r4, #4]
 802ddc6:	dd02      	ble.n	802ddce <__ssvfiscanf_r+0x286>
 802ddc8:	3301      	adds	r3, #1
 802ddca:	6023      	str	r3, [r4, #0]
 802ddcc:	e7b6      	b.n	802dd3c <__ssvfiscanf_r+0x1f4>
 802ddce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802ddd0:	4621      	mov	r1, r4
 802ddd2:	4630      	mov	r0, r6
 802ddd4:	4798      	blx	r3
 802ddd6:	2800      	cmp	r0, #0
 802ddd8:	d0b0      	beq.n	802dd3c <__ssvfiscanf_r+0x1f4>
 802ddda:	e78d      	b.n	802dcf8 <__ssvfiscanf_r+0x1b0>
 802dddc:	2b04      	cmp	r3, #4
 802ddde:	dc0f      	bgt.n	802de00 <__ssvfiscanf_r+0x2b8>
 802dde0:	466b      	mov	r3, sp
 802dde2:	4622      	mov	r2, r4
 802dde4:	a941      	add	r1, sp, #260	@ 0x104
 802dde6:	4630      	mov	r0, r6
 802dde8:	f000 fb4c 	bl	802e484 <_scanf_i>
 802ddec:	e7b4      	b.n	802dd58 <__ssvfiscanf_r+0x210>
 802ddee:	bf00      	nop
 802ddf0:	0802da99 	.word	0x0802da99
 802ddf4:	0802db0f 	.word	0x0802db0f
 802ddf8:	0803a459 	.word	0x0803a459
 802ddfc:	0803a836 	.word	0x0803a836
 802de00:	4b0a      	ldr	r3, [pc, #40]	@ (802de2c <__ssvfiscanf_r+0x2e4>)
 802de02:	2b00      	cmp	r3, #0
 802de04:	f43f aec5 	beq.w	802db92 <__ssvfiscanf_r+0x4a>
 802de08:	466b      	mov	r3, sp
 802de0a:	4622      	mov	r2, r4
 802de0c:	a941      	add	r1, sp, #260	@ 0x104
 802de0e:	4630      	mov	r0, r6
 802de10:	f3af 8000 	nop.w
 802de14:	e7a0      	b.n	802dd58 <__ssvfiscanf_r+0x210>
 802de16:	89a3      	ldrh	r3, [r4, #12]
 802de18:	065b      	lsls	r3, r3, #25
 802de1a:	f53f af71 	bmi.w	802dd00 <__ssvfiscanf_r+0x1b8>
 802de1e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 802de22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802de26:	9844      	ldr	r0, [sp, #272]	@ 0x110
 802de28:	e7f9      	b.n	802de1e <__ssvfiscanf_r+0x2d6>
 802de2a:	bf00      	nop
 802de2c:	00000000 	.word	0x00000000

0802de30 <__sfputc_r>:
 802de30:	6893      	ldr	r3, [r2, #8]
 802de32:	3b01      	subs	r3, #1
 802de34:	2b00      	cmp	r3, #0
 802de36:	b410      	push	{r4}
 802de38:	6093      	str	r3, [r2, #8]
 802de3a:	da08      	bge.n	802de4e <__sfputc_r+0x1e>
 802de3c:	6994      	ldr	r4, [r2, #24]
 802de3e:	42a3      	cmp	r3, r4
 802de40:	db01      	blt.n	802de46 <__sfputc_r+0x16>
 802de42:	290a      	cmp	r1, #10
 802de44:	d103      	bne.n	802de4e <__sfputc_r+0x1e>
 802de46:	f85d 4b04 	ldr.w	r4, [sp], #4
 802de4a:	f7fd bda0 	b.w	802b98e <__swbuf_r>
 802de4e:	6813      	ldr	r3, [r2, #0]
 802de50:	1c58      	adds	r0, r3, #1
 802de52:	6010      	str	r0, [r2, #0]
 802de54:	7019      	strb	r1, [r3, #0]
 802de56:	4608      	mov	r0, r1
 802de58:	f85d 4b04 	ldr.w	r4, [sp], #4
 802de5c:	4770      	bx	lr

0802de5e <__sfputs_r>:
 802de5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802de60:	4606      	mov	r6, r0
 802de62:	460f      	mov	r7, r1
 802de64:	4614      	mov	r4, r2
 802de66:	18d5      	adds	r5, r2, r3
 802de68:	42ac      	cmp	r4, r5
 802de6a:	d101      	bne.n	802de70 <__sfputs_r+0x12>
 802de6c:	2000      	movs	r0, #0
 802de6e:	e007      	b.n	802de80 <__sfputs_r+0x22>
 802de70:	f814 1b01 	ldrb.w	r1, [r4], #1
 802de74:	463a      	mov	r2, r7
 802de76:	4630      	mov	r0, r6
 802de78:	f7ff ffda 	bl	802de30 <__sfputc_r>
 802de7c:	1c43      	adds	r3, r0, #1
 802de7e:	d1f3      	bne.n	802de68 <__sfputs_r+0xa>
 802de80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802de84 <_vfiprintf_r>:
 802de84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802de88:	460d      	mov	r5, r1
 802de8a:	b09d      	sub	sp, #116	@ 0x74
 802de8c:	4614      	mov	r4, r2
 802de8e:	4698      	mov	r8, r3
 802de90:	4606      	mov	r6, r0
 802de92:	b118      	cbz	r0, 802de9c <_vfiprintf_r+0x18>
 802de94:	6a03      	ldr	r3, [r0, #32]
 802de96:	b90b      	cbnz	r3, 802de9c <_vfiprintf_r+0x18>
 802de98:	f7fd fc2a 	bl	802b6f0 <__sinit>
 802de9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802de9e:	07d9      	lsls	r1, r3, #31
 802dea0:	d405      	bmi.n	802deae <_vfiprintf_r+0x2a>
 802dea2:	89ab      	ldrh	r3, [r5, #12]
 802dea4:	059a      	lsls	r2, r3, #22
 802dea6:	d402      	bmi.n	802deae <_vfiprintf_r+0x2a>
 802dea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802deaa:	f7fe fb59 	bl	802c560 <__retarget_lock_acquire_recursive>
 802deae:	89ab      	ldrh	r3, [r5, #12]
 802deb0:	071b      	lsls	r3, r3, #28
 802deb2:	d501      	bpl.n	802deb8 <_vfiprintf_r+0x34>
 802deb4:	692b      	ldr	r3, [r5, #16]
 802deb6:	b99b      	cbnz	r3, 802dee0 <_vfiprintf_r+0x5c>
 802deb8:	4629      	mov	r1, r5
 802deba:	4630      	mov	r0, r6
 802debc:	f7fd fda6 	bl	802ba0c <__swsetup_r>
 802dec0:	b170      	cbz	r0, 802dee0 <_vfiprintf_r+0x5c>
 802dec2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802dec4:	07dc      	lsls	r4, r3, #31
 802dec6:	d504      	bpl.n	802ded2 <_vfiprintf_r+0x4e>
 802dec8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802decc:	b01d      	add	sp, #116	@ 0x74
 802dece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ded2:	89ab      	ldrh	r3, [r5, #12]
 802ded4:	0598      	lsls	r0, r3, #22
 802ded6:	d4f7      	bmi.n	802dec8 <_vfiprintf_r+0x44>
 802ded8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802deda:	f7fe fb43 	bl	802c564 <__retarget_lock_release_recursive>
 802dede:	e7f3      	b.n	802dec8 <_vfiprintf_r+0x44>
 802dee0:	2300      	movs	r3, #0
 802dee2:	9309      	str	r3, [sp, #36]	@ 0x24
 802dee4:	2320      	movs	r3, #32
 802dee6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802deea:	f8cd 800c 	str.w	r8, [sp, #12]
 802deee:	2330      	movs	r3, #48	@ 0x30
 802def0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802e0a0 <_vfiprintf_r+0x21c>
 802def4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802def8:	f04f 0901 	mov.w	r9, #1
 802defc:	4623      	mov	r3, r4
 802defe:	469a      	mov	sl, r3
 802df00:	f813 2b01 	ldrb.w	r2, [r3], #1
 802df04:	b10a      	cbz	r2, 802df0a <_vfiprintf_r+0x86>
 802df06:	2a25      	cmp	r2, #37	@ 0x25
 802df08:	d1f9      	bne.n	802defe <_vfiprintf_r+0x7a>
 802df0a:	ebba 0b04 	subs.w	fp, sl, r4
 802df0e:	d00b      	beq.n	802df28 <_vfiprintf_r+0xa4>
 802df10:	465b      	mov	r3, fp
 802df12:	4622      	mov	r2, r4
 802df14:	4629      	mov	r1, r5
 802df16:	4630      	mov	r0, r6
 802df18:	f7ff ffa1 	bl	802de5e <__sfputs_r>
 802df1c:	3001      	adds	r0, #1
 802df1e:	f000 80a7 	beq.w	802e070 <_vfiprintf_r+0x1ec>
 802df22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802df24:	445a      	add	r2, fp
 802df26:	9209      	str	r2, [sp, #36]	@ 0x24
 802df28:	f89a 3000 	ldrb.w	r3, [sl]
 802df2c:	2b00      	cmp	r3, #0
 802df2e:	f000 809f 	beq.w	802e070 <_vfiprintf_r+0x1ec>
 802df32:	2300      	movs	r3, #0
 802df34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802df38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802df3c:	f10a 0a01 	add.w	sl, sl, #1
 802df40:	9304      	str	r3, [sp, #16]
 802df42:	9307      	str	r3, [sp, #28]
 802df44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802df48:	931a      	str	r3, [sp, #104]	@ 0x68
 802df4a:	4654      	mov	r4, sl
 802df4c:	2205      	movs	r2, #5
 802df4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802df52:	4853      	ldr	r0, [pc, #332]	@ (802e0a0 <_vfiprintf_r+0x21c>)
 802df54:	f7d2 f984 	bl	8000260 <memchr>
 802df58:	9a04      	ldr	r2, [sp, #16]
 802df5a:	b9d8      	cbnz	r0, 802df94 <_vfiprintf_r+0x110>
 802df5c:	06d1      	lsls	r1, r2, #27
 802df5e:	bf44      	itt	mi
 802df60:	2320      	movmi	r3, #32
 802df62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802df66:	0713      	lsls	r3, r2, #28
 802df68:	bf44      	itt	mi
 802df6a:	232b      	movmi	r3, #43	@ 0x2b
 802df6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802df70:	f89a 3000 	ldrb.w	r3, [sl]
 802df74:	2b2a      	cmp	r3, #42	@ 0x2a
 802df76:	d015      	beq.n	802dfa4 <_vfiprintf_r+0x120>
 802df78:	9a07      	ldr	r2, [sp, #28]
 802df7a:	4654      	mov	r4, sl
 802df7c:	2000      	movs	r0, #0
 802df7e:	f04f 0c0a 	mov.w	ip, #10
 802df82:	4621      	mov	r1, r4
 802df84:	f811 3b01 	ldrb.w	r3, [r1], #1
 802df88:	3b30      	subs	r3, #48	@ 0x30
 802df8a:	2b09      	cmp	r3, #9
 802df8c:	d94b      	bls.n	802e026 <_vfiprintf_r+0x1a2>
 802df8e:	b1b0      	cbz	r0, 802dfbe <_vfiprintf_r+0x13a>
 802df90:	9207      	str	r2, [sp, #28]
 802df92:	e014      	b.n	802dfbe <_vfiprintf_r+0x13a>
 802df94:	eba0 0308 	sub.w	r3, r0, r8
 802df98:	fa09 f303 	lsl.w	r3, r9, r3
 802df9c:	4313      	orrs	r3, r2
 802df9e:	9304      	str	r3, [sp, #16]
 802dfa0:	46a2      	mov	sl, r4
 802dfa2:	e7d2      	b.n	802df4a <_vfiprintf_r+0xc6>
 802dfa4:	9b03      	ldr	r3, [sp, #12]
 802dfa6:	1d19      	adds	r1, r3, #4
 802dfa8:	681b      	ldr	r3, [r3, #0]
 802dfaa:	9103      	str	r1, [sp, #12]
 802dfac:	2b00      	cmp	r3, #0
 802dfae:	bfbb      	ittet	lt
 802dfb0:	425b      	neglt	r3, r3
 802dfb2:	f042 0202 	orrlt.w	r2, r2, #2
 802dfb6:	9307      	strge	r3, [sp, #28]
 802dfb8:	9307      	strlt	r3, [sp, #28]
 802dfba:	bfb8      	it	lt
 802dfbc:	9204      	strlt	r2, [sp, #16]
 802dfbe:	7823      	ldrb	r3, [r4, #0]
 802dfc0:	2b2e      	cmp	r3, #46	@ 0x2e
 802dfc2:	d10a      	bne.n	802dfda <_vfiprintf_r+0x156>
 802dfc4:	7863      	ldrb	r3, [r4, #1]
 802dfc6:	2b2a      	cmp	r3, #42	@ 0x2a
 802dfc8:	d132      	bne.n	802e030 <_vfiprintf_r+0x1ac>
 802dfca:	9b03      	ldr	r3, [sp, #12]
 802dfcc:	1d1a      	adds	r2, r3, #4
 802dfce:	681b      	ldr	r3, [r3, #0]
 802dfd0:	9203      	str	r2, [sp, #12]
 802dfd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802dfd6:	3402      	adds	r4, #2
 802dfd8:	9305      	str	r3, [sp, #20]
 802dfda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802e0b0 <_vfiprintf_r+0x22c>
 802dfde:	7821      	ldrb	r1, [r4, #0]
 802dfe0:	2203      	movs	r2, #3
 802dfe2:	4650      	mov	r0, sl
 802dfe4:	f7d2 f93c 	bl	8000260 <memchr>
 802dfe8:	b138      	cbz	r0, 802dffa <_vfiprintf_r+0x176>
 802dfea:	9b04      	ldr	r3, [sp, #16]
 802dfec:	eba0 000a 	sub.w	r0, r0, sl
 802dff0:	2240      	movs	r2, #64	@ 0x40
 802dff2:	4082      	lsls	r2, r0
 802dff4:	4313      	orrs	r3, r2
 802dff6:	3401      	adds	r4, #1
 802dff8:	9304      	str	r3, [sp, #16]
 802dffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 802dffe:	4829      	ldr	r0, [pc, #164]	@ (802e0a4 <_vfiprintf_r+0x220>)
 802e000:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802e004:	2206      	movs	r2, #6
 802e006:	f7d2 f92b 	bl	8000260 <memchr>
 802e00a:	2800      	cmp	r0, #0
 802e00c:	d03f      	beq.n	802e08e <_vfiprintf_r+0x20a>
 802e00e:	4b26      	ldr	r3, [pc, #152]	@ (802e0a8 <_vfiprintf_r+0x224>)
 802e010:	bb1b      	cbnz	r3, 802e05a <_vfiprintf_r+0x1d6>
 802e012:	9b03      	ldr	r3, [sp, #12]
 802e014:	3307      	adds	r3, #7
 802e016:	f023 0307 	bic.w	r3, r3, #7
 802e01a:	3308      	adds	r3, #8
 802e01c:	9303      	str	r3, [sp, #12]
 802e01e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e020:	443b      	add	r3, r7
 802e022:	9309      	str	r3, [sp, #36]	@ 0x24
 802e024:	e76a      	b.n	802defc <_vfiprintf_r+0x78>
 802e026:	fb0c 3202 	mla	r2, ip, r2, r3
 802e02a:	460c      	mov	r4, r1
 802e02c:	2001      	movs	r0, #1
 802e02e:	e7a8      	b.n	802df82 <_vfiprintf_r+0xfe>
 802e030:	2300      	movs	r3, #0
 802e032:	3401      	adds	r4, #1
 802e034:	9305      	str	r3, [sp, #20]
 802e036:	4619      	mov	r1, r3
 802e038:	f04f 0c0a 	mov.w	ip, #10
 802e03c:	4620      	mov	r0, r4
 802e03e:	f810 2b01 	ldrb.w	r2, [r0], #1
 802e042:	3a30      	subs	r2, #48	@ 0x30
 802e044:	2a09      	cmp	r2, #9
 802e046:	d903      	bls.n	802e050 <_vfiprintf_r+0x1cc>
 802e048:	2b00      	cmp	r3, #0
 802e04a:	d0c6      	beq.n	802dfda <_vfiprintf_r+0x156>
 802e04c:	9105      	str	r1, [sp, #20]
 802e04e:	e7c4      	b.n	802dfda <_vfiprintf_r+0x156>
 802e050:	fb0c 2101 	mla	r1, ip, r1, r2
 802e054:	4604      	mov	r4, r0
 802e056:	2301      	movs	r3, #1
 802e058:	e7f0      	b.n	802e03c <_vfiprintf_r+0x1b8>
 802e05a:	ab03      	add	r3, sp, #12
 802e05c:	9300      	str	r3, [sp, #0]
 802e05e:	462a      	mov	r2, r5
 802e060:	4b12      	ldr	r3, [pc, #72]	@ (802e0ac <_vfiprintf_r+0x228>)
 802e062:	a904      	add	r1, sp, #16
 802e064:	4630      	mov	r0, r6
 802e066:	f3af 8000 	nop.w
 802e06a:	4607      	mov	r7, r0
 802e06c:	1c78      	adds	r0, r7, #1
 802e06e:	d1d6      	bne.n	802e01e <_vfiprintf_r+0x19a>
 802e070:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802e072:	07d9      	lsls	r1, r3, #31
 802e074:	d405      	bmi.n	802e082 <_vfiprintf_r+0x1fe>
 802e076:	89ab      	ldrh	r3, [r5, #12]
 802e078:	059a      	lsls	r2, r3, #22
 802e07a:	d402      	bmi.n	802e082 <_vfiprintf_r+0x1fe>
 802e07c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802e07e:	f7fe fa71 	bl	802c564 <__retarget_lock_release_recursive>
 802e082:	89ab      	ldrh	r3, [r5, #12]
 802e084:	065b      	lsls	r3, r3, #25
 802e086:	f53f af1f 	bmi.w	802dec8 <_vfiprintf_r+0x44>
 802e08a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802e08c:	e71e      	b.n	802decc <_vfiprintf_r+0x48>
 802e08e:	ab03      	add	r3, sp, #12
 802e090:	9300      	str	r3, [sp, #0]
 802e092:	462a      	mov	r2, r5
 802e094:	4b05      	ldr	r3, [pc, #20]	@ (802e0ac <_vfiprintf_r+0x228>)
 802e096:	a904      	add	r1, sp, #16
 802e098:	4630      	mov	r0, r6
 802e09a:	f000 f879 	bl	802e190 <_printf_i>
 802e09e:	e7e4      	b.n	802e06a <_vfiprintf_r+0x1e6>
 802e0a0:	0803a830 	.word	0x0803a830
 802e0a4:	0803a83a 	.word	0x0803a83a
 802e0a8:	00000000 	.word	0x00000000
 802e0ac:	0802de5f 	.word	0x0802de5f
 802e0b0:	0803a836 	.word	0x0803a836

0802e0b4 <_printf_common>:
 802e0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e0b8:	4616      	mov	r6, r2
 802e0ba:	4698      	mov	r8, r3
 802e0bc:	688a      	ldr	r2, [r1, #8]
 802e0be:	690b      	ldr	r3, [r1, #16]
 802e0c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802e0c4:	4293      	cmp	r3, r2
 802e0c6:	bfb8      	it	lt
 802e0c8:	4613      	movlt	r3, r2
 802e0ca:	6033      	str	r3, [r6, #0]
 802e0cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802e0d0:	4607      	mov	r7, r0
 802e0d2:	460c      	mov	r4, r1
 802e0d4:	b10a      	cbz	r2, 802e0da <_printf_common+0x26>
 802e0d6:	3301      	adds	r3, #1
 802e0d8:	6033      	str	r3, [r6, #0]
 802e0da:	6823      	ldr	r3, [r4, #0]
 802e0dc:	0699      	lsls	r1, r3, #26
 802e0de:	bf42      	ittt	mi
 802e0e0:	6833      	ldrmi	r3, [r6, #0]
 802e0e2:	3302      	addmi	r3, #2
 802e0e4:	6033      	strmi	r3, [r6, #0]
 802e0e6:	6825      	ldr	r5, [r4, #0]
 802e0e8:	f015 0506 	ands.w	r5, r5, #6
 802e0ec:	d106      	bne.n	802e0fc <_printf_common+0x48>
 802e0ee:	f104 0a19 	add.w	sl, r4, #25
 802e0f2:	68e3      	ldr	r3, [r4, #12]
 802e0f4:	6832      	ldr	r2, [r6, #0]
 802e0f6:	1a9b      	subs	r3, r3, r2
 802e0f8:	42ab      	cmp	r3, r5
 802e0fa:	dc26      	bgt.n	802e14a <_printf_common+0x96>
 802e0fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802e100:	6822      	ldr	r2, [r4, #0]
 802e102:	3b00      	subs	r3, #0
 802e104:	bf18      	it	ne
 802e106:	2301      	movne	r3, #1
 802e108:	0692      	lsls	r2, r2, #26
 802e10a:	d42b      	bmi.n	802e164 <_printf_common+0xb0>
 802e10c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802e110:	4641      	mov	r1, r8
 802e112:	4638      	mov	r0, r7
 802e114:	47c8      	blx	r9
 802e116:	3001      	adds	r0, #1
 802e118:	d01e      	beq.n	802e158 <_printf_common+0xa4>
 802e11a:	6823      	ldr	r3, [r4, #0]
 802e11c:	6922      	ldr	r2, [r4, #16]
 802e11e:	f003 0306 	and.w	r3, r3, #6
 802e122:	2b04      	cmp	r3, #4
 802e124:	bf02      	ittt	eq
 802e126:	68e5      	ldreq	r5, [r4, #12]
 802e128:	6833      	ldreq	r3, [r6, #0]
 802e12a:	1aed      	subeq	r5, r5, r3
 802e12c:	68a3      	ldr	r3, [r4, #8]
 802e12e:	bf0c      	ite	eq
 802e130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802e134:	2500      	movne	r5, #0
 802e136:	4293      	cmp	r3, r2
 802e138:	bfc4      	itt	gt
 802e13a:	1a9b      	subgt	r3, r3, r2
 802e13c:	18ed      	addgt	r5, r5, r3
 802e13e:	2600      	movs	r6, #0
 802e140:	341a      	adds	r4, #26
 802e142:	42b5      	cmp	r5, r6
 802e144:	d11a      	bne.n	802e17c <_printf_common+0xc8>
 802e146:	2000      	movs	r0, #0
 802e148:	e008      	b.n	802e15c <_printf_common+0xa8>
 802e14a:	2301      	movs	r3, #1
 802e14c:	4652      	mov	r2, sl
 802e14e:	4641      	mov	r1, r8
 802e150:	4638      	mov	r0, r7
 802e152:	47c8      	blx	r9
 802e154:	3001      	adds	r0, #1
 802e156:	d103      	bne.n	802e160 <_printf_common+0xac>
 802e158:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e160:	3501      	adds	r5, #1
 802e162:	e7c6      	b.n	802e0f2 <_printf_common+0x3e>
 802e164:	18e1      	adds	r1, r4, r3
 802e166:	1c5a      	adds	r2, r3, #1
 802e168:	2030      	movs	r0, #48	@ 0x30
 802e16a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802e16e:	4422      	add	r2, r4
 802e170:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802e174:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802e178:	3302      	adds	r3, #2
 802e17a:	e7c7      	b.n	802e10c <_printf_common+0x58>
 802e17c:	2301      	movs	r3, #1
 802e17e:	4622      	mov	r2, r4
 802e180:	4641      	mov	r1, r8
 802e182:	4638      	mov	r0, r7
 802e184:	47c8      	blx	r9
 802e186:	3001      	adds	r0, #1
 802e188:	d0e6      	beq.n	802e158 <_printf_common+0xa4>
 802e18a:	3601      	adds	r6, #1
 802e18c:	e7d9      	b.n	802e142 <_printf_common+0x8e>
	...

0802e190 <_printf_i>:
 802e190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802e194:	7e0f      	ldrb	r7, [r1, #24]
 802e196:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802e198:	2f78      	cmp	r7, #120	@ 0x78
 802e19a:	4691      	mov	r9, r2
 802e19c:	4680      	mov	r8, r0
 802e19e:	460c      	mov	r4, r1
 802e1a0:	469a      	mov	sl, r3
 802e1a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802e1a6:	d807      	bhi.n	802e1b8 <_printf_i+0x28>
 802e1a8:	2f62      	cmp	r7, #98	@ 0x62
 802e1aa:	d80a      	bhi.n	802e1c2 <_printf_i+0x32>
 802e1ac:	2f00      	cmp	r7, #0
 802e1ae:	f000 80d2 	beq.w	802e356 <_printf_i+0x1c6>
 802e1b2:	2f58      	cmp	r7, #88	@ 0x58
 802e1b4:	f000 80b9 	beq.w	802e32a <_printf_i+0x19a>
 802e1b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802e1bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802e1c0:	e03a      	b.n	802e238 <_printf_i+0xa8>
 802e1c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802e1c6:	2b15      	cmp	r3, #21
 802e1c8:	d8f6      	bhi.n	802e1b8 <_printf_i+0x28>
 802e1ca:	a101      	add	r1, pc, #4	@ (adr r1, 802e1d0 <_printf_i+0x40>)
 802e1cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802e1d0:	0802e229 	.word	0x0802e229
 802e1d4:	0802e23d 	.word	0x0802e23d
 802e1d8:	0802e1b9 	.word	0x0802e1b9
 802e1dc:	0802e1b9 	.word	0x0802e1b9
 802e1e0:	0802e1b9 	.word	0x0802e1b9
 802e1e4:	0802e1b9 	.word	0x0802e1b9
 802e1e8:	0802e23d 	.word	0x0802e23d
 802e1ec:	0802e1b9 	.word	0x0802e1b9
 802e1f0:	0802e1b9 	.word	0x0802e1b9
 802e1f4:	0802e1b9 	.word	0x0802e1b9
 802e1f8:	0802e1b9 	.word	0x0802e1b9
 802e1fc:	0802e33d 	.word	0x0802e33d
 802e200:	0802e267 	.word	0x0802e267
 802e204:	0802e2f7 	.word	0x0802e2f7
 802e208:	0802e1b9 	.word	0x0802e1b9
 802e20c:	0802e1b9 	.word	0x0802e1b9
 802e210:	0802e35f 	.word	0x0802e35f
 802e214:	0802e1b9 	.word	0x0802e1b9
 802e218:	0802e267 	.word	0x0802e267
 802e21c:	0802e1b9 	.word	0x0802e1b9
 802e220:	0802e1b9 	.word	0x0802e1b9
 802e224:	0802e2ff 	.word	0x0802e2ff
 802e228:	6833      	ldr	r3, [r6, #0]
 802e22a:	1d1a      	adds	r2, r3, #4
 802e22c:	681b      	ldr	r3, [r3, #0]
 802e22e:	6032      	str	r2, [r6, #0]
 802e230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802e234:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802e238:	2301      	movs	r3, #1
 802e23a:	e09d      	b.n	802e378 <_printf_i+0x1e8>
 802e23c:	6833      	ldr	r3, [r6, #0]
 802e23e:	6820      	ldr	r0, [r4, #0]
 802e240:	1d19      	adds	r1, r3, #4
 802e242:	6031      	str	r1, [r6, #0]
 802e244:	0606      	lsls	r6, r0, #24
 802e246:	d501      	bpl.n	802e24c <_printf_i+0xbc>
 802e248:	681d      	ldr	r5, [r3, #0]
 802e24a:	e003      	b.n	802e254 <_printf_i+0xc4>
 802e24c:	0645      	lsls	r5, r0, #25
 802e24e:	d5fb      	bpl.n	802e248 <_printf_i+0xb8>
 802e250:	f9b3 5000 	ldrsh.w	r5, [r3]
 802e254:	2d00      	cmp	r5, #0
 802e256:	da03      	bge.n	802e260 <_printf_i+0xd0>
 802e258:	232d      	movs	r3, #45	@ 0x2d
 802e25a:	426d      	negs	r5, r5
 802e25c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802e260:	4859      	ldr	r0, [pc, #356]	@ (802e3c8 <_printf_i+0x238>)
 802e262:	230a      	movs	r3, #10
 802e264:	e011      	b.n	802e28a <_printf_i+0xfa>
 802e266:	6821      	ldr	r1, [r4, #0]
 802e268:	6833      	ldr	r3, [r6, #0]
 802e26a:	0608      	lsls	r0, r1, #24
 802e26c:	f853 5b04 	ldr.w	r5, [r3], #4
 802e270:	d402      	bmi.n	802e278 <_printf_i+0xe8>
 802e272:	0649      	lsls	r1, r1, #25
 802e274:	bf48      	it	mi
 802e276:	b2ad      	uxthmi	r5, r5
 802e278:	2f6f      	cmp	r7, #111	@ 0x6f
 802e27a:	4853      	ldr	r0, [pc, #332]	@ (802e3c8 <_printf_i+0x238>)
 802e27c:	6033      	str	r3, [r6, #0]
 802e27e:	bf14      	ite	ne
 802e280:	230a      	movne	r3, #10
 802e282:	2308      	moveq	r3, #8
 802e284:	2100      	movs	r1, #0
 802e286:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802e28a:	6866      	ldr	r6, [r4, #4]
 802e28c:	60a6      	str	r6, [r4, #8]
 802e28e:	2e00      	cmp	r6, #0
 802e290:	bfa2      	ittt	ge
 802e292:	6821      	ldrge	r1, [r4, #0]
 802e294:	f021 0104 	bicge.w	r1, r1, #4
 802e298:	6021      	strge	r1, [r4, #0]
 802e29a:	b90d      	cbnz	r5, 802e2a0 <_printf_i+0x110>
 802e29c:	2e00      	cmp	r6, #0
 802e29e:	d04b      	beq.n	802e338 <_printf_i+0x1a8>
 802e2a0:	4616      	mov	r6, r2
 802e2a2:	fbb5 f1f3 	udiv	r1, r5, r3
 802e2a6:	fb03 5711 	mls	r7, r3, r1, r5
 802e2aa:	5dc7      	ldrb	r7, [r0, r7]
 802e2ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802e2b0:	462f      	mov	r7, r5
 802e2b2:	42bb      	cmp	r3, r7
 802e2b4:	460d      	mov	r5, r1
 802e2b6:	d9f4      	bls.n	802e2a2 <_printf_i+0x112>
 802e2b8:	2b08      	cmp	r3, #8
 802e2ba:	d10b      	bne.n	802e2d4 <_printf_i+0x144>
 802e2bc:	6823      	ldr	r3, [r4, #0]
 802e2be:	07df      	lsls	r7, r3, #31
 802e2c0:	d508      	bpl.n	802e2d4 <_printf_i+0x144>
 802e2c2:	6923      	ldr	r3, [r4, #16]
 802e2c4:	6861      	ldr	r1, [r4, #4]
 802e2c6:	4299      	cmp	r1, r3
 802e2c8:	bfde      	ittt	le
 802e2ca:	2330      	movle	r3, #48	@ 0x30
 802e2cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 802e2d0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 802e2d4:	1b92      	subs	r2, r2, r6
 802e2d6:	6122      	str	r2, [r4, #16]
 802e2d8:	f8cd a000 	str.w	sl, [sp]
 802e2dc:	464b      	mov	r3, r9
 802e2de:	aa03      	add	r2, sp, #12
 802e2e0:	4621      	mov	r1, r4
 802e2e2:	4640      	mov	r0, r8
 802e2e4:	f7ff fee6 	bl	802e0b4 <_printf_common>
 802e2e8:	3001      	adds	r0, #1
 802e2ea:	d14a      	bne.n	802e382 <_printf_i+0x1f2>
 802e2ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e2f0:	b004      	add	sp, #16
 802e2f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e2f6:	6823      	ldr	r3, [r4, #0]
 802e2f8:	f043 0320 	orr.w	r3, r3, #32
 802e2fc:	6023      	str	r3, [r4, #0]
 802e2fe:	4833      	ldr	r0, [pc, #204]	@ (802e3cc <_printf_i+0x23c>)
 802e300:	2778      	movs	r7, #120	@ 0x78
 802e302:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802e306:	6823      	ldr	r3, [r4, #0]
 802e308:	6831      	ldr	r1, [r6, #0]
 802e30a:	061f      	lsls	r7, r3, #24
 802e30c:	f851 5b04 	ldr.w	r5, [r1], #4
 802e310:	d402      	bmi.n	802e318 <_printf_i+0x188>
 802e312:	065f      	lsls	r7, r3, #25
 802e314:	bf48      	it	mi
 802e316:	b2ad      	uxthmi	r5, r5
 802e318:	6031      	str	r1, [r6, #0]
 802e31a:	07d9      	lsls	r1, r3, #31
 802e31c:	bf44      	itt	mi
 802e31e:	f043 0320 	orrmi.w	r3, r3, #32
 802e322:	6023      	strmi	r3, [r4, #0]
 802e324:	b11d      	cbz	r5, 802e32e <_printf_i+0x19e>
 802e326:	2310      	movs	r3, #16
 802e328:	e7ac      	b.n	802e284 <_printf_i+0xf4>
 802e32a:	4827      	ldr	r0, [pc, #156]	@ (802e3c8 <_printf_i+0x238>)
 802e32c:	e7e9      	b.n	802e302 <_printf_i+0x172>
 802e32e:	6823      	ldr	r3, [r4, #0]
 802e330:	f023 0320 	bic.w	r3, r3, #32
 802e334:	6023      	str	r3, [r4, #0]
 802e336:	e7f6      	b.n	802e326 <_printf_i+0x196>
 802e338:	4616      	mov	r6, r2
 802e33a:	e7bd      	b.n	802e2b8 <_printf_i+0x128>
 802e33c:	6833      	ldr	r3, [r6, #0]
 802e33e:	6825      	ldr	r5, [r4, #0]
 802e340:	6961      	ldr	r1, [r4, #20]
 802e342:	1d18      	adds	r0, r3, #4
 802e344:	6030      	str	r0, [r6, #0]
 802e346:	062e      	lsls	r6, r5, #24
 802e348:	681b      	ldr	r3, [r3, #0]
 802e34a:	d501      	bpl.n	802e350 <_printf_i+0x1c0>
 802e34c:	6019      	str	r1, [r3, #0]
 802e34e:	e002      	b.n	802e356 <_printf_i+0x1c6>
 802e350:	0668      	lsls	r0, r5, #25
 802e352:	d5fb      	bpl.n	802e34c <_printf_i+0x1bc>
 802e354:	8019      	strh	r1, [r3, #0]
 802e356:	2300      	movs	r3, #0
 802e358:	6123      	str	r3, [r4, #16]
 802e35a:	4616      	mov	r6, r2
 802e35c:	e7bc      	b.n	802e2d8 <_printf_i+0x148>
 802e35e:	6833      	ldr	r3, [r6, #0]
 802e360:	1d1a      	adds	r2, r3, #4
 802e362:	6032      	str	r2, [r6, #0]
 802e364:	681e      	ldr	r6, [r3, #0]
 802e366:	6862      	ldr	r2, [r4, #4]
 802e368:	2100      	movs	r1, #0
 802e36a:	4630      	mov	r0, r6
 802e36c:	f7d1 ff78 	bl	8000260 <memchr>
 802e370:	b108      	cbz	r0, 802e376 <_printf_i+0x1e6>
 802e372:	1b80      	subs	r0, r0, r6
 802e374:	6060      	str	r0, [r4, #4]
 802e376:	6863      	ldr	r3, [r4, #4]
 802e378:	6123      	str	r3, [r4, #16]
 802e37a:	2300      	movs	r3, #0
 802e37c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802e380:	e7aa      	b.n	802e2d8 <_printf_i+0x148>
 802e382:	6923      	ldr	r3, [r4, #16]
 802e384:	4632      	mov	r2, r6
 802e386:	4649      	mov	r1, r9
 802e388:	4640      	mov	r0, r8
 802e38a:	47d0      	blx	sl
 802e38c:	3001      	adds	r0, #1
 802e38e:	d0ad      	beq.n	802e2ec <_printf_i+0x15c>
 802e390:	6823      	ldr	r3, [r4, #0]
 802e392:	079b      	lsls	r3, r3, #30
 802e394:	d413      	bmi.n	802e3be <_printf_i+0x22e>
 802e396:	68e0      	ldr	r0, [r4, #12]
 802e398:	9b03      	ldr	r3, [sp, #12]
 802e39a:	4298      	cmp	r0, r3
 802e39c:	bfb8      	it	lt
 802e39e:	4618      	movlt	r0, r3
 802e3a0:	e7a6      	b.n	802e2f0 <_printf_i+0x160>
 802e3a2:	2301      	movs	r3, #1
 802e3a4:	4632      	mov	r2, r6
 802e3a6:	4649      	mov	r1, r9
 802e3a8:	4640      	mov	r0, r8
 802e3aa:	47d0      	blx	sl
 802e3ac:	3001      	adds	r0, #1
 802e3ae:	d09d      	beq.n	802e2ec <_printf_i+0x15c>
 802e3b0:	3501      	adds	r5, #1
 802e3b2:	68e3      	ldr	r3, [r4, #12]
 802e3b4:	9903      	ldr	r1, [sp, #12]
 802e3b6:	1a5b      	subs	r3, r3, r1
 802e3b8:	42ab      	cmp	r3, r5
 802e3ba:	dcf2      	bgt.n	802e3a2 <_printf_i+0x212>
 802e3bc:	e7eb      	b.n	802e396 <_printf_i+0x206>
 802e3be:	2500      	movs	r5, #0
 802e3c0:	f104 0619 	add.w	r6, r4, #25
 802e3c4:	e7f5      	b.n	802e3b2 <_printf_i+0x222>
 802e3c6:	bf00      	nop
 802e3c8:	0803a841 	.word	0x0803a841
 802e3cc:	0803a852 	.word	0x0803a852

0802e3d0 <_scanf_chars>:
 802e3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e3d4:	4615      	mov	r5, r2
 802e3d6:	688a      	ldr	r2, [r1, #8]
 802e3d8:	4680      	mov	r8, r0
 802e3da:	460c      	mov	r4, r1
 802e3dc:	b932      	cbnz	r2, 802e3ec <_scanf_chars+0x1c>
 802e3de:	698a      	ldr	r2, [r1, #24]
 802e3e0:	2a00      	cmp	r2, #0
 802e3e2:	bf14      	ite	ne
 802e3e4:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 802e3e8:	2201      	moveq	r2, #1
 802e3ea:	608a      	str	r2, [r1, #8]
 802e3ec:	6822      	ldr	r2, [r4, #0]
 802e3ee:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 802e480 <_scanf_chars+0xb0>
 802e3f2:	06d1      	lsls	r1, r2, #27
 802e3f4:	bf5f      	itttt	pl
 802e3f6:	681a      	ldrpl	r2, [r3, #0]
 802e3f8:	1d11      	addpl	r1, r2, #4
 802e3fa:	6019      	strpl	r1, [r3, #0]
 802e3fc:	6816      	ldrpl	r6, [r2, #0]
 802e3fe:	2700      	movs	r7, #0
 802e400:	69a0      	ldr	r0, [r4, #24]
 802e402:	b188      	cbz	r0, 802e428 <_scanf_chars+0x58>
 802e404:	2801      	cmp	r0, #1
 802e406:	d107      	bne.n	802e418 <_scanf_chars+0x48>
 802e408:	682b      	ldr	r3, [r5, #0]
 802e40a:	781a      	ldrb	r2, [r3, #0]
 802e40c:	6963      	ldr	r3, [r4, #20]
 802e40e:	5c9b      	ldrb	r3, [r3, r2]
 802e410:	b953      	cbnz	r3, 802e428 <_scanf_chars+0x58>
 802e412:	2f00      	cmp	r7, #0
 802e414:	d031      	beq.n	802e47a <_scanf_chars+0xaa>
 802e416:	e022      	b.n	802e45e <_scanf_chars+0x8e>
 802e418:	2802      	cmp	r0, #2
 802e41a:	d120      	bne.n	802e45e <_scanf_chars+0x8e>
 802e41c:	682b      	ldr	r3, [r5, #0]
 802e41e:	781b      	ldrb	r3, [r3, #0]
 802e420:	f819 3003 	ldrb.w	r3, [r9, r3]
 802e424:	071b      	lsls	r3, r3, #28
 802e426:	d41a      	bmi.n	802e45e <_scanf_chars+0x8e>
 802e428:	6823      	ldr	r3, [r4, #0]
 802e42a:	06da      	lsls	r2, r3, #27
 802e42c:	bf5e      	ittt	pl
 802e42e:	682b      	ldrpl	r3, [r5, #0]
 802e430:	781b      	ldrbpl	r3, [r3, #0]
 802e432:	f806 3b01 	strbpl.w	r3, [r6], #1
 802e436:	682a      	ldr	r2, [r5, #0]
 802e438:	686b      	ldr	r3, [r5, #4]
 802e43a:	3201      	adds	r2, #1
 802e43c:	602a      	str	r2, [r5, #0]
 802e43e:	68a2      	ldr	r2, [r4, #8]
 802e440:	3b01      	subs	r3, #1
 802e442:	3a01      	subs	r2, #1
 802e444:	606b      	str	r3, [r5, #4]
 802e446:	3701      	adds	r7, #1
 802e448:	60a2      	str	r2, [r4, #8]
 802e44a:	b142      	cbz	r2, 802e45e <_scanf_chars+0x8e>
 802e44c:	2b00      	cmp	r3, #0
 802e44e:	dcd7      	bgt.n	802e400 <_scanf_chars+0x30>
 802e450:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 802e454:	4629      	mov	r1, r5
 802e456:	4640      	mov	r0, r8
 802e458:	4798      	blx	r3
 802e45a:	2800      	cmp	r0, #0
 802e45c:	d0d0      	beq.n	802e400 <_scanf_chars+0x30>
 802e45e:	6823      	ldr	r3, [r4, #0]
 802e460:	f013 0310 	ands.w	r3, r3, #16
 802e464:	d105      	bne.n	802e472 <_scanf_chars+0xa2>
 802e466:	68e2      	ldr	r2, [r4, #12]
 802e468:	3201      	adds	r2, #1
 802e46a:	60e2      	str	r2, [r4, #12]
 802e46c:	69a2      	ldr	r2, [r4, #24]
 802e46e:	b102      	cbz	r2, 802e472 <_scanf_chars+0xa2>
 802e470:	7033      	strb	r3, [r6, #0]
 802e472:	6923      	ldr	r3, [r4, #16]
 802e474:	443b      	add	r3, r7
 802e476:	6123      	str	r3, [r4, #16]
 802e478:	2000      	movs	r0, #0
 802e47a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e47e:	bf00      	nop
 802e480:	0803a459 	.word	0x0803a459

0802e484 <_scanf_i>:
 802e484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e488:	4698      	mov	r8, r3
 802e48a:	4b74      	ldr	r3, [pc, #464]	@ (802e65c <_scanf_i+0x1d8>)
 802e48c:	460c      	mov	r4, r1
 802e48e:	4682      	mov	sl, r0
 802e490:	4616      	mov	r6, r2
 802e492:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802e496:	b087      	sub	sp, #28
 802e498:	ab03      	add	r3, sp, #12
 802e49a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802e49e:	4b70      	ldr	r3, [pc, #448]	@ (802e660 <_scanf_i+0x1dc>)
 802e4a0:	69a1      	ldr	r1, [r4, #24]
 802e4a2:	4a70      	ldr	r2, [pc, #448]	@ (802e664 <_scanf_i+0x1e0>)
 802e4a4:	2903      	cmp	r1, #3
 802e4a6:	bf08      	it	eq
 802e4a8:	461a      	moveq	r2, r3
 802e4aa:	68a3      	ldr	r3, [r4, #8]
 802e4ac:	9201      	str	r2, [sp, #4]
 802e4ae:	1e5a      	subs	r2, r3, #1
 802e4b0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 802e4b4:	bf88      	it	hi
 802e4b6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 802e4ba:	4627      	mov	r7, r4
 802e4bc:	bf82      	ittt	hi
 802e4be:	eb03 0905 	addhi.w	r9, r3, r5
 802e4c2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 802e4c6:	60a3      	strhi	r3, [r4, #8]
 802e4c8:	f857 3b1c 	ldr.w	r3, [r7], #28
 802e4cc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 802e4d0:	bf98      	it	ls
 802e4d2:	f04f 0900 	movls.w	r9, #0
 802e4d6:	6023      	str	r3, [r4, #0]
 802e4d8:	463d      	mov	r5, r7
 802e4da:	f04f 0b00 	mov.w	fp, #0
 802e4de:	6831      	ldr	r1, [r6, #0]
 802e4e0:	ab03      	add	r3, sp, #12
 802e4e2:	7809      	ldrb	r1, [r1, #0]
 802e4e4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802e4e8:	2202      	movs	r2, #2
 802e4ea:	f7d1 feb9 	bl	8000260 <memchr>
 802e4ee:	b328      	cbz	r0, 802e53c <_scanf_i+0xb8>
 802e4f0:	f1bb 0f01 	cmp.w	fp, #1
 802e4f4:	d159      	bne.n	802e5aa <_scanf_i+0x126>
 802e4f6:	6862      	ldr	r2, [r4, #4]
 802e4f8:	b92a      	cbnz	r2, 802e506 <_scanf_i+0x82>
 802e4fa:	6822      	ldr	r2, [r4, #0]
 802e4fc:	2108      	movs	r1, #8
 802e4fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802e502:	6061      	str	r1, [r4, #4]
 802e504:	6022      	str	r2, [r4, #0]
 802e506:	6822      	ldr	r2, [r4, #0]
 802e508:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 802e50c:	6022      	str	r2, [r4, #0]
 802e50e:	68a2      	ldr	r2, [r4, #8]
 802e510:	1e51      	subs	r1, r2, #1
 802e512:	60a1      	str	r1, [r4, #8]
 802e514:	b192      	cbz	r2, 802e53c <_scanf_i+0xb8>
 802e516:	6832      	ldr	r2, [r6, #0]
 802e518:	1c51      	adds	r1, r2, #1
 802e51a:	6031      	str	r1, [r6, #0]
 802e51c:	7812      	ldrb	r2, [r2, #0]
 802e51e:	f805 2b01 	strb.w	r2, [r5], #1
 802e522:	6872      	ldr	r2, [r6, #4]
 802e524:	3a01      	subs	r2, #1
 802e526:	2a00      	cmp	r2, #0
 802e528:	6072      	str	r2, [r6, #4]
 802e52a:	dc07      	bgt.n	802e53c <_scanf_i+0xb8>
 802e52c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 802e530:	4631      	mov	r1, r6
 802e532:	4650      	mov	r0, sl
 802e534:	4790      	blx	r2
 802e536:	2800      	cmp	r0, #0
 802e538:	f040 8085 	bne.w	802e646 <_scanf_i+0x1c2>
 802e53c:	f10b 0b01 	add.w	fp, fp, #1
 802e540:	f1bb 0f03 	cmp.w	fp, #3
 802e544:	d1cb      	bne.n	802e4de <_scanf_i+0x5a>
 802e546:	6863      	ldr	r3, [r4, #4]
 802e548:	b90b      	cbnz	r3, 802e54e <_scanf_i+0xca>
 802e54a:	230a      	movs	r3, #10
 802e54c:	6063      	str	r3, [r4, #4]
 802e54e:	6863      	ldr	r3, [r4, #4]
 802e550:	4945      	ldr	r1, [pc, #276]	@ (802e668 <_scanf_i+0x1e4>)
 802e552:	6960      	ldr	r0, [r4, #20]
 802e554:	1ac9      	subs	r1, r1, r3
 802e556:	f000 f9cb 	bl	802e8f0 <__sccl>
 802e55a:	f04f 0b00 	mov.w	fp, #0
 802e55e:	68a3      	ldr	r3, [r4, #8]
 802e560:	6822      	ldr	r2, [r4, #0]
 802e562:	2b00      	cmp	r3, #0
 802e564:	d03d      	beq.n	802e5e2 <_scanf_i+0x15e>
 802e566:	6831      	ldr	r1, [r6, #0]
 802e568:	6960      	ldr	r0, [r4, #20]
 802e56a:	f891 c000 	ldrb.w	ip, [r1]
 802e56e:	f810 000c 	ldrb.w	r0, [r0, ip]
 802e572:	2800      	cmp	r0, #0
 802e574:	d035      	beq.n	802e5e2 <_scanf_i+0x15e>
 802e576:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 802e57a:	d124      	bne.n	802e5c6 <_scanf_i+0x142>
 802e57c:	0510      	lsls	r0, r2, #20
 802e57e:	d522      	bpl.n	802e5c6 <_scanf_i+0x142>
 802e580:	f10b 0b01 	add.w	fp, fp, #1
 802e584:	f1b9 0f00 	cmp.w	r9, #0
 802e588:	d003      	beq.n	802e592 <_scanf_i+0x10e>
 802e58a:	3301      	adds	r3, #1
 802e58c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 802e590:	60a3      	str	r3, [r4, #8]
 802e592:	6873      	ldr	r3, [r6, #4]
 802e594:	3b01      	subs	r3, #1
 802e596:	2b00      	cmp	r3, #0
 802e598:	6073      	str	r3, [r6, #4]
 802e59a:	dd1b      	ble.n	802e5d4 <_scanf_i+0x150>
 802e59c:	6833      	ldr	r3, [r6, #0]
 802e59e:	3301      	adds	r3, #1
 802e5a0:	6033      	str	r3, [r6, #0]
 802e5a2:	68a3      	ldr	r3, [r4, #8]
 802e5a4:	3b01      	subs	r3, #1
 802e5a6:	60a3      	str	r3, [r4, #8]
 802e5a8:	e7d9      	b.n	802e55e <_scanf_i+0xda>
 802e5aa:	f1bb 0f02 	cmp.w	fp, #2
 802e5ae:	d1ae      	bne.n	802e50e <_scanf_i+0x8a>
 802e5b0:	6822      	ldr	r2, [r4, #0]
 802e5b2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 802e5b6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802e5ba:	d1bf      	bne.n	802e53c <_scanf_i+0xb8>
 802e5bc:	2110      	movs	r1, #16
 802e5be:	6061      	str	r1, [r4, #4]
 802e5c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 802e5c4:	e7a2      	b.n	802e50c <_scanf_i+0x88>
 802e5c6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 802e5ca:	6022      	str	r2, [r4, #0]
 802e5cc:	780b      	ldrb	r3, [r1, #0]
 802e5ce:	f805 3b01 	strb.w	r3, [r5], #1
 802e5d2:	e7de      	b.n	802e592 <_scanf_i+0x10e>
 802e5d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 802e5d8:	4631      	mov	r1, r6
 802e5da:	4650      	mov	r0, sl
 802e5dc:	4798      	blx	r3
 802e5de:	2800      	cmp	r0, #0
 802e5e0:	d0df      	beq.n	802e5a2 <_scanf_i+0x11e>
 802e5e2:	6823      	ldr	r3, [r4, #0]
 802e5e4:	05d9      	lsls	r1, r3, #23
 802e5e6:	d50d      	bpl.n	802e604 <_scanf_i+0x180>
 802e5e8:	42bd      	cmp	r5, r7
 802e5ea:	d909      	bls.n	802e600 <_scanf_i+0x17c>
 802e5ec:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802e5f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802e5f4:	4632      	mov	r2, r6
 802e5f6:	4650      	mov	r0, sl
 802e5f8:	4798      	blx	r3
 802e5fa:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 802e5fe:	464d      	mov	r5, r9
 802e600:	42bd      	cmp	r5, r7
 802e602:	d028      	beq.n	802e656 <_scanf_i+0x1d2>
 802e604:	6822      	ldr	r2, [r4, #0]
 802e606:	f012 0210 	ands.w	r2, r2, #16
 802e60a:	d113      	bne.n	802e634 <_scanf_i+0x1b0>
 802e60c:	702a      	strb	r2, [r5, #0]
 802e60e:	6863      	ldr	r3, [r4, #4]
 802e610:	9e01      	ldr	r6, [sp, #4]
 802e612:	4639      	mov	r1, r7
 802e614:	4650      	mov	r0, sl
 802e616:	47b0      	blx	r6
 802e618:	f8d8 3000 	ldr.w	r3, [r8]
 802e61c:	6821      	ldr	r1, [r4, #0]
 802e61e:	1d1a      	adds	r2, r3, #4
 802e620:	f8c8 2000 	str.w	r2, [r8]
 802e624:	f011 0f20 	tst.w	r1, #32
 802e628:	681b      	ldr	r3, [r3, #0]
 802e62a:	d00f      	beq.n	802e64c <_scanf_i+0x1c8>
 802e62c:	6018      	str	r0, [r3, #0]
 802e62e:	68e3      	ldr	r3, [r4, #12]
 802e630:	3301      	adds	r3, #1
 802e632:	60e3      	str	r3, [r4, #12]
 802e634:	6923      	ldr	r3, [r4, #16]
 802e636:	1bed      	subs	r5, r5, r7
 802e638:	445d      	add	r5, fp
 802e63a:	442b      	add	r3, r5
 802e63c:	6123      	str	r3, [r4, #16]
 802e63e:	2000      	movs	r0, #0
 802e640:	b007      	add	sp, #28
 802e642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e646:	f04f 0b00 	mov.w	fp, #0
 802e64a:	e7ca      	b.n	802e5e2 <_scanf_i+0x15e>
 802e64c:	07ca      	lsls	r2, r1, #31
 802e64e:	bf4c      	ite	mi
 802e650:	8018      	strhmi	r0, [r3, #0]
 802e652:	6018      	strpl	r0, [r3, #0]
 802e654:	e7eb      	b.n	802e62e <_scanf_i+0x1aa>
 802e656:	2001      	movs	r0, #1
 802e658:	e7f2      	b.n	802e640 <_scanf_i+0x1bc>
 802e65a:	bf00      	nop
 802e65c:	08031660 	.word	0x08031660
 802e660:	0802b5c1 	.word	0x0802b5c1
 802e664:	0802d7b9 	.word	0x0802d7b9
 802e668:	0803a873 	.word	0x0803a873

0802e66c <__sflush_r>:
 802e66c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802e670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e674:	0716      	lsls	r6, r2, #28
 802e676:	4605      	mov	r5, r0
 802e678:	460c      	mov	r4, r1
 802e67a:	d454      	bmi.n	802e726 <__sflush_r+0xba>
 802e67c:	684b      	ldr	r3, [r1, #4]
 802e67e:	2b00      	cmp	r3, #0
 802e680:	dc02      	bgt.n	802e688 <__sflush_r+0x1c>
 802e682:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802e684:	2b00      	cmp	r3, #0
 802e686:	dd48      	ble.n	802e71a <__sflush_r+0xae>
 802e688:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802e68a:	2e00      	cmp	r6, #0
 802e68c:	d045      	beq.n	802e71a <__sflush_r+0xae>
 802e68e:	2300      	movs	r3, #0
 802e690:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802e694:	682f      	ldr	r7, [r5, #0]
 802e696:	6a21      	ldr	r1, [r4, #32]
 802e698:	602b      	str	r3, [r5, #0]
 802e69a:	d030      	beq.n	802e6fe <__sflush_r+0x92>
 802e69c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802e69e:	89a3      	ldrh	r3, [r4, #12]
 802e6a0:	0759      	lsls	r1, r3, #29
 802e6a2:	d505      	bpl.n	802e6b0 <__sflush_r+0x44>
 802e6a4:	6863      	ldr	r3, [r4, #4]
 802e6a6:	1ad2      	subs	r2, r2, r3
 802e6a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802e6aa:	b10b      	cbz	r3, 802e6b0 <__sflush_r+0x44>
 802e6ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802e6ae:	1ad2      	subs	r2, r2, r3
 802e6b0:	2300      	movs	r3, #0
 802e6b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802e6b4:	6a21      	ldr	r1, [r4, #32]
 802e6b6:	4628      	mov	r0, r5
 802e6b8:	47b0      	blx	r6
 802e6ba:	1c43      	adds	r3, r0, #1
 802e6bc:	89a3      	ldrh	r3, [r4, #12]
 802e6be:	d106      	bne.n	802e6ce <__sflush_r+0x62>
 802e6c0:	6829      	ldr	r1, [r5, #0]
 802e6c2:	291d      	cmp	r1, #29
 802e6c4:	d82b      	bhi.n	802e71e <__sflush_r+0xb2>
 802e6c6:	4a2a      	ldr	r2, [pc, #168]	@ (802e770 <__sflush_r+0x104>)
 802e6c8:	410a      	asrs	r2, r1
 802e6ca:	07d6      	lsls	r6, r2, #31
 802e6cc:	d427      	bmi.n	802e71e <__sflush_r+0xb2>
 802e6ce:	2200      	movs	r2, #0
 802e6d0:	6062      	str	r2, [r4, #4]
 802e6d2:	04d9      	lsls	r1, r3, #19
 802e6d4:	6922      	ldr	r2, [r4, #16]
 802e6d6:	6022      	str	r2, [r4, #0]
 802e6d8:	d504      	bpl.n	802e6e4 <__sflush_r+0x78>
 802e6da:	1c42      	adds	r2, r0, #1
 802e6dc:	d101      	bne.n	802e6e2 <__sflush_r+0x76>
 802e6de:	682b      	ldr	r3, [r5, #0]
 802e6e0:	b903      	cbnz	r3, 802e6e4 <__sflush_r+0x78>
 802e6e2:	6560      	str	r0, [r4, #84]	@ 0x54
 802e6e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802e6e6:	602f      	str	r7, [r5, #0]
 802e6e8:	b1b9      	cbz	r1, 802e71a <__sflush_r+0xae>
 802e6ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802e6ee:	4299      	cmp	r1, r3
 802e6f0:	d002      	beq.n	802e6f8 <__sflush_r+0x8c>
 802e6f2:	4628      	mov	r0, r5
 802e6f4:	f7fd ff60 	bl	802c5b8 <_free_r>
 802e6f8:	2300      	movs	r3, #0
 802e6fa:	6363      	str	r3, [r4, #52]	@ 0x34
 802e6fc:	e00d      	b.n	802e71a <__sflush_r+0xae>
 802e6fe:	2301      	movs	r3, #1
 802e700:	4628      	mov	r0, r5
 802e702:	47b0      	blx	r6
 802e704:	4602      	mov	r2, r0
 802e706:	1c50      	adds	r0, r2, #1
 802e708:	d1c9      	bne.n	802e69e <__sflush_r+0x32>
 802e70a:	682b      	ldr	r3, [r5, #0]
 802e70c:	2b00      	cmp	r3, #0
 802e70e:	d0c6      	beq.n	802e69e <__sflush_r+0x32>
 802e710:	2b1d      	cmp	r3, #29
 802e712:	d001      	beq.n	802e718 <__sflush_r+0xac>
 802e714:	2b16      	cmp	r3, #22
 802e716:	d11e      	bne.n	802e756 <__sflush_r+0xea>
 802e718:	602f      	str	r7, [r5, #0]
 802e71a:	2000      	movs	r0, #0
 802e71c:	e022      	b.n	802e764 <__sflush_r+0xf8>
 802e71e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802e722:	b21b      	sxth	r3, r3
 802e724:	e01b      	b.n	802e75e <__sflush_r+0xf2>
 802e726:	690f      	ldr	r7, [r1, #16]
 802e728:	2f00      	cmp	r7, #0
 802e72a:	d0f6      	beq.n	802e71a <__sflush_r+0xae>
 802e72c:	0793      	lsls	r3, r2, #30
 802e72e:	680e      	ldr	r6, [r1, #0]
 802e730:	bf08      	it	eq
 802e732:	694b      	ldreq	r3, [r1, #20]
 802e734:	600f      	str	r7, [r1, #0]
 802e736:	bf18      	it	ne
 802e738:	2300      	movne	r3, #0
 802e73a:	eba6 0807 	sub.w	r8, r6, r7
 802e73e:	608b      	str	r3, [r1, #8]
 802e740:	f1b8 0f00 	cmp.w	r8, #0
 802e744:	dde9      	ble.n	802e71a <__sflush_r+0xae>
 802e746:	6a21      	ldr	r1, [r4, #32]
 802e748:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802e74a:	4643      	mov	r3, r8
 802e74c:	463a      	mov	r2, r7
 802e74e:	4628      	mov	r0, r5
 802e750:	47b0      	blx	r6
 802e752:	2800      	cmp	r0, #0
 802e754:	dc08      	bgt.n	802e768 <__sflush_r+0xfc>
 802e756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e75a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802e75e:	81a3      	strh	r3, [r4, #12]
 802e760:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e768:	4407      	add	r7, r0
 802e76a:	eba8 0800 	sub.w	r8, r8, r0
 802e76e:	e7e7      	b.n	802e740 <__sflush_r+0xd4>
 802e770:	dfbffffe 	.word	0xdfbffffe

0802e774 <_fflush_r>:
 802e774:	b538      	push	{r3, r4, r5, lr}
 802e776:	690b      	ldr	r3, [r1, #16]
 802e778:	4605      	mov	r5, r0
 802e77a:	460c      	mov	r4, r1
 802e77c:	b913      	cbnz	r3, 802e784 <_fflush_r+0x10>
 802e77e:	2500      	movs	r5, #0
 802e780:	4628      	mov	r0, r5
 802e782:	bd38      	pop	{r3, r4, r5, pc}
 802e784:	b118      	cbz	r0, 802e78e <_fflush_r+0x1a>
 802e786:	6a03      	ldr	r3, [r0, #32]
 802e788:	b90b      	cbnz	r3, 802e78e <_fflush_r+0x1a>
 802e78a:	f7fc ffb1 	bl	802b6f0 <__sinit>
 802e78e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e792:	2b00      	cmp	r3, #0
 802e794:	d0f3      	beq.n	802e77e <_fflush_r+0xa>
 802e796:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802e798:	07d0      	lsls	r0, r2, #31
 802e79a:	d404      	bmi.n	802e7a6 <_fflush_r+0x32>
 802e79c:	0599      	lsls	r1, r3, #22
 802e79e:	d402      	bmi.n	802e7a6 <_fflush_r+0x32>
 802e7a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802e7a2:	f7fd fedd 	bl	802c560 <__retarget_lock_acquire_recursive>
 802e7a6:	4628      	mov	r0, r5
 802e7a8:	4621      	mov	r1, r4
 802e7aa:	f7ff ff5f 	bl	802e66c <__sflush_r>
 802e7ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802e7b0:	07da      	lsls	r2, r3, #31
 802e7b2:	4605      	mov	r5, r0
 802e7b4:	d4e4      	bmi.n	802e780 <_fflush_r+0xc>
 802e7b6:	89a3      	ldrh	r3, [r4, #12]
 802e7b8:	059b      	lsls	r3, r3, #22
 802e7ba:	d4e1      	bmi.n	802e780 <_fflush_r+0xc>
 802e7bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802e7be:	f7fd fed1 	bl	802c564 <__retarget_lock_release_recursive>
 802e7c2:	e7dd      	b.n	802e780 <_fflush_r+0xc>

0802e7c4 <__swhatbuf_r>:
 802e7c4:	b570      	push	{r4, r5, r6, lr}
 802e7c6:	460c      	mov	r4, r1
 802e7c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e7cc:	2900      	cmp	r1, #0
 802e7ce:	b096      	sub	sp, #88	@ 0x58
 802e7d0:	4615      	mov	r5, r2
 802e7d2:	461e      	mov	r6, r3
 802e7d4:	da0d      	bge.n	802e7f2 <__swhatbuf_r+0x2e>
 802e7d6:	89a3      	ldrh	r3, [r4, #12]
 802e7d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802e7dc:	f04f 0100 	mov.w	r1, #0
 802e7e0:	bf14      	ite	ne
 802e7e2:	2340      	movne	r3, #64	@ 0x40
 802e7e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802e7e8:	2000      	movs	r0, #0
 802e7ea:	6031      	str	r1, [r6, #0]
 802e7ec:	602b      	str	r3, [r5, #0]
 802e7ee:	b016      	add	sp, #88	@ 0x58
 802e7f0:	bd70      	pop	{r4, r5, r6, pc}
 802e7f2:	466a      	mov	r2, sp
 802e7f4:	f000 f9ca 	bl	802eb8c <_fstat_r>
 802e7f8:	2800      	cmp	r0, #0
 802e7fa:	dbec      	blt.n	802e7d6 <__swhatbuf_r+0x12>
 802e7fc:	9901      	ldr	r1, [sp, #4]
 802e7fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802e802:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802e806:	4259      	negs	r1, r3
 802e808:	4159      	adcs	r1, r3
 802e80a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802e80e:	e7eb      	b.n	802e7e8 <__swhatbuf_r+0x24>

0802e810 <__smakebuf_r>:
 802e810:	898b      	ldrh	r3, [r1, #12]
 802e812:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802e814:	079d      	lsls	r5, r3, #30
 802e816:	4606      	mov	r6, r0
 802e818:	460c      	mov	r4, r1
 802e81a:	d507      	bpl.n	802e82c <__smakebuf_r+0x1c>
 802e81c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802e820:	6023      	str	r3, [r4, #0]
 802e822:	6123      	str	r3, [r4, #16]
 802e824:	2301      	movs	r3, #1
 802e826:	6163      	str	r3, [r4, #20]
 802e828:	b003      	add	sp, #12
 802e82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802e82c:	ab01      	add	r3, sp, #4
 802e82e:	466a      	mov	r2, sp
 802e830:	f7ff ffc8 	bl	802e7c4 <__swhatbuf_r>
 802e834:	9f00      	ldr	r7, [sp, #0]
 802e836:	4605      	mov	r5, r0
 802e838:	4639      	mov	r1, r7
 802e83a:	4630      	mov	r0, r6
 802e83c:	f7fb ff5c 	bl	802a6f8 <_malloc_r>
 802e840:	b948      	cbnz	r0, 802e856 <__smakebuf_r+0x46>
 802e842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e846:	059a      	lsls	r2, r3, #22
 802e848:	d4ee      	bmi.n	802e828 <__smakebuf_r+0x18>
 802e84a:	f023 0303 	bic.w	r3, r3, #3
 802e84e:	f043 0302 	orr.w	r3, r3, #2
 802e852:	81a3      	strh	r3, [r4, #12]
 802e854:	e7e2      	b.n	802e81c <__smakebuf_r+0xc>
 802e856:	89a3      	ldrh	r3, [r4, #12]
 802e858:	6020      	str	r0, [r4, #0]
 802e85a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802e85e:	81a3      	strh	r3, [r4, #12]
 802e860:	9b01      	ldr	r3, [sp, #4]
 802e862:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802e866:	b15b      	cbz	r3, 802e880 <__smakebuf_r+0x70>
 802e868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802e86c:	4630      	mov	r0, r6
 802e86e:	f000 f99f 	bl	802ebb0 <_isatty_r>
 802e872:	b128      	cbz	r0, 802e880 <__smakebuf_r+0x70>
 802e874:	89a3      	ldrh	r3, [r4, #12]
 802e876:	f023 0303 	bic.w	r3, r3, #3
 802e87a:	f043 0301 	orr.w	r3, r3, #1
 802e87e:	81a3      	strh	r3, [r4, #12]
 802e880:	89a3      	ldrh	r3, [r4, #12]
 802e882:	431d      	orrs	r5, r3
 802e884:	81a5      	strh	r5, [r4, #12]
 802e886:	e7cf      	b.n	802e828 <__smakebuf_r+0x18>

0802e888 <_putc_r>:
 802e888:	b570      	push	{r4, r5, r6, lr}
 802e88a:	460d      	mov	r5, r1
 802e88c:	4614      	mov	r4, r2
 802e88e:	4606      	mov	r6, r0
 802e890:	b118      	cbz	r0, 802e89a <_putc_r+0x12>
 802e892:	6a03      	ldr	r3, [r0, #32]
 802e894:	b90b      	cbnz	r3, 802e89a <_putc_r+0x12>
 802e896:	f7fc ff2b 	bl	802b6f0 <__sinit>
 802e89a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802e89c:	07d8      	lsls	r0, r3, #31
 802e89e:	d405      	bmi.n	802e8ac <_putc_r+0x24>
 802e8a0:	89a3      	ldrh	r3, [r4, #12]
 802e8a2:	0599      	lsls	r1, r3, #22
 802e8a4:	d402      	bmi.n	802e8ac <_putc_r+0x24>
 802e8a6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802e8a8:	f7fd fe5a 	bl	802c560 <__retarget_lock_acquire_recursive>
 802e8ac:	68a3      	ldr	r3, [r4, #8]
 802e8ae:	3b01      	subs	r3, #1
 802e8b0:	2b00      	cmp	r3, #0
 802e8b2:	60a3      	str	r3, [r4, #8]
 802e8b4:	da05      	bge.n	802e8c2 <_putc_r+0x3a>
 802e8b6:	69a2      	ldr	r2, [r4, #24]
 802e8b8:	4293      	cmp	r3, r2
 802e8ba:	db12      	blt.n	802e8e2 <_putc_r+0x5a>
 802e8bc:	b2eb      	uxtb	r3, r5
 802e8be:	2b0a      	cmp	r3, #10
 802e8c0:	d00f      	beq.n	802e8e2 <_putc_r+0x5a>
 802e8c2:	6823      	ldr	r3, [r4, #0]
 802e8c4:	1c5a      	adds	r2, r3, #1
 802e8c6:	6022      	str	r2, [r4, #0]
 802e8c8:	701d      	strb	r5, [r3, #0]
 802e8ca:	b2ed      	uxtb	r5, r5
 802e8cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802e8ce:	07da      	lsls	r2, r3, #31
 802e8d0:	d405      	bmi.n	802e8de <_putc_r+0x56>
 802e8d2:	89a3      	ldrh	r3, [r4, #12]
 802e8d4:	059b      	lsls	r3, r3, #22
 802e8d6:	d402      	bmi.n	802e8de <_putc_r+0x56>
 802e8d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802e8da:	f7fd fe43 	bl	802c564 <__retarget_lock_release_recursive>
 802e8de:	4628      	mov	r0, r5
 802e8e0:	bd70      	pop	{r4, r5, r6, pc}
 802e8e2:	4629      	mov	r1, r5
 802e8e4:	4622      	mov	r2, r4
 802e8e6:	4630      	mov	r0, r6
 802e8e8:	f7fd f851 	bl	802b98e <__swbuf_r>
 802e8ec:	4605      	mov	r5, r0
 802e8ee:	e7ed      	b.n	802e8cc <_putc_r+0x44>

0802e8f0 <__sccl>:
 802e8f0:	b570      	push	{r4, r5, r6, lr}
 802e8f2:	780b      	ldrb	r3, [r1, #0]
 802e8f4:	4604      	mov	r4, r0
 802e8f6:	2b5e      	cmp	r3, #94	@ 0x5e
 802e8f8:	bf0b      	itete	eq
 802e8fa:	784b      	ldrbeq	r3, [r1, #1]
 802e8fc:	1c4a      	addne	r2, r1, #1
 802e8fe:	1c8a      	addeq	r2, r1, #2
 802e900:	2100      	movne	r1, #0
 802e902:	bf08      	it	eq
 802e904:	2101      	moveq	r1, #1
 802e906:	3801      	subs	r0, #1
 802e908:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 802e90c:	f800 1f01 	strb.w	r1, [r0, #1]!
 802e910:	42a8      	cmp	r0, r5
 802e912:	d1fb      	bne.n	802e90c <__sccl+0x1c>
 802e914:	b90b      	cbnz	r3, 802e91a <__sccl+0x2a>
 802e916:	1e50      	subs	r0, r2, #1
 802e918:	bd70      	pop	{r4, r5, r6, pc}
 802e91a:	f081 0101 	eor.w	r1, r1, #1
 802e91e:	54e1      	strb	r1, [r4, r3]
 802e920:	4610      	mov	r0, r2
 802e922:	4602      	mov	r2, r0
 802e924:	f812 5b01 	ldrb.w	r5, [r2], #1
 802e928:	2d2d      	cmp	r5, #45	@ 0x2d
 802e92a:	d005      	beq.n	802e938 <__sccl+0x48>
 802e92c:	2d5d      	cmp	r5, #93	@ 0x5d
 802e92e:	d016      	beq.n	802e95e <__sccl+0x6e>
 802e930:	2d00      	cmp	r5, #0
 802e932:	d0f1      	beq.n	802e918 <__sccl+0x28>
 802e934:	462b      	mov	r3, r5
 802e936:	e7f2      	b.n	802e91e <__sccl+0x2e>
 802e938:	7846      	ldrb	r6, [r0, #1]
 802e93a:	2e5d      	cmp	r6, #93	@ 0x5d
 802e93c:	d0fa      	beq.n	802e934 <__sccl+0x44>
 802e93e:	42b3      	cmp	r3, r6
 802e940:	dcf8      	bgt.n	802e934 <__sccl+0x44>
 802e942:	3002      	adds	r0, #2
 802e944:	461a      	mov	r2, r3
 802e946:	3201      	adds	r2, #1
 802e948:	4296      	cmp	r6, r2
 802e94a:	54a1      	strb	r1, [r4, r2]
 802e94c:	dcfb      	bgt.n	802e946 <__sccl+0x56>
 802e94e:	1af2      	subs	r2, r6, r3
 802e950:	3a01      	subs	r2, #1
 802e952:	1c5d      	adds	r5, r3, #1
 802e954:	42b3      	cmp	r3, r6
 802e956:	bfa8      	it	ge
 802e958:	2200      	movge	r2, #0
 802e95a:	18ab      	adds	r3, r5, r2
 802e95c:	e7e1      	b.n	802e922 <__sccl+0x32>
 802e95e:	4610      	mov	r0, r2
 802e960:	e7da      	b.n	802e918 <__sccl+0x28>

0802e962 <__submore>:
 802e962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e966:	460c      	mov	r4, r1
 802e968:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 802e96a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802e96e:	4299      	cmp	r1, r3
 802e970:	d11d      	bne.n	802e9ae <__submore+0x4c>
 802e972:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 802e976:	f7fb febf 	bl	802a6f8 <_malloc_r>
 802e97a:	b918      	cbnz	r0, 802e984 <__submore+0x22>
 802e97c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e984:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802e988:	63a3      	str	r3, [r4, #56]	@ 0x38
 802e98a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 802e98e:	6360      	str	r0, [r4, #52]	@ 0x34
 802e990:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 802e994:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 802e998:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 802e99c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 802e9a0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 802e9a4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 802e9a8:	6020      	str	r0, [r4, #0]
 802e9aa:	2000      	movs	r0, #0
 802e9ac:	e7e8      	b.n	802e980 <__submore+0x1e>
 802e9ae:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 802e9b0:	0077      	lsls	r7, r6, #1
 802e9b2:	463a      	mov	r2, r7
 802e9b4:	f7fb ffa0 	bl	802a8f8 <_realloc_r>
 802e9b8:	4605      	mov	r5, r0
 802e9ba:	2800      	cmp	r0, #0
 802e9bc:	d0de      	beq.n	802e97c <__submore+0x1a>
 802e9be:	eb00 0806 	add.w	r8, r0, r6
 802e9c2:	4601      	mov	r1, r0
 802e9c4:	4632      	mov	r2, r6
 802e9c6:	4640      	mov	r0, r8
 802e9c8:	f7fd fdd5 	bl	802c576 <memcpy>
 802e9cc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 802e9d0:	f8c4 8000 	str.w	r8, [r4]
 802e9d4:	e7e9      	b.n	802e9aa <__submore+0x48>

0802e9d6 <_raise_r>:
 802e9d6:	291f      	cmp	r1, #31
 802e9d8:	b538      	push	{r3, r4, r5, lr}
 802e9da:	4605      	mov	r5, r0
 802e9dc:	460c      	mov	r4, r1
 802e9de:	d904      	bls.n	802e9ea <_raise_r+0x14>
 802e9e0:	2316      	movs	r3, #22
 802e9e2:	6003      	str	r3, [r0, #0]
 802e9e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e9e8:	bd38      	pop	{r3, r4, r5, pc}
 802e9ea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802e9ec:	b112      	cbz	r2, 802e9f4 <_raise_r+0x1e>
 802e9ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802e9f2:	b94b      	cbnz	r3, 802ea08 <_raise_r+0x32>
 802e9f4:	4628      	mov	r0, r5
 802e9f6:	f000 f8fd 	bl	802ebf4 <_getpid_r>
 802e9fa:	4622      	mov	r2, r4
 802e9fc:	4601      	mov	r1, r0
 802e9fe:	4628      	mov	r0, r5
 802ea00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802ea04:	f000 b8e4 	b.w	802ebd0 <_kill_r>
 802ea08:	2b01      	cmp	r3, #1
 802ea0a:	d00a      	beq.n	802ea22 <_raise_r+0x4c>
 802ea0c:	1c59      	adds	r1, r3, #1
 802ea0e:	d103      	bne.n	802ea18 <_raise_r+0x42>
 802ea10:	2316      	movs	r3, #22
 802ea12:	6003      	str	r3, [r0, #0]
 802ea14:	2001      	movs	r0, #1
 802ea16:	e7e7      	b.n	802e9e8 <_raise_r+0x12>
 802ea18:	2100      	movs	r1, #0
 802ea1a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802ea1e:	4620      	mov	r0, r4
 802ea20:	4798      	blx	r3
 802ea22:	2000      	movs	r0, #0
 802ea24:	e7e0      	b.n	802e9e8 <_raise_r+0x12>
	...

0802ea28 <raise>:
 802ea28:	4b02      	ldr	r3, [pc, #8]	@ (802ea34 <raise+0xc>)
 802ea2a:	4601      	mov	r1, r0
 802ea2c:	6818      	ldr	r0, [r3, #0]
 802ea2e:	f7ff bfd2 	b.w	802e9d6 <_raise_r>
 802ea32:	bf00      	nop
 802ea34:	20000460 	.word	0x20000460

0802ea38 <__gettzinfo>:
 802ea38:	4800      	ldr	r0, [pc, #0]	@ (802ea3c <__gettzinfo+0x4>)
 802ea3a:	4770      	bx	lr
 802ea3c:	200004b0 	.word	0x200004b0

0802ea40 <gmtime_r>:
 802ea40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ea44:	4a4d      	ldr	r2, [pc, #308]	@ (802eb7c <gmtime_r+0x13c>)
 802ea46:	460c      	mov	r4, r1
 802ea48:	2300      	movs	r3, #0
 802ea4a:	e9d0 0100 	ldrd	r0, r1, [r0]
 802ea4e:	f7d1 fe1b 	bl	8000688 <__aeabi_ldivmod>
 802ea52:	2a00      	cmp	r2, #0
 802ea54:	bfbc      	itt	lt
 802ea56:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 802ea5a:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 802ea5e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802ea62:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 802ea66:	fbb2 f3f1 	udiv	r3, r2, r1
 802ea6a:	fb01 2213 	mls	r2, r1, r3, r2
 802ea6e:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 802ea72:	bfac      	ite	ge
 802ea74:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 802ea78:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 802ea7c:	60a3      	str	r3, [r4, #8]
 802ea7e:	fbb2 f3f1 	udiv	r3, r2, r1
 802ea82:	fb01 2213 	mls	r2, r1, r3, r2
 802ea86:	6063      	str	r3, [r4, #4]
 802ea88:	6022      	str	r2, [r4, #0]
 802ea8a:	1cc3      	adds	r3, r0, #3
 802ea8c:	2207      	movs	r2, #7
 802ea8e:	fb93 f2f2 	sdiv	r2, r3, r2
 802ea92:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 802ea96:	1a9b      	subs	r3, r3, r2
 802ea98:	bf48      	it	mi
 802ea9a:	3307      	addmi	r3, #7
 802ea9c:	2800      	cmp	r0, #0
 802ea9e:	61a3      	str	r3, [r4, #24]
 802eaa0:	bfb8      	it	lt
 802eaa2:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 802eaa6:	4936      	ldr	r1, [pc, #216]	@ (802eb80 <gmtime_r+0x140>)
 802eaa8:	bfae      	itee	ge
 802eaaa:	fb90 f1f1 	sdivge	r1, r0, r1
 802eaae:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 802eab2:	fb93 f1f1 	sdivlt	r1, r3, r1
 802eab6:	4b33      	ldr	r3, [pc, #204]	@ (802eb84 <gmtime_r+0x144>)
 802eab8:	fb03 0001 	mla	r0, r3, r1, r0
 802eabc:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 802eac0:	fbb0 f3f3 	udiv	r3, r0, r3
 802eac4:	4403      	add	r3, r0
 802eac6:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 802eaca:	fbb0 f2fc 	udiv	r2, r0, ip
 802eace:	1a9b      	subs	r3, r3, r2
 802ead0:	f240 176d 	movw	r7, #365	@ 0x16d
 802ead4:	4a2c      	ldr	r2, [pc, #176]	@ (802eb88 <gmtime_r+0x148>)
 802ead6:	fbb0 f2f2 	udiv	r2, r0, r2
 802eada:	2664      	movs	r6, #100	@ 0x64
 802eadc:	1a9b      	subs	r3, r3, r2
 802eade:	fbb3 f2f7 	udiv	r2, r3, r7
 802eae2:	fbb3 f3fc 	udiv	r3, r3, ip
 802eae6:	fbb2 f5f6 	udiv	r5, r2, r6
 802eaea:	1aeb      	subs	r3, r5, r3
 802eaec:	4403      	add	r3, r0
 802eaee:	fb07 3312 	mls	r3, r7, r2, r3
 802eaf2:	2099      	movs	r0, #153	@ 0x99
 802eaf4:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 802eaf8:	3702      	adds	r7, #2
 802eafa:	f103 0e01 	add.w	lr, r3, #1
 802eafe:	fbb7 fcf0 	udiv	ip, r7, r0
 802eb02:	fb00 f00c 	mul.w	r0, r0, ip
 802eb06:	3002      	adds	r0, #2
 802eb08:	f04f 0805 	mov.w	r8, #5
 802eb0c:	fbb0 f0f8 	udiv	r0, r0, r8
 802eb10:	ebae 0000 	sub.w	r0, lr, r0
 802eb14:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 802eb18:	4577      	cmp	r7, lr
 802eb1a:	bf8c      	ite	hi
 802eb1c:	f06f 0709 	mvnhi.w	r7, #9
 802eb20:	2702      	movls	r7, #2
 802eb22:	4467      	add	r7, ip
 802eb24:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 802eb28:	fb0c 2101 	mla	r1, ip, r1, r2
 802eb2c:	2f01      	cmp	r7, #1
 802eb2e:	bf98      	it	ls
 802eb30:	3101      	addls	r1, #1
 802eb32:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 802eb36:	d30c      	bcc.n	802eb52 <gmtime_r+0x112>
 802eb38:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 802eb3c:	61e3      	str	r3, [r4, #28]
 802eb3e:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 802eb42:	2300      	movs	r3, #0
 802eb44:	60e0      	str	r0, [r4, #12]
 802eb46:	e9c4 7104 	strd	r7, r1, [r4, #16]
 802eb4a:	6223      	str	r3, [r4, #32]
 802eb4c:	4620      	mov	r0, r4
 802eb4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802eb52:	f012 0f03 	tst.w	r2, #3
 802eb56:	d102      	bne.n	802eb5e <gmtime_r+0x11e>
 802eb58:	fb06 2515 	mls	r5, r6, r5, r2
 802eb5c:	b95d      	cbnz	r5, 802eb76 <gmtime_r+0x136>
 802eb5e:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 802eb62:	fbb2 f6f5 	udiv	r6, r2, r5
 802eb66:	fb05 2216 	mls	r2, r5, r6, r2
 802eb6a:	fab2 f282 	clz	r2, r2
 802eb6e:	0952      	lsrs	r2, r2, #5
 802eb70:	333b      	adds	r3, #59	@ 0x3b
 802eb72:	4413      	add	r3, r2
 802eb74:	e7e2      	b.n	802eb3c <gmtime_r+0xfc>
 802eb76:	2201      	movs	r2, #1
 802eb78:	e7fa      	b.n	802eb70 <gmtime_r+0x130>
 802eb7a:	bf00      	nop
 802eb7c:	00015180 	.word	0x00015180
 802eb80:	00023ab1 	.word	0x00023ab1
 802eb84:	fffdc54f 	.word	0xfffdc54f
 802eb88:	00023ab0 	.word	0x00023ab0

0802eb8c <_fstat_r>:
 802eb8c:	b538      	push	{r3, r4, r5, lr}
 802eb8e:	4d07      	ldr	r5, [pc, #28]	@ (802ebac <_fstat_r+0x20>)
 802eb90:	2300      	movs	r3, #0
 802eb92:	4604      	mov	r4, r0
 802eb94:	4608      	mov	r0, r1
 802eb96:	4611      	mov	r1, r2
 802eb98:	602b      	str	r3, [r5, #0]
 802eb9a:	f7e9 fc5b 	bl	8018454 <_fstat>
 802eb9e:	1c43      	adds	r3, r0, #1
 802eba0:	d102      	bne.n	802eba8 <_fstat_r+0x1c>
 802eba2:	682b      	ldr	r3, [r5, #0]
 802eba4:	b103      	cbz	r3, 802eba8 <_fstat_r+0x1c>
 802eba6:	6023      	str	r3, [r4, #0]
 802eba8:	bd38      	pop	{r3, r4, r5, pc}
 802ebaa:	bf00      	nop
 802ebac:	2002e814 	.word	0x2002e814

0802ebb0 <_isatty_r>:
 802ebb0:	b538      	push	{r3, r4, r5, lr}
 802ebb2:	4d06      	ldr	r5, [pc, #24]	@ (802ebcc <_isatty_r+0x1c>)
 802ebb4:	2300      	movs	r3, #0
 802ebb6:	4604      	mov	r4, r0
 802ebb8:	4608      	mov	r0, r1
 802ebba:	602b      	str	r3, [r5, #0]
 802ebbc:	f7e9 fc5a 	bl	8018474 <_isatty>
 802ebc0:	1c43      	adds	r3, r0, #1
 802ebc2:	d102      	bne.n	802ebca <_isatty_r+0x1a>
 802ebc4:	682b      	ldr	r3, [r5, #0]
 802ebc6:	b103      	cbz	r3, 802ebca <_isatty_r+0x1a>
 802ebc8:	6023      	str	r3, [r4, #0]
 802ebca:	bd38      	pop	{r3, r4, r5, pc}
 802ebcc:	2002e814 	.word	0x2002e814

0802ebd0 <_kill_r>:
 802ebd0:	b538      	push	{r3, r4, r5, lr}
 802ebd2:	4d07      	ldr	r5, [pc, #28]	@ (802ebf0 <_kill_r+0x20>)
 802ebd4:	2300      	movs	r3, #0
 802ebd6:	4604      	mov	r4, r0
 802ebd8:	4608      	mov	r0, r1
 802ebda:	4611      	mov	r1, r2
 802ebdc:	602b      	str	r3, [r5, #0]
 802ebde:	f7e9 fbd9 	bl	8018394 <_kill>
 802ebe2:	1c43      	adds	r3, r0, #1
 802ebe4:	d102      	bne.n	802ebec <_kill_r+0x1c>
 802ebe6:	682b      	ldr	r3, [r5, #0]
 802ebe8:	b103      	cbz	r3, 802ebec <_kill_r+0x1c>
 802ebea:	6023      	str	r3, [r4, #0]
 802ebec:	bd38      	pop	{r3, r4, r5, pc}
 802ebee:	bf00      	nop
 802ebf0:	2002e814 	.word	0x2002e814

0802ebf4 <_getpid_r>:
 802ebf4:	f7e9 bbc6 	b.w	8018384 <_getpid>

0802ebf8 <__env_lock>:
 802ebf8:	4801      	ldr	r0, [pc, #4]	@ (802ec00 <__env_lock+0x8>)
 802ebfa:	f7fd bcb1 	b.w	802c560 <__retarget_lock_acquire_recursive>
 802ebfe:	bf00      	nop
 802ec00:	2002e819 	.word	0x2002e819

0802ec04 <__env_unlock>:
 802ec04:	4801      	ldr	r0, [pc, #4]	@ (802ec0c <__env_unlock+0x8>)
 802ec06:	f7fd bcad 	b.w	802c564 <__retarget_lock_release_recursive>
 802ec0a:	bf00      	nop
 802ec0c:	2002e819 	.word	0x2002e819

0802ec10 <_init>:
 802ec10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ec12:	bf00      	nop
 802ec14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ec16:	bc08      	pop	{r3}
 802ec18:	469e      	mov	lr, r3
 802ec1a:	4770      	bx	lr

0802ec1c <_fini>:
 802ec1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ec1e:	bf00      	nop
 802ec20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ec22:	bc08      	pop	{r3}
 802ec24:	469e      	mov	lr, r3
 802ec26:	4770      	bx	lr
